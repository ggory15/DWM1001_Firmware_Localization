
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20 4a 00 20 f5 6f 00 00 39 f4 01 00 25 70 00 00      J. .o..9...%p..
  10:	25 70 00 00 25 70 00 00 25 70 00 00 00 00 00 00     %p..%p..%p......
	...
  2c:	dd 6c 00 00 25 70 00 00 00 00 00 00 39 6c 00 00     .l..%p......9l..
  3c:	49 e1 01 00                                         I...

00000040 <_irq_vector_table>:
  40:	b5 6f 00 00 b1 72 01 00 b5 6f 00 00 b5 6f 00 00     .o...r...o...o..
  50:	b5 6f 00 00 b5 6f 00 00 b5 6f 00 00 b5 6f 00 00     .o...o...o...o..
  60:	b5 6f 00 00 b5 6f 00 00 b5 6f 00 00 b5 6f 00 00     .o...o...o...o..
  70:	b5 6f 00 00 b5 6f 00 00 b5 6f 00 00 b5 6f 00 00     .o...o...o...o..
  80:	b5 6f 00 00 b5 6f 00 00 b5 6f 00 00 b5 6f 00 00     .o...o...o...o..
  90:	b5 6f 00 00 b5 6f 00 00 b5 6f 00 00 b5 6f 00 00     .o...o...o...o..
  a0:	b5 6f 00 00 b5 6f 00 00 b5 6f 00 00 b5 6f 00 00     .o...o...o...o..
  b0:	b5 6f 00 00 b5 6f 00 00 b5 6f 00 00 b5 6f 00 00     .o...o...o...o..
  c0:	b5 6f 00 00 b5 6f 00 00 b5 6f 00 00 b5 6f 00 00     .o...o...o...o..
  d0:	b5 6f 00 00 b5 6f 00 00 b5 6f 00 00                 .o...o...o..

Disassembly of section text:

000000e0 <__aeabi_drsub>:
      e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
      e4:	e002      	b.n	ec <__adddf3>
      e6:	bf00      	nop

000000e8 <__aeabi_dsub>:
      e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000000ec <__adddf3>:
      ec:	b530      	push	{r4, r5, lr}
      ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
      f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
      f6:	ea94 0f05 	teq	r4, r5
      fa:	bf08      	it	eq
      fc:	ea90 0f02 	teqeq	r0, r2
     100:	bf1f      	itttt	ne
     102:	ea54 0c00 	orrsne.w	ip, r4, r0
     106:	ea55 0c02 	orrsne.w	ip, r5, r2
     10a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     10e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     112:	f000 80e2 	beq.w	2da <CONFIG_BT_HCI_TX_STACK_SIZE+0x5a>
     116:	ea4f 5454 	mov.w	r4, r4, lsr #21
     11a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     11e:	bfb8      	it	lt
     120:	426d      	neglt	r5, r5
     122:	dd0c      	ble.n	13e <CONFIG_KOBJECT_TEXT_AREA+0x3e>
     124:	442c      	add	r4, r5
     126:	ea80 0202 	eor.w	r2, r0, r2
     12a:	ea81 0303 	eor.w	r3, r1, r3
     12e:	ea82 0000 	eor.w	r0, r2, r0
     132:	ea83 0101 	eor.w	r1, r3, r1
     136:	ea80 0202 	eor.w	r2, r0, r2
     13a:	ea81 0303 	eor.w	r3, r1, r3
     13e:	2d36      	cmp	r5, #54	; 0x36
     140:	bf88      	it	hi
     142:	bd30      	pophi	{r4, r5, pc}
     144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     148:	ea4f 3101 	mov.w	r1, r1, lsl #12
     14c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     154:	d002      	beq.n	15c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x12>
     156:	4240      	negs	r0, r0
     158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     15c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     160:	ea4f 3303 	mov.w	r3, r3, lsl #12
     164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     168:	d002      	beq.n	170 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x26>
     16a:	4252      	negs	r2, r2
     16c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     170:	ea94 0f05 	teq	r4, r5
     174:	f000 80a7 	beq.w	2c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     178:	f1a4 0401 	sub.w	r4, r4, #1
     17c:	f1d5 0e20 	rsbs	lr, r5, #32
     180:	db0d      	blt.n	19e <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x54>
     182:	fa02 fc0e 	lsl.w	ip, r2, lr
     186:	fa22 f205 	lsr.w	r2, r2, r5
     18a:	1880      	adds	r0, r0, r2
     18c:	f141 0100 	adc.w	r1, r1, #0
     190:	fa03 f20e 	lsl.w	r2, r3, lr
     194:	1880      	adds	r0, r0, r2
     196:	fa43 f305 	asr.w	r3, r3, r5
     19a:	4159      	adcs	r1, r3
     19c:	e00e      	b.n	1bc <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x72>
     19e:	f1a5 0520 	sub.w	r5, r5, #32
     1a2:	f10e 0e20 	add.w	lr, lr, #32
     1a6:	2a01      	cmp	r2, #1
     1a8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1ac:	bf28      	it	cs
     1ae:	f04c 0c02 	orrcs.w	ip, ip, #2
     1b2:	fa43 f305 	asr.w	r3, r3, r5
     1b6:	18c0      	adds	r0, r0, r3
     1b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1c0:	d507      	bpl.n	1d2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x12>
     1c2:	f04f 0e00 	mov.w	lr, #0
     1c6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ca:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ce:	eb6e 0101 	sbc.w	r1, lr, r1
     1d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1d6:	d31b      	bcc.n	210 <CONFIG_FLASH_SIZE+0x10>
     1d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1dc:	d30c      	bcc.n	1f8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x38>
     1de:	0849      	lsrs	r1, r1, #1
     1e0:	ea5f 0030 	movs.w	r0, r0, rrx
     1e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     1e8:	f104 0401 	add.w	r4, r4, #1
     1ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
     1f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     1f4:	f080 809a 	bcs.w	32c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2c>
     1f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     1fc:	bf08      	it	eq
     1fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     202:	f150 0000 	adcs.w	r0, r0, #0
     206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     20a:	ea41 0105 	orr.w	r1, r1, r5
     20e:	bd30      	pop	{r4, r5, pc}
     210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     214:	4140      	adcs	r0, r0
     216:	eb41 0101 	adc.w	r1, r1, r1
     21a:	3c01      	subs	r4, #1
     21c:	bf28      	it	cs
     21e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     222:	d2e9      	bcs.n	1f8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x38>
     224:	f091 0f00 	teq	r1, #0
     228:	bf04      	itt	eq
     22a:	4601      	moveq	r1, r0
     22c:	2000      	moveq	r0, #0
     22e:	fab1 f381 	clz	r3, r1
     232:	bf08      	it	eq
     234:	3320      	addeq	r3, #32
     236:	f1a3 030b 	sub.w	r3, r3, #11
     23a:	f1b3 0220 	subs.w	r2, r3, #32
     23e:	da0c      	bge.n	25a <CONFIG_FLASH_SIZE+0x5a>
     240:	320c      	adds	r2, #12
     242:	dd08      	ble.n	256 <CONFIG_FLASH_SIZE+0x56>
     244:	f102 0c14 	add.w	ip, r2, #20
     248:	f1c2 020c 	rsb	r2, r2, #12
     24c:	fa01 f00c 	lsl.w	r0, r1, ip
     250:	fa21 f102 	lsr.w	r1, r1, r2
     254:	e00c      	b.n	270 <CONFIG_FLASH_SIZE+0x70>
     256:	f102 0214 	add.w	r2, r2, #20
     25a:	bfd8      	it	le
     25c:	f1c2 0c20 	rsble	ip, r2, #32
     260:	fa01 f102 	lsl.w	r1, r1, r2
     264:	fa20 fc0c 	lsr.w	ip, r0, ip
     268:	bfdc      	itt	le
     26a:	ea41 010c 	orrle.w	r1, r1, ip
     26e:	4090      	lslle	r0, r2
     270:	1ae4      	subs	r4, r4, r3
     272:	bfa2      	ittt	ge
     274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     278:	4329      	orrge	r1, r5
     27a:	bd30      	popge	{r4, r5, pc}
     27c:	ea6f 0404 	mvn.w	r4, r4
     280:	3c1f      	subs	r4, #31
     282:	da1c      	bge.n	2be <CONFIG_BT_HCI_TX_STACK_SIZE+0x3e>
     284:	340c      	adds	r4, #12
     286:	dc0e      	bgt.n	2a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     288:	f104 0414 	add.w	r4, r4, #20
     28c:	f1c4 0220 	rsb	r2, r4, #32
     290:	fa20 f004 	lsr.w	r0, r0, r4
     294:	fa01 f302 	lsl.w	r3, r1, r2
     298:	ea40 0003 	orr.w	r0, r0, r3
     29c:	fa21 f304 	lsr.w	r3, r1, r4
     2a0:	ea45 0103 	orr.w	r1, r5, r3
     2a4:	bd30      	pop	{r4, r5, pc}
     2a6:	f1c4 040c 	rsb	r4, r4, #12
     2aa:	f1c4 0220 	rsb	r2, r4, #32
     2ae:	fa20 f002 	lsr.w	r0, r0, r2
     2b2:	fa01 f304 	lsl.w	r3, r1, r4
     2b6:	ea40 0003 	orr.w	r0, r0, r3
     2ba:	4629      	mov	r1, r5
     2bc:	bd30      	pop	{r4, r5, pc}
     2be:	fa21 f004 	lsr.w	r0, r1, r4
     2c2:	4629      	mov	r1, r5
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f094 0f00 	teq	r4, #0
     2ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ce:	bf06      	itte	eq
     2d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2d4:	3401      	addeq	r4, #1
     2d6:	3d01      	subne	r5, #1
     2d8:	e74e      	b.n	178 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2e>
     2da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2de:	bf18      	it	ne
     2e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     2e4:	d029      	beq.n	33a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3a>
     2e6:	ea94 0f05 	teq	r4, r5
     2ea:	bf08      	it	eq
     2ec:	ea90 0f02 	teqeq	r0, r2
     2f0:	d005      	beq.n	2fe <CONFIG_BT_HCI_TX_STACK_SIZE+0x7e>
     2f2:	ea54 0c00 	orrs.w	ip, r4, r0
     2f6:	bf04      	itt	eq
     2f8:	4619      	moveq	r1, r3
     2fa:	4610      	moveq	r0, r2
     2fc:	bd30      	pop	{r4, r5, pc}
     2fe:	ea91 0f03 	teq	r1, r3
     302:	bf1e      	ittt	ne
     304:	2100      	movne	r1, #0
     306:	2000      	movne	r0, #0
     308:	bd30      	popne	{r4, r5, pc}
     30a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     30e:	d105      	bne.n	31c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1c>
     310:	0040      	lsls	r0, r0, #1
     312:	4149      	adcs	r1, r1
     314:	bf28      	it	cs
     316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     31a:	bd30      	pop	{r4, r5, pc}
     31c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     320:	bf3c      	itt	cc
     322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     326:	bd30      	popcc	{r4, r5, pc}
     328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     32c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     334:	f04f 0000 	mov.w	r0, #0
     338:	bd30      	pop	{r4, r5, pc}
     33a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     33e:	bf1a      	itte	ne
     340:	4619      	movne	r1, r3
     342:	4610      	movne	r0, r2
     344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     348:	bf1c      	itt	ne
     34a:	460b      	movne	r3, r1
     34c:	4602      	movne	r2, r0
     34e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     352:	bf06      	itte	eq
     354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     358:	ea91 0f03 	teqeq	r1, r3
     35c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     360:	bd30      	pop	{r4, r5, pc}
     362:	bf00      	nop

00000364 <__aeabi_ui2d>:
     364:	f090 0f00 	teq	r0, #0
     368:	bf04      	itt	eq
     36a:	2100      	moveq	r1, #0
     36c:	4770      	bxeq	lr
     36e:	b530      	push	{r4, r5, lr}
     370:	f44f 6480 	mov.w	r4, #1024	; 0x400
     374:	f104 0432 	add.w	r4, r4, #50	; 0x32
     378:	f04f 0500 	mov.w	r5, #0
     37c:	f04f 0100 	mov.w	r1, #0
     380:	e750      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     382:	bf00      	nop

00000384 <__aeabi_i2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     39c:	bf48      	it	mi
     39e:	4240      	negmi	r0, r0
     3a0:	f04f 0100 	mov.w	r1, #0
     3a4:	e73e      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3a6:	bf00      	nop

000003a8 <__aeabi_f2d>:
     3a8:	0042      	lsls	r2, r0, #1
     3aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ae:	ea4f 0131 	mov.w	r1, r1, rrx
     3b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3b6:	bf1f      	itttt	ne
     3b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3c4:	4770      	bxne	lr
     3c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ca:	bf08      	it	eq
     3cc:	4770      	bxeq	lr
     3ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3d2:	bf04      	itt	eq
     3d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3d8:	4770      	bxeq	lr
     3da:	b530      	push	{r4, r5, lr}
     3dc:	f44f 7460 	mov.w	r4, #896	; 0x380
     3e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     3e8:	e71c      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3ea:	bf00      	nop

000003ec <__aeabi_ul2d>:
     3ec:	ea50 0201 	orrs.w	r2, r0, r1
     3f0:	bf08      	it	eq
     3f2:	4770      	bxeq	lr
     3f4:	b530      	push	{r4, r5, lr}
     3f6:	f04f 0500 	mov.w	r5, #0
     3fa:	e00a      	b.n	412 <CONFIG_BT_RX_STACK_SIZE+0x12>

000003fc <__aeabi_l2d>:
     3fc:	ea50 0201 	orrs.w	r2, r0, r1
     400:	bf08      	it	eq
     402:	4770      	bxeq	lr
     404:	b530      	push	{r4, r5, lr}
     406:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     40a:	d502      	bpl.n	412 <CONFIG_BT_RX_STACK_SIZE+0x12>
     40c:	4240      	negs	r0, r0
     40e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     412:	f44f 6480 	mov.w	r4, #1024	; 0x400
     416:	f104 0432 	add.w	r4, r4, #50	; 0x32
     41a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     41e:	f43f aed8 	beq.w	1d2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x12>
     422:	f04f 0203 	mov.w	r2, #3
     426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     42a:	bf18      	it	ne
     42c:	3203      	addne	r2, #3
     42e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     432:	bf18      	it	ne
     434:	3203      	addne	r2, #3
     436:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     43a:	f1c2 0320 	rsb	r3, r2, #32
     43e:	fa00 fc03 	lsl.w	ip, r0, r3
     442:	fa20 f002 	lsr.w	r0, r0, r2
     446:	fa01 fe03 	lsl.w	lr, r1, r3
     44a:	ea40 000e 	orr.w	r0, r0, lr
     44e:	fa21 f102 	lsr.w	r1, r1, r2
     452:	4414      	add	r4, r2
     454:	e6bd      	b.n	1d2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x12>
     456:	bf00      	nop

00000458 <__aeabi_dmul>:
     458:	b570      	push	{r4, r5, r6, lr}
     45a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     45e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     466:	bf1d      	ittte	ne
     468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     46c:	ea94 0f0c 	teqne	r4, ip
     470:	ea95 0f0c 	teqne	r5, ip
     474:	f000 f8de 	bleq	634 <CONFIG_BT_COMPANY_ID+0x43>
     478:	442c      	add	r4, r5
     47a:	ea81 0603 	eor.w	r6, r1, r3
     47e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     482:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     486:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     48a:	bf18      	it	ne
     48c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     498:	d038      	beq.n	50c <__aeabi_dmul+0xb4>
     49a:	fba0 ce02 	umull	ip, lr, r0, r2
     49e:	f04f 0500 	mov.w	r5, #0
     4a2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4aa:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ae:	f04f 0600 	mov.w	r6, #0
     4b2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4b6:	f09c 0f00 	teq	ip, #0
     4ba:	bf18      	it	ne
     4bc:	f04e 0e01 	orrne.w	lr, lr, #1
     4c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4cc:	d204      	bcs.n	4d8 <__aeabi_dmul+0x80>
     4ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4d2:	416d      	adcs	r5, r5
     4d4:	eb46 0606 	adc.w	r6, r6, r6
     4d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     4e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     4e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     4e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     4ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     4f0:	bf88      	it	hi
     4f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     4f6:	d81e      	bhi.n	536 <__aeabi_dmul+0xde>
     4f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     4fc:	bf08      	it	eq
     4fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     502:	f150 0000 	adcs.w	r0, r0, #0
     506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     50a:	bd70      	pop	{r4, r5, r6, pc}
     50c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     510:	ea46 0101 	orr.w	r1, r6, r1
     514:	ea40 0002 	orr.w	r0, r0, r2
     518:	ea81 0103 	eor.w	r1, r1, r3
     51c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     520:	bfc2      	ittt	gt
     522:	ebd4 050c 	rsbsgt	r5, r4, ip
     526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     52a:	bd70      	popgt	{r4, r5, r6, pc}
     52c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     530:	f04f 0e00 	mov.w	lr, #0
     534:	3c01      	subs	r4, #1
     536:	f300 80ab 	bgt.w	690 <CONFIG_BT_COMPANY_ID+0x9f>
     53a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     53e:	bfde      	ittt	le
     540:	2000      	movle	r0, #0
     542:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     546:	bd70      	pople	{r4, r5, r6, pc}
     548:	f1c4 0400 	rsb	r4, r4, #0
     54c:	3c20      	subs	r4, #32
     54e:	da35      	bge.n	5bc <__aeabi_dmul+0x164>
     550:	340c      	adds	r4, #12
     552:	dc1b      	bgt.n	58c <__aeabi_dmul+0x134>
     554:	f104 0414 	add.w	r4, r4, #20
     558:	f1c4 0520 	rsb	r5, r4, #32
     55c:	fa00 f305 	lsl.w	r3, r0, r5
     560:	fa20 f004 	lsr.w	r0, r0, r4
     564:	fa01 f205 	lsl.w	r2, r1, r5
     568:	ea40 0002 	orr.w	r0, r0, r2
     56c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     578:	fa21 f604 	lsr.w	r6, r1, r4
     57c:	eb42 0106 	adc.w	r1, r2, r6
     580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     584:	bf08      	it	eq
     586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     58a:	bd70      	pop	{r4, r5, r6, pc}
     58c:	f1c4 040c 	rsb	r4, r4, #12
     590:	f1c4 0520 	rsb	r5, r4, #32
     594:	fa00 f304 	lsl.w	r3, r0, r4
     598:	fa20 f005 	lsr.w	r0, r0, r5
     59c:	fa01 f204 	lsl.w	r2, r1, r4
     5a0:	ea40 0002 	orr.w	r0, r0, r2
     5a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5ac:	f141 0100 	adc.w	r1, r1, #0
     5b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5b4:	bf08      	it	eq
     5b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5ba:	bd70      	pop	{r4, r5, r6, pc}
     5bc:	f1c4 0520 	rsb	r5, r4, #32
     5c0:	fa00 f205 	lsl.w	r2, r0, r5
     5c4:	ea4e 0e02 	orr.w	lr, lr, r2
     5c8:	fa20 f304 	lsr.w	r3, r0, r4
     5cc:	fa01 f205 	lsl.w	r2, r1, r5
     5d0:	ea43 0302 	orr.w	r3, r3, r2
     5d4:	fa21 f004 	lsr.w	r0, r1, r4
     5d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5dc:	fa21 f204 	lsr.w	r2, r1, r4
     5e0:	ea20 0002 	bic.w	r0, r0, r2
     5e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     5e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5ec:	bf08      	it	eq
     5ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5f2:	bd70      	pop	{r4, r5, r6, pc}
     5f4:	f094 0f00 	teq	r4, #0
     5f8:	d10f      	bne.n	61a <CONFIG_BT_COMPANY_ID+0x29>
     5fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     5fe:	0040      	lsls	r0, r0, #1
     600:	eb41 0101 	adc.w	r1, r1, r1
     604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     608:	bf08      	it	eq
     60a:	3c01      	subeq	r4, #1
     60c:	d0f7      	beq.n	5fe <CONFIG_BT_COMPANY_ID+0xd>
     60e:	ea41 0106 	orr.w	r1, r1, r6
     612:	f095 0f00 	teq	r5, #0
     616:	bf18      	it	ne
     618:	4770      	bxne	lr
     61a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     61e:	0052      	lsls	r2, r2, #1
     620:	eb43 0303 	adc.w	r3, r3, r3
     624:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3d01      	subeq	r5, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_COMPANY_ID+0x2d>
     62e:	ea43 0306 	orr.w	r3, r3, r6
     632:	4770      	bx	lr
     634:	ea94 0f0c 	teq	r4, ip
     638:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     63c:	bf18      	it	ne
     63e:	ea95 0f0c 	teqne	r5, ip
     642:	d00c      	beq.n	65e <CONFIG_BT_COMPANY_ID+0x6d>
     644:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     648:	bf18      	it	ne
     64a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     64e:	d1d1      	bne.n	5f4 <CONFIG_BT_COMPANY_ID+0x3>
     650:	ea81 0103 	eor.w	r1, r1, r3
     654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     658:	f04f 0000 	mov.w	r0, #0
     65c:	bd70      	pop	{r4, r5, r6, pc}
     65e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     662:	bf06      	itte	eq
     664:	4610      	moveq	r0, r2
     666:	4619      	moveq	r1, r3
     668:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66c:	d019      	beq.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     66e:	ea94 0f0c 	teq	r4, ip
     672:	d102      	bne.n	67a <CONFIG_BT_COMPANY_ID+0x89>
     674:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     678:	d113      	bne.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     67a:	ea95 0f0c 	teq	r5, ip
     67e:	d105      	bne.n	68c <CONFIG_BT_COMPANY_ID+0x9b>
     680:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     684:	bf1c      	itt	ne
     686:	4610      	movne	r0, r2
     688:	4619      	movne	r1, r3
     68a:	d10a      	bne.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     68c:	ea81 0103 	eor.w	r1, r1, r3
     690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     694:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     698:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     69c:	f04f 0000 	mov.w	r0, #0
     6a0:	bd70      	pop	{r4, r5, r6, pc}
     6a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6aa:	bd70      	pop	{r4, r5, r6, pc}

000006ac <__aeabi_ddiv>:
     6ac:	b570      	push	{r4, r5, r6, lr}
     6ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6ba:	bf1d      	ittte	ne
     6bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6c0:	ea94 0f0c 	teqne	r4, ip
     6c4:	ea95 0f0c 	teqne	r5, ip
     6c8:	f000 f8a7 	bleq	81a <CONFIG_ISR_STACK_SIZE+0x1a>
     6cc:	eba4 0405 	sub.w	r4, r4, r5
     6d0:	ea81 0e03 	eor.w	lr, r1, r3
     6d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6dc:	f000 8088 	beq.w	7f0 <__aeabi_ddiv+0x144>
     6e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     6e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     6e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     6ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     6f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     6f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     6f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     6fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     700:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     704:	429d      	cmp	r5, r3
     706:	bf08      	it	eq
     708:	4296      	cmpeq	r6, r2
     70a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     70e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     712:	d202      	bcs.n	71a <__aeabi_ddiv+0x6e>
     714:	085b      	lsrs	r3, r3, #1
     716:	ea4f 0232 	mov.w	r2, r2, rrx
     71a:	1ab6      	subs	r6, r6, r2
     71c:	eb65 0503 	sbc.w	r5, r5, r3
     720:	085b      	lsrs	r3, r3, #1
     722:	ea4f 0232 	mov.w	r2, r2, rrx
     726:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     72a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     72e:	ebb6 0e02 	subs.w	lr, r6, r2
     732:	eb75 0e03 	sbcs.w	lr, r5, r3
     736:	bf22      	ittt	cs
     738:	1ab6      	subcs	r6, r6, r2
     73a:	4675      	movcs	r5, lr
     73c:	ea40 000c 	orrcs.w	r0, r0, ip
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	ebb6 0e02 	subs.w	lr, r6, r2
     74a:	eb75 0e03 	sbcs.w	lr, r5, r3
     74e:	bf22      	ittt	cs
     750:	1ab6      	subcs	r6, r6, r2
     752:	4675      	movcs	r5, lr
     754:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     758:	085b      	lsrs	r3, r3, #1
     75a:	ea4f 0232 	mov.w	r2, r2, rrx
     75e:	ebb6 0e02 	subs.w	lr, r6, r2
     762:	eb75 0e03 	sbcs.w	lr, r5, r3
     766:	bf22      	ittt	cs
     768:	1ab6      	subcs	r6, r6, r2
     76a:	4675      	movcs	r5, lr
     76c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     770:	085b      	lsrs	r3, r3, #1
     772:	ea4f 0232 	mov.w	r2, r2, rrx
     776:	ebb6 0e02 	subs.w	lr, r6, r2
     77a:	eb75 0e03 	sbcs.w	lr, r5, r3
     77e:	bf22      	ittt	cs
     780:	1ab6      	subcs	r6, r6, r2
     782:	4675      	movcs	r5, lr
     784:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     788:	ea55 0e06 	orrs.w	lr, r5, r6
     78c:	d018      	beq.n	7c0 <__aeabi_ddiv+0x114>
     78e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     792:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     796:	ea4f 1606 	mov.w	r6, r6, lsl #4
     79a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     79e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7aa:	d1c0      	bne.n	72e <__aeabi_ddiv+0x82>
     7ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7b0:	d10b      	bne.n	7ca <__aeabi_ddiv+0x11e>
     7b2:	ea41 0100 	orr.w	r1, r1, r0
     7b6:	f04f 0000 	mov.w	r0, #0
     7ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7be:	e7b6      	b.n	72e <__aeabi_ddiv+0x82>
     7c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7c4:	bf04      	itt	eq
     7c6:	4301      	orreq	r1, r0
     7c8:	2000      	moveq	r0, #0
     7ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ce:	bf88      	it	hi
     7d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7d4:	f63f aeaf 	bhi.w	536 <__aeabi_dmul+0xde>
     7d8:	ebb5 0c03 	subs.w	ip, r5, r3
     7dc:	bf04      	itt	eq
     7de:	ebb6 0c02 	subseq.w	ip, r6, r2
     7e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     7e6:	f150 0000 	adcs.w	r0, r0, #0
     7ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     7ee:	bd70      	pop	{r4, r5, r6, pc}
     7f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     7f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     7f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     7fc:	bfc2      	ittt	gt
     7fe:	ebd4 050c 	rsbsgt	r5, r4, ip
     802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     806:	bd70      	popgt	{r4, r5, r6, pc}
     808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     80c:	f04f 0e00 	mov.w	lr, #0
     810:	3c01      	subs	r4, #1
     812:	e690      	b.n	536 <__aeabi_dmul+0xde>
     814:	ea45 0e06 	orr.w	lr, r5, r6
     818:	e68d      	b.n	536 <__aeabi_dmul+0xde>
     81a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     81e:	ea94 0f0c 	teq	r4, ip
     822:	bf08      	it	eq
     824:	ea95 0f0c 	teqeq	r5, ip
     828:	f43f af3b 	beq.w	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     82c:	ea94 0f0c 	teq	r4, ip
     830:	d10a      	bne.n	848 <CONFIG_ISR_STACK_SIZE+0x48>
     832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     836:	f47f af34 	bne.w	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     83a:	ea95 0f0c 	teq	r5, ip
     83e:	f47f af25 	bne.w	68c <CONFIG_BT_COMPANY_ID+0x9b>
     842:	4610      	mov	r0, r2
     844:	4619      	mov	r1, r3
     846:	e72c      	b.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     848:	ea95 0f0c 	teq	r5, ip
     84c:	d106      	bne.n	85c <CONFIG_ISR_STACK_SIZE+0x5c>
     84e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     852:	f43f aefd 	beq.w	650 <CONFIG_BT_COMPANY_ID+0x5f>
     856:	4610      	mov	r0, r2
     858:	4619      	mov	r1, r3
     85a:	e722      	b.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     85c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     860:	bf18      	it	ne
     862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     866:	f47f aec5 	bne.w	5f4 <CONFIG_BT_COMPANY_ID+0x3>
     86a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     86e:	f47f af0d 	bne.w	68c <CONFIG_BT_COMPANY_ID+0x9b>
     872:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     876:	f47f aeeb 	bne.w	650 <CONFIG_BT_COMPANY_ID+0x5f>
     87a:	e712      	b.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>

0000087c <__gedf2>:
     87c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     880:	e006      	b.n	890 <__cmpdf2+0x4>
     882:	bf00      	nop

00000884 <__ledf2>:
     884:	f04f 0c01 	mov.w	ip, #1
     888:	e002      	b.n	890 <__cmpdf2+0x4>
     88a:	bf00      	nop

0000088c <__cmpdf2>:
     88c:	f04f 0c01 	mov.w	ip, #1
     890:	f84d cd04 	str.w	ip, [sp, #-4]!
     894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     89c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     8a0:	bf18      	it	ne
     8a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     8a6:	d01b      	beq.n	8e0 <__cmpdf2+0x54>
     8a8:	b001      	add	sp, #4
     8aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     8ae:	bf0c      	ite	eq
     8b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     8b4:	ea91 0f03 	teqne	r1, r3
     8b8:	bf02      	ittt	eq
     8ba:	ea90 0f02 	teqeq	r0, r2
     8be:	2000      	moveq	r0, #0
     8c0:	4770      	bxeq	lr
     8c2:	f110 0f00 	cmn.w	r0, #0
     8c6:	ea91 0f03 	teq	r1, r3
     8ca:	bf58      	it	pl
     8cc:	4299      	cmppl	r1, r3
     8ce:	bf08      	it	eq
     8d0:	4290      	cmpeq	r0, r2
     8d2:	bf2c      	ite	cs
     8d4:	17d8      	asrcs	r0, r3, #31
     8d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     8da:	f040 0001 	orr.w	r0, r0, #1
     8de:	4770      	bx	lr
     8e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     8e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8e8:	d102      	bne.n	8f0 <__cmpdf2+0x64>
     8ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     8ee:	d107      	bne.n	900 <__cmpdf2+0x74>
     8f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     8f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8f8:	d1d6      	bne.n	8a8 <__cmpdf2+0x1c>
     8fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     8fe:	d0d3      	beq.n	8a8 <__cmpdf2+0x1c>
     900:	f85d 0b04 	ldr.w	r0, [sp], #4
     904:	4770      	bx	lr
     906:	bf00      	nop

00000908 <__aeabi_cdrcmple>:
     908:	4684      	mov	ip, r0
     90a:	4610      	mov	r0, r2
     90c:	4662      	mov	r2, ip
     90e:	468c      	mov	ip, r1
     910:	4619      	mov	r1, r3
     912:	4663      	mov	r3, ip
     914:	e000      	b.n	918 <__aeabi_cdcmpeq>
     916:	bf00      	nop

00000918 <__aeabi_cdcmpeq>:
     918:	b501      	push	{r0, lr}
     91a:	f7ff ffb7 	bl	88c <__cmpdf2>
     91e:	2800      	cmp	r0, #0
     920:	bf48      	it	mi
     922:	f110 0f00 	cmnmi.w	r0, #0
     926:	bd01      	pop	{r0, pc}

00000928 <__aeabi_dcmpeq>:
     928:	f84d ed08 	str.w	lr, [sp, #-8]!
     92c:	f7ff fff4 	bl	918 <__aeabi_cdcmpeq>
     930:	bf0c      	ite	eq
     932:	2001      	moveq	r0, #1
     934:	2000      	movne	r0, #0
     936:	f85d fb08 	ldr.w	pc, [sp], #8
     93a:	bf00      	nop

0000093c <__aeabi_dcmplt>:
     93c:	f84d ed08 	str.w	lr, [sp, #-8]!
     940:	f7ff ffea 	bl	918 <__aeabi_cdcmpeq>
     944:	bf34      	ite	cc
     946:	2001      	movcc	r0, #1
     948:	2000      	movcs	r0, #0
     94a:	f85d fb08 	ldr.w	pc, [sp], #8
     94e:	bf00      	nop

00000950 <__aeabi_dcmple>:
     950:	f84d ed08 	str.w	lr, [sp, #-8]!
     954:	f7ff ffe0 	bl	918 <__aeabi_cdcmpeq>
     958:	bf94      	ite	ls
     95a:	2001      	movls	r0, #1
     95c:	2000      	movhi	r0, #0
     95e:	f85d fb08 	ldr.w	pc, [sp], #8
     962:	bf00      	nop

00000964 <__aeabi_dcmpge>:
     964:	f84d ed08 	str.w	lr, [sp, #-8]!
     968:	f7ff ffce 	bl	908 <__aeabi_cdrcmple>
     96c:	bf94      	ite	ls
     96e:	2001      	movls	r0, #1
     970:	2000      	movhi	r0, #0
     972:	f85d fb08 	ldr.w	pc, [sp], #8
     976:	bf00      	nop

00000978 <__aeabi_dcmpgt>:
     978:	f84d ed08 	str.w	lr, [sp, #-8]!
     97c:	f7ff ffc4 	bl	908 <__aeabi_cdrcmple>
     980:	bf34      	ite	cc
     982:	2001      	movcc	r0, #1
     984:	2000      	movcs	r0, #0
     986:	f85d fb08 	ldr.w	pc, [sp], #8
     98a:	bf00      	nop

0000098c <__aeabi_d2iz>:
     98c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     994:	d215      	bcs.n	9c2 <__aeabi_d2iz+0x36>
     996:	d511      	bpl.n	9bc <__aeabi_d2iz+0x30>
     998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     99c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     9a0:	d912      	bls.n	9c8 <__aeabi_d2iz+0x3c>
     9a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     9a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     9aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     9ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     9b2:	fa23 f002 	lsr.w	r0, r3, r2
     9b6:	bf18      	it	ne
     9b8:	4240      	negne	r0, r0
     9ba:	4770      	bx	lr
     9bc:	f04f 0000 	mov.w	r0, #0
     9c0:	4770      	bx	lr
     9c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     9c6:	d105      	bne.n	9d4 <__aeabi_d2iz+0x48>
     9c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     9cc:	bf08      	it	eq
     9ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     9d2:	4770      	bx	lr
     9d4:	f04f 0000 	mov.w	r0, #0
     9d8:	4770      	bx	lr
     9da:	bf00      	nop

000009dc <__aeabi_d2f>:
     9dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
     9e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     9e4:	bf24      	itt	cs
     9e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     9ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     9ee:	d90d      	bls.n	a0c <__aeabi_d2f+0x30>
     9f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     9f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     9f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     9fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     a00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     a04:	bf08      	it	eq
     a06:	f020 0001 	biceq.w	r0, r0, #1
     a0a:	4770      	bx	lr
     a0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     a10:	d121      	bne.n	a56 <__aeabi_d2f+0x7a>
     a12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     a16:	bfbc      	itt	lt
     a18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     a1c:	4770      	bxlt	lr
     a1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     a22:	ea4f 5252 	mov.w	r2, r2, lsr #21
     a26:	f1c2 0218 	rsb	r2, r2, #24
     a2a:	f1c2 0c20 	rsb	ip, r2, #32
     a2e:	fa10 f30c 	lsls.w	r3, r0, ip
     a32:	fa20 f002 	lsr.w	r0, r0, r2
     a36:	bf18      	it	ne
     a38:	f040 0001 	orrne.w	r0, r0, #1
     a3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     a44:	fa03 fc0c 	lsl.w	ip, r3, ip
     a48:	ea40 000c 	orr.w	r0, r0, ip
     a4c:	fa23 f302 	lsr.w	r3, r3, r2
     a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
     a54:	e7cc      	b.n	9f0 <__aeabi_d2f+0x14>
     a56:	ea7f 5362 	mvns.w	r3, r2, asr #21
     a5a:	d107      	bne.n	a6c <__aeabi_d2f+0x90>
     a5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     a60:	bf1e      	ittt	ne
     a62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     a66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     a6a:	4770      	bxne	lr
     a6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     a70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     a74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     a78:	4770      	bx	lr
     a7a:	bf00      	nop

00000a7c <__aeabi_uldivmod>:
     a7c:	b953      	cbnz	r3, a94 <__aeabi_uldivmod+0x18>
     a7e:	b94a      	cbnz	r2, a94 <__aeabi_uldivmod+0x18>
     a80:	2900      	cmp	r1, #0
     a82:	bf08      	it	eq
     a84:	2800      	cmpeq	r0, #0
     a86:	bf1c      	itt	ne
     a88:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     a8c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     a90:	f000 b978 	b.w	d84 <__aeabi_idiv0>
     a94:	f1ad 0c08 	sub.w	ip, sp, #8
     a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     a9c:	f000 f806 	bl	aac <__udivmoddi4>
     aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
     aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     aa8:	b004      	add	sp, #16
     aaa:	4770      	bx	lr

00000aac <__udivmoddi4>:
     aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     ab0:	9d08      	ldr	r5, [sp, #32]
     ab2:	460e      	mov	r6, r1
     ab4:	4604      	mov	r4, r0
     ab6:	468e      	mov	lr, r1
     ab8:	2b00      	cmp	r3, #0
     aba:	d14c      	bne.n	b56 <__udivmoddi4+0xaa>
     abc:	428a      	cmp	r2, r1
     abe:	4694      	mov	ip, r2
     ac0:	d967      	bls.n	b92 <__udivmoddi4+0xe6>
     ac2:	fab2 f282 	clz	r2, r2
     ac6:	b152      	cbz	r2, ade <__udivmoddi4+0x32>
     ac8:	fa01 f302 	lsl.w	r3, r1, r2
     acc:	f1c2 0120 	rsb	r1, r2, #32
     ad0:	fa20 f101 	lsr.w	r1, r0, r1
     ad4:	fa0c fc02 	lsl.w	ip, ip, r2
     ad8:	ea41 0e03 	orr.w	lr, r1, r3
     adc:	4094      	lsls	r4, r2
     ade:	ea4f 481c 	mov.w	r8, ip, lsr #16
     ae2:	0c21      	lsrs	r1, r4, #16
     ae4:	fbbe f6f8 	udiv	r6, lr, r8
     ae8:	fa1f f78c 	uxth.w	r7, ip
     aec:	fb08 e316 	mls	r3, r8, r6, lr
     af0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     af4:	fb06 f107 	mul.w	r1, r6, r7
     af8:	4299      	cmp	r1, r3
     afa:	d90a      	bls.n	b12 <__udivmoddi4+0x66>
     afc:	eb1c 0303 	adds.w	r3, ip, r3
     b00:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
     b04:	f080 811e 	bcs.w	d44 <__udivmoddi4+0x298>
     b08:	4299      	cmp	r1, r3
     b0a:	f240 811b 	bls.w	d44 <__udivmoddi4+0x298>
     b0e:	3e02      	subs	r6, #2
     b10:	4463      	add	r3, ip
     b12:	1a5b      	subs	r3, r3, r1
     b14:	b2a4      	uxth	r4, r4
     b16:	fbb3 f0f8 	udiv	r0, r3, r8
     b1a:	fb08 3310 	mls	r3, r8, r0, r3
     b1e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     b22:	fb00 f707 	mul.w	r7, r0, r7
     b26:	42a7      	cmp	r7, r4
     b28:	d90a      	bls.n	b40 <__udivmoddi4+0x94>
     b2a:	eb1c 0404 	adds.w	r4, ip, r4
     b2e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     b32:	f080 8109 	bcs.w	d48 <__udivmoddi4+0x29c>
     b36:	42a7      	cmp	r7, r4
     b38:	f240 8106 	bls.w	d48 <__udivmoddi4+0x29c>
     b3c:	4464      	add	r4, ip
     b3e:	3802      	subs	r0, #2
     b40:	1be4      	subs	r4, r4, r7
     b42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     b46:	2100      	movs	r1, #0
     b48:	b11d      	cbz	r5, b52 <__udivmoddi4+0xa6>
     b4a:	40d4      	lsrs	r4, r2
     b4c:	2300      	movs	r3, #0
     b4e:	e9c5 4300 	strd	r4, r3, [r5]
     b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b56:	428b      	cmp	r3, r1
     b58:	d908      	bls.n	b6c <__udivmoddi4+0xc0>
     b5a:	2d00      	cmp	r5, #0
     b5c:	f000 80ef 	beq.w	d3e <__udivmoddi4+0x292>
     b60:	2100      	movs	r1, #0
     b62:	e9c5 0600 	strd	r0, r6, [r5]
     b66:	4608      	mov	r0, r1
     b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b6c:	fab3 f183 	clz	r1, r3
     b70:	2900      	cmp	r1, #0
     b72:	d149      	bne.n	c08 <__udivmoddi4+0x15c>
     b74:	42b3      	cmp	r3, r6
     b76:	d302      	bcc.n	b7e <__udivmoddi4+0xd2>
     b78:	4282      	cmp	r2, r0
     b7a:	f200 80ff 	bhi.w	d7c <__udivmoddi4+0x2d0>
     b7e:	1a84      	subs	r4, r0, r2
     b80:	eb66 0303 	sbc.w	r3, r6, r3
     b84:	2001      	movs	r0, #1
     b86:	469e      	mov	lr, r3
     b88:	2d00      	cmp	r5, #0
     b8a:	d0e2      	beq.n	b52 <__udivmoddi4+0xa6>
     b8c:	e9c5 4e00 	strd	r4, lr, [r5]
     b90:	e7df      	b.n	b52 <__udivmoddi4+0xa6>
     b92:	b902      	cbnz	r2, b96 <__udivmoddi4+0xea>
     b94:	deff      	udf	#255	; 0xff
     b96:	fab2 f282 	clz	r2, r2
     b9a:	2a00      	cmp	r2, #0
     b9c:	f040 808e 	bne.w	cbc <__udivmoddi4+0x210>
     ba0:	eba1 060c 	sub.w	r6, r1, ip
     ba4:	ea4f 471c 	mov.w	r7, ip, lsr #16
     ba8:	fa1f f38c 	uxth.w	r3, ip
     bac:	2101      	movs	r1, #1
     bae:	fbb6 fef7 	udiv	lr, r6, r7
     bb2:	fb07 601e 	mls	r0, r7, lr, r6
     bb6:	0c26      	lsrs	r6, r4, #16
     bb8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     bbc:	fb03 f00e 	mul.w	r0, r3, lr
     bc0:	42b0      	cmp	r0, r6
     bc2:	d908      	bls.n	bd6 <__udivmoddi4+0x12a>
     bc4:	eb1c 0606 	adds.w	r6, ip, r6
     bc8:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
     bcc:	d202      	bcs.n	bd4 <__udivmoddi4+0x128>
     bce:	42b0      	cmp	r0, r6
     bd0:	f200 80d0 	bhi.w	d74 <__udivmoddi4+0x2c8>
     bd4:	46c6      	mov	lr, r8
     bd6:	1a36      	subs	r6, r6, r0
     bd8:	b2a4      	uxth	r4, r4
     bda:	fbb6 f0f7 	udiv	r0, r6, r7
     bde:	fb07 6610 	mls	r6, r7, r0, r6
     be2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     be6:	fb00 f303 	mul.w	r3, r0, r3
     bea:	42a3      	cmp	r3, r4
     bec:	d908      	bls.n	c00 <__udivmoddi4+0x154>
     bee:	eb1c 0404 	adds.w	r4, ip, r4
     bf2:	f100 36ff 	add.w	r6, r0, #4294967295	; 0xffffffff
     bf6:	d202      	bcs.n	bfe <__udivmoddi4+0x152>
     bf8:	42a3      	cmp	r3, r4
     bfa:	f200 80b8 	bhi.w	d6e <__udivmoddi4+0x2c2>
     bfe:	4630      	mov	r0, r6
     c00:	1ae4      	subs	r4, r4, r3
     c02:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     c06:	e79f      	b.n	b48 <__udivmoddi4+0x9c>
     c08:	f1c1 0720 	rsb	r7, r1, #32
     c0c:	fa22 f407 	lsr.w	r4, r2, r7
     c10:	408b      	lsls	r3, r1
     c12:	4323      	orrs	r3, r4
     c14:	fa06 fc01 	lsl.w	ip, r6, r1
     c18:	fa26 f407 	lsr.w	r4, r6, r7
     c1c:	fa20 f607 	lsr.w	r6, r0, r7
     c20:	ea46 060c 	orr.w	r6, r6, ip
     c24:	ea4f 4913 	mov.w	r9, r3, lsr #16
     c28:	fa00 f801 	lsl.w	r8, r0, r1
     c2c:	fbb4 fef9 	udiv	lr, r4, r9
     c30:	0c30      	lsrs	r0, r6, #16
     c32:	fa1f fc83 	uxth.w	ip, r3
     c36:	fb09 441e 	mls	r4, r9, lr, r4
     c3a:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     c3e:	fb0e f00c 	mul.w	r0, lr, ip
     c42:	42a0      	cmp	r0, r4
     c44:	fa02 f201 	lsl.w	r2, r2, r1
     c48:	d90a      	bls.n	c60 <__udivmoddi4+0x1b4>
     c4a:	191c      	adds	r4, r3, r4
     c4c:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
     c50:	f080 808b 	bcs.w	d6a <__udivmoddi4+0x2be>
     c54:	42a0      	cmp	r0, r4
     c56:	f240 8088 	bls.w	d6a <__udivmoddi4+0x2be>
     c5a:	f1ae 0e02 	sub.w	lr, lr, #2
     c5e:	441c      	add	r4, r3
     c60:	1a24      	subs	r4, r4, r0
     c62:	b2b6      	uxth	r6, r6
     c64:	fbb4 f0f9 	udiv	r0, r4, r9
     c68:	fb09 4410 	mls	r4, r9, r0, r4
     c6c:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     c70:	fb00 fc0c 	mul.w	ip, r0, ip
     c74:	45a4      	cmp	ip, r4
     c76:	d907      	bls.n	c88 <__udivmoddi4+0x1dc>
     c78:	191c      	adds	r4, r3, r4
     c7a:	f100 36ff 	add.w	r6, r0, #4294967295	; 0xffffffff
     c7e:	d270      	bcs.n	d62 <__udivmoddi4+0x2b6>
     c80:	45a4      	cmp	ip, r4
     c82:	d96e      	bls.n	d62 <__udivmoddi4+0x2b6>
     c84:	3802      	subs	r0, #2
     c86:	441c      	add	r4, r3
     c88:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     c8c:	fba0 e602 	umull	lr, r6, r0, r2
     c90:	eba4 040c 	sub.w	r4, r4, ip
     c94:	42b4      	cmp	r4, r6
     c96:	46f4      	mov	ip, lr
     c98:	46b1      	mov	r9, r6
     c9a:	d359      	bcc.n	d50 <__udivmoddi4+0x2a4>
     c9c:	d056      	beq.n	d4c <__udivmoddi4+0x2a0>
     c9e:	2d00      	cmp	r5, #0
     ca0:	d06e      	beq.n	d80 <__udivmoddi4+0x2d4>
     ca2:	ebb8 030c 	subs.w	r3, r8, ip
     ca6:	eb64 0409 	sbc.w	r4, r4, r9
     caa:	40cb      	lsrs	r3, r1
     cac:	fa04 f707 	lsl.w	r7, r4, r7
     cb0:	431f      	orrs	r7, r3
     cb2:	40cc      	lsrs	r4, r1
     cb4:	e9c5 7400 	strd	r7, r4, [r5]
     cb8:	2100      	movs	r1, #0
     cba:	e74a      	b.n	b52 <__udivmoddi4+0xa6>
     cbc:	f1c2 0020 	rsb	r0, r2, #32
     cc0:	fa24 f100 	lsr.w	r1, r4, r0
     cc4:	fa0c fc02 	lsl.w	ip, ip, r2
     cc8:	fa06 f302 	lsl.w	r3, r6, r2
     ccc:	fa26 f000 	lsr.w	r0, r6, r0
     cd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
     cd4:	ea41 0603 	orr.w	r6, r1, r3
     cd8:	fbb0 f1f7 	udiv	r1, r0, r7
     cdc:	fa1f f38c 	uxth.w	r3, ip
     ce0:	fb07 0e11 	mls	lr, r7, r1, r0
     ce4:	0c30      	lsrs	r0, r6, #16
     ce6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     cea:	fb01 fe03 	mul.w	lr, r1, r3
     cee:	4586      	cmp	lr, r0
     cf0:	fa04 f402 	lsl.w	r4, r4, r2
     cf4:	d908      	bls.n	d08 <__udivmoddi4+0x25c>
     cf6:	eb1c 0000 	adds.w	r0, ip, r0
     cfa:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
     cfe:	d232      	bcs.n	d66 <__udivmoddi4+0x2ba>
     d00:	4586      	cmp	lr, r0
     d02:	d930      	bls.n	d66 <__udivmoddi4+0x2ba>
     d04:	3902      	subs	r1, #2
     d06:	4460      	add	r0, ip
     d08:	eba0 000e 	sub.w	r0, r0, lr
     d0c:	b2b6      	uxth	r6, r6
     d0e:	fbb0 fef7 	udiv	lr, r0, r7
     d12:	fb07 001e 	mls	r0, r7, lr, r0
     d16:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     d1a:	fb0e f003 	mul.w	r0, lr, r3
     d1e:	42b0      	cmp	r0, r6
     d20:	d909      	bls.n	d36 <__udivmoddi4+0x28a>
     d22:	eb1c 0606 	adds.w	r6, ip, r6
     d26:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
     d2a:	d218      	bcs.n	d5e <__udivmoddi4+0x2b2>
     d2c:	42b0      	cmp	r0, r6
     d2e:	d916      	bls.n	d5e <__udivmoddi4+0x2b2>
     d30:	f1ae 0e02 	sub.w	lr, lr, #2
     d34:	4466      	add	r6, ip
     d36:	1a36      	subs	r6, r6, r0
     d38:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     d3c:	e737      	b.n	bae <__udivmoddi4+0x102>
     d3e:	4629      	mov	r1, r5
     d40:	4628      	mov	r0, r5
     d42:	e706      	b.n	b52 <__udivmoddi4+0xa6>
     d44:	4606      	mov	r6, r0
     d46:	e6e4      	b.n	b12 <__udivmoddi4+0x66>
     d48:	4618      	mov	r0, r3
     d4a:	e6f9      	b.n	b40 <__udivmoddi4+0x94>
     d4c:	45f0      	cmp	r8, lr
     d4e:	d2a6      	bcs.n	c9e <__udivmoddi4+0x1f2>
     d50:	ebbe 0c02 	subs.w	ip, lr, r2
     d54:	eb66 0303 	sbc.w	r3, r6, r3
     d58:	3801      	subs	r0, #1
     d5a:	4699      	mov	r9, r3
     d5c:	e79f      	b.n	c9e <__udivmoddi4+0x1f2>
     d5e:	46c6      	mov	lr, r8
     d60:	e7e9      	b.n	d36 <__udivmoddi4+0x28a>
     d62:	4630      	mov	r0, r6
     d64:	e790      	b.n	c88 <__udivmoddi4+0x1dc>
     d66:	4641      	mov	r1, r8
     d68:	e7ce      	b.n	d08 <__udivmoddi4+0x25c>
     d6a:	46d6      	mov	lr, sl
     d6c:	e778      	b.n	c60 <__udivmoddi4+0x1b4>
     d6e:	4464      	add	r4, ip
     d70:	3802      	subs	r0, #2
     d72:	e745      	b.n	c00 <__udivmoddi4+0x154>
     d74:	f1ae 0e02 	sub.w	lr, lr, #2
     d78:	4466      	add	r6, ip
     d7a:	e72c      	b.n	bd6 <__udivmoddi4+0x12a>
     d7c:	4608      	mov	r0, r1
     d7e:	e703      	b.n	b88 <__udivmoddi4+0xdc>
     d80:	4629      	mov	r1, r5
     d82:	e6e6      	b.n	b52 <__udivmoddi4+0xa6>

00000d84 <__aeabi_idiv0>:
     d84:	4770      	bx	lr
     d86:	bf00      	nop

00000d88 <ble_notify>:
        BT_GATT_CCC(vnd_ccc_cfg_changed,
                BT_GATT_PERM_READ | BT_GATT_PERM_WRITE),
    );

void ble_notify(double dist1, double dist2, double dist3)
{   
     d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     d8c:	ec55 4b10 	vmov	r4, r5, d0
    int intg;
    int decm;

    if (true){
        if (dist1 > 127.0){
     d90:	a34f      	add	r3, pc, #316	; (adr r3, ed0 <ble_notify+0x148>)
     d92:	e9d3 2300 	ldrd	r2, r3, [r3]
     d96:	ee10 0a10 	vmov	r0, s0
{   
     d9a:	b086      	sub	sp, #24
        if (dist1 > 127.0){
     d9c:	4629      	mov	r1, r5
{   
     d9e:	ec59 8b11 	vmov	r8, r9, d1
     da2:	ec57 6b12 	vmov	r6, r7, d2
        if (dist1 > 127.0){
     da6:	f7ff fde7 	bl	978 <__aeabi_dcmpgt>
     daa:	4682      	mov	sl, r0
     dac:	2800      	cmp	r0, #0
     dae:	d17c      	bne.n	eaa <ble_notify+0x122>
            intg = 127;
            decm = 0;
        }
        else if (dist1 < 0.0){
     db0:	2200      	movs	r2, #0
     db2:	2300      	movs	r3, #0
     db4:	4620      	mov	r0, r4
     db6:	4629      	mov	r1, r5
     db8:	f7ff fdc0 	bl	93c <__aeabi_dcmplt>
     dbc:	2800      	cmp	r0, #0
     dbe:	d178      	bne.n	eb2 <ble_notify+0x12a>
            intg = 0;
            decm = 0;
        }
        else{
            intg = (int)dist1;
     dc0:	4629      	mov	r1, r5
     dc2:	4620      	mov	r0, r4
     dc4:	f7ff fde2 	bl	98c <__aeabi_d2iz>
     dc8:	4682      	mov	sl, r0
            decm = (dist1 - intg) * 100;
     dca:	f7ff fadb 	bl	384 <__aeabi_i2d>
     dce:	4602      	mov	r2, r0
     dd0:	460b      	mov	r3, r1
     dd2:	4620      	mov	r0, r4
     dd4:	4629      	mov	r1, r5
     dd6:	f7ff f987 	bl	e8 <__aeabi_dsub>
     dda:	4b3f      	ldr	r3, [pc, #252]	; (ed8 <ble_notify+0x150>)
     ddc:	2200      	movs	r2, #0
     dde:	f7ff fb3b 	bl	458 <__aeabi_dmul>
     de2:	f7ff fdd3 	bl	98c <__aeabi_d2iz>
        }
	    vnd_value[0] = intg;
     de6:	4d3d      	ldr	r5, [pc, #244]	; (edc <ble_notify+0x154>)
        vnd_value[1] = decm; 

        if (dist2 > 127.0){
     de8:	a339      	add	r3, pc, #228	; (adr r3, ed0 <ble_notify+0x148>)
     dea:	e9d3 2300 	ldrd	r2, r3, [r3]
        vnd_value[1] = decm; 
     dee:	7068      	strb	r0, [r5, #1]
	    vnd_value[0] = intg;
     df0:	f885 a000 	strb.w	sl, [r5]
        if (dist2 > 127.0){
     df4:	4640      	mov	r0, r8
     df6:	4649      	mov	r1, r9
     df8:	f7ff fdbe 	bl	978 <__aeabi_dcmpgt>
     dfc:	4604      	mov	r4, r0
     dfe:	2800      	cmp	r0, #0
     e00:	d159      	bne.n	eb6 <ble_notify+0x12e>
            intg = 127;
            decm = 0;
        }
        else if (dist2 < 0.0){
     e02:	2200      	movs	r2, #0
     e04:	2300      	movs	r3, #0
     e06:	4640      	mov	r0, r8
     e08:	4649      	mov	r1, r9
     e0a:	f7ff fd97 	bl	93c <__aeabi_dcmplt>
     e0e:	2800      	cmp	r0, #0
     e10:	d154      	bne.n	ebc <ble_notify+0x134>
            intg = 0;
            decm = 0;
        }
        else{
            intg = (int)dist2;
     e12:	4649      	mov	r1, r9
     e14:	4640      	mov	r0, r8
     e16:	f7ff fdb9 	bl	98c <__aeabi_d2iz>
     e1a:	4604      	mov	r4, r0
            decm = (dist2 - intg) * 100;
     e1c:	f7ff fab2 	bl	384 <__aeabi_i2d>
     e20:	4602      	mov	r2, r0
     e22:	460b      	mov	r3, r1
     e24:	4640      	mov	r0, r8
     e26:	4649      	mov	r1, r9
     e28:	f7ff f95e 	bl	e8 <__aeabi_dsub>
     e2c:	4b2a      	ldr	r3, [pc, #168]	; (ed8 <ble_notify+0x150>)
     e2e:	2200      	movs	r2, #0
     e30:	f7ff fb12 	bl	458 <__aeabi_dmul>
     e34:	f7ff fdaa 	bl	98c <__aeabi_d2iz>
        }
	    vnd_value[2] = intg;
     e38:	70ac      	strb	r4, [r5, #2]
        vnd_value[3] = decm; 
     e3a:	70e8      	strb	r0, [r5, #3]

        if (dist3 > 127.0){
     e3c:	a324      	add	r3, pc, #144	; (adr r3, ed0 <ble_notify+0x148>)
     e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
     e42:	4630      	mov	r0, r6
     e44:	4639      	mov	r1, r7
     e46:	f7ff fd97 	bl	978 <__aeabi_dcmpgt>
     e4a:	4604      	mov	r4, r0
     e4c:	bbc0      	cbnz	r0, ec0 <ble_notify+0x138>
            intg = 127;
            decm = 0;
        }
        else if (dist3 < 0.0){
     e4e:	2200      	movs	r2, #0
     e50:	2300      	movs	r3, #0
     e52:	4630      	mov	r0, r6
     e54:	4639      	mov	r1, r7
     e56:	f7ff fd71 	bl	93c <__aeabi_dcmplt>
     e5a:	bba0      	cbnz	r0, ec6 <ble_notify+0x13e>
            intg = 0;
            decm = 0;
        }
        else{
            intg = (int)dist3;
     e5c:	4639      	mov	r1, r7
     e5e:	4630      	mov	r0, r6
     e60:	f7ff fd94 	bl	98c <__aeabi_d2iz>
     e64:	4604      	mov	r4, r0
            decm = (dist3 - intg) * 100;
     e66:	f7ff fa8d 	bl	384 <__aeabi_i2d>
     e6a:	4602      	mov	r2, r0
     e6c:	460b      	mov	r3, r1
     e6e:	4630      	mov	r0, r6
     e70:	4639      	mov	r1, r7
     e72:	f7ff f939 	bl	e8 <__aeabi_dsub>
     e76:	4b18      	ldr	r3, [pc, #96]	; (ed8 <ble_notify+0x150>)
     e78:	2200      	movs	r2, #0
     e7a:	f7ff faed 	bl	458 <__aeabi_dmul>
     e7e:	f7ff fd85 	bl	98c <__aeabi_d2iz>
        }
	    vnd_value[4] = intg;
        vnd_value[5] = decm; 
     e82:	7168      	strb	r0, [r5, #5]
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
     e84:	2218      	movs	r2, #24
	    vnd_value[4] = intg;
     e86:	712c      	strb	r4, [r5, #4]
     e88:	2100      	movs	r1, #0
     e8a:	4668      	mov	r0, sp
     e8c:	f01e fb4f 	bl	1f52e <memset>

	params.attr = attr;
     e90:	4b13      	ldr	r3, [pc, #76]	; (ee0 <ble_notify+0x158>)
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
     e92:	4669      	mov	r1, sp
	params.data = data;
     e94:	e9cd 3501 	strd	r3, r5, [sp, #4]
	return bt_gatt_notify_cb(conn, &params);
     e98:	2000      	movs	r0, #0
	params.len = len;
     e9a:	2306      	movs	r3, #6
     e9c:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
     ea0:	f00b fb54 	bl	c54c <bt_gatt_notify_cb>
        bt_gatt_notify(NULL, &dwm1001_svc.attrs[1], &vnd_value, sizeof(vnd_value));
    }
     ea4:	b006      	add	sp, #24
     ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            decm = 0;
     eaa:	2000      	movs	r0, #0
            intg = 127;
     eac:	f04f 0a7f 	mov.w	sl, #127	; 0x7f
     eb0:	e799      	b.n	de6 <ble_notify+0x5e>
            decm = 0;
     eb2:	4650      	mov	r0, sl
     eb4:	e797      	b.n	de6 <ble_notify+0x5e>
            decm = 0;
     eb6:	2000      	movs	r0, #0
            intg = 127;
     eb8:	247f      	movs	r4, #127	; 0x7f
     eba:	e7bd      	b.n	e38 <ble_notify+0xb0>
            decm = 0;
     ebc:	4620      	mov	r0, r4
     ebe:	e7bb      	b.n	e38 <ble_notify+0xb0>
            decm = 0;
     ec0:	2000      	movs	r0, #0
            intg = 127;
     ec2:	247f      	movs	r4, #127	; 0x7f
     ec4:	e7dd      	b.n	e82 <ble_notify+0xfa>
            decm = 0;
     ec6:	4620      	mov	r0, r4
     ec8:	e7db      	b.n	e82 <ble_notify+0xfa>
     eca:	bf00      	nop
     ecc:	f3af 8000 	nop.w
     ed0:	00000000 	.word	0x00000000
     ed4:	405fc000 	.word	0x405fc000
     ed8:	40590000 	.word	0x40590000
     edc:	2000077a 	.word	0x2000077a
     ee0:	00022894 	.word	0x00022894
     ee4:	00000000 	.word	0x00000000

00000ee8 <dw_main>:
      */
    dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS);
    dwt_setrxtimeout(65000);
}

double dw_main(int resp_id) {  
     ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tx_poll_msg[SOURCE_IDX] = my_id;
     eea:	4f5b      	ldr	r7, [pc, #364]	; (1058 <dw_main+0x170>)
     eec:	4d5b      	ldr	r5, [pc, #364]	; (105c <dw_main+0x174>)
    tx_poll_msg[DEST_IDX] = resp_id;

    tx_poll_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
     eee:	4e5c      	ldr	r6, [pc, #368]	; (1060 <dw_main+0x178>)
    tx_poll_msg[SOURCE_IDX] = my_id;
     ef0:	683b      	ldr	r3, [r7, #0]
     ef2:	722b      	strb	r3, [r5, #8]
    tx_poll_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
     ef4:	7833      	ldrb	r3, [r6, #0]
     ef6:	70ab      	strb	r3, [r5, #2]
    tx_poll_msg[DEST_IDX] = resp_id;
     ef8:	71a8      	strb	r0, [r5, #6]
    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
     efa:	2280      	movs	r2, #128	; 0x80
     efc:	2100      	movs	r1, #0
double dw_main(int resp_id) {  
     efe:	4604      	mov	r4, r0
    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
     f00:	200f      	movs	r0, #15
     f02:	f01b fec5 	bl	1cc90 <dwt_write32bitoffsetreg>

    /* Zero offset in TX buffer. */
    dwt_writetxdata(sizeof(tx_poll_msg), tx_poll_msg, 0);
     f06:	4629      	mov	r1, r5
     f08:	2200      	movs	r2, #0
     f0a:	200c      	movs	r0, #12
     f0c:	f01b fe08 	bl	1cb20 <dwt_writetxdata>

    /* Zero offset in TX buffer, ranging. */
    dwt_writetxfctrl(sizeof(tx_poll_msg), 0, 1); 
     f10:	2201      	movs	r2, #1
     f12:	2100      	movs	r1, #0
     f14:	200c      	movs	r0, #12
     f16:	f003 fec3 	bl	4ca0 <dwt_writetxfctrl>

    /* Start transmission, indicating that a response is expected so that
        * reception is enabled automatically after the frame is sent and the delay
        * set by dwt_setrxaftertxdelay() has elapsed.
        */
    dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);
     f1a:	2002      	movs	r0, #2
     f1c:	f004 f80e 	bl	4f3c <dwt_starttx>
    tx_count++;
     f20:	4a50      	ldr	r2, [pc, #320]	; (1064 <dw_main+0x17c>)
    // printk("tx: %d\n", tx_count);

    /* We assume that the transmission is achieved correctly, 
        * poll for reception of a frame or error/timeout. See NOTE 8 below. 
        */
    while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
     f22:	4d51      	ldr	r5, [pc, #324]	; (1068 <dw_main+0x180>)
    tx_count++;
     f24:	6813      	ldr	r3, [r2, #0]
     f26:	3301      	adds	r3, #1
     f28:	6013      	str	r3, [r2, #0]
    while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
     f2a:	2100      	movs	r1, #0
     f2c:	200f      	movs	r0, #15
     f2e:	f01b fe4d 	bl	1cbcc <dwt_read32bitoffsetreg>
     f32:	4228      	tst	r0, r5
     f34:	d0f9      	beq.n	f2a <dw_main+0x42>
    {};

    /* Increment frame sequence number after transmission of 
        * the poll message (modulo 256).
        */
    frame_seq_nb++;
     f36:	7833      	ldrb	r3, [r6, #0]

    if (status_reg & SYS_STATUS_RXFCG) {
     f38:	f410 4180 	ands.w	r1, r0, #16384	; 0x4000
    frame_seq_nb++;
     f3c:	f103 0301 	add.w	r3, r3, #1
     f40:	7033      	strb	r3, [r6, #0]
    if (status_reg & SYS_STATUS_RXFCG) {
     f42:	d06e      	beq.n	1022 <dw_main+0x13a>

        uint32 frame_len;

        /* Clear good RX frame event in the DW1000 status register. */
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
     f44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     f48:	2100      	movs	r1, #0
     f4a:	200f      	movs	r0, #15
     f4c:	f01b fea0 	bl	1cc90 <dwt_write32bitoffsetreg>

        /* A frame has been received, read it into the local buffer. */
        frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
     f50:	2100      	movs	r1, #0
     f52:	2010      	movs	r0, #16
     f54:	f01b fe3a 	bl	1cbcc <dwt_read32bitoffsetreg>
     f58:	f000 017f 	and.w	r1, r0, #127	; 0x7f
        if (frame_len <= RX_BUF_LEN)
     f5c:	2914      	cmp	r1, #20
     f5e:	d803      	bhi.n	f68 <dw_main+0x80>
        {
            dwt_readrxdata(rx_buffer, frame_len, 0);
     f60:	4842      	ldr	r0, [pc, #264]	; (106c <dw_main+0x184>)
     f62:	2200      	movs	r2, #0
     f64:	f01b fe0c 	bl	1cb80 <dwt_readrxdata>
        /* Check that the frame is the expected response from the companion 
            * "SS TWR responder" example.
            * As the sequence number field of the frame is not relevant, 
            * it is cleared to simplify the validation of the frame.
            */
        rx_buffer[ALL_MSG_SN_IDX] = 0;
     f68:	4e40      	ldr	r6, [pc, #256]	; (106c <dw_main+0x184>)
        
        // if (memcmp(rx_buffer, rx_resp_msg, ALL_MSG_COMMON_LEN) == 0) {
        if((rx_buffer[SOURCE_IDX]==resp_id) && (rx_buffer[DEST_IDX] == my_id) && (rx_buffer[DEST_IDX - 1] == 'V')) {
     f6a:	7a33      	ldrb	r3, [r6, #8]
        rx_buffer[ALL_MSG_SN_IDX] = 0;
     f6c:	2500      	movs	r5, #0
        if((rx_buffer[SOURCE_IDX]==resp_id) && (rx_buffer[DEST_IDX] == my_id) && (rx_buffer[DEST_IDX - 1] == 'V')) {
     f6e:	42a3      	cmp	r3, r4
        rx_buffer[ALL_MSG_SN_IDX] = 0;
     f70:	70b5      	strb	r5, [r6, #2]
        if((rx_buffer[SOURCE_IDX]==resp_id) && (rx_buffer[DEST_IDX] == my_id) && (rx_buffer[DEST_IDX - 1] == 'V')) {
     f72:	d15c      	bne.n	102e <dw_main+0x146>
     f74:	79b2      	ldrb	r2, [r6, #6]
     f76:	683b      	ldr	r3, [r7, #0]
     f78:	429a      	cmp	r2, r3
     f7a:	d158      	bne.n	102e <dw_main+0x146>
     f7c:	7973      	ldrb	r3, [r6, #5]
     f7e:	2b56      	cmp	r3, #86	; 0x56
     f80:	d155      	bne.n	102e <dw_main+0x146>
            rx_count++;
     f82:	4a3b      	ldr	r2, [pc, #236]	; (1070 <dw_main+0x188>)
     f84:	6813      	ldr	r3, [r2, #0]
     f86:	3301      	adds	r3, #1
     f88:	6013      	str	r3, [r2, #0]
            float clockOffsetRatio ;

            /* Retrieve poll transmission and response reception timestamps. 
                * See NOTE 9 below.
                */
            poll_tx_ts = dwt_readtxtimestamplo32();
     f8a:	f01b fe34 	bl	1cbf6 <dwt_readtxtimestamplo32>
     f8e:	4607      	mov	r7, r0
            resp_rx_ts = dwt_readrxtimestamplo32();
     f90:	f01b fe35 	bl	1cbfe <dwt_readrxtimestamplo32>
     f94:	4604      	mov	r4, r0

            /* Read carrier integrator value and calculate clock offset ratio.
                * See NOTE 11 below.
                */
            clockOffsetRatio = dwt_readcarrierintegrator() * 
     f96:	f01b fdfd 	bl	1cb94 <dwt_readcarrierintegrator>
     f9a:	f7ff f9f3 	bl	384 <__aeabi_i2d>
     f9e:	4b35      	ldr	r3, [pc, #212]	; (1074 <dw_main+0x18c>)
     fa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     fa4:	f7ff fa58 	bl	458 <__aeabi_dmul>
     fa8:	f7ff fd18 	bl	9dc <__aeabi_d2f>
     fac:	ee06 0a10 	vmov	s12, r0
 * @return none
 */
static void resp_msg_get_ts(uint8 *ts_field, uint32 *ts)
{
    *ts = 0;
    for (int i = 0; i < RESP_MSG_TS_LEN; i++) {
     fb0:	360a      	adds	r6, #10
            clockOffsetRatio = dwt_readcarrierintegrator() * 
     fb2:	462b      	mov	r3, r5
    *ts = 0;
     fb4:	4629      	mov	r1, r5
        *ts += ts_field[i] << (i * 8);
     fb6:	f816 2b01 	ldrb.w	r2, [r6], #1
     fba:	409a      	lsls	r2, r3
    for (int i = 0; i < RESP_MSG_TS_LEN; i++) {
     fbc:	3308      	adds	r3, #8
     fbe:	2b20      	cmp	r3, #32
        *ts += ts_field[i] << (i * 8);
     fc0:	4411      	add	r1, r2
    for (int i = 0; i < RESP_MSG_TS_LEN; i++) {
     fc2:	d1f8      	bne.n	fb6 <dw_main+0xce>
     fc4:	2200      	movs	r2, #0
     fc6:	4d2c      	ldr	r5, [pc, #176]	; (1078 <dw_main+0x190>)
    *ts = 0;
     fc8:	4613      	mov	r3, r2
        *ts += ts_field[i] << (i * 8);
     fca:	f815 0b01 	ldrb.w	r0, [r5], #1
     fce:	4090      	lsls	r0, r2
    for (int i = 0; i < RESP_MSG_TS_LEN; i++) {
     fd0:	3208      	adds	r2, #8
     fd2:	2a20      	cmp	r2, #32
        *ts += ts_field[i] << (i * 8);
     fd4:	4403      	add	r3, r0
    for (int i = 0; i < RESP_MSG_TS_LEN; i++) {
     fd6:	d1f8      	bne.n	fca <dw_main+0xe2>
            rtd_resp = resp_tx_ts - poll_rx_ts;
     fd8:	1a5b      	subs	r3, r3, r1
            tof = ((rtd_init - rtd_resp * 
     fda:	ee07 3a10 	vmov	s14, r3
            rtd_init = resp_rx_ts - poll_tx_ts;
     fde:	1be2      	subs	r2, r4, r7
     fe0:	ee07 2a90 	vmov	s15, r2
                    (1.0f - clockOffsetRatio)) / 2.0f) * DWT_TIME_UNITS;
     fe4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     fe8:	ee76 6ac6 	vsub.f32	s13, s13, s12
            tof = ((rtd_init - rtd_resp * 
     fec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
     ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     ff4:	ee47 7a66 	vmls.f32	s15, s14, s13
                    (1.0f - clockOffsetRatio)) / 2.0f) * DWT_TIME_UNITS;
     ff8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
     ffc:	ee67 7a87 	vmul.f32	s15, s15, s14
    1000:	ee17 0a90 	vmov	r0, s15
    1004:	f7ff f9d0 	bl	3a8 <__aeabi_f2d>
    1008:	a30d      	add	r3, pc, #52	; (adr r3, 1040 <dw_main+0x158>)
    100a:	e9d3 2300 	ldrd	r2, r3, [r3]
    100e:	f7ff fa23 	bl	458 <__aeabi_dmul>
            distance = tof * SPEED_OF_LIGHT;
    1012:	a30d      	add	r3, pc, #52	; (adr r3, 1048 <dw_main+0x160>)
    1014:	e9d3 2300 	ldrd	r2, r3, [r3]
    1018:	f7ff fa1e 	bl	458 <__aeabi_dmul>
    101c:	ec41 0b10 	vmov	d0, r0, r1
}
    1020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_RX_TO |
    1022:	4a16      	ldr	r2, [pc, #88]	; (107c <dw_main+0x194>)
    1024:	200f      	movs	r0, #15
    1026:	f01b fe33 	bl	1cc90 <dwt_write32bitoffsetreg>
        dwt_rxreset();
    102a:	f01b ff16 	bl	1ce5a <dwt_rxreset>
    Sleep(RNG_DELAY_MS);
    102e:	2002      	movs	r0, #2
    1030:	f01b ff50 	bl	1ced4 <Sleep>
    return -10.0;
    1034:	ed9f 0b06 	vldr	d0, [pc, #24]	; 1050 <dw_main+0x168>
    1038:	e7f2      	b.n	1020 <dw_main+0x138>
    103a:	bf00      	nop
    103c:	f3af 8000 	nop.w
    1040:	3bce48fa 	.word	0x3bce48fa
    1044:	3db13518 	.word	0x3db13518
    1048:	13000000 	.word	0x13000000
    104c:	41b1dd19 	.word	0x41b1dd19
    1050:	00000000 	.word	0x00000000
    1054:	c0240000 	.word	0xc0240000
    1058:	200016b4 	.word	0x200016b4
    105c:	20000780 	.word	0x20000780
    1060:	20002db2 	.word	0x20002db2
    1064:	200016bc 	.word	0x200016bc
    1068:	2427d000 	.word	0x2427d000
    106c:	20002db3 	.word	0x20002db3
    1070:	200016b8 	.word	0x200016b8
    1074:	be0fffff 	.word	0xbe0fffff
    1078:	20002dc1 	.word	0x20002dc1
    107c:	24279000 	.word	0x24279000

00001080 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1084:	ed2d 8b02 	vpush	{d8}
	uint64_t round = BIT64(59); /* 0.5 */
    1088:	ed9f 8bbd 	vldr	d8, [pc, #756]	; 1380 <cbvprintf+0x300>
{
    108c:	b09b      	sub	sp, #108	; 0x6c
    108e:	4681      	mov	r9, r0
    1090:	468a      	mov	sl, r1
    1092:	4615      	mov	r5, r2
    1094:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1096:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1098:	7828      	ldrb	r0, [r5, #0]
    109a:	b910      	cbnz	r0, 10a2 <cbvprintf+0x22>
			OUTC(' ');
			--width;
		}
	}

	return count;
    109c:	4630      	mov	r0, r6
    109e:	f000 bde8 	b.w	1c72 <CONFIG_LOG_BUFFER_SIZE+0x472>
			OUTC(*fp++);
    10a2:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
    10a4:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    10a6:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
    10a8:	d006      	beq.n	10b8 <cbvprintf+0x38>
			OUTC(*fp++);
    10aa:	4651      	mov	r1, sl
			OUTC('%');
    10ac:	47c8      	blx	r9
    10ae:	2800      	cmp	r0, #0
    10b0:	f2c0 85df 	blt.w	1c72 <CONFIG_LOG_BUFFER_SIZE+0x472>
    10b4:	3601      	adds	r6, #1
		if (bps == NULL) {
    10b6:	e252      	b.n	155e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d6>
		} state = {
    10b8:	2218      	movs	r2, #24
    10ba:	2100      	movs	r1, #0
    10bc:	a80c      	add	r0, sp, #48	; 0x30
    10be:	f01e fa36 	bl	1f52e <memset>
	if (*sp == '%') {
    10c2:	786b      	ldrb	r3, [r5, #1]
    10c4:	2b25      	cmp	r3, #37	; 0x25
    10c6:	d07c      	beq.n	11c2 <cbvprintf+0x142>
    10c8:	2300      	movs	r3, #0
    10ca:	1c68      	adds	r0, r5, #1
    10cc:	461f      	mov	r7, r3
    10ce:	469c      	mov	ip, r3
    10d0:	469e      	mov	lr, r3
    10d2:	4698      	mov	r8, r3
    10d4:	4601      	mov	r1, r0
		switch (*sp) {
    10d6:	f810 2b01 	ldrb.w	r2, [r0], #1
    10da:	2a2b      	cmp	r2, #43	; 0x2b
    10dc:	f000 80a0 	beq.w	1220 <cbvprintf+0x1a0>
    10e0:	f200 8097 	bhi.w	1212 <cbvprintf+0x192>
    10e4:	2a20      	cmp	r2, #32
    10e6:	f000 809e 	beq.w	1226 <cbvprintf+0x1a6>
    10ea:	2a23      	cmp	r2, #35	; 0x23
    10ec:	f000 809e 	beq.w	122c <cbvprintf+0x1ac>
    10f0:	f1b8 0f00 	cmp.w	r8, #0
    10f4:	d005      	beq.n	1102 <cbvprintf+0x82>
    10f6:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    10fa:	f040 0004 	orr.w	r0, r0, #4
    10fe:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    1102:	f1be 0f00 	cmp.w	lr, #0
    1106:	d005      	beq.n	1114 <cbvprintf+0x94>
    1108:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    110c:	f040 0008 	orr.w	r0, r0, #8
    1110:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    1114:	f1bc 0f00 	cmp.w	ip, #0
    1118:	d005      	beq.n	1126 <cbvprintf+0xa6>
    111a:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    111e:	f040 0010 	orr.w	r0, r0, #16
    1122:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    1126:	b12f      	cbz	r7, 1134 <cbvprintf+0xb4>
    1128:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    112c:	f040 0020 	orr.w	r0, r0, #32
    1130:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    1134:	b12b      	cbz	r3, 1142 <cbvprintf+0xc2>
    1136:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    113a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    113e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (conv->flag_zero && conv->flag_dash) {
    1142:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1146:	f003 0044 	and.w	r0, r3, #68	; 0x44
    114a:	2844      	cmp	r0, #68	; 0x44
    114c:	d103      	bne.n	1156 <cbvprintf+0xd6>
		conv->flag_zero = false;
    114e:	f36f 1386 	bfc	r3, #6, #1
    1152:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
    1156:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
    115a:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    115c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1160:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
    1164:	d17e      	bne.n	1264 <cbvprintf+0x1e4>
		conv->width_star = true;
    1166:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    116a:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    116e:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    1170:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	conv->prec_present = (*sp == '.');
    1174:	781a      	ldrb	r2, [r3, #0]
    1176:	2a2e      	cmp	r2, #46	; 0x2e
    1178:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    117c:	bf0c      	ite	eq
    117e:	2101      	moveq	r1, #1
    1180:	2100      	movne	r1, #0
    1182:	f361 0241 	bfi	r2, r1, #1, #1
    1186:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    118a:	d177      	bne.n	127c <cbvprintf+0x1fc>
	if (*sp == '*') {
    118c:	785a      	ldrb	r2, [r3, #1]
    118e:	2a2a      	cmp	r2, #42	; 0x2a
    1190:	d06d      	beq.n	126e <cbvprintf+0x1ee>
	++sp;
    1192:	3301      	adds	r3, #1
	size_t val = 0;
    1194:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    1196:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    119a:	4618      	mov	r0, r3
    119c:	f810 2b01 	ldrb.w	r2, [r0], #1
    11a0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    11a4:	2f09      	cmp	r7, #9
    11a6:	f240 80ab 	bls.w	1300 <cbvprintf+0x280>
	conv->unsupported |= ((conv->prec_value < 0)
    11aa:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	conv->prec_value = prec;
    11ae:	9110      	str	r1, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    11b0:	f3c2 0040 	ubfx	r0, r2, #1, #1
    11b4:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    11b8:	f361 0241 	bfi	r2, r1, #1, #1
    11bc:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    11c0:	e05c      	b.n	127c <cbvprintf+0x1fc>
		conv->specifier = *sp++;
    11c2:	1caa      	adds	r2, r5, #2
    11c4:	9202      	str	r2, [sp, #8]
    11c6:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    11ca:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    11ce:	07df      	lsls	r7, r3, #31
    11d0:	f140 8179 	bpl.w	14c6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13e>
			width = va_arg(ap, int);
    11d4:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
    11d8:	f1bb 0f00 	cmp.w	fp, #0
    11dc:	da07      	bge.n	11ee <cbvprintf+0x16e>
				conv->flag_dash = true;
    11de:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    11e2:	f042 0204 	orr.w	r2, r2, #4
    11e6:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    11ea:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
    11ee:	0758      	lsls	r0, r3, #29
    11f0:	f140 8172 	bpl.w	14d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x150>
			int arg = va_arg(ap, int);
    11f4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    11f8:	f1b8 0f00 	cmp.w	r8, #0
    11fc:	f280 8171 	bge.w	14e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15a>
				conv->prec_present = false;
    1200:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1204:	f36f 0341 	bfc	r3, #1, #1
    1208:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    120c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    1210:	e167      	b.n	14e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15a>
		switch (*sp) {
    1212:	2a2d      	cmp	r2, #45	; 0x2d
    1214:	d00c      	beq.n	1230 <cbvprintf+0x1b0>
    1216:	2a30      	cmp	r2, #48	; 0x30
    1218:	f47f af6a 	bne.w	10f0 <cbvprintf+0x70>
			conv->flag_zero = true;
    121c:	2301      	movs	r3, #1
	} while (loop);
    121e:	e759      	b.n	10d4 <cbvprintf+0x54>
			conv->flag_plus = true;
    1220:	f04f 0e01 	mov.w	lr, #1
    1224:	e756      	b.n	10d4 <cbvprintf+0x54>
			conv->flag_space = true;
    1226:	f04f 0c01 	mov.w	ip, #1
    122a:	e753      	b.n	10d4 <cbvprintf+0x54>
			conv->flag_hash = true;
    122c:	2701      	movs	r7, #1
    122e:	e751      	b.n	10d4 <cbvprintf+0x54>
		switch (*sp) {
    1230:	f04f 0801 	mov.w	r8, #1
    1234:	e74e      	b.n	10d4 <cbvprintf+0x54>
		val = 10U * val + *sp++ - '0';
    1236:	fb0c 7202 	mla	r2, ip, r2, r7
    123a:	3a30      	subs	r2, #48	; 0x30
    123c:	4603      	mov	r3, r0
    123e:	4618      	mov	r0, r3
    1240:	f810 7b01 	ldrb.w	r7, [r0], #1
    1244:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1248:	f1be 0f09 	cmp.w	lr, #9
    124c:	d9f3      	bls.n	1236 <cbvprintf+0x1b6>
	if (sp != wp) {
    124e:	4299      	cmp	r1, r3
    1250:	d090      	beq.n	1174 <cbvprintf+0xf4>
		conv->unsupported |= ((conv->width_value < 0)
    1252:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    1256:	920f      	str	r2, [sp, #60]	; 0x3c
				      || (width != (size_t)conv->width_value));
    1258:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    125a:	f362 0141 	bfi	r1, r2, #1, #1
    125e:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
    1262:	e787      	b.n	1174 <cbvprintf+0xf4>
    1264:	460b      	mov	r3, r1
	size_t val = 0;
    1266:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1268:	f04f 0c0a 	mov.w	ip, #10
    126c:	e7e7      	b.n	123e <cbvprintf+0x1be>
		conv->prec_star = true;
    126e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    1272:	f042 0204 	orr.w	r2, r2, #4
    1276:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    127a:	3302      	adds	r3, #2
	switch (*sp) {
    127c:	4619      	mov	r1, r3
    127e:	f811 2b01 	ldrb.w	r2, [r1], #1
    1282:	2a6c      	cmp	r2, #108	; 0x6c
    1284:	d05c      	beq.n	1340 <cbvprintf+0x2c0>
    1286:	d840      	bhi.n	130a <cbvprintf+0x28a>
    1288:	2a68      	cmp	r2, #104	; 0x68
    128a:	d046      	beq.n	131a <cbvprintf+0x29a>
    128c:	2a6a      	cmp	r2, #106	; 0x6a
    128e:	d061      	beq.n	1354 <cbvprintf+0x2d4>
    1290:	2a4c      	cmp	r2, #76	; 0x4c
    1292:	d067      	beq.n	1364 <cbvprintf+0x2e4>
    1294:	4619      	mov	r1, r3
	conv->specifier = *sp++;
    1296:	460b      	mov	r3, r1
    1298:	f813 2b01 	ldrb.w	r2, [r3], #1
    129c:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    129e:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    12a0:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    12a4:	f200 80e5 	bhi.w	1472 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xea>
    12a8:	2a57      	cmp	r2, #87	; 0x57
    12aa:	d86d      	bhi.n	1388 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT>
    12ac:	2a41      	cmp	r2, #65	; 0x41
    12ae:	d004      	beq.n	12ba <cbvprintf+0x23a>
    12b0:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    12b4:	2b02      	cmp	r3, #2
    12b6:	f200 80dc 	bhi.w	1472 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xea>
		conv->specifier_cat = SPECIFIER_FP;
    12ba:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    12be:	2104      	movs	r1, #4
    12c0:	f361 0302 	bfi	r3, r1, #0, #3
    12c4:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    12c8:	f002 03df 	and.w	r3, r2, #223	; 0xdf
    12cc:	f1a3 0841 	sub.w	r8, r3, #65	; 0x41
		conv->specifier_a = (conv->specifier == 'a')
    12d0:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
			|| (conv->specifier == 'A');
    12d4:	f1d8 0300 	rsbs	r3, r8, #0
    12d8:	eb43 0308 	adc.w	r3, r3, r8
		conv->specifier_a = (conv->specifier == 'a')
    12dc:	f363 12c7 	bfi	r2, r3, #7, #1
    12e0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		if (conv->specifier_a
    12e4:	b2d3      	uxtb	r3, r2
    12e6:	0612      	lsls	r2, r2, #24
    12e8:	f100 80eb 	bmi.w	14c2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13a>
		if (conv->length_mod == LENGTH_L) {
    12ec:	f003 0278 	and.w	r2, r3, #120	; 0x78
    12f0:	2a18      	cmp	r2, #24
    12f2:	f040 80bb 	bne.w	146c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe4>
			conv->length_mod = LENGTH_NONE;
    12f6:	f36f 03c6 	bfc	r3, #3, #4
    12fa:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    12fe:	e0a2      	b.n	1446 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbe>
		val = 10U * val + *sp++ - '0';
    1300:	fb0c 2101 	mla	r1, ip, r1, r2
    1304:	3930      	subs	r1, #48	; 0x30
    1306:	4603      	mov	r3, r0
    1308:	e747      	b.n	119a <cbvprintf+0x11a>
	switch (*sp) {
    130a:	2a74      	cmp	r2, #116	; 0x74
    130c:	d026      	beq.n	135c <cbvprintf+0x2dc>
    130e:	2a7a      	cmp	r2, #122	; 0x7a
    1310:	d1c0      	bne.n	1294 <cbvprintf+0x214>
		conv->length_mod = LENGTH_Z;
    1312:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1316:	2206      	movs	r2, #6
    1318:	e00d      	b.n	1336 <cbvprintf+0x2b6>
		if (*++sp == 'h') {
    131a:	785a      	ldrb	r2, [r3, #1]
    131c:	2a68      	cmp	r2, #104	; 0x68
    131e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    1322:	d106      	bne.n	1332 <cbvprintf+0x2b2>
			conv->length_mod = LENGTH_HH;
    1324:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1326:	f361 02c6 	bfi	r2, r1, #3, #4
    132a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    132e:	1c99      	adds	r1, r3, #2
    1330:	e7b1      	b.n	1296 <cbvprintf+0x216>
			conv->length_mod = LENGTH_H;
    1332:	4613      	mov	r3, r2
    1334:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    1336:	f362 03c6 	bfi	r3, r2, #3, #4
    133a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		break;
    133e:	e7aa      	b.n	1296 <cbvprintf+0x216>
		if (*++sp == 'l') {
    1340:	785a      	ldrb	r2, [r3, #1]
    1342:	2a6c      	cmp	r2, #108	; 0x6c
    1344:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    1348:	d101      	bne.n	134e <cbvprintf+0x2ce>
			conv->length_mod = LENGTH_LL;
    134a:	2104      	movs	r1, #4
    134c:	e7eb      	b.n	1326 <cbvprintf+0x2a6>
			conv->length_mod = LENGTH_L;
    134e:	4613      	mov	r3, r2
    1350:	2203      	movs	r2, #3
    1352:	e7f0      	b.n	1336 <cbvprintf+0x2b6>
		conv->length_mod = LENGTH_J;
    1354:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1358:	2205      	movs	r2, #5
    135a:	e7ec      	b.n	1336 <cbvprintf+0x2b6>
		conv->length_mod = LENGTH_T;
    135c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1360:	2207      	movs	r2, #7
    1362:	e7e8      	b.n	1336 <cbvprintf+0x2b6>
		conv->unsupported = true;
    1364:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    1368:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    136c:	f023 0302 	bic.w	r3, r3, #2
    1370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1374:	f043 0302 	orr.w	r3, r3, #2
    1378:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    137c:	e78b      	b.n	1296 <cbvprintf+0x216>
    137e:	bf00      	nop
    1380:	00000000 	.word	0x00000000
    1384:	08000000 	.word	0x08000000
    1388:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    138c:	2b20      	cmp	r3, #32
    138e:	d870      	bhi.n	1472 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xea>
    1390:	a101      	add	r1, pc, #4	; (adr r1, 1398 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10>)
    1392:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    1396:	bf00      	nop
    1398:	0000144b 	.word	0x0000144b
    139c:	00001473 	.word	0x00001473
    13a0:	00001473 	.word	0x00001473
    13a4:	00001473 	.word	0x00001473
    13a8:	00001473 	.word	0x00001473
    13ac:	00001473 	.word	0x00001473
    13b0:	00001473 	.word	0x00001473
    13b4:	00001473 	.word	0x00001473
    13b8:	00001473 	.word	0x00001473
    13bc:	000012bb 	.word	0x000012bb
    13c0:	00001473 	.word	0x00001473
    13c4:	0000144b 	.word	0x0000144b
    13c8:	0000141d 	.word	0x0000141d
    13cc:	000012bb 	.word	0x000012bb
    13d0:	000012bb 	.word	0x000012bb
    13d4:	000012bb 	.word	0x000012bb
    13d8:	00001473 	.word	0x00001473
    13dc:	0000141d 	.word	0x0000141d
    13e0:	00001473 	.word	0x00001473
    13e4:	00001473 	.word	0x00001473
    13e8:	00001473 	.word	0x00001473
    13ec:	00001473 	.word	0x00001473
    13f0:	00001481 	.word	0x00001481
    13f4:	0000144b 	.word	0x0000144b
    13f8:	000014a5 	.word	0x000014a5
    13fc:	00001473 	.word	0x00001473
    1400:	00001473 	.word	0x00001473
    1404:	000014a5 	.word	0x000014a5
    1408:	00001473 	.word	0x00001473
    140c:	0000144b 	.word	0x0000144b
    1410:	00001473 	.word	0x00001473
    1414:	00001473 	.word	0x00001473
    1418:	0000144b 	.word	0x0000144b
		conv->specifier_cat = SPECIFIER_SINT;
    141c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1420:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    1422:	f361 0302 	bfi	r3, r1, #0, #3
    1426:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    142a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    142e:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1432:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    1434:	bf02      	ittt	eq
    1436:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    143a:	f041 0101 	orreq.w	r1, r1, #1
    143e:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    1442:	2a63      	cmp	r2, #99	; 0x63
    1444:	d005      	beq.n	1452 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xca>
	bool unsupported = false;
    1446:	2300      	movs	r3, #0
    1448:	e006      	b.n	1458 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd0>
		conv->specifier_cat = SPECIFIER_UINT;
    144a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    144e:	2102      	movs	r1, #2
    1450:	e7e7      	b.n	1422 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1452:	3b00      	subs	r3, #0
    1454:	bf18      	it	ne
    1456:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1458:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    145c:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1460:	430b      	orrs	r3, r1
    1462:	f363 0241 	bfi	r2, r3, #1, #1
    1466:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    146a:	e6ae      	b.n	11ca <cbvprintf+0x14a>
		} else if ((conv->length_mod != LENGTH_NONE)
    146c:	f013 0f38 	tst.w	r3, #56	; 0x38
    1470:	d0e9      	beq.n	1446 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbe>
			conv->invalid = true;
    1472:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1476:	f043 0301 	orr.w	r3, r3, #1
    147a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    147e:	e7e2      	b.n	1446 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbe>
		conv->specifier_cat = SPECIFIER_PTR;
    1480:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1484:	2203      	movs	r2, #3
    1486:	f362 0302 	bfi	r3, r2, #0, #3
    148a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    148e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    1492:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1496:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
    149a:	f1dc 0300 	rsbs	r3, ip, #0
    149e:	eb43 030c 	adc.w	r3, r3, ip
    14a2:	e7d9      	b.n	1458 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd0>
		conv->specifier_cat = SPECIFIER_PTR;
    14a4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    14a8:	2203      	movs	r2, #3
    14aa:	f362 0302 	bfi	r3, r2, #0, #3
    14ae:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    14b2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    14b6:	f013 0f78 	tst.w	r3, #120	; 0x78
    14ba:	bf14      	ite	ne
    14bc:	2301      	movne	r3, #1
    14be:	2300      	moveq	r3, #0
    14c0:	e7ca      	b.n	1458 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd0>
			unsupported = true;
    14c2:	2301      	movs	r3, #1
    14c4:	e7c8      	b.n	1458 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd0>
		} else if (conv->width_present) {
    14c6:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    14ca:	2a00      	cmp	r2, #0
			width = conv->width_value;
    14cc:	bfb4      	ite	lt
    14ce:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
    14d2:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
    14d6:	e68a      	b.n	11ee <cbvprintf+0x16e>
		} else if (conv->prec_present) {
    14d8:	0799      	lsls	r1, r3, #30
    14da:	f57f ae97 	bpl.w	120c <cbvprintf+0x18c>
			precision = conv->prec_value;
    14de:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    14e2:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    14e6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    14e8:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
    14ec:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    14f0:	f003 0207 	and.w	r2, r3, #7
    14f4:	2a04      	cmp	r2, #4
    14f6:	d109      	bne.n	150c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x184>
		    && !conv->prec_present) {
    14f8:	078a      	lsls	r2, r1, #30
    14fa:	d407      	bmi.n	150c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x184>
			if (conv->specifier_a) {
    14fc:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
    1500:	2a00      	cmp	r2, #0
    1502:	bfb4      	ite	lt
    1504:	f04f 080d 	movlt.w	r8, #13
    1508:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
    150c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1510:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1512:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1516:	d137      	bne.n	1588 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x200>
			switch (length_mod) {
    1518:	1ecb      	subs	r3, r1, #3
    151a:	2b04      	cmp	r3, #4
    151c:	d821      	bhi.n	1562 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1da>
    151e:	e8df f003 	tbb	[pc, r3]
    1522:	0903      	.short	0x0903
    1524:	2009      	.short	0x2009
    1526:	20          	.byte	0x20
    1527:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    1528:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    152c:	17da      	asrs	r2, r3, #31
    152e:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    1532:	e006      	b.n	1542 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ba>
					(sint_value_type)va_arg(ap, intmax_t);
    1534:	3407      	adds	r4, #7
    1536:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    153a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    153e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    1542:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    1546:	07bb      	lsls	r3, r7, #30
    1548:	d054      	beq.n	15f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x26c>
			OUTS(sp, fp);
    154a:	9b02      	ldr	r3, [sp, #8]
    154c:	462a      	mov	r2, r5
    154e:	4651      	mov	r1, sl
    1550:	4648      	mov	r0, r9
    1552:	f01c f98a 	bl	1d86a <outs>
    1556:	2800      	cmp	r0, #0
    1558:	f2c0 838b 	blt.w	1c72 <CONFIG_LOG_BUFFER_SIZE+0x472>
    155c:	4406      	add	r6, r0
			while (pad_len-- > 0) {
    155e:	9d02      	ldr	r5, [sp, #8]
    1560:	e59a      	b.n	1098 <cbvprintf+0x18>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1562:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1566:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1568:	ea4f 72e3 	mov.w	r2, r3, asr #31
    156c:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    1570:	d105      	bne.n	157e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1f6>
				value->uint = (unsigned char)value->uint;
    1572:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    1576:	930c      	str	r3, [sp, #48]	; 0x30
    1578:	2300      	movs	r3, #0
    157a:	930d      	str	r3, [sp, #52]	; 0x34
    157c:	e7e1      	b.n	1542 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ba>
			} else if (length_mod == LENGTH_H) {
    157e:	2902      	cmp	r1, #2
    1580:	d1df      	bne.n	1542 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ba>
				value->sint = (short)value->sint;
    1582:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    1586:	e7d1      	b.n	152c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a4>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1588:	2b02      	cmp	r3, #2
    158a:	d123      	bne.n	15d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x24c>
			switch (length_mod) {
    158c:	1ecb      	subs	r3, r1, #3
    158e:	2b04      	cmp	r3, #4
    1590:	d813      	bhi.n	15ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x232>
    1592:	e8df f003 	tbb	[pc, r3]
    1596:	0a03      	.short	0x0a03
    1598:	120a      	.short	0x120a
    159a:	12          	.byte	0x12
    159b:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    159c:	6820      	ldr	r0, [r4, #0]
    159e:	900c      	str	r0, [sp, #48]	; 0x30
    15a0:	2200      	movs	r2, #0
				value->sint = va_arg(ap, int);
    15a2:	1d23      	adds	r3, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    15a4:	920d      	str	r2, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    15a6:	461c      	mov	r4, r3
    15a8:	e7cb      	b.n	1542 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ba>
					(uint_value_type)va_arg(ap,
    15aa:	1de3      	adds	r3, r4, #7
    15ac:	f023 0307 	bic.w	r3, r3, #7
				value->uint =
    15b0:	ecb3 7b02 	vldmia	r3!, {d7}
    15b4:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
				break;
    15b8:	e7f5      	b.n	15a6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x21e>
					(uint_value_type)va_arg(ap, size_t);
    15ba:	f854 3b04 	ldr.w	r3, [r4], #4
    15be:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    15c0:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    15c2:	f04f 0300 	mov.w	r3, #0
    15c6:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    15c8:	d0d3      	beq.n	1572 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ea>
			} else if (length_mod == LENGTH_H) {
    15ca:	2902      	cmp	r1, #2
    15cc:	d1b9      	bne.n	1542 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ba>
				value->uint = (unsigned short)value->uint;
    15ce:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    15d2:	e7d0      	b.n	1576 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ee>
		} else if (specifier_cat == SPECIFIER_FP) {
    15d4:	2b04      	cmp	r3, #4
    15d6:	d107      	bne.n	15e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x260>
					(sint_value_type)va_arg(ap, long long);
    15d8:	3407      	adds	r4, #7
    15da:	f024 0407 	bic.w	r4, r4, #7
    15de:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
    15e2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    15e6:	e7ac      	b.n	1542 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ba>
		} else if (specifier_cat == SPECIFIER_PTR) {
    15e8:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    15ea:	bf04      	itt	eq
    15ec:	f854 3b04 	ldreq.w	r3, [r4], #4
    15f0:	930c      	streq	r3, [sp, #48]	; 0x30
    15f2:	e7a6      	b.n	1542 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ba>
		switch (conv->specifier) {
    15f4:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
    15f8:	2a78      	cmp	r2, #120	; 0x78
    15fa:	d8b0      	bhi.n	155e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d6>
    15fc:	2a57      	cmp	r2, #87	; 0x57
    15fe:	f200 808c 	bhi.w	171a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x392>
    1602:	2a25      	cmp	r2, #37	; 0x25
    1604:	f000 80d4 	beq.w	17b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x428>
    1608:	2a24      	cmp	r2, #36	; 0x24
    160a:	d9a8      	bls.n	155e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d6>
    160c:	2a41      	cmp	r2, #65	; 0x41
    160e:	d003      	beq.n	1618 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x290>
    1610:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    1614:	2b02      	cmp	r3, #2
    1616:	d8a2      	bhi.n	155e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d6>
	} u = {
    1618:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
    161c:	2b00      	cmp	r3, #0
    161e:	f2c0 81b7 	blt.w	1990 <CONFIG_LOG_BUFFER_SIZE+0x190>
	} else if (conv->flag_plus) {
    1622:	0738      	lsls	r0, r7, #28
    1624:	f100 81b6 	bmi.w	1994 <CONFIG_LOG_BUFFER_SIZE+0x194>
		*sign = ' ';
    1628:	f017 0710 	ands.w	r7, r7, #16
    162c:	bf18      	it	ne
    162e:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    1630:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    1634:	f3c3 0313 	ubfx	r3, r3, #0, #20
    1638:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
    163c:	2d00      	cmp	r5, #0
    163e:	f040 81ab 	bne.w	1998 <CONFIG_LOG_BUFFER_SIZE+0x198>
    1642:	ea51 0003 	orrs.w	r0, r1, r3
    1646:	bf14      	ite	ne
    1648:	2001      	movne	r0, #1
    164a:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
    164c:	02db      	lsls	r3, r3, #11
    164e:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
    1652:	02c9      	lsls	r1, r1, #11
		c = 'f';
    1654:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
    1656:	ea45 0e01 	orr.w	lr, r5, r1
    165a:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
    165e:	bf08      	it	eq
    1660:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
    1662:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    1666:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
    166a:	f000 81ff 	beq.w	1a6c <CONFIG_LOG_BUFFER_SIZE+0x26c>
		if (is_subnormal) {
    166e:	2800      	cmp	r0, #0
    1670:	f040 81c7 	bne.w	1a02 <CONFIG_LOG_BUFFER_SIZE+0x202>
		fract |= BIT_63;
    1674:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    1678:	f04f 0c00 	mov.w	ip, #0
    167c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    1680:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
    1684:	9109      	str	r1, [sp, #36]	; 0x24
    1686:	4663      	mov	r3, ip
		fract *= 5U;
    1688:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
    168c:	f115 0f02 	cmn.w	r5, #2
    1690:	f2c0 81be 	blt.w	1a10 <CONFIG_LOG_BUFFER_SIZE+0x210>
    1694:	f1bc 0f00 	cmp.w	ip, #0
    1698:	d001      	beq.n	169e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x316>
    169a:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
    169e:	2d00      	cmp	r5, #0
		fract += 2;
    16a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
	while (expo > 0) {
    16a4:	f300 81c9 	bgt.w	1a3a <CONFIG_LOG_BUFFER_SIZE+0x23a>
	fract >>= (4 - expo);
    16a8:	9809      	ldr	r0, [sp, #36]	; 0x24
    16aa:	9908      	ldr	r1, [sp, #32]
    16ac:	f1c5 0c04 	rsb	ip, r5, #4
    16b0:	351c      	adds	r5, #28
    16b2:	fa00 f505 	lsl.w	r5, r0, r5
    16b6:	f1ac 0e20 	sub.w	lr, ip, #32
    16ba:	fa21 f10c 	lsr.w	r1, r1, ip
    16be:	fa20 fe0e 	lsr.w	lr, r0, lr
    16c2:	4329      	orrs	r1, r5
    16c4:	ea41 010e 	orr.w	r1, r1, lr
    16c8:	fa20 f00c 	lsr.w	r0, r0, ip
    16cc:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    16d0:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    16d4:	2947      	cmp	r1, #71	; 0x47
    16d6:	f040 81d0 	bne.w	1a7a <CONFIG_LOG_BUFFER_SIZE+0x27a>
		if (decexp < (-4 + 1) || decexp > precision) {
    16da:	1cdd      	adds	r5, r3, #3
    16dc:	db02      	blt.n	16e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x35c>
    16de:	4598      	cmp	r8, r3
    16e0:	f280 81c7 	bge.w	1a72 <CONFIG_LOG_BUFFER_SIZE+0x272>
			c += 'e' - 'g';  /* e or E */
    16e4:	3a02      	subs	r2, #2
			if (precision > 0) {
    16e6:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
    16ea:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
    16ec:	dd01      	ble.n	16f2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x36a>
				precision--;
    16ee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    16f2:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    16f6:	0688      	lsls	r0, r1, #26
    16f8:	f100 81bf 	bmi.w	1a7a <CONFIG_LOG_BUFFER_SIZE+0x27a>
    16fc:	f1b8 0f00 	cmp.w	r8, #0
    1700:	bfd4      	ite	le
    1702:	2100      	movle	r1, #0
    1704:	2101      	movgt	r1, #1
	if (c == 'f') {
    1706:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
    1708:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
    170a:	f040 81b8 	bne.w	1a7e <CONFIG_LOG_BUFFER_SIZE+0x27e>
		if (decimals < 0) {
    170e:	eb18 0503 	adds.w	r5, r8, r3
    1712:	f140 81b6 	bpl.w	1a82 <CONFIG_LOG_BUFFER_SIZE+0x282>
			decimals = 0;
    1716:	2500      	movs	r5, #0
    1718:	e1b6      	b.n	1a88 <CONFIG_LOG_BUFFER_SIZE+0x288>
    171a:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    171e:	2b20      	cmp	r3, #32
    1720:	f63f af1d 	bhi.w	155e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d6>
    1724:	a001      	add	r0, pc, #4	; (adr r0, 172c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a4>)
    1726:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    172a:	bf00      	nop
    172c:	00001933 	.word	0x00001933
    1730:	0000155f 	.word	0x0000155f
    1734:	0000155f 	.word	0x0000155f
    1738:	0000155f 	.word	0x0000155f
    173c:	0000155f 	.word	0x0000155f
    1740:	0000155f 	.word	0x0000155f
    1744:	0000155f 	.word	0x0000155f
    1748:	0000155f 	.word	0x0000155f
    174c:	0000155f 	.word	0x0000155f
    1750:	00001619 	.word	0x00001619
    1754:	0000155f 	.word	0x0000155f
    1758:	000017dd 	.word	0x000017dd
    175c:	000018d3 	.word	0x000018d3
    1760:	00001619 	.word	0x00001619
    1764:	00001619 	.word	0x00001619
    1768:	00001619 	.word	0x00001619
    176c:	0000155f 	.word	0x0000155f
    1770:	000018d3 	.word	0x000018d3
    1774:	0000155f 	.word	0x0000155f
    1778:	0000155f 	.word	0x0000155f
    177c:	0000155f 	.word	0x0000155f
    1780:	0000155f 	.word	0x0000155f
    1784:	00001969 	.word	0x00001969
    1788:	00001933 	.word	0x00001933
    178c:	00001937 	.word	0x00001937
    1790:	0000155f 	.word	0x0000155f
    1794:	0000155f 	.word	0x0000155f
    1798:	000017b7 	.word	0x000017b7
    179c:	0000155f 	.word	0x0000155f
    17a0:	00001933 	.word	0x00001933
    17a4:	0000155f 	.word	0x0000155f
    17a8:	0000155f 	.word	0x0000155f
    17ac:	00001933 	.word	0x00001933
			OUTC('%');
    17b0:	4651      	mov	r1, sl
    17b2:	4610      	mov	r0, r2
    17b4:	e47a      	b.n	10ac <cbvprintf+0x2c>
			if (precision >= 0) {
    17b6:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    17ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
    17bc:	db09      	blt.n	17d2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44a>
				len = strnlen(bps, precision);
    17be:	4641      	mov	r1, r8
    17c0:	4610      	mov	r0, r2
    17c2:	9203      	str	r2, [sp, #12]
    17c4:	f01d fe62 	bl	1f48c <strnlen>
				len = strlen(bps);
    17c8:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
    17ca:	2700      	movs	r7, #0
			bpe = bps + len;
    17cc:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
    17ce:	b962      	cbnz	r2, 17ea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x462>
    17d0:	e6c5      	b.n	155e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d6>
				len = strlen(bps);
    17d2:	4610      	mov	r0, r2
    17d4:	9203      	str	r2, [sp, #12]
    17d6:	f01d fe52 	bl	1f47e <strlen>
    17da:	e7f5      	b.n	17c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x440>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    17dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    17de:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
    17e2:	2700      	movs	r7, #0
			bpe = buf + 1;
    17e4:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
    17e8:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
    17ea:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
    17ec:	b107      	cbz	r7, 17f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x468>
			nj_len += 1U;
    17ee:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    17f0:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    17f4:	06c1      	lsls	r1, r0, #27
    17f6:	f140 8230 	bpl.w	1c5a <CONFIG_LOG_BUFFER_SIZE+0x45a>
			nj_len += 2U;
    17fa:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    17fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
    17fe:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    1800:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1802:	bf44      	itt	mi
    1804:	9910      	ldrmi	r1, [sp, #64]	; 0x40
    1806:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    1808:	f1bb 0f00 	cmp.w	fp, #0
    180c:	dd23      	ble.n	1856 <CONFIG_LOG_BUFFER_SIZE+0x56>
			width -= (int)nj_len;
    180e:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
    1812:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1816:	0759      	lsls	r1, r3, #29
    1818:	f3c3 0880 	ubfx	r8, r3, #2, #1
    181c:	d41b      	bmi.n	1856 <CONFIG_LOG_BUFFER_SIZE+0x56>
				if (conv->flag_zero) {
    181e:	0658      	lsls	r0, r3, #25
    1820:	f140 822c 	bpl.w	1c7c <CONFIG_LOG_BUFFER_SIZE+0x47c>
					if (sign != 0) {
    1824:	2f00      	cmp	r7, #0
    1826:	f000 822c 	beq.w	1c82 <CONFIG_LOG_BUFFER_SIZE+0x482>
						OUTC(sign);
    182a:	4651      	mov	r1, sl
    182c:	4638      	mov	r0, r7
    182e:	9203      	str	r2, [sp, #12]
    1830:	47c8      	blx	r9
    1832:	2800      	cmp	r0, #0
    1834:	f2c0 821d 	blt.w	1c72 <CONFIG_LOG_BUFFER_SIZE+0x472>
    1838:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
    183a:	4647      	mov	r7, r8
						OUTC(sign);
    183c:	3601      	adds	r6, #1
					pad = '0';
    183e:	f04f 0830 	mov.w	r8, #48	; 0x30
    1842:	445e      	add	r6, fp
    1844:	465b      	mov	r3, fp
				while (width-- > 0) {
    1846:	2b00      	cmp	r3, #0
    1848:	eba6 000b 	sub.w	r0, r6, fp
    184c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    1850:	f300 8207 	bgt.w	1c62 <CONFIG_LOG_BUFFER_SIZE+0x462>
    1854:	4606      	mov	r6, r0
		if (sign != 0) {
    1856:	b147      	cbz	r7, 186a <CONFIG_LOG_BUFFER_SIZE+0x6a>
			OUTC(sign);
    1858:	4651      	mov	r1, sl
    185a:	4638      	mov	r0, r7
    185c:	9203      	str	r2, [sp, #12]
    185e:	47c8      	blx	r9
    1860:	2800      	cmp	r0, #0
    1862:	f2c0 8206 	blt.w	1c72 <CONFIG_LOG_BUFFER_SIZE+0x472>
    1866:	9a03      	ldr	r2, [sp, #12]
    1868:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    186a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    186e:	0659      	lsls	r1, r3, #25
    1870:	f140 825b 	bpl.w	1d2a <CONFIG_LOG_BUFFER_SIZE+0x52a>
			if (conv->specifier_a) {
    1874:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
    1878:	2b00      	cmp	r3, #0
    187a:	eba6 0602 	sub.w	r6, r6, r2
    187e:	f280 820f 	bge.w	1ca0 <CONFIG_LOG_BUFFER_SIZE+0x4a0>
    1882:	4617      	mov	r7, r2
    1884:	46b8      	mov	r8, r7
    1886:	19f3      	adds	r3, r6, r7
				while (*cp != 'p') {
    1888:	f817 0b01 	ldrb.w	r0, [r7], #1
    188c:	2870      	cmp	r0, #112	; 0x70
    188e:	f040 81fb 	bne.w	1c88 <CONFIG_LOG_BUFFER_SIZE+0x488>
			while (pad_len-- > 0) {
    1892:	9f10      	ldr	r7, [sp, #64]	; 0x40
    1894:	461e      	mov	r6, r3
    1896:	441f      	add	r7, r3
    1898:	1bbb      	subs	r3, r7, r6
    189a:	2b00      	cmp	r3, #0
    189c:	f300 823e 	bgt.w	1d1c <CONFIG_LOG_BUFFER_SIZE+0x51c>
			OUTS(cp, bpe);
    18a0:	462b      	mov	r3, r5
    18a2:	4642      	mov	r2, r8
			OUTS(bps, bpe);
    18a4:	4651      	mov	r1, sl
    18a6:	4648      	mov	r0, r9
    18a8:	f01b ffdf 	bl	1d86a <outs>
    18ac:	2800      	cmp	r0, #0
    18ae:	f2c0 81e0 	blt.w	1c72 <CONFIG_LOG_BUFFER_SIZE+0x472>
    18b2:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    18b4:	4606      	mov	r6, r0
    18b6:	4483      	add	fp, r0
		while (width > 0) {
    18b8:	ebab 0306 	sub.w	r3, fp, r6
    18bc:	2b00      	cmp	r3, #0
    18be:	f77f ae4e 	ble.w	155e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d6>
			OUTC(' ');
    18c2:	4651      	mov	r1, sl
    18c4:	2020      	movs	r0, #32
    18c6:	47c8      	blx	r9
    18c8:	2800      	cmp	r0, #0
    18ca:	f2c0 81d2 	blt.w	1c72 <CONFIG_LOG_BUFFER_SIZE+0x472>
    18ce:	3601      	adds	r6, #1
			--width;
    18d0:	e7f2      	b.n	18b8 <CONFIG_LOG_BUFFER_SIZE+0xb8>
			if (conv->flag_plus) {
    18d2:	073d      	lsls	r5, r7, #28
    18d4:	d42b      	bmi.n	192e <CONFIG_LOG_BUFFER_SIZE+0x12e>
				sign = ' ';
    18d6:	f017 0710 	ands.w	r7, r7, #16
    18da:	bf18      	it	ne
    18dc:	2720      	movne	r7, #32
			sint = value->sint;
    18de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    18e2:	2b00      	cmp	r3, #0
    18e4:	da05      	bge.n	18f2 <CONFIG_LOG_BUFFER_SIZE+0xf2>
				value->uint = (uint_value_type)-sint;
    18e6:	4252      	negs	r2, r2
    18e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    18ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    18f0:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    18f2:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    18f6:	9300      	str	r3, [sp, #0]
    18f8:	aa0e      	add	r2, sp, #56	; 0x38
    18fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    18fe:	ab13      	add	r3, sp, #76	; 0x4c
    1900:	f01b ff6d 	bl	1d7de <encode_uint>
    1904:	4602      	mov	r2, r0
			if (precision >= 0) {
    1906:	f1b8 0f00 	cmp.w	r8, #0
    190a:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    190e:	f6ff af5e 	blt.w	17ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x446>
				conv->flag_zero = false;
    1912:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    1916:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
    1918:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    191c:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    191e:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    1922:	f67f af54 	bls.w	17ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x446>
					conv->pad0_value = precision - (int)len;
    1926:	eba8 0303 	sub.w	r3, r8, r3
    192a:	930f      	str	r3, [sp, #60]	; 0x3c
    192c:	e74f      	b.n	17ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x446>
				sign = '+';
    192e:	272b      	movs	r7, #43	; 0x2b
    1930:	e7d5      	b.n	18de <CONFIG_LOG_BUFFER_SIZE+0xde>
		switch (conv->specifier) {
    1932:	2700      	movs	r7, #0
    1934:	e7dd      	b.n	18f2 <CONFIG_LOG_BUFFER_SIZE+0xf2>
			if (value->ptr != NULL) {
    1936:	980c      	ldr	r0, [sp, #48]	; 0x30
    1938:	2800      	cmp	r0, #0
    193a:	f000 818a 	beq.w	1c52 <CONFIG_LOG_BUFFER_SIZE+0x452>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    193e:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    1942:	9300      	str	r3, [sp, #0]
    1944:	aa0e      	add	r2, sp, #56	; 0x38
    1946:	ab13      	add	r3, sp, #76	; 0x4c
    1948:	2100      	movs	r1, #0
    194a:	f01b ff48 	bl	1d7de <encode_uint>
				conv->altform_0c = true;
    194e:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    1952:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1956:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    195a:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    195e:	4602      	mov	r2, r0
				conv->altform_0c = true;
    1960:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    1964:	2700      	movs	r7, #0
				goto prec_int_pad0;
    1966:	e7ce      	b.n	1906 <CONFIG_LOG_BUFFER_SIZE+0x106>
				store_count(conv, value->ptr, count);
    1968:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    196a:	2907      	cmp	r1, #7
    196c:	f63f adf7 	bhi.w	155e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d6>
    1970:	e8df f001 	tbb	[pc, r1]
    1974:	0c06040c 	.word	0x0c06040c
    1978:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    197c:	701e      	strb	r6, [r3, #0]
		break;
    197e:	e5ee      	b.n	155e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d6>
		*(short *)dp = (short)count;
    1980:	801e      	strh	r6, [r3, #0]
		break;
    1982:	e5ec      	b.n	155e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d6>
		*(intmax_t *)dp = (intmax_t)count;
    1984:	17f2      	asrs	r2, r6, #31
    1986:	e9c3 6200 	strd	r6, r2, [r3]
		break;
    198a:	e5e8      	b.n	155e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d6>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    198c:	601e      	str	r6, [r3, #0]
		break;
    198e:	e5e6      	b.n	155e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d6>
		*sign = '-';
    1990:	272d      	movs	r7, #45	; 0x2d
    1992:	e64d      	b.n	1630 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a8>
		*sign = '+';
    1994:	272b      	movs	r7, #43	; 0x2b
    1996:	e64b      	b.n	1630 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a8>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    1998:	f240 70ff 	movw	r0, #2047	; 0x7ff
    199c:	4285      	cmp	r5, r0
    199e:	d12d      	bne.n	19fc <CONFIG_LOG_BUFFER_SIZE+0x1fc>
		if (fract == 0) {
    19a0:	430b      	orrs	r3, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    19a2:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
    19a6:	d11b      	bne.n	19e0 <CONFIG_LOG_BUFFER_SIZE+0x1e0>
			if (isupper((int)c)) {
    19a8:	2a19      	cmp	r2, #25
    19aa:	d811      	bhi.n	19d0 <CONFIG_LOG_BUFFER_SIZE+0x1d0>
				*buf++ = 'I';
    19ac:	2349      	movs	r3, #73	; 0x49
    19ae:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
    19b2:	234e      	movs	r3, #78	; 0x4e
    19b4:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
    19b8:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
    19ba:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
    19be:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    19c2:	f36f 1386 	bfc	r3, #6, #1
    19c6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
    19ca:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
    19ce:	e70b      	b.n	17e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x460>
				*buf++ = 'i';
    19d0:	2369      	movs	r3, #105	; 0x69
    19d2:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    19d6:	236e      	movs	r3, #110	; 0x6e
    19d8:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
    19dc:	2366      	movs	r3, #102	; 0x66
    19de:	e7ec      	b.n	19ba <CONFIG_LOG_BUFFER_SIZE+0x1ba>
			if (isupper((int)c)) {
    19e0:	2a19      	cmp	r2, #25
				*buf++ = 'N';
    19e2:	bf99      	ittee	ls
    19e4:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    19e6:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    19e8:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    19ea:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    19ec:	bf94      	ite	ls
    19ee:	f88d 304c 	strbls.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    19f2:	f88d 304c 	strbhi.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
    19f6:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    19fa:	e7de      	b.n	19ba <CONFIG_LOG_BUFFER_SIZE+0x1ba>
	bool is_subnormal = (expo == 0) && (fract != 0);
    19fc:	2000      	movs	r0, #0
    19fe:	e625      	b.n	164c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2c4>
				expo--;
    1a00:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    1a02:	1849      	adds	r1, r1, r1
    1a04:	415b      	adcs	r3, r3
    1a06:	2b00      	cmp	r3, #0
    1a08:	dafa      	bge.n	1a00 <CONFIG_LOG_BUFFER_SIZE+0x200>
    1a0a:	e9cd 1308 	strd	r1, r3, [sp, #32]
    1a0e:	e631      	b.n	1674 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ec>
			fract >>= 1;
    1a10:	0840      	lsrs	r0, r0, #1
    1a12:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    1a16:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    1a18:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
    1a1c:	46ac      	mov	ip, r5
			expo++;
    1a1e:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    1a22:	d2f5      	bcs.n	1a10 <CONFIG_LOG_BUFFER_SIZE+0x210>
		fract *= 5U;
    1a24:	fb0e f501 	mul.w	r5, lr, r1
    1a28:	fba0 010e 	umull	r0, r1, r0, lr
    1a2c:	4429      	add	r1, r5
		decexp--;
    1a2e:	3b01      	subs	r3, #1
		expo++;
    1a30:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
    1a34:	f04f 0c01 	mov.w	ip, #1
    1a38:	e628      	b.n	168c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x304>
		fract += 2;
    1a3a:	3002      	adds	r0, #2
    1a3c:	f141 0100 	adc.w	r1, r1, #0
    1a40:	e9cd 0108 	strd	r0, r1, [sp, #32]
		_ldiv5(&fract);
    1a44:	a808      	add	r0, sp, #32
    1a46:	e9cd 2303 	strd	r2, r3, [sp, #12]
    1a4a:	f01b fe99 	bl	1d780 <_ldiv5>
		decexp++;
    1a4e:	9b04      	ldr	r3, [sp, #16]
    1a50:	9a03      	ldr	r2, [sp, #12]
    1a52:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
    1a56:	3d01      	subs	r5, #1
		decexp++;
    1a58:	3301      	adds	r3, #1
			fract <<= 1;
    1a5a:	1849      	adds	r1, r1, r1
    1a5c:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
    1a5e:	2800      	cmp	r0, #0
			expo--;
    1a60:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    1a64:	daf9      	bge.n	1a5a <CONFIG_LOG_BUFFER_SIZE+0x25a>
    1a66:	e9cd 1008 	strd	r1, r0, [sp, #32]
    1a6a:	e618      	b.n	169e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x316>
    1a6c:	2300      	movs	r3, #0
    1a6e:	461d      	mov	r5, r3
    1a70:	e61a      	b.n	16a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x320>
			precision -= decexp;
    1a72:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
    1a76:	2266      	movs	r2, #102	; 0x66
    1a78:	e63b      	b.n	16f2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x36a>
	bool prune_zero = false;
    1a7a:	2100      	movs	r1, #0
    1a7c:	e643      	b.n	1706 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x37e>
		decimals = precision + 1;
    1a7e:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
    1a82:	2d10      	cmp	r5, #16
    1a84:	bfa8      	it	ge
    1a86:	2510      	movge	r5, #16
	uint64_t round = BIT64(59); /* 0.5 */
    1a88:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
    1a8c:	2110      	movs	r1, #16
    1a8e:	9107      	str	r1, [sp, #28]
	*v >>= 1;
    1a90:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
    1a94:	b9a5      	cbnz	r5, 1ac0 <CONFIG_LOG_BUFFER_SIZE+0x2c0>
	fract += round;
    1a96:	9d08      	ldr	r5, [sp, #32]
    1a98:	1949      	adds	r1, r1, r5
    1a9a:	9d09      	ldr	r5, [sp, #36]	; 0x24
    1a9c:	eb40 0005 	adc.w	r0, r0, r5
	if (fract >= BIT64(60)) {
    1aa0:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
    1aa4:	d21b      	bcs.n	1ade <CONFIG_LOG_BUFFER_SIZE+0x2de>
	fract += round;
    1aa6:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if (c == 'f') {
    1aaa:	2a66      	cmp	r2, #102	; 0x66
    1aac:	f040 8099 	bne.w	1be2 <CONFIG_LOG_BUFFER_SIZE+0x3e2>
		if (decexp > 0) {
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	dc23      	bgt.n	1afc <CONFIG_LOG_BUFFER_SIZE+0x2fc>
			*buf++ = '0';
    1ab4:	2130      	movs	r1, #48	; 0x30
    1ab6:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    1aba:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    1abe:	e02f      	b.n	1b20 <CONFIG_LOG_BUFFER_SIZE+0x320>
	*v >>= 1;
    1ac0:	0849      	lsrs	r1, r1, #1
    1ac2:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    1ac6:	0840      	lsrs	r0, r0, #1
    1ac8:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
    1acc:	a80a      	add	r0, sp, #40	; 0x28
    1ace:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1ad2:	3d01      	subs	r5, #1
    1ad4:	f01b fe54 	bl	1d780 <_ldiv5>
    1ad8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
    1adc:	e7d8      	b.n	1a90 <CONFIG_LOG_BUFFER_SIZE+0x290>
	*v >>= 1;
    1ade:	0849      	lsrs	r1, r1, #1
    1ae0:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    1ae4:	0840      	lsrs	r0, r0, #1
    1ae6:	e9cd 1008 	strd	r1, r0, [sp, #32]
	_ldiv5(v);
    1aea:	a808      	add	r0, sp, #32
    1aec:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1af0:	f01b fe46 	bl	1d780 <_ldiv5>
		decexp++;
    1af4:	9b05      	ldr	r3, [sp, #20]
    1af6:	9a04      	ldr	r2, [sp, #16]
    1af8:	3301      	adds	r3, #1
    1afa:	e7d6      	b.n	1aaa <CONFIG_LOG_BUFFER_SIZE+0x2aa>
	char *buf = bps;
    1afc:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
    1afe:	9907      	ldr	r1, [sp, #28]
    1b00:	2900      	cmp	r1, #0
    1b02:	dd0b      	ble.n	1b1c <CONFIG_LOG_BUFFER_SIZE+0x31c>
				*buf++ = _get_digit(&fract, &digit_count);
    1b04:	a907      	add	r1, sp, #28
    1b06:	a808      	add	r0, sp, #32
    1b08:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1b0c:	f01b fe50 	bl	1d7b0 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    1b10:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
    1b12:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
    1b16:	3b01      	subs	r3, #1
    1b18:	9a04      	ldr	r2, [sp, #16]
    1b1a:	d1f0      	bne.n	1afe <CONFIG_LOG_BUFFER_SIZE+0x2fe>
			conv->pad0_value = decexp;
    1b1c:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
    1b1e:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
    1b20:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    1b24:	0689      	lsls	r1, r1, #26
    1b26:	d402      	bmi.n	1b2e <CONFIG_LOG_BUFFER_SIZE+0x32e>
    1b28:	f1b8 0f00 	cmp.w	r8, #0
    1b2c:	dd1d      	ble.n	1b6a <CONFIG_LOG_BUFFER_SIZE+0x36a>
			*buf++ = '.';
    1b2e:	212e      	movs	r1, #46	; 0x2e
    1b30:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
    1b34:	b19b      	cbz	r3, 1b5e <CONFIG_LOG_BUFFER_SIZE+0x35e>
    1b36:	f1b8 0f00 	cmp.w	r8, #0
    1b3a:	dd16      	ble.n	1b6a <CONFIG_LOG_BUFFER_SIZE+0x36a>
			conv->pad0_value = -decexp;
    1b3c:	4259      	negs	r1, r3
    1b3e:	4541      	cmp	r1, r8
    1b40:	bfa8      	it	ge
    1b42:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
    1b44:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
    1b48:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
    1b4a:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    1b4c:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    1b50:	bfd4      	ite	le
    1b52:	2100      	movle	r1, #0
    1b54:	2101      	movgt	r1, #1
    1b56:	f361 1045 	bfi	r0, r1, #5, #1
    1b5a:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
    1b5e:	f1b8 0f00 	cmp.w	r8, #0
    1b62:	dd02      	ble.n	1b6a <CONFIG_LOG_BUFFER_SIZE+0x36a>
    1b64:	9907      	ldr	r1, [sp, #28]
    1b66:	2900      	cmp	r1, #0
    1b68:	dc56      	bgt.n	1c18 <CONFIG_LOG_BUFFER_SIZE+0x418>
	if (prune_zero) {
    1b6a:	9903      	ldr	r1, [sp, #12]
    1b6c:	2900      	cmp	r1, #0
    1b6e:	d163      	bne.n	1c38 <CONFIG_LOG_BUFFER_SIZE+0x438>
	conv->pad0_pre_exp = precision;
    1b70:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
    1b74:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    1b78:	2945      	cmp	r1, #69	; 0x45
    1b7a:	d121      	bne.n	1bc0 <CONFIG_LOG_BUFFER_SIZE+0x3c0>
		if (decexp < 0) {
    1b7c:	2b00      	cmp	r3, #0
		*buf++ = c;
    1b7e:	4629      	mov	r1, r5
			decexp = -decexp;
    1b80:	bfb8      	it	lt
    1b82:	425b      	neglt	r3, r3
		*buf++ = c;
    1b84:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
    1b88:	bfb4      	ite	lt
    1b8a:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    1b8c:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    1b8e:	2b63      	cmp	r3, #99	; 0x63
    1b90:	706a      	strb	r2, [r5, #1]
    1b92:	dd09      	ble.n	1ba8 <CONFIG_LOG_BUFFER_SIZE+0x3a8>
			*buf++ = (decexp / 100) + '0';
    1b94:	2064      	movs	r0, #100	; 0x64
    1b96:	fb93 f2f0 	sdiv	r2, r3, r0
    1b9a:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    1b9e:	1ce9      	adds	r1, r5, #3
    1ba0:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
    1ba4:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    1ba8:	200a      	movs	r0, #10
    1baa:	460d      	mov	r5, r1
    1bac:	fb93 f2f0 	sdiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
    1bb0:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    1bb4:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    1bb8:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    1bba:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
    1bbe:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
    1bc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1bc2:	2b00      	cmp	r3, #0
    1bc4:	dc43      	bgt.n	1c4e <CONFIG_LOG_BUFFER_SIZE+0x44e>
    1bc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1bc8:	2b00      	cmp	r3, #0
    1bca:	bfd4      	ite	le
    1bcc:	2300      	movle	r3, #0
    1bce:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    1bd0:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    1bd4:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    1bd8:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    1bda:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
    1bde:	702b      	strb	r3, [r5, #0]
	return bps;
    1be0:	e602      	b.n	17e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x460>
		*buf = _get_digit(&fract, &digit_count);
    1be2:	a907      	add	r1, sp, #28
    1be4:	a808      	add	r0, sp, #32
    1be6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1bea:	f01b fde1 	bl	1d7b0 <_get_digit>
		if (*buf++ != '0') {
    1bee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
    1bf2:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
    1bf6:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
    1bfa:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    1bfc:	bf18      	it	ne
    1bfe:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    1c02:	0688      	lsls	r0, r1, #26
    1c04:	d402      	bmi.n	1c0c <CONFIG_LOG_BUFFER_SIZE+0x40c>
    1c06:	f1b8 0f00 	cmp.w	r8, #0
    1c0a:	dd12      	ble.n	1c32 <CONFIG_LOG_BUFFER_SIZE+0x432>
			*buf++ = '.';
    1c0c:	212e      	movs	r1, #46	; 0x2e
    1c0e:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    1c12:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
    1c16:	e7a2      	b.n	1b5e <CONFIG_LOG_BUFFER_SIZE+0x35e>
		*buf++ = _get_digit(&fract, &digit_count);
    1c18:	a907      	add	r1, sp, #28
    1c1a:	a808      	add	r0, sp, #32
    1c1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1c20:	f01b fdc6 	bl	1d7b0 <_get_digit>
		precision--;
    1c24:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    1c28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
    1c2c:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
    1c30:	e795      	b.n	1b5e <CONFIG_LOG_BUFFER_SIZE+0x35e>
		if (*buf++ != '0') {
    1c32:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    1c36:	e798      	b.n	1b6a <CONFIG_LOG_BUFFER_SIZE+0x36a>
		conv->pad0_pre_exp = 0;
    1c38:	2100      	movs	r1, #0
    1c3a:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
    1c3c:	4628      	mov	r0, r5
    1c3e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    1c42:	2930      	cmp	r1, #48	; 0x30
    1c44:	d0fa      	beq.n	1c3c <CONFIG_LOG_BUFFER_SIZE+0x43c>
		if (*buf != '.') {
    1c46:	292e      	cmp	r1, #46	; 0x2e
    1c48:	bf18      	it	ne
    1c4a:	4605      	movne	r5, r0
    1c4c:	e792      	b.n	1b74 <CONFIG_LOG_BUFFER_SIZE+0x374>
		|| (conv->pad0_pre_exp > 0);
    1c4e:	2301      	movs	r3, #1
    1c50:	e7be      	b.n	1bd0 <CONFIG_LOG_BUFFER_SIZE+0x3d0>
			bpe = bps + 5;
    1c52:	4d4b      	ldr	r5, [pc, #300]	; (1d80 <CONFIG_LOG_BUFFER_SIZE+0x580>)
		char sign = 0;
    1c54:	4607      	mov	r7, r0
			bps = "(nil)";
    1c56:	1f6a      	subs	r2, r5, #5
    1c58:	e5c7      	b.n	17ea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x462>
		} else if (conv->altform_0) {
    1c5a:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
    1c5c:	bf48      	it	mi
    1c5e:	3301      	addmi	r3, #1
    1c60:	e5cc      	b.n	17fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x474>
					OUTC(pad);
    1c62:	4651      	mov	r1, sl
    1c64:	4640      	mov	r0, r8
    1c66:	9203      	str	r2, [sp, #12]
    1c68:	47c8      	blx	r9
    1c6a:	2800      	cmp	r0, #0
    1c6c:	9a03      	ldr	r2, [sp, #12]
    1c6e:	f6bf ade9 	bge.w	1844 <CONFIG_LOG_BUFFER_SIZE+0x44>
#undef OUTS
#undef OUTC
}
    1c72:	b01b      	add	sp, #108	; 0x6c
    1c74:	ecbd 8b02 	vpop	{d8}
    1c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1c7c:	f04f 0820 	mov.w	r8, #32
    1c80:	e5df      	b.n	1842 <CONFIG_LOG_BUFFER_SIZE+0x42>
					pad = '0';
    1c82:	f04f 0830 	mov.w	r8, #48	; 0x30
    1c86:	e5dc      	b.n	1842 <CONFIG_LOG_BUFFER_SIZE+0x42>
					OUTC(*cp++);
    1c88:	4651      	mov	r1, sl
    1c8a:	47c8      	blx	r9
    1c8c:	2800      	cmp	r0, #0
    1c8e:	f6bf adf9 	bge.w	1884 <CONFIG_LOG_BUFFER_SIZE+0x84>
    1c92:	e7ee      	b.n	1c72 <CONFIG_LOG_BUFFER_SIZE+0x472>
					OUTC(*cp++);
    1c94:	4651      	mov	r1, sl
    1c96:	9203      	str	r2, [sp, #12]
    1c98:	47c8      	blx	r9
    1c9a:	2800      	cmp	r0, #0
    1c9c:	9a03      	ldr	r2, [sp, #12]
    1c9e:	dbe8      	blt.n	1c72 <CONFIG_LOG_BUFFER_SIZE+0x472>
				while (isdigit((int)*cp)) {
    1ca0:	7810      	ldrb	r0, [r2, #0]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1ca2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    1ca6:	2b09      	cmp	r3, #9
    1ca8:	4617      	mov	r7, r2
    1caa:	eb06 0802 	add.w	r8, r6, r2
    1cae:	f102 0201 	add.w	r2, r2, #1
    1cb2:	d9ef      	bls.n	1c94 <CONFIG_LOG_BUFFER_SIZE+0x494>
				if (!conv->pad_postdp) {
    1cb4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
    1cb8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
    1cba:	069b      	lsls	r3, r3, #26
    1cbc:	d407      	bmi.n	1cce <CONFIG_LOG_BUFFER_SIZE+0x4ce>
    1cbe:	44b0      	add	r8, r6
					while (pad_len-- > 0) {
    1cc0:	2e00      	cmp	r6, #0
    1cc2:	eba8 0206 	sub.w	r2, r8, r6
    1cc6:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
    1cca:	dc0f      	bgt.n	1cec <CONFIG_LOG_BUFFER_SIZE+0x4ec>
    1ccc:	4690      	mov	r8, r2
				if (*cp == '.') {
    1cce:	7838      	ldrb	r0, [r7, #0]
    1cd0:	282e      	cmp	r0, #46	; 0x2e
    1cd2:	d108      	bne.n	1ce6 <CONFIG_LOG_BUFFER_SIZE+0x4e6>
					OUTC(*cp++);
    1cd4:	4651      	mov	r1, sl
    1cd6:	47c8      	blx	r9
						OUTC('0');
    1cd8:	2800      	cmp	r0, #0
    1cda:	dbca      	blt.n	1c72 <CONFIG_LOG_BUFFER_SIZE+0x472>
					while (pad_len-- > 0) {
    1cdc:	2e00      	cmp	r6, #0
						OUTC('0');
    1cde:	f108 0801 	add.w	r8, r8, #1
					while (pad_len-- > 0) {
    1ce2:	dc09      	bgt.n	1cf8 <CONFIG_LOG_BUFFER_SIZE+0x4f8>
					OUTC(*cp++);
    1ce4:	3701      	adds	r7, #1
    1ce6:	eba8 0607 	sub.w	r6, r8, r7
    1cea:	e00e      	b.n	1d0a <CONFIG_LOG_BUFFER_SIZE+0x50a>
						OUTC('0');
    1cec:	4651      	mov	r1, sl
    1cee:	2030      	movs	r0, #48	; 0x30
    1cf0:	47c8      	blx	r9
    1cf2:	2800      	cmp	r0, #0
    1cf4:	dae4      	bge.n	1cc0 <CONFIG_LOG_BUFFER_SIZE+0x4c0>
    1cf6:	e7bc      	b.n	1c72 <CONFIG_LOG_BUFFER_SIZE+0x472>
						OUTC('0');
    1cf8:	4651      	mov	r1, sl
    1cfa:	2030      	movs	r0, #48	; 0x30
    1cfc:	47c8      	blx	r9
    1cfe:	3e01      	subs	r6, #1
    1d00:	e7ea      	b.n	1cd8 <CONFIG_LOG_BUFFER_SIZE+0x4d8>
					OUTC(*cp++);
    1d02:	4651      	mov	r1, sl
    1d04:	47c8      	blx	r9
    1d06:	2800      	cmp	r0, #0
    1d08:	dbb3      	blt.n	1c72 <CONFIG_LOG_BUFFER_SIZE+0x472>
    1d0a:	46b8      	mov	r8, r7
    1d0c:	19f3      	adds	r3, r6, r7
				while (isdigit((int)*cp)) {
    1d0e:	f817 0b01 	ldrb.w	r0, [r7], #1
    1d12:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    1d16:	2a09      	cmp	r2, #9
    1d18:	d9f3      	bls.n	1d02 <CONFIG_LOG_BUFFER_SIZE+0x502>
    1d1a:	e5ba      	b.n	1892 <CONFIG_LOG_BUFFER_SIZE+0x92>
				OUTC('0');
    1d1c:	4651      	mov	r1, sl
    1d1e:	2030      	movs	r0, #48	; 0x30
    1d20:	47c8      	blx	r9
    1d22:	2800      	cmp	r0, #0
    1d24:	dba5      	blt.n	1c72 <CONFIG_LOG_BUFFER_SIZE+0x472>
    1d26:	3601      	adds	r6, #1
    1d28:	e5b6      	b.n	1898 <CONFIG_LOG_BUFFER_SIZE+0x98>
			if (conv->altform_0c | conv->altform_0) {
    1d2a:	06d8      	lsls	r0, r3, #27
    1d2c:	d401      	bmi.n	1d32 <CONFIG_LOG_BUFFER_SIZE+0x532>
    1d2e:	0719      	lsls	r1, r3, #28
    1d30:	d507      	bpl.n	1d42 <CONFIG_LOG_BUFFER_SIZE+0x542>
				OUTC('0');
    1d32:	4651      	mov	r1, sl
    1d34:	2030      	movs	r0, #48	; 0x30
    1d36:	9203      	str	r2, [sp, #12]
    1d38:	47c8      	blx	r9
    1d3a:	2800      	cmp	r0, #0
    1d3c:	db99      	blt.n	1c72 <CONFIG_LOG_BUFFER_SIZE+0x472>
    1d3e:	9a03      	ldr	r2, [sp, #12]
    1d40:	3601      	adds	r6, #1
			if (conv->altform_0c) {
    1d42:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1d46:	06db      	lsls	r3, r3, #27
    1d48:	d508      	bpl.n	1d5c <CONFIG_LOG_BUFFER_SIZE+0x55c>
				OUTC(conv->specifier);
    1d4a:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    1d4e:	9203      	str	r2, [sp, #12]
    1d50:	4651      	mov	r1, sl
    1d52:	47c8      	blx	r9
    1d54:	2800      	cmp	r0, #0
    1d56:	db8c      	blt.n	1c72 <CONFIG_LOG_BUFFER_SIZE+0x472>
    1d58:	9a03      	ldr	r2, [sp, #12]
    1d5a:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
    1d5c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    1d5e:	4437      	add	r7, r6
    1d60:	1bbb      	subs	r3, r7, r6
    1d62:	2b00      	cmp	r3, #0
    1d64:	dc01      	bgt.n	1d6a <CONFIG_LOG_BUFFER_SIZE+0x56a>
			OUTS(bps, bpe);
    1d66:	462b      	mov	r3, r5
    1d68:	e59c      	b.n	18a4 <CONFIG_LOG_BUFFER_SIZE+0xa4>
				OUTC('0');
    1d6a:	4651      	mov	r1, sl
    1d6c:	2030      	movs	r0, #48	; 0x30
    1d6e:	9203      	str	r2, [sp, #12]
    1d70:	47c8      	blx	r9
    1d72:	2800      	cmp	r0, #0
    1d74:	f6ff af7d 	blt.w	1c72 <CONFIG_LOG_BUFFER_SIZE+0x472>
    1d78:	9a03      	ldr	r2, [sp, #12]
    1d7a:	3601      	adds	r6, #1
    1d7c:	e7f0      	b.n	1d60 <CONFIG_LOG_BUFFER_SIZE+0x560>
    1d7e:	bf00      	nop
    1d80:	000240e1 	.word	0x000240e1
    1d84:	00000000 	.word	0x00000000

00001d88 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    1d88:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    1d8a:	4d43      	ldr	r5, [pc, #268]	; (1e98 <bt_init+0x110>)
    1d8c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    1d90:	6899      	ldr	r1, [r3, #8]
    1d92:	f011 0101 	ands.w	r1, r1, #1
{
    1d96:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    1d98:	d121      	bne.n	1dde <bt_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    1d9a:	aa03      	add	r2, sp, #12
    1d9c:	f640 4003 	movw	r0, #3075	; 0xc03
    1da0:	f006 fc4c 	bl	863c <bt_hci_cmd_send_sync>
		if (err) {
    1da4:	4604      	mov	r4, r0
    1da6:	2800      	cmp	r0, #0
    1da8:	d173      	bne.n	1e92 <bt_init+0x10a>
	uint8_t status = buf->data[0];
    1daa:	9b03      	ldr	r3, [sp, #12]
    1dac:	689b      	ldr	r3, [r3, #8]
	if (status) {
    1dae:	781b      	ldrb	r3, [r3, #0]
    1db0:	b993      	cbnz	r3, 1dd8 <bt_init+0x50>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1db2:	f3bf 8f5b 	dmb	ish
    1db6:	462b      	mov	r3, r5
    1db8:	f853 2f98 	ldr.w	r2, [r3, #152]!
    1dbc:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    1dc0:	f002 0205 	and.w	r2, r2, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1dc4:	f3bf 8f5b 	dmb	ish
    1dc8:	e853 1f00 	ldrex	r1, [r3]
    1dcc:	e843 2000 	strex	r0, r2, [r3]
    1dd0:	2800      	cmp	r0, #0
    1dd2:	d1f9      	bne.n	1dc8 <bt_init+0x40>
    1dd4:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    1dd8:	9803      	ldr	r0, [sp, #12]
    1dda:	f018 f91d 	bl	1a018 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    1dde:	aa03      	add	r2, sp, #12
    1de0:	2100      	movs	r1, #0
    1de2:	f241 0003 	movw	r0, #4099	; 0x1003
    1de6:	f006 fc29 	bl	863c <bt_hci_cmd_send_sync>
	if (err) {
    1dea:	4604      	mov	r4, r0
    1dec:	2800      	cmp	r0, #0
    1dee:	d150      	bne.n	1e92 <bt_init+0x10a>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    1df0:	9b03      	ldr	r3, [sp, #12]
    1df2:	482a      	ldr	r0, [pc, #168]	; (1e9c <bt_init+0x114>)
    1df4:	6899      	ldr	r1, [r3, #8]
    1df6:	2208      	movs	r2, #8
    1df8:	3101      	adds	r1, #1
    1dfa:	f01d fb6d 	bl	1f4d8 <memcpy>
	net_buf_unref(rsp);
    1dfe:	9803      	ldr	r0, [sp, #12]
    1e00:	f018 f90a 	bl	1a018 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    1e04:	4621      	mov	r1, r4
    1e06:	aa03      	add	r2, sp, #12
    1e08:	f241 0001 	movw	r0, #4097	; 0x1001
    1e0c:	f006 fc16 	bl	863c <bt_hci_cmd_send_sync>
	if (err) {
    1e10:	4604      	mov	r4, r0
    1e12:	2800      	cmp	r0, #0
    1e14:	d13d      	bne.n	1e92 <bt_init+0x10a>
	read_local_ver_complete(rsp);
    1e16:	9803      	ldr	r0, [sp, #12]
    1e18:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    1e1a:	785a      	ldrb	r2, [r3, #1]
    1e1c:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    1e20:	78d9      	ldrb	r1, [r3, #3]
    1e22:	789a      	ldrb	r2, [r3, #2]
    1e24:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    1e28:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    1e2a:	791a      	ldrb	r2, [r3, #4]
    1e2c:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    1e30:	7a19      	ldrb	r1, [r3, #8]
    1e32:	79da      	ldrb	r2, [r3, #7]
    1e34:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    1e38:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    1e3a:	795a      	ldrb	r2, [r3, #5]
    1e3c:	799b      	ldrb	r3, [r3, #6]
    1e3e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    1e42:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    1e44:	f018 f8e8 	bl	1a018 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    1e48:	4621      	mov	r1, r4
    1e4a:	aa03      	add	r2, sp, #12
    1e4c:	f241 0002 	movw	r0, #4098	; 0x1002
    1e50:	f006 fbf4 	bl	863c <bt_hci_cmd_send_sync>
	if (err) {
    1e54:	4604      	mov	r4, r0
    1e56:	b9e0      	cbnz	r0, 1e92 <bt_init+0x10a>
	memcpy(bt_dev.supported_commands, rp->commands,
    1e58:	9b03      	ldr	r3, [sp, #12]
    1e5a:	4811      	ldr	r0, [pc, #68]	; (1ea0 <bt_init+0x118>)
    1e5c:	6899      	ldr	r1, [r3, #8]
    1e5e:	2240      	movs	r2, #64	; 0x40
    1e60:	3101      	adds	r1, #1
    1e62:	f01d fb39 	bl	1f4d8 <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
    1e66:	480e      	ldr	r0, [pc, #56]	; (1ea0 <bt_init+0x118>)
    1e68:	f01d fc1c 	bl	1f6a4 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
    1e6c:	9803      	ldr	r0, [sp, #12]
    1e6e:	f018 f8d3 	bl	1a018 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    1e72:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    1e76:	0658      	lsls	r0, r3, #25
    1e78:	d41a      	bmi.n	1eb0 <bt_init+0x128>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    1e7a:	4b0a      	ldr	r3, [pc, #40]	; (1ea4 <bt_init+0x11c>)
    1e7c:	490a      	ldr	r1, [pc, #40]	; (1ea8 <bt_init+0x120>)
		BT_ERR("Non-LE capable controller detected!");
    1e7e:	480b      	ldr	r0, [pc, #44]	; (1eac <bt_init+0x124>)
    1e80:	1ac9      	subs	r1, r1, r3
    1e82:	08c9      	lsrs	r1, r1, #3
    1e84:	0189      	lsls	r1, r1, #6
    1e86:	f041 0101 	orr.w	r1, r1, #1
    1e8a:	f01b fd4b 	bl	1d924 <log_0>
		return -ENODEV;
    1e8e:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    1e92:	4620      	mov	r0, r4
    1e94:	b008      	add	sp, #32
    1e96:	bd70      	pop	{r4, r5, r6, pc}
    1e98:	20000000 	.word	0x20000000
    1e9c:	2000003c 	.word	0x2000003c
    1ea0:	20000044 	.word	0x20000044
    1ea4:	000225d8 	.word	0x000225d8
    1ea8:	000226b0 	.word	0x000226b0
    1eac:	00024ef9 	.word	0x00024ef9
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    1eb0:	4621      	mov	r1, r4
    1eb2:	aa03      	add	r2, sp, #12
    1eb4:	f242 0003 	movw	r0, #8195	; 0x2003
    1eb8:	f006 fbc0 	bl	863c <bt_hci_cmd_send_sync>
	if (err) {
    1ebc:	4604      	mov	r4, r0
    1ebe:	2800      	cmp	r0, #0
    1ec0:	d1e7      	bne.n	1e92 <bt_init+0x10a>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    1ec2:	9b03      	ldr	r3, [sp, #12]
    1ec4:	48a2      	ldr	r0, [pc, #648]	; (2150 <bt_init+0x3c8>)
    1ec6:	6899      	ldr	r1, [r3, #8]
    1ec8:	2208      	movs	r2, #8
    1eca:	3101      	adds	r1, #1
    1ecc:	f01d fb04 	bl	1f4d8 <memcpy>
	net_buf_unref(rsp);
    1ed0:	9803      	ldr	r0, [sp, #12]
    1ed2:	f018 f8a1 	bl	1a018 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    1ed6:	4621      	mov	r1, r4
    1ed8:	aa03      	add	r2, sp, #12
    1eda:	f242 0002 	movw	r0, #8194	; 0x2002
    1ede:	f006 fbad 	bl	863c <bt_hci_cmd_send_sync>
		if (err) {
    1ee2:	4604      	mov	r4, r0
    1ee4:	2800      	cmp	r0, #0
    1ee6:	d1d4      	bne.n	1e92 <bt_init+0x10a>
		le_read_buffer_size_complete(rsp);
    1ee8:	9b03      	ldr	r3, [sp, #12]
    1eea:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    1eec:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    1ef0:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
    1ef4:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    1ef6:	b121      	cbz	r1, 1f02 <bt_init+0x17a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    1ef8:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    1efa:	4896      	ldr	r0, [pc, #600]	; (2154 <bt_init+0x3cc>)
    1efc:	4611      	mov	r1, r2
    1efe:	f01f ff96 	bl	21e2e <z_impl_k_sem_init>
		net_buf_unref(rsp);
    1f02:	9803      	ldr	r0, [sp, #12]
    1f04:	f018 f888 	bl	1a018 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    1f08:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
    1f0c:	f016 0620 	ands.w	r6, r6, #32
    1f10:	f000 80fd 	beq.w	210e <bt_init+0x386>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    1f14:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    1f18:	0719      	lsls	r1, r3, #28
    1f1a:	d512      	bpl.n	1f42 <bt_init+0x1ba>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    1f1c:	aa03      	add	r2, sp, #12
    1f1e:	2100      	movs	r1, #0
    1f20:	f242 001c 	movw	r0, #8220	; 0x201c
    1f24:	f006 fb8a 	bl	863c <bt_hci_cmd_send_sync>
		if (err) {
    1f28:	4604      	mov	r4, r0
    1f2a:	2800      	cmp	r0, #0
    1f2c:	d1b1      	bne.n	1e92 <bt_init+0x10a>
		le_read_supp_states_complete(rsp);
    1f2e:	9803      	ldr	r0, [sp, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    1f30:	6883      	ldr	r3, [r0, #8]
    1f32:	f8d3 2001 	ldr.w	r2, [r3, #1]
    1f36:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    1f3a:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
    1f3e:	f018 f86b 	bl	1a018 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    1f42:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    1f46:	069a      	lsls	r2, r3, #26
    1f48:	d524      	bpl.n	1f94 <bt_init+0x20c>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    1f4a:	a902      	add	r1, sp, #8
    1f4c:	f10d 0006 	add.w	r0, sp, #6
    1f50:	f006 fbee 	bl	8730 <hci_le_read_max_data_len>
		if (err) {
    1f54:	4604      	mov	r4, r0
    1f56:	2800      	cmp	r0, #0
    1f58:	d19b      	bne.n	1e92 <bt_init+0x10a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    1f5a:	2104      	movs	r1, #4
    1f5c:	f242 0024 	movw	r0, #8228	; 0x2024
    1f60:	f006 fa0a 	bl	8378 <bt_hci_cmd_create>
		if (!buf) {
    1f64:	4606      	mov	r6, r0
    1f66:	2800      	cmp	r0, #0
    1f68:	f000 80d8 	beq.w	211c <bt_init+0x394>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    1f6c:	2104      	movs	r1, #4
    1f6e:	3008      	adds	r0, #8
    1f70:	f01f fb8c 	bl	2168c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    1f74:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    1f78:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    1f7a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    1f7e:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    1f80:	4622      	mov	r2, r4
    1f82:	4631      	mov	r1, r6
    1f84:	f242 0024 	movw	r0, #8228	; 0x2024
    1f88:	f006 fb58 	bl	863c <bt_hci_cmd_send_sync>
		if (err) {
    1f8c:	4604      	mov	r4, r0
    1f8e:	2800      	cmp	r0, #0
    1f90:	f47f af7f 	bne.w	1e92 <bt_init+0x10a>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    1f94:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    1f98:	065b      	lsls	r3, r3, #25
    1f9a:	d510      	bpl.n	1fbe <bt_init+0x236>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    1f9c:	aa03      	add	r2, sp, #12
    1f9e:	2100      	movs	r1, #0
    1fa0:	f242 002a 	movw	r0, #8234	; 0x202a
    1fa4:	f006 fb4a 	bl	863c <bt_hci_cmd_send_sync>
		if (err) {
    1fa8:	4604      	mov	r4, r0
    1faa:	2800      	cmp	r0, #0
    1fac:	f47f af71 	bne.w	1e92 <bt_init+0x10a>
		le_read_resolving_list_size_complete(rsp);
    1fb0:	9803      	ldr	r0, [sp, #12]
	bt_dev.le.rl_size = rp->rl_size;
    1fb2:	6883      	ldr	r3, [r0, #8]
    1fb4:	785b      	ldrb	r3, [r3, #1]
    1fb6:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
		net_buf_unref(rsp);
    1fba:	f018 f82d 	bl	1a018 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    1fbe:	2108      	movs	r1, #8
    1fc0:	f242 0001 	movw	r0, #8193	; 0x2001
    1fc4:	f006 f9d8 	bl	8378 <bt_hci_cmd_create>
	if (!buf) {
    1fc8:	4604      	mov	r4, r0
    1fca:	2800      	cmp	r0, #0
    1fcc:	f000 80a6 	beq.w	211c <bt_init+0x394>
    1fd0:	2108      	movs	r1, #8
    1fd2:	4408      	add	r0, r1
    1fd4:	f01f fb5a 	bl	2168c <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    1fd8:	f895 10a0 	ldrb.w	r1, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    1fdc:	f011 0f40 	tst.w	r1, #64	; 0x40
    1fe0:	f240 2302 	movw	r3, #514	; 0x202
    1fe4:	bf08      	it	eq
    1fe6:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    1fe8:	078e      	lsls	r6, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    1fea:	bf4c      	ite	mi
    1fec:	f043 032c 	orrmi.w	r3, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    1ff0:	f043 030c 	orrpl.w	r3, r3, #12
    1ff4:	4602      	mov	r2, r0
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    1ff6:	0688      	lsls	r0, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    1ff8:	f895 00a1 	ldrb.w	r0, [r5, #161]	; 0xa1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    1ffc:	bf48      	it	mi
    1ffe:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    2002:	f010 0f09 	tst.w	r0, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    2006:	bf18      	it	ne
    2008:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    200c:	07ce      	lsls	r6, r1, #31
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    200e:	f895 1066 	ldrb.w	r1, [r5, #102]	; 0x66
    2012:	f001 0106 	and.w	r1, r1, #6
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    2016:	bf48      	it	mi
    2018:	f043 0310 	orrmi.w	r3, r3, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    201c:	2906      	cmp	r1, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    201e:	bf08      	it	eq
    2020:	f443 73c0 	orreq.w	r3, r3, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    2024:	4618      	mov	r0, r3
    2026:	2100      	movs	r1, #0
    2028:	f01d fbe0 	bl	1f7ec <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    202c:	4621      	mov	r1, r4
    202e:	2200      	movs	r2, #0
    2030:	f242 0001 	movw	r0, #8193	; 0x2001
    2034:	f006 fb02 	bl	863c <bt_hci_cmd_send_sync>
	if (err) {
    2038:	4604      	mov	r4, r0
    203a:	2800      	cmp	r0, #0
    203c:	f47f af29 	bne.w	1e92 <bt_init+0x10a>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2040:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    2044:	0698      	lsls	r0, r3, #26
    2046:	d41e      	bmi.n	2086 <bt_init+0x2fe>
	if (bt_dev.le.acl_mtu) {
    2048:	f8b5 10cc 	ldrh.w	r1, [r5, #204]	; 0xcc
    204c:	b9d9      	cbnz	r1, 2086 <bt_init+0x2fe>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    204e:	aa03      	add	r2, sp, #12
    2050:	f241 0005 	movw	r0, #4101	; 0x1005
    2054:	f006 faf2 	bl	863c <bt_hci_cmd_send_sync>
	if (err) {
    2058:	4604      	mov	r4, r0
    205a:	2800      	cmp	r0, #0
    205c:	f47f af19 	bne.w	1e92 <bt_init+0x10a>
	if (bt_dev.le.acl_mtu) {
    2060:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
    2064:	b963      	cbnz	r3, 2080 <bt_init+0x2f8>
    2066:	9b03      	ldr	r3, [sp, #12]
    2068:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    206a:	785a      	ldrb	r2, [r3, #1]
    206c:	7899      	ldrb	r1, [r3, #2]
    206e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2072:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    2076:	889a      	ldrh	r2, [r3, #4]
    2078:	4836      	ldr	r0, [pc, #216]	; (2154 <bt_init+0x3cc>)
    207a:	4611      	mov	r1, r2
    207c:	f01f fed7 	bl	21e2e <z_impl_k_sem_init>
	net_buf_unref(rsp);
    2080:	9803      	ldr	r0, [sp, #12]
    2082:	f017 ffc9 	bl	1a018 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    2086:	2108      	movs	r1, #8
    2088:	f640 4001 	movw	r0, #3073	; 0xc01
    208c:	f006 f974 	bl	8378 <bt_hci_cmd_create>
	if (!buf) {
    2090:	4604      	mov	r4, r0
    2092:	2800      	cmp	r0, #0
    2094:	d042      	beq.n	211c <bt_init+0x394>
    2096:	2108      	movs	r1, #8
    2098:	4408      	add	r0, r1
    209a:	f01f faf7 	bl	2168c <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    209e:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    20a2:	07d9      	lsls	r1, r3, #31
    20a4:	4602      	mov	r2, r0
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    20a6:	bf53      	iteet	pl
    20a8:	f04f 5100 	movpl.w	r1, #536870912	; 0x20000000
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    20ac:	a126      	addmi	r1, pc, #152	; (adr r1, 2148 <bt_init+0x3c0>)
    20ae:	e9d1 0100 	ldrdmi	r0, r1, [r1]
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    20b2:	4829      	ldrpl	r0, [pc, #164]	; (2158 <bt_init+0x3d0>)
	sys_put_le64(mask, ev->events);
    20b4:	f01d fb9a 	bl	1f7ec <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    20b8:	4621      	mov	r1, r4
    20ba:	2200      	movs	r2, #0
    20bc:	f640 4001 	movw	r0, #3073	; 0xc01
    20c0:	f006 fabc 	bl	863c <bt_hci_cmd_send_sync>
	if (err) {
    20c4:	4604      	mov	r4, r0
    20c6:	2800      	cmp	r0, #0
    20c8:	f47f aee3 	bne.w	1e92 <bt_init+0x10a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    20cc:	4601      	mov	r1, r0
    20ce:	aa02      	add	r2, sp, #8
    20d0:	f64f 4001 	movw	r0, #64513	; 0xfc01
    20d4:	f006 fab2 	bl	863c <bt_hci_cmd_send_sync>
    20d8:	4c20      	ldr	r4, [pc, #128]	; (215c <bt_init+0x3d4>)
    20da:	4b21      	ldr	r3, [pc, #132]	; (2160 <bt_init+0x3d8>)
    20dc:	1ae4      	subs	r4, r4, r3
    20de:	08e4      	lsrs	r4, r4, #3
    20e0:	01a4      	lsls	r4, r4, #6
	if (err) {
    20e2:	2800      	cmp	r0, #0
    20e4:	d040      	beq.n	2168 <bt_init+0x3e0>
		BT_WARN("Vendor HCI extensions not available");
    20e6:	481f      	ldr	r0, [pc, #124]	; (2164 <bt_init+0x3dc>)
    20e8:	f044 0102 	orr.w	r1, r4, #2
			BT_WARN("Failed to read supported vendor features");
    20ec:	f01b fc1a 	bl	1d924 <log_0>
	err = bt_id_init();
    20f0:	f007 fb8c 	bl	980c <bt_id_init>
	if (err) {
    20f4:	4604      	mov	r4, r0
    20f6:	2800      	cmp	r0, #0
    20f8:	f47f aecb 	bne.w	1e92 <bt_init+0x10a>
		err = bt_conn_init();
    20fc:	f008 fd0e 	bl	ab1c <bt_conn_init>
		if (err) {
    2100:	4604      	mov	r4, r0
    2102:	2800      	cmp	r0, #0
    2104:	f47f aec5 	bne.w	1e92 <bt_init+0x10a>
	bt_finalize_init();
    2108:	f006 fefc 	bl	8f04 <bt_finalize_init>
	return 0;
    210c:	e6c1      	b.n	1e92 <bt_init+0x10a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    210e:	2102      	movs	r1, #2
    2110:	f640 406d 	movw	r0, #3181	; 0xc6d
    2114:	f006 f930 	bl	8378 <bt_hci_cmd_create>
		if (!buf) {
    2118:	4604      	mov	r4, r0
    211a:	b910      	cbnz	r0, 2122 <bt_init+0x39a>
		return -ENOBUFS;
    211c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2120:	e6b7      	b.n	1e92 <bt_init+0x10a>
    2122:	2102      	movs	r1, #2
    2124:	3008      	adds	r0, #8
    2126:	f01f fab1 	bl	2168c <net_buf_simple_add>
		cp_le->le = 0x01;
    212a:	2301      	movs	r3, #1
    212c:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    212e:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2130:	4621      	mov	r1, r4
    2132:	4632      	mov	r2, r6
    2134:	f640 406d 	movw	r0, #3181	; 0xc6d
    2138:	f006 fa80 	bl	863c <bt_hci_cmd_send_sync>
		if (err) {
    213c:	4604      	mov	r4, r0
    213e:	2800      	cmp	r0, #0
    2140:	f43f aee8 	beq.w	1f14 <bt_init+0x18c>
    2144:	e6a5      	b.n	1e92 <bt_init+0x10a>
    2146:	bf00      	nop
    2148:	02008890 	.word	0x02008890
    214c:	20008000 	.word	0x20008000
    2150:	200000a0 	.word	0x200000a0
    2154:	200000d0 	.word	0x200000d0
    2158:	02008810 	.word	0x02008810
    215c:	000226b0 	.word	0x000226b0
    2160:	000225d8 	.word	0x000225d8
    2164:	00024f1d 	.word	0x00024f1d
	rp.info = (void *)rsp->data;
    2168:	9b02      	ldr	r3, [sp, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    216a:	4836      	ldr	r0, [pc, #216]	; (2244 <bt_init+0x4bc>)
	rp.info = (void *)rsp->data;
    216c:	689e      	ldr	r6, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    216e:	f8b6 2001 	ldrh.w	r2, [r6, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    2172:	2a03      	cmp	r2, #3
		return plat_str[platform];
    2174:	bf96      	itet	ls
    2176:	4934      	ldrls	r1, [pc, #208]	; (2248 <bt_init+0x4c0>)
	return "unknown";
    2178:	4934      	ldrhi	r1, [pc, #208]	; (224c <bt_init+0x4c4>)
		return plat_str[platform];
    217a:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    217e:	f044 0303 	orr.w	r3, r4, #3
    2182:	f01b fbf5 	bl	1d970 <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2186:	f8b6 1001 	ldrh.w	r1, [r6, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    218a:	f8b6 2003 	ldrh.w	r2, [r6, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    218e:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    2190:	f044 0303 	orr.w	r3, r4, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2194:	d12e      	bne.n	21f4 <bt_init+0x46c>
	if (variant < ARRAY_SIZE(nordic_str)) {
    2196:	2a03      	cmp	r2, #3
    2198:	d82c      	bhi.n	21f4 <bt_init+0x46c>
		return nordic_str[variant];
    219a:	492d      	ldr	r1, [pc, #180]	; (2250 <bt_init+0x4c8>)
    219c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    21a0:	482c      	ldr	r0, [pc, #176]	; (2254 <bt_init+0x4cc>)
    21a2:	f01b fbe5 	bl	1d970 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    21a6:	7972      	ldrb	r2, [r6, #5]
    21a8:	482b      	ldr	r0, [pc, #172]	; (2258 <bt_init+0x4d0>)
	if (variant < ARRAY_SIZE(var_str)) {
    21aa:	2a03      	cmp	r2, #3
		return var_str[variant];
    21ac:	bf96      	itet	ls
    21ae:	492b      	ldrls	r1, [pc, #172]	; (225c <bt_init+0x4d4>)
	return "unknown";
    21b0:	4926      	ldrhi	r1, [pc, #152]	; (224c <bt_init+0x4c4>)
		return var_str[variant];
    21b2:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    21b6:	e9cd 1203 	strd	r1, r2, [sp, #12]
    21ba:	79b2      	ldrb	r2, [r6, #6]
    21bc:	9205      	str	r2, [sp, #20]
    21be:	f8b6 2007 	ldrh.w	r2, [r6, #7]
    21c2:	9206      	str	r2, [sp, #24]
    21c4:	f8d6 2009 	ldr.w	r2, [r6, #9]
    21c8:	9207      	str	r2, [sp, #28]
    21ca:	f044 0303 	orr.w	r3, r4, #3
    21ce:	2205      	movs	r2, #5
    21d0:	a903      	add	r1, sp, #12
    21d2:	f01b fc05 	bl	1d9e0 <log_n>
	net_buf_unref(rsp);
    21d6:	9802      	ldr	r0, [sp, #8]
    21d8:	f017 ff1e 	bl	1a018 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    21dc:	aa02      	add	r2, sp, #8
    21de:	2100      	movs	r1, #0
    21e0:	f64f 4002 	movw	r0, #64514	; 0xfc02
    21e4:	f006 fa2a 	bl	863c <bt_hci_cmd_send_sync>
	if (err) {
    21e8:	4606      	mov	r6, r0
    21ea:	b128      	cbz	r0, 21f8 <bt_init+0x470>
		BT_WARN("Failed to read supported vendor commands");
    21ec:	481c      	ldr	r0, [pc, #112]	; (2260 <bt_init+0x4d8>)
    21ee:	f044 0102 	orr.w	r1, r4, #2
    21f2:	e77b      	b.n	20ec <bt_init+0x364>
		return "unknown";
    21f4:	4915      	ldr	r1, [pc, #84]	; (224c <bt_init+0x4c4>)
    21f6:	e7d3      	b.n	21a0 <bt_init+0x418>
	rp.cmds = (void *)rsp->data;
    21f8:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    21fa:	481a      	ldr	r0, [pc, #104]	; (2264 <bt_init+0x4dc>)
    21fc:	6899      	ldr	r1, [r3, #8]
    21fe:	2202      	movs	r2, #2
    2200:	3101      	adds	r1, #1
    2202:	f01d f969 	bl	1f4d8 <memcpy>
	net_buf_unref(rsp);
    2206:	9802      	ldr	r0, [sp, #8]
    2208:	f017 ff06 	bl	1a018 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    220c:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    2210:	075b      	lsls	r3, r3, #29
    2212:	f57f af6d 	bpl.w	20f0 <bt_init+0x368>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    2216:	aa02      	add	r2, sp, #8
    2218:	4631      	mov	r1, r6
    221a:	f64f 4003 	movw	r0, #64515	; 0xfc03
    221e:	f006 fa0d 	bl	863c <bt_hci_cmd_send_sync>
		if (err) {
    2222:	b118      	cbz	r0, 222c <bt_init+0x4a4>
			BT_WARN("Failed to read supported vendor features");
    2224:	4810      	ldr	r0, [pc, #64]	; (2268 <bt_init+0x4e0>)
    2226:	f044 0102 	orr.w	r1, r4, #2
    222a:	e75f      	b.n	20ec <bt_init+0x364>
		rp.feat = (void *)rsp->data;
    222c:	9b02      	ldr	r3, [sp, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
    222e:	480f      	ldr	r0, [pc, #60]	; (226c <bt_init+0x4e4>)
    2230:	6899      	ldr	r1, [r3, #8]
    2232:	2201      	movs	r2, #1
    2234:	4411      	add	r1, r2
    2236:	f01d f94f 	bl	1f4d8 <memcpy>
		net_buf_unref(rsp);
    223a:	9802      	ldr	r0, [sp, #8]
    223c:	f017 feec 	bl	1a018 <net_buf_unref>
    2240:	e756      	b.n	20f0 <bt_init+0x368>
    2242:	bf00      	nop
    2244:	00024f41 	.word	0x00024f41
    2248:	00022d88 	.word	0x00022d88
    224c:	00024a02 	.word	0x00024a02
    2250:	00022d48 	.word	0x00022d48
    2254:	00024f5a 	.word	0x00024f5a
    2258:	00024f72 	.word	0x00024f72
    225c:	00022dc0 	.word	0x00022dc0
    2260:	00024f9f 	.word	0x00024f9f
    2264:	20000085 	.word	0x20000085
    2268:	00024fc8 	.word	0x00024fc8
    226c:	20000084 	.word	0x20000084

00002270 <hci_init>:
#if CONFIG_BT_CTLR_DUP_FILTER_LEN > 0
	dup_count = -1;
#endif

	/* reset event masks */
	event_mask = DEFAULT_EVENT_MASK;
    2270:	ed9f 7b09 	vldr	d7, [pc, #36]	; 2298 <hci_init+0x28>
    2274:	4b0c      	ldr	r3, [pc, #48]	; (22a8 <hci_init+0x38>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    2276:	490d      	ldr	r1, [pc, #52]	; (22ac <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    2278:	4a0d      	ldr	r2, [pc, #52]	; (22b0 <hci_init+0x40>)
	event_mask = DEFAULT_EVENT_MASK;
    227a:	ed83 7b00 	vstr	d7, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    227e:	ed9f 7b08 	vldr	d7, [pc, #32]	; 22a0 <hci_init+0x30>
		ll_reset();
		*evt = cmd_complete_status(0x00);
	}

#if defined(CONFIG_BT_CONN)
	conn_count = 0U;
    2282:	4b0c      	ldr	r3, [pc, #48]	; (22b4 <hci_init+0x44>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    2284:	ed81 7b00 	vstr	d7, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    2288:	201f      	movs	r0, #31
    228a:	2100      	movs	r1, #0
    228c:	e9c2 0100 	strd	r0, r1, [r2]
	conn_count = 0U;
    2290:	2200      	movs	r2, #0
    2292:	601a      	str	r2, [r3, #0]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    2294:	4770      	bx	lr
    2296:	bf00      	nop
    2298:	ffffffff 	.word	0xffffffff
    229c:	00001fff 	.word	0x00001fff
	...
    22a8:	20000128 	.word	0x20000128
    22ac:	20001210 	.word	0x20001210
    22b0:	20000130 	.word	0x20000130
    22b4:	20001bbc 	.word	0x20001bbc

000022b8 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
    22b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
    22bc:	e9d0 350b 	ldrd	r3, r5, [r0, #44]	; 0x2c
	start_to_address_actual_us =
    22c0:	6a86      	ldr	r6, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
    22c2:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
    22c4:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
    22c6:	42a6      	cmp	r6, r4
{
    22c8:	4688      	mov	r8, r1
    22ca:	4617      	mov	r7, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    22cc:	d818      	bhi.n	2300 <ull_drift_ticks_get+0x48>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    22ce:	4d1c      	ldr	r5, [pc, #112]	; (2340 <ull_drift_ticks_get+0x88>)
    22d0:	fba3 0105 	umull	r0, r1, r3, r5
    22d4:	a318      	add	r3, pc, #96	; (adr r3, 2338 <ull_drift_ticks_get+0x80>)
    22d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    22da:	f7fe fbcf 	bl	a7c <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    22de:	1ba4      	subs	r4, r4, r6
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    22e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    22e4:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    22e8:	a313      	add	r3, pc, #76	; (adr r3, 2338 <ull_drift_ticks_get+0x80>)
    22ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    22ee:	fba4 0105 	umull	r0, r1, r4, r5
    22f2:	f7fe fbc3 	bl	a7c <__aeabi_uldivmod>
    22f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    22fa:	6038      	str	r0, [r7, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
    22fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    2300:	4c0f      	ldr	r4, [pc, #60]	; (2340 <ull_drift_ticks_get+0x88>)
    2302:	a30d      	add	r3, pc, #52	; (adr r3, 2338 <ull_drift_ticks_get+0x80>)
    2304:	e9d3 2300 	ldrd	r2, r3, [r3]
    2308:	fba6 0104 	umull	r0, r1, r6, r4
    230c:	f7fe fbb6 	bl	a7c <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    2310:	f105 0130 	add.w	r1, r5, #48	; 0x30
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    2314:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    2318:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    231c:	a306      	add	r3, pc, #24	; (adr r3, 2338 <ull_drift_ticks_get+0x80>)
    231e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2322:	fba1 0104 	umull	r0, r1, r1, r4
    2326:	f7fe fba9 	bl	a7c <__aeabi_uldivmod>
    232a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    232e:	6038      	str	r0, [r7, #0]
}
    2330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2334:	f3af 8000 	nop.w
    2338:	1afd498d 	.word	0x1afd498d
    233c:	00000007 	.word	0x00000007
    2340:	3b9aca00 	.word	0x3b9aca00
    2344:	00000000 	.word	0x00000000

00002348 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
    2348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
inline struct ll_adv_set *ull_adv_is_enabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || !adv->is_enabled) {
    234c:	4cab      	ldr	r4, [pc, #684]	; (25fc <ll_adv_enable+0x2b4>)
    234e:	f894 604a 	ldrb.w	r6, [r4, #74]	; 0x4a
{
    2352:	b08f      	sub	sp, #60	; 0x3c
	if (!adv || !adv->is_enabled) {
    2354:	f006 0601 	and.w	r6, r6, #1
	if (!enable) {
    2358:	2800      	cmp	r0, #0
    235a:	f000 8147 	beq.w	25ec <ll_adv_enable+0x2a4>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
    235e:	bbb6      	cbnz	r6, 23ce <ll_adv_enable+0x86>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    2360:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    2364:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	ull_filter_adv_update(lll->filter_policy);
    2368:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    236c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    2370:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	lll->rl_idx = FILTER_IDX_NONE;
    2374:	21ff      	movs	r1, #255	; 0xff
	ull_filter_adv_update(lll->filter_policy);
    2376:	f000 0003 	and.w	r0, r0, #3
	lll->rl_idx = FILTER_IDX_NONE;
    237a:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    237e:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    2382:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
	ull_filter_adv_update(lll->filter_policy);
    2386:	f014 fc25 	bl	16bd4 <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    238a:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
    238e:	0741      	lsls	r1, r0, #29
    2390:	f100 8118 	bmi.w	25c4 <ll_adv_enable+0x27c>
	if (pdu_adv_to_update) {
    2394:	f1b8 0f00 	cmp.w	r8, #0
    2398:	d011      	beq.n	23be <ll_adv_enable+0x76>
		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
    239a:	4898      	ldr	r0, [pc, #608]	; (25fc <ll_adv_enable+0x2b4>)
    239c:	4641      	mov	r1, r8
    239e:	f010 fc9f 	bl	12ce0 <ull_adv_pdu_update_addrs>
		if (pdu_adv_to_update->tx_addr &&
    23a2:	f898 3000 	ldrb.w	r3, [r8]
    23a6:	065a      	lsls	r2, r3, #25
    23a8:	d505      	bpl.n	23b6 <ll_adv_enable+0x6e>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
    23aa:	2106      	movs	r1, #6
    23ac:	f00c f846 	bl	e43c <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
    23b0:	2800      	cmp	r0, #0
    23b2:	f000 81d9 	beq.w	2768 <ll_adv_enable+0x420>
			ull_adv_pdu_update_addrs(adv, pdu_scan);
    23b6:	4891      	ldr	r0, [pc, #580]	; (25fc <ll_adv_enable+0x2b4>)
    23b8:	4649      	mov	r1, r9
    23ba:	f010 fc91 	bl	12ce0 <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    23be:	f898 3000 	ldrb.w	r3, [r8]
    23c2:	f013 0f0e 	tst.w	r3, #14
    23c6:	f040 80d0 	bne.w	256a <ll_adv_enable+0x222>
		if (lll->conn) {
    23ca:	6a23      	ldr	r3, [r4, #32]
    23cc:	b123      	cbz	r3, 23d8 <ll_adv_enable+0x90>
	return BT_HCI_ERR_CMD_DISALLOWED;
    23ce:	260c      	movs	r6, #12
}
    23d0:	4630      	mov	r0, r6
    23d2:	b00f      	add	sp, #60	; 0x3c
    23d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		link = ll_rx_link_alloc();
    23d8:	f00f fd7a 	bl	11ed0 <ll_rx_link_alloc>
		if (!link) {
    23dc:	4682      	mov	sl, r0
    23de:	2800      	cmp	r0, #0
    23e0:	f000 81d1 	beq.w	2786 <ll_adv_enable+0x43e>
		node_rx = ll_rx_alloc();
    23e4:	f00f fd80 	bl	11ee8 <ll_rx_alloc>
		if (!node_rx) {
    23e8:	4683      	mov	fp, r0
    23ea:	2800      	cmp	r0, #0
    23ec:	f000 81d0 	beq.w	2790 <ll_adv_enable+0x448>
		conn = ll_conn_acquire();
    23f0:	f011 fa1a 	bl	13828 <ll_conn_acquire>
		if (!conn) {
    23f4:	4605      	mov	r5, r0
    23f6:	2800      	cmp	r0, #0
    23f8:	f000 81c7 	beq.w	278a <ll_adv_enable+0x442>
		if (!conn_lll->link_tx_free) {
    23fc:	6f40      	ldr	r0, [r0, #116]	; 0x74
		conn_lll->handle = 0xFFFF;
    23fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2402:	852b      	strh	r3, [r5, #40]	; 0x28
		conn_lll = &conn->lll;
    2404:	f105 031c 	add.w	r3, r5, #28
		if (!conn_lll->link_tx_free) {
    2408:	2800      	cmp	r0, #0
    240a:	f000 81b8 	beq.w	277e <ll_adv_enable+0x436>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    240e:	f105 0268 	add.w	r2, r5, #104	; 0x68
    2412:	f105 0164 	add.w	r1, r5, #100	; 0x64
    2416:	930b      	str	r3, [sp, #44]	; 0x2c
    2418:	f00c f81c 	bl	e454 <memq_init>
			conn_lll->phy_tx = PHY_1M;
    241c:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    2420:	4b77      	ldr	r3, [pc, #476]	; (2600 <ll_adv_enable+0x2b8>)
		conn->llcp_feature.features_conn = LL_FEAT;
    2422:	4878      	ldr	r0, [pc, #480]	; (2604 <ll_adv_enable+0x2bc>)
		conn->llcp_terminate.node_rx.hdr.link = link;
    2424:	f8c5 a144 	str.w	sl, [r5, #324]	; 0x144
			conn_lll->phy_tx = PHY_1M;
    2428:	f422 62ef 	bic.w	r2, r2, #1912	; 0x778
    242c:	f022 0207 	bic.w	r2, r2, #7
    2430:	f442 7288 	orr.w	r2, r2, #272	; 0x110
    2434:	f042 0201 	orr.w	r2, r2, #1
    2438:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
		conn_lll->data_chan_sel = 0;
    243c:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    2440:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    2444:	f062 027f 	orn	r2, r2, #127	; 0x7f
    2448:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
		conn_lll->slave.initiated = 0;
    244c:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
    2450:	f022 0203 	bic.w	r2, r2, #3
    2454:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    2458:	f895 213a 	ldrb.w	r2, [r5, #314]	; 0x13a
    245c:	f022 0203 	bic.w	r2, r2, #3
    2460:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
		conn_lll->sn = 0;
    2464:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
    2468:	f022 021f 	bic.w	r2, r2, #31
    246c:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_feature.features_conn = LL_FEAT;
    2470:	2100      	movs	r1, #0
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    2472:	f04f 121b 	mov.w	r2, #1769499	; 0x1b001b
		conn_lll->latency_prepare = 0;
    2476:	2700      	movs	r7, #0
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    2478:	e9c5 2316 	strd	r2, r3, [r5, #88]	; 0x58
		conn->llcp_feature.features_conn = LL_FEAT;
    247c:	e9c5 014a 	strd	r0, r1, [r5, #296]	; 0x128
		conn->connect_expire = 6;
    2480:	2206      	movs	r2, #6
		conn->llcp_feature.features_peer = 0;
    2482:	2100      	movs	r1, #0
    2484:	2000      	movs	r0, #0
    2486:	e9c5 014c 	strd	r0, r1, [r5, #304]	; 0x130
		conn_lll->slave.window_widening_event_us = 0;
    248a:	e9c5 7712 	strd	r7, r7, [r5, #72]	; 0x48
		conn_lll->latency_prepare = 0;
    248e:	85ef      	strh	r7, [r5, #46]	; 0x2e
		conn_lll->latency_event = 0;
    2490:	632f      	str	r7, [r5, #48]	; 0x30
		conn_lll->data_chan_use = 0;
    2492:	f885 703b 	strb.w	r7, [r5, #59]	; 0x3b
		conn_lll->slave.window_size_prepare_us = 0;
    2496:	652f      	str	r7, [r5, #80]	; 0x50
		conn->supervision_expire = 0;
    2498:	f8a5 70c4 	strh.w	r7, [r5, #196]	; 0xc4
		conn->procedure_expire = 0;
    249c:	f8a5 70c8 	strh.w	r7, [r5, #200]	; 0xc8
		conn->llcp_rx = NULL;
    24a0:	f8c5 7108 	str.w	r7, [r5, #264]	; 0x108
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    24a4:	f8a5 710c 	strh.w	r7, [r5, #268]	; 0x10c
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    24a8:	f8a5 7120 	strh.w	r7, [r5, #288]	; 0x120
		conn->llcp_version.req = conn->llcp_version.ack = 0;
    24ac:	f8a5 7138 	strh.w	r7, [r5, #312]	; 0x138
		conn->llcp_terminate.reason_peer = 0;
    24b0:	f885 7143 	strb.w	r7, [r5, #323]	; 0x143
		conn_lll->link_tx_free = NULL;
    24b4:	676f      	str	r7, [r5, #116]	; 0x74
		conn_lll->packet_tx_head_len = 0;
    24b6:	f8a5 7078 	strh.w	r7, [r5, #120]	; 0x78
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    24ba:	f8a5 7164 	strh.w	r7, [r5, #356]	; 0x164
		conn->connect_expire = 6;
    24be:	f8a5 20c0 	strh.w	r2, [r5, #192]	; 0xc0
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    24c2:	f895 2166 	ldrb.w	r2, [r5, #358]	; 0x166
		conn->llcp_conn_param.req = 0;
    24c6:	f8a5 7184 	strh.w	r7, [r5, #388]	; 0x184
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    24ca:	f022 0207 	bic.w	r2, r2, #7
    24ce:	f885 2166 	strb.w	r2, [r5, #358]	; 0x166
		conn->common.fex_valid = 0;
    24d2:	f8b5 20d8 	ldrh.w	r2, [r5, #216]	; 0xd8
		conn->slave.ticks_to_offset = 0;
    24d6:	f8c5 70e0 	str.w	r7, [r5, #224]	; 0xe0
		conn->common.fex_valid = 0;
    24da:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    24de:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
		conn->llcp_conn_param.disabled = 0;
    24e2:	f895 2186 	ldrb.w	r2, [r5, #390]	; 0x186
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
    24e6:	f8a5 70e4 	strh.w	r7, [r5, #228]	; 0xe4
		conn->llcp_conn_param.disabled = 0;
    24ea:	f367 1204 	bfi	r2, r7, #4, #1
    24ee:	f885 2186 	strb.w	r2, [r5, #390]	; 0x186
		conn->llcp_length.disabled = 0U;
    24f2:	f895 21ae 	ldrb.w	r2, [r5, #430]	; 0x1ae
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
    24f6:	f885 70e6 	strb.w	r7, [r5, #230]	; 0xe6
		conn->llcp_length.disabled = 0U;
    24fa:	f367 02c3 	bfi	r2, r7, #3, #1
    24fe:	f885 21ae 	strb.w	r2, [r5, #430]	; 0x1ae
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
    2502:	f8a5 71ac 	strh.w	r7, [r5, #428]	; 0x1ac
		conn->llcp_length.cache.tx_octets = 0U;
    2506:	f8a5 71b8 	strh.w	r7, [r5, #440]	; 0x1b8
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
    250a:	f011 fcc7 	bl	13e9c <ull_conn_default_tx_octets_get>
    250e:	f8a5 00d2 	strh.w	r0, [r5, #210]	; 0xd2
		conn->default_tx_time = ull_conn_default_tx_time_get();
    2512:	f011 fcc9 	bl	13ea8 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    2516:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
    251a:	4a3b      	ldr	r2, [pc, #236]	; (2608 <ll_adv_enable+0x2c0>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
    251c:	f8a5 00d4 	strh.w	r0, [r5, #212]	; 0xd4
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    2520:	400a      	ands	r2, r1
    2522:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    2526:	f011 fcc5 	bl	13eb4 <ull_conn_default_phy_tx_get>
    252a:	f895 21c0 	ldrb.w	r2, [r5, #448]	; 0x1c0
    252e:	f360 0202 	bfi	r2, r0, #0, #3
    2532:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    2536:	f011 fcc3 	bl	13ec0 <ull_conn_default_phy_rx_get>
		lll->conn = conn_lll;
    253a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    253c:	6223      	str	r3, [r4, #32]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    253e:	f895 31c0 	ldrb.w	r3, [r5, #448]	; 0x1c0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    2542:	f8c5 71c4 	str.w	r7, [r5, #452]	; 0x1c4
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    2546:	f360 03c5 	bfi	r3, r0, #3, #3
		adv->node_rx_cc_free = node_rx;
    254a:	e9c4 ab10 	strd	sl, fp, [r4, #64]	; 0x40
		conn->tx_data = conn->tx_data_last = 0;
    254e:	e9c5 7774 	strd	r7, r7, [r5, #464]	; 0x1d0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    2552:	e9c5 7772 	strd	r7, r7, [r5, #456]	; 0x1c8
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
    2556:	e9c5 7705 	strd	r7, r7, [r5, #20]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
    255a:	61ed      	str	r5, [r5, #28]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    255c:	f885 31c0 	strb.w	r3, [r5, #448]	; 0x1c0
		err = lll_clock_wait();
    2560:	f015 fb10 	bl	17b84 <lll_clock_wait>
		if (err) {
    2564:	2800      	cmp	r0, #0
    2566:	f040 8101 	bne.w	276c <ll_adv_enable+0x424>
	uint8_t ch_map = lll->chan_map;
    256a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    256e:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
    2570:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    2574:	f10d 0033 	add.w	r0, sp, #51	; 0x33
	uint8_t ch_map = lll->chan_map;
    2578:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    257c:	f00c f8f2 	bl	e764 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
    2580:	2800      	cmp	r0, #0
    2582:	f000 8097 	beq.w	26b4 <ll_adv_enable+0x36c>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    2586:	f898 3000 	ldrb.w	r3, [r8]
    258a:	f003 030f 	and.w	r3, r3, #15
    258e:	2b02      	cmp	r3, #2
				   rxtx_turn_us * (adv_chn_cnt - 1);
    2590:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    2594:	d03a      	beq.n	260c <ll_adv_enable+0x2c4>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    2596:	2b01      	cmp	r3, #1
    2598:	f000 80ec 	beq.w	2774 <ll_adv_enable+0x42c>
					BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
    259c:	f899 0001 	ldrb.w	r0, [r9, #1]
    25a0:	3010      	adds	r0, #16
		const uint16_t scan_rsp_us =
    25a2:	00c0      	lsls	r0, r0, #3
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
    25a4:	2b00      	cmp	r3, #0
    25a6:	f040 80d7 	bne.w	2758 <ll_adv_enable+0x410>
				adv_size += pdu_adv->len;
    25aa:	f898 3001 	ldrb.w	r3, [r8, #1]
    25ae:	3310      	adds	r3, #16
				slot_us += scan_req_us + EVENT_IFS_MAX_US +
    25b0:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    25b4:	00db      	lsls	r3, r3, #3
    25b6:	f500 704d 	add.w	r0, r0, #820	; 0x334
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
    25ba:	f503 739a 	add.w	r3, r3, #308	; 0x134
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
    25be:	fb03 0101 	mla	r1, r3, r1, r0
    25c2:	e02e      	b.n	2622 <ll_adv_enable+0x2da>
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
    25c4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    25c8:	4632      	mov	r2, r6
    25ca:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    25ce:	f014 fc6d 	bl	16eac <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
    25d2:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
    25d4:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
		if (lll->rl_idx != FILTER_IDX_NONE) {
    25d8:	f43f aedc 	beq.w	2394 <ll_adv_enable+0x4c>
			ull_filter_rpa_update(false);
    25dc:	4630      	mov	r0, r6
    25de:	f014 fb13 	bl	16c08 <ull_filter_rpa_update>
	if (pdu_adv_to_update) {
    25e2:	f1b8 0f00 	cmp.w	r8, #0
    25e6:	f47f aed8 	bne.w	239a <ll_adv_enable+0x52>
    25ea:	e6e8      	b.n	23be <ll_adv_enable+0x76>
	if (!adv || !adv->is_enabled) {
    25ec:	2e00      	cmp	r6, #0
    25ee:	f43f aeee 	beq.w	23ce <ll_adv_enable+0x86>
}
    25f2:	b00f      	add	sp, #60	; 0x3c
    25f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25f8:	f010 b934 	b.w	12864 <disable.part.0>
    25fc:	20002334 	.word	0x20002334
    2600:	01480148 	.word	0x01480148
    2604:	0001417f 	.word	0x0001417f
    2608:	f6ff0000 	.word	0xf6ff0000
			adv_size += pdu_adv->len;
    260c:	f898 3001 	ldrb.w	r3, [r8, #1]
    2610:	3310      	adds	r3, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    2612:	00db      	lsls	r3, r3, #3
    2614:	fb03 f000 	mul.w	r0, r3, r0
    2618:	f500 70aa 	add.w	r0, r0, #340	; 0x154
				   rxtx_turn_us * (adv_chn_cnt - 1);
    261c:	2364      	movs	r3, #100	; 0x64
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    261e:	fb03 0101 	mla	r1, r3, r1, r0
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    2622:	4861      	ldr	r0, [pc, #388]	; (27a8 <ll_adv_enable+0x460>)
    2624:	61e4      	str	r4, [r4, #28]
	adv->evt.ticks_xtal_to_start =
    2626:	2331      	movs	r3, #49	; 0x31
    2628:	2500      	movs	r5, #0
    262a:	6023      	str	r3, [r4, #0]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    262c:	fba1 0100 	umull	r0, r1, r1, r0
    2630:	a35b      	add	r3, pc, #364	; (adr r3, 27a0 <ll_adv_enable+0x458>)
    2632:	e9d3 2300 	ldrd	r2, r3, [r3]
    2636:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->evt.ticks_preempt_to_start =
    263a:	e9c4 5501 	strd	r5, r5, [r4, #4]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    263e:	f7fe fa1d 	bl	a7c <__aeabi_uldivmod>
	uint16_t interval = adv->interval;
    2642:	f8b4 9048 	ldrh.w	r9, [r4, #72]	; 0x48
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    2646:	60e0      	str	r0, [r4, #12]
	ticks_anchor = ticker_ticks_now_get();
    2648:	f00d f996 	bl	f978 <ticker_ticks_now_get>
    264c:	4607      	mov	r7, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    264e:	f1b9 0f00 	cmp.w	r9, #0
    2652:	d108      	bne.n	2666 <ll_adv_enable+0x31e>
    2654:	f898 5000 	ldrb.w	r5, [r8]
    2658:	f005 050f 	and.w	r5, r5, #15
    265c:	f1a5 0501 	sub.w	r5, r5, #1
    2660:	fab5 f585 	clz	r5, r5
    2664:	096d      	lsrs	r5, r5, #5
    2666:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
				   (adv->evt.ticks_slot + ticks_slot_overhead),
    266a:	68e3      	ldr	r3, [r4, #12]
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    266c:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
    2670:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    2674:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
    2678:	d023      	beq.n	26c2 <ll_adv_enable+0x37a>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    267a:	2000      	movs	r0, #0
    267c:	4a4b      	ldr	r2, [pc, #300]	; (27ac <ll_adv_enable+0x464>)
    267e:	f8df 9138 	ldr.w	r9, [pc, #312]	; 27b8 <ll_adv_enable+0x470>
    2682:	9304      	str	r3, [sp, #16]
		ret_cb = TICKER_STATUS_BUSY;
    2684:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2686:	f10d 0834 	add.w	r8, sp, #52	; 0x34
    268a:	9301      	str	r3, [sp, #4]
    268c:	9205      	str	r2, [sp, #20]
    268e:	2103      	movs	r1, #3
    2690:	e9cd 0002 	strd	r0, r0, [sp, #8]
    2694:	9406      	str	r4, [sp, #24]
    2696:	463b      	mov	r3, r7
    2698:	9000      	str	r0, [sp, #0]
    269a:	f8cd 8020 	str.w	r8, [sp, #32]
    269e:	f8cd 901c 	str.w	r9, [sp, #28]
    26a2:	462a      	mov	r2, r5
		ret_cb = TICKER_STATUS_BUSY;
    26a4:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    26a6:	f00d f89b 	bl	f7e0 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
    26aa:	4641      	mov	r1, r8
    26ac:	f00f fca0 	bl	11ff0 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
    26b0:	2800      	cmp	r0, #0
    26b2:	d03c      	beq.n	272e <ll_adv_enable+0x3e6>
	if (adv->lll.conn) {
    26b4:	6a23      	ldr	r3, [r4, #32]
    26b6:	2b00      	cmp	r3, #0
    26b8:	f43f ae89 	beq.w	23ce <ll_adv_enable+0x86>
		conn_release(adv);
    26bc:	f010 f890 	bl	127e0 <conn_release.constprop.0>
    26c0:	e685      	b.n	23ce <ll_adv_enable+0x86>
		ll_adv_ticker_ext[handle].ticks_slot_window =
    26c2:	4a3b      	ldr	r2, [pc, #236]	; (27b0 <ll_adv_enable+0x468>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    26c4:	483b      	ldr	r0, [pc, #236]	; (27b4 <ll_adv_enable+0x46c>)
		ret = ticker_start_ext(
    26c6:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
    26c8:	f203 1347 	addw	r3, r3, #327	; 0x147
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    26cc:	fba9 0100 	umull	r0, r1, r9, r0
		ret = ticker_start_ext(
    26d0:	9406      	str	r4, [sp, #24]
    26d2:	9502      	str	r5, [sp, #8]
		ll_adv_ticker_ext[handle].ticks_slot_window =
    26d4:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    26d6:	2391      	movs	r3, #145	; 0x91
    26d8:	fb03 1109 	mla	r1, r3, r9, r1
		ret = ticker_start_ext(
    26dc:	4b36      	ldr	r3, [pc, #216]	; (27b8 <ll_adv_enable+0x470>)
    26de:	9307      	str	r3, [sp, #28]
    26e0:	4b32      	ldr	r3, [pc, #200]	; (27ac <ll_adv_enable+0x464>)
    26e2:	9305      	str	r3, [sp, #20]
    26e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    26e8:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
    26ea:	f04f 0902 	mov.w	r9, #2
		ret = ticker_start_ext(
    26ee:	9303      	str	r3, [sp, #12]
    26f0:	f10d 0834 	add.w	r8, sp, #52	; 0x34
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    26f4:	a32a      	add	r3, pc, #168	; (adr r3, 27a0 <ll_adv_enable+0x458>)
    26f6:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
    26fa:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
		ret = ticker_start_ext(
    26fe:	f8cd 8020 	str.w	r8, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    2702:	f7fe f9bb 	bl	a7c <__aeabi_uldivmod>
		ret = ticker_start_ext(
    2706:	463b      	mov	r3, r7
    2708:	e9cd 5000 	strd	r5, r0, [sp]
    270c:	464a      	mov	r2, r9
    270e:	4628      	mov	r0, r5
    2710:	2103      	movs	r1, #3
    2712:	f00d f80f 	bl	f734 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
    2716:	4641      	mov	r1, r8
    2718:	f00f fc6a 	bl	11ff0 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    271c:	2800      	cmp	r0, #0
    271e:	d1c9      	bne.n	26b4 <ll_adv_enable+0x36c>
	adv->is_enabled = 1;
    2720:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
    2724:	f043 0301 	orr.w	r3, r3, #1
    2728:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	return 0;
    272c:	e650      	b.n	23d0 <ll_adv_enable+0x88>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    272e:	4a23      	ldr	r2, [pc, #140]	; (27bc <ll_adv_enable+0x474>)
    2730:	9205      	str	r2, [sp, #20]
    2732:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
    2736:	9200      	str	r2, [sp, #0]
    2738:	e9cd 0003 	strd	r0, r0, [sp, #12]
    273c:	e9cd 0001 	strd	r0, r0, [sp, #4]
    2740:	f8cd 901c 	str.w	r9, [sp, #28]
    2744:	f8cd 8020 	str.w	r8, [sp, #32]
    2748:	9406      	str	r4, [sp, #24]
    274a:	463b      	mov	r3, r7
    274c:	2201      	movs	r2, #1
    274e:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
    2750:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2752:	f00d f845 	bl	f7e0 <ticker_start>
    2756:	e7de      	b.n	2716 <ll_adv_enable+0x3ce>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
    2758:	2b06      	cmp	r3, #6
    275a:	f43f af26 	beq.w	25aa <ll_adv_enable+0x262>
    275e:	f44f 73da 	mov.w	r3, #436	; 0x1b4
    2762:	f44f 701b 	mov.w	r0, #620	; 0x26c
    2766:	e72a      	b.n	25be <ll_adv_enable+0x276>
			return BT_HCI_ERR_INVALID_PARAM;
    2768:	2612      	movs	r6, #18
    276a:	e631      	b.n	23d0 <ll_adv_enable+0x88>
			conn_release(adv);
    276c:	f010 f838 	bl	127e0 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
    2770:	2603      	movs	r6, #3
    2772:	e62d      	b.n	23d0 <ll_adv_enable+0x88>
    2774:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
    2778:	f44f 707f 	mov.w	r0, #1020	; 0x3fc
    277c:	e71f      	b.n	25be <ll_adv_enable+0x276>
			conn_lll->link_tx_free = &conn_lll->link_tx;
    277e:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    2782:	6768      	str	r0, [r5, #116]	; 0x74
    2784:	e643      	b.n	240e <ll_adv_enable+0xc6>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    2786:	2607      	movs	r6, #7
    2788:	e622      	b.n	23d0 <ll_adv_enable+0x88>
			ll_rx_release(node_rx);
    278a:	4658      	mov	r0, fp
    278c:	f00f fbb2 	bl	11ef4 <ll_rx_release>
			ll_rx_link_release(link);
    2790:	4650      	mov	r0, sl
    2792:	f00f fba3 	bl	11edc <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    2796:	2607      	movs	r6, #7
    2798:	e61a      	b.n	23d0 <ll_adv_enable+0x88>
    279a:	bf00      	nop
    279c:	f3af 8000 	nop.w
    27a0:	1afd498d 	.word	0x1afd498d
    27a4:	00000007 	.word	0x00000007
    27a8:	3b9aca00 	.word	0x3b9aca00
    27ac:	00012569 	.word	0x00012569
    27b0:	20002388 	.word	0x20002388
    27b4:	84e72a00 	.word	0x84e72a00
    27b8:	000111c1 	.word	0x000111c1
    27bc:	0001244d 	.word	0x0001244d

000027c0 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
    27c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	struct ll_conn *conn_upd;
	uint16_t instant_latency;
	uint16_t event_counter;

	conn_upd = conn_upd_curr;
    27c4:	4dc4      	ldr	r5, [pc, #784]	; (2ad8 <event_conn_upd_prep+0x318>)

	/* set mutex */
	if (!conn_upd) {
    27c6:	682b      	ldr	r3, [r5, #0]
{
    27c8:	b08b      	sub	sp, #44	; 0x2c
    27ca:	4604      	mov	r4, r0
    27cc:	460f      	mov	r7, r1
    27ce:	4690      	mov	r8, r2
	if (!conn_upd) {
    27d0:	2b00      	cmp	r3, #0
    27d2:	f000 820b 	beq.w	2bec <event_conn_upd_prep+0x42c>
		conn_upd_curr = conn;
	}

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    27d6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    27d8:	8e66      	ldrh	r6, [r4, #50]	; 0x32
    27da:	441e      	add	r6, r3

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    27dc:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    27e0:	443e      	add	r6, r7
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    27e2:	f013 0307 	ands.w	r3, r3, #7
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    27e6:	b2b6      	uxth	r6, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    27e8:	f040 819f 	bne.w	2b2a <event_conn_upd_prep+0x36a>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    27ec:	f8b4 90e8 	ldrh.w	r9, [r4, #232]	; 0xe8
    27f0:	eba6 0209 	sub.w	r2, r6, r9
    27f4:	fa1f fb82 	uxth.w	fp, r2
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
    27f8:	0412      	lsls	r2, r2, #16
    27fa:	f100 8252 	bmi.w	2ca2 <event_conn_upd_prep+0x4e2>
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
    27fe:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
    2802:	2a00      	cmp	r2, #0
    2804:	f2c0 8133 	blt.w	2a6e <event_conn_upd_prep+0x2ae>
			conn->slave.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
    2808:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    280c:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    2810:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
    2814:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
		conn->llcp_cu.ack = conn->llcp_cu.req;
    2818:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
    281c:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    2820:	4293      	cmp	r3, r2
    2822:	d006      	beq.n	2832 <event_conn_upd_prep+0x72>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    2824:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    2828:	f003 0307 	and.w	r3, r3, #7
    282c:	2b05      	cmp	r3, #5
    282e:	f000 8243 	beq.w	2cb8 <event_conn_upd_prep+0x4f8>
			conn->procedure_expire = 0U;
		}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		/* reset mutex */
		if (conn_upd_curr == conn) {
    2832:	682b      	ldr	r3, [r5, #0]
    2834:	42a3      	cmp	r3, r4
	conn_upd_curr = NULL;
    2836:	bf04      	itt	eq
    2838:	2300      	moveq	r3, #0
    283a:	602b      	streq	r3, [r5, #0]
		}

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    283c:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
    2840:	2d00      	cmp	r5, #0
    2842:	f000 8163 	beq.w	2b0c <event_conn_upd_prep+0x34c>
    2846:	6828      	ldr	r0, [r5, #0]
    2848:	2800      	cmp	r0, #0
    284a:	f000 815f 	beq.w	2b0c <event_conn_upd_prep+0x34c>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    284e:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
    2852:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
		conn->llcp_rx = rx->hdr.link->mem;
    2856:	6842      	ldr	r2, [r0, #4]
    2858:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((conn->llcp_cu.interval != lll->interval) ||
    285c:	4563      	cmp	r3, ip
		    (conn->llcp_cu.latency != lll->latency) ||
    285e:	f8b4 2112 	ldrh.w	r2, [r4, #274]	; 0x112
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    2862:	f8b4 1114 	ldrh.w	r1, [r4, #276]	; 0x114
		if ((conn->llcp_cu.interval != lll->interval) ||
    2866:	f000 8116 	beq.w	2a96 <event_conn_upd_prep+0x2d6>
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    286a:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
    286e:	83eb      	strh	r3, [r5, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    2870:	2316      	movs	r3, #22
    2872:	712b      	strb	r3, [r5, #4]
			cu->status = 0x00;
    2874:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
    2876:	f8a5 c006 	strh.w	ip, [r5, #6]
			cu->latency = conn->llcp_cu.latency;
    287a:	842a      	strh	r2, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
    287c:	8469      	strh	r1, [r5, #34]	; 0x22
			cu->status = 0x00;
    287e:	772b      	strb	r3, [r5, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    2880:	4629      	mov	r1, r5
    2882:	f00f fb3d 	bl	11f00 <ll_rx_put>
		ll_rx_sched();
    2886:	f00f fb45 	bl	11f14 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    288a:	6823      	ldr	r3, [r4, #0]
    288c:	2b00      	cmp	r3, #0
    288e:	f2c0 80f6 	blt.w	2a7e <event_conn_upd_prep+0x2be>
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    2892:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
    2894:	f8b4 5110 	ldrh.w	r5, [r4, #272]	; 0x110
		conn_interval_old = instant_latency * lll->interval;
    2898:	fb10 f00b 	smulbb	r0, r0, fp
    289c:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
    289e:	fbb0 f1f5 	udiv	r1, r0, r5
		conn_interval_new = latency * conn->llcp_cu.interval;
    28a2:	fb15 f301 	smulbb	r3, r5, r1
    28a6:	b29b      	uxth	r3, r3
		if (conn_interval_new > conn_interval_old) {
    28a8:	4298      	cmp	r0, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    28aa:	fa1f fa81 	uxth.w	sl, r1
		if (conn_interval_new > conn_interval_old) {
    28ae:	f0c0 80cd 	bcc.w	2a4c <event_conn_upd_prep+0x28c>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
				(conn_interval_new - conn_interval_old) *
				CONN_INT_UNIT_US);
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    28b2:	fb05 0111 	mls	r1, r5, r1, r0
    28b6:	f240 43e2 	movw	r3, #1250	; 0x4e2
    28ba:	4888      	ldr	r0, [pc, #544]	; (2adc <event_conn_upd_prep+0x31c>)
    28bc:	b289      	uxth	r1, r1
    28be:	fb03 f101 	mul.w	r1, r3, r1
    28c2:	fba1 0100 	umull	r0, r1, r1, r0
    28c6:	a382      	add	r3, pc, #520	; (adr r3, 2ad0 <event_conn_upd_prep+0x310>)
    28c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    28cc:	f7fe f8d6 	bl	a7c <__aeabi_uldivmod>
    28d0:	eba8 0800 	sub.w	r8, r8, r0
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
    28d4:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
    28d6:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
    28da:	eba9 0906 	sub.w	r9, r9, r6
    28de:	44d1      	add	r9, sl
		lll->latency_prepare += lazy;
    28e0:	440f      	add	r7, r1
		lll->latency_prepare -= (instant_latency - latency);
    28e2:	444f      	add	r7, r9
    28e4:	85e7      	strh	r7, [r4, #46]	; 0x2e
		} else if (lll->role) {
    28e6:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp_cu.interval *
    28e8:	f240 47e2 	movw	r7, #1250	; 0x4e2
    28ec:	fb07 f605 	mul.w	r6, r7, r5
		} else if (lll->role) {
    28f0:	f2c0 817e 	blt.w	2bf0 <event_conn_upd_prep+0x430>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
    28f4:	4a7a      	ldr	r2, [pc, #488]	; (2ae0 <event_conn_upd_prep+0x320>)
    28f6:	497b      	ldr	r1, [pc, #492]	; (2ae4 <event_conn_upd_prep+0x324>)
    28f8:	487b      	ldr	r0, [pc, #492]	; (2ae8 <event_conn_upd_prep+0x328>)
    28fa:	f44f 6326 	mov.w	r3, #2656	; 0xa60
    28fe:	f01a fb99 	bl	1d034 <printk>
    2902:	4040      	eors	r0, r0
    2904:	f380 8811 	msr	BASEPRI, r0
    2908:	f04f 0003 	mov.w	r0, #3
    290c:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    290e:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
    2910:	4635      	mov	r5, r6

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2912:	4a76      	ldr	r2, [pc, #472]	; (2aec <event_conn_upd_prep+0x32c>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    2914:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2918:	4875      	ldr	r0, [pc, #468]	; (2af0 <event_conn_upd_prep+0x330>)
		lll->latency = conn->llcp_cu.latency;
    291a:	f8b4 1112 	ldrh.w	r1, [r4, #274]	; 0x112
    291e:	85a1      	strh	r1, [r4, #44]	; 0x2c
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2920:	4432      	add	r2, r6
    2922:	fbb2 f2f6 	udiv	r2, r2, r6
    2926:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    292a:	f242 7210 	movw	r2, #10000	; 0x2710
    292e:	fb02 6303 	mla	r3, r2, r3, r6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2932:	4430      	add	r0, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    2934:	3b01      	subs	r3, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2936:	fbb0 f0f6 	udiv	r0, r0, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    293a:	fbb3 f6f6 	udiv	r6, r3, r6
		lll->interval = conn->llcp_cu.interval;
    293e:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
    2942:	8563      	strh	r3, [r4, #42]	; 0x2a
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2944:	b283      	uxth	r3, r0
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2946:	1d88      	adds	r0, r1, #6
    2948:	4283      	cmp	r3, r0
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    294a:	f8a4 60c2 	strh.w	r6, [r4, #194]	; 0xc2
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    294e:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2952:	dd02      	ble.n	295a <event_conn_upd_prep+0x19a>
				     (conn->apto_reload - (lll->latency + 6)) :
    2954:	1a5b      	subs	r3, r3, r1
    2956:	3b06      	subs	r3, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2958:	b29b      	uxth	r3, r3
    295a:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    295e:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
    2962:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
    2964:	bf44      	itt	mi
    2966:	2300      	movmi	r3, #0
    2968:	f8a4 30c4 	strhmi.w	r3, [r4, #196]	; 0xc4
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    296c:	2102      	movs	r1, #2
    296e:	2001      	movs	r0, #1
    2970:	f017 f89c 	bl	19aac <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    2974:	2200      	movs	r2, #0
    2976:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    2978:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    297a:	2001      	movs	r0, #1
    297c:	f00b fdba 	bl	e4f4 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    2980:	495c      	ldr	r1, [pc, #368]	; (2af4 <event_conn_upd_prep+0x334>)
    2982:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    2986:	4620      	mov	r0, r4
    2988:	f00b fd44 	bl	e414 <mem_index_get>
			      0);
#endif

		/* start slave/master with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    298c:	3003      	adds	r0, #3
    298e:	fa5f fa80 	uxtb.w	sl, r0
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    2992:	4b59      	ldr	r3, [pc, #356]	; (2af8 <event_conn_upd_prep+0x338>)
    2994:	9400      	str	r4, [sp, #0]
    2996:	4652      	mov	r2, sl
    2998:	2101      	movs	r1, #1
    299a:	2000      	movs	r0, #0
    299c:	f00c ffaa 	bl	f8f4 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    29a0:	f030 0302 	bics.w	r3, r0, #2
    29a4:	d00c      	beq.n	29c0 <event_conn_upd_prep+0x200>
    29a6:	4a4e      	ldr	r2, [pc, #312]	; (2ae0 <event_conn_upd_prep+0x320>)
    29a8:	4954      	ldr	r1, [pc, #336]	; (2afc <event_conn_upd_prep+0x33c>)
    29aa:	484f      	ldr	r0, [pc, #316]	; (2ae8 <event_conn_upd_prep+0x328>)
    29ac:	f640 238f 	movw	r3, #2703	; 0xa8f
    29b0:	f01a fb40 	bl	1d034 <printk>
    29b4:	4040      	eors	r0, r0
    29b6:	f380 8811 	msr	BASEPRI, r0
    29ba:	f04f 0003 	mov.w	r0, #3
    29be:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    29c0:	4e46      	ldr	r6, [pc, #280]	; (2adc <event_conn_upd_prep+0x31c>)
    29c2:	fba5 6506 	umull	r6, r5, r5, r6
    29c6:	a342      	add	r3, pc, #264	; (adr r3, 2ad0 <event_conn_upd_prep+0x310>)
    29c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    29cc:	4630      	mov	r0, r6
    29ce:	4629      	mov	r1, r5
    29d0:	f7fe f854 	bl	a7c <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    29d4:	9408      	str	r4, [sp, #32]
				     HAL_TICKER_REMAINDER(periodic_us),
    29d6:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    29da:	9406      	str	r4, [sp, #24]
				     HAL_TICKER_REMAINDER(periodic_us),
    29dc:	4848      	ldr	r0, [pc, #288]	; (2b00 <event_conn_upd_prep+0x340>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    29de:	68e3      	ldr	r3, [r4, #12]
    29e0:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
    29e2:	fbab 0100 	umull	r0, r1, fp, r0
    29e6:	2307      	movs	r3, #7
    29e8:	fb03 110b 	mla	r1, r3, fp, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    29ec:	4b45      	ldr	r3, [pc, #276]	; (2b04 <event_conn_upd_prep+0x344>)
    29ee:	9307      	str	r3, [sp, #28]
    29f0:	4b45      	ldr	r3, [pc, #276]	; (2b08 <event_conn_upd_prep+0x348>)
    29f2:	9305      	str	r3, [sp, #20]
				     HAL_TICKER_REMAINDER(periodic_us),
    29f4:	1a30      	subs	r0, r6, r0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    29f6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
				     HAL_TICKER_REMAINDER(periodic_us),
    29fa:	eb65 0101 	sbc.w	r1, r5, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    29fe:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    2a00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2a04:	2300      	movs	r3, #0
    2a06:	f7fe f839 	bl	a7c <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    2a0a:	4643      	mov	r3, r8
    2a0c:	e9cd b001 	strd	fp, r0, [sp, #4]
    2a10:	9700      	str	r7, [sp, #0]
    2a12:	4652      	mov	r2, sl
    2a14:	2101      	movs	r1, #1
    2a16:	2000      	movs	r0, #0
    2a18:	f00c fee2 	bl	f7e0 <ticker_start>
#else
				     ull_master_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2a1c:	f030 0302 	bics.w	r3, r0, #2
    2a20:	d00c      	beq.n	2a3c <event_conn_upd_prep+0x27c>
    2a22:	4a2f      	ldr	r2, [pc, #188]	; (2ae0 <event_conn_upd_prep+0x320>)
    2a24:	4935      	ldr	r1, [pc, #212]	; (2afc <event_conn_upd_prep+0x33c>)
    2a26:	4830      	ldr	r0, [pc, #192]	; (2ae8 <event_conn_upd_prep+0x328>)
    2a28:	f640 23a9 	movw	r3, #2729	; 0xaa9
    2a2c:	f01a fb02 	bl	1d034 <printk>
    2a30:	4040      	eors	r0, r0
    2a32:	f380 8811 	msr	BASEPRI, r0
    2a36:	f04f 0003 	mov.w	r0, #3
    2a3a:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    2a3c:	f1b9 0f00 	cmp.w	r9, #0
    2a40:	f040 8134 	bne.w	2cac <event_conn_upd_prep+0x4ec>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
    2a44:	2000      	movs	r0, #0
	}

	return -EINPROGRESS;
}
    2a46:	b00b      	add	sp, #44	; 0x2c
    2a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    2a4c:	1a1b      	subs	r3, r3, r0
    2a4e:	4923      	ldr	r1, [pc, #140]	; (2adc <event_conn_upd_prep+0x31c>)
    2a50:	f240 40e2 	movw	r0, #1250	; 0x4e2
    2a54:	fb03 f000 	mul.w	r0, r3, r0
    2a58:	fba0 0101 	umull	r0, r1, r0, r1
    2a5c:	a31c      	add	r3, pc, #112	; (adr r3, 2ad0 <event_conn_upd_prep+0x310>)
    2a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2a62:	f7fe f80b 	bl	a7c <__aeabi_uldivmod>
    2a66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2a6a:	4480      	add	r8, r0
    2a6c:	e732      	b.n	28d4 <event_conn_upd_prep+0x114>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
    2a6e:	f894 20d9 	ldrb.w	r2, [r4, #217]	; 0xd9
    2a72:	2a00      	cmp	r2, #0
    2a74:	f43f aec8 	beq.w	2808 <event_conn_upd_prep+0x48>
			conn->slave.llcp_type = LLCP_NONE;
    2a78:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
    2a7c:	e6c8      	b.n	2810 <event_conn_upd_prep+0x50>
			uint32_t ticks_prepare_to_start =
    2a7e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    2a82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    2a86:	4291      	cmp	r1, r2
    2a88:	bf2c      	ite	cs
    2a8a:	4488      	addcs	r8, r1
    2a8c:	4490      	addcc	r8, r2
    2a8e:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    2a90:	eba8 0803 	sub.w	r8, r8, r3
    2a94:	e6fd      	b.n	2892 <event_conn_upd_prep+0xd2>
		if ((conn->llcp_cu.interval != lll->interval) ||
    2a96:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
    2a9a:	4594      	cmp	ip, r2
    2a9c:	f47f aee5 	bne.w	286a <event_conn_upd_prep+0xaa>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    2aa0:	f240 4ce2 	movw	ip, #1250	; 0x4e2
    2aa4:	fb0c fe03 	mul.w	lr, ip, r3
    2aa8:	f242 7c10 	movw	ip, #10000	; 0x2710
    2aac:	fb0c ec01 	mla	ip, ip, r1, lr
    2ab0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    2ab4:	fbbc fcfe 	udiv	ip, ip, lr
		    (conn->llcp_cu.latency != lll->latency) ||
    2ab8:	f8b4 e0c2 	ldrh.w	lr, [r4, #194]	; 0xc2
    2abc:	fa1f fc8c 	uxth.w	ip, ip
    2ac0:	45e6      	cmp	lr, ip
    2ac2:	f47f aed2 	bne.w	286a <event_conn_upd_prep+0xaa>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    2ac6:	2301      	movs	r3, #1
    2ac8:	712b      	strb	r3, [r5, #4]
    2aca:	e6d9      	b.n	2880 <event_conn_upd_prep+0xc0>
    2acc:	f3af 8000 	nop.w
    2ad0:	1afd498d 	.word	0x1afd498d
    2ad4:	00000007 	.word	0x00000007
    2ad8:	200023a8 	.word	0x200023a8
    2adc:	3b9aca00 	.word	0x3b9aca00
    2ae0:	00023588 	.word	0x00023588
    2ae4:	0002314c 	.word	0x0002314c
    2ae8:	000230b4 	.word	0x000230b4
    2aec:	026259ff 	.word	0x026259ff
    2af0:	01c9c37f 	.word	0x01c9c37f
    2af4:	20001218 	.word	0x20001218
    2af8:	000130cd 	.word	0x000130cd
    2afc:	00023668 	.word	0x00023668
    2b00:	1afd498d 	.word	0x1afd498d
    2b04:	00013075 	.word	0x00013075
    2b08:	000160a9 	.word	0x000160a9
		LL_ASSERT(rx && rx->hdr.link);
    2b0c:	4a7e      	ldr	r2, [pc, #504]	; (2d08 <event_conn_upd_prep+0x548>)
    2b0e:	497f      	ldr	r1, [pc, #508]	; (2d0c <event_conn_upd_prep+0x54c>)
    2b10:	487f      	ldr	r0, [pc, #508]	; (2d10 <event_conn_upd_prep+0x550>)
    2b12:	f640 13e4 	movw	r3, #2532	; 0x9e4
    2b16:	f01a fa8d 	bl	1d034 <printk>
    2b1a:	4040      	eors	r0, r0
    2b1c:	f380 8811 	msr	BASEPRI, r0
    2b20:	f04f 0003 	mov.w	r0, #3
    2b24:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    2b26:	6828      	ldr	r0, [r5, #0]
    2b28:	e691      	b.n	284e <event_conn_upd_prep+0x8e>
		rx = ll_pdu_rx_alloc_peek(1);
    2b2a:	2001      	movs	r0, #1
    2b2c:	f00f f9f8 	bl	11f20 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    2b30:	4607      	mov	r7, r0
    2b32:	2800      	cmp	r0, #0
    2b34:	f000 80c6 	beq.w	2cc4 <event_conn_upd_prep+0x504>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2b38:	4876      	ldr	r0, [pc, #472]	; (2d14 <event_conn_upd_prep+0x554>)
    2b3a:	f00b fc35 	bl	e3a8 <mem_acquire>
		if (!tx) {
    2b3e:	4605      	mov	r5, r0
    2b40:	2800      	cmp	r0, #0
    2b42:	f000 80bf 	beq.w	2cc4 <event_conn_upd_prep+0x504>
		(void)ll_pdu_rx_alloc();
    2b46:	f00f fa09 	bl	11f5c <ll_pdu_rx_alloc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2b4a:	792b      	ldrb	r3, [r5, #4]
		rx->hdr.link->mem = conn->llcp_rx;
    2b4c:	683a      	ldr	r2, [r7, #0]
    2b4e:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    2b52:	6051      	str	r1, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2b54:	f043 0303 	orr.w	r3, r3, #3
		conn->llcp_rx = rx;
    2b58:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    2b5c:	2100      	movs	r1, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2b5e:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    2b60:	230c      	movs	r3, #12
    2b62:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    2b64:	71e9      	strb	r1, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    2b66:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
    2b6a:	722b      	strb	r3, [r5, #8]
		conn->llcp.conn_upd.instant = event_counter +
    2b6c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    2b6e:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
		conn->llcp.conn_upd.instant = event_counter +
    2b72:	441e      	add	r6, r3
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    2b74:	4b68      	ldr	r3, [pc, #416]	; (2d18 <event_conn_upd_prep+0x558>)
    2b76:	fba3 3202 	umull	r3, r2, r3, r2
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    2b7a:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
    2b7e:	f8a5 300b 	strh.w	r3, [r5, #11]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    2b82:	0a92      	lsrs	r2, r2, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    2b84:	f8b4 3112 	ldrh.w	r3, [r4, #274]	; 0x112
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    2b88:	f8a5 2009 	strh.w	r2, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    2b8c:	f8a5 300d 	strh.w	r3, [r5, #13]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    2b90:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    2b94:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
    2b98:	f8a5 300f 	strh.w	r3, [r5, #15]
					      conn->lll.latency + 6;
    2b9c:	3606      	adds	r6, #6
	    conn->tx_head &&
    2b9e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
					      conn->lll.latency + 6;
    2ba2:	b2b6      	uxth	r6, r6
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    2ba4:	f361 0202 	bfi	r2, r1, #0, #3
		conn->llcp.conn_upd.instant = event_counter +
    2ba8:	f8a4 60e8 	strh.w	r6, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    2bac:	f884 210e 	strb.w	r2, [r4, #270]	; 0x10e
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    2bb0:	f8a5 6011 	strh.w	r6, [r5, #17]
	if (
    2bb4:	2b00      	cmp	r3, #0
    2bb6:	d066      	beq.n	2c86 <event_conn_upd_prep+0x4c6>
	    !conn->llcp_enc.pause_tx &&
    2bb8:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    2bbc:	0790      	lsls	r0, r2, #30
    2bbe:	d462      	bmi.n	2c86 <event_conn_upd_prep+0x4c6>
	    !conn->llcp_phy.pause_tx &&
    2bc0:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    2bc4:	07d1      	lsls	r1, r2, #31
    2bc6:	d45e      	bmi.n	2c86 <event_conn_upd_prep+0x4c6>
		if (conn->tx_head == conn->tx_data) {
    2bc8:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    2bcc:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    2bce:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    2bd2:	f000 8082 	beq.w	2cda <event_conn_upd_prep+0x51a>
		} else if (!conn->tx_ctrl) {
    2bd6:	2a00      	cmp	r2, #0
    2bd8:	d158      	bne.n	2c8c <event_conn_upd_prep+0x4cc>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2bda:	791a      	ldrb	r2, [r3, #4]
    2bdc:	f002 0203 	and.w	r2, r2, #3
    2be0:	2a03      	cmp	r2, #3
    2be2:	f000 8086 	beq.w	2cf2 <event_conn_upd_prep+0x532>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    2be6:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    2bea:	e051      	b.n	2c90 <event_conn_upd_prep+0x4d0>
		conn_upd_curr = conn;
    2bec:	6028      	str	r0, [r5, #0]
    2bee:	e5f2      	b.n	27d6 <event_conn_upd_prep+0x16>
				lll->slave.window_widening_periodic_us *
    2bf0:	6c22      	ldr	r2, [r4, #64]	; 0x40
			lll->slave.window_widening_prepare_us -=
    2bf2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2bf4:	f8df 9128 	ldr.w	r9, [pc, #296]	; 2d20 <event_conn_upd_prep+0x560>
			lll->slave.window_widening_prepare_us -=
    2bf8:	fb02 331b 	mls	r3, r2, fp, r3
    2bfc:	64a3      	str	r3, [r4, #72]	; 0x48
				(((lll_clock_ppm_local_get() +
    2bfe:	f015 f813 	bl	17c28 <lll_clock_ppm_local_get>
    2c02:	4605      	mov	r5, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    2c04:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
    2c08:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    2c0c:	f015 f80e 	bl	17c2c <lll_clock_ppm_get>
				(((lll_clock_ppm_local_get() +
    2c10:	4405      	add	r5, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    2c12:	fb06 f505 	mul.w	r5, r6, r5
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2c16:	4b41      	ldr	r3, [pc, #260]	; (2d1c <event_conn_upd_prep+0x55c>)
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    2c18:	f894 211c 	ldrb.w	r2, [r4, #284]	; 0x11c
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2c1c:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    2c20:	f205 253f 	addw	r5, r5, #575	; 0x23f
    2c24:	fba3 3505 	umull	r3, r5, r3, r5
    2c28:	0cad      	lsrs	r5, r5, #18
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    2c2a:	fb07 f202 	mul.w	r2, r7, r2
			lll->slave.window_widening_prepare_us +=
    2c2e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			lll->slave.window_size_prepare_us =
    2c30:	6522      	str	r2, [r4, #80]	; 0x50
				lll->slave.window_widening_periodic_us *
    2c32:	fb05 f10a 	mul.w	r1, r5, sl
				(conn_interval_us >> 1) - EVENT_IFS_US;
    2c36:	0872      	lsrs	r2, r6, #1
			lll->slave.window_widening_prepare_us +=
    2c38:	440b      	add	r3, r1
				(conn_interval_us >> 1) - EVENT_IFS_US;
    2c3a:	3a96      	subs	r2, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    2c3c:	4293      	cmp	r3, r2
    2c3e:	bf28      	it	cs
    2c40:	4613      	movcs	r3, r2
    2c42:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
			conn->slave.ticks_to_offset = 0U;
    2c46:	2300      	movs	r3, #0
			lll->slave.window_widening_periodic_us =
    2c48:	6425      	str	r5, [r4, #64]	; 0x40
			conn->slave.ticks_to_offset = 0U;
    2c4a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2c4e:	fba1 0109 	umull	r0, r1, r1, r9
    2c52:	a32b      	add	r3, pc, #172	; (adr r3, 2d00 <event_conn_upd_prep+0x540>)
    2c54:	e9d3 2300 	ldrd	r2, r3, [r3]
    2c58:	f7fd ff10 	bl	a7c <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    2c5c:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2c60:	eba8 0800 	sub.w	r8, r8, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    2c64:	482c      	ldr	r0, [pc, #176]	; (2d18 <event_conn_upd_prep+0x558>)
    2c66:	fba0 3003 	umull	r3, r0, r0, r3
    2c6a:	0a80      	lsrs	r0, r0, #10
    2c6c:	fb07 f000 	mul.w	r0, r7, r0
    2c70:	a323      	add	r3, pc, #140	; (adr r3, 2d00 <event_conn_upd_prep+0x540>)
    2c72:	e9d3 2300 	ldrd	r2, r3, [r3]
    2c76:	fba0 0109 	umull	r0, r1, r0, r9
    2c7a:	f7fd feff 	bl	a7c <__aeabi_uldivmod>
			periodic_us -= lll->slave.window_widening_periodic_us;
    2c7e:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    2c80:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			periodic_us -= lll->slave.window_widening_periodic_us;
    2c84:	e645      	b.n	2912 <event_conn_upd_prep+0x152>
		if (!conn->tx_ctrl) {
    2c86:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    2c8a:	b302      	cbz	r2, 2cce <event_conn_upd_prep+0x50e>
	tx->next = conn->tx_ctrl_last->next;
    2c8c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    2c90:	681a      	ldr	r2, [r3, #0]
    2c92:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    2c94:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    2c96:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
    2c98:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
    2c9c:	b90b      	cbnz	r3, 2ca2 <event_conn_upd_prep+0x4e2>
		conn->tx_data_last = tx;
    2c9e:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
	return -EINPROGRESS;
    2ca2:	f06f 0043 	mvn.w	r0, #67	; 0x43
}
    2ca6:	b00b      	add	sp, #44	; 0x2c
    2ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    2cac:	2201      	movs	r2, #1
    2cae:	2102      	movs	r1, #2
    2cb0:	4610      	mov	r0, r2
    2cb2:	f00b fc1f 	bl	e4f4 <mayfly_enable>
    2cb6:	e6c5      	b.n	2a44 <event_conn_upd_prep+0x284>
			conn->procedure_expire = 0U;
    2cb8:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2cba:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->procedure_expire = 0U;
    2cbe:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
    2cc2:	e5b6      	b.n	2832 <event_conn_upd_prep+0x72>
			return -ENOBUFS;
    2cc4:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    2cc8:	b00b      	add	sp, #44	; 0x2c
    2cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx->next = conn->tx_head;
    2cce:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    2cd0:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    2cd4:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
    2cd8:	e7e0      	b.n	2c9c <event_conn_upd_prep+0x4dc>
			conn->tx_data = conn->tx_data->next;
    2cda:	6819      	ldr	r1, [r3, #0]
    2cdc:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    2ce0:	2a00      	cmp	r2, #0
    2ce2:	d1d3      	bne.n	2c8c <event_conn_upd_prep+0x4cc>
			tx->next = conn->tx_head->next;
    2ce4:	681a      	ldr	r2, [r3, #0]
    2ce6:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    2ce8:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    2cea:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    2cec:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
    2cf0:	e7d4      	b.n	2c9c <event_conn_upd_prep+0x4dc>
	    ((pdu_data_tx->llctrl.opcode !=
    2cf2:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2cf4:	2a03      	cmp	r2, #3
    2cf6:	d0f5      	beq.n	2ce4 <event_conn_upd_prep+0x524>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    2cf8:	2a0a      	cmp	r2, #10
    2cfa:	f47f af74 	bne.w	2be6 <event_conn_upd_prep+0x426>
    2cfe:	e7f1      	b.n	2ce4 <event_conn_upd_prep+0x524>
    2d00:	1afd498d 	.word	0x1afd498d
    2d04:	00000007 	.word	0x00000007
    2d08:	00023588 	.word	0x00023588
    2d0c:	00023654 	.word	0x00023654
    2d10:	000230b4 	.word	0x000230b4
    2d14:	2000242c 	.word	0x2000242c
    2d18:	d1b71759 	.word	0xd1b71759
    2d1c:	431bde83 	.word	0x431bde83
    2d20:	3b9aca00 	.word	0x3b9aca00
    2d24:	00000000 	.word	0x00000000

00002d28 <ull_conn_llcp>:
{
    2d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d2c:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
    2d2e:	f890 00e5 	ldrb.w	r0, [r0, #229]	; 0xe5
    2d32:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    2d36:	4298      	cmp	r0, r3
{
    2d38:	460e      	mov	r6, r1
    2d3a:	4615      	mov	r5, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
    2d3c:	d074      	beq.n	2e28 <ull_conn_llcp+0x100>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    2d3e:	1a1b      	subs	r3, r3, r0
    2d40:	f003 0303 	and.w	r3, r3, #3
    2d44:	2b02      	cmp	r3, #2
    2d46:	d03b      	beq.n	2dc0 <ull_conn_llcp+0x98>
    2d48:	f994 e039 	ldrsb.w	lr, [r4, #57]	; 0x39
    2d4c:	46f4      	mov	ip, lr
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
    2d4e:	f1bc 0f00 	cmp.w	ip, #0
    2d52:	f2c0 8093 	blt.w	2e7c <ull_conn_llcp+0x154>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    2d56:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    2d5a:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
    2d5e:	429a      	cmp	r2, r3
    2d60:	d05f      	beq.n	2e22 <ull_conn_llcp+0xfa>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2d62:	4885      	ldr	r0, [pc, #532]	; (2f78 <ull_conn_llcp+0x250>)
    2d64:	f00b fb20 	bl	e3a8 <mem_acquire>
		if (tx) {
    2d68:	2800      	cmp	r0, #0
    2d6a:	d051      	beq.n	2e10 <ull_conn_llcp+0xe8>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    2d6c:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
    2d70:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    2d74:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    2d76:	2202      	movs	r2, #2
    2d78:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    2d7a:	f043 0303 	orr.w	r3, r3, #3
    2d7e:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
    2d80:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
    2d82:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_tx->llctrl.terminate_ind.error_code =
    2d86:	f894 2142 	ldrb.w	r2, [r4, #322]	; 0x142
		if (!conn->tx_ctrl) {
    2d8a:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
			pdu_tx->llctrl.terminate_ind.error_code =
    2d8e:	7202      	strb	r2, [r0, #8]
	if (
    2d90:	b38b      	cbz	r3, 2df6 <ull_conn_llcp+0xce>
	    !conn->llcp_enc.pause_tx &&
    2d92:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    2d96:	0795      	lsls	r5, r2, #30
    2d98:	d42d      	bmi.n	2df6 <ull_conn_llcp+0xce>
	    !conn->llcp_phy.pause_tx &&
    2d9a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    2d9e:	07d2      	lsls	r2, r2, #31
    2da0:	d429      	bmi.n	2df6 <ull_conn_llcp+0xce>
		if (conn->tx_head == conn->tx_data) {
    2da2:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    2da6:	4293      	cmp	r3, r2
    2da8:	f000 837b 	beq.w	34a2 <ull_conn_llcp+0x77a>
		} else if (!conn->tx_ctrl) {
    2dac:	bb29      	cbnz	r1, 2dfa <ull_conn_llcp+0xd2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2dae:	791a      	ldrb	r2, [r3, #4]
    2db0:	f002 0203 	and.w	r2, r2, #3
    2db4:	2a03      	cmp	r2, #3
    2db6:	f000 873b 	beq.w	3c30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x198>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    2dba:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    2dbe:	e01e      	b.n	2dfe <ull_conn_llcp+0xd6>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    2dc0:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
    2dc4:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
    2dc8:	429a      	cmp	r2, r3
    2dca:	d006      	beq.n	2dda <ull_conn_llcp+0xb2>
			     LLCP_LENGTH_STATE_RESIZE) ||
    2dcc:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			if ((conn->llcp_length.state ==
    2dd0:	f003 0306 	and.w	r3, r3, #6
    2dd4:	2b04      	cmp	r3, #4
    2dd6:	f000 81d2 	beq.w	317e <ull_conn_llcp+0x456>
		switch (conn->llcp_type) {
    2dda:	f894 70e6 	ldrb.w	r7, [r4, #230]	; 0xe6
    2dde:	1e7b      	subs	r3, r7, #1
    2de0:	2b05      	cmp	r3, #5
    2de2:	f200 81b6 	bhi.w	3152 <ull_conn_llcp+0x42a>
    2de6:	e8df f013 	tbh	[pc, r3, lsl #1]
    2dea:	003e      	.short	0x003e
    2dec:	00cf0159 	.word	0x00cf0159
    2df0:	008b01b4 	.word	0x008b01b4
    2df4:	0080      	.short	0x0080
		if (!conn->tx_ctrl) {
    2df6:	2900      	cmp	r1, #0
    2df8:	d071      	beq.n	2ede <ull_conn_llcp+0x1b6>
	tx->next = conn->tx_ctrl_last->next;
    2dfa:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    2dfe:	681a      	ldr	r2, [r3, #0]
    2e00:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    2e02:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    2e04:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    2e06:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    2e0a:	b90b      	cbnz	r3, 2e10 <ull_conn_llcp+0xe8>
		conn->tx_data_last = tx;
    2e0c:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
		if (!conn->procedure_expire) {
    2e10:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    2e14:	b928      	cbnz	r0, 2e22 <ull_conn_llcp+0xfa>
			conn->procedure_expire = conn->supervision_reload;
    2e16:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			if (conn->procedure_expire <= 1U) {
    2e1a:	2b01      	cmp	r3, #1
    2e1c:	d948      	bls.n	2eb0 <ull_conn_llcp+0x188>
			conn->procedure_expire = conn->supervision_reload;
    2e1e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	return 0;
    2e22:	2000      	movs	r0, #0
}
    2e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e28:	f994 e039 	ldrsb.w	lr, [r4, #57]	; 0x39
	if ((conn->llcp_ack == conn->llcp_req) &&
    2e2c:	f1be 0f00 	cmp.w	lr, #0
    2e30:	46f4      	mov	ip, lr
    2e32:	f2c0 819e 	blt.w	3172 <ull_conn_llcp+0x44a>
	    !conn->llcp_enc.pause_rx) {
    2e36:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    (!conn->lll.role || (conn->slave.llcp_type == LLCP_NONE)) &&
    2e3a:	f012 0801 	ands.w	r8, r2, #1
    2e3e:	d186      	bne.n	2d4e <ull_conn_llcp+0x26>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
    2e40:	f894 910d 	ldrb.w	r9, [r4, #269]	; 0x10d
    2e44:	f894 710c 	ldrb.w	r7, [r4, #268]	; 0x10c
    2e48:	454f      	cmp	r7, r9
    2e4a:	f000 82a0 	beq.w	338e <ull_conn_llcp+0x666>
			conn->llcp_type = LLCP_CONN_UPD;
    2e4e:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
    2e50:	1e83      	subs	r3, r0, #2
			conn->llcp_type = LLCP_CONN_UPD;
    2e52:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
    2e56:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    2e5a:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
    2e5e:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
    2e62:	429a      	cmp	r2, r3
    2e64:	d1b2      	bne.n	2dcc <ull_conn_llcp+0xa4>
			if (event_conn_upd_prep(conn, lazy,
    2e66:	4632      	mov	r2, r6
    2e68:	4629      	mov	r1, r5
    2e6a:	4620      	mov	r0, r4
    2e6c:	f7ff fca8 	bl	27c0 <event_conn_upd_prep>
    2e70:	2800      	cmp	r0, #0
    2e72:	f040 817b 	bne.w	316c <ull_conn_llcp+0x444>
				return -ECANCELED;
    2e76:	f06f 0047 	mvn.w	r0, #71	; 0x47
    2e7a:	e7d3      	b.n	2e24 <ull_conn_llcp+0xfc>
    2e7c:	f894 20d9 	ldrb.w	r2, [r4, #217]	; 0xd9
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
    2e80:	2a00      	cmp	r2, #0
    2e82:	f43f af68 	beq.w	2d56 <ull_conn_llcp+0x2e>
		switch (conn->slave.llcp_type) {
    2e86:	2a02      	cmp	r2, #2
    2e88:	f000 813a 	beq.w	3100 <ull_conn_llcp+0x3d8>
    2e8c:	2a06      	cmp	r2, #6
    2e8e:	d01d      	beq.n	2ecc <ull_conn_llcp+0x1a4>
    2e90:	2a01      	cmp	r2, #1
    2e92:	d012      	beq.n	2eba <ull_conn_llcp+0x192>
			LL_ASSERT(0);
    2e94:	4a39      	ldr	r2, [pc, #228]	; (2f7c <ull_conn_llcp+0x254>)
    2e96:	493a      	ldr	r1, [pc, #232]	; (2f80 <ull_conn_llcp+0x258>)
    2e98:	483a      	ldr	r0, [pc, #232]	; (2f84 <ull_conn_llcp+0x25c>)
    2e9a:	f240 434f 	movw	r3, #1103	; 0x44f
    2e9e:	f01a f8c9 	bl	1d034 <printk>
    2ea2:	4040      	eors	r0, r0
    2ea4:	f380 8811 	msr	BASEPRI, r0
    2ea8:	f04f 0003 	mov.w	r0, #3
    2eac:	df02      	svc	2
			break;
    2eae:	e752      	b.n	2d56 <ull_conn_llcp+0x2e>
				conn->procedure_expire++;
    2eb0:	3301      	adds	r3, #1
    2eb2:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
}
    2eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (event_conn_upd_prep(conn, lazy,
    2eba:	4632      	mov	r2, r6
    2ebc:	4629      	mov	r1, r5
    2ebe:	4620      	mov	r0, r4
    2ec0:	f7ff fc7e 	bl	27c0 <event_conn_upd_prep>
    2ec4:	2800      	cmp	r0, #0
    2ec6:	f47f af46 	bne.w	2d56 <ull_conn_llcp+0x2e>
    2eca:	e7d4      	b.n	2e76 <ull_conn_llcp+0x14e>
			event_counter = lll->event_counter +
    2ecc:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
    2ece:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    2ed0:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
    2ed2:	442a      	add	r2, r5
			event_phy_upd_ind_prep(conn, event_counter);
    2ed4:	4620      	mov	r0, r4
    2ed6:	b291      	uxth	r1, r2
    2ed8:	f010 fae6 	bl	134a8 <event_phy_upd_ind_prep>
		break;
    2edc:	e73b      	b.n	2d56 <ull_conn_llcp+0x2e>
			tx->next = conn->tx_head;
    2ede:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    2ee0:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    2ee4:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    2ee8:	e78f      	b.n	2e0a <ull_conn_llcp+0xe2>
			event_counter = lll->event_counter +
    2eea:	8e61      	ldrh	r1, [r4, #50]	; 0x32
    2eec:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    2eee:	4419      	add	r1, r3
					lll->latency_prepare + lazy;
    2ef0:	4429      	add	r1, r5
			event_phy_upd_ind_prep(conn, event_counter);
    2ef2:	b289      	uxth	r1, r1
    2ef4:	4620      	mov	r0, r4
    2ef6:	f010 fad7 	bl	134a8 <event_phy_upd_ind_prep>
		break;
    2efa:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    2efe:	e726      	b.n	2d4e <ull_conn_llcp+0x26>
#if defined(CONFIG_BT_CTLR_LE_PING)
static inline void event_ping_prep(struct ll_conn *conn)
{
	struct node_tx *tx;

	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2f00:	481d      	ldr	r0, [pc, #116]	; (2f78 <ull_conn_llcp+0x250>)
    2f02:	f00b fa51 	bl	e3a8 <mem_acquire>
	if (tx) {
    2f06:	2800      	cmp	r0, #0
    2f08:	f000 8130 	beq.w	316c <ull_conn_llcp+0x444>
		struct pdu_data *pdu_ctrl_tx = (void *)tx->pdu;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    2f0c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    2f10:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* place the ping req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2f14:	7903      	ldrb	r3, [r0, #4]
    2f16:	f043 0303 	orr.w	r3, r3, #3
    2f1a:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    2f1c:	2301      	movs	r3, #1
    2f1e:	7143      	strb	r3, [r0, #5]
				   sizeof(struct pdu_data_llctrl_ping_req);
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    2f20:	2312      	movs	r3, #18
    2f22:	71c3      	strb	r3, [r0, #7]
		if (!conn->tx_ctrl) {
    2f24:	e9d4 3271 	ldrd	r3, r2, [r4, #452]	; 0x1c4
	if (
    2f28:	2b00      	cmp	r3, #0
    2f2a:	f000 827d 	beq.w	3428 <ull_conn_llcp+0x700>
	    !conn->llcp_enc.pause_tx &&
    2f2e:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
    2f32:	0789      	lsls	r1, r1, #30
    2f34:	f100 8278 	bmi.w	3428 <ull_conn_llcp+0x700>
	    !conn->llcp_phy.pause_tx &&
    2f38:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
    2f3c:	07cf      	lsls	r7, r1, #31
    2f3e:	f100 8273 	bmi.w	3428 <ull_conn_llcp+0x700>
		if (conn->tx_head == conn->tx_data) {
    2f42:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    2f46:	428b      	cmp	r3, r1
    2f48:	f000 8690 	beq.w	3c6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1d4>
		} else if (!conn->tx_ctrl) {
    2f4c:	2a00      	cmp	r2, #0
    2f4e:	f000 8713 	beq.w	3d78 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e0>
	tx->next = conn->tx_ctrl_last->next;
    2f52:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    2f56:	681a      	ldr	r2, [r3, #0]
    2f58:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    2f5a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    2f5c:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    2f5e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    2f62:	2b00      	cmp	r3, #0
    2f64:	f000 83af 	beq.w	36c6 <ull_conn_llcp+0x99e>
		ctrl_tx_enqueue(conn, tx);

		/* Start Procedure Timeout (TODO: this shall not replace
		 * terminate procedure)
		 */
		conn->procedure_expire = conn->procedure_reload;
    2f68:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    2f6c:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    2f70:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
    2f74:	e6eb      	b.n	2d4e <ull_conn_llcp+0x26>
    2f76:	bf00      	nop
    2f78:	2000242c 	.word	0x2000242c
    2f7c:	00023588 	.word	0x00023588
    2f80:	0002314c 	.word	0x0002314c
    2f84:	000230b4 	.word	0x000230b4
	if (conn->llcp.encryption.state) {
    2f88:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    2f8c:	f013 0803 	ands.w	r8, r3, #3
    2f90:	f000 8148 	beq.w	3224 <ull_conn_llcp+0x4fc>
		if (lll->role &&
    2f94:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    2f98:	2b00      	cmp	r3, #0
    2f9a:	f6bf aedc 	bge.w	2d56 <ull_conn_llcp+0x2e>
    2f9e:	f1b8 0f01 	cmp.w	r8, #1
    2fa2:	f47f af6b 	bne.w	2e7c <ull_conn_llcp+0x154>
{
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2fa6:	48d0      	ldr	r0, [pc, #832]	; (32e8 <ull_conn_llcp+0x5c0>)
    2fa8:	f00b f9fe 	bl	e3a8 <mem_acquire>
	if (!tx) {
    2fac:	4680      	mov	r8, r0
    2fae:	2800      	cmp	r0, #0
    2fb0:	f000 80dc 	beq.w	316c <ull_conn_llcp+0x444>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2fb4:	7903      	ldrb	r3, [r0, #4]
    2fb6:	f043 0303 	orr.w	r3, r3, #3
    2fba:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
			   sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    2fbc:	f04f 0904 	mov.w	r9, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    2fc0:	230d      	movs	r3, #13
	BUILD_ASSERT(offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), ivs) ==
		     (offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), skds) +
		     sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds)));

	/* NOTE: if not sufficient random numbers, ignore waiting */
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    2fc2:	f100 0708 	add.w	r7, r0, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    2fc6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    2fc8:	f880 9007 	strb.w	r9, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    2fcc:	210c      	movs	r1, #12
    2fce:	4638      	mov	r0, r7
    2fd0:	f014 fb90 	bl	176f4 <lll_csrand_isr_get>
			   sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds) +
			   sizeof(pdu_ctrl_tx->llctrl.enc_rsp.ivs));

	/* things from slave stored for session key calculation */
	memcpy(&conn->llcp.encryption.skd[8],
    2fd4:	4639      	mov	r1, r7
    2fd6:	2208      	movs	r2, #8
    2fd8:	f104 00fe 	add.w	r0, r4, #254	; 0xfe
    2fdc:	f01c fa7c 	bl	1f4d8 <memcpy>
	       &pdu_ctrl_tx->llctrl.enc_rsp.skds[0], 8);
	memcpy(&conn->lll.ccm_rx.iv[4],
    2fe0:	464a      	mov	r2, r9
    2fe2:	f108 0110 	add.w	r1, r8, #16
    2fe6:	f104 0098 	add.w	r0, r4, #152	; 0x98
    2fea:	f01c fa75 	bl	1f4d8 <memcpy>
	    conn->tx_head &&
    2fee:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
    2ff2:	2b00      	cmp	r3, #0
    2ff4:	f000 8472 	beq.w	38dc <ull_conn_llcp+0xbb4>
	    !conn->llcp_enc.pause_tx &&
    2ff8:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
		if (!conn->tx_ctrl) {
    2ffc:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
	    conn->tx_head &&
    3000:	078f      	lsls	r7, r1, #30
    3002:	f100 846d 	bmi.w	38e0 <ull_conn_llcp+0xbb8>
	    !conn->llcp_phy.pause_tx &&
    3006:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
    300a:	07c8      	lsls	r0, r1, #31
    300c:	f100 8468 	bmi.w	38e0 <ull_conn_llcp+0xbb8>
		if (conn->tx_head == conn->tx_data) {
    3010:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    3014:	428b      	cmp	r3, r1
    3016:	f000 872a 	beq.w	3e6e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d6>
		} else if (!conn->tx_ctrl) {
    301a:	2a00      	cmp	r2, #0
    301c:	f000 879f 	beq.w	3f5e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c6>
	tx->next = conn->tx_ctrl_last->next;
    3020:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    3024:	681a      	ldr	r2, [r3, #0]
    3026:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
    302a:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
    302e:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
    3032:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
    3036:	2b00      	cmp	r3, #0
    3038:	f000 85f6 	beq.w	3c28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x190>
			rx = ll_pdu_rx_alloc();
    303c:	f00e ff8e 	bl	11f5c <ll_pdu_rx_alloc>
			if (!rx) {
    3040:	4607      	mov	r7, r0
    3042:	2800      	cmp	r0, #0
    3044:	f000 8092 	beq.w	316c <ull_conn_llcp+0x444>
			rx->hdr.handle = conn->lll.handle;
    3048:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    304a:	80fb      	strh	r3, [r7, #6]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    304c:	2303      	movs	r3, #3
    304e:	713b      	strb	r3, [r7, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    3050:	77fb      	strb	r3, [r7, #31]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    3052:	7f3b      	ldrb	r3, [r7, #28]
    3054:	f043 0303 	orr.w	r3, r3, #3
    3058:	773b      	strb	r3, [r7, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    305a:	2317      	movs	r3, #23
			memcpy(&pdu->llctrl.enc_req.rand[0],
    305c:	2208      	movs	r2, #8
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    305e:	777b      	strb	r3, [r7, #29]
			memcpy(&pdu->llctrl.enc_req.rand[0],
    3060:	f204 1169 	addw	r1, r4, #361	; 0x169
    3064:	f107 0020 	add.w	r0, r7, #32
    3068:	f01c fa36 	bl	1f4d8 <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
    306c:	f894 3167 	ldrb.w	r3, [r4, #359]	; 0x167
    3070:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
    3074:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
    3078:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
    307c:	6838      	ldr	r0, [r7, #0]
    307e:	4639      	mov	r1, r7
    3080:	f00e ff3e 	bl	11f00 <ll_rx_put>
			ll_rx_sched();
    3084:	f00e ff46 	bl	11f14 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
    3088:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    308c:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    3090:	2202      	movs	r2, #2
    3092:	f362 0301 	bfi	r3, r2, #0, #2
    3096:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    309a:	e658      	b.n	2d4e <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
    309c:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    309e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    30a0:	4413      	add	r3, r2
	if (conn->llcp.chan_map.initiate) {
    30a2:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
					lll->latency_prepare + lazy;
    30a6:	442b      	add	r3, r5
	if (conn->llcp.chan_map.initiate) {
    30a8:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
    30ac:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
    30ae:	d16a      	bne.n	3186 <ull_conn_llcp+0x45e>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    30b0:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    30b4:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    30b8:	1afb      	subs	r3, r7, r3
    30ba:	041b      	lsls	r3, r3, #16
    30bc:	f53f ae47 	bmi.w	2d4e <ull_conn_llcp+0x26>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
    30c0:	f1bc 0f00 	cmp.w	ip, #0
    30c4:	f2c0 82f7 	blt.w	36b6 <ull_conn_llcp+0x98e>
			conn->llcp_ack = conn->llcp_req;
    30c8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    30cc:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		memcpy(&lll->data_chan_map[0],
    30d0:	f104 0734 	add.w	r7, r4, #52	; 0x34
    30d4:	2205      	movs	r2, #5
    30d6:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
    30da:	4638      	mov	r0, r7
    30dc:	f01c f9fc 	bl	1f4d8 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    30e0:	2105      	movs	r1, #5
    30e2:	4638      	mov	r0, r7
    30e4:	f00b fb3e 	bl	e764 <util_ones_count_get>
		lll->data_chan_count =
    30e8:	f894 c039 	ldrb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    30ec:	2301      	movs	r3, #1
		lll->data_chan_count =
    30ee:	f360 0c05 	bfi	ip, r0, #0, #6
    30f2:	f884 c039 	strb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    30f6:	f884 31d8 	strb.w	r3, [r4, #472]	; 0x1d8
    30fa:	fa4f fc8c 	sxtb.w	ip, ip
    30fe:	e626      	b.n	2d4e <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
    3100:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    3102:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
    3104:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
    3108:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
    310a:	442a      	add	r2, r5
	if (conn->llcp.chan_map.initiate) {
    310c:	f013 0301 	ands.w	r3, r3, #1
			event_counter = lll->event_counter +
    3110:	b295      	uxth	r5, r2
	if (conn->llcp.chan_map.initiate) {
    3112:	f040 80f1 	bne.w	32f8 <ull_conn_llcp+0x5d0>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    3116:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
    311a:	1aad      	subs	r5, r5, r2
    311c:	042e      	lsls	r6, r5, #16
    311e:	f53f ae1a 	bmi.w	2d56 <ull_conn_llcp+0x2e>
		memcpy(&lll->data_chan_map[0],
    3122:	f104 0534 	add.w	r5, r4, #52	; 0x34
    3126:	2205      	movs	r2, #5
			conn->slave.llcp_type = LLCP_NONE;
    3128:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
		memcpy(&lll->data_chan_map[0],
    312c:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
    3130:	4628      	mov	r0, r5
    3132:	f01c f9d1 	bl	1f4d8 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    3136:	2105      	movs	r1, #5
    3138:	4628      	mov	r0, r5
    313a:	f00b fb13 	bl	e764 <util_ones_count_get>
		lll->data_chan_count =
    313e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    3142:	2201      	movs	r2, #1
		lll->data_chan_count =
    3144:	f360 0305 	bfi	r3, r0, #0, #6
    3148:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    314c:	f884 21d8 	strb.w	r2, [r4, #472]	; 0x1d8
    3150:	e601      	b.n	2d56 <ull_conn_llcp+0x2e>
			LL_ASSERT(0);
    3152:	4a66      	ldr	r2, [pc, #408]	; (32ec <ull_conn_llcp+0x5c4>)
    3154:	4966      	ldr	r1, [pc, #408]	; (32f0 <ull_conn_llcp+0x5c8>)
    3156:	4867      	ldr	r0, [pc, #412]	; (32f4 <ull_conn_llcp+0x5cc>)
    3158:	f240 431e 	movw	r3, #1054	; 0x41e
    315c:	f019 ff6a 	bl	1d034 <printk>
    3160:	4040      	eors	r0, r0
    3162:	f380 8811 	msr	BASEPRI, r0
    3166:	f04f 0003 	mov.w	r0, #3
    316a:	df02      	svc	2
			break;
    316c:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    3170:	e5ed      	b.n	2d4e <ull_conn_llcp+0x26>
	    (!conn->lll.role || (conn->slave.llcp_type == LLCP_NONE)) &&
    3172:	f894 20d9 	ldrb.w	r2, [r4, #217]	; 0xd9
    3176:	2a00      	cmp	r2, #0
    3178:	f47f ae85 	bne.w	2e86 <ull_conn_llcp+0x15e>
    317c:	e65b      	b.n	2e36 <ull_conn_llcp+0x10e>
				event_len_prep(conn);
    317e:	4620      	mov	r0, r4
    3180:	f010 f89c 	bl	132bc <event_len_prep>
    3184:	e629      	b.n	2dda <ull_conn_llcp+0xb2>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    3186:	4858      	ldr	r0, [pc, #352]	; (32e8 <ull_conn_llcp+0x5c0>)
    3188:	f00b f90e 	bl	e3a8 <mem_acquire>
		if (tx) {
    318c:	4680      	mov	r8, r0
    318e:	2800      	cmp	r0, #0
    3190:	d0ec      	beq.n	316c <ull_conn_llcp+0x444>
			conn->llcp.chan_map.instant = event_counter +
    3192:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
    3194:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			conn->llcp.chan_map.instant = event_counter +
    3198:	443b      	add	r3, r7
						      conn->lll.latency + 6;
    319a:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant = event_counter +
    319c:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    31a0:	7903      	ldrb	r3, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
    31a2:	f36f 0200 	bfc	r2, #0, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    31a6:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.initiate = 0U;
    31aa:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    31ae:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    31b0:	2308      	movs	r3, #8
    31b2:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    31b4:	2301      	movs	r3, #1
    31b6:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    31b8:	2205      	movs	r2, #5
    31ba:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
    31be:	3008      	adds	r0, #8
    31c0:	f01c f98a 	bl	1f4d8 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    31c4:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    31c8:	f8a8 300d 	strh.w	r3, [r8, #13]
	    conn->tx_head &&
    31cc:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
    31d0:	2b00      	cmp	r3, #0
    31d2:	f000 827b 	beq.w	36cc <ull_conn_llcp+0x9a4>
	    !conn->llcp_enc.pause_tx &&
    31d6:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
		if (!conn->tx_ctrl) {
    31da:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
	    conn->tx_head &&
    31de:	0788      	lsls	r0, r1, #30
    31e0:	f100 8276 	bmi.w	36d0 <ull_conn_llcp+0x9a8>
	    !conn->llcp_phy.pause_tx &&
    31e4:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
    31e8:	07c9      	lsls	r1, r1, #31
    31ea:	f100 8271 	bmi.w	36d0 <ull_conn_llcp+0x9a8>
		if (conn->tx_head == conn->tx_data) {
    31ee:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    31f2:	428b      	cmp	r3, r1
    31f4:	f000 861f 	beq.w	3e36 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x39e>
		} else if (!conn->tx_ctrl) {
    31f8:	2a00      	cmp	r2, #0
    31fa:	f000 8767 	beq.w	40cc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x634>
	tx->next = conn->tx_ctrl_last->next;
    31fe:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    3202:	681a      	ldr	r2, [r3, #0]
    3204:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
    3208:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
    320c:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
    3210:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
    3214:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    3218:	2b00      	cmp	r3, #0
    321a:	f47f ad98 	bne.w	2d4e <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
    321e:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
    3222:	e594      	b.n	2d4e <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    3224:	4830      	ldr	r0, [pc, #192]	; (32e8 <ull_conn_llcp+0x5c0>)
    3226:	f00b f8bf 	bl	e3a8 <mem_acquire>
	if (!tx) {
    322a:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    322e:	4681      	mov	r9, r0
    3230:	2800      	cmp	r0, #0
    3232:	f43f ad8c 	beq.w	2d4e <ull_conn_llcp+0x26>
	if (!lll->role) {
    3236:	f1bc 0f00 	cmp.w	ip, #0
	pdu_ctrl_tx = (void *)tx->pdu;
    323a:	f100 0a04 	add.w	sl, r0, #4
	if (!lll->role) {
    323e:	f280 82cc 	bge.w	37da <ull_conn_llcp+0xab2>
	else if (!lll->enc_rx) {
    3242:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
    3246:	071a      	lsls	r2, r3, #28
    3248:	f100 842a 	bmi.w	3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
		if (conn->llcp.encryption.error_code) {
    324c:	f894 80f5 	ldrb.w	r8, [r4, #245]	; 0xf5
    3250:	f1b8 0f00 	cmp.w	r8, #0
    3254:	f000 83b8 	beq.w	39c8 <ull_conn_llcp+0xca0>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    3258:	7903      	ldrb	r3, [r0, #4]
    325a:	f043 0303 	orr.w	r3, r3, #3
    325e:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    3260:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    3264:	07db      	lsls	r3, r3, #31
    3266:	f140 84d7 	bpl.w	3c18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x180>
	    (conn->llcp_feature.features_conn &
    326a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	if (conn->common.fex_valid &&
    326e:	0758      	lsls	r0, r3, #29
    3270:	f140 84d2 	bpl.w	3c18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x180>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    3274:	2311      	movs	r3, #17
    3276:	f889 3007 	strb.w	r3, [r9, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    327a:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
    327c:	f889 8009 	strb.w	r8, [r9, #9]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    3280:	f889 3008 	strb.w	r3, [r9, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    3284:	f889 7005 	strb.w	r7, [r9, #5]
	    conn->tx_head &&
    3288:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	conn->llcp.encryption.error_code = 0U;
    328c:	2200      	movs	r2, #0
    328e:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
	if (
    3292:	2b00      	cmp	r3, #0
    3294:	f000 849c 	beq.w	3bd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x138>
	    !conn->llcp_enc.pause_tx &&
    3298:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    329c:	0791      	lsls	r1, r2, #30
    329e:	f100 8497 	bmi.w	3bd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x138>
	    !conn->llcp_phy.pause_tx &&
    32a2:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    32a6:	07d2      	lsls	r2, r2, #31
    32a8:	f100 8492 	bmi.w	3bd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x138>
		if (conn->tx_head == conn->tx_data) {
    32ac:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    32b0:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    32b2:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    32b6:	f000 8721 	beq.w	40fc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x664>
		} else if (!conn->tx_ctrl) {
    32ba:	2a00      	cmp	r2, #0
    32bc:	f000 879c 	beq.w	41f8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x760>
	tx->next = conn->tx_ctrl_last->next;
    32c0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    32c4:	681a      	ldr	r2, [r3, #0]
    32c6:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
    32ca:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
    32ce:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
    32d2:	f8d9 3000 	ldr.w	r3, [r9]
    32d6:	2b00      	cmp	r3, #0
    32d8:	f000 82f3 	beq.w	38c2 <ull_conn_llcp+0xb9a>
	conn->llcp_ack = conn->llcp_req;
    32dc:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    32e0:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
    32e4:	e533      	b.n	2d4e <ull_conn_llcp+0x26>
    32e6:	bf00      	nop
    32e8:	2000242c 	.word	0x2000242c
    32ec:	00023588 	.word	0x00023588
    32f0:	0002314c 	.word	0x0002314c
    32f4:	000230b4 	.word	0x000230b4
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    32f8:	48b7      	ldr	r0, [pc, #732]	; (35d8 <ull_conn_llcp+0x8b0>)
    32fa:	f00b f855 	bl	e3a8 <mem_acquire>
		if (tx) {
    32fe:	4606      	mov	r6, r0
    3300:	2800      	cmp	r0, #0
    3302:	f43f ad28 	beq.w	2d56 <ull_conn_llcp+0x2e>
			conn->llcp.chan_map.instant = event_counter +
    3306:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
    3308:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    330c:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.instant = event_counter +
    330e:	442b      	add	r3, r5
			conn->llcp.chan_map.initiate = 0U;
    3310:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
    3314:	3306      	adds	r3, #6
			conn->llcp.chan_map.initiate = 0U;
    3316:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
			conn->llcp.chan_map.instant = event_counter +
    331a:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    331e:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
    3322:	2301      	movs	r3, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    3324:	2108      	movs	r1, #8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    3326:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    3328:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    332a:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    332c:	2205      	movs	r2, #5
    332e:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
    3332:	3008      	adds	r0, #8
    3334:	f01c f8d0 	bl	1f4d8 <memcpy>
	    conn->tx_head &&
    3338:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    333c:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
    3340:	f8a6 200d 	strh.w	r2, [r6, #13]
	if (
    3344:	2b00      	cmp	r3, #0
    3346:	f000 81cd 	beq.w	36e4 <ull_conn_llcp+0x9bc>
	    !conn->llcp_enc.pause_tx &&
    334a:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
		if (!conn->tx_ctrl) {
    334e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
	    conn->tx_head &&
    3352:	0789      	lsls	r1, r1, #30
    3354:	f100 81c8 	bmi.w	36e8 <ull_conn_llcp+0x9c0>
	    !conn->llcp_phy.pause_tx &&
    3358:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
    335c:	07cf      	lsls	r7, r1, #31
    335e:	f100 81c3 	bmi.w	36e8 <ull_conn_llcp+0x9c0>
		if (conn->tx_head == conn->tx_data) {
    3362:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    3366:	428b      	cmp	r3, r1
    3368:	f000 8557 	beq.w	3e1a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x382>
		} else if (!conn->tx_ctrl) {
    336c:	2a00      	cmp	r2, #0
    336e:	f000 86a4 	beq.w	40ba <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x622>
	tx->next = conn->tx_ctrl_last->next;
    3372:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    3376:	681a      	ldr	r2, [r3, #0]
    3378:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    337a:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    337c:	6833      	ldr	r3, [r6, #0]
	conn->tx_ctrl_last = tx;
    337e:	f8c4 61cc 	str.w	r6, [r4, #460]	; 0x1cc
	if (!tx->next) {
    3382:	2b00      	cmp	r3, #0
    3384:	f47f ace7 	bne.w	2d56 <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
    3388:	f8c4 61d4 	str.w	r6, [r4, #468]	; 0x1d4
    338c:	e4e3      	b.n	2d56 <ull_conn_llcp+0x2e>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
    338e:	f894 1121 	ldrb.w	r1, [r4, #289]	; 0x121
    3392:	f894 7120 	ldrb.w	r7, [r4, #288]	; 0x120
    3396:	42b9      	cmp	r1, r7
    3398:	d04f      	beq.n	343a <ull_conn_llcp+0x712>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
    339a:	1bc9      	subs	r1, r1, r7
    339c:	07c8      	lsls	r0, r1, #31
    339e:	f57f acd6 	bpl.w	2d4e <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
    33a2:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    33a6:	f013 0701 	ands.w	r7, r3, #1
    33aa:	f000 81a6 	beq.w	36fa <ull_conn_llcp+0x9d2>
		rx = ll_pdu_rx_alloc();
    33ae:	f00e fdd5 	bl	11f5c <ll_pdu_rx_alloc>
		if (!rx) {
    33b2:	4607      	mov	r7, r0
    33b4:	b398      	cbz	r0, 341e <ull_conn_llcp+0x6f6>
		conn->llcp_feature.ack = conn->llcp_feature.req;
    33b6:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
    33ba:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    33be:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
    33c0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    33c2:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    33c4:	f043 0303 	orr.w	r3, r3, #3
    33c8:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    33ca:	2309      	movs	r3, #9
    33cc:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    33ce:	77c3      	strb	r3, [r0, #31]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    33d0:	2303      	movs	r3, #3
    33d2:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    33d4:	4641      	mov	r1, r8
    33d6:	2208      	movs	r2, #8
    33d8:	3020      	adds	r0, #32
    33da:	f01c f8a8 	bl	1f52e <memset>
		sys_put_le64(conn->llcp_feature.features_peer,
    33de:	e9d4 234c 	ldrd	r2, r3, [r4, #304]	; 0x130
	sys_put_le16(val >> 16, &dst[2]);
    33e2:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
    33e4:	f887 2020 	strb.w	r2, [r7, #32]
	dst[1] = val >> 8;
    33e8:	f3c2 2207 	ubfx	r2, r2, #8, #8
    33ec:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	sys_put_le16(val >> 16, &dst[2]);
    33f0:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
    33f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    33f6:	f887 1022 	strb.w	r1, [r7, #34]	; 0x22
	dst[1] = val >> 8;
    33fa:	f3c3 2307 	ubfx	r3, r3, #8, #8
    33fe:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
    3400:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
	dst[1] = val >> 8;
    3404:	0a12      	lsrs	r2, r2, #8
    3406:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
    340a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    340e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
		ll_rx_put(rx->hdr.link, rx);
    3412:	4639      	mov	r1, r7
		ll_rx_put(rx->hdr.link, rx);
    3414:	6808      	ldr	r0, [r1, #0]
    3416:	f00e fd73 	bl	11f00 <ll_rx_put>
		ll_rx_sched();
    341a:	f00e fd7b 	bl	11f14 <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    341e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    3422:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
}
    3426:	e48a      	b.n	2d3e <ull_conn_llcp+0x16>
		if (!conn->tx_ctrl) {
    3428:	2a00      	cmp	r2, #0
    342a:	f47f ad92 	bne.w	2f52 <ull_conn_llcp+0x22a>
			tx->next = conn->tx_head;
    342e:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    3430:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    3434:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    3438:	e593      	b.n	2f62 <ull_conn_llcp+0x23a>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
    343a:	f894 1139 	ldrb.w	r1, [r4, #313]	; 0x139
    343e:	f894 7138 	ldrb.w	r7, [r4, #312]	; 0x138
    3442:	42b9      	cmp	r1, r7
    3444:	d03a      	beq.n	34bc <ull_conn_llcp+0x794>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
    3446:	1bc9      	subs	r1, r1, r7
    3448:	07c8      	lsls	r0, r1, #31
    344a:	f57f ac80 	bpl.w	2d4e <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
    344e:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
    3452:	07d9      	lsls	r1, r3, #31
    3454:	f140 8372 	bpl.w	3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>
	} else if (conn->llcp_version.rx) {
    3458:	0799      	lsls	r1, r3, #30
    345a:	f140 8361 	bpl.w	3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>
		rx = ll_pdu_rx_alloc();
    345e:	f00e fd7d 	bl	11f5c <ll_pdu_rx_alloc>
		if (!rx) {
    3462:	2800      	cmp	r0, #0
    3464:	d0db      	beq.n	341e <ull_conn_llcp+0x6f6>
		conn->llcp_version.ack = conn->llcp_version.req;
    3466:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
    346a:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
		rx->hdr.handle = conn->lll.handle;
    346e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    3470:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    3472:	2303      	movs	r3, #3
    3474:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    3476:	7f03      	ldrb	r3, [r0, #28]
    3478:	f043 0303 	orr.w	r3, r3, #3
    347c:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    347e:	2306      	movs	r3, #6
    3480:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    3482:	230c      	movs	r3, #12
    3484:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
    3486:	f894 313b 	ldrb.w	r3, [r4, #315]	; 0x13b
    348a:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
    348e:	f8b4 313c 	ldrh.w	r3, [r4, #316]	; 0x13c
    3492:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
    3496:	f8b4 313e 	ldrh.w	r3, [r4, #318]	; 0x13e
    349a:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
		ll_rx_put(rx->hdr.link, rx);
    349e:	4601      	mov	r1, r0
    34a0:	e7b8      	b.n	3414 <ull_conn_llcp+0x6ec>
			conn->tx_data = conn->tx_data->next;
    34a2:	681a      	ldr	r2, [r3, #0]
    34a4:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    34a8:	2900      	cmp	r1, #0
    34aa:	f47f aca6 	bne.w	2dfa <ull_conn_llcp+0xd2>
			tx->next = conn->tx_head->next;
    34ae:	681a      	ldr	r2, [r3, #0]
    34b0:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    34b2:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    34b4:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    34b6:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
    34ba:	e4a6      	b.n	2e0a <ull_conn_llcp+0xe2>
		} else if (conn->llcp_conn_param.ack !=
    34bc:	f894 7185 	ldrb.w	r7, [r4, #389]	; 0x185
    34c0:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
    34c4:	428f      	cmp	r7, r1
    34c6:	f000 81ff 	beq.w	38c8 <ull_conn_llcp+0xba0>
	conn_upd = conn_upd_curr;
    34ca:	4f44      	ldr	r7, [pc, #272]	; (35dc <ull_conn_llcp+0x8b4>)
    34cc:	6839      	ldr	r1, [r7, #0]
	if (conn_upd && (conn_upd != conn)) {
    34ce:	2900      	cmp	r1, #0
    34d0:	f000 83b6 	beq.w	3c40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a8>
    34d4:	428c      	cmp	r4, r1
    34d6:	f47f ac3a 	bne.w	2d4e <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
    34da:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
    34de:	f001 0107 	and.w	r1, r1, #7
    34e2:	2905      	cmp	r1, #5
    34e4:	f200 874d 	bhi.w	4382 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8ea>
    34e8:	f20f 0804 	addw	r8, pc, #4
    34ec:	f858 f021 	ldr.w	pc, [r8, r1, lsl #2]
    34f0:	000035e1 	.word	0x000035e1
    34f4:	00003557 	.word	0x00003557
    34f8:	00003509 	.word	0x00003509
    34fc:	00002d3f 	.word	0x00002d3f
    3500:	00002d3f 	.word	0x00002d3f
    3504:	00002d3f 	.word	0x00002d3f
	if (conn->llcp_enc.pause_tx) {
    3508:	0790      	lsls	r0, r2, #30
    350a:	f53f ac20 	bmi.w	2d4e <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
    350e:	f00e fd25 	bl	11f5c <ll_pdu_rx_alloc>
	if (!rx) {
    3512:	4601      	mov	r1, r0
    3514:	2800      	cmp	r0, #0
    3516:	d082      	beq.n	341e <ull_conn_llcp+0x6f6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    3518:	f894 0186 	ldrb.w	r0, [r4, #390]	; 0x186
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    351c:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    351e:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    3520:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    3524:	f362 0002 	bfi	r0, r2, #0, #3
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    3528:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    352a:	f884 0186 	strb.w	r0, [r4, #390]	; 0x186
	rx->hdr.handle = conn->lll.handle;
    352e:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    3530:	710a      	strb	r2, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    3532:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    3534:	774f      	strb	r7, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    3536:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
    353a:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    353c:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
    3540:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    3542:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
    3546:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    3548:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
    354c:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    354e:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
    3550:	80c8      	strh	r0, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    3552:	77cb      	strb	r3, [r1, #31]
	ll_rx_put(rx->hdr.link, rx);
    3554:	e75e      	b.n	3414 <ull_conn_llcp+0x6ec>
	if (conn->llcp_conn_param.status) {
    3556:	f894 3187 	ldrb.w	r3, [r4, #391]	; 0x187
    355a:	2b00      	cmp	r3, #0
    355c:	f040 84c0 	bne.w	3ee0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x448>
	if (!conn->lll.role) {
    3560:	f1be 0f00 	cmp.w	lr, #0
    3564:	f2c0 854a 	blt.w	3ffc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x564>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    3568:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
		conn->llcp_cu.win_offset_us = 0U;
    356c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    3570:	2205      	movs	r2, #5
    3572:	f362 0102 	bfi	r1, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    3576:	f894 2190 	ldrb.w	r2, [r4, #400]	; 0x190
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    357a:	f884 1186 	strb.w	r1, [r4, #390]	; 0x186
		conn->llcp_cu.win_size = 1U;
    357e:	2001      	movs	r0, #1
    3580:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
		if (conn->llcp_conn_param.preferred_periodicity) {
    3584:	2a00      	cmp	r2, #0
    3586:	f000 862b 	beq.w	41e0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x748>
				((conn->llcp_conn_param.interval_min /
    358a:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
    358e:	fbb3 f3f2 	udiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    3592:	4403      	add	r3, r0
			conn->llcp_cu.interval =
    3594:	fb13 f302 	smulbb	r3, r3, r2
    3598:	b29b      	uxth	r3, r3
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    359a:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    359e:	f894 110e 	ldrb.w	r1, [r4, #270]	; 0x10e
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    35a2:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
    35a6:	f8a4 0112 	strh.w	r0, [r4, #274]	; 0x112
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    35aa:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    35ae:	00d2      	lsls	r2, r2, #3
    35b0:	f021 010f 	bic.w	r1, r1, #15
    35b4:	f042 0202 	orr.w	r2, r2, #2
    35b8:	430a      	orrs	r2, r1
		conn->llcp_cu.ack--;
    35ba:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    35be:	f8b4 118e 	ldrh.w	r1, [r4, #398]	; 0x18e
    35c2:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
    35c6:	f8a4 1114 	strh.w	r1, [r4, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    35ca:	f884 210e 	strb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.ack--;
    35ce:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
    35d2:	f7ff bbc0 	b.w	2d56 <ull_conn_llcp+0x2e>
    35d6:	bf00      	nop
    35d8:	2000242c 	.word	0x2000242c
    35dc:	200023a8 	.word	0x200023a8
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    35e0:	48d5      	ldr	r0, [pc, #852]	; (3938 <ull_conn_llcp+0xc10>)
			event_counter = lll->event_counter +
    35e2:	f8b4 8032 	ldrh.w	r8, [r4, #50]	; 0x32
					lll->latency_prepare + lazy;
    35e6:	f8b4 902e 	ldrh.w	r9, [r4, #46]	; 0x2e
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    35ea:	f00a fedd 	bl	e3a8 <mem_acquire>
	if (!tx) {
    35ee:	2800      	cmp	r0, #0
    35f0:	f43f af15 	beq.w	341e <ull_conn_llcp+0x6f6>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    35f4:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
    35f6:	603c      	str	r4, [r7, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    35f8:	f043 0303 	orr.w	r3, r3, #3
    35fc:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    35fe:	2318      	movs	r3, #24
    3600:	7143      	strb	r3, [r0, #5]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    3602:	f8b4 1188 	ldrh.w	r1, [r4, #392]	; 0x188
    3606:	8101      	strh	r1, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    3608:	f8b4 118a 	ldrh.w	r1, [r4, #394]	; 0x18a
    360c:	8141      	strh	r1, [r0, #10]
	p->preferred_periodicity = 0U;
    360e:	2300      	movs	r3, #0
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    3610:	f8b4 118c 	ldrh.w	r1, [r4, #396]	; 0x18c
    3614:	8181      	strh	r1, [r0, #12]
			event_counter = lll->event_counter +
    3616:	eb08 0209 	add.w	r2, r8, r9
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    361a:	f8b4 118e 	ldrh.w	r1, [r4, #398]	; 0x18e
	p->preferred_periodicity = 0U;
    361e:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
    3620:	74c3      	strb	r3, [r0, #19]
    3622:	7503      	strb	r3, [r0, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
    3624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    3628:	81c1      	strh	r1, [r0, #14]
	p->offset1 = sys_cpu_to_le16(0xffff);
    362a:	7543      	strb	r3, [r0, #21]
    362c:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    362e:	75c3      	strb	r3, [r0, #23]
    3630:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    3632:	7643      	strb	r3, [r0, #25]
    3634:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    3636:	76c3      	strb	r3, [r0, #27]
    3638:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    363a:	7743      	strb	r3, [r0, #29]
    363c:	7783      	strb	r3, [r0, #30]
					lll->latency_prepare + lazy;
    363e:	442a      	add	r2, r5
	conn->procedure_expire = conn->procedure_reload;
    3640:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    3644:	210f      	movs	r1, #15
    3646:	71c1      	strb	r1, [r0, #7]
	conn->procedure_expire = conn->procedure_reload;
    3648:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    364c:	f8a0 2011 	strh.w	r2, [r0, #17]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    3650:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
    3654:	2204      	movs	r2, #4
    3656:	f362 0302 	bfi	r3, r2, #0, #3
    365a:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	    conn->tx_head &&
    365e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
    3662:	2b00      	cmp	r3, #0
    3664:	f000 83f8 	beq.w	3e58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c0>
	    !conn->llcp_enc.pause_tx &&
    3668:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    366c:	0792      	lsls	r2, r2, #30
    366e:	f100 83f3 	bmi.w	3e58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c0>
	    !conn->llcp_phy.pause_tx &&
    3672:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    3676:	07d7      	lsls	r7, r2, #31
    3678:	f100 83ee 	bmi.w	3e58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c0>
		if (conn->tx_head == conn->tx_data) {
    367c:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    3680:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    3682:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    3686:	f000 85e6 	beq.w	4256 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7be>
		} else if (!conn->tx_ctrl) {
    368a:	2a00      	cmp	r2, #0
    368c:	f000 8659 	beq.w	4342 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8aa>
	tx->next = conn->tx_ctrl_last->next;
    3690:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    3694:	681a      	ldr	r2, [r3, #0]
    3696:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    3698:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    369a:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    369e:	6803      	ldr	r3, [r0, #0]
    36a0:	2b00      	cmp	r3, #0
    36a2:	f47f aebc 	bne.w	341e <ull_conn_llcp+0x6f6>
		conn->tx_data_last = tx;
    36a6:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    36aa:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    36ae:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
    36b2:	f7ff bb44 	b.w	2d3e <ull_conn_llcp+0x16>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
    36b6:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
    36ba:	2b00      	cmp	r3, #0
    36bc:	f43f ad04 	beq.w	30c8 <ull_conn_llcp+0x3a0>
			conn->slave.llcp_type = LLCP_NONE;
    36c0:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
    36c4:	e504      	b.n	30d0 <ull_conn_llcp+0x3a8>
		conn->tx_data_last = tx;
    36c6:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
    36ca:	e44d      	b.n	2f68 <ull_conn_llcp+0x240>
		if (!conn->tx_ctrl) {
    36cc:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
    36d0:	2a00      	cmp	r2, #0
    36d2:	f47f ad94 	bne.w	31fe <ull_conn_llcp+0x4d6>
			tx->next = conn->tx_head;
    36d6:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
    36da:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    36de:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
    36e2:	e597      	b.n	3214 <ull_conn_llcp+0x4ec>
		if (!conn->tx_ctrl) {
    36e4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
    36e8:	2a00      	cmp	r2, #0
    36ea:	f47f ae42 	bne.w	3372 <ull_conn_llcp+0x64a>
			tx->next = conn->tx_head;
    36ee:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    36f0:	e9c4 6671 	strd	r6, r6, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    36f4:	f8c4 61cc 	str.w	r6, [r4, #460]	; 0x1cc
    36f8:	e643      	b.n	3382 <ull_conn_llcp+0x65a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    36fa:	488f      	ldr	r0, [pc, #572]	; (3938 <ull_conn_llcp+0xc10>)
    36fc:	f00a fe54 	bl	e3a8 <mem_acquire>
	if (tx) {
    3700:	4680      	mov	r8, r0
    3702:	2800      	cmp	r0, #0
    3704:	f43f ae8b 	beq.w	341e <ull_conn_llcp+0x6f6>
		conn->llcp_feature.ack--;
    3708:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
    370c:	3b01      	subs	r3, #1
    370e:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		conn->llcp_feature.features_conn = LL_FEAT;
    3712:	ed9f 7b87 	vldr	d7, [pc, #540]	; 3930 <ull_conn_llcp+0xc08>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    3716:	7903      	ldrb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    3718:	4639      	mov	r1, r7
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    371a:	2709      	movs	r7, #9
		conn->llcp_feature.features_conn = LL_FEAT;
    371c:	ed84 7b4a 	vstr	d7, [r4, #296]	; 0x128
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    3720:	f043 0303 	orr.w	r3, r3, #3
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    3724:	f888 7005 	strb.w	r7, [r8, #5]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    3728:	f888 3004 	strb.w	r3, [r8, #4]
		pdu->llctrl.opcode = !conn->lll.role ?
    372c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		(void)memset(&pdu->llctrl.feature_req.features[0],
    3730:	2208      	movs	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
    3732:	2b00      	cmp	r3, #0
    3734:	bfac      	ite	ge
    3736:	4613      	movge	r3, r2
    3738:	230e      	movlt	r3, #14
		(void)memset(&pdu->llctrl.feature_req.features[0],
    373a:	4410      	add	r0, r2
		pdu->llctrl.opcode = !conn->lll.role ?
    373c:	f888 3007 	strb.w	r3, [r8, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    3740:	f01b fef5 	bl	1f52e <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
    3744:	e9d4 234a 	ldrd	r2, r3, [r4, #296]	; 0x128
	sys_put_le16(val >> 16, &dst[2]);
    3748:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
    374a:	f888 2008 	strb.w	r2, [r8, #8]
	dst[1] = val >> 8;
    374e:	f3c2 2207 	ubfx	r2, r2, #8, #8
    3752:	f888 2009 	strb.w	r2, [r8, #9]
	sys_put_le16(val >> 16, &dst[2]);
    3756:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
    3758:	f888 300c 	strb.w	r3, [r8, #12]
    375c:	f888 100a 	strb.w	r1, [r8, #10]
	dst[1] = val >> 8;
    3760:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
    3764:	f888 200e 	strb.w	r2, [r8, #14]
	dst[1] = val >> 8;
    3768:	0a09      	lsrs	r1, r1, #8
    376a:	0a12      	lsrs	r2, r2, #8
    376c:	f888 100b 	strb.w	r1, [r8, #11]
    3770:	f888 300d 	strb.w	r3, [r8, #13]
    3774:	f888 200f 	strb.w	r2, [r8, #15]
	    conn->tx_head &&
    3778:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
    377c:	2b00      	cmp	r3, #0
    377e:	f000 80ca 	beq.w	3916 <ull_conn_llcp+0xbee>
	    !conn->llcp_enc.pause_tx &&
    3782:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
		if (!conn->tx_ctrl) {
    3786:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
	    conn->tx_head &&
    378a:	0789      	lsls	r1, r1, #30
    378c:	f100 80c5 	bmi.w	391a <ull_conn_llcp+0xbf2>
	    !conn->llcp_phy.pause_tx &&
    3790:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
    3794:	07cf      	lsls	r7, r1, #31
    3796:	f100 80c0 	bmi.w	391a <ull_conn_llcp+0xbf2>
		if (conn->tx_head == conn->tx_data) {
    379a:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    379e:	428b      	cmp	r3, r1
    37a0:	f000 838e 	beq.w	3ec0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x428>
		} else if (!conn->tx_ctrl) {
    37a4:	2a00      	cmp	r2, #0
    37a6:	f000 8501 	beq.w	41ac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x714>
	tx->next = conn->tx_ctrl_last->next;
    37aa:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    37ae:	681a      	ldr	r2, [r3, #0]
    37b0:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
    37b4:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
    37b8:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
    37bc:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
    37c0:	2b00      	cmp	r3, #0
    37c2:	f000 8261 	beq.w	3c88 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1f0>
		conn->procedure_expire = conn->procedure_reload;
    37c6:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    37ca:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    37ce:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		conn->procedure_expire = conn->procedure_reload;
    37d2:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	break;
    37d6:	f7ff bab2 	b.w	2d3e <ull_conn_llcp+0x16>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
    37da:	f104 077b 	add.w	r7, r4, #123	; 0x7b
    37de:	463b      	mov	r3, r7
    37e0:	4642      	mov	r2, r8
    37e2:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
    37e6:	f204 1071 	addw	r0, r4, #369	; 0x171
    37ea:	f015 fcbd 	bl	19168 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
    37ee:	4639      	mov	r1, r7
    37f0:	2210      	movs	r2, #16
    37f2:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    37f6:	f01b fe6f 	bl	1f4d8 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    37fa:	2208      	movs	r2, #8
    37fc:	f104 0194 	add.w	r1, r4, #148	; 0x94
    3800:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
    3804:	f01b fe68 	bl	1f4d8 <memcpy>
		lll->ccm_rx.direction = 0;
    3808:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
		lll->ccm_rx.counter = 0;
    380c:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
		lll->ccm_rx.direction = 0;
    3810:	f368 0300 	bfi	r3, r8, #0, #1
    3814:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		lll->ccm_tx.direction = 1;
    3818:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
		lll->ccm_rx.counter = 0;
    381c:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
		lll->ccm_tx.direction = 1;
    3820:	f043 0301 	orr.w	r3, r3, #1
    3824:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
		lll->enc_rx = 1;
    3828:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.counter = 0;
    382c:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
		lll->enc_rx = 1;
    3830:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_tx.counter = 0;
    3834:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
		lll->ccm_rx.counter = 0;
    3838:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
    383c:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
    3840:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
    3844:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
    3848:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
		lll->enc_rx = 1;
    384c:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
static int start_enc_rsp_send(struct ll_conn *conn,
			      struct pdu_data *pdu_ctrl_tx)
{
	struct node_tx *tx = NULL;

	if (!pdu_ctrl_tx) {
    3850:	f1ba 0f00 	cmp.w	sl, #0
    3854:	f000 8234 	beq.w	3cc0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x228>

		pdu_ctrl_tx = (void *)tx->pdu;
	}

	/* enable transmit encryption */
	conn->lll.enc_tx = 1;
    3858:	b2db      	uxtb	r3, r3
    385a:	f043 0310 	orr.w	r3, r3, #16
    385e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    3862:	f899 3004 	ldrb.w	r3, [r9, #4]
    3866:	f043 0303 	orr.w	r3, r3, #3
    386a:	f889 3004 	strb.w	r3, [r9, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    386e:	2301      	movs	r3, #1
    3870:	f889 3005 	strb.w	r3, [r9, #5]
		if (!conn->tx_ctrl) {
    3874:	e9d4 2e71 	ldrd	r2, lr, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    3878:	2306      	movs	r3, #6
    387a:	f889 3007 	strb.w	r3, [r9, #7]
	if (
    387e:	b3d2      	cbz	r2, 38f6 <ull_conn_llcp+0xbce>
	    !conn->llcp_enc.pause_tx &&
    3880:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
    3884:	0798      	lsls	r0, r3, #30
    3886:	d436      	bmi.n	38f6 <ull_conn_llcp+0xbce>
	    !conn->llcp_phy.pause_tx &&
    3888:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
    388c:	07d9      	lsls	r1, r3, #31
    388e:	d432      	bmi.n	38f6 <ull_conn_llcp+0xbce>
		if (conn->tx_head == conn->tx_data) {
    3890:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
    3894:	4293      	cmp	r3, r2
    3896:	f000 8303 	beq.w	3ea0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x408>
		} else if (!conn->tx_ctrl) {
    389a:	f1be 0f00 	cmp.w	lr, #0
    389e:	f000 84bd 	beq.w	421c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x784>
	tx->next = conn->tx_ctrl_last->next;
    38a2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    38a6:	681a      	ldr	r2, [r3, #0]
    38a8:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
    38ac:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
    38b0:	f8d9 2000 	ldr.w	r2, [r9]
	conn->tx_ctrl_last = tx;
    38b4:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
    38b8:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    38bc:	2a00      	cmp	r2, #0
    38be:	f47f ad0d 	bne.w	32dc <ull_conn_llcp+0x5b4>
		conn->tx_data_last = tx;
    38c2:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
    38c6:	e509      	b.n	32dc <ull_conn_llcp+0x5b4>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    38c8:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
    38cc:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
    38d0:	429a      	cmp	r2, r3
    38d2:	d033      	beq.n	393c <ull_conn_llcp+0xc14>
			event_len_prep(conn);
    38d4:	4620      	mov	r0, r4
    38d6:	f00f fcf1 	bl	132bc <event_len_prep>
    38da:	e5a0      	b.n	341e <ull_conn_llcp+0x6f6>
		if (!conn->tx_ctrl) {
    38dc:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
    38e0:	2a00      	cmp	r2, #0
    38e2:	f47f ab9d 	bne.w	3020 <ull_conn_llcp+0x2f8>
			tx->next = conn->tx_head;
    38e6:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
    38ea:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    38ee:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
    38f2:	f7ff bba0 	b.w	3036 <ull_conn_llcp+0x30e>
		if (!conn->tx_ctrl) {
    38f6:	f1be 0f00 	cmp.w	lr, #0
    38fa:	f000 81c8 	beq.w	3c8e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1f6>
    38fe:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
	tx->next = conn->tx_ctrl_last->next;
    3902:	680b      	ldr	r3, [r1, #0]
    3904:	f8c9 3000 	str.w	r3, [r9]
	conn->tx_ctrl_last->next = tx;
    3908:	f8c1 9000 	str.w	r9, [r1]
	if (!tx->next) {
    390c:	f8d9 2000 	ldr.w	r2, [r9]
	conn->tx_ctrl_last = tx;
    3910:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
}
    3914:	e7d0      	b.n	38b8 <ull_conn_llcp+0xb90>
		if (!conn->tx_ctrl) {
    3916:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
    391a:	2a00      	cmp	r2, #0
    391c:	f47f af45 	bne.w	37aa <ull_conn_llcp+0xa82>
			tx->next = conn->tx_head;
    3920:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
    3924:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    3928:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
    392c:	e748      	b.n	37c0 <ull_conn_llcp+0xa98>
    392e:	bf00      	nop
    3930:	0001417f 	.word	0x0001417f
    3934:	00000000 	.word	0x00000000
    3938:	2000242c 	.word	0x2000242c
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    393c:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
    3940:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
    3944:	4293      	cmp	r3, r2
    3946:	f43f aa02 	beq.w	2d4e <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
    394a:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
    394e:	f003 0103 	and.w	r1, r3, #3
    3952:	2903      	cmp	r1, #3
    3954:	f000 8310 	beq.w	3f78 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e0>
    3958:	2900      	cmp	r1, #0
    395a:	f47f a9f7 	bne.w	2d4c <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    395e:	48d4      	ldr	r0, [pc, #848]	; (3cb0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x218>)
    3960:	f00a fd22 	bl	e3a8 <mem_acquire>
		if (!tx) {
    3964:	4601      	mov	r1, r0
    3966:	2800      	cmp	r0, #0
    3968:	f43f ad59 	beq.w	341e <ull_conn_llcp+0x6f6>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    396c:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		conn->lll.phy_flags = conn->llcp_phy.flags;
    3970:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    3974:	2201      	movs	r2, #1
    3976:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
    397a:	f894 21c0 	ldrb.w	r2, [r4, #448]	; 0x1c0
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    397e:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->phy_pref_tx = conn->llcp_phy.tx;
    3982:	f3c3 0782 	ubfx	r7, r3, #2, #3
    3986:	f367 0202 	bfi	r2, r7, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
    398a:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
    398e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    3992:	f360 07c3 	bfi	r7, r0, #3, #1
    3996:	f884 7060 	strb.w	r7, [r4, #96]	; 0x60
		conn->phy_pref_rx = conn->llcp_phy.rx;
    399a:	f3c3 1742 	ubfx	r7, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    399e:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
    39a0:	f367 02c5 	bfi	r2, r7, #3, #3
    39a4:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
		conn->phy_pref_tx = conn->llcp_phy.tx;
    39a8:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
    39ac:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    39ae:	f040 0003 	orr.w	r0, r0, #3
		pdu_ctrl_tx->len =
    39b2:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    39b4:	2316      	movs	r3, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    39b6:	7108      	strb	r0, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    39b8:	720a      	strb	r2, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
    39ba:	724f      	strb	r7, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
    39bc:	2200      	movs	r2, #0
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    39be:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_pause_enqueue(conn, tx, false);
    39c0:	4620      	mov	r0, r4
    39c2:	f00f f9fb 	bl	12dbc <ctrl_tx_pause_enqueue>
    39c6:	e6fe      	b.n	37c6 <ull_conn_llcp+0xa9e>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
    39c8:	f104 077b 	add.w	r7, r4, #123	; 0x7b
    39cc:	463b      	mov	r3, r7
    39ce:	4642      	mov	r2, r8
    39d0:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
    39d4:	f204 1071 	addw	r0, r4, #369	; 0x171
    39d8:	f015 fbc6 	bl	19168 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
    39dc:	4639      	mov	r1, r7
    39de:	2210      	movs	r2, #16
    39e0:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    39e4:	f01b fd78 	bl	1f4d8 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    39e8:	2208      	movs	r2, #8
    39ea:	f104 0194 	add.w	r1, r4, #148	; 0x94
    39ee:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
    39f2:	f01b fd71 	bl	1f4d8 <memcpy>
			lll->ccm_rx.direction = 1U;
    39f6:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
			lll->ccm_rx.counter = 0U;
    39fa:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
			lll->ccm_rx.direction = 1U;
    39fe:	f043 0301 	orr.w	r3, r3, #1
    3a02:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
			lll->ccm_tx.direction = 0U;
    3a06:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			lll->ccm_rx.counter = 0U;
    3a0a:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
			lll->ccm_tx.direction = 0U;
    3a0e:	f368 0300 	bfi	r3, r8, #0, #1
    3a12:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			lll->enc_rx = 1U;
    3a16:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
			lll->ccm_rx.counter = 0U;
    3a1a:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
			lll->enc_rx = 1U;
    3a1e:	f043 0308 	orr.w	r3, r3, #8
    3a22:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    3a26:	f899 3004 	ldrb.w	r3, [r9, #4]
			lll->ccm_rx.counter = 0U;
    3a2a:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    3a2e:	f043 0303 	orr.w	r3, r3, #3
			lll->ccm_tx.counter = 0U;
    3a32:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
			lll->ccm_rx.counter = 0U;
    3a36:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
    3a3a:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
    3a3e:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
    3a42:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    3a46:	f889 3004 	strb.w	r3, [r9, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    3a4a:	2301      	movs	r3, #1
    3a4c:	f889 3005 	strb.w	r3, [r9, #5]
			pdu_ctrl_tx->llctrl.opcode =
    3a50:	2305      	movs	r3, #5
    3a52:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
    3a56:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
    3a5a:	2b00      	cmp	r3, #0
    3a5c:	f000 80c5 	beq.w	3bea <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x152>
	    !conn->llcp_enc.pause_tx &&
    3a60:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
		if (!conn->tx_ctrl) {
    3a64:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
	    conn->tx_head &&
    3a68:	078f      	lsls	r7, r1, #30
    3a6a:	f100 80c0 	bmi.w	3bee <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x156>
	    !conn->llcp_phy.pause_tx &&
    3a6e:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
    3a72:	07c8      	lsls	r0, r1, #31
    3a74:	f100 80bb 	bmi.w	3bee <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x156>
		if (conn->tx_head == conn->tx_data) {
    3a78:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    3a7c:	428b      	cmp	r3, r1
    3a7e:	f000 832f 	beq.w	40e0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x648>
		} else if (!conn->tx_ctrl) {
    3a82:	2a00      	cmp	r2, #0
    3a84:	f000 83c2 	beq.w	420c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x774>
	tx->next = conn->tx_ctrl_last->next;
    3a88:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    3a8c:	681a      	ldr	r2, [r3, #0]
    3a8e:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
    3a92:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
    3a96:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
    3a9a:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    3a9e:	e418      	b.n	32d2 <ull_conn_llcp+0x5aa>
	if (!pdu_ctrl_tx) {
    3aa0:	f1ba 0f00 	cmp.w	sl, #0
    3aa4:	f000 8172 	beq.w	3d8c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2f4>
	conn->lll.enc_tx = 1;
    3aa8:	f043 0310 	orr.w	r3, r3, #16
    3aac:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    3ab0:	7903      	ldrb	r3, [r0, #4]
    3ab2:	f043 0303 	orr.w	r3, r3, #3
    3ab6:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    3ab8:	2301      	movs	r3, #1
    3aba:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    3abc:	2306      	movs	r3, #6
    3abe:	71c3      	strb	r3, [r0, #7]

	if (tx) {
    3ac0:	e9d4 3c71 	ldrd	r3, ip, [r4, #452]	; 0x1c4
	if (
    3ac4:	2b00      	cmp	r3, #0
    3ac6:	f000 809c 	beq.w	3c02 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16a>
	    !conn->llcp_enc.pause_tx &&
    3aca:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    3ace:	0797      	lsls	r7, r2, #30
    3ad0:	f100 8097 	bmi.w	3c02 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16a>
	    !conn->llcp_phy.pause_tx &&
    3ad4:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    3ad8:	07d0      	lsls	r0, r2, #31
    3ada:	f100 8092 	bmi.w	3c02 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16a>
		if (conn->tx_head == conn->tx_data) {
    3ade:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    3ae2:	429a      	cmp	r2, r3
    3ae4:	f000 82d3 	beq.w	408e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5f6>
		} else if (!conn->tx_ctrl) {
    3ae8:	f1bc 0f00 	cmp.w	ip, #0
    3aec:	f000 837c 	beq.w	41e8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x750>
	tx->next = conn->tx_ctrl_last->next;
    3af0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    3af4:	681a      	ldr	r2, [r3, #0]
    3af6:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
    3afa:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
    3afe:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
    3b02:	f8d9 3000 	ldr.w	r3, [r9]
    3b06:	2b00      	cmp	r3, #0
    3b08:	f000 812b 	beq.w	3d62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2ca>
		conn->llcp_enc.pause_rx = 0U;
    3b0c:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
    3b10:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    3b14:	f023 0303 	bic.w	r3, r3, #3
    3b18:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
    3b1c:	f7ff bbde 	b.w	32dc <ull_conn_llcp+0x5b4>
		LL_ASSERT(0);
    3b20:	4a64      	ldr	r2, [pc, #400]	; (3cb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x21c>)
    3b22:	4965      	ldr	r1, [pc, #404]	; (3cb8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x220>)
    3b24:	f640 435e 	movw	r3, #3166	; 0xc5e
		LL_ASSERT(0);
    3b28:	4864      	ldr	r0, [pc, #400]	; (3cbc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x224>)
    3b2a:	f019 fa83 	bl	1d034 <printk>
    3b2e:	4040      	eors	r0, r0
    3b30:	f380 8811 	msr	BASEPRI, r0
    3b34:	f04f 0003 	mov.w	r0, #3
    3b38:	df02      	svc	2
		break;
    3b3a:	e470      	b.n	341e <ull_conn_llcp+0x6f6>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    3b3c:	485c      	ldr	r0, [pc, #368]	; (3cb0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x218>)
    3b3e:	f00a fc33 	bl	e3a8 <mem_acquire>
		if (tx) {
    3b42:	2800      	cmp	r0, #0
    3b44:	f43f ac6b 	beq.w	341e <ull_conn_llcp+0x6f6>
			conn->llcp_version.ack--;
    3b48:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
    3b4c:	3b01      	subs	r3, #1
    3b4e:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
			conn->llcp_version.tx = 1U;
    3b52:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
    3b56:	f043 0301 	orr.w	r3, r3, #1
    3b5a:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    3b5e:	7903      	ldrb	r3, [r0, #4]
    3b60:	f043 0303 	orr.w	r3, r3, #3
    3b64:	7103      	strb	r3, [r0, #4]
			pdu->len =
    3b66:	2306      	movs	r3, #6
    3b68:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
    3b6a:	230c      	movs	r3, #12
    3b6c:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
    3b6e:	230b      	movs	r3, #11
    3b70:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
    3b72:	f06f 030e 	mvn.w	r3, #14
    3b76:	7243      	strb	r3, [r0, #9]
    3b78:	2305      	movs	r3, #5
    3b7a:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
    3b7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3b80:	72c3      	strb	r3, [r0, #11]
    3b82:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
    3b84:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
    3b88:	2b00      	cmp	r3, #0
    3b8a:	f000 8087 	beq.w	3c9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x204>
	    !conn->llcp_enc.pause_tx &&
    3b8e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    3b92:	0792      	lsls	r2, r2, #30
    3b94:	f100 8082 	bmi.w	3c9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x204>
	    !conn->llcp_phy.pause_tx &&
    3b98:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    3b9c:	07d7      	lsls	r7, r2, #31
    3b9e:	d47d      	bmi.n	3c9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x204>
		if (conn->tx_head == conn->tx_data) {
    3ba0:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    3ba4:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    3ba6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    3baa:	f000 82ce 	beq.w	414a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6b2>
		} else if (!conn->tx_ctrl) {
    3bae:	2a00      	cmp	r2, #0
    3bb0:	f000 83a8 	beq.w	4304 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x86c>
	tx->next = conn->tx_ctrl_last->next;
    3bb4:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    3bb8:	681a      	ldr	r2, [r3, #0]
    3bba:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    3bbc:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    3bbe:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    3bc2:	6803      	ldr	r3, [r0, #0]
    3bc4:	2b00      	cmp	r3, #0
    3bc6:	f47f adfe 	bne.w	37c6 <ull_conn_llcp+0xa9e>
		conn->tx_data_last = tx;
    3bca:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
			conn->procedure_expire = conn->procedure_reload;
    3bce:	e5fa      	b.n	37c6 <ull_conn_llcp+0xa9e>
		if (!conn->tx_ctrl) {
    3bd0:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    3bd4:	2a00      	cmp	r2, #0
    3bd6:	f47f ab73 	bne.w	32c0 <ull_conn_llcp+0x598>
			tx->next = conn->tx_head;
    3bda:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
    3bde:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    3be2:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
    3be6:	f7ff bb74 	b.w	32d2 <ull_conn_llcp+0x5aa>
		if (!conn->tx_ctrl) {
    3bea:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
    3bee:	2a00      	cmp	r2, #0
    3bf0:	f47f af4a 	bne.w	3a88 <ull_conn_llcp+0xd60>
			tx->next = conn->tx_head;
    3bf4:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
    3bf8:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    3bfc:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
    3c00:	e74b      	b.n	3a9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2>
		if (!conn->tx_ctrl) {
    3c02:	f1bc 0f00 	cmp.w	ip, #0
    3c06:	f47f af73 	bne.w	3af0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x58>
			tx->next = conn->tx_head;
    3c0a:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
    3c0e:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    3c12:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
    3c16:	e774      	b.n	3b02 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6a>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    3c18:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
    3c1a:	f889 8008 	strb.w	r8, [r9, #8]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    3c1e:	f889 3007 	strb.w	r3, [r9, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    3c22:	2702      	movs	r7, #2
    3c24:	f7ff bb2e 	b.w	3284 <ull_conn_llcp+0x55c>
		conn->tx_data_last = tx;
    3c28:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
    3c2c:	f7ff ba06 	b.w	303c <ull_conn_llcp+0x314>
	    ((pdu_data_tx->llctrl.opcode !=
    3c30:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3c32:	2a03      	cmp	r2, #3
    3c34:	f43f ac3b 	beq.w	34ae <ull_conn_llcp+0x786>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    3c38:	2a0a      	cmp	r2, #10
    3c3a:	f47f a8be 	bne.w	2dba <ull_conn_llcp+0x92>
    3c3e:	e436      	b.n	34ae <ull_conn_llcp+0x786>
	switch (conn->llcp_conn_param.state) {
    3c40:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
    3c44:	f003 0307 	and.w	r3, r3, #7
    3c48:	2b05      	cmp	r3, #5
    3c4a:	f200 839a 	bhi.w	4382 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8ea>
    3c4e:	a101      	add	r1, pc, #4	; (adr r1, 3c54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1bc>)
    3c50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    3c54:	000035e1 	.word	0x000035e1
    3c58:	00003557 	.word	0x00003557
    3c5c:	00003509 	.word	0x00003509
    3c60:	00002d4f 	.word	0x00002d4f
    3c64:	00002d4f 	.word	0x00002d4f
    3c68:	00002d4f 	.word	0x00002d4f
			conn->tx_data = conn->tx_data->next;
    3c6c:	6819      	ldr	r1, [r3, #0]
    3c6e:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    3c72:	2a00      	cmp	r2, #0
    3c74:	f47f a96d 	bne.w	2f52 <ull_conn_llcp+0x22a>
			tx->next = conn->tx_head->next;
    3c78:	681a      	ldr	r2, [r3, #0]
    3c7a:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    3c7c:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    3c7e:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    3c80:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
    3c84:	f7ff b96d 	b.w	2f62 <ull_conn_llcp+0x23a>
		conn->tx_data_last = tx;
    3c88:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
		conn->procedure_expire = conn->procedure_reload;
    3c8c:	e59b      	b.n	37c6 <ull_conn_llcp+0xa9e>
			tx->next = conn->tx_head;
    3c8e:	f8c9 2000 	str.w	r2, [r9]
				conn->tx_ctrl = tx;
    3c92:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    3c96:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
    3c9a:	e60d      	b.n	38b8 <ull_conn_llcp+0xb90>
		if (!conn->tx_ctrl) {
    3c9c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    3ca0:	2a00      	cmp	r2, #0
    3ca2:	d187      	bne.n	3bb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x11c>
			tx->next = conn->tx_head;
    3ca4:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    3ca6:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    3caa:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    3cae:	e788      	b.n	3bc2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12a>
    3cb0:	2000242c 	.word	0x2000242c
    3cb4:	00023588 	.word	0x00023588
    3cb8:	0002314c 	.word	0x0002314c
    3cbc:	000230b4 	.word	0x000230b4
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    3cc0:	48ac      	ldr	r0, [pc, #688]	; (3f74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4dc>)
    3cc2:	f00a fb71 	bl	e3a8 <mem_acquire>
		if (!tx) {
    3cc6:	2800      	cmp	r0, #0
    3cc8:	f000 82c1 	beq.w	424e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7b6>
	conn->lll.enc_tx = 1;
    3ccc:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
    3cd0:	f043 0310 	orr.w	r3, r3, #16
    3cd4:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    3cd8:	2301      	movs	r3, #1
    3cda:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    3cdc:	7903      	ldrb	r3, [r0, #4]
    3cde:	f043 0303 	orr.w	r3, r3, #3
    3ce2:	7103      	strb	r3, [r0, #4]
		if (!conn->tx_ctrl) {
    3ce4:	e9d4 3c71 	ldrd	r3, ip, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    3ce8:	2206      	movs	r2, #6
    3cea:	71c2      	strb	r2, [r0, #7]
		if (!conn->tx_ctrl) {
    3cec:	46e6      	mov	lr, ip
	    conn->tx_head &&
    3cee:	461a      	mov	r2, r3
	if (
    3cf0:	b1e3      	cbz	r3, 3d2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x294>
	    !conn->llcp_enc.pause_tx &&
    3cf2:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
    3cf6:	0789      	lsls	r1, r1, #30
    3cf8:	d418      	bmi.n	3d2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x294>
	    !conn->llcp_phy.pause_tx &&
    3cfa:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
    3cfe:	07cf      	lsls	r7, r1, #31
    3d00:	d414      	bmi.n	3d2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x294>
		if (conn->tx_head == conn->tx_data) {
    3d02:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    3d06:	4293      	cmp	r3, r2
    3d08:	f000 8207 	beq.w	411a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x682>
		} else if (!conn->tx_ctrl) {
    3d0c:	f1bc 0f00 	cmp.w	ip, #0
    3d10:	f000 8211 	beq.w	4136 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x69e>
	tx->next = conn->tx_ctrl_last->next;
    3d14:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
    3d18:	680a      	ldr	r2, [r1, #0]
    3d1a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    3d1c:	6008      	str	r0, [r1, #0]
	conn->tx_ctrl_last = tx;
    3d1e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    3d22:	6802      	ldr	r2, [r0, #0]
    3d24:	b1c2      	cbz	r2, 3d58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c0>
	    conn->tx_head &&
    3d26:	461a      	mov	r2, r3
		if (!conn->tx_ctrl) {
    3d28:	46e6      	mov	lr, ip
    3d2a:	e5a9      	b.n	3880 <ull_conn_llcp+0xb58>
    3d2c:	f1bc 0f00 	cmp.w	ip, #0
    3d30:	d01a      	beq.n	3d68 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2d0>
	tx->next = conn->tx_ctrl_last->next;
    3d32:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
    3d36:	680f      	ldr	r7, [r1, #0]
    3d38:	6007      	str	r7, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    3d3a:	6008      	str	r0, [r1, #0]
	if (!tx->next) {
    3d3c:	6807      	ldr	r7, [r0, #0]
	conn->tx_ctrl_last = tx;
    3d3e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    3d42:	4601      	mov	r1, r0
	if (!tx->next) {
    3d44:	b147      	cbz	r7, 3d58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c0>
	if (
    3d46:	2b00      	cmp	r3, #0
    3d48:	f43f addb 	beq.w	3902 <ull_conn_llcp+0xbda>
	    !conn->llcp_enc.pause_tx &&
    3d4c:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
    3d50:	079b      	lsls	r3, r3, #30
    3d52:	f57f ad99 	bpl.w	3888 <ull_conn_llcp+0xb60>
    3d56:	e5d4      	b.n	3902 <ull_conn_llcp+0xbda>
		conn->tx_data_last = tx;
    3d58:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	    conn->tx_head &&
    3d5c:	461a      	mov	r2, r3
		if (!conn->tx_ctrl) {
    3d5e:	46e6      	mov	lr, ip
    3d60:	e58d      	b.n	387e <ull_conn_llcp+0xb56>
		conn->tx_data_last = tx;
    3d62:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
    3d66:	e6d1      	b.n	3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>
			tx->next = conn->tx_head;
    3d68:	6003      	str	r3, [r0, #0]
			conn->tx_head = tx;
    3d6a:	4684      	mov	ip, r0
				conn->tx_ctrl = tx;
    3d6c:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    3d70:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    3d74:	4603      	mov	r3, r0
    3d76:	e7d4      	b.n	3d22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3d78:	791a      	ldrb	r2, [r3, #4]
    3d7a:	f002 0203 	and.w	r2, r2, #3
    3d7e:	2a03      	cmp	r2, #3
    3d80:	f000 8193 	beq.w	40aa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x612>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    3d84:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    3d88:	f7ff b8e3 	b.w	2f52 <ull_conn_llcp+0x22a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    3d8c:	4879      	ldr	r0, [pc, #484]	; (3f74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4dc>)
    3d8e:	f00a fb0b 	bl	e3a8 <mem_acquire>
		if (!tx) {
    3d92:	2800      	cmp	r0, #0
    3d94:	f000 82a8 	beq.w	42e8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x850>
	conn->lll.enc_tx = 1;
    3d98:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
    3d9c:	f043 0310 	orr.w	r3, r3, #16
    3da0:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    3da4:	2301      	movs	r3, #1
    3da6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    3da8:	7903      	ldrb	r3, [r0, #4]
		if (!conn->tx_ctrl) {
    3daa:	f8d4 c1c8 	ldr.w	ip, [r4, #456]	; 0x1c8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    3dae:	f043 0303 	orr.w	r3, r3, #3
    3db2:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
    3db4:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    3db8:	2206      	movs	r2, #6
    3dba:	71c2      	strb	r2, [r0, #7]
	if (
    3dbc:	b1f3      	cbz	r3, 3dfc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x364>
	    !conn->llcp_enc.pause_tx &&
    3dbe:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    3dc2:	0791      	lsls	r1, r2, #30
    3dc4:	d41a      	bmi.n	3dfc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x364>
	    !conn->llcp_phy.pause_tx &&
    3dc6:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    3dca:	07d2      	lsls	r2, r2, #31
    3dcc:	d416      	bmi.n	3dfc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x364>
		if (conn->tx_head == conn->tx_data) {
    3dce:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    3dd2:	4293      	cmp	r3, r2
    3dd4:	f000 81dc 	beq.w	4190 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6f8>
		} else if (!conn->tx_ctrl) {
    3dd8:	f1bc 0f00 	cmp.w	ip, #0
    3ddc:	f000 8265 	beq.w	42aa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x812>
	tx->next = conn->tx_ctrl_last->next;
    3de0:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
    3de4:	680a      	ldr	r2, [r1, #0]
    3de6:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    3de8:	6008      	str	r0, [r1, #0]
	conn->tx_ctrl_last = tx;
    3dea:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    3dee:	6802      	ldr	r2, [r0, #0]
    3df0:	2a00      	cmp	r2, #0
    3df2:	f47f ae6a 	bne.w	3aca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32>
		conn->tx_data_last = tx;
    3df6:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
    3dfa:	e663      	b.n	3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>
		if (!conn->tx_ctrl) {
    3dfc:	f1bc 0f00 	cmp.w	ip, #0
    3e00:	d046      	beq.n	3e90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3f8>
	tx->next = conn->tx_ctrl_last->next;
    3e02:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
    3e06:	680a      	ldr	r2, [r1, #0]
    3e08:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    3e0a:	6008      	str	r0, [r1, #0]
	if (!tx->next) {
    3e0c:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
    3e0e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    3e12:	2a00      	cmp	r2, #0
    3e14:	f47f ae56 	bne.w	3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>
    3e18:	e7ed      	b.n	3df6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x35e>
			conn->tx_data = conn->tx_data->next;
    3e1a:	6819      	ldr	r1, [r3, #0]
    3e1c:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    3e20:	2a00      	cmp	r2, #0
    3e22:	f47f aaa6 	bne.w	3372 <ull_conn_llcp+0x64a>
			tx->next = conn->tx_head->next;
    3e26:	681a      	ldr	r2, [r3, #0]
    3e28:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    3e2a:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    3e2c:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    3e2e:	e9c4 6672 	strd	r6, r6, [r4, #456]	; 0x1c8
    3e32:	f7ff baa6 	b.w	3382 <ull_conn_llcp+0x65a>
			conn->tx_data = conn->tx_data->next;
    3e36:	6819      	ldr	r1, [r3, #0]
    3e38:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    3e3c:	2a00      	cmp	r2, #0
    3e3e:	f47f a9de 	bne.w	31fe <ull_conn_llcp+0x4d6>
			tx->next = conn->tx_head->next;
    3e42:	681a      	ldr	r2, [r3, #0]
    3e44:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
    3e48:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
    3e4c:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
    3e50:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
    3e54:	f7ff b9de 	b.w	3214 <ull_conn_llcp+0x4ec>
		if (!conn->tx_ctrl) {
    3e58:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    3e5c:	2a00      	cmp	r2, #0
    3e5e:	f47f ac17 	bne.w	3690 <ull_conn_llcp+0x968>
			tx->next = conn->tx_head;
    3e62:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    3e64:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    3e68:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    3e6c:	e417      	b.n	369e <ull_conn_llcp+0x976>
			conn->tx_data = conn->tx_data->next;
    3e6e:	6819      	ldr	r1, [r3, #0]
    3e70:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    3e74:	2a00      	cmp	r2, #0
    3e76:	f47f a8d3 	bne.w	3020 <ull_conn_llcp+0x2f8>
			tx->next = conn->tx_head->next;
    3e7a:	681a      	ldr	r2, [r3, #0]
    3e7c:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
    3e80:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
    3e84:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
    3e88:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
    3e8c:	f7ff b8d3 	b.w	3036 <ull_conn_llcp+0x30e>
			tx->next = conn->tx_head;
    3e90:	6003      	str	r3, [r0, #0]
			conn->tx_head = tx;
    3e92:	4684      	mov	ip, r0
				conn->tx_ctrl = tx;
    3e94:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    3e98:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    3e9c:	4603      	mov	r3, r0
    3e9e:	e7a6      	b.n	3dee <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x356>
			conn->tx_data = conn->tx_data->next;
    3ea0:	6813      	ldr	r3, [r2, #0]
    3ea2:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    3ea6:	f1be 0f00 	cmp.w	lr, #0
    3eaa:	f47f acfa 	bne.w	38a2 <ull_conn_llcp+0xb7a>
			tx->next = conn->tx_head->next;
    3eae:	f8c9 3000 	str.w	r3, [r9]
			conn->tx_head->next = tx;
    3eb2:	f8c2 9000 	str.w	r9, [r2]
	if (!tx->next) {
    3eb6:	f8d9 2000 	ldr.w	r2, [r9]
				conn->tx_ctrl_last = tx;
    3eba:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
    3ebe:	e4fb      	b.n	38b8 <ull_conn_llcp+0xb90>
			conn->tx_data = conn->tx_data->next;
    3ec0:	6819      	ldr	r1, [r3, #0]
    3ec2:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    3ec6:	2a00      	cmp	r2, #0
    3ec8:	f47f ac6f 	bne.w	37aa <ull_conn_llcp+0xa82>
			tx->next = conn->tx_head->next;
    3ecc:	681a      	ldr	r2, [r3, #0]
    3ece:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
    3ed2:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
    3ed6:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
    3eda:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
    3ede:	e46f      	b.n	37c0 <ull_conn_llcp+0xa98>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    3ee0:	4824      	ldr	r0, [pc, #144]	; (3f74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4dc>)
    3ee2:	f00a fa61 	bl	e3a8 <mem_acquire>
		if (!tx) {
    3ee6:	2800      	cmp	r0, #0
    3ee8:	f43f aa99 	beq.w	341e <ull_conn_llcp+0x6f6>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    3eec:	7903      	ldrb	r3, [r0, #4]
    3eee:	f043 0303 	orr.w	r3, r3, #3
    3ef2:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    3ef4:	2311      	movs	r3, #17
    3ef6:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    3ef8:	2303      	movs	r3, #3
    3efa:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    3efc:	230f      	movs	r3, #15
    3efe:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    3f00:	f894 3187 	ldrb.w	r3, [r4, #391]	; 0x187
    3f04:	7243      	strb	r3, [r0, #9]
	    conn->tx_head &&
    3f06:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
    3f0a:	2b00      	cmp	r3, #0
    3f0c:	f000 80b4 	beq.w	4078 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5e0>
	    !conn->llcp_enc.pause_tx &&
    3f10:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    3f14:	0791      	lsls	r1, r2, #30
    3f16:	f100 80af 	bmi.w	4078 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5e0>
	    !conn->llcp_phy.pause_tx &&
    3f1a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    3f1e:	07d2      	lsls	r2, r2, #31
    3f20:	f100 80aa 	bmi.w	4078 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5e0>
		if (conn->tx_head == conn->tx_data) {
    3f24:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    3f28:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    3f2a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    3f2e:	f000 819f 	beq.w	4270 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7d8>
		} else if (!conn->tx_ctrl) {
    3f32:	2a00      	cmp	r2, #0
    3f34:	f000 81a8 	beq.w	4288 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7f0>
	tx->next = conn->tx_ctrl_last->next;
    3f38:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    3f3c:	681a      	ldr	r2, [r3, #0]
    3f3e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    3f40:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    3f42:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    3f46:	6803      	ldr	r3, [r0, #0]
    3f48:	2b00      	cmp	r3, #0
    3f4a:	f000 810a 	beq.w	4162 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6ca>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    3f4e:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
    3f52:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
    3f56:	2300      	movs	r3, #0
    3f58:	603b      	str	r3, [r7, #0]
    3f5a:	f7ff ba60 	b.w	341e <ull_conn_llcp+0x6f6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3f5e:	791a      	ldrb	r2, [r3, #4]
    3f60:	f002 0203 	and.w	r2, r2, #3
    3f64:	2a03      	cmp	r2, #3
    3f66:	f000 8133 	beq.w	41d0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x738>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    3f6a:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    3f6e:	f7ff b857 	b.w	3020 <ull_conn_llcp+0x2f8>
    3f72:	bf00      	nop
    3f74:	2000242c 	.word	0x2000242c
		if (conn->llcp_phy.tx & PHY_2M) {
    3f78:	0719      	lsls	r1, r3, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
    3f7a:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
		if (conn->llcp_phy.tx & PHY_2M) {
    3f7e:	f3c3 0282 	ubfx	r2, r3, #2, #3
    3f82:	f140 80fa 	bpl.w	417a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6e2>
			conn->llcp_phy.tx = PHY_2M;
    3f86:	2202      	movs	r2, #2
    3f88:	f362 0384 	bfi	r3, r2, #2, #3
    3f8c:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		if (conn->llcp_phy.rx & PHY_2M) {
    3f90:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
    3f94:	0659      	lsls	r1, r3, #25
    3f96:	ea4f 1253 	mov.w	r2, r3, lsr #5
    3f9a:	f140 80e5 	bpl.w	4168 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6d0>
			conn->llcp_phy.rx = PHY_2M;
    3f9e:	2202      	movs	r2, #2
    3fa0:	f362 1347 	bfi	r3, r2, #5, #3
    3fa4:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->llcp_ack -= 2U;
    3fa8:	1e83      	subs	r3, r0, #2
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    3faa:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
    3fae:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    3fb2:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
		conn->llcp_ack -= 2U;
    3fb6:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    3fba:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    3fbe:	f3c2 0182 	ubfx	r1, r2, #2, #3
    3fc2:	f007 0707 	and.w	r7, r7, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    3fc6:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    3fca:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
    3fce:	428f      	cmp	r7, r1
    3fd0:	bf08      	it	eq
    3fd2:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    3fd4:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
    3fd6:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
    3fda:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    3fde:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
    3fe2:	bf08      	it	eq
    3fe4:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    3fe6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    3fea:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
    3fee:	2206      	movs	r2, #6
		conn->llcp.phy_upd_ind.initiate = 1U;
    3ff0:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		conn->llcp_type = LLCP_PHY_UPD;
    3ff4:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    3ff8:	f7fe beef 	b.w	2dda <ull_conn_llcp+0xb2>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    3ffc:	48bc      	ldr	r0, [pc, #752]	; (42f0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x858>)
    3ffe:	f00a f9d3 	bl	e3a8 <mem_acquire>
	if (!tx) {
    4002:	2800      	cmp	r0, #0
    4004:	f43f aa0b 	beq.w	341e <ull_conn_llcp+0x6f6>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    4008:	7903      	ldrb	r3, [r0, #4]
    400a:	f043 0303 	orr.w	r3, r3, #3
    400e:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    4010:	2318      	movs	r3, #24
    4012:	7143      	strb	r3, [r0, #5]
	rsp->interval_min =
    4014:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
    4018:	8103      	strh	r3, [r0, #8]
	rsp->interval_max =
    401a:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
    401e:	8143      	strh	r3, [r0, #10]
	rsp->latency =
    4020:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
    4024:	8183      	strh	r3, [r0, #12]
	rsp->timeout =
    4026:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
    402a:	81c3      	strh	r3, [r0, #14]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    402c:	2310      	movs	r3, #16
    402e:	71c3      	strb	r3, [r0, #7]
	rsp->preferred_periodicity =
    4030:	f894 3190 	ldrb.w	r3, [r4, #400]	; 0x190
    4034:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    4036:	f8b4 2192 	ldrh.w	r2, [r4, #402]	; 0x192
	    conn->tx_head &&
    403a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	rsp->reference_conn_event_count =
    403e:	f8a0 2011 	strh.w	r2, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    4042:	f8b4 2194 	ldrh.w	r2, [r4, #404]	; 0x194
    4046:	f8a0 2013 	strh.w	r2, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    404a:	f8b4 2196 	ldrh.w	r2, [r4, #406]	; 0x196
    404e:	f8a0 2015 	strh.w	r2, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    4052:	f8b4 2198 	ldrh.w	r2, [r4, #408]	; 0x198
    4056:	f8a0 2017 	strh.w	r2, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    405a:	f8b4 219a 	ldrh.w	r2, [r4, #410]	; 0x19a
    405e:	f8a0 2019 	strh.w	r2, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    4062:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
    4066:	f8a0 201b 	strh.w	r2, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    406a:	f8b4 219e 	ldrh.w	r2, [r4, #414]	; 0x19e
    406e:	f8a0 201d 	strh.w	r2, [r0, #29]
	if (
    4072:	2b00      	cmp	r3, #0
    4074:	f47f af4c 	bne.w	3f10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x478>
		if (!conn->tx_ctrl) {
    4078:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    407c:	2a00      	cmp	r2, #0
    407e:	f47f af5b 	bne.w	3f38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a0>
			tx->next = conn->tx_head;
    4082:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    4084:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    4088:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    408c:	e75b      	b.n	3f46 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4ae>
			conn->tx_data = conn->tx_data->next;
    408e:	681a      	ldr	r2, [r3, #0]
    4090:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    4094:	f1bc 0f00 	cmp.w	ip, #0
    4098:	f47f ad2a 	bne.w	3af0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x58>
			tx->next = conn->tx_head->next;
    409c:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
    40a0:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
    40a4:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
    40a8:	e52b      	b.n	3b02 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6a>
	    ((pdu_data_tx->llctrl.opcode !=
    40aa:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    40ac:	2a03      	cmp	r2, #3
    40ae:	f43f ade3 	beq.w	3c78 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1e0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    40b2:	2a0a      	cmp	r2, #10
    40b4:	f47f ae66 	bne.w	3d84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2ec>
    40b8:	e5de      	b.n	3c78 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1e0>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    40ba:	791a      	ldrb	r2, [r3, #4]
    40bc:	f002 0203 	and.w	r2, r2, #3
    40c0:	2a03      	cmp	r2, #3
    40c2:	d07d      	beq.n	41c0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x728>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    40c4:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    40c8:	f7ff b953 	b.w	3372 <ull_conn_llcp+0x64a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    40cc:	791a      	ldrb	r2, [r3, #4]
    40ce:	f002 0203 	and.w	r2, r2, #3
    40d2:	2a03      	cmp	r2, #3
    40d4:	f000 80ac 	beq.w	4230 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x798>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    40d8:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    40dc:	f7ff b88f 	b.w	31fe <ull_conn_llcp+0x4d6>
			conn->tx_data = conn->tx_data->next;
    40e0:	6819      	ldr	r1, [r3, #0]
    40e2:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    40e6:	2a00      	cmp	r2, #0
    40e8:	f47f acce 	bne.w	3a88 <ull_conn_llcp+0xd60>
			tx->next = conn->tx_head->next;
    40ec:	681a      	ldr	r2, [r3, #0]
    40ee:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
    40f2:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
    40f6:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
    40fa:	e4ce      	b.n	3a9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2>
			conn->tx_data = conn->tx_data->next;
    40fc:	6819      	ldr	r1, [r3, #0]
    40fe:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    4102:	2a00      	cmp	r2, #0
    4104:	f47f a8dc 	bne.w	32c0 <ull_conn_llcp+0x598>
			tx->next = conn->tx_head->next;
    4108:	681a      	ldr	r2, [r3, #0]
    410a:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
    410e:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
    4112:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
    4116:	f7ff b8dc 	b.w	32d2 <ull_conn_llcp+0x5aa>
			conn->tx_data = conn->tx_data->next;
    411a:	681a      	ldr	r2, [r3, #0]
    411c:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    4120:	f1bc 0f00 	cmp.w	ip, #0
    4124:	f47f adf6 	bne.w	3d14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x27c>
			tx->next = conn->tx_head->next;
    4128:	681a      	ldr	r2, [r3, #0]
    412a:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    412c:	4684      	mov	ip, r0
    412e:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    4130:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
    4134:	e5f5      	b.n	3d22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    4136:	791a      	ldrb	r2, [r3, #4]
    4138:	f002 0203 	and.w	r2, r2, #3
    413c:	2a03      	cmp	r2, #3
    413e:	f000 80f8 	beq.w	4332 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x89a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    4142:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    4146:	469c      	mov	ip, r3
    4148:	e5e4      	b.n	3d14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x27c>
			conn->tx_data = conn->tx_data->next;
    414a:	6819      	ldr	r1, [r3, #0]
    414c:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    4150:	2a00      	cmp	r2, #0
    4152:	f47f ad2f 	bne.w	3bb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x11c>
			tx->next = conn->tx_head->next;
    4156:	681a      	ldr	r2, [r3, #0]
    4158:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    415a:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    415c:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
    4160:	e52f      	b.n	3bc2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12a>
		conn->tx_data_last = tx;
    4162:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
    4166:	e6f2      	b.n	3f4e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4b6>
		} else if (conn->llcp_phy.rx & PHY_1M) {
    4168:	07d7      	lsls	r7, r2, #31
    416a:	f140 8095 	bpl.w	4298 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x800>
			conn->llcp_phy.rx = PHY_1M;
    416e:	2201      	movs	r2, #1
    4170:	f362 1347 	bfi	r3, r2, #5, #3
    4174:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
    4178:	e716      	b.n	3fa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x510>
		} else if (conn->llcp_phy.tx & PHY_1M) {
    417a:	07d7      	lsls	r7, r2, #31
			conn->llcp_phy.tx = PHY_1M;
    417c:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		} else if (conn->llcp_phy.tx & PHY_1M) {
    4180:	f140 809c 	bpl.w	42bc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x824>
			conn->llcp_phy.tx = PHY_1M;
    4184:	2201      	movs	r2, #1
    4186:	f362 0384 	bfi	r3, r2, #2, #3
    418a:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
    418e:	e6ff      	b.n	3f90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4f8>
			conn->tx_data = conn->tx_data->next;
    4190:	6812      	ldr	r2, [r2, #0]
    4192:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    4196:	f1bc 0f00 	cmp.w	ip, #0
    419a:	f47f ae21 	bne.w	3de0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x348>
			tx->next = conn->tx_head->next;
    419e:	681a      	ldr	r2, [r3, #0]
    41a0:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    41a2:	4684      	mov	ip, r0
    41a4:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    41a6:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
    41aa:	e620      	b.n	3dee <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x356>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    41ac:	791a      	ldrb	r2, [r3, #4]
    41ae:	f002 0203 	and.w	r2, r2, #3
    41b2:	2a03      	cmp	r2, #3
    41b4:	f000 809e 	beq.w	42f4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x85c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    41b8:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    41bc:	f7ff baf5 	b.w	37aa <ull_conn_llcp+0xa82>
	    ((pdu_data_tx->llctrl.opcode !=
    41c0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    41c2:	2a03      	cmp	r2, #3
    41c4:	f43f ae2f 	beq.w	3e26 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    41c8:	2a0a      	cmp	r2, #10
    41ca:	f47f af7b 	bne.w	40c4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x62c>
    41ce:	e62a      	b.n	3e26 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38e>
	    ((pdu_data_tx->llctrl.opcode !=
    41d0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    41d2:	2a03      	cmp	r2, #3
    41d4:	f43f ae51 	beq.w	3e7a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3e2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    41d8:	2a0a      	cmp	r2, #10
    41da:	f47f aec6 	bne.w	3f6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4d2>
    41de:	e64c      	b.n	3e7a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3e2>
				conn->llcp_conn_param.interval_max;
    41e0:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
    41e4:	f7ff b9d9 	b.w	359a <ull_conn_llcp+0x872>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    41e8:	791a      	ldrb	r2, [r3, #4]
    41ea:	f002 0203 	and.w	r2, r2, #3
    41ee:	2a03      	cmp	r2, #3
    41f0:	d026      	beq.n	4240 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7a8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    41f2:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    41f6:	e47b      	b.n	3af0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x58>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    41f8:	791a      	ldrb	r2, [r3, #4]
    41fa:	f002 0203 	and.w	r2, r2, #3
    41fe:	2a03      	cmp	r2, #3
    4200:	f000 80a8 	beq.w	4354 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8bc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    4204:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    4208:	f7ff b85a 	b.w	32c0 <ull_conn_llcp+0x598>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    420c:	791a      	ldrb	r2, [r3, #4]
    420e:	f002 0203 	and.w	r2, r2, #3
    4212:	2a03      	cmp	r2, #3
    4214:	d07e      	beq.n	4314 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x87c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    4216:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    421a:	e435      	b.n	3a88 <ull_conn_llcp+0xd60>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    421c:	7913      	ldrb	r3, [r2, #4]
    421e:	f003 0303 	and.w	r3, r3, #3
    4222:	2b03      	cmp	r3, #3
    4224:	f000 809e 	beq.w	4364 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8cc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    4228:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
    422c:	f7ff bb39 	b.w	38a2 <ull_conn_llcp+0xb7a>
	    ((pdu_data_tx->llctrl.opcode !=
    4230:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    4232:	2a03      	cmp	r2, #3
    4234:	f43f ae05 	beq.w	3e42 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3aa>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    4238:	2a0a      	cmp	r2, #10
    423a:	f47f af4d 	bne.w	40d8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x640>
    423e:	e600      	b.n	3e42 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3aa>
	    ((pdu_data_tx->llctrl.opcode !=
    4240:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    4242:	2a03      	cmp	r2, #3
    4244:	d001      	beq.n	424a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7b2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    4246:	2a0a      	cmp	r2, #10
    4248:	d1d3      	bne.n	41f2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x75a>
    424a:	681a      	ldr	r2, [r3, #0]
    424c:	e726      	b.n	409c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x604>
		if (!conn->tx_ctrl) {
    424e:	e9d4 2e71 	ldrd	r2, lr, [r4, #452]	; 0x1c4
    4252:	f7ff bb14 	b.w	387e <ull_conn_llcp+0xb56>
			conn->tx_data = conn->tx_data->next;
    4256:	6819      	ldr	r1, [r3, #0]
    4258:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    425c:	2a00      	cmp	r2, #0
    425e:	f47f aa17 	bne.w	3690 <ull_conn_llcp+0x968>
			tx->next = conn->tx_head->next;
    4262:	681a      	ldr	r2, [r3, #0]
    4264:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    4266:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    4268:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
    426c:	f7ff ba17 	b.w	369e <ull_conn_llcp+0x976>
			conn->tx_data = conn->tx_data->next;
    4270:	6819      	ldr	r1, [r3, #0]
    4272:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    4276:	2a00      	cmp	r2, #0
    4278:	f47f ae5e 	bne.w	3f38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a0>
			tx->next = conn->tx_head->next;
    427c:	681a      	ldr	r2, [r3, #0]
    427e:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    4280:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    4282:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
    4286:	e65e      	b.n	3f46 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4ae>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    4288:	791a      	ldrb	r2, [r3, #4]
    428a:	f002 0203 	and.w	r2, r2, #3
    428e:	2a03      	cmp	r2, #3
    4290:	d024      	beq.n	42dc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x844>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    4292:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    4296:	e64f      	b.n	3f38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a0>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
    4298:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
    429c:	bf18      	it	ne
    429e:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
    42a0:	f362 1347 	bfi	r3, r2, #5, #3
    42a4:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
    42a8:	e67e      	b.n	3fa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x510>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    42aa:	791a      	ldrb	r2, [r3, #4]
    42ac:	f002 0203 	and.w	r2, r2, #3
    42b0:	2a03      	cmp	r2, #3
    42b2:	d00c      	beq.n	42ce <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x836>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    42b4:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    42b8:	469c      	mov	ip, r3
    42ba:	e591      	b.n	3de0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x348>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
    42bc:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = PHY_CODED;
    42c0:	bf18      	it	ne
    42c2:	2204      	movne	r2, #4
			conn->llcp_phy.tx = 0U;
    42c4:	f362 0384 	bfi	r3, r2, #2, #3
    42c8:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
    42cc:	e660      	b.n	3f90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4f8>
	    ((pdu_data_tx->llctrl.opcode !=
    42ce:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    42d0:	2a03      	cmp	r2, #3
    42d2:	f43f af64 	beq.w	419e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x706>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    42d6:	2a0a      	cmp	r2, #10
    42d8:	d1ec      	bne.n	42b4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x81c>
    42da:	e760      	b.n	419e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x706>
	    ((pdu_data_tx->llctrl.opcode !=
    42dc:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    42de:	2a03      	cmp	r2, #3
    42e0:	d0cc      	beq.n	427c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7e4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    42e2:	2a0a      	cmp	r2, #10
    42e4:	d1d5      	bne.n	4292 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7fa>
    42e6:	e7c9      	b.n	427c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7e4>
    42e8:	e9d4 3c71 	ldrd	r3, ip, [r4, #452]	; 0x1c4
    42ec:	f7ff bbea 	b.w	3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>
    42f0:	2000242c 	.word	0x2000242c
	    ((pdu_data_tx->llctrl.opcode !=
    42f4:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    42f6:	2a03      	cmp	r2, #3
    42f8:	f43f ade8 	beq.w	3ecc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x434>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    42fc:	2a0a      	cmp	r2, #10
    42fe:	f47f af5b 	bne.w	41b8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x720>
    4302:	e5e3      	b.n	3ecc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x434>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    4304:	791a      	ldrb	r2, [r3, #4]
    4306:	f002 0203 	and.w	r2, r2, #3
    430a:	2a03      	cmp	r2, #3
    430c:	d00a      	beq.n	4324 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    430e:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    4312:	e44f      	b.n	3bb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x11c>
	    ((pdu_data_tx->llctrl.opcode !=
    4314:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    4316:	2a03      	cmp	r2, #3
    4318:	f43f aee8 	beq.w	40ec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x654>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    431c:	2a0a      	cmp	r2, #10
    431e:	f47f af7a 	bne.w	4216 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x77e>
    4322:	e6e3      	b.n	40ec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x654>
	    ((pdu_data_tx->llctrl.opcode !=
    4324:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    4326:	2a03      	cmp	r2, #3
    4328:	f43f af15 	beq.w	4156 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6be>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    432c:	2a0a      	cmp	r2, #10
    432e:	d1ee      	bne.n	430e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x876>
    4330:	e711      	b.n	4156 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6be>
	    ((pdu_data_tx->llctrl.opcode !=
    4332:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    4334:	2a03      	cmp	r2, #3
    4336:	f43f aef7 	beq.w	4128 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x690>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    433a:	2a0a      	cmp	r2, #10
    433c:	f47f af01 	bne.w	4142 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6aa>
    4340:	e6f2      	b.n	4128 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x690>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    4342:	791a      	ldrb	r2, [r3, #4]
    4344:	f002 0203 	and.w	r2, r2, #3
    4348:	2a03      	cmp	r2, #3
    434a:	d013      	beq.n	4374 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8dc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    434c:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    4350:	f7ff b99e 	b.w	3690 <ull_conn_llcp+0x968>
	    ((pdu_data_tx->llctrl.opcode !=
    4354:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    4356:	2a03      	cmp	r2, #3
    4358:	f43f aed6 	beq.w	4108 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x670>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    435c:	2a0a      	cmp	r2, #10
    435e:	f47f af51 	bne.w	4204 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x76c>
    4362:	e6d1      	b.n	4108 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x670>
	    ((pdu_data_tx->llctrl.opcode !=
    4364:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    4366:	2b03      	cmp	r3, #3
    4368:	d002      	beq.n	4370 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8d8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    436a:	2b0a      	cmp	r3, #10
    436c:	f47f af5c 	bne.w	4228 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x790>
    4370:	6813      	ldr	r3, [r2, #0]
    4372:	e59c      	b.n	3eae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x416>
	    ((pdu_data_tx->llctrl.opcode !=
    4374:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    4376:	2a03      	cmp	r2, #3
    4378:	f43f af73 	beq.w	4262 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7ca>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    437c:	2a0a      	cmp	r2, #10
    437e:	d1e5      	bne.n	434c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8b4>
    4380:	e76f      	b.n	4262 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7ca>
		LL_ASSERT(0);
    4382:	4a03      	ldr	r2, [pc, #12]	; (4390 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8f8>)
    4384:	4903      	ldr	r1, [pc, #12]	; (4394 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8fc>)
    4386:	f640 5389 	movw	r3, #3465	; 0xd89
    438a:	f7ff bbcd 	b.w	3b28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x90>
    438e:	bf00      	nop
    4390:	00023588 	.word	0x00023588
    4394:	0002314c 	.word	0x0002314c

00004398 <ull_slave_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    4398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    439c:	4614      	mov	r4, r2
	struct ll_conn *conn;
	uint16_t win_offset;
	uint16_t timeout;
	uint8_t chan_sel;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    439e:	6812      	ldr	r2, [r2, #0]
{
    43a0:	b097      	sub	sp, #92	; 0x5c
    43a2:	461f      	mov	r7, r3
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    43a4:	6813      	ldr	r3, [r2, #0]
    43a6:	930b      	str	r3, [sp, #44]	; 0x2c
	conn = lll->hdr.parent;

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
    43a8:	7f0b      	ldrb	r3, [r1, #28]
	conn = lll->hdr.parent;
    43aa:	f8d7 8000 	ldr.w	r8, [r7]
	peer_addr_type = pdu_adv->tx_addr;
    43ae:	f3c3 1380 	ubfx	r3, r3, #6, #1
{
    43b2:	460d      	mov	r5, r1
    43b4:	4681      	mov	r9, r0
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    43b6:	2206      	movs	r2, #6
    43b8:	311e      	adds	r1, #30
    43ba:	a814      	add	r0, sp, #80	; 0x50
	peer_addr_type = pdu_adv->tx_addr;
    43bc:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    43c0:	f01b f88a 	bl	1f4d8 <memcpy>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;
    43c4:	f894 a012 	ldrb.w	sl, [r4, #18]

	if (rl_idx != FILTER_IDX_NONE) {
    43c8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
		/* Get identity address */
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
    43cc:	ae12      	add	r6, sp, #72	; 0x48
	if (rl_idx != FILTER_IDX_NONE) {
    43ce:	d057      	beq.n	4480 <ull_slave_setup+0xe8>
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
    43d0:	4632      	mov	r2, r6
    43d2:	f10d 0147 	add.w	r1, sp, #71	; 0x47
    43d6:	4650      	mov	r0, sl
    43d8:	f012 f988 	bl	166ec <ll_rl_id_addr_get>
		/* Mark it as identity address from RPA (0x02, 0x03) */
		peer_addr_type += 2;
    43dc:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    43e0:	3302      	adds	r3, #2
    43e2:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(conn->peer_addr, peer_id_addr, sizeof(conn->peer_addr));
	conn->own_addr_type = own_addr_type;
	memcpy(conn->own_addr, own_addr, sizeof(conn->own_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    43e6:	2203      	movs	r2, #3
    43e8:	f105 012e 	add.w	r1, r5, #46	; 0x2e
    43ec:	f107 0008 	add.w	r0, r7, #8
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    43f0:	f107 0b04 	add.w	fp, r7, #4
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    43f4:	f01b f870 	bl	1f4d8 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    43f8:	f107 0318 	add.w	r3, r7, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    43fc:	2204      	movs	r2, #4
    43fe:	f105 012a 	add.w	r1, r5, #42	; 0x2a
    4402:	4658      	mov	r0, fp
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    4404:	930a      	str	r3, [sp, #40]	; 0x28
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    4406:	f01b f867 	bl	1f4d8 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    440a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    440c:	2205      	movs	r2, #5
    440e:	f105 013a 	add.w	r1, r5, #58	; 0x3a
    4412:	4618      	mov	r0, r3
    4414:	f01b f860 	bl	1f4d8 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    4418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    441a:	2105      	movs	r1, #5
    441c:	4618      	mov	r0, r3
    441e:	f00a f9a1 	bl	e764 <util_ones_count_get>
    4422:	7f7b      	ldrb	r3, [r7, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    4424:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    4428:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    442c:	f360 0305 	bfi	r3, r0, #0, #6
    4430:	777b      	strb	r3, [r7, #29]
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    4432:	f3c2 0304 	ubfx	r3, r2, #0, #5
    4436:	77bb      	strb	r3, [r7, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    4438:	8eab      	ldrh	r3, [r5, #52]	; 0x34
    443a:	81fb      	strh	r3, [r7, #14]
	if ((lll->data_chan_count < 2) || (lll->data_chan_hop < 5) ||
    443c:	2801      	cmp	r0, #1
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    443e:	b299      	uxth	r1, r3
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    4440:	f002 031f 	and.w	r3, r2, #31
	if ((lll->data_chan_count < 2) || (lll->data_chan_hop < 5) ||
    4444:	d905      	bls.n	4452 <ull_slave_setup+0xba>
    4446:	331b      	adds	r3, #27
    4448:	f003 031f 	and.w	r3, r3, #31
    444c:	2b0b      	cmp	r3, #11
    444e:	d800      	bhi.n	4452 <ull_slave_setup+0xba>
	    (lll->data_chan_hop > 16) || !lll->interval) {
    4450:	b9e1      	cbnz	r1, 448c <ull_slave_setup+0xf4>
		lll->slave.initiated = 0U;
    4452:	f897 3020 	ldrb.w	r3, [r7, #32]

		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
    4456:	2601      	movs	r6, #1
		lll->slave.initiated = 0U;
    4458:	f36f 0300 	bfc	r3, #0, #1
    445c:	f887 3020 	strb.w	r3, [r7, #32]
		rx->type = NODE_RX_TYPE_RELEASE;
    4460:	712e      	strb	r6, [r5, #4]
			struct node_rx_pdu *rx_csa;

			/* pick the rx node instance stored within the
			 * connection rx node.
			 */
			rx_csa = (void *)ftr->extra;
    4462:	6864      	ldr	r4, [r4, #4]

			/* Enqueue the connection event to be release */
			ll_rx_put(link, rx);
    4464:	4648      	mov	r0, r9
    4466:	4629      	mov	r1, r5
    4468:	f00d fd4a 	bl	11f00 <ll_rx_put>
			/* Mark for buffer for release */
			rx->type = NODE_RX_TYPE_RELEASE;
		}

		/* Enqueue connection or CSA event to be release */
		ll_rx_put(link, rx);
    446c:	6820      	ldr	r0, [r4, #0]
			rx->type = NODE_RX_TYPE_RELEASE;
    446e:	7126      	strb	r6, [r4, #4]
		ll_rx_put(link, rx);
    4470:	4621      	mov	r1, r4
    4472:	f00d fd45 	bl	11f00 <ll_rx_put>
		ll_rx_sched();
    4476:	f00d fd4d 	bl	11f14 <ll_rx_sched>
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
#endif
}
    447a:	b017      	add	sp, #92	; 0x5c
    447c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
    4480:	2206      	movs	r2, #6
    4482:	a914      	add	r1, sp, #80	; 0x50
    4484:	4630      	mov	r0, r6
    4486:	f01b f827 	bl	1f4d8 <memcpy>
    448a:	e7ac      	b.n	43e6 <ull_slave_setup+0x4e>
	((struct lll_adv *)ftr->param)->conn = NULL;
    448c:	6823      	ldr	r3, [r4, #0]
    448e:	2000      	movs	r0, #0
    4490:	6058      	str	r0, [r3, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    4492:	f895 0037 	ldrb.w	r0, [r5, #55]	; 0x37
    4496:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
    449a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    449e:	823b      	strh	r3, [r7, #16]
	conn->slave.sca = pdu_adv->connect_ind.sca;
    44a0:	f898 30d8 	ldrb.w	r3, [r8, #216]	; 0xd8
    44a4:	0952      	lsrs	r2, r2, #5
    44a6:	f362 03c5 	bfi	r3, r2, #3, #3
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    44aa:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
    44ac:	920d      	str	r2, [sp, #52]	; 0x34
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    44ae:	f240 42e2 	movw	r2, #1250	; 0x4e2
    44b2:	fb02 f001 	mul.w	r0, r2, r1
	conn->slave.sca = pdu_adv->connect_ind.sca;
    44b6:	f888 30d8 	strb.w	r3, [r8, #216]	; 0xd8
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    44ba:	900a      	str	r0, [sp, #40]	; 0x28
		(((lll_clock_ppm_local_get() +
    44bc:	f013 fbb4 	bl	17c28 <lll_clock_ppm_local_get>
    44c0:	900c      	str	r0, [sp, #48]	; 0x30
		   lll_clock_ppm_get(conn->slave.sca)) *
    44c2:	f898 00d8 	ldrb.w	r0, [r8, #216]	; 0xd8
    44c6:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    44ca:	f013 fbaf 	bl	17c2c <lll_clock_ppm_get>
		(((lll_clock_ppm_local_get() +
    44ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    44d0:	49b9      	ldr	r1, [pc, #740]	; (47b8 <ull_slave_setup+0x420>)
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    44d2:	f8b7 e010 	ldrh.w	lr, [r7, #16]
		(((lll_clock_ppm_local_get() +
    44d6:	4403      	add	r3, r0
		   lll_clock_ppm_get(conn->slave.sca)) *
    44d8:	980a      	ldr	r0, [sp, #40]	; 0x28
    44da:	fb00 f303 	mul.w	r3, r0, r3
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    44de:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    44e2:	f203 233f 	addw	r3, r3, #575	; 0x23f
    44e6:	fba1 2303 	umull	r2, r3, r1, r3
    44ea:	0c9b      	lsrs	r3, r3, #18
	lll->slave.window_widening_periodic_us =
    44ec:	627b      	str	r3, [r7, #36]	; 0x24
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    44ee:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    44f2:	f240 42e2 	movw	r2, #1250	; 0x4e2
    44f6:	fb03 f202 	mul.w	r2, r3, r2
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    44fa:	0843      	lsrs	r3, r0, #1
    44fc:	3b96      	subs	r3, #150	; 0x96
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    44fe:	63ba      	str	r2, [r7, #56]	; 0x38
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    4500:	62bb      	str	r3, [r7, #40]	; 0x28
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    4502:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    4504:	4aad      	ldr	r2, [pc, #692]	; (47bc <ull_slave_setup+0x424>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    4506:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    450a:	469c      	mov	ip, r3
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    450c:	4bac      	ldr	r3, [pc, #688]	; (47c0 <ull_slave_setup+0x428>)
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    450e:	4601      	mov	r1, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    4510:	4403      	add	r3, r0
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    4512:	4402      	add	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    4514:	fbb3 f3f0 	udiv	r3, r3, r0
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    4518:	fbb2 f2f0 	udiv	r2, r2, r0
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    451c:	f242 7010 	movw	r0, #10000	; 0x2710
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    4520:	f8a8 20c6 	strh.w	r2, [r8, #198]	; 0xc6
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    4524:	fa1f f28c 	uxth.w	r2, ip
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    4528:	fb00 1202 	mla	r2, r0, r2, r1
    452c:	3a01      	subs	r2, #1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    452e:	f10e 0006 	add.w	r0, lr, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    4532:	fbb2 f2f1 	udiv	r2, r2, r1
    4536:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    453a:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    453c:	4282      	cmp	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    453e:	f8a8 20ce 	strh.w	r2, [r8, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    4542:	dd03      	ble.n	454c <ull_slave_setup+0x1b4>
			     (conn->apto_reload - (lll->latency + 6)) :
    4544:	eba2 020e 	sub.w	r2, r2, lr
    4548:	3a06      	subs	r2, #6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    454a:	b292      	uxth	r2, r2
    454c:	f8a8 20ca 	strh.w	r2, [r8, #202]	; 0xca
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    4550:	4659      	mov	r1, fp
    4552:	2204      	movs	r2, #4
    4554:	f108 00dc 	add.w	r0, r8, #220	; 0xdc
    4558:	f01a ffbe 	bl	1f4d8 <memcpy>
	cc->status = 0U;
    455c:	f44f 7280 	mov.w	r2, #256	; 0x100
		chan_sel = pdu_adv->chan_sel;
    4560:	7f2b      	ldrb	r3, [r5, #28]
	cc->status = 0U;
    4562:	83aa      	strh	r2, [r5, #28]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    4564:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4566:	f892 0026 	ldrb.w	r0, [r2, #38]	; 0x26
		chan_sel = pdu_adv->chan_sel;
    456a:	f3c3 1240 	ubfx	r2, r3, #5, #1
    456e:	920f      	str	r2, [sp, #60]	; 0x3c
    4570:	920c      	str	r2, [sp, #48]	; 0x30
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    4572:	f012 fdb5 	bl	170e0 <ull_filter_lll_lrpa_used>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    4576:	f105 032b 	add.w	r3, r5, #43	; 0x2b
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    457a:	2800      	cmp	r0, #0
    457c:	f000 80e4 	beq.w	4748 <ull_slave_setup+0x3b0>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    4580:	4618      	mov	r0, r3
    4582:	2206      	movs	r2, #6
    4584:	f105 0124 	add.w	r1, r5, #36	; 0x24
    4588:	f01a ffa6 	bl	1f4d8 <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
    458c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
    4590:	f105 0025 	add.w	r0, r5, #37	; 0x25
	if (rl_idx != FILTER_IDX_NONE) {
    4594:	f000 80de 	beq.w	4754 <ull_slave_setup+0x3bc>
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
    4598:	a914      	add	r1, sp, #80	; 0x50
    459a:	2206      	movs	r2, #6
    459c:	f01a ff9c 	bl	1f4d8 <memcpy>
	cc->peer_addr_type = peer_addr_type;
    45a0:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    45a4:	77ab      	strb	r3, [r5, #30]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
    45a6:	4631      	mov	r1, r6
    45a8:	2206      	movs	r2, #6
    45aa:	f105 001f 	add.w	r0, r5, #31
    45ae:	f01a ff93 	bl	1f4d8 <memcpy>
	cc->sca = conn->slave.sca;
    45b2:	f898 30d8 	ldrb.w	r3, [r8, #216]	; 0xd8
	cc->interval = lll->interval;
    45b6:	89fa      	ldrh	r2, [r7, #14]
    45b8:	866a      	strh	r2, [r5, #50]	; 0x32
	cc->latency = lll->latency;
    45ba:	8a3a      	ldrh	r2, [r7, #16]
    45bc:	86aa      	strh	r2, [r5, #52]	; 0x34
	cc->sca = conn->slave.sca;
    45be:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	cc->timeout = timeout;
    45c2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
	cc->sca = conn->slave.sca;
    45c6:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	cc->timeout = timeout;
    45ca:	86ea      	strh	r2, [r5, #54]	; 0x36
	lll->handle = ll_conn_handle_get(conn);
    45cc:	4640      	mov	r0, r8
    45ce:	f00f f937 	bl	13840 <ll_conn_handle_get>
		ll_rx_put(link, rx);
    45d2:	4629      	mov	r1, r5
	lll->handle = ll_conn_handle_get(conn);
    45d4:	81b8      	strh	r0, [r7, #12]
	rx->handle = lll->handle;
    45d6:	80e8      	strh	r0, [r5, #6]
		rx_csa = (void *)ftr->extra;
    45d8:	6865      	ldr	r5, [r4, #4]
		ll_rx_put(link, rx);
    45da:	4648      	mov	r0, r9
    45dc:	f00d fc90 	bl	11f00 <ll_rx_put>
		rx->handle = lll->handle;
    45e0:	89bb      	ldrh	r3, [r7, #12]
    45e2:	80eb      	strh	r3, [r5, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    45e4:	2319      	movs	r3, #25
    45e6:	712b      	strb	r3, [r5, #4]
		if (chan_sel) {
    45e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		link = rx->link;
    45ea:	682e      	ldr	r6, [r5, #0]
		if (chan_sel) {
    45ec:	2b00      	cmp	r3, #0
    45ee:	f040 80be 	bne.w	476e <ull_slave_setup+0x3d6>
			cs->csa = 0x00;
    45f2:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    45f6:	772b      	strb	r3, [r5, #28]
	ll_rx_put(link, rx);
    45f8:	4629      	mov	r1, r5
    45fa:	4630      	mov	r0, r6
    45fc:	f00d fc80 	bl	11f00 <ll_rx_put>
	ll_rx_sched();
    4600:	f00d fc88 	bl	11f14 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    4604:	f897 0045 	ldrb.w	r0, [r7, #69]	; 0x45
    4608:	2101      	movs	r1, #1
    460a:	f000 0007 	and.w	r0, r0, #7
    460e:	f013 f9dd 	bl	179cc <lll_radio_rx_ready_delay_get>
    4612:	4605      	mov	r5, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    4614:	486b      	ldr	r0, [pc, #428]	; (47c4 <ull_slave_setup+0x42c>)
	conn->evt.ticks_active_to_start = 0U;
    4616:	f04f 0900 	mov.w	r9, #0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    461a:	f205 4152 	addw	r1, r5, #1106	; 0x452
	conn->evt.ticks_xtal_to_start =
    461e:	2331      	movs	r3, #49	; 0x31
    4620:	f8c8 3000 	str.w	r3, [r8]
	conn->evt.ticks_preempt_to_start =
    4624:	e9c8 9901 	strd	r9, r9, [r8, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    4628:	a361      	add	r3, pc, #388	; (adr r3, 47b0 <ull_slave_setup+0x418>)
    462a:	e9d3 2300 	ldrd	r2, r3, [r3]
    462e:	fba1 0100 	umull	r0, r1, r1, r0
    4632:	f7fc fa23 	bl	a7c <__aeabi_uldivmod>
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    4636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4638:	6a7e      	ldr	r6, [r7, #36]	; 0x24
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    463a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    463c:	1b9e      	subs	r6, r3, r6
	conn_offset_us = ftr->radio_end_us;
    463e:	68e3      	ldr	r3, [r4, #12]
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    4640:	f240 41e2 	movw	r1, #1250	; 0x4e2
    4644:	fb01 3302 	mla	r3, r1, r2, r3
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    4648:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us -= EVENT_JITTER_US;
    464c:	f203 3186 	addw	r1, r3, #902	; 0x386
	conn_offset_us -= ready_delay_us;
    4650:	1b4b      	subs	r3, r1, r5
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    4652:	464a      	mov	r2, r9
    4654:	2102      	movs	r1, #2
	conn->evt.ticks_slot =
    4656:	f8c8 000c 	str.w	r0, [r8, #12]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    465a:	2001      	movs	r0, #1
	conn_offset_us -= ready_delay_us;
    465c:	930a      	str	r3, [sp, #40]	; 0x28
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    465e:	f009 ff49 	bl	e4f4 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    4662:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    4664:	4628      	mov	r0, r5
    4666:	f00e fac1 	bl	12bec <ull_adv_handle_get>
    466a:	3002      	adds	r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    466c:	b2c2      	uxtb	r2, r0
    466e:	4b56      	ldr	r3, [pc, #344]	; (47c8 <ull_slave_setup+0x430>)
    4670:	9500      	str	r5, [sp, #0]
    4672:	4648      	mov	r0, r9
    4674:	2101      	movs	r1, #1
    4676:	f00b f93d 	bl	f8f4 <ticker_stop>
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    467a:	2801      	cmp	r0, #1
    467c:	f000 8082 	beq.w	4784 <ull_slave_setup+0x3ec>
	if (adv->lll.is_hdcd) {
    4680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4682:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    4686:	07db      	lsls	r3, r3, #31
    4688:	d469      	bmi.n	475e <ull_slave_setup+0x3c6>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    468a:	4640      	mov	r0, r8
    468c:	f00f f8d8 	bl	13840 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    4690:	f8df 9130 	ldr.w	r9, [pc, #304]	; 47c4 <ull_slave_setup+0x42c>
    4694:	fba6 5609 	umull	r5, r6, r6, r9
    4698:	a345      	add	r3, pc, #276	; (adr r3, 47b0 <ull_slave_setup+0x418>)
    469a:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    469e:	4683      	mov	fp, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    46a0:	4631      	mov	r1, r6
    46a2:	4628      	mov	r0, r5
    46a4:	f7fc f9ea 	bl	a7c <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    46a8:	68a3      	ldr	r3, [r4, #8]
    46aa:	f8cd 8018 	str.w	r8, [sp, #24]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    46ae:	f10b 0403 	add.w	r4, fp, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    46b2:	f1a3 0b31 	sub.w	fp, r3, #49	; 0x31
    46b6:	4b45      	ldr	r3, [pc, #276]	; (47cc <ull_slave_setup+0x434>)
    46b8:	9307      	str	r3, [sp, #28]
    46ba:	4b45      	ldr	r3, [pc, #276]	; (47d0 <ull_slave_setup+0x438>)
    46bc:	9305      	str	r3, [sp, #20]
    46be:	f240 13a1 	movw	r3, #417	; 0x1a1
    46c2:	9308      	str	r3, [sp, #32]
    46c4:	f8d8 300c 	ldr.w	r3, [r8, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    46c8:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
    46cc:	4841      	ldr	r0, [pc, #260]	; (47d4 <ull_slave_setup+0x43c>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    46ce:	f04f 0a00 	mov.w	sl, #0
    46d2:	e9cd a303 	strd	sl, r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    46d6:	fba7 0100 	umull	r0, r1, r7, r0
    46da:	2307      	movs	r3, #7
    46dc:	1a28      	subs	r0, r5, r0
    46de:	fb03 1107 	mla	r1, r3, r7, r1
    46e2:	eb66 0101 	sbc.w	r1, r6, r1
    46e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    46ea:	2300      	movs	r3, #0
    46ec:	f7fc f9c6 	bl	a7c <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    46f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    46f2:	e9cd 7001 	strd	r7, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    46f6:	fba3 0109 	umull	r0, r1, r3, r9
    46fa:	a32d      	add	r3, pc, #180	; (adr r3, 47b0 <ull_slave_setup+0x418>)
    46fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    4700:	f7fc f9bc 	bl	a7c <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    4704:	b2e4      	uxtb	r4, r4
    4706:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    470a:	9000      	str	r0, [sp, #0]
    470c:	465b      	mov	r3, fp
    470e:	4622      	mov	r2, r4
    4710:	2101      	movs	r1, #1
    4712:	4650      	mov	r0, sl
    4714:	f00b f864 	bl	f7e0 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4718:	f030 0302 	bics.w	r3, r0, #2
    471c:	d00c      	beq.n	4738 <ull_slave_setup+0x3a0>
    471e:	4a2e      	ldr	r2, [pc, #184]	; (47d8 <ull_slave_setup+0x440>)
    4720:	492e      	ldr	r1, [pc, #184]	; (47dc <ull_slave_setup+0x444>)
    4722:	482f      	ldr	r0, [pc, #188]	; (47e0 <ull_slave_setup+0x448>)
    4724:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
    4728:	f018 fc84 	bl	1d034 <printk>
    472c:	4040      	eors	r0, r0
    472e:	f380 8811 	msr	BASEPRI, r0
    4732:	f04f 0003 	mov.w	r0, #3
    4736:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    4738:	2201      	movs	r2, #1
    473a:	2102      	movs	r1, #2
    473c:	4610      	mov	r0, r2
    473e:	f009 fed9 	bl	e4f4 <mayfly_enable>
}
    4742:	b017      	add	sp, #92	; 0x5c
    4744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    4748:	4601      	mov	r1, r0
    474a:	2206      	movs	r2, #6
    474c:	4618      	mov	r0, r3
    474e:	f01a feee 	bl	1f52e <memset>
    4752:	e71b      	b.n	458c <ull_slave_setup+0x1f4>
		memset(cc->peer_rpa, 0x0, BDADDR_SIZE);
    4754:	2206      	movs	r2, #6
    4756:	2100      	movs	r1, #0
    4758:	f01a fee9 	bl	1f52e <memset>
    475c:	e720      	b.n	45a0 <ull_slave_setup+0x208>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    475e:	2300      	movs	r3, #0
    4760:	2201      	movs	r2, #1
    4762:	9300      	str	r3, [sp, #0]
    4764:	4618      	mov	r0, r3
    4766:	4611      	mov	r1, r2
    4768:	f00b f8c4 	bl	f8f4 <ticker_stop>
    476c:	e78d      	b.n	468a <ull_slave_setup+0x2f2>
			lll->data_chan_sel = 1;
    476e:	7f7b      	ldrb	r3, [r7, #29]
    4770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4774:	777b      	strb	r3, [r7, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    4776:	4658      	mov	r0, fp
    4778:	f011 fdb0 	bl	162dc <lll_chan_id>
			cs->csa = 0x01;
    477c:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    477e:	83f8      	strh	r0, [r7, #30]
			cs->csa = 0x01;
    4780:	772b      	strb	r3, [r5, #28]
    4782:	e739      	b.n	45f8 <ull_slave_setup+0x260>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    4784:	f00d fc74 	bl	12070 <ull_disable_mark_get>
    4788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    478a:	4283      	cmp	r3, r0
    478c:	f43f af78 	beq.w	4680 <ull_slave_setup+0x2e8>
    4790:	4a11      	ldr	r2, [pc, #68]	; (47d8 <ull_slave_setup+0x440>)
    4792:	4914      	ldr	r1, [pc, #80]	; (47e4 <ull_slave_setup+0x44c>)
    4794:	4812      	ldr	r0, [pc, #72]	; (47e0 <ull_slave_setup+0x448>)
    4796:	f240 2332 	movw	r3, #562	; 0x232
    479a:	f018 fc4b 	bl	1d034 <printk>
    479e:	4040      	eors	r0, r0
    47a0:	f380 8811 	msr	BASEPRI, r0
    47a4:	f04f 0003 	mov.w	r0, #3
    47a8:	df02      	svc	2
		  param == ull_disable_mark_get());
}
    47aa:	e769      	b.n	4680 <ull_slave_setup+0x2e8>
    47ac:	f3af 8000 	nop.w
    47b0:	1afd498d 	.word	0x1afd498d
    47b4:	00000007 	.word	0x00000007
    47b8:	431bde83 	.word	0x431bde83
    47bc:	026259ff 	.word	0x026259ff
    47c0:	01c9c37f 	.word	0x01c9c37f
    47c4:	3b9aca00 	.word	0x3b9aca00
    47c8:	0001606d 	.word	0x0001606d
    47cc:	0001603d 	.word	0x0001603d
    47d0:	000160a9 	.word	0x000160a9
    47d4:	1afd498d 	.word	0x1afd498d
    47d8:	000237b0 	.word	0x000237b0
    47dc:	00023668 	.word	0x00023668
    47e0:	000230b4 	.word	0x000230b4
    47e4:	00023808 	.word	0x00023808

000047e8 <ull_filter_reset>:
}
#endif /* CONFIG_BT_CTLR_PRIVACY */

void ull_filter_reset(bool init)
{
	wl_anon = 0U;
    47e8:	4a35      	ldr	r2, [pc, #212]	; (48c0 <ull_filter_reset+0xd8>)
    47ea:	4936      	ldr	r1, [pc, #216]	; (48c4 <ull_filter_reset+0xdc>)
{
    47ec:	b510      	push	{r4, lr}
	wl_anon = 0U;
    47ee:	2300      	movs	r3, #0
    47f0:	4c35      	ldr	r4, [pc, #212]	; (48c8 <ull_filter_reset+0xe0>)
    47f2:	7013      	strb	r3, [r2, #0]
#endif /* CONFIG_BT_CTLR_SW_DEFERRED_PRIVACY */

static void wl_clear(void)
{
	for (int i = 0; i < WL_SIZE; i++) {
		uint8_t j = wl[i].rl_idx;
    47f4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    47f8:	7852      	ldrb	r2, [r2, #1]

		if (j < ARRAY_SIZE(rl)) {
    47fa:	2a07      	cmp	r2, #7
			rl[j].wl = 0U;
    47fc:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
    4800:	d805      	bhi.n	480e <ull_filter_reset+0x26>
			rl[j].wl = 0U;
    4802:	f811 203c 	ldrb.w	r2, [r1, ip, lsl #3]
    4806:	f36f 1245 	bfc	r2, #5, #1
    480a:	f801 203c 	strb.w	r2, [r1, ip, lsl #3]
		}
		wl[i].taken = 0U;
    480e:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    4812:	f36f 0200 	bfc	r2, #0, #1
    4816:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
    481a:	3301      	adds	r3, #1
    481c:	2b08      	cmp	r3, #8
    481e:	d1e9      	bne.n	47f4 <ull_filter_reset+0xc>
	rl_enable = 0U;
    4820:	4a2a      	ldr	r2, [pc, #168]	; (48cc <ull_filter_reset+0xe4>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
    4822:	4c2b      	ldr	r4, [pc, #172]	; (48d0 <ull_filter_reset+0xe8>)
	rl_enable = 0U;
    4824:	2300      	movs	r3, #0
    4826:	7013      	strb	r3, [r2, #0]
#endif /* CONFIG_BT_BROADCASTER */

static void rl_clear(void)
{
	for (uint8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		rl[i].taken = 0U;
    4828:	780a      	ldrb	r2, [r1, #0]
    482a:	f363 0200 	bfi	r2, r3, #0, #1
    482e:	700a      	strb	r2, [r1, #0]
    4830:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
    4834:	f363 0200 	bfi	r2, r3, #0, #1
    4838:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
    483c:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    4840:	f363 0200 	bfi	r2, r3, #0, #1
    4844:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
    4848:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
    484c:	f363 0200 	bfi	r2, r3, #0, #1
    4850:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
    4854:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
    4858:	f363 0200 	bfi	r2, r3, #0, #1
    485c:	f881 20a0 	strb.w	r2, [r1, #160]	; 0xa0
    4860:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
    4864:	f363 0200 	bfi	r2, r3, #0, #1
    4868:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
    486c:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
    4870:	f363 0200 	bfi	r2, r3, #0, #1
    4874:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
    4878:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
    487c:	f363 0200 	bfi	r2, r3, #0, #1
    4880:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	}

	peer_irk_count = 0U;
    4884:	4a13      	ldr	r2, [pc, #76]	; (48d4 <ull_filter_reset+0xec>)
	rpa_last_ms = -1;
    4886:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 48b8 <ull_filter_reset+0xd0>
	peer_irk_count = 0U;
    488a:	7013      	strb	r3, [r2, #0]
	rpa_last_ms = -1;
    488c:	4b12      	ldr	r3, [pc, #72]	; (48d8 <ull_filter_reset+0xf0>)
    488e:	ed83 7b00 	vstr	d7, [r3]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
    4892:	4b12      	ldr	r3, [pc, #72]	; (48dc <ull_filter_reset+0xf4>)
    4894:	6023      	str	r3, [r4, #0]
	if (init) {
    4896:	b128      	cbz	r0, 48a4 <ull_filter_reset+0xbc>
}
    4898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/* to be deprecated */
static inline void k_delayed_work_init(struct k_delayed_work *work,
				       k_work_handler_t handler)
{
	k_work_init_delayable(&work->work, handler);
    489c:	4910      	ldr	r1, [pc, #64]	; (48e0 <ull_filter_reset+0xf8>)
    489e:	4811      	ldr	r0, [pc, #68]	; (48e4 <ull_filter_reset+0xfc>)
    48a0:	f01d bb7c 	b.w	21f9c <k_work_init_delayable>
	return k_work_delayable_busy_get(dwork) != 0;
    48a4:	480f      	ldr	r0, [pc, #60]	; (48e4 <ull_filter_reset+0xfc>)
    48a6:	f01d fb85 	bl	21fb4 <k_work_delayable_busy_get>
    48aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/* to be deprecated */
static inline int k_delayed_work_cancel(struct k_delayed_work *work)
{
	bool pending = k_work_delayable_is_pending(&work->work);
	int rc = k_work_cancel_delayable(&work->work);
    48ae:	480d      	ldr	r0, [pc, #52]	; (48e4 <ull_filter_reset+0xfc>)
    48b0:	f01d bb94 	b.w	21fdc <k_work_cancel_delayable>
    48b4:	f3af 8000 	nop.w
    48b8:	ffffffff 	.word	0xffffffff
    48bc:	ffffffff 	.word	0xffffffff
    48c0:	20003563 	.word	0x20003563
    48c4:	200025ec 	.word	0x200025ec
    48c8:	20002764 	.word	0x20002764
    48cc:	20003562 	.word	0x20003562
    48d0:	20002760 	.word	0x20002760
    48d4:	20003561 	.word	0x20003561
    48d8:	200013f8 	.word	0x200013f8
    48dc:	000dbba0 	.word	0x000dbba0
    48e0:	00016de5 	.word	0x00016de5
    48e4:	20001400 	.word	0x20001400

000048e8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    48e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    48ec:	ed2d 8b02 	vpush	{d8}
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    48f0:	ed9f 8b47 	vldr	d8, [pc, #284]	; 4a10 <work_queue_main+0x128>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    48f4:	4f48      	ldr	r7, [pc, #288]	; (4a18 <work_queue_main+0x130>)
{
    48f6:	b084      	sub	sp, #16
    48f8:	4604      	mov	r4, r0
		} else if (flag_test_and_clear(&queue->flags,
    48fa:	f100 06e0 	add.w	r6, r0, #224	; 0xe0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    48fe:	f04f 0320 	mov.w	r3, #32
    4902:	f3ef 8811 	mrs	r8, BASEPRI
    4906:	f383 8811 	msr	BASEPRI, r3
    490a:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    490e:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    4912:	b9c5      	cbnz	r5, 4946 <work_queue_main+0x5e>
    4914:	2102      	movs	r1, #2
    4916:	4630      	mov	r0, r6
    4918:	f01d faaa 	bl	21e70 <flag_test_and_clear>
    491c:	b140      	cbz	r0, 4930 <work_queue_main+0x48>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    491e:	f104 05d8 	add.w	r5, r4, #216	; 0xd8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    4922:	2200      	movs	r2, #0
    4924:	2101      	movs	r1, #1
    4926:	4628      	mov	r0, r5
    4928:	f01d fa64 	bl	21df4 <z_sched_wake>
    492c:	2800      	cmp	r0, #0
    492e:	d1f8      	bne.n	4922 <work_queue_main+0x3a>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    4930:	2300      	movs	r3, #0
    4932:	ed8d 8b00 	vstr	d8, [sp]
    4936:	9302      	str	r3, [sp, #8]
    4938:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
    493c:	4641      	mov	r1, r8
    493e:	4638      	mov	r0, r7
    4940:	f017 fc1c 	bl	1c17c <z_sched_wait>
			continue;
    4944:	e7db      	b.n	48fe <work_queue_main+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4946:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
	return node->next;
    494a:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    494c:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4950:	4295      	cmp	r5, r2
    4952:	d101      	bne.n	4958 <work_queue_main+0x70>
	list->tail = node;
    4954:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	*flagp |= BIT(bit);
    4958:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    495c:	f043 0302 	orr.w	r3, r3, #2
    4960:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    4964:	f388 8811 	msr	BASEPRI, r8
    4968:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		if (work != NULL) {
			bool yield;
			k_work_handler_t handler = work->handler;
    496c:	f8d5 8004 	ldr.w	r8, [r5, #4]
	__asm__ volatile(
    4970:	f04f 0320 	mov.w	r3, #32
    4974:	f3ef 8a11 	mrs	sl, BASEPRI
    4978:	f383 8811 	msr	BASEPRI, r3
    497c:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    4980:	68eb      	ldr	r3, [r5, #12]
    4982:	f023 0304 	bic.w	r3, r3, #4
	return (*flagp & BIT(bit)) != 0U;
    4986:	f3c3 0240 	ubfx	r2, r3, #1, #1
	*flagp &= ~BIT(bit);
    498a:	60eb      	str	r3, [r5, #12]
	if (ret) {
    498c:	f082 0901 	eor.w	r9, r2, #1
    4990:	b11a      	cbz	r2, 499a <work_queue_main+0xb2>
		finalize_cancel_locked(work);
    4992:	4628      	mov	r0, r5
    4994:	f017 fd24 	bl	1c3e0 <finalize_cancel_locked>
    4998:	e002      	b.n	49a0 <work_queue_main+0xb8>
	*flagp |= BIT(bit);
    499a:	f043 0301 	orr.w	r3, r3, #1
    499e:	60eb      	str	r3, [r5, #12]
	__asm__ volatile(
    49a0:	f38a 8811 	msr	BASEPRI, sl
    49a4:	f3bf 8f6f 	isb	sy

			__ASSERT_NO_MSG(handler != 0);

			if (work_set_running(work, queue)) {
    49a8:	f1b9 0f00 	cmp.w	r9, #0
    49ac:	d116      	bne.n	49dc <work_queue_main+0xf4>
	__asm__ volatile(
    49ae:	f04f 0320 	mov.w	r3, #32
    49b2:	f3ef 8211 	mrs	r2, BASEPRI
    49b6:	f383 8811 	msr	BASEPRI, r3
    49ba:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    49be:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    49c2:	f023 0302 	bic.w	r3, r3, #2
    49c6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	__asm__ volatile(
    49ca:	f382 8811 	msr	BASEPRI, r2
    49ce:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
    49d2:	05db      	lsls	r3, r3, #23
    49d4:	d493      	bmi.n	48fe <work_queue_main+0x16>
	z_impl_k_yield();
    49d6:	f017 fac3 	bl	1bf60 <z_impl_k_yield>
}
    49da:	e790      	b.n	48fe <work_queue_main+0x16>
				handler(work);
    49dc:	4628      	mov	r0, r5
    49de:	47c0      	blx	r8
	__asm__ volatile(
    49e0:	f04f 0320 	mov.w	r3, #32
    49e4:	f3ef 8811 	mrs	r8, BASEPRI
    49e8:	f383 8811 	msr	BASEPRI, r3
    49ec:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    49f0:	68eb      	ldr	r3, [r5, #12]
    49f2:	f023 0301 	bic.w	r3, r3, #1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    49f6:	079a      	lsls	r2, r3, #30
	*flagp &= ~BIT(bit);
    49f8:	60eb      	str	r3, [r5, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    49fa:	d502      	bpl.n	4a02 <work_queue_main+0x11a>
		finalize_cancel_locked(work);
    49fc:	4628      	mov	r0, r5
    49fe:	f017 fcef 	bl	1c3e0 <finalize_cancel_locked>
	__asm__ volatile(
    4a02:	f388 8811 	msr	BASEPRI, r8
    4a06:	f3bf 8f6f 	isb	sy
}
    4a0a:	e7d0      	b.n	49ae <work_queue_main+0xc6>
    4a0c:	f3af 8000 	nop.w
    4a10:	ffffffff 	.word	0xffffffff
    4a14:	ffffffff 	.word	0xffffffff
    4a18:	2000356c 	.word	0x2000356c

00004a1c <disconnected>:
        }
    }

    static void disconnected(struct bt_conn *conn, uint8_t reason)
    {
        printk("Disconnected (reason 0x%02x)\n", reason);
    4a1c:	4801      	ldr	r0, [pc, #4]	; (4a24 <disconnected+0x8>)
    4a1e:	f018 bb09 	b.w	1d034 <printk>
    4a22:	bf00      	nop
    4a24:	00023f92 	.word	0x00023f92

00004a28 <connected>:
        if (err) {
    4a28:	b111      	cbz	r1, 4a30 <connected+0x8>
            printk("Connection failed (err 0x%02x)\n", err);
    4a2a:	4803      	ldr	r0, [pc, #12]	; (4a38 <connected+0x10>)
    4a2c:	f018 bb02 	b.w	1d034 <printk>
            printk("Connected\n");
    4a30:	4802      	ldr	r0, [pc, #8]	; (4a3c <connected+0x14>)
    4a32:	f018 baff 	b.w	1d034 <printk>
    4a36:	bf00      	nop
    4a38:	00023fb0 	.word	0x00023fb0
    4a3c:	00023fd0 	.word	0x00023fd0

00004a40 <ble_init>:

extern void ble_notify(double, double, double);
extern void dw_init(void);
#define NUM_ANCHOR 3

void ble_init(){
    4a40:	b570      	push	{r4, r5, r6, lr}
    int err;

	err = bt_enable(NULL);
    4a42:	2000      	movs	r0, #0
void ble_init(){
    4a44:	b088      	sub	sp, #32
	err = bt_enable(NULL);
    4a46:	f004 fad7 	bl	8ff8 <bt_enable>
	if (err) {
    4a4a:	4606      	mov	r6, r0
    4a4c:	b130      	cbz	r0, 4a5c <ble_init+0x1c>
		printk("Bluetooth init failed (err %d)\n", err);
    4a4e:	4601      	mov	r1, r0
    4a50:	4812      	ldr	r0, [pc, #72]	; (4a9c <ble_init+0x5c>)
	bt_ready();
	
	bt_conn_cb_register(&conn_callbacks);
	
	
}
    4a52:	b008      	add	sp, #32
    4a54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Bluetooth init failed (err %d)\n", err);
    4a58:	f018 baec 	b.w	1d034 <printk>

        if (IS_ENABLED(CONFIG_SETTINGS)) {
            settings_load();
        }

        err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    4a5c:	4d10      	ldr	r5, [pc, #64]	; (4aa0 <ble_init+0x60>)
        printk("Bluetooth initialized\n");
    4a5e:	4811      	ldr	r0, [pc, #68]	; (4aa4 <ble_init+0x64>)
    4a60:	f018 fae8 	bl	1d034 <printk>
        err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    4a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4a66:	ac03      	add	r4, sp, #12
    4a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4a6a:	682b      	ldr	r3, [r5, #0]
    4a6c:	6023      	str	r3, [r4, #0]
    4a6e:	490e      	ldr	r1, [pc, #56]	; (4aa8 <ble_init+0x68>)
    4a70:	9600      	str	r6, [sp, #0]
    4a72:	4633      	mov	r3, r6
    4a74:	2203      	movs	r2, #3
    4a76:	a803      	add	r0, sp, #12
    4a78:	f005 f938 	bl	9cec <bt_le_adv_start>
        if (err) {
    4a7c:	4601      	mov	r1, r0
    4a7e:	b140      	cbz	r0, 4a92 <ble_init+0x52>
            printk("Advertising failed to start (err %d)\n", err);
    4a80:	480a      	ldr	r0, [pc, #40]	; (4aac <ble_init+0x6c>)
    4a82:	f018 fad7 	bl	1d034 <printk>
	bt_conn_cb_register(&conn_callbacks);
    4a86:	480a      	ldr	r0, [pc, #40]	; (4ab0 <ble_init+0x70>)
}
    4a88:	b008      	add	sp, #32
    4a8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_cb_register(&conn_callbacks);
    4a8e:	f005 bc15 	b.w	a2bc <bt_conn_cb_register>
            return;
        }

        printk("Advertising successfully started\n");
    4a92:	4808      	ldr	r0, [pc, #32]	; (4ab4 <ble_init+0x74>)
    4a94:	f018 face 	bl	1d034 <printk>
    4a98:	e7f5      	b.n	4a86 <ble_init+0x46>
    4a9a:	bf00      	nop
    4a9c:	00023fdb 	.word	0x00023fdb
    4aa0:	00022790 	.word	0x00022790
    4aa4:	00023ffb 	.word	0x00023ffb
    4aa8:	00022868 	.word	0x00022868
    4aac:	00024012 	.word	0x00024012
    4ab0:	20000138 	.word	0x20000138
    4ab4:	00024038 	.word	0x00024038

00004ab8 <main>:
	dw_init();
}

double dist1;
int cnt = 0;
void main(){
    4ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4abc:	ed2d 8b08 	vpush	{d8-d11}
	// Ble init and Advertisement	
	ble_init();

	double dist1_sum = 0.0, dist1_c;
	double dist2_sum = 0.0, dist2_c;
	double dist3_sum = 0.0, dist3_c;
    4ac0:	f04f 0a00 	mov.w	sl, #0
void main(){
    4ac4:	b085      	sub	sp, #20
	double dist3_sum = 0.0, dist3_c;
    4ac6:	f04f 0b00 	mov.w	fp, #0
	dw_init();
    4aca:	f000 f8b1 	bl	4c30 <dw_init>
	ble_init();
    4ace:	f7ff ffb7 	bl	4a40 <ble_init>
	double dist2_sum = 0.0, dist2_c;
    4ad2:	e9cd ab02 	strd	sl, fp, [sp, #8]
	double dist1_sum = 0.0, dist1_c;
    4ad6:	e9cd ab00 	strd	sl, fp, [sp]
	int cnt1 = 0;
	int cnt2 = 0;
	int cnt3 = 0;
    4ada:	2400      	movs	r4, #0
		cnt1 = 0;
		cnt2 = 0;
		cnt3 = 0;
		dist1_sum = 0.0;
		dist2_sum = 0.0;
		dist3_sum = 0.0;
    4adc:	ec4b ab1b 	vmov	d11, sl, fp
		dist2_sum = 0.0;
    4ae0:	ec4b ab1a 	vmov	d10, sl, fp
	int cnt2 = 0;
    4ae4:	4626      	mov	r6, r4
	int cnt1 = 0;
    4ae6:	4625      	mov	r5, r4
		while (cnt < 3){
    4ae8:	4f42      	ldr	r7, [pc, #264]	; (4bf4 <main+0x13c>)
    4aea:	683b      	ldr	r3, [r7, #0]
    4aec:	2b02      	cmp	r3, #2
    4aee:	dd39      	ble.n	4b64 <main+0xac>
	return z_impl_k_sleep(timeout);
    4af0:	2100      	movs	r1, #0
    4af2:	2021      	movs	r0, #33	; 0x21
    4af4:	f017 fac0 	bl	1c078 <z_impl_k_sleep>
		ble_notify(dist1_sum/(double)cnt1, dist2_sum/(double)cnt2, dist3_sum/(double)cnt3);
    4af8:	4620      	mov	r0, r4
    4afa:	f7fb fc43 	bl	384 <__aeabi_i2d>
    4afe:	4602      	mov	r2, r0
    4b00:	460b      	mov	r3, r1
    4b02:	4650      	mov	r0, sl
    4b04:	4659      	mov	r1, fp
    4b06:	f7fb fdd1 	bl	6ac <__aeabi_ddiv>
    4b0a:	ec41 0b19 	vmov	d9, r0, r1
    4b0e:	4630      	mov	r0, r6
    4b10:	f7fb fc38 	bl	384 <__aeabi_i2d>
    4b14:	4602      	mov	r2, r0
    4b16:	460b      	mov	r3, r1
    4b18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    4b1c:	f7fb fdc6 	bl	6ac <__aeabi_ddiv>
    4b20:	ec41 0b18 	vmov	d8, r0, r1
    4b24:	4628      	mov	r0, r5
    4b26:	f7fb fc2d 	bl	384 <__aeabi_i2d>
    4b2a:	4602      	mov	r2, r0
    4b2c:	460b      	mov	r3, r1
    4b2e:	e9dd 0100 	ldrd	r0, r1, [sp]
    4b32:	f7fb fdbb 	bl	6ac <__aeabi_ddiv>
    4b36:	eeb0 2a49 	vmov.f32	s4, s18
    4b3a:	eef0 2a69 	vmov.f32	s5, s19
    4b3e:	eeb0 1a48 	vmov.f32	s2, s16
    4b42:	eef0 1a68 	vmov.f32	s3, s17
		cnt = 0;
    4b46:	2400      	movs	r4, #0
		ble_notify(dist1_sum/(double)cnt1, dist2_sum/(double)cnt2, dist3_sum/(double)cnt3);
    4b48:	ec41 0b10 	vmov	d0, r0, r1
    4b4c:	f7fc f91c 	bl	d88 <ble_notify>
		dist3_sum = 0.0;
    4b50:	ec5b ab1b 	vmov	sl, fp, d11
		dist2_sum = 0.0;
    4b54:	ed8d ab02 	vstr	d10, [sp, #8]
		dist1_sum = 0.0;
    4b58:	ed8d ab00 	vstr	d10, [sp]
		cnt = 0;
    4b5c:	603c      	str	r4, [r7, #0]
		cnt2 = 0;
    4b5e:	4626      	mov	r6, r4
		cnt1 = 0;
    4b60:	4625      	mov	r5, r4
	{	
    4b62:	e7c1      	b.n	4ae8 <main+0x30>
			dist1_c = dw_main(1);
    4b64:	2001      	movs	r0, #1
    4b66:	f7fc f9bf 	bl	ee8 <dw_main>
    4b6a:	ec59 8b10 	vmov	r8, r9, d0
			if (dist1_c > -1.){
    4b6e:	4b22      	ldr	r3, [pc, #136]	; (4bf8 <main+0x140>)
    4b70:	ee10 0a10 	vmov	r0, s0
    4b74:	2200      	movs	r2, #0
    4b76:	4649      	mov	r1, r9
    4b78:	f7fb fefe 	bl	978 <__aeabi_dcmpgt>
    4b7c:	b140      	cbz	r0, 4b90 <main+0xd8>
				dist1_sum += dist1_c;
    4b7e:	e9dd 0100 	ldrd	r0, r1, [sp]
    4b82:	4642      	mov	r2, r8
    4b84:	464b      	mov	r3, r9
    4b86:	f7fb fab1 	bl	ec <__adddf3>
    4b8a:	e9cd 0100 	strd	r0, r1, [sp]
				cnt1++;
    4b8e:	3501      	adds	r5, #1
			dist2_c = dw_main(2);
    4b90:	2002      	movs	r0, #2
    4b92:	f7fc f9a9 	bl	ee8 <dw_main>
    4b96:	ec59 8b10 	vmov	r8, r9, d0
			if (dist2_c > -1.){
    4b9a:	4b17      	ldr	r3, [pc, #92]	; (4bf8 <main+0x140>)
    4b9c:	ee10 0a10 	vmov	r0, s0
    4ba0:	2200      	movs	r2, #0
    4ba2:	4649      	mov	r1, r9
    4ba4:	f7fb fee8 	bl	978 <__aeabi_dcmpgt>
    4ba8:	b140      	cbz	r0, 4bbc <main+0x104>
				dist2_sum += dist2_c;
    4baa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    4bae:	4642      	mov	r2, r8
    4bb0:	464b      	mov	r3, r9
    4bb2:	f7fb fa9b 	bl	ec <__adddf3>
    4bb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
				cnt2++;
    4bba:	3601      	adds	r6, #1
			dist3_c = dw_main(3);
    4bbc:	2003      	movs	r0, #3
    4bbe:	f7fc f993 	bl	ee8 <dw_main>
    4bc2:	ec59 8b10 	vmov	r8, r9, d0
			if (dist3_c > -1.){
    4bc6:	4b0c      	ldr	r3, [pc, #48]	; (4bf8 <main+0x140>)
    4bc8:	ee10 0a10 	vmov	r0, s0
    4bcc:	2200      	movs	r2, #0
    4bce:	4649      	mov	r1, r9
    4bd0:	f7fb fed2 	bl	978 <__aeabi_dcmpgt>
    4bd4:	b140      	cbz	r0, 4be8 <main+0x130>
				dist3_sum += dist3_c;
    4bd6:	4650      	mov	r0, sl
    4bd8:	4659      	mov	r1, fp
    4bda:	4642      	mov	r2, r8
    4bdc:	464b      	mov	r3, r9
    4bde:	f7fb fa85 	bl	ec <__adddf3>
				cnt3++;
    4be2:	3401      	adds	r4, #1
				dist3_sum += dist3_c;
    4be4:	4682      	mov	sl, r0
    4be6:	468b      	mov	fp, r1
			cnt++;
    4be8:	4a02      	ldr	r2, [pc, #8]	; (4bf4 <main+0x13c>)
    4bea:	6813      	ldr	r3, [r2, #0]
    4bec:	3301      	adds	r3, #1
    4bee:	6013      	str	r3, [r2, #0]
    4bf0:	e77a      	b.n	4ae8 <main+0x30>
    4bf2:	bf00      	nop
    4bf4:	200016b0 	.word	0x200016b0
    4bf8:	bff00000 	.word	0xbff00000

00004bfc <read_vnd>:
    {
    4bfc:	b570      	push	{r4, r5, r6, lr}
    4bfe:	4605      	mov	r5, r0
    4c00:	b086      	sub	sp, #24
                    strlen(vnd_value));
    4c02:	480a      	ldr	r0, [pc, #40]	; (4c2c <read_vnd+0x30>)
        const char *value = attr->user_data;
    4c04:	68ce      	ldr	r6, [r1, #12]
    {
    4c06:	460c      	mov	r4, r1
    4c08:	e9cd 3204 	strd	r3, r2, [sp, #16]
                    strlen(vnd_value));
    4c0c:	f01a fc37 	bl	1f47e <strlen>
        return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    4c10:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
    4c14:	9100      	str	r1, [sp, #0]
    4c16:	b280      	uxth	r0, r0
    4c18:	e9cd 6001 	strd	r6, r0, [sp, #4]
    4c1c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
    4c20:	4621      	mov	r1, r4
    4c22:	4628      	mov	r0, r5
    4c24:	f01c f827 	bl	20c76 <bt_gatt_attr_read>
    }
    4c28:	b006      	add	sp, #24
    4c2a:	bd70      	pop	{r4, r5, r6, pc}
    4c2c:	2000077a 	.word	0x2000077a

00004c30 <dw_init>:
void dw_init(void){
    4c30:	b508      	push	{r3, lr}
    printk(APP_NAME);
    4c32:	4818      	ldr	r0, [pc, #96]	; (4c94 <dw_init+0x64>)
    4c34:	f018 f9fe 	bl	1d034 <printk>
    openspi();
    4c38:	f000 fa72 	bl	5120 <openspi>
    reset_DW1000(); 
    4c3c:	f018 f956 	bl	1ceec <reset_DW1000>
    port_set_dw1000_slowrate();
    4c40:	f018 f972 	bl	1cf28 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR) {
    4c44:	2001      	movs	r0, #1
    4c46:	f000 f9f9 	bl	503c <dwt_initialise>
    4c4a:	3001      	adds	r0, #1
    4c4c:	d108      	bne.n	4c60 <dw_init+0x30>
        printk("INIT FAILED");
    4c4e:	4812      	ldr	r0, [pc, #72]	; (4c98 <dw_init+0x68>)
    4c50:	f018 f9f0 	bl	1d034 <printk>
    4c54:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    4c58:	2100      	movs	r1, #0
    4c5a:	f017 fa0d 	bl	1c078 <z_impl_k_sleep>
        while (1) { };
    4c5e:	e7fe      	b.n	4c5e <dw_init+0x2e>
    port_set_dw1000_fastrate();
    4c60:	f018 f968 	bl	1cf34 <port_set_dw1000_fastrate>
    dwt_configure(&config);
    4c64:	480d      	ldr	r0, [pc, #52]	; (4c9c <dw_init+0x6c>)
    4c66:	f000 f829 	bl	4cbc <dwt_configure>
    dwt_setleds(1);
    4c6a:	2001      	movs	r0, #1
    4c6c:	f000 f928 	bl	4ec0 <dwt_setleds>
    dwt_setrxantennadelay(RX_ANT_DLY);
    4c70:	f244 0048 	movw	r0, #16456	; 0x4048
    4c74:	f018 f801 	bl	1cc7a <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
    4c78:	f643 70ac 	movw	r0, #16300	; 0x3fac
    4c7c:	f018 f803 	bl	1cc86 <dwt_settxantennadelay>
    dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS);
    4c80:	2064      	movs	r0, #100	; 0x64
    4c82:	f018 f852 	bl	1cd2a <dwt_setrxaftertxdelay>
}
    4c86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dwt_setrxtimeout(65000);
    4c8a:	f64f 50e8 	movw	r0, #65000	; 0xfde8
    4c8e:	f000 b98b 	b.w	4fa8 <dwt_setrxtimeout>
    4c92:	bf00      	nop
    4c94:	0002405a 	.word	0x0002405a
    4c98:	0002406c 	.word	0x0002406c
    4c9c:	20000660 	.word	0x20000660

00004ca0 <dwt_writetxfctrl>:
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | (txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | (ranging << TX_FCTRL_TR_SHFT);
    4ca0:	4b05      	ldr	r3, [pc, #20]	; (4cb8 <dwt_writetxfctrl+0x18>)
    4ca2:	681b      	ldr	r3, [r3, #0]
    4ca4:	68db      	ldr	r3, [r3, #12]
    4ca6:	ea43 32c2 	orr.w	r2, r3, r2, lsl #15
    4caa:	4302      	orrs	r2, r0
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
    4cac:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
    4cb0:	2008      	movs	r0, #8
    4cb2:	2100      	movs	r1, #0
    4cb4:	f017 bfec 	b.w	1cc90 <dwt_write32bitoffsetreg>
    4cb8:	20000180 	.word	0x20000180

00004cbc <dwt_configure>:
{
    4cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8 chan = config->chan ;
    4cc0:	7806      	ldrb	r6, [r0, #0]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
    4cc2:	7847      	ldrb	r7, [r0, #1]
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
    4cc4:	7942      	ldrb	r2, [r0, #5]
    4cc6:	4b72      	ldr	r3, [pc, #456]	; (4e90 <dwt_configure+0x1d4>)
    uint8 prfIndex = config->prf - DWT_PRF_16M;
    4cc8:	3f01      	subs	r7, #1
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
    4cca:	2e04      	cmp	r6, #4
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
    4ccc:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
{
    4cd0:	4604      	mov	r4, r0
    uint8 prfIndex = config->prf - DWT_PRF_16M;
    4cd2:	b2ff      	uxtb	r7, r7
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
    4cd4:	f000 80be 	beq.w	4e54 <dwt_configure+0x198>
    4cd8:	1ff3      	subs	r3, r6, #7
    4cda:	f1d3 0900 	rsbs	r9, r3, #0
    4cde:	eb49 0903 	adc.w	r9, r9, r3
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
    4ce2:	4d6c      	ldr	r5, [pc, #432]	; (4e94 <dwt_configure+0x1d8>)
    if(DWT_BR_110K == config->dataRate)
    4ce4:	79e1      	ldrb	r1, [r4, #7]
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
    4ce6:	682b      	ldr	r3, [r5, #0]
    4ce8:	695a      	ldr	r2, [r3, #20]
    if(DWT_BR_110K == config->dataRate)
    4cea:	2900      	cmp	r1, #0
    4cec:	f040 80b5 	bne.w	4e5a <dwt_configure+0x19e>
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
    4cf0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
    4cf4:	615a      	str	r2, [r3, #20]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
    4cf6:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    pdw1000local->longFrames = config->phrMode ;
    4cfa:	7a21      	ldrb	r1, [r4, #8]
    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
    4cfc:	695a      	ldr	r2, [r3, #20]
    pdw1000local->longFrames = config->phrMode ;
    4cfe:	7219      	strb	r1, [r3, #8]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & (config->phrMode << SYS_CFG_PHR_MODE_SHFT));
    4d00:	0409      	lsls	r1, r1, #16
    4d02:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
    4d06:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & (config->phrMode << SYS_CFG_PHR_MODE_SHFT));
    4d0a:	430a      	orrs	r2, r1
    4d0c:	615a      	str	r2, [r3, #20]
    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
    4d0e:	2100      	movs	r1, #0
    4d10:	2004      	movs	r0, #4
    4d12:	f017 ffbd 	bl	1cc90 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
    4d16:	4642      	mov	r2, r8
    4d18:	f642 0104 	movw	r1, #10244	; 0x2804
    4d1c:	202e      	movs	r0, #46	; 0x2e
    4d1e:	f017 ff9d 	bl	1cc5c <dwt_write16bitoffsetreg>
    _dwt_configlde(prfIndex);
    4d22:	4638      	mov	r0, r7
    4d24:	f017 ffec 	bl	1cd00 <_dwt_configlde>
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
    4d28:	4b5b      	ldr	r3, [pc, #364]	; (4e98 <dwt_configure+0x1dc>)
    4d2a:	f813 8006 	ldrb.w	r8, [r3, r6]
    4d2e:	4b5b      	ldr	r3, [pc, #364]	; (4e9c <dwt_configure+0x1e0>)
    4d30:	2107      	movs	r1, #7
    4d32:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    4d36:	202b      	movs	r0, #43	; 0x2b
    4d38:	f017 ffaa 	bl	1cc90 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
    4d3c:	4b58      	ldr	r3, [pc, #352]	; (4ea0 <dwt_configure+0x1e4>)
    4d3e:	210b      	movs	r1, #11
    4d40:	f813 2008 	ldrb.w	r2, [r3, r8]
    4d44:	202b      	movs	r0, #43	; 0x2b
    4d46:	f017 ff7c 	bl	1cc42 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
    4d4a:	4b56      	ldr	r3, [pc, #344]	; (4ea4 <dwt_configure+0x1e8>)
    4d4c:	210b      	movs	r1, #11
    4d4e:	f813 2009 	ldrb.w	r2, [r3, r9]
    4d52:	2028      	movs	r0, #40	; 0x28
    4d54:	f017 ff75 	bl	1cc42 <dwt_write8bitoffsetreg>
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
    4d58:	4b53      	ldr	r3, [pc, #332]	; (4ea8 <dwt_configure+0x1ec>)
    4d5a:	210c      	movs	r1, #12
    4d5c:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    4d60:	2028      	movs	r0, #40	; 0x28
    4d62:	f017 ff95 	bl	1cc90 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
    4d66:	79e2      	ldrb	r2, [r4, #7]
    4d68:	79a3      	ldrb	r3, [r4, #6]
    4d6a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    4d6e:	4a4f      	ldr	r2, [pc, #316]	; (4eac <dwt_configure+0x1f0>)
    4d70:	2102      	movs	r1, #2
    4d72:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    4d76:	2027      	movs	r0, #39	; 0x27
    4d78:	f017 ff70 	bl	1cc5c <dwt_write16bitoffsetreg>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
    4d7c:	4b4c      	ldr	r3, [pc, #304]	; (4eb0 <dwt_configure+0x1f4>)
    4d7e:	2104      	movs	r1, #4
    4d80:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
    4d84:	2027      	movs	r0, #39	; 0x27
    4d86:	f017 ff69 	bl	1cc5c <dwt_write16bitoffsetreg>
    if(config->dataRate == DWT_BR_110K)
    4d8a:	79e3      	ldrb	r3, [r4, #7]
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	d168      	bne.n	4e62 <dwt_configure+0x1a6>
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
    4d90:	2264      	movs	r2, #100	; 0x64
    4d92:	2106      	movs	r1, #6
    4d94:	2027      	movs	r0, #39	; 0x27
    4d96:	f017 ff61 	bl	1cc5c <dwt_write16bitoffsetreg>
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
    4d9a:	78e3      	ldrb	r3, [r4, #3]
    4d9c:	4a45      	ldr	r2, [pc, #276]	; (4eb4 <dwt_configure+0x1f8>)
    4d9e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    4da2:	2108      	movs	r1, #8
    4da4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4da8:	2027      	movs	r0, #39	; 0x27
    4daa:	f017 ff71 	bl	1cc90 <dwt_write32bitoffsetreg>
    if(config->sfdTO == 0)
    4dae:	8963      	ldrh	r3, [r4, #10]
    4db0:	b913      	cbnz	r3, 4db8 <dwt_configure+0xfc>
        config->sfdTO = DWT_SFDTOC_DEF;
    4db2:	f241 0341 	movw	r3, #4161	; 0x1041
    4db6:	8163      	strh	r3, [r4, #10]
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
    4db8:	f8df 8100 	ldr.w	r8, [pc, #256]	; 4ebc <dwt_configure+0x200>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
    4dbc:	8962      	ldrh	r2, [r4, #10]
    4dbe:	2120      	movs	r1, #32
    4dc0:	2027      	movs	r0, #39	; 0x27
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
    4dc2:	eb08 0747 	add.w	r7, r8, r7, lsl #1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
    4dc6:	f017 ff49 	bl	1cc5c <dwt_write16bitoffsetreg>
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
    4dca:	f8d8 2000 	ldr.w	r2, [r8]
    4dce:	210c      	movs	r1, #12
    4dd0:	2023      	movs	r0, #35	; 0x23
    4dd2:	f017 ff5d 	bl	1cc90 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
    4dd6:	2023      	movs	r0, #35	; 0x23
    4dd8:	88ba      	ldrh	r2, [r7, #4]
    4dda:	2104      	movs	r1, #4
    4ddc:	f017 ff3e 	bl	1cc5c <dwt_write16bitoffsetreg>
    if(config->nsSFD)
    4de0:	79a0      	ldrb	r0, [r4, #6]
    4de2:	2800      	cmp	r0, #0
    4de4:	d052      	beq.n	4e8c <dwt_configure+0x1d0>
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
    4de6:	79e3      	ldrb	r3, [r4, #7]
    4de8:	4a33      	ldr	r2, [pc, #204]	; (4eb8 <dwt_configure+0x1fc>)
    4dea:	2021      	movs	r0, #33	; 0x21
    4dec:	5cd2      	ldrb	r2, [r2, r3]
    4dee:	2100      	movs	r1, #0
    4df0:	f017 ff27 	bl	1cc42 <dwt_write8bitoffsetreg>
        useDWnsSFD = 1 ;
    4df4:	2201      	movs	r2, #1
        nsSfd_result = 3 ;
    4df6:	2003      	movs	r0, #3
              (CHAN_CTRL_RX_PCOD_MASK & (config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
    4df8:	7961      	ldrb	r1, [r4, #5]
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
    4dfa:	f006 030f 	and.w	r3, r6, #15
    4dfe:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
              (CHAN_CTRL_RXFPRF_MASK & (config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
    4e02:	7861      	ldrb	r1, [r4, #1]
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
    4e04:	0136      	lsls	r6, r6, #4
    4e06:	b2f6      	uxtb	r6, r6
              (CHAN_CTRL_RXFPRF_MASK & (config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
    4e08:	0489      	lsls	r1, r1, #18
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
    4e0a:	4333      	orrs	r3, r6
              (CHAN_CTRL_RXFPRF_MASK & (config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
    4e0c:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
    4e10:	430b      	orrs	r3, r1
              (CHAN_CTRL_TX_PCOD_MASK & (config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
    4e12:	7921      	ldrb	r1, [r4, #4]
    4e14:	0589      	lsls	r1, r1, #22
    4e16:	f001 61f8 	and.w	r1, r1, #130023424	; 0x7c00000
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
    4e1a:	430b      	orrs	r3, r1
    4e1c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
    4e20:	ea43 4242 	orr.w	r2, r3, r2, lsl #17
    4e24:	2100      	movs	r1, #0
    4e26:	201f      	movs	r0, #31
    4e28:	f017 ff32 	bl	1cc90 <dwt_write32bitoffsetreg>
    pdw1000local->txFCTRL = ((config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | (config->dataRate << TX_FCTRL_TXBR_SHFT);
    4e2c:	78a2      	ldrb	r2, [r4, #2]
    4e2e:	7863      	ldrb	r3, [r4, #1]
    4e30:	4313      	orrs	r3, r2
    4e32:	79e2      	ldrb	r2, [r4, #7]
    4e34:	0352      	lsls	r2, r2, #13
    4e36:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    4e3a:	682b      	ldr	r3, [r5, #0]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
    4e3c:	2100      	movs	r1, #0
    pdw1000local->txFCTRL = ((config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | (config->dataRate << TX_FCTRL_TXBR_SHFT);
    4e3e:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
    4e40:	2008      	movs	r0, #8
    4e42:	f017 ff25 	bl	1cc90 <dwt_write32bitoffsetreg>
} // end dwt_configure()
    4e46:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
    4e4a:	2242      	movs	r2, #66	; 0x42
    4e4c:	2100      	movs	r1, #0
    4e4e:	200d      	movs	r0, #13
    4e50:	f017 bef7 	b.w	1cc42 <dwt_write8bitoffsetreg>
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
    4e54:	f04f 0901 	mov.w	r9, #1
    4e58:	e743      	b.n	4ce2 <dwt_configure+0x26>
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
    4e5a:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
    4e5e:	615a      	str	r2, [r3, #20]
    4e60:	e74b      	b.n	4cfa <dwt_configure+0x3e>
        if(config->txPreambLength == DWT_PLEN_64)
    4e62:	78a3      	ldrb	r3, [r4, #2]
    4e64:	2b04      	cmp	r3, #4
    4e66:	d10a      	bne.n	4e7e <dwt_configure+0x1c2>
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
    4e68:	2210      	movs	r2, #16
    4e6a:	2106      	movs	r1, #6
    4e6c:	2027      	movs	r0, #39	; 0x27
    4e6e:	f017 fef5 	bl	1cc5c <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
    4e72:	2210      	movs	r2, #16
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
    4e74:	2126      	movs	r1, #38	; 0x26
    4e76:	2027      	movs	r0, #39	; 0x27
    4e78:	f017 fee3 	bl	1cc42 <dwt_write8bitoffsetreg>
    4e7c:	e78d      	b.n	4d9a <dwt_configure+0xde>
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
    4e7e:	2220      	movs	r2, #32
    4e80:	2106      	movs	r1, #6
    4e82:	2027      	movs	r0, #39	; 0x27
    4e84:	f017 feea 	bl	1cc5c <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
    4e88:	2228      	movs	r2, #40	; 0x28
    4e8a:	e7f3      	b.n	4e74 <dwt_configure+0x1b8>
    uint8 useDWnsSFD = 0;
    4e8c:	4602      	mov	r2, r0
    4e8e:	e7b3      	b.n	4df8 <dwt_configure+0x13c>
    4e90:	00023f54 	.word	0x00023f54
    4e94:	20000180 	.word	0x20000180
    4e98:	00024078 	.word	0x00024078
    4e9c:	000228f8 	.word	0x000228f8
    4ea0:	00024083 	.word	0x00024083
    4ea4:	00024089 	.word	0x00024089
    4ea8:	00022910 	.word	0x00022910
    4eac:	00023f86 	.word	0x00023f86
    4eb0:	00023f50 	.word	0x00023f50
    4eb4:	000228d8 	.word	0x000228d8
    4eb8:	00024080 	.word	0x00024080
    4ebc:	000228d0 	.word	0x000228d0

00004ec0 <dwt_setleds>:
 * output parameters none
 *
 * no return value
 */
void dwt_setleds(uint8 mode)
{
    4ec0:	b513      	push	{r0, r1, r4, lr}
    uint32 reg;

    if (mode & DWT_LEDS_ENABLE)
    4ec2:	f010 0101 	ands.w	r1, r0, #1
{
    4ec6:	4604      	mov	r4, r0
    if (mode & DWT_LEDS_ENABLE)
    4ec8:	d02a      	beq.n	4f20 <dwt_setleds+0x60>
    {
        // Set up MFIO for LED output.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
    4eca:	2100      	movs	r1, #0
    4ecc:	2026      	movs	r0, #38	; 0x26
    4ece:	f017 fe7d 	bl	1cbcc <dwt_read32bitoffsetreg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
    4ed2:	f420 5070 	bic.w	r0, r0, #15360	; 0x3c00
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
    4ed6:	f440 52a0 	orr.w	r2, r0, #5120	; 0x1400
    4eda:	2100      	movs	r1, #0
    4edc:	2026      	movs	r0, #38	; 0x26
    4ede:	f017 fed7 	bl	1cc90 <dwt_write32bitoffsetreg>

        // Enable LP Oscillator to run from counter and turn on de-bounce clock.
        reg = dwt_read32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET);
    4ee2:	2100      	movs	r1, #0
    4ee4:	2036      	movs	r0, #54	; 0x36
    4ee6:	f017 fe71 	bl	1cbcc <dwt_read32bitoffsetreg>
        reg |= (PMSC_CTRL0_GPDCE | PMSC_CTRL0_KHZCLEN);
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET, reg);
    4eea:	2100      	movs	r1, #0
    4eec:	f440 0204 	orr.w	r2, r0, #8650752	; 0x840000
    4ef0:	2036      	movs	r0, #54	; 0x36
    4ef2:	f017 fecd 	bl	1cc90 <dwt_write32bitoffsetreg>
        // Enable LEDs to blink and set default blink time.
        reg = PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF;
        // Make LEDs blink once if requested.
        if (mode & DWT_LEDS_INIT_BLINK)
        {
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
    4ef6:	f014 0402 	ands.w	r4, r4, #2
        }
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
    4efa:	4a0f      	ldr	r2, [pc, #60]	; (4f38 <dwt_setleds+0x78>)
    4efc:	f04f 0128 	mov.w	r1, #40	; 0x28
    4f00:	bf08      	it	eq
    4f02:	f44f 7288 	moveq.w	r2, #272	; 0x110
    4f06:	2036      	movs	r0, #54	; 0x36
    4f08:	f017 fec2 	bl	1cc90 <dwt_write32bitoffsetreg>
        // Clear force blink bits if needed.
        if(mode & DWT_LEDS_INIT_BLINK)
    4f0c:	b18c      	cbz	r4, 4f32 <dwt_setleds+0x72>
        {
            reg &= ~PMSC_LEDC_BLINK_NOW_ALL;
            dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
    4f0e:	f44f 7288 	mov.w	r2, #272	; 0x110
    4f12:	2128      	movs	r1, #40	; 0x28
    4f14:	2036      	movs	r0, #54	; 0x36
        // Clear the GPIO bits that are used for LED control.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
    }
}
    4f16:	b002      	add	sp, #8
    4f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
    4f1c:	f017 beb8 	b.w	1cc90 <dwt_write32bitoffsetreg>
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
    4f20:	2026      	movs	r0, #38	; 0x26
    4f22:	9101      	str	r1, [sp, #4]
    4f24:	f017 fe52 	bl	1cbcc <dwt_read32bitoffsetreg>
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
    4f28:	9901      	ldr	r1, [sp, #4]
    4f2a:	f420 5270 	bic.w	r2, r0, #15360	; 0x3c00
    4f2e:	2026      	movs	r0, #38	; 0x26
    4f30:	e7f1      	b.n	4f16 <dwt_setleds+0x56>
}
    4f32:	b002      	add	sp, #8
    4f34:	bd10      	pop	{r4, pc}
    4f36:	bf00      	nop
    4f38:	000f0110 	.word	0x000f0110

00004f3c <dwt_starttx>:
{
    int retval = DWT_SUCCESS ;
    uint8 temp  = 0x00;
    uint16 checkTxOK = 0 ;

    if(mode & DWT_RESPONSE_EXPECTED)
    4f3c:	f010 0202 	ands.w	r2, r0, #2
{
    4f40:	b510      	push	{r4, lr}
    4f42:	4604      	mov	r4, r0
    if(mode & DWT_RESPONSE_EXPECTED)
    4f44:	d009      	beq.n	4f5a <dwt_starttx+0x1e>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
    4f46:	2280      	movs	r2, #128	; 0x80
    4f48:	2100      	movs	r1, #0
    4f4a:	200d      	movs	r0, #13
    4f4c:	f017 fe79 	bl	1cc42 <dwt_write8bitoffsetreg>
        pdw1000local->wait4resp = 1;
    4f50:	4b14      	ldr	r3, [pc, #80]	; (4fa4 <dwt_starttx+0x68>)
    4f52:	681b      	ldr	r3, [r3, #0]
    4f54:	2201      	movs	r2, #1
    4f56:	769a      	strb	r2, [r3, #26]
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
    4f58:	2280      	movs	r2, #128	; 0x80
    }

    if (mode & DWT_START_TX_DELAYED)
    4f5a:	f014 0401 	ands.w	r4, r4, #1
    4f5e:	d018      	beq.n	4f92 <dwt_starttx+0x56>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
    4f60:	f042 0206 	orr.w	r2, r2, #6
    4f64:	2100      	movs	r1, #0
    4f66:	200d      	movs	r0, #13
    4f68:	f017 fe6b 	bl	1cc42 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
    4f6c:	2103      	movs	r1, #3
    4f6e:	200f      	movs	r0, #15
    4f70:	f017 fe49 	bl	1cc06 <dwt_read16bitoffsetreg>
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
    4f74:	f410 6081 	ands.w	r0, r0, #1032	; 0x408
    4f78:	d00a      	beq.n	4f90 <dwt_starttx+0x54>
        else
        {
            // I am taking DSHP set to Indicate that the TXDLYS was set too late for the specified DX_TIME.
            // Remedial Action - (a) cancel delayed send
            temp = (uint8)SYS_CTRL_TRXOFF; // This assumes the bit is in the lowest byte
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
    4f7a:	2240      	movs	r2, #64	; 0x40
    4f7c:	200d      	movs	r0, #13
    4f7e:	2100      	movs	r1, #0
    4f80:	f017 fe5f 	bl	1cc42 <dwt_write8bitoffsetreg>
            // Note event Delayed TX Time too Late
            // Could fall through to start a normal send (below) just sending late.....
            // ... instead return and assume return value of 1 will be used to detect and recover from the issue.
            pdw1000local->wait4resp = 0;
    4f84:	4b07      	ldr	r3, [pc, #28]	; (4fa4 <dwt_starttx+0x68>)
    4f86:	681b      	ldr	r3, [r3, #0]
    4f88:	2200      	movs	r2, #0
    4f8a:	769a      	strb	r2, [r3, #26]
            retval = DWT_ERROR ; // Failed !
    4f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
    }

    return retval;

} // end dwt_starttx()
    4f90:	bd10      	pop	{r4, pc}
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
    4f92:	200d      	movs	r0, #13
    4f94:	f042 0202 	orr.w	r2, r2, #2
    4f98:	4621      	mov	r1, r4
    4f9a:	f017 fe52 	bl	1cc42 <dwt_write8bitoffsetreg>
    int retval = DWT_SUCCESS ;
    4f9e:	4620      	mov	r0, r4
    4fa0:	e7f6      	b.n	4f90 <dwt_starttx+0x54>
    4fa2:	bf00      	nop
    4fa4:	20000180 	.word	0x20000180

00004fa8 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
    4fa8:	b570      	push	{r4, r5, r6, lr}
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
    4faa:	2103      	movs	r1, #3
{
    4fac:	4605      	mov	r5, r0
    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
    4fae:	2004      	movs	r0, #4
    4fb0:	f017 fe3a 	bl	1cc28 <dwt_read8bitoffsetreg>
    4fb4:	4e0e      	ldr	r6, [pc, #56]	; (4ff0 <dwt_setrxtimeout+0x48>)
    4fb6:	4604      	mov	r4, r0

    if(time > 0)
    4fb8:	b195      	cbz	r5, 4fe0 <dwt_setrxtimeout+0x38>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
    4fba:	462a      	mov	r2, r5
    4fbc:	2100      	movs	r1, #0
    4fbe:	200c      	movs	r0, #12
    4fc0:	f017 fe4c 	bl	1cc5c <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
    4fc4:	6832      	ldr	r2, [r6, #0]
    4fc6:	6953      	ldr	r3, [r2, #20]
    4fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4fcc:	6153      	str	r3, [r2, #20]
        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
    4fce:	f044 0210 	orr.w	r2, r4, #16

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    4fd2:	b2d2      	uxtb	r2, r2
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
    4fd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    4fd8:	2103      	movs	r1, #3
    4fda:	2004      	movs	r0, #4
    4fdc:	f017 be31 	b.w	1cc42 <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
    4fe0:	6832      	ldr	r2, [r6, #0]
    4fe2:	6953      	ldr	r3, [r2, #20]
    4fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    4fe8:	6153      	str	r3, [r2, #20]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    4fea:	f000 02ef 	and.w	r2, r0, #239	; 0xef
    4fee:	e7f1      	b.n	4fd4 <dwt_setrxtimeout+0x2c>
    4ff0:	20000180 	.word	0x20000180

00004ff4 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
    4ff4:	b508      	push	{r3, lr}
    _dwt_disablesequencing();
    4ff6:	f017 ff25 	bl	1ce44 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
    4ffa:	2200      	movs	r2, #0
    4ffc:	4611      	mov	r1, r2
    4ffe:	202c      	movs	r0, #44	; 0x2c
    5000:	f017 fe2c 	bl	1cc5c <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
    5004:	2200      	movs	r2, #0
    5006:	2106      	movs	r1, #6
    5008:	202c      	movs	r0, #44	; 0x2c
    500a:	f017 fe1a 	bl	1cc42 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
    500e:	f017 fe6a 	bl	1cce6 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
    5012:	2200      	movs	r2, #0
    5014:	2103      	movs	r1, #3
    5016:	2036      	movs	r0, #54	; 0x36
    5018:	f017 fe13 	bl	1cc42 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
    501c:	2001      	movs	r0, #1
    501e:	f017 ffc5 	bl	1cfac <deca_sleep>

    // Clear reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
    5022:	22f0      	movs	r2, #240	; 0xf0
    5024:	2103      	movs	r1, #3
    5026:	2036      	movs	r0, #54	; 0x36
    5028:	f017 fe0b 	bl	1cc42 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
    502c:	4b02      	ldr	r3, [pc, #8]	; (5038 <dwt_softreset+0x44>)
    502e:	681b      	ldr	r3, [r3, #0]
    5030:	2200      	movs	r2, #0
    5032:	769a      	strb	r2, [r3, #26]
}
    5034:	bd08      	pop	{r3, pc}
    5036:	bf00      	nop
    5038:	20000180 	.word	0x20000180

0000503c <dwt_initialise>:
{
    503c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pdw1000local->dblbuffon = 0; // Double buffer mode off by default
    503e:	4d36      	ldr	r5, [pc, #216]	; (5118 <dwt_initialise+0xdc>)
    5040:	682b      	ldr	r3, [r5, #0]
    5042:	2400      	movs	r4, #0
    pdw1000local->cbRxOk = NULL;
    5044:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
    pdw1000local->cbRxErr = NULL;
    5048:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
    pdw1000local->dblbuffon = 0; // Double buffer mode off by default
    504c:	745c      	strb	r4, [r3, #17]
    pdw1000local->wait4resp = 0;
    504e:	769c      	strb	r4, [r3, #26]
    pdw1000local->sleep_mode = 0;
    5050:	831c      	strh	r4, [r3, #24]
{
    5052:	4606      	mov	r6, r0
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
    5054:	f017 fdcb 	bl	1cbee <dwt_readdevid>
    5058:	4b30      	ldr	r3, [pc, #192]	; (511c <dwt_initialise+0xe0>)
    505a:	4298      	cmp	r0, r3
    505c:	d159      	bne.n	5112 <dwt_initialise+0xd6>
    dwt_softreset();
    505e:	f7ff ffc9 	bl	4ff4 <dwt_softreset>
    _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
    5062:	4620      	mov	r0, r4
    5064:	f017 fe72 	bl	1cd4c <_dwt_enableclocks>
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
    5068:	4621      	mov	r1, r4
    506a:	2204      	movs	r2, #4
    506c:	2024      	movs	r0, #36	; 0x24
    506e:	f017 fde8 	bl	1cc42 <dwt_write8bitoffsetreg>
    otp_addr = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
    5072:	201e      	movs	r0, #30
    5074:	f017 fe21 	bl	1ccba <_dwt_otpread>
    pdw1000local->otprev = (otp_addr >> 8) & 0xff;            // OTP revision is next byte
    5078:	682b      	ldr	r3, [r5, #0]
    507a:	f3c0 2207 	ubfx	r2, r0, #8, #8
    otp_addr = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
    507e:	4604      	mov	r4, r0
    pdw1000local->otprev = (otp_addr >> 8) & 0xff;            // OTP revision is next byte
    5080:	725a      	strb	r2, [r3, #9]
    ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
    5082:	2004      	movs	r0, #4
    5084:	f017 fe19 	bl	1ccba <_dwt_otpread>
    if((ldo_tune & 0xFF) != 0)
    5088:	b2c0      	uxtb	r0, r0
    508a:	b148      	cbz	r0, 50a0 <dwt_initialise+0x64>
        dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDE kick bit
    508c:	2202      	movs	r2, #2
    508e:	2112      	movs	r1, #18
    5090:	202d      	movs	r0, #45	; 0x2d
    5092:	f017 fdd6 	bl	1cc42 <dwt_write8bitoffsetreg>
        pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
    5096:	682a      	ldr	r2, [r5, #0]
    5098:	8b13      	ldrh	r3, [r2, #24]
    509a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    509e:	8313      	strh	r3, [r2, #24]
    pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
    50a0:	2006      	movs	r0, #6
    50a2:	682f      	ldr	r7, [r5, #0]
    50a4:	f017 fe09 	bl	1ccba <_dwt_otpread>
    50a8:	6038      	str	r0, [r7, #0]
    pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
    50aa:	2007      	movs	r0, #7
    50ac:	682f      	ldr	r7, [r5, #0]
    50ae:	f017 fe04 	bl	1ccba <_dwt_otpread>
    pdw1000local->init_xtrim = otp_addr & 0x1F;
    50b2:	682b      	ldr	r3, [r5, #0]
    pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
    50b4:	6078      	str	r0, [r7, #4]
    if (!pdw1000local->init_xtrim) // A value of 0 means that the crystal has not been trimmed
    50b6:	f014 041f 	ands.w	r4, r4, #31
        pdw1000local->init_xtrim = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
    50ba:	bf0a      	itet	eq
    50bc:	2210      	moveq	r2, #16
    pdw1000local->init_xtrim = otp_addr & 0x1F;
    50be:	741c      	strbne	r4, [r3, #16]
        pdw1000local->init_xtrim = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
    50c0:	741a      	strbeq	r2, [r3, #16]
    dwt_setxtaltrim(pdw1000local->init_xtrim);
    50c2:	7c18      	ldrb	r0, [r3, #16]
    50c4:	f017 fed6 	bl	1ce74 <dwt_setxtaltrim>
    if(config & DWT_LOADUCODE)
    50c8:	07f3      	lsls	r3, r6, #31
    50ca:	d516      	bpl.n	50fa <dwt_initialise+0xbe>
        _dwt_loaducodefromrom();
    50cc:	f017 fea8 	bl	1ce20 <_dwt_loaducodefromrom>
        pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up
    50d0:	682a      	ldr	r2, [r5, #0]
    50d2:	8b13      	ldrh	r3, [r2, #24]
    50d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    50d8:	8313      	strh	r3, [r2, #24]
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
    50da:	2001      	movs	r0, #1
    50dc:	f017 fe36 	bl	1cd4c <_dwt_enableclocks>
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
    50e0:	2200      	movs	r2, #0
    50e2:	210a      	movs	r1, #10
    50e4:	202c      	movs	r0, #44	; 0x2c
    50e6:	f017 fdac 	bl	1cc42 <dwt_write8bitoffsetreg>
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
    50ea:	2100      	movs	r1, #0
    50ec:	2004      	movs	r0, #4
    50ee:	682c      	ldr	r4, [r5, #0]
    50f0:	f017 fd6c 	bl	1cbcc <dwt_read32bitoffsetreg>
    50f4:	6160      	str	r0, [r4, #20]
    return DWT_SUCCESS ;
    50f6:	2000      	movs	r0, #0
} // end dwt_initialise()
    50f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
    50fa:	2105      	movs	r1, #5
    50fc:	2036      	movs	r0, #54	; 0x36
    50fe:	f017 fd82 	bl	1cc06 <dwt_read16bitoffsetreg>
        rega &= 0xFDFF ; // Clear LDERUN bit
    5102:	f420 7000 	bic.w	r0, r0, #512	; 0x200
        dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
    5106:	b282      	uxth	r2, r0
    5108:	2105      	movs	r1, #5
    510a:	2036      	movs	r0, #54	; 0x36
    510c:	f017 fda6 	bl	1cc5c <dwt_write16bitoffsetreg>
    5110:	e7e3      	b.n	50da <dwt_initialise+0x9e>
        return DWT_ERROR ;
    5112:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5116:	e7ef      	b.n	50f8 <dwt_initialise+0xbc>
    5118:	20000180 	.word	0x20000180
    511c:	deca0130 	.word	0xdeca0130

00005120 <openspi>:
 *
 * Low level abstract function to open and initialise access to the SPI device.
 * returns 0 for success, or -1 for error
 */
int openspi(void)
{
    5120:	b570      	push	{r4, r5, r6, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    5122:	4820      	ldr	r0, [pc, #128]	; (51a4 <openspi+0x84>)
    5124:	f016 f9fa 	bl	1b51c <z_impl_device_get_binding>
    /* Propagate CS config into all spi_cfgs[] elements */
    cs_ctrl.gpio_dev = device_get_binding(DT_LABEL(DT_PHANDLE_BY_IDX(DT_NODELABEL(spi1), cs_gpios, 0)));
    5128:	4b1f      	ldr	r3, [pc, #124]	; (51a8 <openspi+0x88>)
    512a:	6018      	str	r0, [r3, #0]
    if (!cs_ctrl.gpio_dev) {
    512c:	b930      	cbnz	r0, 513c <openspi+0x1c>
        printk("%s: GPIO binding failed.\n", __func__);
    512e:	491f      	ldr	r1, [pc, #124]	; (51ac <openspi+0x8c>)
    5130:	481f      	ldr	r0, [pc, #124]	; (51b0 <openspi+0x90>)

    spi_cfg = &spi_cfgs[0];

    spi = device_get_binding(DT_LABEL(DT_NODELABEL(spi1)));
    if (!spi) {
        printk("%s: SPI binding failed.\n", __func__);
    5132:	f017 ff7f 	bl	1d034 <printk>
        return -1;
    5136:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    rx.buffers = &bufs[1];
    tx.count = 1;
    rx.count = 1;

    return 0;
}
    513a:	bd70      	pop	{r4, r5, r6, pc}
    cs_ctrl.gpio_pin = DT_PHA(DT_NODELABEL(spi1), cs_gpios, pin);
    513c:	f241 1211 	movw	r2, #4369	; 0x1111
    spi_cfg = &spi_cfgs[0];
    5140:	4d1c      	ldr	r5, [pc, #112]	; (51b4 <openspi+0x94>)
    cs_ctrl.gpio_pin = DT_PHA(DT_NODELABEL(spi1), cs_gpios, pin);
    5142:	811a      	strh	r2, [r3, #8]
        spi_cfgs[i].cs = &cs_ctrl;
    5144:	4a1c      	ldr	r2, [pc, #112]	; (51b8 <openspi+0x98>)
    spi_cfg = &spi_cfgs[0];
    5146:	602a      	str	r2, [r5, #0]
    cs_ctrl.delay = 0U;
    5148:	2400      	movs	r4, #0
    514a:	605c      	str	r4, [r3, #4]
        spi_cfgs[i].cs = &cs_ctrl;
    514c:	6093      	str	r3, [r2, #8]
    514e:	6153      	str	r3, [r2, #20]
    5150:	6213      	str	r3, [r2, #32]
    5152:	62d3      	str	r3, [r2, #44]	; 0x2c
    5154:	4819      	ldr	r0, [pc, #100]	; (51bc <openspi+0x9c>)
    5156:	f016 f9e1 	bl	1b51c <z_impl_device_get_binding>
    spi = device_get_binding(DT_LABEL(DT_NODELABEL(spi1)));
    515a:	4b19      	ldr	r3, [pc, #100]	; (51c0 <openspi+0xa0>)
    515c:	6018      	str	r0, [r3, #0]
    if (!spi) {
    515e:	b910      	cbnz	r0, 5166 <openspi+0x46>
        printk("%s: SPI binding failed.\n", __func__);
    5160:	4912      	ldr	r1, [pc, #72]	; (51ac <openspi+0x8c>)
    5162:	4818      	ldr	r0, [pc, #96]	; (51c4 <openspi+0xa4>)
    5164:	e7e5      	b.n	5132 <openspi+0x12>
    spi_cfg->operation = SPI_WORD_SET(8);
    5166:	682b      	ldr	r3, [r5, #0]
    memset(&tx_buf[0], 0, 255);
    5168:	4e17      	ldr	r6, [pc, #92]	; (51c8 <openspi+0xa8>)
    memset(&rx_buf[0], 0, 255);
    516a:	4d18      	ldr	r5, [pc, #96]	; (51cc <openspi+0xac>)
    spi_cfg->operation = SPI_WORD_SET(8);
    516c:	f44f 7280 	mov.w	r2, #256	; 0x100
    5170:	809a      	strh	r2, [r3, #4]
    spi_cfg->frequency = 2000000;
    5172:	4a17      	ldr	r2, [pc, #92]	; (51d0 <openspi+0xb0>)
    5174:	601a      	str	r2, [r3, #0]
    memset(&tx_buf[0], 0, 255);
    5176:	4621      	mov	r1, r4
    5178:	22ff      	movs	r2, #255	; 0xff
    517a:	4630      	mov	r0, r6
    517c:	f01a f9d7 	bl	1f52e <memset>
    memset(&rx_buf[0], 0, 255);
    5180:	22ff      	movs	r2, #255	; 0xff
    5182:	4621      	mov	r1, r4
    5184:	4628      	mov	r0, r5
    5186:	f01a f9d2 	bl	1f52e <memset>
    bufs[0].buf = &tx_buf[0];
    518a:	4b12      	ldr	r3, [pc, #72]	; (51d4 <openspi+0xb4>)
    tx.buffers = &bufs[0];
    518c:	4912      	ldr	r1, [pc, #72]	; (51d8 <openspi+0xb8>)
    rx.buffers = &bufs[1];
    518e:	4a13      	ldr	r2, [pc, #76]	; (51dc <openspi+0xbc>)
    bufs[0].buf = &tx_buf[0];
    5190:	601e      	str	r6, [r3, #0]
    bufs[1].buf = &rx_buf[0];
    5192:	609d      	str	r5, [r3, #8]
    tx.buffers = &bufs[0];
    5194:	600b      	str	r3, [r1, #0]
    rx.buffers = &bufs[1];
    5196:	3308      	adds	r3, #8
    5198:	6013      	str	r3, [r2, #0]
    tx.count = 1;
    519a:	2301      	movs	r3, #1
    519c:	604b      	str	r3, [r1, #4]
    rx.count = 1;
    519e:	6053      	str	r3, [r2, #4]
    return 0;
    51a0:	4620      	mov	r0, r4
    51a2:	e7ca      	b.n	513a <openspi+0x1a>
    51a4:	0002408b 	.word	0x0002408b
    51a8:	20001708 	.word	0x20001708
    51ac:	000240d4 	.word	0x000240d4
    51b0:	00024092 	.word	0x00024092
    51b4:	20001720 	.word	0x20001720
    51b8:	20001724 	.word	0x20001724
    51bc:	000240ac 	.word	0x000240ac
    51c0:	2000171c 	.word	0x2000171c
    51c4:	000240b2 	.word	0x000240b2
    51c8:	20002ec6 	.word	0x20002ec6
    51cc:	20002dc7 	.word	0x20002dc7
    51d0:	001e8480 	.word	0x001e8480
    51d4:	200016f8 	.word	0x200016f8
    51d8:	20001754 	.word	0x20001754
    51dc:	20001714 	.word	0x20001714

000051e0 <set_spi_speed_slow>:

void set_spi_speed_slow(void)
{
    51e0:	b508      	push	{r3, lr}
    spi_cfg = &spi_cfgs[0];
    51e2:	4a0a      	ldr	r2, [pc, #40]	; (520c <set_spi_speed_slow+0x2c>)
    51e4:	4b0a      	ldr	r3, [pc, #40]	; (5210 <set_spi_speed_slow+0x30>)
    51e6:	6013      	str	r3, [r2, #0]
    spi_cfg->operation = SPI_WORD_SET(8);
    51e8:	f44f 7280 	mov.w	r2, #256	; 0x100
    51ec:	809a      	strh	r2, [r3, #4]
    spi_cfg->frequency = 2000000;
    51ee:	4a09      	ldr	r2, [pc, #36]	; (5214 <set_spi_speed_slow+0x34>)
    51f0:	601a      	str	r2, [r3, #0]

    memset(&tx_buf[0], 0, 255);
    51f2:	2100      	movs	r1, #0
    51f4:	22ff      	movs	r2, #255	; 0xff
    51f6:	4808      	ldr	r0, [pc, #32]	; (5218 <set_spi_speed_slow+0x38>)
    51f8:	f01a f999 	bl	1f52e <memset>
    memset(&rx_buf[0], 0, 255);
}
    51fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    memset(&rx_buf[0], 0, 255);
    5200:	4806      	ldr	r0, [pc, #24]	; (521c <set_spi_speed_slow+0x3c>)
    5202:	22ff      	movs	r2, #255	; 0xff
    5204:	2100      	movs	r1, #0
    5206:	f01a b992 	b.w	1f52e <memset>
    520a:	bf00      	nop
    520c:	20001720 	.word	0x20001720
    5210:	20001724 	.word	0x20001724
    5214:	001e8480 	.word	0x001e8480
    5218:	20002ec6 	.word	0x20002ec6
    521c:	20002dc7 	.word	0x20002dc7

00005220 <set_spi_speed_fast>:

void set_spi_speed_fast(void)
{
    5220:	b508      	push	{r3, lr}
    spi_cfg = &spi_cfgs[1];
    5222:	4b0b      	ldr	r3, [pc, #44]	; (5250 <set_spi_speed_fast+0x30>)
    5224:	4a0b      	ldr	r2, [pc, #44]	; (5254 <set_spi_speed_fast+0x34>)
    spi_cfg->operation = SPI_WORD_SET(8);
    spi_cfg->frequency = 8000000;

    memset(&tx_buf[0], 0, 255);
    5226:	480c      	ldr	r0, [pc, #48]	; (5258 <set_spi_speed_fast+0x38>)
    spi_cfg = &spi_cfgs[1];
    5228:	f103 010c 	add.w	r1, r3, #12
    522c:	6011      	str	r1, [r2, #0]
    spi_cfg->operation = SPI_WORD_SET(8);
    522e:	f44f 7280 	mov.w	r2, #256	; 0x100
    5232:	821a      	strh	r2, [r3, #16]
    spi_cfg->frequency = 8000000;
    5234:	4a09      	ldr	r2, [pc, #36]	; (525c <set_spi_speed_fast+0x3c>)
    5236:	60da      	str	r2, [r3, #12]
    memset(&tx_buf[0], 0, 255);
    5238:	2100      	movs	r1, #0
    523a:	22ff      	movs	r2, #255	; 0xff
    523c:	f01a f977 	bl	1f52e <memset>
    memset(&rx_buf[0], 0, 255);
}
    5240:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    memset(&rx_buf[0], 0, 255);
    5244:	4806      	ldr	r0, [pc, #24]	; (5260 <set_spi_speed_fast+0x40>)
    5246:	22ff      	movs	r2, #255	; 0xff
    5248:	2100      	movs	r1, #0
    524a:	f01a b970 	b.w	1f52e <memset>
    524e:	bf00      	nop
    5250:	20001724 	.word	0x20001724
    5254:	20001720 	.word	0x20001720
    5258:	20002ec6 	.word	0x20002ec6
    525c:	007a1200 	.word	0x007a1200
    5260:	20002dc7 	.word	0x20002dc7

00005264 <writetospi>:
 */
int writetospi(uint16           headerLength,
               const    uint8 * headerBuffer,
               uint32           bodyLength,
               const    uint8 * bodyBuffer)
{
    5264:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5268:	461f      	mov	r7, r3
    526a:	4615      	mov	r5, r2
    526c:	4604      	mov	r4, r0
    526e:	9101      	str	r1, [sp, #4]
#if 0
    LOG_HEXDUMP_INF(headerBuffer, headerLength, "writetospi: Header");
    LOG_HEXDUMP_INF(bodyBuffer, bodyLength, "writetospi: Body");
#endif

    stat = decamutexon();
    5270:	f017 fe8f 	bl	1cf92 <decamutexon>

    memcpy(&tx_buf[0], headerBuffer, headerLength);
    5274:	f8df 8054 	ldr.w	r8, [pc, #84]	; 52cc <writetospi+0x68>
    5278:	9901      	ldr	r1, [sp, #4]
    527a:	4622      	mov	r2, r4
    stat = decamutexon();
    527c:	4606      	mov	r6, r0
    memcpy(&tx_buf[0], headerBuffer, headerLength);
    527e:	4640      	mov	r0, r8
    5280:	f01a f92a 	bl	1f4d8 <memcpy>
    memcpy(&tx_buf[headerLength], bodyBuffer, bodyLength);
    5284:	4639      	mov	r1, r7
    5286:	eb08 0004 	add.w	r0, r8, r4
    528a:	462a      	mov	r2, r5
    528c:	f01a f924 	bl	1f4d8 <memcpy>

    bufs[0].len = headerLength + bodyLength;
    5290:	4b09      	ldr	r3, [pc, #36]	; (52b8 <writetospi+0x54>)
    5292:	442c      	add	r4, r5
    5294:	605c      	str	r4, [r3, #4]
    bufs[1].len = headerLength + bodyLength;
    5296:	60dc      	str	r4, [r3, #12]

    spi_transceive(spi, spi_cfg, &tx, &rx);
    5298:	4b08      	ldr	r3, [pc, #32]	; (52bc <writetospi+0x58>)
    529a:	6818      	ldr	r0, [r3, #0]
    529c:	4b08      	ldr	r3, [pc, #32]	; (52c0 <writetospi+0x5c>)
    529e:	6819      	ldr	r1, [r3, #0]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
    52a0:	6883      	ldr	r3, [r0, #8]
    52a2:	4a08      	ldr	r2, [pc, #32]	; (52c4 <writetospi+0x60>)
    52a4:	681c      	ldr	r4, [r3, #0]
    52a6:	4b08      	ldr	r3, [pc, #32]	; (52c8 <writetospi+0x64>)
    52a8:	47a0      	blx	r4

    decamutexoff(stat);
    52aa:	4630      	mov	r0, r6
    52ac:	f017 fe7a 	bl	1cfa4 <decamutexoff>

    return 0;
}
    52b0:	2000      	movs	r0, #0
    52b2:	b002      	add	sp, #8
    52b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    52b8:	200016f8 	.word	0x200016f8
    52bc:	2000171c 	.word	0x2000171c
    52c0:	20001720 	.word	0x20001720
    52c4:	20001754 	.word	0x20001754
    52c8:	20001714 	.word	0x20001714
    52cc:	20002ec6 	.word	0x20002ec6

000052d0 <readfromspi>:
 */
int readfromspi(uint16        headerLength,
                const uint8 * headerBuffer,
                uint32        readLength,
                uint8       * readBuffer)
{
    52d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    52d4:	461f      	mov	r7, r3
    52d6:	4604      	mov	r4, r0
    52d8:	4689      	mov	r9, r1
    52da:	4615      	mov	r5, r2
    decaIrqStatus_t  stat;

    stat = decamutexon();
    52dc:	f017 fe59 	bl	1cf92 <decamutexon>

    memset(&tx_buf[0], 0, headerLength + readLength);
    52e0:	f8df a068 	ldr.w	sl, [pc, #104]	; 534c <readfromspi+0x7c>
    52e4:	eb04 0805 	add.w	r8, r4, r5
    52e8:	4642      	mov	r2, r8
    stat = decamutexon();
    52ea:	4606      	mov	r6, r0
    memset(&tx_buf[0], 0, headerLength + readLength);
    52ec:	2100      	movs	r1, #0
    52ee:	4650      	mov	r0, sl
    52f0:	f01a f91d 	bl	1f52e <memset>
    memcpy(&tx_buf[0], headerBuffer, headerLength);
    52f4:	4649      	mov	r1, r9
    52f6:	4622      	mov	r2, r4
    52f8:	4650      	mov	r0, sl
    52fa:	f01a f8ed 	bl	1f4d8 <memcpy>

    bufs[0].len = headerLength + readLength;
    52fe:	4b0d      	ldr	r3, [pc, #52]	; (5334 <readfromspi+0x64>)
    5300:	f8c3 8004 	str.w	r8, [r3, #4]
    bufs[1].len = headerLength + readLength;
    5304:	f8c3 800c 	str.w	r8, [r3, #12]

    spi_transceive(spi, spi_cfg, &tx, &rx);
    5308:	4b0b      	ldr	r3, [pc, #44]	; (5338 <readfromspi+0x68>)
    530a:	6818      	ldr	r0, [r3, #0]
    530c:	4b0b      	ldr	r3, [pc, #44]	; (533c <readfromspi+0x6c>)
    530e:	6819      	ldr	r1, [r3, #0]
    5310:	6883      	ldr	r3, [r0, #8]
    5312:	4a0b      	ldr	r2, [pc, #44]	; (5340 <readfromspi+0x70>)
    5314:	f8d3 8000 	ldr.w	r8, [r3]
    5318:	4b0a      	ldr	r3, [pc, #40]	; (5344 <readfromspi+0x74>)
    531a:	47c0      	blx	r8

    memcpy(readBuffer, rx_buf + headerLength, readLength);
    531c:	490a      	ldr	r1, [pc, #40]	; (5348 <readfromspi+0x78>)
    531e:	462a      	mov	r2, r5
    5320:	4421      	add	r1, r4
    5322:	4638      	mov	r0, r7
    5324:	f01a f8d8 	bl	1f4d8 <memcpy>

    decamutexoff(stat);
    5328:	4630      	mov	r0, r6
    532a:	f017 fe3b 	bl	1cfa4 <decamutexoff>
    LOG_HEXDUMP_INF(headerBuffer, headerLength, "readfromspi: Header");
    LOG_HEXDUMP_INF(readBuffer, readLength, "readfromspi: Body");
#endif

    return 0;
}
    532e:	2000      	movs	r0, #0
    5330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5334:	200016f8 	.word	0x200016f8
    5338:	2000171c 	.word	0x2000171c
    533c:	20001720 	.word	0x20001720
    5340:	20001754 	.word	0x20001754
    5344:	20001714 	.word	0x20001714
    5348:	20002dc7 	.word	0x20002dc7
    534c:	20002ec6 	.word	0x20002ec6

00005350 <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    5350:	4b01      	ldr	r3, [pc, #4]	; (5358 <__printk_hook_install+0x8>)
    5352:	6018      	str	r0, [r3, #0]
}
    5354:	4770      	bx	lr
    5356:	bf00      	nop
    5358:	20000184 	.word	0x20000184

0000535c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    535c:	b530      	push	{r4, r5, lr}
    535e:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    5360:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    5364:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    5366:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    5368:	a901      	add	r1, sp, #4
    536a:	4805      	ldr	r0, [pc, #20]	; (5380 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    536c:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    536e:	f7fb fe87 	bl	1080 <cbvprintf>

	if (ctx.count < ctx.max) {
    5372:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    5376:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    5378:	bfb8      	it	lt
    537a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    537c:	b005      	add	sp, #20
    537e:	bd30      	pop	{r4, r5, pc}
    5380:	0001d00f 	.word	0x0001d00f

00005384 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    5384:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5388:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    538c:	f019 0808 	ands.w	r8, r9, #8
{
    5390:	4604      	mov	r4, r0
    5392:	4693      	mov	fp, r2
	if (processing) {
    5394:	d00e      	beq.n	53b4 <process_event+0x30>
		if (evt == EVT_COMPLETE) {
    5396:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    5398:	bf0c      	ite	eq
    539a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    539e:	f049 0920 	orrne.w	r9, r9, #32
    53a2:	f8a0 9018 	strh.w	r9, [r0, #24]
    53a6:	f38b 8811 	msr	BASEPRI, fp
    53aa:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    53ae:	b003      	add	sp, #12
    53b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
    53b4:	f8df a190 	ldr.w	sl, [pc, #400]	; 5548 <process_event+0x1c4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    53b8:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    53bc:	2902      	cmp	r1, #2
    53be:	d107      	bne.n	53d0 <process_event+0x4c>
			evt = process_recheck(mgr);
    53c0:	4620      	mov	r0, r4
    53c2:	f017 fe51 	bl	1d068 <process_recheck>
		if (evt == EVT_NOP) {
    53c6:	2800      	cmp	r0, #0
    53c8:	d0ed      	beq.n	53a6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    53ca:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    53cc:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    53ce:	d14b      	bne.n	5468 <process_event+0xe4>
			res = mgr->last_res;
    53d0:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    53d2:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    53d4:	2f00      	cmp	r7, #0
    53d6:	da15      	bge.n	5404 <process_event+0x80>
		*clients = mgr->clients;
    53d8:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    53da:	f021 0107 	bic.w	r1, r1, #7
	list->tail = NULL;
    53de:	e9c4 8800 	strd	r8, r8, [r4]
    53e2:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    53e6:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    53e8:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    53ea:	8b21      	ldrh	r1, [r4, #24]
    53ec:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    53f0:	454a      	cmp	r2, r9
    53f2:	d002      	beq.n	53fa <process_event+0x76>
		if (do_monitors
    53f4:	68a3      	ldr	r3, [r4, #8]
    53f6:	2b00      	cmp	r3, #0
    53f8:	d157      	bne.n	54aa <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    53fa:	b90d      	cbnz	r5, 5400 <process_event+0x7c>
		    || (transit != NULL)) {
    53fc:	2e00      	cmp	r6, #0
    53fe:	d06f      	beq.n	54e0 <process_event+0x15c>
    5400:	2300      	movs	r3, #0
    5402:	e053      	b.n	54ac <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5404:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    5408:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    540a:	2a01      	cmp	r2, #1
    540c:	d81d      	bhi.n	544a <process_event+0xc6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    540e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    5412:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    5414:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5416:	b289      	uxth	r1, r1
    5418:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    541c:	d10a      	bne.n	5434 <process_event+0xb0>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    541e:	b13d      	cbz	r5, 5430 <process_event+0xac>
    5420:	8b63      	ldrh	r3, [r4, #26]
    5422:	462a      	mov	r2, r5
	return node->next;
    5424:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    5426:	3301      	adds	r3, #1
    5428:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    542a:	2a00      	cmp	r2, #0
    542c:	d1fa      	bne.n	5424 <process_event+0xa0>
    542e:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5430:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    5434:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    5436:	4620      	mov	r0, r4
    5438:	f017 fe16 	bl	1d068 <process_recheck>
    543c:	2800      	cmp	r0, #0
    543e:	d0d3      	beq.n	53e8 <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    5440:	8b23      	ldrh	r3, [r4, #24]
    5442:	f043 0320 	orr.w	r3, r3, #32
    5446:	8323      	strh	r3, [r4, #24]
    5448:	e7ce      	b.n	53e8 <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
    544a:	2b04      	cmp	r3, #4
    544c:	d10a      	bne.n	5464 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    544e:	f021 0107 	bic.w	r1, r1, #7
    5452:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    5454:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    5456:	4620      	mov	r0, r4
    5458:	f017 fe06 	bl	1d068 <process_recheck>
    545c:	b110      	cbz	r0, 5464 <process_event+0xe0>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    545e:	f041 0120 	orr.w	r1, r1, #32
    5462:	8321      	strh	r1, [r4, #24]
    5464:	2500      	movs	r5, #0
    5466:	e7bf      	b.n	53e8 <process_event+0x64>
		} else if (evt == EVT_START) {
    5468:	2803      	cmp	r0, #3
    546a:	d109      	bne.n	5480 <process_event+0xfc>
			transit = mgr->transitions->start;
    546c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    546e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    5472:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5474:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    5478:	8323      	strh	r3, [r4, #24]
}
    547a:	2500      	movs	r5, #0
		res = 0;
    547c:	462f      	mov	r7, r5
    547e:	e7b4      	b.n	53ea <process_event+0x66>
		} else if (evt == EVT_STOP) {
    5480:	2804      	cmp	r0, #4
    5482:	d106      	bne.n	5492 <process_event+0x10e>
			transit = mgr->transitions->stop;
    5484:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5486:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    548a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    548c:	f043 0304 	orr.w	r3, r3, #4
    5490:	e7f2      	b.n	5478 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    5492:	2805      	cmp	r0, #5
    5494:	d106      	bne.n	54a4 <process_event+0x120>
			transit = mgr->transitions->reset;
    5496:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5498:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    549c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    549e:	f043 0305 	orr.w	r3, r3, #5
    54a2:	e7e9      	b.n	5478 <process_event+0xf4>
    54a4:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    54a6:	462e      	mov	r6, r5
    54a8:	e7e8      	b.n	547c <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    54aa:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    54ac:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    54b0:	8321      	strh	r1, [r4, #24]
    54b2:	f38b 8811 	msr	BASEPRI, fp
    54b6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    54ba:	bb03      	cbnz	r3, 54fe <process_event+0x17a>
	while (!sys_slist_is_empty(list)) {
    54bc:	2d00      	cmp	r5, #0
    54be:	d131      	bne.n	5524 <process_event+0x1a0>
			if (transit != NULL) {
    54c0:	b116      	cbz	r6, 54c8 <process_event+0x144>
				transit(mgr, transition_complete);
    54c2:	4651      	mov	r1, sl
    54c4:	4620      	mov	r0, r4
    54c6:	47b0      	blx	r6
	__asm__ volatile(
    54c8:	f04f 0320 	mov.w	r3, #32
    54cc:	f3ef 8b11 	mrs	fp, BASEPRI
    54d0:	f383 8811 	msr	BASEPRI, r3
    54d4:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    54d8:	8b23      	ldrh	r3, [r4, #24]
    54da:	f023 0308 	bic.w	r3, r3, #8
    54de:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    54e0:	8b23      	ldrh	r3, [r4, #24]
    54e2:	06da      	lsls	r2, r3, #27
    54e4:	d527      	bpl.n	5536 <process_event+0x1b2>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    54e6:	f023 0310 	bic.w	r3, r3, #16
    54ea:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    54ec:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    54ee:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    54f2:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    54f6:	2900      	cmp	r1, #0
    54f8:	f47f af60 	bne.w	53bc <process_event+0x38>
out:
    54fc:	e753      	b.n	53a6 <process_event+0x22>
	return list->head;
    54fe:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    5500:	2900      	cmp	r1, #0
    5502:	d0db      	beq.n	54bc <process_event+0x138>
	return node->next;
    5504:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    5508:	f8d1 b004 	ldr.w	fp, [r1, #4]
    550c:	9201      	str	r2, [sp, #4]
    550e:	463b      	mov	r3, r7
    5510:	4620      	mov	r0, r4
    5512:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    5514:	9a01      	ldr	r2, [sp, #4]
    5516:	f1b9 0f00 	cmp.w	r9, #0
    551a:	d0cf      	beq.n	54bc <process_event+0x138>
    551c:	4649      	mov	r1, r9
    551e:	f8d9 9000 	ldr.w	r9, [r9]
    5522:	e7f1      	b.n	5508 <process_event+0x184>
    5524:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    5526:	463b      	mov	r3, r7
    5528:	4620      	mov	r0, r4
    552a:	9201      	str	r2, [sp, #4]
    552c:	682d      	ldr	r5, [r5, #0]
    552e:	f017 fdb7 	bl	1d0a0 <notify_one>
	while (!sys_slist_is_empty(list)) {
    5532:	9a01      	ldr	r2, [sp, #4]
    5534:	e7c2      	b.n	54bc <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    5536:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    553a:	bf1e      	ittt	ne
    553c:	f023 0320 	bicne.w	r3, r3, #32
    5540:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    5542:	2102      	movne	r1, #2
    5544:	e7d3      	b.n	54ee <process_event+0x16a>
    5546:	bf00      	nop
    5548:	0001d0cd 	.word	0x0001d0cd

0000554c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    554c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    554e:	4910      	ldr	r1, [pc, #64]	; (5590 <enable_logger+0x44>)
    5550:	4810      	ldr	r0, [pc, #64]	; (5594 <enable_logger+0x48>)
{
    5552:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    5554:	2200      	movs	r2, #0
    5556:	f01c fdca 	bl	220ee <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    555a:	4d0f      	ldr	r5, [pc, #60]	; (5598 <enable_logger+0x4c>)
    555c:	490f      	ldr	r1, [pc, #60]	; (559c <enable_logger+0x50>)
    555e:	2200      	movs	r2, #0
    5560:	2300      	movs	r3, #0
    5562:	e9cd 2306 	strd	r2, r3, [sp, #24]
    5566:	2400      	movs	r4, #0
    5568:	230e      	movs	r3, #14
    556a:	e9cd 3403 	strd	r3, r4, [sp, #12]
    556e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    5572:	4b0b      	ldr	r3, [pc, #44]	; (55a0 <enable_logger+0x54>)
    5574:	9400      	str	r4, [sp, #0]
    5576:	f44f 7240 	mov.w	r2, #768	; 0x300
    557a:	4628      	mov	r0, r5
    557c:	f016 fea8 	bl	1c2d0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    5580:	4908      	ldr	r1, [pc, #32]	; (55a4 <enable_logger+0x58>)
    5582:	4628      	mov	r0, r5
    5584:	f01c fc6d 	bl	21e62 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    5588:	4620      	mov	r0, r4
    558a:	b009      	add	sp, #36	; 0x24
    558c:	bd30      	pop	{r4, r5, pc}
    558e:	bf00      	nop
    5590:	000055a9 	.word	0x000055a9
    5594:	20000a08 	.word	0x20000a08
    5598:	20000a40 	.word	0x20000a40
    559c:	20003570 	.word	0x20003570
    55a0:	00005905 	.word	0x00005905
    55a4:	000240e2 	.word	0x000240e2

000055a8 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    55a8:	4801      	ldr	r0, [pc, #4]	; (55b0 <log_process_thread_timer_expiry_fn+0x8>)
    55aa:	f016 bdf9 	b.w	1c1a0 <z_impl_k_sem_give>
    55ae:	bf00      	nop
    55b0:	200008a0 	.word	0x200008a0

000055b4 <log_core_init>:
{
    55b4:	b508      	push	{r3, lr}
		log_msg_pool_init();
    55b6:	f000 fa69 	bl	5a8c <log_msg_pool_init>
		log_list_init(&list);
    55ba:	4809      	ldr	r0, [pc, #36]	; (55e0 <log_core_init+0x2c>)
    55bc:	f018 f96f 	bl	1d89e <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    55c0:	2304      	movs	r3, #4
    55c2:	2248      	movs	r2, #72	; 0x48
    55c4:	4907      	ldr	r1, [pc, #28]	; (55e4 <log_core_init+0x30>)
    55c6:	4808      	ldr	r0, [pc, #32]	; (55e8 <log_core_init+0x34>)
    55c8:	f01c fa30 	bl	21a2c <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    55cc:	4b07      	ldr	r3, [pc, #28]	; (55ec <log_core_init+0x38>)
    55ce:	4a08      	ldr	r2, [pc, #32]	; (55f0 <log_core_init+0x3c>)
    55d0:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    55d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    55d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    55da:	f000 bc9f 	b.w	5f1c <log_output_timestamp_freq_set>
    55de:	bf00      	nop
    55e0:	20001768 	.word	0x20001768
    55e4:	20005760 	.word	0x20005760
    55e8:	20001770 	.word	0x20001770
    55ec:	20000188 	.word	0x20000188
    55f0:	0001d8dd 	.word	0x0001d8dd

000055f4 <dropped_notify>:
{
    55f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55f6:	4b0f      	ldr	r3, [pc, #60]	; (5634 <dropped_notify+0x40>)
    55f8:	f3bf 8f5b 	dmb	ish
    55fc:	2500      	movs	r5, #0
    55fe:	e853 7f00 	ldrex	r7, [r3]
    5602:	e843 5200 	strex	r2, r5, [r3]
    5606:	2a00      	cmp	r2, #0
    5608:	d1f9      	bne.n	55fe <dropped_notify+0xa>
    560a:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    560e:	4c0a      	ldr	r4, [pc, #40]	; (5638 <dropped_notify+0x44>)
    5610:	4e0a      	ldr	r6, [pc, #40]	; (563c <dropped_notify+0x48>)
    5612:	1b36      	subs	r6, r6, r4
    5614:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    5616:	42b5      	cmp	r5, r6
    5618:	db00      	blt.n	561c <dropped_notify+0x28>
}
    561a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    561c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    561e:	795b      	ldrb	r3, [r3, #5]
    5620:	b12b      	cbz	r3, 562e <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    5622:	6823      	ldr	r3, [r4, #0]
    5624:	68db      	ldr	r3, [r3, #12]
    5626:	b113      	cbz	r3, 562e <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    5628:	4639      	mov	r1, r7
    562a:	4620      	mov	r0, r4
    562c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    562e:	3501      	adds	r5, #1
    5630:	3410      	adds	r4, #16
    5632:	e7f0      	b.n	5616 <dropped_notify+0x22>
    5634:	20001760 	.word	0x20001760
    5638:	00022730 	.word	0x00022730
    563c:	00022750 	.word	0x00022750

00005640 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    5640:	4b06      	ldr	r3, [pc, #24]	; (565c <log_dropped+0x1c>)
    5642:	f3bf 8f5b 	dmb	ish
    5646:	e853 2f00 	ldrex	r2, [r3]
    564a:	3201      	adds	r2, #1
    564c:	e843 2100 	strex	r1, r2, [r3]
    5650:	2900      	cmp	r1, #0
    5652:	d1f8      	bne.n	5646 <log_dropped+0x6>
    5654:	f3bf 8f5b 	dmb	ish
}
    5658:	4770      	bx	lr
    565a:	bf00      	nop
    565c:	20001760 	.word	0x20001760

00005660 <log_source_name_get>:
    5660:	4a04      	ldr	r2, [pc, #16]	; (5674 <log_source_name_get+0x14>)
    5662:	4b05      	ldr	r3, [pc, #20]	; (5678 <log_source_name_get+0x18>)
    5664:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    5666:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    566a:	bf34      	ite	cc
    566c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    5670:	2000      	movcs	r0, #0
}
    5672:	4770      	bx	lr
    5674:	000225d8 	.word	0x000225d8
    5678:	00022730 	.word	0x00022730

0000567c <log_backend_enable>:
	id += backend - log_backend_get(0);
    567c:	4a09      	ldr	r2, [pc, #36]	; (56a4 <log_backend_enable+0x28>)
	backend->cb->id = id;
    567e:	6843      	ldr	r3, [r0, #4]
    5680:	1a80      	subs	r0, r0, r2
{
    5682:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    5684:	1100      	asrs	r0, r0, #4
	if (!backend_attached) {
    5686:	4c08      	ldr	r4, [pc, #32]	; (56a8 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    5688:	6019      	str	r1, [r3, #0]
	id += backend - log_backend_get(0);
    568a:	3001      	adds	r0, #1
	backend->cb->active = true;
    568c:	2201      	movs	r2, #1
	log_backend_id_set(backend, id);
    568e:	7118      	strb	r0, [r3, #4]
    5690:	715a      	strb	r2, [r3, #5]
	if (!backend_attached) {
    5692:	7823      	ldrb	r3, [r4, #0]
    5694:	b913      	cbnz	r3, 569c <log_backend_enable+0x20>
    5696:	4805      	ldr	r0, [pc, #20]	; (56ac <log_backend_enable+0x30>)
    5698:	f016 fd82 	bl	1c1a0 <z_impl_k_sem_give>
	backend_attached = true;
    569c:	2301      	movs	r3, #1
    569e:	7023      	strb	r3, [r4, #0]
}
    56a0:	bd10      	pop	{r4, pc}
    56a2:	bf00      	nop
    56a4:	00022730 	.word	0x00022730
    56a8:	20002fc5 	.word	0x20002fc5
    56ac:	200008a0 	.word	0x200008a0

000056b0 <log_init>:
{
    56b0:	b570      	push	{r4, r5, r6, lr}
    56b2:	4b11      	ldr	r3, [pc, #68]	; (56f8 <log_init+0x48>)
    56b4:	f3bf 8f5b 	dmb	ish
    56b8:	e853 5f00 	ldrex	r5, [r3]
    56bc:	1c6a      	adds	r2, r5, #1
    56be:	e843 2100 	strex	r1, r2, [r3]
    56c2:	2900      	cmp	r1, #0
    56c4:	d1f8      	bne.n	56b8 <log_init+0x8>
    56c6:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    56ca:	b92d      	cbnz	r5, 56d8 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    56cc:	4c0b      	ldr	r4, [pc, #44]	; (56fc <log_init+0x4c>)
    56ce:	4e0c      	ldr	r6, [pc, #48]	; (5700 <log_init+0x50>)
    56d0:	1b36      	subs	r6, r6, r4
    56d2:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    56d4:	42b5      	cmp	r5, r6
    56d6:	db00      	blt.n	56da <log_init+0x2a>
}
    56d8:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    56da:	7b23      	ldrb	r3, [r4, #12]
    56dc:	b14b      	cbz	r3, 56f2 <log_init+0x42>
			if (backend->api->init != NULL) {
    56de:	6823      	ldr	r3, [r4, #0]
    56e0:	695b      	ldr	r3, [r3, #20]
    56e2:	b10b      	cbz	r3, 56e8 <log_init+0x38>
				backend->api->init(backend);
    56e4:	4620      	mov	r0, r4
    56e6:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    56e8:	2204      	movs	r2, #4
    56ea:	2100      	movs	r1, #0
    56ec:	4620      	mov	r0, r4
    56ee:	f7ff ffc5 	bl	567c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    56f2:	3501      	adds	r5, #1
    56f4:	3410      	adds	r4, #16
    56f6:	e7ed      	b.n	56d4 <log_init+0x24>
    56f8:	20001764 	.word	0x20001764
    56fc:	00022730 	.word	0x00022730
    5700:	00022750 	.word	0x00022750

00005704 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    5704:	4b16      	ldr	r3, [pc, #88]	; (5760 <log_strdup+0x5c>)
    5706:	4298      	cmp	r0, r3
{
    5708:	b537      	push	{r0, r1, r2, r4, r5, lr}
    570a:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    570c:	d302      	bcc.n	5714 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    570e:	4b15      	ldr	r3, [pc, #84]	; (5764 <log_strdup+0x60>)
    5710:	4298      	cmp	r0, r3
    5712:	d320      	bcc.n	5756 <log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    5714:	4814      	ldr	r0, [pc, #80]	; (5768 <log_strdup+0x64>)
    5716:	2200      	movs	r2, #0
    5718:	2300      	movs	r3, #0
    571a:	a901      	add	r1, sp, #4
    571c:	f016 f892 	bl	1b844 <k_mem_slab_alloc>
	if (err != 0) {
    5720:	4605      	mov	r5, r0
    5722:	b9d8      	cbnz	r0, 575c <log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5724:	2201      	movs	r2, #1
    5726:	9b01      	ldr	r3, [sp, #4]
    5728:	f3bf 8f5b 	dmb	ish
    572c:	e853 1f00 	ldrex	r1, [r3]
    5730:	e843 2000 	strex	r0, r2, [r3]
    5734:	2800      	cmp	r0, #0
    5736:	d1f9      	bne.n	572c <log_strdup+0x28>
    5738:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    573c:	9801      	ldr	r0, [sp, #4]
    573e:	4621      	mov	r1, r4
    5740:	2241      	movs	r2, #65	; 0x41
    5742:	3004      	adds	r0, #4
    5744:	f019 fe89 	bl	1f45a <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    5748:	9c01      	ldr	r4, [sp, #4]
    574a:	237e      	movs	r3, #126	; 0x7e
    574c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    5750:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	return dup->buf;
    5754:	3404      	adds	r4, #4
}
    5756:	4620      	mov	r0, r4
    5758:	b003      	add	sp, #12
    575a:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    575c:	4c03      	ldr	r4, [pc, #12]	; (576c <log_strdup+0x68>)
    575e:	e7fa      	b.n	5756 <log_strdup+0x52>
    5760:	000223cc 	.word	0x000223cc
    5764:	00025fdc 	.word	0x00025fdc
    5768:	20001770 	.word	0x20001770
    576c:	000240ea 	.word	0x000240ea

00005770 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    5770:	b150      	cbz	r0, 5788 <log_is_strdup+0x18>
    5772:	4b06      	ldr	r3, [pc, #24]	; (578c <log_is_strdup+0x1c>)
    5774:	4298      	cmp	r0, r3
    5776:	d306      	bcc.n	5786 <log_is_strdup+0x16>
    5778:	f503 7390 	add.w	r3, r3, #288	; 0x120
    577c:	4298      	cmp	r0, r3
    577e:	bf2c      	ite	cs
    5780:	2000      	movcs	r0, #0
    5782:	2001      	movcc	r0, #1
    5784:	4770      	bx	lr
    5786:	2000      	movs	r0, #0
}
    5788:	4770      	bx	lr
    578a:	bf00      	nop
    578c:	20005760 	.word	0x20005760

00005790 <z_impl_log_process>:
{
    5790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    5794:	4b4d      	ldr	r3, [pc, #308]	; (58cc <z_impl_log_process+0x13c>)
    5796:	781b      	ldrb	r3, [r3, #0]
{
    5798:	b085      	sub	sp, #20
    579a:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    579c:	b903      	cbnz	r3, 57a0 <z_impl_log_process+0x10>
    579e:	b360      	cbz	r0, 57fa <z_impl_log_process+0x6a>
    57a0:	f04f 0320 	mov.w	r3, #32
    57a4:	f3ef 8611 	mrs	r6, BASEPRI
    57a8:	f383 8811 	msr	BASEPRI, r3
    57ac:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    57b0:	4847      	ldr	r0, [pc, #284]	; (58d0 <z_impl_log_process+0x140>)
    57b2:	f018 f884 	bl	1d8be <log_list_head_get>
    57b6:	4605      	mov	r5, r0
	__asm__ volatile(
    57b8:	f386 8811 	msr	BASEPRI, r6
    57bc:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    57c0:	b178      	cbz	r0, 57e2 <z_impl_log_process+0x52>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    57c2:	f3bf 8f5b 	dmb	ish
    57c6:	4b43      	ldr	r3, [pc, #268]	; (58d4 <z_impl_log_process+0x144>)
    57c8:	e853 2f00 	ldrex	r2, [r3]
    57cc:	3a01      	subs	r2, #1
    57ce:	e843 2100 	strex	r1, r2, [r3]
    57d2:	2900      	cmp	r1, #0
    57d4:	d1f8      	bne.n	57c8 <z_impl_log_process+0x38>
    57d6:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    57da:	b194      	cbz	r4, 5802 <z_impl_log_process+0x72>
	log_msg_put(msg);
    57dc:	4628      	mov	r0, r5
    57de:	f018 f9a7 	bl	1db30 <log_msg_put>
	if (!bypass && dropped_cnt) {
    57e2:	b924      	cbnz	r4, 57ee <z_impl_log_process+0x5e>
    57e4:	4b3c      	ldr	r3, [pc, #240]	; (58d8 <z_impl_log_process+0x148>)
    57e6:	681b      	ldr	r3, [r3, #0]
    57e8:	b10b      	cbz	r3, 57ee <z_impl_log_process+0x5e>
		dropped_notify();
    57ea:	f7ff ff03 	bl	55f4 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    57ee:	4838      	ldr	r0, [pc, #224]	; (58d0 <z_impl_log_process+0x140>)
    57f0:	f018 f863 	bl	1d8ba <log_list_head_peek>
    57f4:	1e04      	subs	r4, r0, #0
    57f6:	bf18      	it	ne
    57f8:	2401      	movne	r4, #1
}
    57fa:	4620      	mov	r0, r4
    57fc:	b005      	add	sp, #20
    57fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    5802:	4b36      	ldr	r3, [pc, #216]	; (58dc <z_impl_log_process+0x14c>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    5804:	781b      	ldrb	r3, [r3, #0]
    5806:	b9e3      	cbnz	r3, 5842 <z_impl_log_process+0xb2>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5808:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    580a:	07db      	lsls	r3, r3, #31
    580c:	d419      	bmi.n	5842 <z_impl_log_process+0xb2>
	msg_str = log_msg_str_get(msg);
    580e:	f018 f9a2 	bl	1db56 <log_msg_str_get>
    5812:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    5814:	4628      	mov	r0, r5
    5816:	f018 f969 	bl	1daec <log_msg_nargs_get>
    581a:	4601      	mov	r1, r0
    581c:	4638      	mov	r0, r7
    581e:	f018 f861 	bl	1d8e4 <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    5822:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 58fc <z_impl_log_process+0x16c>
    5826:	4b2e      	ldr	r3, [pc, #184]	; (58e0 <z_impl_log_process+0x150>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    5828:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 5900 <z_impl_log_process+0x170>
    582c:	eba3 0308 	sub.w	r3, r3, r8
    5830:	08db      	lsrs	r3, r3, #3
    5832:	9303      	str	r3, [sp, #12]
    5834:	4b2b      	ldr	r3, [pc, #172]	; (58e4 <z_impl_log_process+0x154>)
    5836:	eba3 0308 	sub.w	r3, r3, r8
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    583a:	4606      	mov	r6, r0
    583c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    5840:	b936      	cbnz	r6, 5850 <z_impl_log_process+0xc0>
    5842:	4e29      	ldr	r6, [pc, #164]	; (58e8 <z_impl_log_process+0x158>)
    5844:	4f29      	ldr	r7, [pc, #164]	; (58ec <z_impl_log_process+0x15c>)
    5846:	1bbf      	subs	r7, r7, r6
    5848:	113f      	asrs	r7, r7, #4
    584a:	f04f 0800 	mov.w	r8, #0
    584e:	e03a      	b.n	58c6 <z_impl_log_process+0x136>
		idx = 31 - __builtin_clz(mask);
    5850:	fab6 f186 	clz	r1, r6
    5854:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    5858:	4649      	mov	r1, r9
    585a:	4628      	mov	r0, r5
    585c:	f018 f949 	bl	1daf2 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    5860:	4b23      	ldr	r3, [pc, #140]	; (58f0 <z_impl_log_process+0x160>)
    5862:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    5864:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    5866:	d302      	bcc.n	586e <z_impl_log_process+0xde>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    5868:	4a22      	ldr	r2, [pc, #136]	; (58f4 <z_impl_log_process+0x164>)
    586a:	4290      	cmp	r0, r2
    586c:	d31a      	bcc.n	58a4 <z_impl_log_process+0x114>
    586e:	4608      	mov	r0, r1
    5870:	f7ff ff7e 	bl	5770 <log_is_strdup>
    5874:	4602      	mov	r2, r0
    5876:	b9a8      	cbnz	r0, 58a4 <z_impl_log_process+0x114>
    5878:	4b1f      	ldr	r3, [pc, #124]	; (58f8 <z_impl_log_process+0x168>)
    587a:	4299      	cmp	r1, r3
    587c:	d012      	beq.n	58a4 <z_impl_log_process+0x114>
	return msg->hdr.ids.source_id;
    587e:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    5880:	9903      	ldr	r1, [sp, #12]
    5882:	f3c3 1389 	ubfx	r3, r3, #6, #10
    5886:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    5888:	bf38      	it	cc
    588a:	f858 2033 	ldrcc.w	r2, [r8, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    588e:	ea4f 138a 	mov.w	r3, sl, lsl #6
    5892:	f043 0301 	orr.w	r3, r3, #1
    5896:	f8ad 3000 	strh.w	r3, [sp]
    589a:	4649      	mov	r1, r9
    589c:	463b      	mov	r3, r7
    589e:	4658      	mov	r0, fp
    58a0:	f018 f87f 	bl	1d9a2 <log_3>
		mask &= ~BIT(idx);
    58a4:	2301      	movs	r3, #1
    58a6:	fa03 f109 	lsl.w	r1, r3, r9
    58aa:	ea26 0601 	bic.w	r6, r6, r1
    58ae:	e7c7      	b.n	5840 <z_impl_log_process+0xb0>
	return backend->cb->active;
    58b0:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    58b2:	795b      	ldrb	r3, [r3, #5]
    58b4:	b123      	cbz	r3, 58c0 <z_impl_log_process+0x130>
	backend->api->put(backend, msg);
    58b6:	6833      	ldr	r3, [r6, #0]
    58b8:	4629      	mov	r1, r5
    58ba:	681b      	ldr	r3, [r3, #0]
    58bc:	4630      	mov	r0, r6
    58be:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    58c0:	f108 0801 	add.w	r8, r8, #1
    58c4:	3610      	adds	r6, #16
    58c6:	45b8      	cmp	r8, r7
    58c8:	dbf2      	blt.n	58b0 <z_impl_log_process+0x120>
    58ca:	e787      	b.n	57dc <z_impl_log_process+0x4c>
    58cc:	20002fc5 	.word	0x20002fc5
    58d0:	20001768 	.word	0x20001768
    58d4:	2000175c 	.word	0x2000175c
    58d8:	20001760 	.word	0x20001760
    58dc:	20002fc6 	.word	0x20002fc6
    58e0:	00022730 	.word	0x00022730
    58e4:	000226f8 	.word	0x000226f8
    58e8:	00022730 	.word	0x00022730
    58ec:	00022750 	.word	0x00022750
    58f0:	000223cc 	.word	0x000223cc
    58f4:	00025fdc 	.word	0x00025fdc
    58f8:	000240ea 	.word	0x000240ea
    58fc:	000225d8 	.word	0x000225d8
    5900:	00024104 	.word	0x00024104

00005904 <log_process_thread_func>:
{
    5904:	b510      	push	{r4, lr}
	log_init();
    5906:	f7ff fed3 	bl	56b0 <log_init>
	return z_impl_k_current_get();
    590a:	f016 fbcf 	bl	1c0ac <z_impl_k_current_get>
	proc_tid = process_tid;
    590e:	4b0c      	ldr	r3, [pc, #48]	; (5940 <log_process_thread_func+0x3c>)
    5910:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    5912:	b130      	cbz	r0, 5922 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    5914:	4b0b      	ldr	r3, [pc, #44]	; (5944 <log_process_thread_func+0x40>)
	    process_tid &&
    5916:	681b      	ldr	r3, [r3, #0]
    5918:	2b09      	cmp	r3, #9
    591a:	dd02      	ble.n	5922 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    591c:	480a      	ldr	r0, [pc, #40]	; (5948 <log_process_thread_func+0x44>)
    591e:	f016 fc3f 	bl	1c1a0 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    5922:	4c09      	ldr	r4, [pc, #36]	; (5948 <log_process_thread_func+0x44>)
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    5924:	2000      	movs	r0, #0
    5926:	f7ff ff33 	bl	5790 <z_impl_log_process>
		if (log_process(false) == false) {
    592a:	2800      	cmp	r0, #0
    592c:	d1fa      	bne.n	5924 <log_process_thread_func+0x20>
    592e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5936:	4620      	mov	r0, r4
    5938:	f016 fc58 	bl	1c1ec <z_impl_k_sem_take>
    593c:	e7f2      	b.n	5924 <log_process_thread_func+0x20>
    593e:	bf00      	nop
    5940:	2000178c 	.word	0x2000178c
    5944:	2000175c 	.word	0x2000175c
    5948:	200008a0 	.word	0x200008a0

0000594c <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    594c:	4b29      	ldr	r3, [pc, #164]	; (59f4 <msg_finalize+0xa8>)
{
    594e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
    5950:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    5952:	8141      	strh	r1, [r0, #10]
{
    5954:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    5956:	4798      	blx	r3
    5958:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    595a:	f04f 0320 	mov.w	r3, #32
    595e:	f3ef 8511 	mrs	r5, BASEPRI
    5962:	f383 8811 	msr	BASEPRI, r3
    5966:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    596a:	4823      	ldr	r0, [pc, #140]	; (59f8 <msg_finalize+0xac>)
    596c:	4621      	mov	r1, r4
    596e:	f017 ff9a 	bl	1d8a6 <log_list_add_tail>
	__asm__ volatile(
    5972:	f385 8811 	msr	BASEPRI, r5
    5976:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    597a:	f3bf 8f5b 	dmb	ish
    597e:	4b1f      	ldr	r3, [pc, #124]	; (59fc <msg_finalize+0xb0>)
    5980:	e853 2f00 	ldrex	r2, [r3]
    5984:	3201      	adds	r2, #1
    5986:	e843 2100 	strex	r1, r2, [r3]
    598a:	2900      	cmp	r1, #0
    598c:	d1f8      	bne.n	5980 <msg_finalize+0x34>
    598e:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    5992:	4a1b      	ldr	r2, [pc, #108]	; (5a00 <msg_finalize+0xb4>)
    5994:	7812      	ldrb	r2, [r2, #0]
    5996:	b182      	cbz	r2, 59ba <msg_finalize+0x6e>
	__asm__ volatile(
    5998:	f04f 0320 	mov.w	r3, #32
    599c:	f3ef 8411 	mrs	r4, BASEPRI
    59a0:	f383 8811 	msr	BASEPRI, r3
    59a4:	f3bf 8f6f 	isb	sy
    59a8:	2000      	movs	r0, #0
    59aa:	f7ff fef1 	bl	5790 <z_impl_log_process>
	__asm__ volatile(
    59ae:	f384 8811 	msr	BASEPRI, r4
    59b2:	f3bf 8f6f 	isb	sy
}
    59b6:	b003      	add	sp, #12
    59b8:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    59ba:	4a12      	ldr	r2, [pc, #72]	; (5a04 <msg_finalize+0xb8>)
    59bc:	681b      	ldr	r3, [r3, #0]
    59be:	6812      	ldr	r2, [r2, #0]
    59c0:	2a00      	cmp	r2, #0
    59c2:	d0f8      	beq.n	59b6 <msg_finalize+0x6a>
    59c4:	2b01      	cmp	r3, #1
    59c6:	d10a      	bne.n	59de <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    59c8:	2200      	movs	r2, #0
    59ca:	2300      	movs	r3, #0
    59cc:	e9cd 2300 	strd	r2, r3, [sp]
    59d0:	480d      	ldr	r0, [pc, #52]	; (5a08 <msg_finalize+0xbc>)
    59d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    59d6:	2300      	movs	r3, #0
    59d8:	f016 ff7a 	bl	1c8d0 <z_impl_k_timer_start>
    59dc:	e7eb      	b.n	59b6 <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    59de:	2b0a      	cmp	r3, #10
    59e0:	d1e9      	bne.n	59b6 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    59e2:	4809      	ldr	r0, [pc, #36]	; (5a08 <msg_finalize+0xbc>)
    59e4:	f01c fb8f 	bl	22106 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    59e8:	4808      	ldr	r0, [pc, #32]	; (5a0c <msg_finalize+0xc0>)
}
    59ea:	b003      	add	sp, #12
    59ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    59f0:	f016 bbd6 	b.w	1c1a0 <z_impl_k_sem_give>
    59f4:	20000188 	.word	0x20000188
    59f8:	20001768 	.word	0x20001768
    59fc:	2000175c 	.word	0x2000175c
    5a00:	20002fc6 	.word	0x20002fc6
    5a04:	2000178c 	.word	0x2000178c
    5a08:	20000a08 	.word	0x20000a08
    5a0c:	200008a0 	.word	0x200008a0

00005a10 <z_impl_log_panic>:
{
    5a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    5a12:	4f0e      	ldr	r7, [pc, #56]	; (5a4c <z_impl_log_panic+0x3c>)
    5a14:	783d      	ldrb	r5, [r7, #0]
    5a16:	b975      	cbnz	r5, 5a36 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    5a18:	4c0d      	ldr	r4, [pc, #52]	; (5a50 <z_impl_log_panic+0x40>)
    5a1a:	4e0e      	ldr	r6, [pc, #56]	; (5a54 <z_impl_log_panic+0x44>)
	log_init();
    5a1c:	f7ff fe48 	bl	56b0 <log_init>
    5a20:	1b36      	subs	r6, r6, r4
    5a22:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    5a24:	42b5      	cmp	r5, r6
    5a26:	db07      	blt.n	5a38 <z_impl_log_panic+0x28>
    5a28:	2000      	movs	r0, #0
    5a2a:	f7ff feb1 	bl	5790 <z_impl_log_process>
		while (log_process(false) == true) {
    5a2e:	2800      	cmp	r0, #0
    5a30:	d1fa      	bne.n	5a28 <z_impl_log_panic+0x18>
	panic_mode = true;
    5a32:	2301      	movs	r3, #1
    5a34:	703b      	strb	r3, [r7, #0]
}
    5a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    5a38:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    5a3a:	795b      	ldrb	r3, [r3, #5]
    5a3c:	b11b      	cbz	r3, 5a46 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    5a3e:	6823      	ldr	r3, [r4, #0]
    5a40:	4620      	mov	r0, r4
    5a42:	691b      	ldr	r3, [r3, #16]
    5a44:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    5a46:	3501      	adds	r5, #1
    5a48:	3410      	adds	r4, #16
    5a4a:	e7eb      	b.n	5a24 <z_impl_log_panic+0x14>
    5a4c:	20002fc6 	.word	0x20002fc6
    5a50:	00022730 	.word	0x00022730
    5a54:	00022750 	.word	0x00022750

00005a58 <log_free>:
{
    5a58:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    5a5a:	3804      	subs	r0, #4
    5a5c:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    5a5e:	f3bf 8f5b 	dmb	ish
    5a62:	e850 3f00 	ldrex	r3, [r0]
    5a66:	1e5a      	subs	r2, r3, #1
    5a68:	e840 2100 	strex	r1, r2, [r0]
    5a6c:	2900      	cmp	r1, #0
    5a6e:	d1f8      	bne.n	5a62 <log_free+0xa>
    5a70:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    5a74:	2b01      	cmp	r3, #1
    5a76:	d103      	bne.n	5a80 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    5a78:	4803      	ldr	r0, [pc, #12]	; (5a88 <log_free+0x30>)
    5a7a:	a901      	add	r1, sp, #4
    5a7c:	f015 ff12 	bl	1b8a4 <k_mem_slab_free>
}
    5a80:	b003      	add	sp, #12
    5a82:	f85d fb04 	ldr.w	pc, [sp], #4
    5a86:	bf00      	nop
    5a88:	20001770 	.word	0x20001770

00005a8c <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    5a8c:	4902      	ldr	r1, [pc, #8]	; (5a98 <log_msg_pool_init+0xc>)
    5a8e:	4803      	ldr	r0, [pc, #12]	; (5a9c <log_msg_pool_init+0x10>)
    5a90:	23c0      	movs	r3, #192	; 0xc0
    5a92:	2220      	movs	r2, #32
    5a94:	f01b bfca 	b.w	21a2c <k_mem_slab_init>
    5a98:	20005880 	.word	0x20005880
    5a9c:	20001790 	.word	0x20001790

00005aa0 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    5aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    5aa2:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    5aa4:	4d09      	ldr	r5, [pc, #36]	; (5acc <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    5aa6:	9301      	str	r3, [sp, #4]
    5aa8:	2001      	movs	r0, #1
    5aaa:	f7ff fe71 	bl	5790 <z_impl_log_process>
    5aae:	4604      	mov	r4, r0
			log_dropped();
    5ab0:	f7ff fdc6 	bl	5640 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    5ab4:	2200      	movs	r2, #0
    5ab6:	2300      	movs	r3, #0
    5ab8:	a901      	add	r1, sp, #4
    5aba:	4628      	mov	r0, r5
    5abc:	f015 fec2 	bl	1b844 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    5ac0:	b108      	cbz	r0, 5ac6 <log_msg_no_space_handle+0x26>
    5ac2:	2c00      	cmp	r4, #0
    5ac4:	d1f0      	bne.n	5aa8 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    5ac6:	9801      	ldr	r0, [sp, #4]
    5ac8:	b003      	add	sp, #12
    5aca:	bd30      	pop	{r4, r5, pc}
    5acc:	20001790 	.word	0x20001790

00005ad0 <log_msg_chunk_alloc>:
{
    5ad0:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    5ad2:	2300      	movs	r3, #0
    5ad4:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    5ad6:	4807      	ldr	r0, [pc, #28]	; (5af4 <log_msg_chunk_alloc+0x24>)
    5ad8:	2200      	movs	r2, #0
    5ada:	2300      	movs	r3, #0
    5adc:	a901      	add	r1, sp, #4
    5ade:	f015 feb1 	bl	1b844 <k_mem_slab_alloc>
	if (err != 0) {
    5ae2:	b110      	cbz	r0, 5aea <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    5ae4:	f7ff ffdc 	bl	5aa0 <log_msg_no_space_handle>
    5ae8:	9001      	str	r0, [sp, #4]
}
    5aea:	9801      	ldr	r0, [sp, #4]
    5aec:	b003      	add	sp, #12
    5aee:	f85d fb04 	ldr.w	pc, [sp], #4
    5af2:	bf00      	nop
    5af4:	20001790 	.word	0x20001790

00005af8 <msg_free>:
{
    5af8:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5afa:	7a03      	ldrb	r3, [r0, #8]
    5afc:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
    5afe:	07dc      	lsls	r4, r3, #31
{
    5b00:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    5b02:	d41e      	bmi.n	5b42 <msg_free+0x4a>
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    5b04:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
    5b06:	092d      	lsrs	r5, r5, #4
    5b08:	d01b      	beq.n	5b42 <msg_free+0x4a>
		uint32_t smask = 0U;
    5b0a:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
    5b0c:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    5b0e:	9801      	ldr	r0, [sp, #4]
    5b10:	4631      	mov	r1, r6
    5b12:	f017 ffee 	bl	1daf2 <log_msg_arg_get>
    5b16:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    5b18:	f7ff fe2a 	bl	5770 <log_is_strdup>
    5b1c:	b170      	cbz	r0, 5b3c <msg_free+0x44>
				if (smask == 0U) {
    5b1e:	b934      	cbnz	r4, 5b2e <msg_free+0x36>
					smask = z_log_get_s_mask(
    5b20:	9b01      	ldr	r3, [sp, #4]
    5b22:	4629      	mov	r1, r5
    5b24:	6918      	ldr	r0, [r3, #16]
    5b26:	f017 fedd 	bl	1d8e4 <z_log_get_s_mask>
					if (smask == 0U) {
    5b2a:	4604      	mov	r4, r0
    5b2c:	b148      	cbz	r0, 5b42 <msg_free+0x4a>
				if (smask & BIT(i)) {
    5b2e:	fa24 f306 	lsr.w	r3, r4, r6
    5b32:	07d9      	lsls	r1, r3, #31
    5b34:	d502      	bpl.n	5b3c <msg_free+0x44>
					log_free(buf);
    5b36:	4638      	mov	r0, r7
    5b38:	f7ff ff8e 	bl	5a58 <log_free>
		for (i = 0U; i < nargs; i++) {
    5b3c:	3601      	adds	r6, #1
    5b3e:	42ae      	cmp	r6, r5
    5b40:	d3e5      	bcc.n	5b0e <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    5b42:	9b01      	ldr	r3, [sp, #4]
    5b44:	7a1a      	ldrb	r2, [r3, #8]
    5b46:	0792      	lsls	r2, r2, #30
    5b48:	d504      	bpl.n	5b54 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    5b4a:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    5b4c:	4c08      	ldr	r4, [pc, #32]	; (5b70 <msg_free+0x78>)
    5b4e:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    5b50:	9b03      	ldr	r3, [sp, #12]
    5b52:	b92b      	cbnz	r3, 5b60 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    5b54:	4806      	ldr	r0, [pc, #24]	; (5b70 <msg_free+0x78>)
    5b56:	a901      	add	r1, sp, #4
    5b58:	f015 fea4 	bl	1b8a4 <k_mem_slab_free>
}
    5b5c:	b005      	add	sp, #20
    5b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    5b60:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    5b62:	a903      	add	r1, sp, #12
    5b64:	4620      	mov	r0, r4
    5b66:	f015 fe9d 	bl	1b8a4 <k_mem_slab_free>
		cont = next;
    5b6a:	9503      	str	r5, [sp, #12]
    5b6c:	e7f0      	b.n	5b50 <msg_free+0x58>
    5b6e:	bf00      	nop
    5b70:	20001790 	.word	0x20001790

00005b74 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    5b74:	b40e      	push	{r1, r2, r3}
    5b76:	b503      	push	{r0, r1, lr}
    5b78:	ab03      	add	r3, sp, #12
    5b7a:	4601      	mov	r1, r0
    5b7c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    5b80:	4804      	ldr	r0, [pc, #16]	; (5b94 <print_formatted+0x20>)
	va_start(args, fmt);
    5b82:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    5b84:	f7fb fa7c 	bl	1080 <cbvprintf>
	va_end(args);

	return length;
}
    5b88:	b002      	add	sp, #8
    5b8a:	f85d eb04 	ldr.w	lr, [sp], #4
    5b8e:	b003      	add	sp, #12
    5b90:	4770      	bx	lr
    5b92:	bf00      	nop
    5b94:	0001dfb9 	.word	0x0001dfb9

00005b98 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    5b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b9c:	461d      	mov	r5, r3
    5b9e:	9b08      	ldr	r3, [sp, #32]
    5ba0:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5ba2:	06da      	lsls	r2, r3, #27
{
    5ba4:	4604      	mov	r4, r0
    5ba6:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5ba8:	d405      	bmi.n	5bb6 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    5baa:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    5bac:	bf4c      	ite	mi
    5bae:	492a      	ldrmi	r1, [pc, #168]	; (5c58 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    5bb0:	492a      	ldrpl	r1, [pc, #168]	; (5c5c <hexdump_line_print+0xc4>)
    5bb2:	f7ff ffdf 	bl	5b74 <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    5bb6:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 5c64 <hexdump_line_print+0xcc>
{
    5bba:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    5bbe:	45a8      	cmp	r8, r5
    5bc0:	db2a      	blt.n	5c18 <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    5bc2:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 5c68 <hexdump_line_print+0xd0>
			print_formatted(output, "%02x ", data[i]);
    5bc6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 5c6c <hexdump_line_print+0xd4>
			print_formatted(output, " ");
    5bca:	f8df a098 	ldr.w	sl, [pc, #152]	; 5c64 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5bce:	2500      	movs	r5, #0
		if (i < length) {
    5bd0:	42bd      	cmp	r5, r7
    5bd2:	d22f      	bcs.n	5c34 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    5bd4:	5d72      	ldrb	r2, [r6, r5]
    5bd6:	4649      	mov	r1, r9
    5bd8:	4620      	mov	r0, r4
    5bda:	f7ff ffcb 	bl	5b74 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5bde:	3501      	adds	r5, #1
    5be0:	2d10      	cmp	r5, #16
    5be2:	d120      	bne.n	5c26 <hexdump_line_print+0x8e>
		}
	}

	print_formatted(output, "|");
    5be4:	491e      	ldr	r1, [pc, #120]	; (5c60 <hexdump_line_print+0xc8>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    5be6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 5c64 <hexdump_line_print+0xcc>
			print_formatted(output, "%c",
    5bea:	f8df 9084 	ldr.w	r9, [pc, #132]	; 5c70 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    5bee:	4620      	mov	r0, r4
    5bf0:	f7ff ffc0 	bl	5b74 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5bf4:	2500      	movs	r5, #0
		if (i < length) {
    5bf6:	42af      	cmp	r7, r5
    5bf8:	d928      	bls.n	5c4c <hexdump_line_print+0xb4>
			char c = (char)data[i];
    5bfa:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    5bfc:	f1a2 0320 	sub.w	r3, r2, #32
    5c00:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    5c02:	bf28      	it	cs
    5c04:	222e      	movcs	r2, #46	; 0x2e
    5c06:	4649      	mov	r1, r9
    5c08:	4620      	mov	r0, r4
    5c0a:	f7ff ffb3 	bl	5b74 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5c0e:	3501      	adds	r5, #1
    5c10:	2d10      	cmp	r5, #16
    5c12:	d114      	bne.n	5c3e <hexdump_line_print+0xa6>
		}
	}
}
    5c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    5c18:	4649      	mov	r1, r9
    5c1a:	4620      	mov	r0, r4
    5c1c:	f7ff ffaa 	bl	5b74 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    5c20:	f108 0801 	add.w	r8, r8, #1
    5c24:	e7cb      	b.n	5bbe <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    5c26:	076a      	lsls	r2, r5, #29
    5c28:	d1d2      	bne.n	5bd0 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    5c2a:	4651      	mov	r1, sl
    5c2c:	4620      	mov	r0, r4
    5c2e:	f7ff ffa1 	bl	5b74 <print_formatted>
    5c32:	e7cd      	b.n	5bd0 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    5c34:	4641      	mov	r1, r8
    5c36:	4620      	mov	r0, r4
    5c38:	f7ff ff9c 	bl	5b74 <print_formatted>
    5c3c:	e7cf      	b.n	5bde <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    5c3e:	076b      	lsls	r3, r5, #29
    5c40:	d1d9      	bne.n	5bf6 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    5c42:	4641      	mov	r1, r8
    5c44:	4620      	mov	r0, r4
    5c46:	f7ff ff95 	bl	5b74 <print_formatted>
    5c4a:	e7d4      	b.n	5bf6 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    5c4c:	4641      	mov	r1, r8
    5c4e:	4620      	mov	r0, r4
    5c50:	f7ff ff90 	bl	5b74 <print_formatted>
    5c54:	e7db      	b.n	5c0e <hexdump_line_print+0x76>
    5c56:	bf00      	nop
    5c58:	00024148 	.word	0x00024148
    5c5c:	00024147 	.word	0x00024147
    5c60:	00024154 	.word	0x00024154
    5c64:	00024152 	.word	0x00024152
    5c68:	00024150 	.word	0x00024150
    5c6c:	0002414a 	.word	0x0002414a
    5c70:	00024156 	.word	0x00024156

00005c74 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    5c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c78:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    5c7a:	f011 0402 	ands.w	r4, r1, #2
{
    5c7e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    5c82:	4606      	mov	r6, r0
    5c84:	4690      	mov	r8, r2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    5c86:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    5c8a:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    5c8e:	d007      	beq.n	5ca0 <prefix_print+0x2c>
	if (!format) {
    5c90:	f011 0f44 	tst.w	r1, #68	; 0x44
    5c94:	d137      	bne.n	5d06 <prefix_print+0x92>
		length = print_formatted(output, "[%08lu] ", timestamp);
    5c96:	4933      	ldr	r1, [pc, #204]	; (5d64 <prefix_print+0xf0>)
    5c98:	461a      	mov	r2, r3
    5c9a:	f7ff ff6b 	bl	5b74 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    5c9e:	4604      	mov	r4, r0
	if (color) {
    5ca0:	f1b9 0f00 	cmp.w	r9, #0
    5ca4:	d00a      	beq.n	5cbc <prefix_print+0x48>
		const char *log_color = start && (colors[level] != NULL) ?
    5ca6:	4b30      	ldr	r3, [pc, #192]	; (5d68 <prefix_print+0xf4>)
		print_formatted(output, "%s", log_color);
    5ca8:	4930      	ldr	r1, [pc, #192]	; (5d6c <prefix_print+0xf8>)
		const char *log_color = start && (colors[level] != NULL) ?
    5caa:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(output, "%s", log_color);
    5cae:	4b30      	ldr	r3, [pc, #192]	; (5d70 <prefix_print+0xfc>)
    5cb0:	4630      	mov	r0, r6
    5cb2:	2a00      	cmp	r2, #0
    5cb4:	bf08      	it	eq
    5cb6:	461a      	moveq	r2, r3
    5cb8:	f7ff ff5c 	bl	5b74 <print_formatted>
	if (level_on) {
    5cbc:	b13d      	cbz	r5, 5cce <prefix_print+0x5a>
		total += print_formatted(output, "<%s> ", severity[level]);
    5cbe:	4b2d      	ldr	r3, [pc, #180]	; (5d74 <prefix_print+0x100>)
    5cc0:	492d      	ldr	r1, [pc, #180]	; (5d78 <prefix_print+0x104>)
    5cc2:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    5cc6:	4630      	mov	r0, r6
    5cc8:	f7ff ff54 	bl	5b74 <print_formatted>
    5ccc:	4605      	mov	r5, r0
	total += print_formatted(output,
    5cce:	f1b8 0f00 	cmp.w	r8, #0
    5cd2:	d044      	beq.n	5d5e <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    5cd4:	2301      	movs	r3, #1
    5cd6:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(output,
    5cda:	4b28      	ldr	r3, [pc, #160]	; (5d7c <prefix_print+0x108>)
    5cdc:	f017 0f10 	tst.w	r7, #16
    5ce0:	4f27      	ldr	r7, [pc, #156]	; (5d80 <prefix_print+0x10c>)
    5ce2:	bf18      	it	ne
    5ce4:	461f      	movne	r7, r3
    5ce6:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    5cea:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    5cee:	f7ff fcb7 	bl	5660 <log_source_name_get>
    5cf2:	4639      	mov	r1, r7
    5cf4:	4602      	mov	r2, r0
    5cf6:	4630      	mov	r0, r6
    5cf8:	f7ff ff3c 	bl	5b74 <print_formatted>
    5cfc:	4428      	add	r0, r5

	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    5cfe:	4420      	add	r0, r4
    5d00:	b005      	add	sp, #20
    5d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    5d06:	4a1f      	ldr	r2, [pc, #124]	; (5d84 <prefix_print+0x110>)
    5d08:	6811      	ldr	r1, [r2, #0]
    5d0a:	b331      	cbz	r1, 5d5a <prefix_print+0xe6>
		timestamp /= timestamp_div;
    5d0c:	4a1e      	ldr	r2, [pc, #120]	; (5d88 <prefix_print+0x114>)
    5d0e:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
    5d12:	6814      	ldr	r4, [r2, #0]
    5d14:	fbb3 f3f4 	udiv	r3, r3, r4
		ms = (remainder * 1000U) / freq;
    5d18:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    5d1c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    5d20:	fbb4 f2fc 	udiv	r2, r4, ip
    5d24:	fb0c 4c12 	mls	ip, ip, r2, r4
		remainder = timestamp % freq;
    5d28:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    5d2c:	fb0b f404 	mul.w	r4, fp, r4
		mins = seconds / 60U;
    5d30:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    5d34:	fbb4 faf1 	udiv	sl, r4, r1
    5d38:	fb01 441a 	mls	r4, r1, sl, r4
    5d3c:	fb0b f404 	mul.w	r4, fp, r4
		mins = seconds / 60U;
    5d40:	fbbc f3fe 	udiv	r3, ip, lr
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    5d44:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
    5d48:	e9cd a101 	strd	sl, r1, [sp, #4]
    5d4c:	fb0e c113 	mls	r1, lr, r3, ip
    5d50:	9100      	str	r1, [sp, #0]
    5d52:	490e      	ldr	r1, [pc, #56]	; (5d8c <prefix_print+0x118>)
    5d54:	f7ff ff0e 	bl	5b74 <print_formatted>
    5d58:	e7a1      	b.n	5c9e <prefix_print+0x2a>
		length = 0;
    5d5a:	4608      	mov	r0, r1
    5d5c:	e79f      	b.n	5c9e <prefix_print+0x2a>
	total += print_formatted(output,
    5d5e:	4f08      	ldr	r7, [pc, #32]	; (5d80 <prefix_print+0x10c>)
    5d60:	e7c1      	b.n	5ce6 <prefix_print+0x72>
    5d62:	bf00      	nop
    5d64:	00024167 	.word	0x00024167
    5d68:	00022928 	.word	0x00022928
    5d6c:	00024e91 	.word	0x00024e91
    5d70:	00024159 	.word	0x00024159
    5d74:	0002293c 	.word	0x0002293c
    5d78:	0002418c 	.word	0x0002418c
    5d7c:	00024163 	.word	0x00024163
    5d80:	0002415e 	.word	0x0002415e
    5d84:	200017ac 	.word	0x200017ac
    5d88:	200017b0 	.word	0x200017b0
    5d8c:	00024170 	.word	0x00024170

00005d90 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    5d90:	b538      	push	{r3, r4, r5, lr}
    5d92:	460c      	mov	r4, r1
	if (color) {
    5d94:	07e1      	lsls	r1, r4, #31
{
    5d96:	4605      	mov	r5, r0
	if (color) {
    5d98:	d503      	bpl.n	5da2 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    5d9a:	4a08      	ldr	r2, [pc, #32]	; (5dbc <postfix_print+0x2c>)
    5d9c:	4908      	ldr	r1, [pc, #32]	; (5dc0 <postfix_print+0x30>)
    5d9e:	f7ff fee9 	bl	5b74 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5da2:	06e2      	lsls	r2, r4, #27
    5da4:	d408      	bmi.n	5db8 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    5da6:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    5da8:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    5daa:	bf4c      	ite	mi
    5dac:	4905      	ldrmi	r1, [pc, #20]	; (5dc4 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    5dae:	4906      	ldrpl	r1, [pc, #24]	; (5dc8 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    5db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    5db4:	f7ff bede 	b.w	5b74 <print_formatted>
}
    5db8:	bd38      	pop	{r3, r4, r5, pc}
    5dba:	bf00      	nop
    5dbc:	00024159 	.word	0x00024159
    5dc0:	00024e91 	.word	0x00024e91
    5dc4:	00024148 	.word	0x00024148
    5dc8:	00024147 	.word	0x00024147

00005dcc <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    5dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    5dd0:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
    5dd2:	f013 0807 	ands.w	r8, r3, #7
{
    5dd6:	b08a      	sub	sp, #40	; 0x28
    5dd8:	4605      	mov	r5, r0
    5dda:	460e      	mov	r6, r1
    5ddc:	4617      	mov	r7, r2
			0 : prefix_print(output, flags, std_msg, timestamp,
    5dde:	d022      	beq.n	5e26 <log_output_msg_process+0x5a>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5de0:	7a0a      	ldrb	r2, [r1, #8]
	return msg->hdr.ids.source_id;
    5de2:	8949      	ldrh	r1, [r1, #10]
    5de4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    5de8:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5dec:	43d2      	mvns	r2, r2
    5dee:	e9cd 8300 	strd	r8, r3, [sp]
    5df2:	9102      	str	r1, [sp, #8]
    5df4:	68f3      	ldr	r3, [r6, #12]
    5df6:	f002 0201 	and.w	r2, r2, #1
    5dfa:	4639      	mov	r1, r7
    5dfc:	f7ff ff3a 	bl	5c74 <prefix_print>
    5e00:	4681      	mov	r9, r0
    5e02:	7a34      	ldrb	r4, [r6, #8]
    5e04:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    5e06:	f014 0401 	ands.w	r4, r4, #1
    5e0a:	d00e      	beq.n	5e2a <log_output_msg_process+0x5e>
		std_print(msg, output);
    5e0c:	4629      	mov	r1, r5
    5e0e:	4630      	mov	r0, r6
    5e10:	f017 ff68 	bl	1dce4 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
    5e14:	f1b8 0f00 	cmp.w	r8, #0
    5e18:	d02b      	beq.n	5e72 <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
    5e1a:	4642      	mov	r2, r8
    5e1c:	4639      	mov	r1, r7
    5e1e:	4628      	mov	r0, r5
    5e20:	f7ff ffb6 	bl	5d90 <postfix_print>
    5e24:	e025      	b.n	5e72 <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
    5e26:	46c1      	mov	r9, r8
    5e28:	e7eb      	b.n	5e02 <log_output_msg_process+0x36>
	} else if (raw_string) {
    5e2a:	f1b8 0f00 	cmp.w	r8, #0
    5e2e:	d126      	bne.n	5e7e <log_output_msg_process+0xb2>
	size_t offset = 0;
    5e30:	4627      	mov	r7, r4
		length = output->size;
    5e32:	68eb      	ldr	r3, [r5, #12]
    5e34:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    5e36:	aa06      	add	r2, sp, #24
    5e38:	463b      	mov	r3, r7
    5e3a:	68a9      	ldr	r1, [r5, #8]
    5e3c:	4630      	mov	r0, r6
    5e3e:	f017 ff3d 	bl	1dcbc <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    5e42:	9a06      	ldr	r2, [sp, #24]
    5e44:	686b      	ldr	r3, [r5, #4]
    5e46:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    5e48:	b13a      	cbz	r2, 5e5a <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
    5e4a:	68ab      	ldr	r3, [r5, #8]
    5e4c:	4413      	add	r3, r2
    5e4e:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    5e52:	f1a4 030a 	sub.w	r3, r4, #10
    5e56:	425c      	negs	r4, r3
    5e58:	415c      	adcs	r4, r3
		log_output_flush(output);
    5e5a:	4628      	mov	r0, r5
    5e5c:	f018 f89f 	bl	1df9e <log_output_flush>
		offset += length;
    5e60:	9b06      	ldr	r3, [sp, #24]
    5e62:	441f      	add	r7, r3
	} while (length > 0);
    5e64:	2b00      	cmp	r3, #0
    5e66:	d1e4      	bne.n	5e32 <log_output_msg_process+0x66>
	if (eol) {
    5e68:	b11c      	cbz	r4, 5e72 <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
    5e6a:	4914      	ldr	r1, [pc, #80]	; (5ebc <log_output_msg_process+0xf0>)
    5e6c:	4628      	mov	r0, r5
    5e6e:	f7ff fe81 	bl	5b74 <print_formatted>
	}

	log_output_flush(output);
    5e72:	4628      	mov	r0, r5
}
    5e74:	b00a      	add	sp, #40	; 0x28
    5e76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    5e7a:	f018 b890 	b.w	1df9e <log_output_flush>
	print_formatted(output, "%s", log_msg_str_get(msg));
    5e7e:	4630      	mov	r0, r6
    5e80:	f017 fe69 	bl	1db56 <log_msg_str_get>
    5e84:	490e      	ldr	r1, [pc, #56]	; (5ec0 <log_output_msg_process+0xf4>)
    5e86:	4602      	mov	r2, r0
    5e88:	4628      	mov	r0, r5
    5e8a:	f7ff fe73 	bl	5b74 <print_formatted>
		length = sizeof(buf);
    5e8e:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    5e92:	aa05      	add	r2, sp, #20
    5e94:	4623      	mov	r3, r4
    5e96:	a906      	add	r1, sp, #24
    5e98:	4630      	mov	r0, r6
		length = sizeof(buf);
    5e9a:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    5e9e:	f017 ff0d 	bl	1dcbc <log_msg_hexdump_data_get>
		if (length) {
    5ea2:	9a05      	ldr	r2, [sp, #20]
    5ea4:	2a00      	cmp	r2, #0
    5ea6:	d0b8      	beq.n	5e1a <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
    5ea8:	464b      	mov	r3, r9
    5eaa:	9700      	str	r7, [sp, #0]
    5eac:	a906      	add	r1, sp, #24
    5eae:	4628      	mov	r0, r5
    5eb0:	f7ff fe72 	bl	5b98 <hexdump_line_print>
			offset += length;
    5eb4:	9b05      	ldr	r3, [sp, #20]
    5eb6:	441c      	add	r4, r3
		length = sizeof(buf);
    5eb8:	e7eb      	b.n	5e92 <log_output_msg_process+0xc6>
    5eba:	bf00      	nop
    5ebc:	00024192 	.word	0x00024192
    5ec0:	00024e91 	.word	0x00024e91

00005ec4 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    5ec4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5ec6:	f242 730f 	movw	r3, #9999	; 0x270f
    5eca:	428b      	cmp	r3, r1
    5ecc:	bf28      	it	cs
    5ece:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    5ed0:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5ed2:	4a0f      	ldr	r2, [pc, #60]	; (5f10 <log_output_dropped_process+0x4c>)
{
    5ed4:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5ed6:	2105      	movs	r1, #5
    5ed8:	4668      	mov	r0, sp
    5eda:	f017 f8b8 	bl	1d04e <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    5ede:	6863      	ldr	r3, [r4, #4]
    5ee0:	490c      	ldr	r1, [pc, #48]	; (5f14 <log_output_dropped_process+0x50>)
    5ee2:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5ee4:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    5ee6:	2204      	movs	r2, #4
    5ee8:	4628      	mov	r0, r5
    5eea:	f017 feee 	bl	1dcca <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    5eee:	6863      	ldr	r3, [r4, #4]
    5ef0:	4632      	mov	r2, r6
    5ef2:	4669      	mov	r1, sp
    5ef4:	4628      	mov	r0, r5
    5ef6:	685b      	ldr	r3, [r3, #4]
    5ef8:	f017 fee7 	bl	1dcca <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    5efc:	6863      	ldr	r3, [r4, #4]
    5efe:	4906      	ldr	r1, [pc, #24]	; (5f18 <log_output_dropped_process+0x54>)
    5f00:	685b      	ldr	r3, [r3, #4]
    5f02:	2217      	movs	r2, #23
    5f04:	4628      	mov	r0, r5
    5f06:	f017 fee0 	bl	1dcca <buffer_write>
		     output->control_block->ctx);
}
    5f0a:	b002      	add	sp, #8
    5f0c:	bd70      	pop	{r4, r5, r6, pc}
    5f0e:	bf00      	nop
    5f10:	00024a9b 	.word	0x00024a9b
    5f14:	000241cc 	.word	0x000241cc
    5f18:	000241b4 	.word	0x000241b4

00005f1c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    5f1c:	4a08      	ldr	r2, [pc, #32]	; (5f40 <log_output_timestamp_freq_set+0x24>)
{
    5f1e:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    5f20:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    5f22:	4c08      	ldr	r4, [pc, #32]	; (5f44 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    5f24:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    5f26:	2100      	movs	r1, #0
    5f28:	42a0      	cmp	r0, r4
    5f2a:	d804      	bhi.n	5f36 <log_output_timestamp_freq_set+0x1a>
    5f2c:	b101      	cbz	r1, 5f30 <log_output_timestamp_freq_set+0x14>
    5f2e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    5f30:	4b05      	ldr	r3, [pc, #20]	; (5f48 <log_output_timestamp_freq_set+0x2c>)
    5f32:	6018      	str	r0, [r3, #0]
}
    5f34:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    5f36:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    5f38:	005b      	lsls	r3, r3, #1
    5f3a:	2101      	movs	r1, #1
    5f3c:	e7f4      	b.n	5f28 <log_output_timestamp_freq_set+0xc>
    5f3e:	bf00      	nop
    5f40:	200017b0 	.word	0x200017b0
    5f44:	000f4240 	.word	0x000f4240
    5f48:	200017ac 	.word	0x200017ac

00005f4c <char_out>:
#include <sys/__assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    5f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
    5f4e:	4f07      	ldr	r7, [pc, #28]	; (5f6c <char_out+0x20>)
{
    5f50:	460d      	mov	r5, r1
    5f52:	4604      	mov	r4, r0
    5f54:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    5f56:	42b4      	cmp	r4, r6
    5f58:	d101      	bne.n	5f5e <char_out+0x12>
	}

	return length;
}
    5f5a:	4628      	mov	r0, r5
    5f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    5f5e:	6838      	ldr	r0, [r7, #0]
    5f60:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    5f64:	6883      	ldr	r3, [r0, #8]
    5f66:	685b      	ldr	r3, [r3, #4]
    5f68:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    5f6a:	e7f4      	b.n	5f56 <char_out+0xa>
    5f6c:	200017c8 	.word	0x200017c8

00005f70 <panic>:
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    5f70:	4801      	ldr	r0, [pc, #4]	; (5f78 <panic+0x8>)
    5f72:	f018 b814 	b.w	1df9e <log_output_flush>
    5f76:	bf00      	nop
    5f78:	00022968 	.word	0x00022968

00005f7c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    5f7c:	4801      	ldr	r0, [pc, #4]	; (5f84 <dropped+0x8>)
    5f7e:	f7ff bfa1 	b.w	5ec4 <log_output_dropped_process>
    5f82:	bf00      	nop
    5f84:	00022968 	.word	0x00022968

00005f88 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
    5f88:	b508      	push	{r3, lr}
    5f8a:	4803      	ldr	r0, [pc, #12]	; (5f98 <log_backend_uart_init+0x10>)
    5f8c:	f015 fac6 	bl	1b51c <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    5f90:	4b02      	ldr	r3, [pc, #8]	; (5f9c <log_backend_uart_init+0x14>)
    5f92:	6018      	str	r0, [r3, #0]
	__ASSERT_NO_MSG((void *)uart_dev);
}
    5f94:	bd08      	pop	{r3, pc}
    5f96:	bf00      	nop
    5f98:	000241d1 	.word	0x000241d1
    5f9c:	200017c8 	.word	0x200017c8

00005fa0 <put>:
{
    5fa0:	b510      	push	{r4, lr}
	log_msg_get(msg);
    5fa2:	4608      	mov	r0, r1
    5fa4:	460c      	mov	r4, r1
    5fa6:	f017 fd94 	bl	1dad2 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    5faa:	4805      	ldr	r0, [pc, #20]	; (5fc0 <put+0x20>)
    5fac:	4621      	mov	r1, r4
    5fae:	220e      	movs	r2, #14
    5fb0:	f7ff ff0c 	bl	5dcc <log_output_msg_process>
	log_msg_put(msg);
    5fb4:	4620      	mov	r0, r4
}
    5fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5fba:	f017 bdb9 	b.w	1db30 <log_msg_put>
    5fbe:	bf00      	nop
    5fc0:	00022968 	.word	0x00022968

00005fc4 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    5fc4:	4b01      	ldr	r3, [pc, #4]	; (5fcc <log_backend_rtt_init+0x8>)
    5fc6:	2201      	movs	r2, #1
    5fc8:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    5fca:	4770      	bx	lr
    5fcc:	20002fe8 	.word	0x20002fe8

00005fd0 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    5fd0:	4b02      	ldr	r3, [pc, #8]	; (5fdc <panic+0xc>)
	log_output_flush(output);
    5fd2:	4803      	ldr	r0, [pc, #12]	; (5fe0 <panic+0x10>)
    5fd4:	2201      	movs	r2, #1
    5fd6:	701a      	strb	r2, [r3, #0]
    5fd8:	f017 bfe1 	b.w	1df9e <log_output_flush>
    5fdc:	20002fe9 	.word	0x20002fe9
    5fe0:	00022990 	.word	0x00022990

00005fe4 <dropped>:
	log_output_dropped_process(output, cnt);
    5fe4:	4801      	ldr	r0, [pc, #4]	; (5fec <dropped+0x8>)
    5fe6:	f7ff bf6d 	b.w	5ec4 <log_output_dropped_process>
    5fea:	bf00      	nop
    5fec:	00022990 	.word	0x00022990

00005ff0 <put>:
{
    5ff0:	b510      	push	{r4, lr}
	log_msg_get(msg);
    5ff2:	4608      	mov	r0, r1
    5ff4:	460c      	mov	r4, r1
    5ff6:	f017 fd6c 	bl	1dad2 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    5ffa:	4805      	ldr	r0, [pc, #20]	; (6010 <put+0x20>)
    5ffc:	4621      	mov	r1, r4
    5ffe:	220e      	movs	r2, #14
    6000:	f7ff fee4 	bl	5dcc <log_output_msg_process>
	log_msg_put(msg);
    6004:	4620      	mov	r0, r4
}
    6006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    600a:	f017 bd91 	b.w	1db30 <log_msg_put>
    600e:	bf00      	nop
    6010:	00022990 	.word	0x00022990

00006014 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    6014:	4b05      	ldr	r3, [pc, #20]	; (602c <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    6016:	781b      	ldrb	r3, [r3, #0]
    6018:	b11b      	cbz	r3, 6022 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    601a:	f241 3088 	movw	r0, #5000	; 0x1388
    601e:	f01b bf1c 	b.w	21e5a <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    6022:	20a4      	movs	r0, #164	; 0xa4
    6024:	2100      	movs	r1, #0
    6026:	f016 b827 	b.w	1c078 <z_impl_k_sleep>
    602a:	bf00      	nop
    602c:	20002fe9 	.word	0x20002fe9

00006030 <data_out_block_mode>:
{
    6030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    6034:	f8df 808c 	ldr.w	r8, [pc, #140]	; 60c4 <data_out_block_mode+0x94>
	return z_impl_k_mutex_lock(mutex, timeout);
    6038:	f8df a08c 	ldr.w	sl, [pc, #140]	; 60c8 <data_out_block_mode+0x98>
{
    603c:	4607      	mov	r7, r0
    603e:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    6040:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    6042:	f898 3000 	ldrb.w	r3, [r8]
    6046:	b933      	cbnz	r3, 6056 <data_out_block_mode+0x26>
    6048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    604c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6050:	4650      	mov	r0, sl
    6052:	f015 fc51 	bl	1b8f8 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    6056:	4632      	mov	r2, r6
    6058:	4639      	mov	r1, r7
    605a:	2000      	movs	r0, #0
    605c:	f000 fc24 	bl	68a8 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
    6060:	f898 3000 	ldrb.w	r3, [r8]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    6064:	4681      	mov	r9, r0
		if (!is_sync_mode()) {
    6066:	b913      	cbnz	r3, 606e <data_out_block_mode+0x3e>
	return z_impl_k_mutex_unlock(mutex);
    6068:	4650      	mov	r0, sl
    606a:	f015 fcb7 	bl	1b9dc <z_impl_k_mutex_unlock>
		if (ret) {
    606e:	4d14      	ldr	r5, [pc, #80]	; (60c0 <data_out_block_mode+0x90>)
    6070:	f1b9 0f00 	cmp.w	r9, #0
    6074:	d018      	beq.n	60a8 <data_out_block_mode+0x78>
	host_present = true;
    6076:	2301      	movs	r3, #1
    6078:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    607a:	f898 3000 	ldrb.w	r3, [r8]
    607e:	b933      	cbnz	r3, 608e <data_out_block_mode+0x5e>
}
    6080:	4630      	mov	r0, r6
    6082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (retry_cnt == 0) {
    6086:	b95c      	cbnz	r4, 60a0 <data_out_block_mode+0x70>
		host_present = false;
    6088:	702c      	strb	r4, [r5, #0]
    608a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    608e:	2000      	movs	r0, #0
    6090:	f000 fc86 	bl	69a0 <SEGGER_RTT_HasDataUp>
    6094:	2800      	cmp	r0, #0
    6096:	d0f3      	beq.n	6080 <data_out_block_mode+0x50>
    6098:	782b      	ldrb	r3, [r5, #0]
    609a:	2b00      	cmp	r3, #0
    609c:	d1f3      	bne.n	6086 <data_out_block_mode+0x56>
    609e:	e7ef      	b.n	6080 <data_out_block_mode+0x50>
			on_failed_write(retry_cnt--);
    60a0:	3c01      	subs	r4, #1
    60a2:	f7ff ffb7 	bl	6014 <on_failed_write.part.0>
    60a6:	e7f2      	b.n	608e <data_out_block_mode+0x5e>
		} else if (host_present) {
    60a8:	782b      	ldrb	r3, [r5, #0]
    60aa:	b113      	cbz	r3, 60b2 <data_out_block_mode+0x82>
	if (retry_cnt == 0) {
    60ac:	3c01      	subs	r4, #1
    60ae:	d104      	bne.n	60ba <data_out_block_mode+0x8a>
		host_present = false;
    60b0:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    60b2:	782b      	ldrb	r3, [r5, #0]
    60b4:	2b00      	cmp	r3, #0
    60b6:	d1c4      	bne.n	6042 <data_out_block_mode+0x12>
    60b8:	e7e2      	b.n	6080 <data_out_block_mode+0x50>
    60ba:	f7ff ffab 	bl	6014 <on_failed_write.part.0>
    60be:	e7f8      	b.n	60b2 <data_out_block_mode+0x82>
    60c0:	20002fe8 	.word	0x20002fe8
    60c4:	20002fe9 	.word	0x20002fe9
    60c8:	20000874 	.word	0x20000874

000060cc <blvl_ccc_cfg_changed>:
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    60cc:	4b07      	ldr	r3, [pc, #28]	; (60ec <blvl_ccc_cfg_changed+0x20>)
    60ce:	4a08      	ldr	r2, [pc, #32]	; (60f0 <blvl_ccc_cfg_changed+0x24>)
{
	ARG_UNUSED(attr);

	bool notif_enabled = (value == BT_GATT_CCC_NOTIFY);

	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
    60d0:	4808      	ldr	r0, [pc, #32]	; (60f4 <blvl_ccc_cfg_changed+0x28>)
    60d2:	1ad2      	subs	r2, r2, r3
    60d4:	08d2      	lsrs	r2, r2, #3
    60d6:	4b08      	ldr	r3, [pc, #32]	; (60f8 <blvl_ccc_cfg_changed+0x2c>)
    60d8:	0192      	lsls	r2, r2, #6
    60da:	2901      	cmp	r1, #1
    60dc:	bf14      	ite	ne
    60de:	4601      	movne	r1, r0
    60e0:	4619      	moveq	r1, r3
    60e2:	f042 0203 	orr.w	r2, r2, #3
    60e6:	4805      	ldr	r0, [pc, #20]	; (60fc <blvl_ccc_cfg_changed+0x30>)
    60e8:	f017 bc2b 	b.w	1d942 <log_1>
    60ec:	000225d8 	.word	0x000225d8
    60f0:	000225d8 	.word	0x000225d8
    60f4:	0002425f 	.word	0x0002425f
    60f8:	00024257 	.word	0x00024257
    60fc:	00024268 	.word	0x00024268

00006100 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
    6100:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
    6102:	4c08      	ldr	r4, [pc, #32]	; (6124 <read_blvl+0x24>)
{
    6104:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
    6106:	7824      	ldrb	r4, [r4, #0]
    6108:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
    610c:	2401      	movs	r4, #1
    610e:	9402      	str	r4, [sp, #8]
    6110:	f10d 0417 	add.w	r4, sp, #23
    6114:	9401      	str	r4, [sp, #4]
    6116:	f8bd 4020 	ldrh.w	r4, [sp, #32]
    611a:	9400      	str	r4, [sp, #0]
    611c:	f01a fdab 	bl	20c76 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
    6120:	b006      	add	sp, #24
    6122:	bd10      	pop	{r4, pc}
    6124:	2000078c 	.word	0x2000078c

00006128 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    6128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    612a:	4605      	mov	r5, r0
	__asm__ volatile(
    612c:	f04f 0320 	mov.w	r3, #32
    6130:	f3ef 8611 	mrs	r6, BASEPRI
    6134:	f383 8811 	msr	BASEPRI, r3
    6138:	f3bf 8f6f 	isb	sy
	return list->head;
    613c:	4b09      	ldr	r3, [pc, #36]	; (6164 <pm_state_notify+0x3c>)
    613e:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    6140:	b15c      	cbz	r4, 615a <pm_state_notify+0x32>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    6142:	4f09      	ldr	r7, [pc, #36]	; (6168 <pm_state_notify+0x40>)
			callback = notifier->state_exit;
    6144:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    6148:	2d00      	cmp	r5, #0
    614a:	bf08      	it	eq
    614c:	4613      	moveq	r3, r2
		if (callback) {
    614e:	b10b      	cbz	r3, 6154 <pm_state_notify+0x2c>
			callback(z_power_state.state);
    6150:	7838      	ldrb	r0, [r7, #0]
    6152:	4798      	blx	r3
	return node->next;
    6154:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    6156:	2c00      	cmp	r4, #0
    6158:	d1f4      	bne.n	6144 <pm_state_notify+0x1c>
	__asm__ volatile(
    615a:	f386 8811 	msr	BASEPRI, r6
    615e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    6162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6164:	200017e0 	.word	0x200017e0
    6168:	200017e8 	.word	0x200017e8

0000616c <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    616c:	4b08      	ldr	r3, [pc, #32]	; (6190 <pm_system_resume+0x24>)
{
    616e:	b510      	push	{r4, lr}
	if (!post_ops_done) {
    6170:	681c      	ldr	r4, [r3, #0]
    6172:	b95c      	cbnz	r4, 618c <pm_system_resume+0x20>
		post_ops_done = 1;
    6174:	2201      	movs	r2, #1
    6176:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
    6178:	4b06      	ldr	r3, [pc, #24]	; (6194 <pm_system_resume+0x28>)
    617a:	e893 0003 	ldmia.w	r3, {r0, r1}
    617e:	f019 fa11 	bl	1f5a4 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    6182:	4620      	mov	r0, r4
	}
}
    6184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pm_state_notify(false);
    6188:	f7ff bfce 	b.w	6128 <pm_state_notify>
}
    618c:	bd10      	pop	{r4, pc}
    618e:	bf00      	nop
    6190:	200001e8 	.word	0x200001e8
    6194:	200017e8 	.word	0x200017e8

00006198 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    6198:	b537      	push	{r0, r1, r2, r4, r5, lr}
	z_power_state = pm_policy_next_state(ticks);
    619a:	466d      	mov	r5, sp
{
    619c:	4601      	mov	r1, r0
	z_power_state = pm_policy_next_state(ticks);
    619e:	4628      	mov	r0, r5
    61a0:	f017 ff3f 	bl	1e022 <pm_policy_next_state>
    61a4:	e895 0003 	ldmia.w	r5, {r0, r1}
    61a8:	4c0b      	ldr	r4, [pc, #44]	; (61d8 <pm_system_suspend+0x40>)
    61aa:	e884 0003 	stmia.w	r4, {r0, r1}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    61ae:	7820      	ldrb	r0, [r4, #0]
    61b0:	b180      	cbz	r0, 61d4 <pm_system_suspend+0x3c>
		LOG_DBG("No PM operations done.");
		return z_power_state.state;
	}
	post_ops_done = 0;
    61b2:	4b0a      	ldr	r3, [pc, #40]	; (61dc <pm_system_suspend+0x44>)
    61b4:	2200      	movs	r2, #0
    61b6:	601a      	str	r2, [r3, #0]
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    61b8:	f015 fcde 	bl	1bb78 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    61bc:	2001      	movs	r0, #1
    61be:	f7ff ffb3 	bl	6128 <pm_state_notify>
	pm_power_state_set(z_power_state);
    61c2:	e894 0003 	ldmia.w	r4, {r0, r1}
    61c6:	f019 f9da 	bl	1f57e <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    61ca:	f7ff ffcf 	bl	616c <pm_system_resume>
	k_sched_unlock();
    61ce:	f015 fd89 	bl	1bce4 <k_sched_unlock>

	return z_power_state.state;
    61d2:	7820      	ldrb	r0, [r4, #0]
}
    61d4:	b003      	add	sp, #12
    61d6:	bd30      	pop	{r4, r5, pc}
    61d8:	200017e8 	.word	0x200017e8
    61dc:	200001e8 	.word	0x200001e8

000061e0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    61e0:	b508      	push	{r3, lr}
    61e2:	4806      	ldr	r0, [pc, #24]	; (61fc <uart_console_init+0x1c>)
    61e4:	f015 f99a 	bl	1b51c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    61e8:	4b05      	ldr	r3, [pc, #20]	; (6200 <uart_console_init+0x20>)
    61ea:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    61ec:	4805      	ldr	r0, [pc, #20]	; (6204 <uart_console_init+0x24>)
    61ee:	f001 fa0f 	bl	7610 <__stdout_hook_install>
	__printk_hook_install(console_out);
    61f2:	4804      	ldr	r0, [pc, #16]	; (6204 <uart_console_init+0x24>)
    61f4:	f7ff f8ac 	bl	5350 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    61f8:	2000      	movs	r0, #0
    61fa:	bd08      	pop	{r3, pc}
    61fc:	000241d1 	.word	0x000241d1
    6200:	200017f0 	.word	0x200017f0
    6204:	00006209 	.word	0x00006209

00006208 <console_out>:
	if ('\n' == c) {
    6208:	280a      	cmp	r0, #10
{
    620a:	b538      	push	{r3, r4, r5, lr}
    620c:	4d07      	ldr	r5, [pc, #28]	; (622c <console_out+0x24>)
    620e:	4604      	mov	r4, r0
	if ('\n' == c) {
    6210:	d104      	bne.n	621c <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    6212:	6828      	ldr	r0, [r5, #0]
    6214:	6883      	ldr	r3, [r0, #8]
    6216:	210d      	movs	r1, #13
    6218:	685b      	ldr	r3, [r3, #4]
    621a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    621c:	6828      	ldr	r0, [r5, #0]
    621e:	6883      	ldr	r3, [r0, #8]
    6220:	b2e1      	uxtb	r1, r4
    6222:	685b      	ldr	r3, [r3, #4]
    6224:	4798      	blx	r3
}
    6226:	4620      	mov	r0, r4
    6228:	bd38      	pop	{r3, r4, r5, pc}
    622a:	bf00      	nop
    622c:	200017f0 	.word	0x200017f0

00006230 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    6230:	b508      	push	{r3, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    6232:	4804      	ldr	r0, [pc, #16]	; (6244 <rtt_console_init+0x14>)
    6234:	f7ff f88c 	bl	5350 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    6238:	4802      	ldr	r0, [pc, #8]	; (6244 <rtt_console_init+0x14>)
    623a:	f001 f9e9 	bl	7610 <__stdout_hook_install>

	return 0;
}
    623e:	2000      	movs	r0, #0
    6240:	bd08      	pop	{r3, pc}
    6242:	bf00      	nop
    6244:	00006249 	.word	0x00006249

00006248 <rtt_console_out>:
{
    6248:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    624c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 62b0 <rtt_console_out+0x68>
    6250:	4e16      	ldr	r6, [pc, #88]	; (62ac <rtt_console_out+0x64>)
	char c = (char)character;
    6252:	f88d 0007 	strb.w	r0, [sp, #7]
{
    6256:	4604      	mov	r4, r0
	char c = (char)character;
    6258:	2503      	movs	r5, #3
    625a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    625e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6262:	4640      	mov	r0, r8
    6264:	f015 fb48 	bl	1b8f8 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    6268:	2201      	movs	r2, #1
    626a:	f10d 0107 	add.w	r1, sp, #7
    626e:	2000      	movs	r0, #0
    6270:	f000 fb66 	bl	6940 <SEGGER_RTT_WriteNoLock>
    6274:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    6276:	4640      	mov	r0, r8
    6278:	f015 fbb0 	bl	1b9dc <z_impl_k_mutex_unlock>
		if (cnt) {
    627c:	b12f      	cbz	r7, 628a <rtt_console_out+0x42>
			host_present = true;
    627e:	2301      	movs	r3, #1
    6280:	7033      	strb	r3, [r6, #0]
}
    6282:	4620      	mov	r0, r4
    6284:	b002      	add	sp, #8
    6286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    628a:	7833      	ldrb	r3, [r6, #0]
    628c:	2b00      	cmp	r3, #0
    628e:	d0f8      	beq.n	6282 <rtt_console_out+0x3a>
			if (max_cnt) {
    6290:	3d01      	subs	r5, #1
    6292:	d008      	beq.n	62a6 <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
    6294:	f01b fddb 	bl	21e4e <k_is_in_isr>
    6298:	2800      	cmp	r0, #0
    629a:	d1de      	bne.n	625a <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    629c:	2100      	movs	r1, #0
    629e:	2042      	movs	r0, #66	; 0x42
    62a0:	f015 feea 	bl	1c078 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    62a4:	e7d9      	b.n	625a <rtt_console_out+0x12>
				host_present = false;
    62a6:	7035      	strb	r5, [r6, #0]
    62a8:	e7eb      	b.n	6282 <rtt_console_out+0x3a>
    62aa:	bf00      	nop
    62ac:	20002fea 	.word	0x20002fea
    62b0:	20000874 	.word	0x20000874

000062b4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    62b4:	4b08      	ldr	r3, [pc, #32]	; (62d8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    62b6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    62b8:	1ac3      	subs	r3, r0, r3
{
    62ba:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    62bc:	4907      	ldr	r1, [pc, #28]	; (62dc <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    62be:	109b      	asrs	r3, r3, #2
{
    62c0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    62c2:	4359      	muls	r1, r3
    62c4:	4806      	ldr	r0, [pc, #24]	; (62e0 <onoff_stop+0x2c>)
    62c6:	2240      	movs	r2, #64	; 0x40
    62c8:	f017 fecb 	bl	1e062 <stop>
	notify(mgr, res);
    62cc:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    62ce:	4601      	mov	r1, r0
	notify(mgr, res);
    62d0:	4620      	mov	r0, r4
}
    62d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    62d6:	4718      	bx	r3
    62d8:	20001808 	.word	0x20001808
    62dc:	b6db6db7 	.word	0xb6db6db7
    62e0:	20000790 	.word	0x20000790

000062e4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    62e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    62e6:	4c0c      	ldr	r4, [pc, #48]	; (6318 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    62e8:	4a0c      	ldr	r2, [pc, #48]	; (631c <onoff_start+0x38>)
    62ea:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    62ec:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    62ee:	9300      	str	r3, [sp, #0]
{
    62f0:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    62f2:	460b      	mov	r3, r1
    62f4:	490a      	ldr	r1, [pc, #40]	; (6320 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    62f6:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    62f8:	4361      	muls	r1, r4
{
    62fa:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    62fc:	4809      	ldr	r0, [pc, #36]	; (6324 <onoff_start+0x40>)
    62fe:	f017 fedd 	bl	1e0bc <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    6302:	1e01      	subs	r1, r0, #0
    6304:	da05      	bge.n	6312 <onoff_start+0x2e>
		notify(mgr, err);
    6306:	4630      	mov	r0, r6
    6308:	462b      	mov	r3, r5
	}
}
    630a:	b002      	add	sp, #8
    630c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    6310:	4718      	bx	r3
}
    6312:	b002      	add	sp, #8
    6314:	bd70      	pop	{r4, r5, r6, pc}
    6316:	bf00      	nop
    6318:	20001808 	.word	0x20001808
    631c:	0001e129 	.word	0x0001e129
    6320:	b6db6db7 	.word	0xb6db6db7
    6324:	20000790 	.word	0x20000790

00006328 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6328:	2200      	movs	r2, #0
{
    632a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    632c:	2101      	movs	r1, #1
{
    632e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6330:	4610      	mov	r0, r2
    6332:	f000 fd15 	bl	6d60 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    6336:	2000      	movs	r0, #0
    6338:	f000 fce0 	bl	6cfc <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    633c:	480f      	ldr	r0, [pc, #60]	; (637c <clk_init+0x54>)
    633e:	f014 fe55 	bl	1afec <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    6342:	4b0f      	ldr	r3, [pc, #60]	; (6380 <clk_init+0x58>)
    6344:	4298      	cmp	r0, r3
    6346:	d115      	bne.n	6374 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    6348:	f01b fab2 	bl	218b0 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    634c:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    634e:	490d      	ldr	r1, [pc, #52]	; (6384 <clk_init+0x5c>)
    6350:	4630      	mov	r0, r6
    6352:	f016 fed9 	bl	1d108 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    6356:	2800      	cmp	r0, #0
    6358:	db0b      	blt.n	6372 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    635a:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    635c:	4909      	ldr	r1, [pc, #36]	; (6384 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    635e:	2501      	movs	r5, #1
    6360:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    6362:	f104 001c 	add.w	r0, r4, #28
    6366:	f016 fecf 	bl	1d108 <onoff_manager_init>
		if (err < 0) {
    636a:	2800      	cmp	r0, #0
    636c:	db01      	blt.n	6372 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    636e:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    6370:	2000      	movs	r0, #0
}
    6372:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    6374:	f06f 0004 	mvn.w	r0, #4
    6378:	e7fb      	b.n	6372 <clk_init+0x4a>
    637a:	bf00      	nop
    637c:	000063c5 	.word	0x000063c5
    6380:	0bad0000 	.word	0x0bad0000
    6384:	00022b20 	.word	0x00022b20

00006388 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    6388:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    638a:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
    638c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    638e:	480b      	ldr	r0, [pc, #44]	; (63bc <clkstarted_handle.constprop.0+0x34>)
    6390:	434b      	muls	r3, r1
    6392:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    6394:	e9d4 520e 	ldrd	r5, r2, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    6398:	2600      	movs	r6, #0
	set_on_state(&sub_data->flags);
    639a:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    639c:	63a6      	str	r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    639e:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    63a0:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
    63a2:	f017 fe4b 	bl	1e03c <set_on_state>
	if (callback) {
    63a6:	b135      	cbz	r5, 63b6 <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
    63a8:	9a01      	ldr	r2, [sp, #4]
    63aa:	4805      	ldr	r0, [pc, #20]	; (63c0 <clkstarted_handle.constprop.0+0x38>)
    63ac:	462b      	mov	r3, r5
}
    63ae:	b002      	add	sp, #8
    63b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    63b4:	4718      	bx	r3
}
    63b6:	b002      	add	sp, #8
    63b8:	bd70      	pop	{r4, r5, r6, pc}
    63ba:	bf00      	nop
    63bc:	20001808 	.word	0x20001808
    63c0:	20000790 	.word	0x20000790

000063c4 <clock_event_handler>:
	switch (event) {
    63c4:	b110      	cbz	r0, 63cc <clock_event_handler+0x8>
    63c6:	2801      	cmp	r0, #1
    63c8:	d004      	beq.n	63d4 <clock_event_handler+0x10>
    63ca:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    63cc:	4b03      	ldr	r3, [pc, #12]	; (63dc <clock_event_handler+0x18>)
    63ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    63d0:	075b      	lsls	r3, r3, #29
    63d2:	d101      	bne.n	63d8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    63d4:	f7ff bfd8 	b.w	6388 <clkstarted_handle.constprop.0>
}
    63d8:	4770      	bx	lr
    63da:	bf00      	nop
    63dc:	20001808 	.word	0x20001808

000063e0 <generic_hfclk_start>:
{
    63e0:	b508      	push	{r3, lr}
	__asm__ volatile(
    63e2:	f04f 0320 	mov.w	r3, #32
    63e6:	f3ef 8111 	mrs	r1, BASEPRI
    63ea:	f383 8811 	msr	BASEPRI, r3
    63ee:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    63f2:	4a12      	ldr	r2, [pc, #72]	; (643c <generic_hfclk_start+0x5c>)
    63f4:	6813      	ldr	r3, [r2, #0]
    63f6:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    63fa:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    63fe:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    6400:	d00c      	beq.n	641c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6402:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6406:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    640a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    640e:	f013 0301 	ands.w	r3, r3, #1
    6412:	d003      	beq.n	641c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    6414:	480a      	ldr	r0, [pc, #40]	; (6440 <generic_hfclk_start+0x60>)
    6416:	f017 fe11 	bl	1e03c <set_on_state>
			already_started = true;
    641a:	2301      	movs	r3, #1
	__asm__ volatile(
    641c:	f381 8811 	msr	BASEPRI, r1
    6420:	f3bf 8f6f 	isb	sy
	if (already_started) {
    6424:	b123      	cbz	r3, 6430 <generic_hfclk_start+0x50>
}
    6426:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    642a:	2000      	movs	r0, #0
    642c:	f7ff bfac 	b.w	6388 <clkstarted_handle.constprop.0>
}
    6430:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    6434:	2001      	movs	r0, #1
    6436:	f014 bde9 	b.w	1b00c <nrfx_clock_start>
    643a:	bf00      	nop
    643c:	20001858 	.word	0x20001858
    6440:	20001848 	.word	0x20001848

00006444 <api_blocking_start>:
{
    6444:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6446:	2200      	movs	r2, #0
    6448:	2301      	movs	r3, #1
    644a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    644e:	ab04      	add	r3, sp, #16
    6450:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6454:	4a09      	ldr	r2, [pc, #36]	; (647c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6456:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    645a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    645c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6460:	f017 fe5b 	bl	1e11a <api_start>
	if (err < 0) {
    6464:	2800      	cmp	r0, #0
    6466:	db05      	blt.n	6474 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    6468:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    646c:	2300      	movs	r3, #0
    646e:	4668      	mov	r0, sp
    6470:	f015 febc 	bl	1c1ec <z_impl_k_sem_take>
}
    6474:	b007      	add	sp, #28
    6476:	f85d fb04 	ldr.w	pc, [sp], #4
    647a:	bf00      	nop
    647c:	0001e143 	.word	0x0001e143

00006480 <lfclk_start>:
{
    6480:	b510      	push	{r4, lr}
	if (!once) {
    6482:	4c07      	ldr	r4, [pc, #28]	; (64a0 <lfclk_start+0x20>)
    6484:	7823      	ldrb	r3, [r4, #0]
    6486:	b92b      	cbnz	r3, 6494 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    6488:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    648c:	f01b fce5 	bl	21e5a <z_impl_k_busy_wait>
		once = true;
    6490:	2301      	movs	r3, #1
    6492:	7023      	strb	r3, [r4, #0]
}
    6494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    6498:	2000      	movs	r0, #0
    649a:	f014 bdb7 	b.w	1b00c <nrfx_clock_start>
    649e:	bf00      	nop
    64a0:	20002feb 	.word	0x20002feb

000064a4 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    64a4:	4b09      	ldr	r3, [pc, #36]	; (64cc <generic_hfclk_stop+0x28>)
    64a6:	f3bf 8f5b 	dmb	ish
    64aa:	e853 2f00 	ldrex	r2, [r3]
    64ae:	f022 0102 	bic.w	r1, r2, #2
    64b2:	e843 1000 	strex	r0, r1, [r3]
    64b6:	2800      	cmp	r0, #0
    64b8:	d1f7      	bne.n	64aa <generic_hfclk_stop+0x6>
    64ba:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    64be:	07d3      	lsls	r3, r2, #31
    64c0:	d402      	bmi.n	64c8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    64c2:	2001      	movs	r0, #1
    64c4:	f014 bdea 	b.w	1b09c <nrfx_clock_stop>
}
    64c8:	4770      	bx	lr
    64ca:	bf00      	nop
    64cc:	20001858 	.word	0x20001858

000064d0 <z_nrf_clock_control_get_onoff>:
}
    64d0:	4a02      	ldr	r2, [pc, #8]	; (64dc <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    64d2:	b2c3      	uxtb	r3, r0
}
    64d4:	201c      	movs	r0, #28
    64d6:	fb03 2000 	mla	r0, r3, r0, r2
    64da:	4770      	bx	lr
    64dc:	20001808 	.word	0x20001808

000064e0 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    64e0:	4b09      	ldr	r3, [pc, #36]	; (6508 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
    64e2:	f3bf 8f5b 	dmb	ish
    64e6:	e853 2f00 	ldrex	r2, [r3]
    64ea:	f042 0101 	orr.w	r1, r2, #1
    64ee:	e843 1000 	strex	r0, r1, [r3]
    64f2:	2800      	cmp	r0, #0
    64f4:	d1f7      	bne.n	64e6 <z_nrf_clock_bt_ctlr_hf_request+0x6>
    64f6:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
    64fa:	0793      	lsls	r3, r2, #30
    64fc:	d402      	bmi.n	6504 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    64fe:	2001      	movs	r0, #1
    6500:	f014 bd84 	b.w	1b00c <nrfx_clock_start>
}
    6504:	4770      	bx	lr
    6506:	bf00      	nop
    6508:	20001858 	.word	0x20001858

0000650c <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    650c:	4b09      	ldr	r3, [pc, #36]	; (6534 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
    650e:	f3bf 8f5b 	dmb	ish
    6512:	e853 2f00 	ldrex	r2, [r3]
    6516:	f022 0101 	bic.w	r1, r2, #1
    651a:	e843 1000 	strex	r0, r1, [r3]
    651e:	2800      	cmp	r0, #0
    6520:	d1f7      	bne.n	6512 <z_nrf_clock_bt_ctlr_hf_release+0x6>
    6522:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
    6526:	0793      	lsls	r3, r2, #30
    6528:	d402      	bmi.n	6530 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    652a:	2001      	movs	r0, #1
    652c:	f014 bdb6 	b.w	1b09c <nrfx_clock_stop>
}
    6530:	4770      	bx	lr
    6532:	bf00      	nop
    6534:	20001858 	.word	0x20001858

00006538 <z_nrf_clock_control_lf_on>:
{
    6538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    653c:	4939      	ldr	r1, [pc, #228]	; (6624 <z_nrf_clock_control_lf_on+0xec>)
    653e:	f3bf 8f5b 	dmb	ish
    6542:	4607      	mov	r7, r0
    6544:	2201      	movs	r2, #1
    6546:	e851 3f00 	ldrex	r3, [r1]
    654a:	e841 2000 	strex	r0, r2, [r1]
    654e:	2800      	cmp	r0, #0
    6550:	d1f9      	bne.n	6546 <z_nrf_clock_control_lf_on+0xe>
    6552:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    6556:	b933      	cbnz	r3, 6566 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    6558:	4933      	ldr	r1, [pc, #204]	; (6628 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    655a:	4834      	ldr	r0, [pc, #208]	; (662c <z_nrf_clock_control_lf_on+0xf4>)
    655c:	604b      	str	r3, [r1, #4]
    655e:	60cb      	str	r3, [r1, #12]
    6560:	608a      	str	r2, [r1, #8]
    6562:	f016 fde4 	bl	1d12e <onoff_request>
	switch (start_mode) {
    6566:	1e7b      	subs	r3, r7, #1
    6568:	2b01      	cmp	r3, #1
    656a:	d82f      	bhi.n	65cc <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    656c:	2f01      	cmp	r7, #1
    656e:	d107      	bne.n	6580 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    6570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6574:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    6578:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    657c:	2b01      	cmp	r3, #1
    657e:	d025      	beq.n	65cc <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    6580:	f01b fc65 	bl	21e4e <k_is_in_isr>
    6584:	4604      	mov	r4, r0
    6586:	b918      	cbnz	r0, 6590 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    6588:	4b29      	ldr	r3, [pc, #164]	; (6630 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    658a:	781b      	ldrb	r3, [r3, #0]
    658c:	2b00      	cmp	r3, #0
    658e:	d141      	bne.n	6614 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    6590:	f04f 0320 	mov.w	r3, #32
    6594:	f3ef 8611 	mrs	r6, BASEPRI
    6598:	f383 8811 	msr	BASEPRI, r3
    659c:	f3bf 8f6f 	isb	sy
    65a0:	2401      	movs	r4, #1
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    65a2:	f8df 8090 	ldr.w	r8, [pc, #144]	; 6634 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    65a6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    65aa:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    65ae:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    65b2:	03d2      	lsls	r2, r2, #15
    65b4:	d50c      	bpl.n	65d0 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    65b6:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    65ba:	2b01      	cmp	r3, #1
    65bc:	d001      	beq.n	65c2 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    65be:	2f01      	cmp	r7, #1
    65c0:	d106      	bne.n	65d0 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    65c2:	b30c      	cbz	r4, 6608 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    65c4:	f386 8811 	msr	BASEPRI, r6
    65c8:	f3bf 8f6f 	isb	sy
}
    65cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode) {
    65d0:	b1ac      	cbz	r4, 65fe <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    65d2:	4630      	mov	r0, r6
    65d4:	f000 fc3e 	bl	6e54 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    65d8:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    65dc:	2b00      	cmp	r3, #0
    65de:	d1e4      	bne.n	65aa <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    65e0:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    65e4:	2a00      	cmp	r2, #0
    65e6:	d0e0      	beq.n	65aa <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    65e8:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    65ec:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    65f0:	2301      	movs	r3, #1
    65f2:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    65f6:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    65fa:	60ab      	str	r3, [r5, #8]
}
    65fc:	e7d5      	b.n	65aa <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    65fe:	2100      	movs	r1, #0
    6600:	2021      	movs	r0, #33	; 0x21
    6602:	f015 fd39 	bl	1c078 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    6606:	e7e7      	b.n	65d8 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    6608:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    660c:	2202      	movs	r2, #2
    660e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6612:	e7db      	b.n	65cc <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    6614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6618:	2202      	movs	r2, #2
    661a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    661e:	4606      	mov	r6, r0
}
    6620:	e7bf      	b.n	65a2 <z_nrf_clock_control_lf_on+0x6a>
    6622:	bf00      	nop
    6624:	2000185c 	.word	0x2000185c
    6628:	200017f8 	.word	0x200017f8
    662c:	20001824 	.word	0x20001824
    6630:	2000356b 	.word	0x2000356b
    6634:	e000e100 	.word	0xe000e100

00006638 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    6638:	4a04      	ldr	r2, [pc, #16]	; (664c <sys_clock_timeout_handler+0x14>)
    663a:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    663c:	1ac9      	subs	r1, r1, r3
    663e:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    6642:	4403      	add	r3, r0
    6644:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    6646:	f016 b8a5 	b.w	1c794 <sys_clock_announce>
    664a:	bf00      	nop
    664c:	20001870 	.word	0x20001870

00006650 <set_absolute_alarm>:
{
    6650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6654:	0086      	lsls	r6, r0, #2
    6656:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    665a:	f100 0450 	add.w	r4, r0, #80	; 0x50
    665e:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    6662:	00a4      	lsls	r4, r4, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6664:	b2a4      	uxth	r4, r4
    6666:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    666a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return p_reg->CC[ch];
    666e:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    6672:	f8df 806c 	ldr.w	r8, [pc, #108]	; 66e0 <set_absolute_alarm+0x90>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    6676:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    667a:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    667e:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    6680:	f8d8 9504 	ldr.w	r9, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    6684:	eba3 0309 	sub.w	r3, r3, r9
    6688:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    668c:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    6690:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    6692:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    6696:	d102      	bne.n	669e <set_absolute_alarm+0x4e>
	z_impl_k_busy_wait(usec_to_wait);
    6698:	2013      	movs	r0, #19
    669a:	f01b fbde 	bl	21e5a <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    669e:	f109 0202 	add.w	r2, r9, #2
	return (a - b) & COUNTER_MAX;
    66a2:	1aab      	subs	r3, r5, r2
    66a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    66a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    66ac:	bf88      	it	hi
    66ae:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    66b0:	2300      	movs	r3, #0
    66b2:	6023      	str	r3, [r4, #0]
    66b4:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    66b6:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    66ba:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    66be:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    66c2:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    66c6:	4599      	cmp	r9, r3
    66c8:	d006      	beq.n	66d8 <set_absolute_alarm+0x88>
	return (a - b) & COUNTER_MAX;
    66ca:	1aeb      	subs	r3, r5, r3
    66cc:	3b02      	subs	r3, #2
    66ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    66d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    66d6:	d801      	bhi.n	66dc <set_absolute_alarm+0x8c>
}
    66d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prev_cc = cc_val;
    66dc:	462b      	mov	r3, r5
    66de:	e7cf      	b.n	6680 <set_absolute_alarm+0x30>
    66e0:	40011000 	.word	0x40011000

000066e4 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    66e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    66e6:	2500      	movs	r5, #0
    return p_reg->INTENSET & mask;
    66e8:	4c10      	ldr	r4, [pc, #64]	; (672c <rtc_nrf_isr+0x48>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    66ea:	462f      	mov	r7, r5
    66ec:	4b10      	ldr	r3, [pc, #64]	; (6730 <rtc_nrf_isr+0x4c>)
    66ee:	681e      	ldr	r6, [r3, #0]
    66f0:	b105      	cbz	r5, 66f4 <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    66f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    66f4:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    66f8:	03d2      	lsls	r2, r2, #15
    66fa:	d5fa      	bpl.n	66f2 <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    66fc:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    6700:	2a00      	cmp	r2, #0
    6702:	d0f6      	beq.n	66f2 <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6704:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    6708:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    670c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6710:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
    6714:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    6718:	2501      	movs	r5, #1
			if (handler) {
    671a:	b126      	cbz	r6, 6726 <rtc_nrf_isr+0x42>
				handler(chan, cc_val,
    671c:	685a      	ldr	r2, [r3, #4]
    671e:	601f      	str	r7, [r3, #0]
    6720:	2000      	movs	r0, #0
    6722:	47b0      	blx	r6
    6724:	e7e2      	b.n	66ec <rtc_nrf_isr+0x8>
    6726:	601e      	str	r6, [r3, #0]
}
    6728:	e7e3      	b.n	66f2 <rtc_nrf_isr+0xe>
    672a:	bf00      	nop
    672c:	40011000 	.word	0x40011000
    6730:	20001864 	.word	0x20001864

00006734 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    6734:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    6736:	4c0f      	ldr	r4, [pc, #60]	; (6774 <sys_clock_driver_init+0x40>)
    6738:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    673a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    673e:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    6742:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    6746:	4b0c      	ldr	r3, [pc, #48]	; (6778 <sys_clock_driver_init+0x44>)
    6748:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    674c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    6750:	2101      	movs	r1, #1
    6752:	462a      	mov	r2, r5
    6754:	2011      	movs	r0, #17
    6756:	f000 fb03 	bl	6d60 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    675a:	2011      	movs	r0, #17
    675c:	f000 face 	bl	6cfc <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    6760:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    6762:	4a06      	ldr	r2, [pc, #24]	; (677c <sys_clock_driver_init+0x48>)
    6764:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    6766:	2002      	movs	r0, #2
    6768:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    676a:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    676c:	f7ff fee4 	bl	6538 <z_nrf_clock_control_lf_on>

	return 0;
}
    6770:	4628      	mov	r0, r5
    6772:	bd38      	pop	{r3, r4, r5, pc}
    6774:	40011000 	.word	0x40011000
    6778:	e000e100 	.word	0xe000e100
    677c:	2000186c 	.word	0x2000186c

00006780 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    6780:	4a13      	ldr	r2, [pc, #76]	; (67d0 <sys_clock_set_timeout+0x50>)
    6782:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    6786:	bf14      	ite	ne
    6788:	4603      	movne	r3, r0
    678a:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    678c:	3b01      	subs	r3, #1
    678e:	2b00      	cmp	r3, #0
    6790:	dd1c      	ble.n	67cc <sys_clock_set_timeout+0x4c>
    6792:	4293      	cmp	r3, r2
    6794:	bfa8      	it	ge
    6796:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    6798:	4a0e      	ldr	r2, [pc, #56]	; (67d4 <sys_clock_set_timeout+0x54>)
    679a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    679e:	4a0e      	ldr	r2, [pc, #56]	; (67d8 <sys_clock_set_timeout+0x58>)
    67a0:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    67a2:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    67a4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    67a8:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
		ticks = 0;
    67ac:	bf18      	it	ne
    67ae:	2300      	movne	r3, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    67b0:	3201      	adds	r2, #1
    67b2:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    67b4:	4a09      	ldr	r2, [pc, #36]	; (67dc <sys_clock_set_timeout+0x5c>)
    67b6:	480a      	ldr	r0, [pc, #40]	; (67e0 <sys_clock_set_timeout+0x60>)
    67b8:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    67ba:	2000      	movs	r0, #0
    67bc:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    67be:	4a04      	ldr	r2, [pc, #16]	; (67d0 <sys_clock_set_timeout+0x50>)
    67c0:	4293      	cmp	r3, r2
    67c2:	bf94      	ite	ls
    67c4:	18c9      	addls	r1, r1, r3
    67c6:	1889      	addhi	r1, r1, r2
    67c8:	f7ff bf42 	b.w	6650 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    67cc:	2300      	movs	r3, #0
    67ce:	e7e3      	b.n	6798 <sys_clock_set_timeout+0x18>
    67d0:	007fffff 	.word	0x007fffff
    67d4:	40011000 	.word	0x40011000
    67d8:	20001870 	.word	0x20001870
    67dc:	20001864 	.word	0x20001864
    67e0:	00006639 	.word	0x00006639

000067e4 <sys_clock_elapsed>:
	__asm__ volatile(
    67e4:	f04f 0220 	mov.w	r2, #32
    67e8:	f3ef 8311 	mrs	r3, BASEPRI
    67ec:	f382 8811 	msr	BASEPRI, r2
    67f0:	f3bf 8f6f 	isb	sy
    67f4:	4a06      	ldr	r2, [pc, #24]	; (6810 <sys_clock_elapsed+0x2c>)
    67f6:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    67fa:	4a06      	ldr	r2, [pc, #24]	; (6814 <sys_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    67fc:	6812      	ldr	r2, [r2, #0]
    67fe:	1a80      	subs	r0, r0, r2
    6800:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    6804:	f383 8811 	msr	BASEPRI, r3
    6808:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    680c:	4770      	bx	lr
    680e:	bf00      	nop
    6810:	40011000 	.word	0x40011000
    6814:	20001870 	.word	0x20001870

00006818 <sys_clock_cycle_get_32>:
	__asm__ volatile(
    6818:	f04f 0320 	mov.w	r3, #32
    681c:	f3ef 8211 	mrs	r2, BASEPRI
    6820:	f383 8811 	msr	BASEPRI, r3
    6824:	f3bf 8f6f 	isb	sy

uint32_t sys_clock_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    6828:	4906      	ldr	r1, [pc, #24]	; (6844 <sys_clock_cycle_get_32+0x2c>)
    682a:	4b07      	ldr	r3, [pc, #28]	; (6848 <sys_clock_cycle_get_32+0x30>)
    682c:	6808      	ldr	r0, [r1, #0]
    682e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    6832:	f382 8811 	msr	BASEPRI, r2
    6836:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    683a:	1a1b      	subs	r3, r3, r0
    683c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    6840:	4418      	add	r0, r3
    6842:	4770      	bx	lr
    6844:	20001870 	.word	0x20001870
    6848:	40011000 	.word	0x40011000

0000684c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    684c:	b538      	push	{r3, r4, r5, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    684e:	4c10      	ldr	r4, [pc, #64]	; (6890 <_DoInit+0x44>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    6850:	4a10      	ldr	r2, [pc, #64]	; (6894 <_DoInit+0x48>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    6852:	4911      	ldr	r1, [pc, #68]	; (6898 <_DoInit+0x4c>)
  p->aUp[0].sName         = "Terminal";
    6854:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    6856:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    6858:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    685c:	4b0f      	ldr	r3, [pc, #60]	; (689c <_DoInit+0x50>)
    685e:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    6860:	f44f 6380 	mov.w	r3, #1024	; 0x400
    6864:	6223      	str	r3, [r4, #32]
  p->aDown[0].sName         = "Terminal";
    6866:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].RdOff         = 0u;
    6868:	2300      	movs	r3, #0
  p->aDown[0].pBuffer       = _acDownBuffer;
    686a:	4a0d      	ldr	r2, [pc, #52]	; (68a0 <_DoInit+0x54>)
  p->aUp[0].RdOff         = 0u;
    686c:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    686e:	2520      	movs	r5, #32
  strcpy(&p->acID[7], "RTT");
    6870:	1de0      	adds	r0, r4, #7
  p->aUp[0].WrOff         = 0u;
    6872:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6874:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].pBuffer       = _acDownBuffer;
    6876:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].RdOff         = 0u;
    6878:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    687a:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    687c:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    687e:	66a5      	str	r5, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    6880:	f018 fde1 	bl	1f446 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    6884:	4907      	ldr	r1, [pc, #28]	; (68a4 <_DoInit+0x58>)
    6886:	4620      	mov	r0, r4
    6888:	f018 fddd 	bl	1f446 <strcpy>
  p->acID[6] = ' ';
    688c:	71a5      	strb	r5, [r4, #6]
}
    688e:	bd38      	pop	{r3, r4, r5, pc}
    6890:	20001874 	.word	0x20001874
    6894:	000242b1 	.word	0x000242b1
    6898:	000242ba 	.word	0x000242ba
    689c:	2000300c 	.word	0x2000300c
    68a0:	20002fec 	.word	0x20002fec
    68a4:	000242be 	.word	0x000242be

000068a8 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    68a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    68ac:	4f23      	ldr	r7, [pc, #140]	; (693c <SEGGER_RTT_WriteSkipNoLock+0x94>)
    68ae:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    68b2:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    68b4:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    68b8:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    68ba:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    68bc:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    68be:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    68c0:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    68c2:	d834      	bhi.n	692e <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    68c4:	f8d2 a020 	ldr.w	sl, [r2, #32]
    68c8:	ebaa 0905 	sub.w	r9, sl, r5
    68cc:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    68d0:	4294      	cmp	r4, r2
    68d2:	d811      	bhi.n	68f8 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    68d4:	f04f 0918 	mov.w	r9, #24
    68d8:	fb06 9309 	mla	r3, r6, r9, r9
    68dc:	443b      	add	r3, r7
    68de:	4622      	mov	r2, r4
    68e0:	6858      	ldr	r0, [r3, #4]
    68e2:	4641      	mov	r1, r8
    68e4:	4428      	add	r0, r5
    68e6:	f018 fdf7 	bl	1f4d8 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    68ea:	fb09 7606 	mla	r6, r9, r6, r7
    68ee:	442c      	add	r4, r5
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
    68f0:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    68f2:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    68f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    68f8:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    68fa:	429c      	cmp	r4, r3
    68fc:	d81b      	bhi.n	6936 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    68fe:	fb00 bb0b 	mla	fp, r0, fp, fp
    6902:	44bb      	add	fp, r7
    6904:	464a      	mov	r2, r9
    6906:	f8db 0004 	ldr.w	r0, [fp, #4]
    690a:	442c      	add	r4, r5
    690c:	4428      	add	r0, r5
    690e:	f018 fde3 	bl	1f4d8 <memcpy>
      if (NumBytes) {
    6912:	ebb4 040a 	subs.w	r4, r4, sl
    6916:	d006      	beq.n	6926 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
    6918:	f8db 0004 	ldr.w	r0, [fp, #4]
    691c:	4622      	mov	r2, r4
    691e:	eb08 0109 	add.w	r1, r8, r9
    6922:	f018 fdd9 	bl	1f4d8 <memcpy>
      pRing->WrOff = NumBytes;
    6926:	2018      	movs	r0, #24
    6928:	fb00 7606 	mla	r6, r0, r6, r7
    692c:	e7e0      	b.n	68f0 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    692e:	3b01      	subs	r3, #1
    6930:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    6932:	42a3      	cmp	r3, r4
    6934:	d2ce      	bcs.n	68d4 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    6936:	2000      	movs	r0, #0
    6938:	e7dc      	b.n	68f4 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    693a:	bf00      	nop
    693c:	20001874 	.word	0x20001874

00006940 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6940:	b570      	push	{r4, r5, r6, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    6942:	4b16      	ldr	r3, [pc, #88]	; (699c <SEGGER_RTT_WriteNoLock+0x5c>)
    6944:	2418      	movs	r4, #24
    6946:	fb00 4504 	mla	r5, r0, r4, r4
    694a:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    694c:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6950:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    6952:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    6954:	2c01      	cmp	r4, #1
    6956:	d00e      	beq.n	6976 <SEGGER_RTT_WriteNoLock+0x36>
    6958:	2c02      	cmp	r4, #2
    695a:	d018      	beq.n	698e <SEGGER_RTT_WriteNoLock+0x4e>
    695c:	b9e4      	cbnz	r4, 6998 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    695e:	4628      	mov	r0, r5
    6960:	f017 fbf4 	bl	1e14c <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    6964:	4286      	cmp	r6, r0
    6966:	d804      	bhi.n	6972 <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    6968:	4632      	mov	r2, r6
    696a:	4628      	mov	r0, r5
    696c:	f017 fbf7 	bl	1e15e <_WriteNoCheck>
    6970:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    6972:	4620      	mov	r0, r4
    6974:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    6976:	4628      	mov	r0, r5
    6978:	f017 fbe8 	bl	1e14c <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    697c:	4286      	cmp	r6, r0
    697e:	4634      	mov	r4, r6
    6980:	bf28      	it	cs
    6982:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    6984:	4622      	mov	r2, r4
    6986:	4628      	mov	r0, r5
    6988:	f017 fbe9 	bl	1e15e <_WriteNoCheck>
    break;
    698c:	e7f1      	b.n	6972 <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    698e:	4628      	mov	r0, r5
}
    6990:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    6994:	f017 bbff 	b.w	1e196 <_WriteBlocking>
  switch (pRing->Flags) {
    6998:	2400      	movs	r4, #0
  return Status;
    699a:	e7ea      	b.n	6972 <SEGGER_RTT_WriteNoLock+0x32>
    699c:	20001874 	.word	0x20001874

000069a0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    69a0:	4b03      	ldr	r3, [pc, #12]	; (69b0 <SEGGER_RTT_HasDataUp+0x10>)
    69a2:	2218      	movs	r2, #24
    69a4:	fb02 3000 	mla	r0, r2, r0, r3
    69a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
  return pRing->WrOff - v;
    69aa:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    69ac:	1ac0      	subs	r0, r0, r3
    69ae:	4770      	bx	lr
    69b0:	20001874 	.word	0x20001874

000069b4 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    69b4:	4b01      	ldr	r3, [pc, #4]	; (69bc <uECC_get_rng+0x8>)
    69b6:	6818      	ldr	r0, [r3, #0]
    69b8:	4770      	bx	lr
    69ba:	bf00      	nop
    69bc:	200001ec 	.word	0x200001ec

000069c0 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    69c0:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    69c4:	2208      	movs	r2, #8
{
    69c6:	b088      	sub	sp, #32
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    69c8:	f017 fdcd 	bl	1e566 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    69cc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    69ce:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    69d0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    69d2:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    69d4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    69d6:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    69d8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    69da:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    69dc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    69de:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    69e0:	4613      	mov	r3, r2
    69e2:	466a      	mov	r2, sp
{
    69e4:	460c      	mov	r4, r1
    69e6:	4681      	mov	r9, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
    69e8:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    69ea:	4611      	mov	r1, r2
    69ec:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
    69ee:	e9cd 7701 	strd	r7, r7, [sp, #4]
    69f2:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    69f4:	f017 fcc3 	bl	1e37e <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    69f8:	4649      	mov	r1, r9
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    69fa:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    69fc:	4648      	mov	r0, r9
    69fe:	f017 fcbe 	bl	1e37e <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    6a02:	6b21      	ldr	r1, [r4, #48]	; 0x30
    6a04:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
    6a06:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6a08:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
    6a0a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    6a0c:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
    6a0e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6a10:	4405      	add	r5, r0
	tmp[7] = 0;
    6a12:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6a16:	4610      	mov	r0, r2
    6a18:	4611      	mov	r1, r2
    6a1a:	f017 fcb0 	bl	1e37e <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6a1e:	4649      	mov	r1, r9
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6a20:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6a22:	4648      	mov	r0, r9
    6a24:	f017 fcab 	bl	1e37e <uECC_vli_add>
    6a28:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
    6a2a:	6a20      	ldr	r0, [r4, #32]
    6a2c:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
    6a2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6a30:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
    6a32:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6a34:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    6a36:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    6a38:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
    6a3a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    6a3c:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6a3e:	4648      	mov	r0, r9
	tmp[3] = tmp[4] = tmp[5] = 0;
    6a40:	e9cd 7704 	strd	r7, r7, [sp, #16]
    6a44:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6a46:	f017 fc9a 	bl	1e37e <uECC_vli_add>
    6a4a:	182e      	adds	r6, r5, r0

	/* s4 */
	tmp[0] = product[9];
    6a4c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6a4e:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
    6a50:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6a52:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
    6a54:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6a56:	9002      	str	r0, [sp, #8]
	tmp[3] = product[13];
	tmp[4] = product[14];
    6a58:	6ba0      	ldr	r0, [r4, #56]	; 0x38
	tmp[3] = product[13];
    6a5a:	6b65      	ldr	r5, [r4, #52]	; 0x34
	tmp[4] = product[14];
    6a5c:	9004      	str	r0, [sp, #16]
	tmp[5] = product[15];
    6a5e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    6a60:	9503      	str	r5, [sp, #12]
	tmp[6] = product[13];
    6a62:	e9cd 0505 	strd	r0, r5, [sp, #20]
	tmp[7] = product[8];
    6a66:	6a20      	ldr	r0, [r4, #32]
    6a68:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6a6a:	4648      	mov	r0, r9
    6a6c:	f017 fc87 	bl	1e37e <uECC_vli_add>
    6a70:	1835      	adds	r5, r6, r0

	/* d1 */
	tmp[0] = product[11];
    6a72:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6a74:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
    6a76:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6a78:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
    6a7a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6a7c:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    6a7e:	6a20      	ldr	r0, [r4, #32]
    6a80:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
    6a82:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6a84:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6a86:	4648      	mov	r0, r9
	tmp[3] = tmp[4] = tmp[5] = 0;
    6a88:	e9cd 7704 	strd	r7, r7, [sp, #16]
    6a8c:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6a8e:	f017 fda0 	bl	1e5d2 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    6a92:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6a94:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    6a96:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6a98:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    6a9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6a9c:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    6a9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6aa0:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    6aa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6aa4:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    6aa6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6aa8:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6aaa:	1a2e      	subs	r6, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6aac:	2308      	movs	r3, #8
    6aae:	4648      	mov	r0, r9
	tmp[4] = tmp[5] = 0;
    6ab0:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6ab4:	f017 fd8d 	bl	1e5d2 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    6ab8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6aba:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    6abc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6abe:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    6ac0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6ac2:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    6ac4:	6a23      	ldr	r3, [r4, #32]
    6ac6:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    6ac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6aca:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    6acc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    6ace:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    6ad2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6ad4:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6ad6:	1a36      	subs	r6, r6, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6ad8:	2308      	movs	r3, #8
    6ada:	4648      	mov	r0, r9
    6adc:	f017 fd79 	bl	1e5d2 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    6ae0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6ae2:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    6ae4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    6ae6:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    6aea:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6aec:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    6aee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6af0:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    6af2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    6af4:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    6af8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6afa:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6afc:	1a36      	subs	r6, r6, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6afe:	2308      	movs	r3, #8
    6b00:	4648      	mov	r0, r9
    6b02:	f017 fd66 	bl	1e5d2 <uECC_vli_sub>

	if (carry < 0) {
    6b06:	1a36      	subs	r6, r6, r0
    6b08:	d410      	bmi.n	6b2c <vli_mmod_fast_secp256r1+0x16c>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    6b0a:	4c0e      	ldr	r4, [pc, #56]	; (6b44 <vli_mmod_fast_secp256r1+0x184>)
		while (carry || 
    6b0c:	b936      	cbnz	r6, 6b1c <vli_mmod_fast_secp256r1+0x15c>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    6b0e:	2208      	movs	r2, #8
    6b10:	4649      	mov	r1, r9
    6b12:	4620      	mov	r0, r4
    6b14:	f017 fd33 	bl	1e57e <uECC_vli_cmp_unsafe>
		while (carry || 
    6b18:	2801      	cmp	r0, #1
    6b1a:	d00f      	beq.n	6b3c <vli_mmod_fast_secp256r1+0x17c>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    6b1c:	2308      	movs	r3, #8
    6b1e:	4622      	mov	r2, r4
    6b20:	4649      	mov	r1, r9
    6b22:	4648      	mov	r0, r9
    6b24:	f017 fd55 	bl	1e5d2 <uECC_vli_sub>
    6b28:	1a36      	subs	r6, r6, r0
    6b2a:	e7ef      	b.n	6b0c <vli_mmod_fast_secp256r1+0x14c>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    6b2c:	4a05      	ldr	r2, [pc, #20]	; (6b44 <vli_mmod_fast_secp256r1+0x184>)
    6b2e:	2308      	movs	r3, #8
    6b30:	4649      	mov	r1, r9
    6b32:	4648      	mov	r0, r9
    6b34:	f017 fc23 	bl	1e37e <uECC_vli_add>
		while (carry < 0);
    6b38:	1836      	adds	r6, r6, r0
    6b3a:	d4f8      	bmi.n	6b2e <vli_mmod_fast_secp256r1+0x16e>
		}
	}
}
    6b3c:	b008      	add	sp, #32
    6b3e:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    6b42:	bf00      	nop
    6b44:	00022b30 	.word	0x00022b30

00006b48 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    6b48:	4904      	ldr	r1, [pc, #16]	; (6b5c <sub_bytes+0x14>)
    6b4a:	1e43      	subs	r3, r0, #1
    6b4c:	300f      	adds	r0, #15
    6b4e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6b52:	5c8a      	ldrb	r2, [r1, r2]
    6b54:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    6b56:	4283      	cmp	r3, r0
    6b58:	d1f9      	bne.n	6b4e <sub_bytes+0x6>
	}
}
    6b5a:	4770      	bx	lr
    6b5c:	000242c5 	.word	0x000242c5

00006b60 <tc_aes128_set_encrypt_key>:
{
    6b60:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    6b62:	4e26      	ldr	r6, [pc, #152]	; (6bfc <tc_aes128_set_encrypt_key+0x9c>)
{
    6b64:	4607      	mov	r7, r0
    6b66:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    6b68:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    6b6a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    6b6c:	ad01      	add	r5, sp, #4
    6b6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    6b70:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    6b72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    6b74:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    6b78:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    6b7c:	4638      	mov	r0, r7
    6b7e:	2f00      	cmp	r7, #0
    6b80:	d038      	beq.n	6bf4 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    6b82:	2c00      	cmp	r4, #0
    6b84:	d038      	beq.n	6bf8 <tc_aes128_set_encrypt_key+0x98>
    6b86:	1f38      	subs	r0, r7, #4
    6b88:	4621      	mov	r1, r4
    6b8a:	4602      	mov	r2, r0
    6b8c:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    6b8e:	784b      	ldrb	r3, [r1, #1]
    6b90:	780d      	ldrb	r5, [r1, #0]
    6b92:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    6b94:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    6b98:	78cd      	ldrb	r5, [r1, #3]
    6b9a:	432b      	orrs	r3, r5
    6b9c:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    6b9e:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    6ba0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    6ba4:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    6ba6:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    6baa:	d1f0      	bne.n	6b8e <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    6bac:	4c14      	ldr	r4, [pc, #80]	; (6c00 <tc_aes128_set_encrypt_key+0xa0>)
    6bae:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    6bb0:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    6bb2:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    6bb4:	d116      	bne.n	6be4 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    6bb6:	f3c3 4207 	ubfx	r2, r3, #16, #8
    6bba:	5ca5      	ldrb	r5, [r4, r2]
    6bbc:	0e1a      	lsrs	r2, r3, #24
    6bbe:	5ca2      	ldrb	r2, [r4, r2]
    6bc0:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    6bc4:	f3c3 2507 	ubfx	r5, r3, #8, #8
    6bc8:	b2db      	uxtb	r3, r3
    6bca:	5d65      	ldrb	r5, [r4, r5]
    6bcc:	5ce3      	ldrb	r3, [r4, r3]
    6bce:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    6bd2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    6bd6:	ad0c      	add	r5, sp, #48	; 0x30
    6bd8:	f021 0303 	bic.w	r3, r1, #3
    6bdc:	442b      	add	r3, r5
    6bde:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    6be2:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    6be4:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    6be8:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    6bea:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    6bec:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    6bee:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    6bf0:	d1de      	bne.n	6bb0 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    6bf2:	2001      	movs	r0, #1
}
    6bf4:	b00d      	add	sp, #52	; 0x34
    6bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    6bf8:	4620      	mov	r0, r4
    6bfa:	e7fb      	b.n	6bf4 <tc_aes128_set_encrypt_key+0x94>
    6bfc:	000227a4 	.word	0x000227a4
    6c00:	000242c5 	.word	0x000242c5

00006c04 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    6c04:	4a09      	ldr	r2, [pc, #36]	; (6c2c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    6c06:	490a      	ldr	r1, [pc, #40]	; (6c30 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    6c08:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    6c0a:	6809      	ldr	r1, [r1, #0]
    6c0c:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6c0e:	4909      	ldr	r1, [pc, #36]	; (6c34 <arch_swap+0x30>)
	_current->arch.basepri = key;
    6c10:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6c12:	684b      	ldr	r3, [r1, #4]
    6c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    6c18:	604b      	str	r3, [r1, #4]
    6c1a:	2300      	movs	r3, #0
    6c1c:	f383 8811 	msr	BASEPRI, r3
    6c20:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    6c24:	6893      	ldr	r3, [r2, #8]
}
    6c26:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    6c28:	4770      	bx	lr
    6c2a:	bf00      	nop
    6c2c:	20002d44 	.word	0x20002d44
    6c30:	00023f38 	.word	0x00023f38
    6c34:	e000ed00 	.word	0xe000ed00

00006c38 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    6c38:	4926      	ldr	r1, [pc, #152]	; (6cd4 <in_fp_endif+0x20>)
    ldr r2, [r1, #_kernel_offset_to_current]
    6c3a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    6c3c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    6c40:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    6c42:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    6c46:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
    6c4a:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    6c4e:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
    6c52:	d004      	beq.n	6c5e <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
    6c54:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
    6c58:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
    6c5c:	e007      	b.n	6c6e <out_fp_endif>

00006c5e <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
    6c5e:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
    6c62:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
    6c66:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
    6c6a:	f050 0004 	orrs.w	r0, r0, #4

00006c6e <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
    6c6e:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    6c72:	2020      	movs	r0, #32
    msr BASEPRI, r0
    6c74:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    6c78:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    6c7c:	4f16      	ldr	r7, [pc, #88]	; (6cd8 <in_fp_endif+0x24>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    6c7e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    6c82:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    6c84:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    6c86:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    6c88:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    6c8a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    6c8c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    6c8e:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
    6c92:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
    6c96:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
    6c9a:	d105      	bne.n	6ca8 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    6c9c:	2300      	movs	r3, #0
    vmsr fpscr, r3
    6c9e:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    6ca2:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
    6ca6:	e005      	b.n	6cb4 <in_fp_endif>

00006ca8 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
    6ca8:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
    6cac:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
    6cb0:	ec90 8a10 	vldmia	r0, {s16-s31}

00006cb4 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    6cb4:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
    6cb8:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    6cbc:	f383 8814 	msr	CONTROL, r3
    isb
    6cc0:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    6cc4:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    6cc8:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    6ccc:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    6cd0:	4770      	bx	lr
    6cd2:	0000      	.short	0x0000
    ldr r1, =_kernel
    6cd4:	20002d44 	.word	0x20002d44
    ldr v4, =_SCS_ICSR
    6cd8:	e000ed04 	.word	0xe000ed04

00006cdc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    6cdc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    6ce0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    6ce2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    6ce6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    6cea:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    6cec:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    6cf0:	2902      	cmp	r1, #2
    beq _oops
    6cf2:	d0ff      	beq.n	6cf4 <_oops>

00006cf4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    6cf4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    6cf6:	f018 fb9b 	bl	1f430 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    6cfa:	bd01      	pop	{r0, pc}

00006cfc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    6cfc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    6cfe:	2b00      	cmp	r3, #0
    6d00:	db08      	blt.n	6d14 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6d02:	2201      	movs	r2, #1
    6d04:	f000 001f 	and.w	r0, r0, #31
    6d08:	fa02 f000 	lsl.w	r0, r2, r0
    6d0c:	095b      	lsrs	r3, r3, #5
    6d0e:	4a02      	ldr	r2, [pc, #8]	; (6d18 <arch_irq_enable+0x1c>)
    6d10:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    6d14:	4770      	bx	lr
    6d16:	bf00      	nop
    6d18:	e000e100 	.word	0xe000e100

00006d1c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    6d1c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    6d1e:	2b00      	cmp	r3, #0
    6d20:	db0d      	blt.n	6d3e <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6d22:	2201      	movs	r2, #1
    6d24:	095b      	lsrs	r3, r3, #5
    6d26:	f000 001f 	and.w	r0, r0, #31
    6d2a:	fa02 f000 	lsl.w	r0, r2, r0
    6d2e:	3320      	adds	r3, #32
    6d30:	4a03      	ldr	r2, [pc, #12]	; (6d40 <arch_irq_disable+0x24>)
    6d32:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    6d36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6d3a:	f3bf 8f6f 	isb	sy
}
    6d3e:	4770      	bx	lr
    6d40:	e000e100 	.word	0xe000e100

00006d44 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    6d44:	4b05      	ldr	r3, [pc, #20]	; (6d5c <arch_irq_is_enabled+0x18>)
    6d46:	0942      	lsrs	r2, r0, #5
    6d48:	f000 001f 	and.w	r0, r0, #31
    6d4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    6d50:	2301      	movs	r3, #1
    6d52:	fa03 f000 	lsl.w	r0, r3, r0
}
    6d56:	4010      	ands	r0, r2
    6d58:	4770      	bx	lr
    6d5a:	bf00      	nop
    6d5c:	e000e100 	.word	0xe000e100

00006d60 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    6d60:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    6d62:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6d64:	bfa8      	it	ge
    6d66:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    6d6a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6d6e:	bfb8      	it	lt
    6d70:	4b06      	ldrlt	r3, [pc, #24]	; (6d8c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6d72:	ea4f 1141 	mov.w	r1, r1, lsl #5
    6d76:	bfac      	ite	ge
    6d78:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6d7c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6d80:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6d82:	bfb4      	ite	lt
    6d84:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6d86:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    6d8a:	4770      	bx	lr
    6d8c:	e000ed14 	.word	0xe000ed14

00006d90 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    6d90:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    6d92:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    6d94:	4b04      	ldr	r3, [pc, #16]	; (6da8 <_arch_isr_direct_pm+0x18>)
    6d96:	6a18      	ldr	r0, [r3, #32]
    6d98:	b118      	cbz	r0, 6da2 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    6d9a:	2200      	movs	r2, #0
    6d9c:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
    6d9e:	f01a fdd7 	bl	21950 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    6da2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    6da4:	bd08      	pop	{r3, pc}
    6da6:	bf00      	nop
    6da8:	20002d44 	.word	0x20002d44

00006dac <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    6dac:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    6db0:	9b00      	ldr	r3, [sp, #0]
    6db2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    6db6:	490b      	ldr	r1, [pc, #44]	; (6de4 <arch_new_thread+0x38>)
	iframe->a3 = (uint32_t)p2;
    6db8:	9b01      	ldr	r3, [sp, #4]
    6dba:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    6dbe:	9b02      	ldr	r3, [sp, #8]
    6dc0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    6dc4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    6dc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    6dcc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    6dd0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    6dd4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    6dd6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    6dd8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    6dda:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FPU_SHARING)
	thread->arch.mode = 0;
    6ddc:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    6de0:	4770      	bx	lr
    6de2:	bf00      	nop
    6de4:	0001d20b 	.word	0x0001d20b

00006de8 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    6de8:	b508      	push	{r3, lr}
    6dea:	4606      	mov	r6, r0
    6dec:	460d      	mov	r5, r1
    6dee:	4614      	mov	r4, r2
  __builtin_arm_set_fpscr(fpscr);
    6df0:	2300      	movs	r3, #0
    6df2:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    6df6:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    6dfa:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    6dfe:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    6e02:	f3bf 8f6f 	isb	sy
	z_arm_configure_static_mpu_regions();
    6e06:	f000 fb47 	bl	7498 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    6e0a:	4b07      	ldr	r3, [pc, #28]	; (6e28 <arch_switch_to_main_thread+0x40>)
    6e0c:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    6e0e:	4620      	mov	r0, r4
    6e10:	f385 8809 	msr	PSP, r5
    6e14:	2100      	movs	r1, #0
    6e16:	b663      	cpsie	if
    6e18:	f381 8811 	msr	BASEPRI, r1
    6e1c:	f3bf 8f6f 	isb	sy
    6e20:	2200      	movs	r2, #0
    6e22:	2300      	movs	r3, #0
    6e24:	f016 f9f1 	bl	1d20a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    6e28:	20002d44 	.word	0x20002d44

00006e2c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    6e2c:	4901      	ldr	r1, [pc, #4]	; (6e34 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    6e2e:	2210      	movs	r2, #16
	str	r2, [r1]
    6e30:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    6e32:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    6e34:	e000ed10 	.word	0xe000ed10

00006e38 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    6e38:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    6e3a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    6e3c:	f380 8811 	msr	BASEPRI, r0
	isb
    6e40:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    6e44:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    6e48:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    6e4a:	b662      	cpsie	i
	isb
    6e4c:	f3bf 8f6f 	isb	sy

	bx	lr
    6e50:	4770      	bx	lr
    6e52:	bf00      	nop

00006e54 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    6e54:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    6e56:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    6e58:	f381 8811 	msr	BASEPRI, r1

	wfe
    6e5c:	bf20      	wfe

	msr	BASEPRI, r0
    6e5e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    6e62:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    6e64:	4770      	bx	lr
    6e66:	bf00      	nop

00006e68 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6e68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6e6c:	4607      	mov	r7, r0
    6e6e:	b08b      	sub	sp, #44	; 0x2c

	if (esf != NULL) {
    6e70:	460c      	mov	r4, r1
    6e72:	2900      	cmp	r1, #0
    6e74:	d054      	beq.n	6f20 <z_arm_fatal_error+0xb8>
    6e76:	4b2e      	ldr	r3, [pc, #184]	; (6f30 <z_arm_fatal_error+0xc8>)
    6e78:	4d2e      	ldr	r5, [pc, #184]	; (6f34 <z_arm_fatal_error+0xcc>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    6e7a:	482f      	ldr	r0, [pc, #188]	; (6f38 <z_arm_fatal_error+0xd0>)
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    6e7c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 6f4c <z_arm_fatal_error+0xe4>
    6e80:	1aed      	subs	r5, r5, r3
    6e82:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    6e84:	01ad      	lsls	r5, r5, #6
    6e86:	f045 0501 	orr.w	r5, r5, #1
    6e8a:	f8ad 5000 	strh.w	r5, [sp]
    6e8e:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    6e92:	6809      	ldr	r1, [r1, #0]
    6e94:	f016 fd85 	bl	1d9a2 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    6e98:	f8ad 5000 	strh.w	r5, [sp]
    6e9c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    6ea0:	68e1      	ldr	r1, [r4, #12]
    6ea2:	4826      	ldr	r0, [pc, #152]	; (6f3c <z_arm_fatal_error+0xd4>)
    6ea4:	f016 fd7d 	bl	1d9a2 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    6ea8:	69e1      	ldr	r1, [r4, #28]
    6eaa:	4825      	ldr	r0, [pc, #148]	; (6f40 <z_arm_fatal_error+0xd8>)
    6eac:	462a      	mov	r2, r5
    6eae:	f016 fd48 	bl	1d942 <log_1>
	for (int i = 0; i < 16; i += 4) {
    6eb2:	46a0      	mov	r8, r4
    6eb4:	2600      	movs	r6, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    6eb6:	edd8 7a08 	vldr	s15, [r8, #32]
    6eba:	9602      	str	r6, [sp, #8]
    6ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    6ec0:	1c73      	adds	r3, r6, #1
    6ec2:	edcd 7a03 	vstr	s15, [sp, #12]
    6ec6:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
    6eca:	9304      	str	r3, [sp, #16]
    6ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    6ed0:	1cb3      	adds	r3, r6, #2
    6ed2:	edcd 7a05 	vstr	s15, [sp, #20]
    6ed6:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
    6eda:	9306      	str	r3, [sp, #24]
    6edc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    6ee0:	1cf3      	adds	r3, r6, #3
    6ee2:	edcd 7a07 	vstr	s15, [sp, #28]
    6ee6:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
    6eea:	9308      	str	r3, [sp, #32]
    6eec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    6ef0:	2208      	movs	r2, #8
    6ef2:	462b      	mov	r3, r5
    6ef4:	eb0d 0102 	add.w	r1, sp, r2
    6ef8:	4648      	mov	r0, r9
	for (int i = 0; i < 16; i += 4) {
    6efa:	3604      	adds	r6, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    6efc:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
    6f00:	f016 fd6e 	bl	1d9e0 <log_n>
	for (int i = 0; i < 16; i += 4) {
    6f04:	2e10      	cmp	r6, #16
    6f06:	f108 0810 	add.w	r8, r8, #16
    6f0a:	d1d4      	bne.n	6eb6 <z_arm_fatal_error+0x4e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
    6f0c:	6e21      	ldr	r1, [r4, #96]	; 0x60
    6f0e:	480d      	ldr	r0, [pc, #52]	; (6f44 <z_arm_fatal_error+0xdc>)
    6f10:	462a      	mov	r2, r5
    6f12:	f016 fd16 	bl	1d942 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    6f16:	69a1      	ldr	r1, [r4, #24]
    6f18:	480b      	ldr	r0, [pc, #44]	; (6f48 <z_arm_fatal_error+0xe0>)
    6f1a:	462a      	mov	r2, r5
    6f1c:	f016 fd11 	bl	1d942 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    6f20:	4621      	mov	r1, r4
    6f22:	4638      	mov	r0, r7
}
    6f24:	b00b      	add	sp, #44	; 0x2c
    6f26:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	z_fatal_error(reason, esf);
    6f2a:	f014 bb39 	b.w	1b5a0 <z_fatal_error>
    6f2e:	bf00      	nop
    6f30:	000225d8 	.word	0x000225d8
    6f34:	00022710 	.word	0x00022710
    6f38:	000243c5 	.word	0x000243c5
    6f3c:	000243f4 	.word	0x000243f4
    6f40:	00024423 	.word	0x00024423
    6f44:	00024475 	.word	0x00024475
    6f48:	00024484 	.word	0x00024484
    6f4c:	00024432 	.word	0x00024432

00006f50 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    6f50:	bf30      	wfi
    b z_SysNmiOnReset
    6f52:	f7ff bffd 	b.w	6f50 <z_SysNmiOnReset>
    6f56:	bf00      	nop

00006f58 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    6f58:	4a14      	ldr	r2, [pc, #80]	; (6fac <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    6f5a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    6f5c:	4b14      	ldr	r3, [pc, #80]	; (6fb0 <z_arm_prep_c+0x58>)
    6f5e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    6f62:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    6f64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6f68:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    6f6c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    6f70:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    6f74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    6f78:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    6f7c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    6f80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    6f84:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    6f88:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    6f8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6f90:	f3bf 8f6f 	isb	sy
  __builtin_arm_set_fpscr(fpscr);
    6f94:	2300      	movs	r3, #0
    6f96:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    6f9a:	f014 fb75 	bl	1b688 <z_bss_zero>
	z_data_copy();
    6f9e:	f015 fb0f 	bl	1c5c0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    6fa2:	f000 fa5b 	bl	745c <z_arm_interrupt_init>
	z_cstart();
    6fa6:	f014 fb93 	bl	1b6d0 <z_cstart>
    6faa:	bf00      	nop
    6fac:	00000000 	.word	0x00000000
    6fb0:	e000ed00 	.word	0xe000ed00

00006fb4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    6fb4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    6fb6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    6fb8:	4a0b      	ldr	r2, [pc, #44]	; (6fe8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    6fba:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    6fbc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    6fbe:	bf1e      	ittt	ne
	movne	r1, #0
    6fc0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    6fc2:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    6fc4:	f01a fcc4 	blne	21950 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    6fc8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    6fca:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    6fce:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    6fd2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    6fd6:	4905      	ldr	r1, [pc, #20]	; (6fec <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    6fd8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    6fda:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    6fdc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    6fde:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    6fe2:	4903      	ldr	r1, [pc, #12]	; (6ff0 <_isr_wrapper+0x3c>)
	bx r1
    6fe4:	4708      	bx	r1
    6fe6:	0000      	.short	0x0000
	ldr r2, =_kernel
    6fe8:	20002d44 	.word	0x20002d44
	ldr r1, =_sw_isr_table
    6fec:	00022454 	.word	0x00022454
	ldr r1, =z_arm_int_exit
    6ff0:	00007441 	.word	0x00007441

00006ff4 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    6ff4:	f018 fac1 	bl	1f57a <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    6ff8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    6ffa:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    6ffe:	4808      	ldr	r0, [pc, #32]	; (7020 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    7000:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    7004:	1840      	adds	r0, r0, r1
    msr PSP, r0
    7006:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    700a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    700e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    7010:	4308      	orrs	r0, r1
    msr CONTROL, r0
    7012:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    7016:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    701a:	f7ff ff9d 	bl	6f58 <z_arm_prep_c>
    701e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    7020:	20004b60 	.word	0x20004b60

00007024 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    7024:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    7028:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    702c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    702e:	4672      	mov	r2, lr
	bl z_arm_fault
    7030:	f000 f934 	bl	729c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    7034:	bd01      	pop	{r0, pc}
    7036:	bf00      	nop

00007038 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    7038:	b570      	push	{r4, r5, r6, lr}
    703a:	4b23      	ldr	r3, [pc, #140]	; (70c8 <usage_fault.constprop.0+0x90>)
    703c:	4c23      	ldr	r4, [pc, #140]	; (70cc <usage_fault.constprop.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    703e:	4d24      	ldr	r5, [pc, #144]	; (70d0 <usage_fault.constprop.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    7040:	4824      	ldr	r0, [pc, #144]	; (70d4 <usage_fault.constprop.0+0x9c>)
    7042:	1ae4      	subs	r4, r4, r3
    7044:	08e4      	lsrs	r4, r4, #3
    7046:	01a4      	lsls	r4, r4, #6
    7048:	f044 0601 	orr.w	r6, r4, #1
    704c:	4631      	mov	r1, r6
    704e:	f016 fc69 	bl	1d924 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    7052:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7054:	019b      	lsls	r3, r3, #6
    7056:	d503      	bpl.n	7060 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    7058:	481f      	ldr	r0, [pc, #124]	; (70d8 <usage_fault.constprop.0+0xa0>)
    705a:	4631      	mov	r1, r6
    705c:	f016 fc62 	bl	1d924 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    7060:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7062:	01dd      	lsls	r5, r3, #7
    7064:	d504      	bpl.n	7070 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    7066:	481d      	ldr	r0, [pc, #116]	; (70dc <usage_fault.constprop.0+0xa4>)
    7068:	f044 0101 	orr.w	r1, r4, #1
    706c:	f016 fc5a 	bl	1d924 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    7070:	4d17      	ldr	r5, [pc, #92]	; (70d0 <usage_fault.constprop.0+0x98>)
    7072:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7074:	0318      	lsls	r0, r3, #12
    7076:	d504      	bpl.n	7082 <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    7078:	4819      	ldr	r0, [pc, #100]	; (70e0 <usage_fault.constprop.0+0xa8>)
    707a:	f044 0101 	orr.w	r1, r4, #1
    707e:	f016 fc51 	bl	1d924 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    7082:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7084:	0359      	lsls	r1, r3, #13
    7086:	d504      	bpl.n	7092 <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    7088:	4816      	ldr	r0, [pc, #88]	; (70e4 <usage_fault.constprop.0+0xac>)
    708a:	f044 0101 	orr.w	r1, r4, #1
    708e:	f016 fc49 	bl	1d924 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    7092:	4d0f      	ldr	r5, [pc, #60]	; (70d0 <usage_fault.constprop.0+0x98>)
    7094:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7096:	039a      	lsls	r2, r3, #14
    7098:	d504      	bpl.n	70a4 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    709a:	4813      	ldr	r0, [pc, #76]	; (70e8 <usage_fault.constprop.0+0xb0>)
    709c:	f044 0101 	orr.w	r1, r4, #1
    70a0:	f016 fc40 	bl	1d924 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    70a4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    70a6:	03db      	lsls	r3, r3, #15
    70a8:	d504      	bpl.n	70b4 <usage_fault.constprop.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    70aa:	4810      	ldr	r0, [pc, #64]	; (70ec <usage_fault.constprop.0+0xb4>)
    70ac:	f044 0101 	orr.w	r1, r4, #1
    70b0:	f016 fc38 	bl	1d924 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    70b4:	4a06      	ldr	r2, [pc, #24]	; (70d0 <usage_fault.constprop.0+0x98>)
    70b6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    70b8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    70bc:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    70c0:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    70c2:	2000      	movs	r0, #0
    70c4:	bd70      	pop	{r4, r5, r6, pc}
    70c6:	bf00      	nop
    70c8:	000225d8 	.word	0x000225d8
    70cc:	00022710 	.word	0x00022710
    70d0:	e000ed00 	.word	0xe000ed00
    70d4:	000244b2 	.word	0x000244b2
    70d8:	000244ca 	.word	0x000244ca
    70dc:	000244dd 	.word	0x000244dd
    70e0:	000244f7 	.word	0x000244f7
    70e4:	00024515 	.word	0x00024515
    70e8:	0002453a 	.word	0x0002453a
    70ec:	00024554 	.word	0x00024554

000070f0 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    70f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    70f4:	4b2a      	ldr	r3, [pc, #168]	; (71a0 <bus_fault.constprop.0+0xb0>)
    70f6:	4c2b      	ldr	r4, [pc, #172]	; (71a4 <bus_fault.constprop.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    70f8:	4d2b      	ldr	r5, [pc, #172]	; (71a8 <bus_fault.constprop.0+0xb8>)
    70fa:	1ae4      	subs	r4, r4, r3
    70fc:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    70fe:	01a4      	lsls	r4, r4, #6
    7100:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    7104:	4607      	mov	r7, r0
    7106:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    7108:	4828      	ldr	r0, [pc, #160]	; (71ac <bus_fault.constprop.0+0xbc>)
    710a:	4641      	mov	r1, r8
    710c:	f016 fc0a 	bl	1d924 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    7110:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7112:	04d9      	lsls	r1, r3, #19
    7114:	d503      	bpl.n	711e <bus_fault.constprop.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    7116:	4826      	ldr	r0, [pc, #152]	; (71b0 <bus_fault.constprop.0+0xc0>)
    7118:	4641      	mov	r1, r8
    711a:	f016 fc03 	bl	1d924 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    711e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7120:	051a      	lsls	r2, r3, #20
    7122:	d504      	bpl.n	712e <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    7124:	4823      	ldr	r0, [pc, #140]	; (71b4 <bus_fault.constprop.0+0xc4>)
    7126:	f044 0101 	orr.w	r1, r4, #1
    712a:	f016 fbfb 	bl	1d924 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    712e:	4d1e      	ldr	r5, [pc, #120]	; (71a8 <bus_fault.constprop.0+0xb8>)
    7130:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7132:	059b      	lsls	r3, r3, #22
    7134:	d512      	bpl.n	715c <bus_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    7136:	f044 0801 	orr.w	r8, r4, #1
    713a:	481f      	ldr	r0, [pc, #124]	; (71b8 <bus_fault.constprop.0+0xc8>)
    713c:	4641      	mov	r1, r8
    713e:	f016 fbf1 	bl	1d924 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    7142:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    7144:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7146:	0418      	lsls	r0, r3, #16
    7148:	d508      	bpl.n	715c <bus_fault.constprop.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    714a:	481c      	ldr	r0, [pc, #112]	; (71bc <bus_fault.constprop.0+0xcc>)
    714c:	4642      	mov	r2, r8
    714e:	f016 fbf8 	bl	1d942 <log_1>
			if (from_hard_fault != 0) {
    7152:	b11f      	cbz	r7, 715c <bus_fault.constprop.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    7154:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7156:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    715a:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    715c:	4d12      	ldr	r5, [pc, #72]	; (71a8 <bus_fault.constprop.0+0xb8>)
    715e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7160:	0559      	lsls	r1, r3, #21
    7162:	d504      	bpl.n	716e <bus_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    7164:	4816      	ldr	r0, [pc, #88]	; (71c0 <bus_fault.constprop.0+0xd0>)
    7166:	f044 0101 	orr.w	r1, r4, #1
    716a:	f016 fbdb 	bl	1d924 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    716e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7170:	05da      	lsls	r2, r3, #23
    7172:	d50d      	bpl.n	7190 <bus_fault.constprop.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    7174:	4813      	ldr	r0, [pc, #76]	; (71c4 <bus_fault.constprop.0+0xd4>)
    7176:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    717a:	f016 fbd3 	bl	1d924 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    717e:	4a0a      	ldr	r2, [pc, #40]	; (71a8 <bus_fault.constprop.0+0xb8>)
    7180:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    7182:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    7184:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    7188:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    718a:	7030      	strb	r0, [r6, #0]
}
    718c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    7190:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7192:	049b      	lsls	r3, r3, #18
    7194:	d5f3      	bpl.n	717e <bus_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    7196:	480c      	ldr	r0, [pc, #48]	; (71c8 <bus_fault.constprop.0+0xd8>)
    7198:	f044 0101 	orr.w	r1, r4, #1
    719c:	e7ed      	b.n	717a <bus_fault.constprop.0+0x8a>
    719e:	bf00      	nop
    71a0:	000225d8 	.word	0x000225d8
    71a4:	00022710 	.word	0x00022710
    71a8:	e000ed00 	.word	0xe000ed00
    71ac:	0002457f 	.word	0x0002457f
    71b0:	00024595 	.word	0x00024595
    71b4:	000245a6 	.word	0x000245a6
    71b8:	000245b9 	.word	0x000245b9
    71bc:	000245d2 	.word	0x000245d2
    71c0:	000245e7 	.word	0x000245e7
    71c4:	00024602 	.word	0x00024602
    71c8:	0002461a 	.word	0x0002461a

000071cc <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    71cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71d0:	4b28      	ldr	r3, [pc, #160]	; (7274 <mem_manage_fault.constprop.0+0xa8>)
    71d2:	4c29      	ldr	r4, [pc, #164]	; (7278 <mem_manage_fault.constprop.0+0xac>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    71d4:	4d29      	ldr	r5, [pc, #164]	; (727c <mem_manage_fault.constprop.0+0xb0>)
    71d6:	1ae4      	subs	r4, r4, r3
    71d8:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    71da:	01a4      	lsls	r4, r4, #6
    71dc:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    71e0:	4607      	mov	r7, r0
    71e2:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    71e4:	4826      	ldr	r0, [pc, #152]	; (7280 <mem_manage_fault.constprop.0+0xb4>)
    71e6:	4641      	mov	r1, r8
    71e8:	f016 fb9c 	bl	1d924 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    71ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
    71ee:	06d8      	lsls	r0, r3, #27
    71f0:	d503      	bpl.n	71fa <mem_manage_fault.constprop.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    71f2:	4824      	ldr	r0, [pc, #144]	; (7284 <mem_manage_fault.constprop.0+0xb8>)
    71f4:	4641      	mov	r1, r8
    71f6:	f016 fb95 	bl	1d924 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    71fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
    71fc:	0719      	lsls	r1, r3, #28
    71fe:	d504      	bpl.n	720a <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    7200:	4821      	ldr	r0, [pc, #132]	; (7288 <mem_manage_fault.constprop.0+0xbc>)
    7202:	f044 0101 	orr.w	r1, r4, #1
    7206:	f016 fb8d 	bl	1d924 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    720a:	4d1c      	ldr	r5, [pc, #112]	; (727c <mem_manage_fault.constprop.0+0xb0>)
    720c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    720e:	079a      	lsls	r2, r3, #30
    7210:	d512      	bpl.n	7238 <mem_manage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    7212:	f044 0801 	orr.w	r8, r4, #1
    7216:	4641      	mov	r1, r8
    7218:	481c      	ldr	r0, [pc, #112]	; (728c <mem_manage_fault.constprop.0+0xc0>)
    721a:	f016 fb83 	bl	1d924 <log_0>
		uint32_t temp = SCB->MMFAR;
    721e:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    7220:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7222:	061b      	lsls	r3, r3, #24
    7224:	d508      	bpl.n	7238 <mem_manage_fault.constprop.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    7226:	481a      	ldr	r0, [pc, #104]	; (7290 <mem_manage_fault.constprop.0+0xc4>)
    7228:	4642      	mov	r2, r8
    722a:	f016 fb8a 	bl	1d942 <log_1>
			if (from_hard_fault != 0) {
    722e:	b11f      	cbz	r7, 7238 <mem_manage_fault.constprop.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    7230:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    7236:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    7238:	4d10      	ldr	r5, [pc, #64]	; (727c <mem_manage_fault.constprop.0+0xb0>)
    723a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    723c:	07d8      	lsls	r0, r3, #31
    723e:	d504      	bpl.n	724a <mem_manage_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    7240:	4814      	ldr	r0, [pc, #80]	; (7294 <mem_manage_fault.constprop.0+0xc8>)
    7242:	f044 0101 	orr.w	r1, r4, #1
    7246:	f016 fb6d 	bl	1d924 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    724a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    724c:	0699      	lsls	r1, r3, #26
    724e:	d504      	bpl.n	725a <mem_manage_fault.constprop.0+0x8e>
		PR_FAULT_INFO(
    7250:	4811      	ldr	r0, [pc, #68]	; (7298 <mem_manage_fault.constprop.0+0xcc>)
    7252:	f044 0101 	orr.w	r1, r4, #1
    7256:	f016 fb65 	bl	1d924 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    725a:	4b08      	ldr	r3, [pc, #32]	; (727c <mem_manage_fault.constprop.0+0xb0>)
    725c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    725e:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    7260:	bf58      	it	pl
    7262:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    7264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    7266:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    7268:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    726c:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    726e:	7030      	strb	r0, [r6, #0]
}
    7270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7274:	000225d8 	.word	0x000225d8
    7278:	00022710 	.word	0x00022710
    727c:	e000ed00 	.word	0xe000ed00
    7280:	00024649 	.word	0x00024649
    7284:	0002465f 	.word	0x0002465f
    7288:	000245a6 	.word	0x000245a6
    728c:	00024692 	.word	0x00024692
    7290:	000246aa 	.word	0x000246aa
    7294:	000246c0 	.word	0x000246c0
    7298:	0002461a 	.word	0x0002461a

0000729c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    729c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    72a0:	4b58      	ldr	r3, [pc, #352]	; (7404 <z_arm_fault+0x168>)
    72a2:	685e      	ldr	r6, [r3, #4]
{
    72a4:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    72a6:	f3c6 0408 	ubfx	r4, r6, #0, #9
    72aa:	2500      	movs	r5, #0
    72ac:	f385 8811 	msr	BASEPRI, r5
    72b0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    72b4:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    72b8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    72bc:	d10d      	bne.n	72da <z_arm_fault+0x3e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    72be:	f002 030c 	and.w	r3, r2, #12
    72c2:	2b08      	cmp	r3, #8
    72c4:	d10b      	bne.n	72de <z_arm_fault+0x42>
    72c6:	4950      	ldr	r1, [pc, #320]	; (7408 <z_arm_fault+0x16c>)
    72c8:	4b50      	ldr	r3, [pc, #320]	; (740c <z_arm_fault+0x170>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    72ca:	4851      	ldr	r0, [pc, #324]	; (7410 <z_arm_fault+0x174>)
    72cc:	1ac9      	subs	r1, r1, r3
    72ce:	08c9      	lsrs	r1, r1, #3
    72d0:	0189      	lsls	r1, r1, #6
    72d2:	f041 0101 	orr.w	r1, r1, #1
    72d6:	f016 fb25 	bl	1d924 <log_0>
		return NULL;
    72da:	462f      	mov	r7, r5
    72dc:	e004      	b.n	72e8 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    72de:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    72e0:	bf4e      	itee	mi
    72e2:	460f      	movmi	r7, r1
			ptr_esf = (z_arch_esf_t *)msp;
    72e4:	4607      	movpl	r7, r0
			*nested_exc = true;
    72e6:	2501      	movpl	r5, #1
	*recoverable = false;
    72e8:	2300      	movs	r3, #0
    72ea:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    72ee:	1ee3      	subs	r3, r4, #3
    72f0:	2b09      	cmp	r3, #9
    72f2:	d86d      	bhi.n	73d0 <z_arm_fault+0x134>
    72f4:	e8df f003 	tbb	[pc, r3]
    72f8:	3f5f5b05 	.word	0x3f5f5b05
    72fc:	6c6c6c6c 	.word	0x6c6c6c6c
    7300:	636c      	.short	0x636c
    7302:	4b42      	ldr	r3, [pc, #264]	; (740c <z_arm_fault+0x170>)
    7304:	4e40      	ldr	r6, [pc, #256]	; (7408 <z_arm_fault+0x16c>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7306:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 7404 <z_arm_fault+0x168>
	PR_FAULT_INFO("***** HARD FAULT *****");
    730a:	4842      	ldr	r0, [pc, #264]	; (7414 <z_arm_fault+0x178>)
    730c:	1af6      	subs	r6, r6, r3
    730e:	08f6      	lsrs	r6, r6, #3
    7310:	01b6      	lsls	r6, r6, #6
    7312:	f046 0601 	orr.w	r6, r6, #1
    7316:	4631      	mov	r1, r6
    7318:	f016 fb04 	bl	1d924 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    731c:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    7320:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7324:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    7328:	f88d 9007 	strb.w	r9, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    732c:	d005      	beq.n	733a <z_arm_fault+0x9e>
		PR_EXC("  Bus fault on vector table read");
    732e:	483a      	ldr	r0, [pc, #232]	; (7418 <z_arm_fault+0x17c>)
    7330:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    7332:	f016 faf7 	bl	1d924 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    7336:	2400      	movs	r4, #0
}
    7338:	e020      	b.n	737c <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    733a:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    733e:	005b      	lsls	r3, r3, #1
    7340:	d51c      	bpl.n	737c <z_arm_fault+0xe0>
		PR_EXC("  Fault escalation (see below)");
    7342:	4836      	ldr	r0, [pc, #216]	; (741c <z_arm_fault+0x180>)
    7344:	4631      	mov	r1, r6
    7346:	f016 faed 	bl	1d924 <log_0>
		if (SCB_MMFSR != 0) {
    734a:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    734e:	b12b      	cbz	r3, 735c <z_arm_fault+0xc0>
			reason = mem_manage_fault(esf, 1, recoverable);
    7350:	f10d 0107 	add.w	r1, sp, #7
    7354:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    7356:	f7ff ff39 	bl	71cc <mem_manage_fault.constprop.0>
    735a:	e00e      	b.n	737a <z_arm_fault+0xde>
		} else if (SCB_BFSR != 0) {
    735c:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    7360:	b12b      	cbz	r3, 736e <z_arm_fault+0xd2>
			reason = bus_fault(esf, 1, recoverable);
    7362:	f10d 0107 	add.w	r1, sp, #7
    7366:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    7368:	f7ff fec2 	bl	70f0 <bus_fault.constprop.0>
    736c:	e005      	b.n	737a <z_arm_fault+0xde>
		} else if (SCB_UFSR != 0) {
    736e:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    7372:	b29b      	uxth	r3, r3
    7374:	b113      	cbz	r3, 737c <z_arm_fault+0xe0>
			reason = usage_fault(esf);
    7376:	f7ff fe5f 	bl	7038 <usage_fault.constprop.0>
    737a:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    737c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7380:	b993      	cbnz	r3, 73a8 <z_arm_fault+0x10c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    7382:	2268      	movs	r2, #104	; 0x68
    7384:	4639      	mov	r1, r7
    7386:	a802      	add	r0, sp, #8
    7388:	f018 f8a6 	bl	1f4d8 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    738c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    738e:	b39d      	cbz	r5, 73f8 <z_arm_fault+0x15c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    7390:	f3c3 0208 	ubfx	r2, r3, #0, #9
    7394:	b922      	cbnz	r2, 73a0 <z_arm_fault+0x104>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    7396:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    739a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    739e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    73a0:	a902      	add	r1, sp, #8
    73a2:	4620      	mov	r0, r4
    73a4:	f7ff fd60 	bl	6e68 <z_arm_fatal_error>
}
    73a8:	b01d      	add	sp, #116	; 0x74
    73aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    73ae:	f10d 0107 	add.w	r1, sp, #7
    73b2:	2000      	movs	r0, #0
    73b4:	e7cf      	b.n	7356 <z_arm_fault+0xba>
		reason = bus_fault(esf, 0, recoverable);
    73b6:	f10d 0107 	add.w	r1, sp, #7
    73ba:	2000      	movs	r0, #0
    73bc:	e7d4      	b.n	7368 <z_arm_fault+0xcc>
    73be:	4912      	ldr	r1, [pc, #72]	; (7408 <z_arm_fault+0x16c>)
    73c0:	4b12      	ldr	r3, [pc, #72]	; (740c <z_arm_fault+0x170>)
	PR_FAULT_INFO(
    73c2:	4817      	ldr	r0, [pc, #92]	; (7420 <z_arm_fault+0x184>)
    73c4:	1ac9      	subs	r1, r1, r3
    73c6:	08c9      	lsrs	r1, r1, #3
    73c8:	0189      	lsls	r1, r1, #6
    73ca:	f041 0101 	orr.w	r1, r1, #1
    73ce:	e7b0      	b.n	7332 <z_arm_fault+0x96>
    73d0:	4a0e      	ldr	r2, [pc, #56]	; (740c <z_arm_fault+0x170>)
    73d2:	4b0d      	ldr	r3, [pc, #52]	; (7408 <z_arm_fault+0x16c>)
	PR_FAULT_INFO("***** %s %d) *****",
    73d4:	4813      	ldr	r0, [pc, #76]	; (7424 <z_arm_fault+0x188>)
    73d6:	4914      	ldr	r1, [pc, #80]	; (7428 <z_arm_fault+0x18c>)
    73d8:	1a9b      	subs	r3, r3, r2
    73da:	08db      	lsrs	r3, r3, #3
    73dc:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    73e0:	ea4f 1383 	mov.w	r3, r3, lsl #6
    73e4:	bf18      	it	ne
    73e6:	4601      	movne	r1, r0
    73e8:	f043 0301 	orr.w	r3, r3, #1
    73ec:	480f      	ldr	r0, [pc, #60]	; (742c <z_arm_fault+0x190>)
    73ee:	f1a4 0210 	sub.w	r2, r4, #16
    73f2:	f016 fabd 	bl	1d970 <log_2>
    73f6:	e79e      	b.n	7336 <z_arm_fault+0x9a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    73f8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    73fc:	f023 0301 	bic.w	r3, r3, #1
    7400:	e7cd      	b.n	739e <z_arm_fault+0x102>
    7402:	bf00      	nop
    7404:	e000ed00 	.word	0xe000ed00
    7408:	00022710 	.word	0x00022710
    740c:	000225d8 	.word	0x000225d8
    7410:	000246df 	.word	0x000246df
    7414:	0002470a 	.word	0x0002470a
    7418:	00024721 	.word	0x00024721
    741c:	00024742 	.word	0x00024742
    7420:	00024761 	.word	0x00024761
    7424:	0002479a 	.word	0x0002479a
    7428:	00024785 	.word	0x00024785
    742c:	000247b3 	.word	0x000247b3

00007430 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    7430:	4a02      	ldr	r2, [pc, #8]	; (743c <z_arm_fault_init+0xc>)
    7432:	6953      	ldr	r3, [r2, #20]
    7434:	f043 0310 	orr.w	r3, r3, #16
    7438:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    743a:	4770      	bx	lr
    743c:	e000ed00 	.word	0xe000ed00

00007440 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    7440:	4b04      	ldr	r3, [pc, #16]	; (7454 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    7442:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    7444:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    7446:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    7448:	d003      	beq.n	7452 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    744a:	4903      	ldr	r1, [pc, #12]	; (7458 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    744c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    7450:	600a      	str	r2, [r1, #0]

00007452 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    7452:	4770      	bx	lr
	ldr r3, =_kernel
    7454:	20002d44 	.word	0x20002d44
	ldr r1, =_SCS_ICSR
    7458:	e000ed04 	.word	0xe000ed04

0000745c <z_arm_interrupt_init>:
    745c:	4804      	ldr	r0, [pc, #16]	; (7470 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    745e:	2300      	movs	r3, #0
    7460:	2120      	movs	r1, #32
    7462:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    7464:	3301      	adds	r3, #1
    7466:	2b27      	cmp	r3, #39	; 0x27
    7468:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    746c:	d1f9      	bne.n	7462 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    746e:	4770      	bx	lr
    7470:	e000e100 	.word	0xe000e100

00007474 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    7474:	4b06      	ldr	r3, [pc, #24]	; (7490 <z_impl_k_thread_abort+0x1c>)
    7476:	689b      	ldr	r3, [r3, #8]
    7478:	4283      	cmp	r3, r0
    747a:	d107      	bne.n	748c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    747c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    7480:	b123      	cbz	r3, 748c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    7482:	4a04      	ldr	r2, [pc, #16]	; (7494 <z_impl_k_thread_abort+0x20>)
    7484:	6853      	ldr	r3, [r2, #4]
    7486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    748a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    748c:	f014 be24 	b.w	1c0d8 <z_thread_abort>
    7490:	20002d44 	.word	0x20002d44
    7494:	e000ed00 	.word	0xe000ed00

00007498 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    7498:	4b02      	ldr	r3, [pc, #8]	; (74a4 <z_arm_configure_static_mpu_regions+0xc>)
    749a:	4a03      	ldr	r2, [pc, #12]	; (74a8 <z_arm_configure_static_mpu_regions+0x10>)
    749c:	4803      	ldr	r0, [pc, #12]	; (74ac <z_arm_configure_static_mpu_regions+0x14>)
    749e:	2101      	movs	r1, #1
    74a0:	f000 b8ac 	b.w	75fc <arm_core_mpu_configure_static_mpu_regions>
    74a4:	20010000 	.word	0x20010000
    74a8:	20000000 	.word	0x20000000
    74ac:	00022bdc 	.word	0x00022bdc

000074b0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    74b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    74b2:	4f2a      	ldr	r7, [pc, #168]	; (755c <mpu_configure_regions+0xac>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    74b4:	2600      	movs	r6, #0
    74b6:	428e      	cmp	r6, r1
    74b8:	da15      	bge.n	74e6 <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    74ba:	6844      	ldr	r4, [r0, #4]
    74bc:	2c00      	cmp	r4, #0
    74be:	d049      	beq.n	7554 <mpu_configure_regions+0xa4>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    74c0:	b1cb      	cbz	r3, 74f6 <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    74c2:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    74c6:	ea14 0f0c 	tst.w	r4, ip
    74ca:	d00e      	beq.n	74ea <mpu_configure_regions+0x3a>
    74cc:	4a24      	ldr	r2, [pc, #144]	; (7560 <mpu_configure_regions+0xb0>)
    74ce:	4b25      	ldr	r3, [pc, #148]	; (7564 <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    74d0:	4825      	ldr	r0, [pc, #148]	; (7568 <mpu_configure_regions+0xb8>)
    74d2:	1ad2      	subs	r2, r2, r3
    74d4:	08d2      	lsrs	r2, r2, #3
    74d6:	0192      	lsls	r2, r2, #6
    74d8:	f042 0201 	orr.w	r2, r2, #1
    74dc:	4631      	mov	r1, r6
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    74de:	f016 fa30 	bl	1d942 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    74e2:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    74e6:	4610      	mov	r0, r2
    74e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    74ea:	2c1f      	cmp	r4, #31
    74ec:	d9ee      	bls.n	74cc <mpu_configure_regions+0x1c>
		((part->start & (part->size - 1U)) == 0U);
    74ee:	6805      	ldr	r5, [r0, #0]
		&&
    74f0:	ea1c 0f05 	tst.w	ip, r5
    74f4:	d1ea      	bne.n	74cc <mpu_configure_regions+0x1c>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    74f6:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    74f8:	b2d5      	uxtb	r5, r2
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    74fa:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
    74fe:	6802      	ldr	r2, [r0, #0]
	if (size <= 32U) {
    7500:	d916      	bls.n	7530 <mpu_configure_regions+0x80>
	if (size > (1UL << 31)) {
    7502:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    7506:	d815      	bhi.n	7534 <mpu_configure_regions+0x84>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    7508:	3c01      	subs	r4, #1
    750a:	fab4 f484 	clz	r4, r4
    750e:	f1c4 041f 	rsb	r4, r4, #31
    7512:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    7514:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    7516:	ea4c 0404 	orr.w	r4, ip, r4
    751a:	d90d      	bls.n	7538 <mpu_configure_regions+0x88>
    751c:	4a10      	ldr	r2, [pc, #64]	; (7560 <mpu_configure_regions+0xb0>)
    751e:	4b11      	ldr	r3, [pc, #68]	; (7564 <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    7520:	4812      	ldr	r0, [pc, #72]	; (756c <mpu_configure_regions+0xbc>)
    7522:	1ad2      	subs	r2, r2, r3
    7524:	08d2      	lsrs	r2, r2, #3
    7526:	0192      	lsls	r2, r2, #6
    7528:	f042 0201 	orr.w	r2, r2, #1
    752c:	4629      	mov	r1, r5
    752e:	e7d6      	b.n	74de <mpu_configure_regions+0x2e>
		return REGION_32B;
    7530:	2408      	movs	r4, #8
    7532:	e7ef      	b.n	7514 <mpu_configure_regions+0x64>
		return REGION_4G;
    7534:	243e      	movs	r4, #62	; 0x3e
    7536:	e7ed      	b.n	7514 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7538:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    753c:	432a      	orrs	r2, r5
    753e:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7542:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    7546:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    754a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    754e:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
		reg_index++;
    7552:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    7554:	3601      	adds	r6, #1
    7556:	300c      	adds	r0, #12
    7558:	e7ad      	b.n	74b6 <mpu_configure_regions+0x6>
    755a:	bf00      	nop
    755c:	e000ed00 	.word	0xe000ed00
    7560:	00022700 	.word	0x00022700
    7564:	000225d8 	.word	0x000225d8
    7568:	000247ca 	.word	0x000247ca
    756c:	000247ed 	.word	0x000247ed

00007570 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    7570:	4b04      	ldr	r3, [pc, #16]	; (7584 <arm_core_mpu_enable+0x14>)
    7572:	2205      	movs	r2, #5
    7574:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    7578:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    757c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    7580:	4770      	bx	lr
    7582:	bf00      	nop
    7584:	e000ed00 	.word	0xe000ed00

00007588 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    7588:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    758c:	4b02      	ldr	r3, [pc, #8]	; (7598 <arm_core_mpu_disable+0x10>)
    758e:	2200      	movs	r2, #0
    7590:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    7594:	4770      	bx	lr
    7596:	bf00      	nop
    7598:	e000ed00 	.word	0xe000ed00

0000759c <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    759c:	4914      	ldr	r1, [pc, #80]	; (75f0 <arm_mpu_init+0x54>)
    759e:	6808      	ldr	r0, [r1, #0]
    75a0:	2808      	cmp	r0, #8
{
    75a2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    75a4:	d821      	bhi.n	75ea <arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    75a6:	f7ff ffef 	bl	7588 <arm_core_mpu_disable>
	MPU->RNR = index;
    75aa:	4c12      	ldr	r4, [pc, #72]	; (75f4 <arm_mpu_init+0x58>)
    75ac:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    75ae:	2200      	movs	r2, #0
    75b0:	4290      	cmp	r0, r2
    75b2:	f101 010c 	add.w	r1, r1, #12
    75b6:	d105      	bne.n	75c4 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    75b8:	4b0f      	ldr	r3, [pc, #60]	; (75f8 <arm_mpu_init+0x5c>)
    75ba:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    75bc:	f7ff ffd8 	bl	7570 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    75c0:	2000      	movs	r0, #0
}
    75c2:	bd10      	pop	{r4, pc}
    75c4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    75c8:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    75cc:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    75d0:	4313      	orrs	r3, r2
    75d2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    75d6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    75da:	f851 3c04 	ldr.w	r3, [r1, #-4]
    75de:	f043 0301 	orr.w	r3, r3, #1
    75e2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    75e6:	3201      	adds	r2, #1
    75e8:	e7e2      	b.n	75b0 <arm_mpu_init+0x14>
		return -1;
    75ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    75ee:	e7e8      	b.n	75c2 <arm_mpu_init+0x26>
    75f0:	00022be8 	.word	0x00022be8
    75f4:	e000ed00 	.word	0xe000ed00
    75f8:	2000340c 	.word	0x2000340c

000075fc <arm_core_mpu_configure_static_mpu_regions>:
{
    75fc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    75fe:	4c03      	ldr	r4, [pc, #12]	; (760c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    7600:	2301      	movs	r3, #1
    7602:	7822      	ldrb	r2, [r4, #0]
    7604:	f7ff ff54 	bl	74b0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    7608:	7020      	strb	r0, [r4, #0]
}
    760a:	bd10      	pop	{r4, pc}
    760c:	2000340c 	.word	0x2000340c

00007610 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    7610:	4b01      	ldr	r3, [pc, #4]	; (7618 <__stdout_hook_install+0x8>)
    7612:	6018      	str	r0, [r3, #0]
}
    7614:	4770      	bx	lr
    7616:	bf00      	nop
    7618:	200001f0 	.word	0x200001f0

0000761c <nordicsemi_nrf52_init>:
	__asm__ volatile(
    761c:	f04f 0320 	mov.w	r3, #32
    7620:	f3ef 8211 	mrs	r2, BASEPRI
    7624:	f383 8811 	msr	BASEPRI, r3
    7628:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    762c:	4906      	ldr	r1, [pc, #24]	; (7648 <nordicsemi_nrf52_init+0x2c>)
    762e:	2301      	movs	r3, #1
    7630:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    7634:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    7638:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    763c:	f382 8811 	msr	BASEPRI, r2
    7640:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    7644:	2000      	movs	r0, #0
    7646:	4770      	bx	lr
    7648:	4001e000 	.word	0x4001e000

0000764c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    764c:	b120      	cbz	r0, 7658 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    764e:	4b03      	ldr	r3, [pc, #12]	; (765c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    7650:	0180      	lsls	r0, r0, #6
    7652:	f043 0301 	orr.w	r3, r3, #1
    7656:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    7658:	4770      	bx	lr
    765a:	bf00      	nop
    765c:	00022860 	.word	0x00022860

00007660 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    7660:	4b0e      	ldr	r3, [pc, #56]	; (769c <bt_hex_real+0x3c>)
    7662:	2940      	cmp	r1, #64	; 0x40
{
    7664:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    7666:	bf28      	it	cs
    7668:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    766a:	4c0d      	ldr	r4, [pc, #52]	; (76a0 <bt_hex_real+0x40>)
    766c:	1846      	adds	r6, r0, r1
    766e:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    7670:	42b0      	cmp	r0, r6
    7672:	f103 0302 	add.w	r3, r3, #2
    7676:	d104      	bne.n	7682 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    7678:	2300      	movs	r3, #0
    767a:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    767e:	4807      	ldr	r0, [pc, #28]	; (769c <bt_hex_real+0x3c>)
    7680:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    7682:	7802      	ldrb	r2, [r0, #0]
    7684:	0912      	lsrs	r2, r2, #4
    7686:	5ca2      	ldrb	r2, [r4, r2]
    7688:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    768c:	f810 2b01 	ldrb.w	r2, [r0], #1
    7690:	f002 020f 	and.w	r2, r2, #15
    7694:	5ca2      	ldrb	r2, [r4, r2]
    7696:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    769a:	e7e9      	b.n	7670 <bt_hex_real+0x10>
    769c:	2000342b 	.word	0x2000342b
    76a0:	0002486b 	.word	0x0002486b

000076a4 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    76a4:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    76a6:	7803      	ldrb	r3, [r0, #0]
    76a8:	b08b      	sub	sp, #44	; 0x2c
    76aa:	4604      	mov	r4, r0
    76ac:	ad07      	add	r5, sp, #28
    76ae:	2b03      	cmp	r3, #3
    76b0:	d821      	bhi.n	76f6 <bt_addr_le_str_real+0x52>
    76b2:	e8df f003 	tbb	[pc, r3]
    76b6:	1a02      	.short	0x1a02
    76b8:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    76ba:	4912      	ldr	r1, [pc, #72]	; (7704 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    76bc:	4628      	mov	r0, r5
    76be:	f017 fec2 	bl	1f446 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    76c2:	7863      	ldrb	r3, [r4, #1]
    76c4:	9304      	str	r3, [sp, #16]
    76c6:	78a3      	ldrb	r3, [r4, #2]
    76c8:	9303      	str	r3, [sp, #12]
    76ca:	78e3      	ldrb	r3, [r4, #3]
    76cc:	9302      	str	r3, [sp, #8]
    76ce:	7923      	ldrb	r3, [r4, #4]
    76d0:	9301      	str	r3, [sp, #4]
    76d2:	7963      	ldrb	r3, [r4, #5]
    76d4:	9300      	str	r3, [sp, #0]
    76d6:	4a0c      	ldr	r2, [pc, #48]	; (7708 <bt_addr_le_str_real+0x64>)
    76d8:	79a3      	ldrb	r3, [r4, #6]
    76da:	9505      	str	r5, [sp, #20]
    76dc:	211e      	movs	r1, #30
    76de:	480b      	ldr	r0, [pc, #44]	; (770c <bt_addr_le_str_real+0x68>)
    76e0:	f015 fcb5 	bl	1d04e <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    76e4:	4809      	ldr	r0, [pc, #36]	; (770c <bt_addr_le_str_real+0x68>)
    76e6:	b00b      	add	sp, #44	; 0x2c
    76e8:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    76ea:	4909      	ldr	r1, [pc, #36]	; (7710 <bt_addr_le_str_real+0x6c>)
    76ec:	e7e6      	b.n	76bc <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    76ee:	4909      	ldr	r1, [pc, #36]	; (7714 <bt_addr_le_str_real+0x70>)
    76f0:	e7e4      	b.n	76bc <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    76f2:	4909      	ldr	r1, [pc, #36]	; (7718 <bt_addr_le_str_real+0x74>)
    76f4:	e7e2      	b.n	76bc <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    76f6:	4a09      	ldr	r2, [pc, #36]	; (771c <bt_addr_le_str_real+0x78>)
    76f8:	210a      	movs	r1, #10
    76fa:	4628      	mov	r0, r5
    76fc:	f015 fca7 	bl	1d04e <snprintk>
		break;
    7700:	e7df      	b.n	76c2 <bt_addr_le_str_real+0x1e>
    7702:	bf00      	nop
    7704:	00024826 	.word	0x00024826
    7708:	00024848 	.word	0x00024848
    770c:	2000340d 	.word	0x2000340d
    7710:	0002482d 	.word	0x0002482d
    7714:	00024834 	.word	0x00024834
    7718:	0002483e 	.word	0x0002483e
    771c:	00025c17 	.word	0x00025c17

00007720 <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
    7720:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7722:	4c21      	ldr	r4, [pc, #132]	; (77a8 <le_gen_dhkey+0x88>)
    7724:	f3bf 8f5b 	dmb	ish
    7728:	6823      	ldr	r3, [r4, #0]
    772a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    772e:	07da      	lsls	r2, r3, #31
{
    7730:	4606      	mov	r6, r0
    7732:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    7734:	d501      	bpl.n	773a <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    7736:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
    7738:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
    773a:	2901      	cmp	r1, #1
    773c:	d831      	bhi.n	77a2 <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    773e:	f3bf 8f5b 	dmb	ish
    7742:	e854 3f00 	ldrex	r3, [r4]
    7746:	f043 0202 	orr.w	r2, r3, #2
    774a:	e844 2100 	strex	r1, r2, [r4]
    774e:	2900      	cmp	r1, #0
    7750:	d1f7      	bne.n	7742 <le_gen_dhkey+0x22>
    7752:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    7756:	079b      	lsls	r3, r3, #30
    7758:	d4ed      	bmi.n	7736 <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, 32);
    775a:	4814      	ldr	r0, [pc, #80]	; (77ac <le_gen_dhkey+0x8c>)
    775c:	4631      	mov	r1, r6
    775e:	f017 ff97 	bl	1f690 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[32], &key[32], 32);
    7762:	4813      	ldr	r0, [pc, #76]	; (77b0 <le_gen_dhkey+0x90>)
    7764:	f106 0120 	add.w	r1, r6, #32
    7768:	f017 ff92 	bl	1f690 <sys_memcpy_swap.constprop.0>
    776c:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
    7770:	b175      	cbz	r5, 7790 <le_gen_dhkey+0x70>
    7772:	e854 3f00 	ldrex	r3, [r4]
    7776:	f043 0304 	orr.w	r3, r3, #4
    777a:	e844 3200 	strex	r2, r3, [r4]
    777e:	2a00      	cmp	r2, #0
    7780:	d1f7      	bne.n	7772 <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7782:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
    7786:	480b      	ldr	r0, [pc, #44]	; (77b4 <le_gen_dhkey+0x94>)
    7788:	f014 fd0a 	bl	1c1a0 <z_impl_k_sem_give>
    778c:	2000      	movs	r0, #0
    778e:	e7d3      	b.n	7738 <le_gen_dhkey+0x18>
    7790:	e854 3f00 	ldrex	r3, [r4]
    7794:	f023 0304 	bic.w	r3, r3, #4
    7798:	e844 3200 	strex	r2, r3, [r4]
    779c:	2a00      	cmp	r2, #0
    779e:	d0f0      	beq.n	7782 <le_gen_dhkey+0x62>
    77a0:	e7f6      	b.n	7790 <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
    77a2:	2012      	movs	r0, #18
    77a4:	e7c8      	b.n	7738 <le_gen_dhkey+0x18>
    77a6:	bf00      	nop
    77a8:	2000191c 	.word	0x2000191c
    77ac:	200034cc 	.word	0x200034cc
    77b0:	200034ec 	.word	0x200034ec
    77b4:	20000888 	.word	0x20000888

000077b8 <ecc_thread>:
{
    77b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    77bc:	4b6a      	ldr	r3, [pc, #424]	; (7968 <ecc_thread+0x1b0>)
    77be:	4d6b      	ldr	r5, [pc, #428]	; (796c <ecc_thread+0x1b4>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    77c0:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 7988 <ecc_thread+0x1d0>
	return z_impl_k_sem_take(sem, timeout);
    77c4:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 798c <ecc_thread+0x1d4>
    77c8:	1aed      	subs	r5, r5, r3
    77ca:	08ed      	lsrs	r5, r5, #3
    77cc:	4647      	mov	r7, r8
    77ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    77d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    77d6:	4648      	mov	r0, r9
    77d8:	f014 fd08 	bl	1c1ec <z_impl_k_sem_take>
    77dc:	f3bf 8f5b 	dmb	ish
    77e0:	f8d8 4000 	ldr.w	r4, [r8]
    77e4:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    77e8:	f014 0401 	ands.w	r4, r4, #1
    77ec:	d05a      	beq.n	78a4 <ecc_thread+0xec>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    77ee:	f8df a190 	ldr.w	sl, [pc, #400]	; 7980 <ecc_thread+0x1c8>
    77f2:	4c5f      	ldr	r4, [pc, #380]	; (7970 <ecc_thread+0x1b8>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    77f4:	4e5f      	ldr	r6, [pc, #380]	; (7974 <ecc_thread+0x1bc>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    77f6:	4860      	ldr	r0, [pc, #384]	; (7978 <ecc_thread+0x1c0>)
    77f8:	4652      	mov	r2, sl
    77fa:	4621      	mov	r1, r4
    77fc:	f016 fd13 	bl	1e226 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    7800:	bbe8      	cbnz	r0, 787e <ecc_thread+0xc6>
			BT_ERR("Failed to create ECC public/private pair");
    7802:	01a9      	lsls	r1, r5, #6
    7804:	485d      	ldr	r0, [pc, #372]	; (797c <ecc_thread+0x1c4>)
    7806:	f041 0101 	orr.w	r1, r1, #1
    780a:	f016 f88b 	bl	1d924 <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
    780e:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7812:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    781a:	2001      	movs	r0, #1
    781c:	f000 f982 	bl	7b24 <bt_buf_get_rx>
    7820:	f100 0608 	add.w	r6, r0, #8
    7824:	2102      	movs	r1, #2
    7826:	4604      	mov	r4, r0
    7828:	4630      	mov	r0, r6
    782a:	f019 ff2f 	bl	2168c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    782e:	233e      	movs	r3, #62	; 0x3e
    7830:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    7832:	2342      	movs	r3, #66	; 0x42
    7834:	7043      	strb	r3, [r0, #1]
    7836:	2101      	movs	r1, #1
    7838:	4630      	mov	r0, r6
    783a:	f019 ff27 	bl	2168c <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    783e:	2308      	movs	r3, #8
    7840:	7003      	strb	r3, [r0, #0]
    7842:	2141      	movs	r1, #65	; 0x41
    7844:	4630      	mov	r0, r6
    7846:	f019 ff21 	bl	2168c <net_buf_simple_add>
    784a:	4606      	mov	r6, r0
	evt->status = status;
    784c:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
    7850:	f1ba 0f00 	cmp.w	sl, #0
    7854:	d01d      	beq.n	7892 <ecc_thread+0xda>
		(void)memset(evt->key, 0, sizeof(evt->key));
    7856:	2240      	movs	r2, #64	; 0x40
    7858:	2100      	movs	r1, #0
    785a:	f017 fe68 	bl	1f52e <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    785e:	f3bf 8f5b 	dmb	ish
    7862:	e857 3f00 	ldrex	r3, [r7]
    7866:	f023 0301 	bic.w	r3, r3, #1
    786a:	e847 3200 	strex	r2, r3, [r7]
    786e:	2a00      	cmp	r2, #0
    7870:	d1f7      	bne.n	7862 <ecc_thread+0xaa>
    7872:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    7876:	4620      	mov	r0, r4
	bt_recv(buf);
    7878:	f001 fa6e 	bl	8d58 <bt_recv>
	while (true) {
    787c:	e7a7      	b.n	77ce <ecc_thread+0x16>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    787e:	2220      	movs	r2, #32
    7880:	4631      	mov	r1, r6
    7882:	4620      	mov	r0, r4
    7884:	f017 fe17 	bl	1f4b6 <memcmp>
    7888:	2800      	cmp	r0, #0
    788a:	d0b4      	beq.n	77f6 <ecc_thread+0x3e>
	return 0;
    788c:	f04f 0a00 	mov.w	sl, #0
    7890:	e7bf      	b.n	7812 <ecc_thread+0x5a>
		sys_memcpy_swap(evt->key, ecc.public_key_be, 32);
    7892:	4939      	ldr	r1, [pc, #228]	; (7978 <ecc_thread+0x1c0>)
    7894:	f017 fefc 	bl	1f690 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.public_key_be[32], 32);
    7898:	3120      	adds	r1, #32
    789a:	f106 0021 	add.w	r0, r6, #33	; 0x21
    789e:	f017 fef7 	bl	1f690 <sys_memcpy_swap.constprop.0>
    78a2:	e7dc      	b.n	785e <ecc_thread+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    78a4:	f3bf 8f5b 	dmb	ish
    78a8:	f8d8 3000 	ldr.w	r3, [r8]
    78ac:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    78b0:	079b      	lsls	r3, r3, #30
    78b2:	d58c      	bpl.n	77ce <ecc_thread+0x16>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
    78b4:	4932      	ldr	r1, [pc, #200]	; (7980 <ecc_thread+0x1c8>)
    78b6:	4830      	ldr	r0, [pc, #192]	; (7978 <ecc_thread+0x1c0>)
    78b8:	f017 fb81 	bl	1efbe <uECC_valid_public_key>
	if (ret < 0) {
    78bc:	1e01      	subs	r1, r0, #0
    78be:	da38      	bge.n	7932 <ecc_thread+0x17a>
		BT_ERR("public key is not valid (ret %d)", ret);
    78c0:	01aa      	lsls	r2, r5, #6
    78c2:	4830      	ldr	r0, [pc, #192]	; (7984 <ecc_thread+0x1cc>)
    78c4:	f042 0201 	orr.w	r2, r2, #1
    78c8:	f016 f83b 	bl	1d942 <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    78cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    78d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    78d4:	2001      	movs	r0, #1
    78d6:	f000 f925 	bl	7b24 <bt_buf_get_rx>
    78da:	f100 0a08 	add.w	sl, r0, #8
    78de:	2102      	movs	r1, #2
    78e0:	4606      	mov	r6, r0
    78e2:	4650      	mov	r0, sl
    78e4:	f019 fed2 	bl	2168c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    78e8:	233e      	movs	r3, #62	; 0x3e
    78ea:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    78ec:	2322      	movs	r3, #34	; 0x22
    78ee:	7043      	strb	r3, [r0, #1]
    78f0:	2101      	movs	r1, #1
    78f2:	4650      	mov	r0, sl
    78f4:	f019 feca 	bl	2168c <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    78f8:	2309      	movs	r3, #9
    78fa:	7003      	strb	r3, [r0, #0]
    78fc:	2121      	movs	r1, #33	; 0x21
    78fe:	4650      	mov	r0, sl
    7900:	f019 fec4 	bl	2168c <net_buf_simple_add>
    7904:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    7906:	3001      	adds	r0, #1
    7908:	bb3c      	cbnz	r4, 795a <ecc_thread+0x1a2>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    790a:	221f      	movs	r2, #31
    790c:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
    790e:	21ff      	movs	r1, #255	; 0xff
    7910:	2220      	movs	r2, #32
    7912:	f017 fe0c 	bl	1f52e <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7916:	f3bf 8f5b 	dmb	ish
    791a:	e857 3f00 	ldrex	r3, [r7]
    791e:	f023 0302 	bic.w	r3, r3, #2
    7922:	e847 3200 	strex	r2, r3, [r7]
    7926:	2a00      	cmp	r2, #0
    7928:	d1f7      	bne.n	791a <ecc_thread+0x162>
    792a:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    792e:	4630      	mov	r0, r6
    7930:	e7a2      	b.n	7878 <ecc_thread+0xc0>
		ret = uECC_shared_secret(ecc.public_key_be,
    7932:	490f      	ldr	r1, [pc, #60]	; (7970 <ecc_thread+0x1b8>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7934:	f3bf 8f5b 	dmb	ish
    7938:	f8d8 3000 	ldr.w	r3, [r8]
    793c:	480d      	ldr	r0, [pc, #52]	; (7974 <ecc_thread+0x1bc>)
    793e:	f3bf 8f5b 	dmb	ish
    7942:	f013 0f04 	tst.w	r3, #4
    7946:	f101 0220 	add.w	r2, r1, #32
    794a:	4b0d      	ldr	r3, [pc, #52]	; (7980 <ecc_thread+0x1c8>)
    794c:	bf18      	it	ne
    794e:	4601      	movne	r1, r0
    7950:	4610      	mov	r0, r2
    7952:	f016 fcb7 	bl	1e2c4 <uECC_shared_secret>
    7956:	4604      	mov	r4, r0
    7958:	e7b8      	b.n	78cc <ecc_thread+0x114>
		evt->status = 0U;
    795a:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    795c:	4906      	ldr	r1, [pc, #24]	; (7978 <ecc_thread+0x1c0>)
		evt->status = 0U;
    795e:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    7960:	f017 fe96 	bl	1f690 <sys_memcpy_swap.constprop.0>
    7964:	e7d7      	b.n	7916 <ecc_thread+0x15e>
    7966:	bf00      	nop
    7968:	000225d8 	.word	0x000225d8
    796c:	000226b8 	.word	0x000226b8
    7970:	200034ac 	.word	0x200034ac
    7974:	000248df 	.word	0x000248df
    7978:	200034cc 	.word	0x200034cc
    797c:	00024883 	.word	0x00024883
    7980:	00022c08 	.word	0x00022c08
    7984:	000248ac 	.word	0x000248ac
    7988:	2000191c 	.word	0x2000191c
    798c:	20000888 	.word	0x20000888

00007990 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    7990:	b573      	push	{r0, r1, r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    7992:	7d06      	ldrb	r6, [r0, #20]
    7994:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    7996:	b976      	cbnz	r6, 79b6 <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    7998:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    799a:	881d      	ldrh	r5, [r3, #0]
    799c:	f242 0226 	movw	r2, #8230	; 0x2026
    79a0:	4295      	cmp	r5, r2
    79a2:	d047      	beq.n	7a34 <bt_hci_ecc_send+0xa4>
    79a4:	d810      	bhi.n	79c8 <bt_hci_ecc_send+0x38>
    79a6:	f242 0201 	movw	r2, #8193	; 0x2001
    79aa:	4295      	cmp	r5, r2
    79ac:	d051      	beq.n	7a52 <bt_hci_ecc_send+0xc2>
    79ae:	f242 0325 	movw	r3, #8229	; 0x2025
    79b2:	429d      	cmp	r5, r3
    79b4:	d014      	beq.n	79e0 <bt_hci_ecc_send+0x50>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    79b6:	4b2b      	ldr	r3, [pc, #172]	; (7a64 <bt_hci_ecc_send+0xd4>)
    79b8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    79bc:	691b      	ldr	r3, [r3, #16]
    79be:	4620      	mov	r0, r4
}
    79c0:	b002      	add	sp, #8
    79c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    79c6:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
    79c8:	f242 035e 	movw	r3, #8286	; 0x205e
    79cc:	429d      	cmp	r5, r3
    79ce:	d1f2      	bne.n	79b6 <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
    79d0:	2103      	movs	r1, #3
    79d2:	3008      	adds	r0, #8
    79d4:	f019 fe79 	bl	216ca <net_buf_simple_pull>
	cmd = (void *)buf->data;
    79d8:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    79da:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    79de:	e02f      	b.n	7a40 <bt_hci_ecc_send+0xb0>
    79e0:	2103      	movs	r1, #3
    79e2:	3008      	adds	r0, #8
    79e4:	f019 fe71 	bl	216ca <net_buf_simple_pull>
	net_buf_unref(buf);
    79e8:	4620      	mov	r0, r4
    79ea:	f012 fb15 	bl	1a018 <net_buf_unref>
    79ee:	f3bf 8f5b 	dmb	ish
    79f2:	4b1d      	ldr	r3, [pc, #116]	; (7a68 <bt_hci_ecc_send+0xd8>)
    79f4:	681a      	ldr	r2, [r3, #0]
    79f6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    79fa:	0792      	lsls	r2, r2, #30
    79fc:	d508      	bpl.n	7a10 <bt_hci_ecc_send+0x80>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    79fe:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    7a00:	4631      	mov	r1, r6
    7a02:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    7a06:	f017 fe1f 	bl	1f648 <send_cmd_status>
}
    7a0a:	2000      	movs	r0, #0
    7a0c:	b002      	add	sp, #8
    7a0e:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7a10:	f3bf 8f5b 	dmb	ish
    7a14:	e853 2f00 	ldrex	r2, [r3]
    7a18:	f042 0101 	orr.w	r1, r2, #1
    7a1c:	e843 1000 	strex	r0, r1, [r3]
    7a20:	2800      	cmp	r0, #0
    7a22:	d1f7      	bne.n	7a14 <bt_hci_ecc_send+0x84>
    7a24:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    7a28:	07d3      	lsls	r3, r2, #31
    7a2a:	d4e8      	bmi.n	79fe <bt_hci_ecc_send+0x6e>
	z_impl_k_sem_give(sem);
    7a2c:	480f      	ldr	r0, [pc, #60]	; (7a6c <bt_hci_ecc_send+0xdc>)
    7a2e:	f014 fbb7 	bl	1c1a0 <z_impl_k_sem_give>
}
    7a32:	e7e5      	b.n	7a00 <bt_hci_ecc_send+0x70>
    7a34:	2103      	movs	r1, #3
    7a36:	3008      	adds	r0, #8
    7a38:	f019 fe47 	bl	216ca <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
    7a3c:	68a0      	ldr	r0, [r4, #8]
    7a3e:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    7a40:	f7ff fe6e 	bl	7720 <le_gen_dhkey>
    7a44:	9001      	str	r0, [sp, #4]
	net_buf_unref(buf);
    7a46:	4620      	mov	r0, r4
    7a48:	f012 fae6 	bl	1a018 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    7a4c:	9901      	ldr	r1, [sp, #4]
    7a4e:	4628      	mov	r0, r5
    7a50:	e7d9      	b.n	7a06 <bt_hci_ecc_send+0x76>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    7a52:	78da      	ldrb	r2, [r3, #3]
    7a54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    7a58:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    7a5a:	791a      	ldrb	r2, [r3, #4]
    7a5c:	f022 0201 	bic.w	r2, r2, #1
    7a60:	711a      	strb	r2, [r3, #4]
}
    7a62:	e7a8      	b.n	79b6 <bt_hci_ecc_send+0x26>
    7a64:	20000000 	.word	0x20000000
    7a68:	2000191c 	.word	0x2000191c
    7a6c:	20000888 	.word	0x20000888

00007a70 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    7a70:	b510      	push	{r4, lr}
    7a72:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    7a74:	4c0c      	ldr	r4, [pc, #48]	; (7aa8 <bt_hci_ecc_init+0x38>)
    7a76:	490d      	ldr	r1, [pc, #52]	; (7aac <bt_hci_ecc_init+0x3c>)
    7a78:	2200      	movs	r2, #0
    7a7a:	2300      	movs	r3, #0
    7a7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    7a80:	2300      	movs	r3, #0
    7a82:	220a      	movs	r2, #10
    7a84:	e9cd 2303 	strd	r2, r3, [sp, #12]
    7a88:	e9cd 3301 	strd	r3, r3, [sp, #4]
    7a8c:	9300      	str	r3, [sp, #0]
    7a8e:	f44f 628a 	mov.w	r2, #1104	; 0x450
    7a92:	4b07      	ldr	r3, [pc, #28]	; (7ab0 <bt_hci_ecc_init+0x40>)
    7a94:	4620      	mov	r0, r4
    7a96:	f014 fc1b 	bl	1c2d0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    7a9a:	4906      	ldr	r1, [pc, #24]	; (7ab4 <bt_hci_ecc_init+0x44>)
    7a9c:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    7a9e:	b008      	add	sp, #32
    7aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7aa4:	f01a b9dd 	b.w	21e62 <z_impl_k_thread_name_set>
    7aa8:	20000b08 	.word	0x20000b08
    7aac:	20003870 	.word	0x20003870
    7ab0:	000077b9 	.word	0x000077b9
    7ab4:	000248cd 	.word	0x000248cd

00007ab8 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    7ab8:	b430      	push	{r4, r5}
    7aba:	4603      	mov	r3, r0
    7abc:	4608      	mov	r0, r1
	switch (src->type) {
    7abe:	781a      	ldrb	r2, [r3, #0]
    7ac0:	2a01      	cmp	r2, #1
    7ac2:	d013      	beq.n	7aec <uuid_to_uuid128+0x34>
    7ac4:	2a02      	cmp	r2, #2
    7ac6:	d026      	beq.n	7b16 <uuid_to_uuid128+0x5e>
    7ac8:	b972      	cbnz	r2, 7ae8 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    7aca:	4a15      	ldr	r2, [pc, #84]	; (7b20 <uuid_to_uuid128+0x68>)
    7acc:	f102 0410 	add.w	r4, r2, #16
    7ad0:	f852 5b04 	ldr.w	r5, [r2], #4
    7ad4:	f841 5b04 	str.w	r5, [r1], #4
    7ad8:	42a2      	cmp	r2, r4
    7ada:	d1f9      	bne.n	7ad0 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    7adc:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    7ade:	7812      	ldrb	r2, [r2, #0]
    7ae0:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    7ae2:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    7ae4:	0a1b      	lsrs	r3, r3, #8
    7ae6:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    7ae8:	bc30      	pop	{r4, r5}
    7aea:	4770      	bx	lr
		*dst = uuid128_base;
    7aec:	4a0c      	ldr	r2, [pc, #48]	; (7b20 <uuid_to_uuid128+0x68>)
    7aee:	f102 0410 	add.w	r4, r2, #16
    7af2:	f852 5b04 	ldr.w	r5, [r2], #4
    7af6:	f841 5b04 	str.w	r5, [r1], #4
    7afa:	42a2      	cmp	r2, r4
    7afc:	d1f9      	bne.n	7af2 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    7afe:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    7b00:	7812      	ldrb	r2, [r2, #0]
    7b02:	700a      	strb	r2, [r1, #0]
    7b04:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    7b08:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    7b0a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    7b0c:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    7b0e:	0a1b      	lsrs	r3, r3, #8
    7b10:	7382      	strb	r2, [r0, #14]
    7b12:	7403      	strb	r3, [r0, #16]
}
    7b14:	e7e8      	b.n	7ae8 <uuid_to_uuid128+0x30>
}
    7b16:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    7b18:	2211      	movs	r2, #17
    7b1a:	4619      	mov	r1, r3
    7b1c:	f017 bcdc 	b.w	1f4d8 <memcpy>
    7b20:	000248ff 	.word	0x000248ff

00007b24 <bt_buf_get_rx>:
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BT_ACL_RX_COUNT, ACL_IN_SIZE,
		    sizeof(struct acl_data), bt_hci_host_num_completed_packets);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    7b24:	b538      	push	{r3, r4, r5, lr}
    7b26:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
    7b28:	4805      	ldr	r0, [pc, #20]	; (7b40 <bt_buf_get_rx+0x1c>)
    7b2a:	f019 fd58 	bl	215de <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    7b2e:	4604      	mov	r4, r0
    7b30:	b120      	cbz	r0, 7b3c <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
    7b32:	2100      	movs	r1, #0
    7b34:	3008      	adds	r0, #8
    7b36:	f019 fd71 	bl	2161c <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    7b3a:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    7b3c:	4620      	mov	r0, r4
    7b3e:	bd38      	pop	{r3, r4, r5, pc}
    7b40:	200009b8 	.word	0x200009b8

00007b44 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    7b44:	b570      	push	{r4, r5, r6, lr}
    7b46:	4602      	mov	r2, r0
    7b48:	460b      	mov	r3, r1
	__asm__ volatile(
    7b4a:	f04f 0120 	mov.w	r1, #32
    7b4e:	f3ef 8511 	mrs	r5, BASEPRI
    7b52:	f381 8811 	msr	BASEPRI, r1
    7b56:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    7b5a:	480c      	ldr	r0, [pc, #48]	; (7b8c <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    7b5c:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    7b5e:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
	bt_dev.sent_cmd = NULL;
    7b62:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
	__asm__ volatile(
    7b66:	f385 8811 	msr	BASEPRI, r5
    7b6a:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    7b6e:	b924      	cbnz	r4, 7b7a <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    7b70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    7b74:	2001      	movs	r0, #1
    7b76:	f7ff bfd5 	b.w	7b24 <bt_buf_get_rx>
    7b7a:	2301      	movs	r3, #1
    7b7c:	f104 0008 	add.w	r0, r4, #8
    7b80:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    7b82:	81a1      	strh	r1, [r4, #12]
    7b84:	f019 fd4a 	bl	2161c <net_buf_simple_reserve>
}
    7b88:	4620      	mov	r0, r4
    7b8a:	bd70      	pop	{r4, r5, r6, pc}
    7b8c:	20000000 	.word	0x20000000

00007b90 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    7b90:	b570      	push	{r4, r5, r6, lr}
    7b92:	4604      	mov	r4, r0
	switch (evt) {
    7b94:	2c0f      	cmp	r4, #15
{
    7b96:	460d      	mov	r5, r1
    7b98:	4610      	mov	r0, r2
    7b9a:	4619      	mov	r1, r3
	switch (evt) {
    7b9c:	d805      	bhi.n	7baa <bt_buf_get_evt+0x1a>
    7b9e:	2c0d      	cmp	r4, #13
    7ba0:	d912      	bls.n	7bc8 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    7ba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    7ba6:	f7ff bfcd 	b.w	7b44 <bt_buf_get_cmd_complete>
	switch (evt) {
    7baa:	2c13      	cmp	r4, #19
    7bac:	d10c      	bne.n	7bc8 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    7bae:	480b      	ldr	r0, [pc, #44]	; (7bdc <bt_buf_get_evt+0x4c>)
    7bb0:	f019 fd15 	bl	215de <net_buf_alloc_fixed>
			if (buf) {
    7bb4:	4604      	mov	r4, r0
    7bb6:	b128      	cbz	r0, 7bc4 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    7bb8:	2100      	movs	r1, #0
    7bba:	3008      	adds	r0, #8
    7bbc:	f019 fd2e 	bl	2161c <net_buf_simple_reserve>
    7bc0:	2301      	movs	r3, #1
    7bc2:	7523      	strb	r3, [r4, #20]
}
    7bc4:	4620      	mov	r0, r4
    7bc6:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    7bc8:	4602      	mov	r2, r0
    7bca:	460b      	mov	r3, r1
		if (discardable) {
    7bcc:	b10d      	cbz	r5, 7bd2 <bt_buf_get_evt+0x42>
    7bce:	4804      	ldr	r0, [pc, #16]	; (7be0 <bt_buf_get_evt+0x50>)
    7bd0:	e7ee      	b.n	7bb0 <bt_buf_get_evt+0x20>
}
    7bd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    7bd6:	2001      	movs	r0, #1
    7bd8:	f7ff bfa4 	b.w	7b24 <bt_buf_get_rx>
    7bdc:	200009e0 	.word	0x200009e0
    7be0:	20000940 	.word	0x20000940

00007be4 <ver_str>:
{
    7be4:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    7be6:	4d0b      	ldr	r5, [pc, #44]	; (7c14 <ver_str+0x30>)
{
    7be8:	4606      	mov	r6, r0
	const char * const str[] = {
    7bea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    7bec:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    7bee:	466c      	mov	r4, sp
    7bf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7bf6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7bfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
    7bfe:	2e0b      	cmp	r6, #11
		return str[ver];
    7c00:	bf9b      	ittet	ls
    7c02:	ab0c      	addls	r3, sp, #48	; 0x30
    7c04:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
    7c08:	4803      	ldrhi	r0, [pc, #12]	; (7c18 <ver_str+0x34>)
		return str[ver];
    7c0a:	f856 0c30 	ldrls.w	r0, [r6, #-48]
}
    7c0e:	b00c      	add	sp, #48	; 0x30
    7c10:	bd70      	pop	{r4, r5, r6, pc}
    7c12:	bf00      	nop
    7c14:	000227d0 	.word	0x000227d0
    7c18:	00024a02 	.word	0x00024a02

00007c1c <hci_data_buf_overflow>:
    7c1c:	4905      	ldr	r1, [pc, #20]	; (7c34 <hci_data_buf_overflow+0x18>)
    7c1e:	4a06      	ldr	r2, [pc, #24]	; (7c38 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    7c20:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    7c22:	4806      	ldr	r0, [pc, #24]	; (7c3c <hci_data_buf_overflow+0x20>)
    7c24:	1a52      	subs	r2, r2, r1
    7c26:	08d2      	lsrs	r2, r2, #3
    7c28:	0192      	lsls	r2, r2, #6
    7c2a:	7819      	ldrb	r1, [r3, #0]
    7c2c:	f042 0202 	orr.w	r2, r2, #2
    7c30:	f015 be87 	b.w	1d942 <log_1>
    7c34:	000225d8 	.word	0x000225d8
    7c38:	000226b0 	.word	0x000226b0
    7c3c:	00024a0a 	.word	0x00024a0a

00007c40 <le_data_len_change>:
{
    7c40:	b507      	push	{r0, r1, r2, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    7c42:	6883      	ldr	r3, [r0, #8]
    7c44:	8819      	ldrh	r1, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    7c46:	9101      	str	r1, [sp, #4]
    7c48:	4608      	mov	r0, r1
    7c4a:	f002 fcb3 	bl	a5b4 <bt_conn_lookup_handle>
	if (!conn) {
    7c4e:	9901      	ldr	r1, [sp, #4]
    7c50:	b960      	cbnz	r0, 7c6c <le_data_len_change+0x2c>
    7c52:	4b09      	ldr	r3, [pc, #36]	; (7c78 <le_data_len_change+0x38>)
    7c54:	4a09      	ldr	r2, [pc, #36]	; (7c7c <le_data_len_change+0x3c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    7c56:	480a      	ldr	r0, [pc, #40]	; (7c80 <le_data_len_change+0x40>)
    7c58:	1ad2      	subs	r2, r2, r3
    7c5a:	08d2      	lsrs	r2, r2, #3
    7c5c:	0192      	lsls	r2, r2, #6
    7c5e:	f042 0201 	orr.w	r2, r2, #1
}
    7c62:	b003      	add	sp, #12
    7c64:	f85d eb04 	ldr.w	lr, [sp], #4
		BT_ERR("Unable to lookup conn for handle %u", handle);
    7c68:	f015 be6b 	b.w	1d942 <log_1>
}
    7c6c:	b003      	add	sp, #12
    7c6e:	f85d eb04 	ldr.w	lr, [sp], #4
	bt_conn_unref(conn);
    7c72:	f018 b93f 	b.w	1fef4 <bt_conn_unref>
    7c76:	bf00      	nop
    7c78:	000225d8 	.word	0x000225d8
    7c7c:	000226b0 	.word	0x000226b0
    7c80:	00024a32 	.word	0x00024a32

00007c84 <hci_disconn_complete_prio>:
{
    7c84:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    7c86:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    7c88:	781a      	ldrb	r2, [r3, #0]
    7c8a:	b9f2      	cbnz	r2, 7cca <hci_disconn_complete_prio+0x46>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    7c8c:	f8b3 1001 	ldrh.w	r1, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    7c90:	9101      	str	r1, [sp, #4]
    7c92:	4608      	mov	r0, r1
    7c94:	f002 fc8e 	bl	a5b4 <bt_conn_lookup_handle>
	if (!conn) {
    7c98:	9901      	ldr	r1, [sp, #4]
    7c9a:	4604      	mov	r4, r0
    7c9c:	b960      	cbnz	r0, 7cb8 <hci_disconn_complete_prio+0x34>
    7c9e:	4b0c      	ldr	r3, [pc, #48]	; (7cd0 <hci_disconn_complete_prio+0x4c>)
    7ca0:	4a0c      	ldr	r2, [pc, #48]	; (7cd4 <hci_disconn_complete_prio+0x50>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    7ca2:	480d      	ldr	r0, [pc, #52]	; (7cd8 <hci_disconn_complete_prio+0x54>)
    7ca4:	1ad2      	subs	r2, r2, r3
    7ca6:	08d2      	lsrs	r2, r2, #3
    7ca8:	0192      	lsls	r2, r2, #6
    7caa:	f042 0201 	orr.w	r2, r2, #1
}
    7cae:	b002      	add	sp, #8
    7cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    7cb4:	f015 be45 	b.w	1d942 <log_1>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    7cb8:	2101      	movs	r1, #1
    7cba:	f002 fc83 	bl	a5c4 <bt_conn_set_state>
	bt_conn_unref(conn);
    7cbe:	4620      	mov	r0, r4
}
    7cc0:	b002      	add	sp, #8
    7cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    7cc6:	f018 b915 	b.w	1fef4 <bt_conn_unref>
}
    7cca:	b002      	add	sp, #8
    7ccc:	bd10      	pop	{r4, pc}
    7cce:	bf00      	nop
    7cd0:	000225d8 	.word	0x000225d8
    7cd4:	000226b0 	.word	0x000226b0
    7cd8:	00024a56 	.word	0x00024a56

00007cdc <hci_disconn_complete>:
{
    7cdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    7cde:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    7ce0:	7835      	ldrb	r5, [r6, #0]
    7ce2:	bb0d      	cbnz	r5, 7d28 <hci_disconn_complete+0x4c>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    7ce4:	f8b6 1001 	ldrh.w	r1, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    7ce8:	9101      	str	r1, [sp, #4]
    7cea:	4608      	mov	r0, r1
    7cec:	f002 fc62 	bl	a5b4 <bt_conn_lookup_handle>
	if (!conn) {
    7cf0:	9901      	ldr	r1, [sp, #4]
    7cf2:	4604      	mov	r4, r0
    7cf4:	b960      	cbnz	r0, 7d10 <hci_disconn_complete+0x34>
    7cf6:	4b0d      	ldr	r3, [pc, #52]	; (7d2c <hci_disconn_complete+0x50>)
    7cf8:	4a0d      	ldr	r2, [pc, #52]	; (7d30 <hci_disconn_complete+0x54>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    7cfa:	480e      	ldr	r0, [pc, #56]	; (7d34 <hci_disconn_complete+0x58>)
    7cfc:	1ad2      	subs	r2, r2, r3
    7cfe:	08d2      	lsrs	r2, r2, #3
    7d00:	0192      	lsls	r2, r2, #6
    7d02:	f042 0201 	orr.w	r2, r2, #1
}
    7d06:	b002      	add	sp, #8
    7d08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    7d0c:	f015 be19 	b.w	1d942 <log_1>
	conn->err = evt->reason;
    7d10:	78f3      	ldrb	r3, [r6, #3]
    7d12:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7d14:	4629      	mov	r1, r5
    7d16:	f002 fc55 	bl	a5c4 <bt_conn_set_state>
		bt_conn_unref(conn);
    7d1a:	4620      	mov	r0, r4
	conn->handle = 0U;
    7d1c:	8025      	strh	r5, [r4, #0]
}
    7d1e:	b002      	add	sp, #8
    7d20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    7d24:	f018 b8e6 	b.w	1fef4 <bt_conn_unref>
}
    7d28:	b002      	add	sp, #8
    7d2a:	bd70      	pop	{r4, r5, r6, pc}
    7d2c:	000225d8 	.word	0x000225d8
    7d30:	000226b0 	.word	0x000226b0
    7d34:	00024a56 	.word	0x00024a56

00007d38 <hci_hardware_error>:
{
    7d38:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    7d3a:	2101      	movs	r1, #1
    7d3c:	3008      	adds	r0, #8
    7d3e:	f019 fccc 	bl	216da <net_buf_simple_pull_mem>
    7d42:	4b06      	ldr	r3, [pc, #24]	; (7d5c <hci_hardware_error+0x24>)
    7d44:	4a06      	ldr	r2, [pc, #24]	; (7d60 <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    7d46:	7801      	ldrb	r1, [r0, #0]
    7d48:	4806      	ldr	r0, [pc, #24]	; (7d64 <hci_hardware_error+0x2c>)
    7d4a:	1ad2      	subs	r2, r2, r3
    7d4c:	08d2      	lsrs	r2, r2, #3
    7d4e:	0192      	lsls	r2, r2, #6
}
    7d50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    7d54:	f042 0201 	orr.w	r2, r2, #1
    7d58:	f015 bdf3 	b.w	1d942 <log_1>
    7d5c:	000225d8 	.word	0x000225d8
    7d60:	000226b0 	.word	0x000226b0
    7d64:	00024a7c 	.word	0x00024a7c

00007d68 <hci_vendor_event>:
{
    7d68:	b510      	push	{r4, lr}
    7d6a:	4a0a      	ldr	r2, [pc, #40]	; (7d94 <hci_vendor_event+0x2c>)
    7d6c:	4c0a      	ldr	r4, [pc, #40]	; (7d98 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
    7d6e:	8981      	ldrh	r1, [r0, #12]
    7d70:	6880      	ldr	r0, [r0, #8]
    7d72:	1aa4      	subs	r4, r4, r2
    7d74:	f7ff fc74 	bl	7660 <bt_hex_real>
    7d78:	f7fd fcc4 	bl	5704 <log_strdup>
    7d7c:	08e4      	lsrs	r4, r4, #3
    7d7e:	01a4      	lsls	r4, r4, #6
    7d80:	f044 0402 	orr.w	r4, r4, #2
    7d84:	4601      	mov	r1, r0
    7d86:	4622      	mov	r2, r4
    7d88:	4804      	ldr	r0, [pc, #16]	; (7d9c <hci_vendor_event+0x34>)
}
    7d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    7d8e:	f015 bdd8 	b.w	1d942 <log_1>
    7d92:	bf00      	nop
    7d94:	000225d8 	.word	0x000225d8
    7d98:	000226b0 	.word	0x000226b0
    7d9c:	00024a9e 	.word	0x00024a9e

00007da0 <le_conn_update_complete>:
{
    7da0:	b530      	push	{r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    7da2:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    7da4:	f8b5 1001 	ldrh.w	r1, [r5, #1]
{
    7da8:	b085      	sub	sp, #20
	conn = bt_conn_lookup_handle(handle);
    7daa:	4608      	mov	r0, r1
    7dac:	9101      	str	r1, [sp, #4]
    7dae:	f002 fc01 	bl	a5b4 <bt_conn_lookup_handle>
	if (!conn) {
    7db2:	9901      	ldr	r1, [sp, #4]
    7db4:	4604      	mov	r4, r0
    7db6:	b960      	cbnz	r0, 7dd2 <le_conn_update_complete+0x32>
    7db8:	4b24      	ldr	r3, [pc, #144]	; (7e4c <le_conn_update_complete+0xac>)
    7dba:	4a25      	ldr	r2, [pc, #148]	; (7e50 <le_conn_update_complete+0xb0>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    7dbc:	4825      	ldr	r0, [pc, #148]	; (7e54 <le_conn_update_complete+0xb4>)
    7dbe:	1ad2      	subs	r2, r2, r3
    7dc0:	08d2      	lsrs	r2, r2, #3
    7dc2:	0192      	lsls	r2, r2, #6
    7dc4:	f042 0201 	orr.w	r2, r2, #1
}
    7dc8:	b005      	add	sp, #20
    7dca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    7dce:	f015 bdb8 	b.w	1d942 <log_1>
	if (!evt->status) {
    7dd2:	782b      	ldrb	r3, [r5, #0]
    7dd4:	b9cb      	cbnz	r3, 7e0a <le_conn_update_complete+0x6a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    7dd6:	792a      	ldrb	r2, [r5, #4]
    7dd8:	78eb      	ldrb	r3, [r5, #3]
    7dda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7dde:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    7de2:	79aa      	ldrb	r2, [r5, #6]
    7de4:	796b      	ldrb	r3, [r5, #5]
    7de6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7dea:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    7dee:	79eb      	ldrb	r3, [r5, #7]
    7df0:	7a2a      	ldrb	r2, [r5, #8]
    7df2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7df6:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    7dfa:	f002 f9df 	bl	a1bc <notify_le_param_updated>
	bt_conn_unref(conn);
    7dfe:	4620      	mov	r0, r4
}
    7e00:	b005      	add	sp, #20
    7e02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
    7e06:	f018 b875 	b.w	1fef4 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    7e0a:	2b1a      	cmp	r3, #26
    7e0c:	d1f7      	bne.n	7dfe <le_conn_update_complete+0x5e>
    7e0e:	78c3      	ldrb	r3, [r0, #3]
    7e10:	2b01      	cmp	r3, #1
    7e12:	d1f4      	bne.n	7dfe <le_conn_update_complete+0x5e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    7e14:	f44f 6180 	mov.w	r1, #1024	; 0x400
    7e18:	3004      	adds	r0, #4
    7e1a:	f017 fcd8 	bl	1f7ce <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    7e1e:	0543      	lsls	r3, r0, #21
    7e20:	d4ed      	bmi.n	7dfe <le_conn_update_complete+0x5e>
		param.interval_min = conn->le.interval_min;
    7e22:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    7e26:	f8ad 3008 	strh.w	r3, [sp, #8]
		param.interval_max = conn->le.interval_max;
    7e2a:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
    7e2e:	f8ad 300a 	strh.w	r3, [sp, #10]
		param.latency = conn->le.pending_latency;
    7e32:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    7e36:	f8ad 300c 	strh.w	r3, [sp, #12]
		bt_l2cap_update_conn_param(conn, &param);
    7e3a:	a902      	add	r1, sp, #8
		param.timeout = conn->le.pending_timeout;
    7e3c:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    7e40:	f8ad 300e 	strh.w	r3, [sp, #14]
		bt_l2cap_update_conn_param(conn, &param);
    7e44:	4620      	mov	r0, r4
    7e46:	f002 fff7 	bl	ae38 <bt_l2cap_update_conn_param>
    7e4a:	e7d8      	b.n	7dfe <le_conn_update_complete+0x5e>
    7e4c:	000225d8 	.word	0x000225d8
    7e50:	000226b0 	.word	0x000226b0
    7e54:	00024a32 	.word	0x00024a32

00007e58 <handle_event>:
{
    7e58:	b530      	push	{r4, r5, lr}
    7e5a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7e5e:	4605      	mov	r5, r0
    7e60:	b085      	sub	sp, #20
    7e62:	4608      	mov	r0, r1
		if (handler->event != event) {
    7e64:	7811      	ldrb	r1, [r2, #0]
    7e66:	42a9      	cmp	r1, r5
    7e68:	d01b      	beq.n	7ea2 <handle_event+0x4a>
	for (i = 0; i < num_handlers; i++) {
    7e6a:	3208      	adds	r2, #8
    7e6c:	4293      	cmp	r3, r2
    7e6e:	d1f9      	bne.n	7e64 <handle_event+0xc>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    7e70:	8982      	ldrh	r2, [r0, #12]
    7e72:	4b17      	ldr	r3, [pc, #92]	; (7ed0 <handle_event+0x78>)
    7e74:	4c17      	ldr	r4, [pc, #92]	; (7ed4 <handle_event+0x7c>)
    7e76:	6880      	ldr	r0, [r0, #8]
    7e78:	9203      	str	r2, [sp, #12]
    7e7a:	4611      	mov	r1, r2
    7e7c:	1ae4      	subs	r4, r4, r3
    7e7e:	f7ff fbef 	bl	7660 <bt_hex_real>
    7e82:	f7fd fc3f 	bl	5704 <log_strdup>
    7e86:	08e4      	lsrs	r4, r4, #3
    7e88:	01a4      	lsls	r4, r4, #6
    7e8a:	f044 0402 	orr.w	r4, r4, #2
    7e8e:	4603      	mov	r3, r0
    7e90:	9a03      	ldr	r2, [sp, #12]
    7e92:	4811      	ldr	r0, [pc, #68]	; (7ed8 <handle_event+0x80>)
    7e94:	f8ad 4000 	strh.w	r4, [sp]
    7e98:	4629      	mov	r1, r5
    7e9a:	f015 fd82 	bl	1d9a2 <log_3>
}
    7e9e:	b005      	add	sp, #20
    7ea0:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
    7ea2:	8981      	ldrh	r1, [r0, #12]
    7ea4:	7853      	ldrb	r3, [r2, #1]
    7ea6:	428b      	cmp	r3, r1
    7ea8:	d90d      	bls.n	7ec6 <handle_event+0x6e>
    7eaa:	4a09      	ldr	r2, [pc, #36]	; (7ed0 <handle_event+0x78>)
    7eac:	4b09      	ldr	r3, [pc, #36]	; (7ed4 <handle_event+0x7c>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    7eae:	480b      	ldr	r0, [pc, #44]	; (7edc <handle_event+0x84>)
    7eb0:	1a9b      	subs	r3, r3, r2
    7eb2:	08db      	lsrs	r3, r3, #3
    7eb4:	019b      	lsls	r3, r3, #6
    7eb6:	f043 0301 	orr.w	r3, r3, #1
    7eba:	462a      	mov	r2, r5
}
    7ebc:	b005      	add	sp, #20
    7ebe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    7ec2:	f015 bd55 	b.w	1d970 <log_2>
		handler->handler(buf);
    7ec6:	6853      	ldr	r3, [r2, #4]
}
    7ec8:	b005      	add	sp, #20
    7eca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
    7ece:	4718      	bx	r3
    7ed0:	000225d8 	.word	0x000225d8
    7ed4:	000226b0 	.word	0x000226b0
    7ed8:	00024ae4 	.word	0x00024ae4
    7edc:	00024ac2 	.word	0x00024ac2

00007ee0 <hci_le_meta_event>:
{
    7ee0:	b510      	push	{r4, lr}
    7ee2:	2101      	movs	r1, #1
    7ee4:	4604      	mov	r4, r0
    7ee6:	3008      	adds	r0, #8
    7ee8:	f019 fbf7 	bl	216da <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    7eec:	4621      	mov	r1, r4
    7eee:	4a03      	ldr	r2, [pc, #12]	; (7efc <hci_le_meta_event+0x1c>)
    7ef0:	7800      	ldrb	r0, [r0, #0]
}
    7ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    7ef6:	230a      	movs	r3, #10
    7ef8:	f7ff bfae 	b.w	7e58 <handle_event>
    7efc:	00022ce8 	.word	0x00022ce8

00007f00 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    7f00:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    7f02:	4c0d      	ldr	r4, [pc, #52]	; (7f38 <find_pending_connect.part.0+0x38>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    7f04:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    7f06:	2205      	movs	r2, #5
    7f08:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    7f0c:	f002 fc92 	bl	a834 <bt_conn_lookup_state_le>
		if (!conn) {
    7f10:	b978      	cbnz	r0, 7f32 <find_pending_connect.part.0+0x32>
						       BT_ADDR_LE_NONE,
    7f12:	4b0a      	ldr	r3, [pc, #40]	; (7f3c <find_pending_connect.part.0+0x3c>)
    7f14:	6b18      	ldr	r0, [r3, #48]	; 0x30
    7f16:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    7f18:	9000      	str	r0, [sp, #0]
    7f1a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
    7f1e:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    7f22:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
    7f26:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    7f2a:	2204      	movs	r2, #4
    7f2c:	4669      	mov	r1, sp
    7f2e:	f002 fc81 	bl	a834 <bt_conn_lookup_state_le>
}
    7f32:	b002      	add	sp, #8
    7f34:	bd10      	pop	{r4, pc}
    7f36:	bf00      	nop
    7f38:	20000000 	.word	0x20000000
    7f3c:	000227d0 	.word	0x000227d0

00007f40 <hci_cmd_done>:
{
    7f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7f44:	4607      	mov	r7, r0
    7f46:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    7f48:	7990      	ldrb	r0, [r2, #6]
    7f4a:	4e41      	ldr	r6, [pc, #260]	; (8050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50>)
{
    7f4c:	4688      	mov	r8, r1
    7f4e:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    7f50:	f011 ffa4 	bl	19e9c <net_buf_pool_get>
    7f54:	4286      	cmp	r6, r0
    7f56:	d016      	beq.n	7f86 <hci_cmd_done+0x46>
    7f58:	4b3e      	ldr	r3, [pc, #248]	; (8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>)
    7f5a:	4d3f      	ldr	r5, [pc, #252]	; (8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    7f5c:	79a0      	ldrb	r0, [r4, #6]
    7f5e:	9700      	str	r7, [sp, #0]
    7f60:	1aed      	subs	r5, r5, r3
    7f62:	08ed      	lsrs	r5, r5, #3
    7f64:	9001      	str	r0, [sp, #4]
    7f66:	f011 ff99 	bl	19e9c <net_buf_pool_get>
    7f6a:	01ad      	lsls	r5, r5, #6
    7f6c:	f045 0502 	orr.w	r5, r5, #2
    7f70:	e9cd 0602 	strd	r0, r6, [sp, #8]
    7f74:	462b      	mov	r3, r5
    7f76:	4839      	ldr	r0, [pc, #228]	; (805c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c>)
    7f78:	2204      	movs	r2, #4
    7f7a:	4669      	mov	r1, sp
    7f7c:	f015 fd30 	bl	1d9e0 <log_n>
}
    7f80:	b005      	add	sp, #20
    7f82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    7f86:	4620      	mov	r0, r4
    7f88:	f011 ff90 	bl	19eac <net_buf_id>
    7f8c:	4d34      	ldr	r5, [pc, #208]	; (8060 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x60>)
    7f8e:	f04f 090c 	mov.w	r9, #12
    7f92:	fb09 5000 	mla	r0, r9, r0, r5
    7f96:	8843      	ldrh	r3, [r0, #2]
    7f98:	42bb      	cmp	r3, r7
    7f9a:	d011      	beq.n	7fc0 <hci_cmd_done+0x80>
    7f9c:	4b2d      	ldr	r3, [pc, #180]	; (8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>)
    7f9e:	4e2e      	ldr	r6, [pc, #184]	; (8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    7fa0:	4620      	mov	r0, r4
    7fa2:	1af6      	subs	r6, r6, r3
    7fa4:	f011 ff82 	bl	19eac <net_buf_id>
    7fa8:	08f6      	lsrs	r6, r6, #3
    7faa:	fb09 5000 	mla	r0, r9, r0, r5
    7fae:	01b6      	lsls	r6, r6, #6
    7fb0:	f046 0602 	orr.w	r6, r6, #2
    7fb4:	8842      	ldrh	r2, [r0, #2]
    7fb6:	482b      	ldr	r0, [pc, #172]	; (8064 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x64>)
    7fb8:	4633      	mov	r3, r6
    7fba:	4639      	mov	r1, r7
    7fbc:	f015 fcd8 	bl	1d970 <log_2>
	if (cmd(buf)->state && !status) {
    7fc0:	4620      	mov	r0, r4
    7fc2:	f011 ff73 	bl	19eac <net_buf_id>
    7fc6:	260c      	movs	r6, #12
    7fc8:	fb06 5000 	mla	r0, r6, r0, r5
    7fcc:	6843      	ldr	r3, [r0, #4]
    7fce:	b1ab      	cbz	r3, 7ffc <hci_cmd_done+0xbc>
    7fd0:	f1b8 0f00 	cmp.w	r8, #0
    7fd4:	d112      	bne.n	7ffc <hci_cmd_done+0xbc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    7fd6:	4620      	mov	r0, r4
    7fd8:	f011 ff68 	bl	19eac <net_buf_id>
    7fdc:	fb06 5000 	mla	r0, r6, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
    7fe0:	2101      	movs	r1, #1
    7fe2:	6842      	ldr	r2, [r0, #4]
    7fe4:	e9d2 3000 	ldrd	r3, r0, [r2]
	if (val) {
    7fe8:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    7fea:	f000 061f 	and.w	r6, r0, #31
    7fee:	40b1      	lsls	r1, r6
	if (val) {
    7ff0:	0940      	lsrs	r0, r0, #5
    7ff2:	b1ea      	cbz	r2, 8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7ff4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7ff8:	f017 fbe9 	bl	1f7ce <atomic_or>
	if (cmd(buf)->sync) {
    7ffc:	4620      	mov	r0, r4
    7ffe:	f011 ff55 	bl	19eac <net_buf_id>
    8002:	260c      	movs	r6, #12
    8004:	fb06 5000 	mla	r0, r6, r0, r5
    8008:	6883      	ldr	r3, [r0, #8]
    800a:	2b00      	cmp	r3, #0
    800c:	d0b8      	beq.n	7f80 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    800e:	4620      	mov	r0, r4
    8010:	f011 ff4c 	bl	19eac <net_buf_id>
    8014:	4370      	muls	r0, r6
    8016:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    801a:	4620      	mov	r0, r4
    801c:	f011 ff46 	bl	19eac <net_buf_id>
    8020:	fb06 5000 	mla	r0, r6, r0, r5
    8024:	6880      	ldr	r0, [r0, #8]
}
    8026:	b005      	add	sp, #20
    8028:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	z_impl_k_sem_give(sem);
    802c:	f014 b8b8 	b.w	1c1a0 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8030:	43c9      	mvns	r1, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8032:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    8036:	f3bf 8f5b 	dmb	ish
    803a:	e853 2f00 	ldrex	r2, [r3]
    803e:	400a      	ands	r2, r1
    8040:	e843 2000 	strex	r0, r2, [r3]
    8044:	2800      	cmp	r0, #0
    8046:	d1f8      	bne.n	803a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a>
    8048:	f3bf 8f5b 	dmb	ish
    804c:	e7d6      	b.n	7ffc <hci_cmd_done+0xbc>
    804e:	bf00      	nop
    8050:	20000990 	.word	0x20000990
    8054:	000225d8 	.word	0x000225d8
    8058:	000226b0 	.word	0x000226b0
    805c:	00024b06 	.word	0x00024b06
    8060:	20001920 	.word	0x20001920
    8064:	00024b3b 	.word	0x00024b3b

00008068 <hci_cmd_status>:
{
    8068:	b538      	push	{r3, r4, r5, lr}
    806a:	2104      	movs	r1, #4
    806c:	4604      	mov	r4, r0
    806e:	3008      	adds	r0, #8
    8070:	f019 fb33 	bl	216da <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    8074:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    8076:	7801      	ldrb	r1, [r0, #0]
    8078:	8840      	ldrh	r0, [r0, #2]
    807a:	4622      	mov	r2, r4
    807c:	f7ff ff60 	bl	7f40 <hci_cmd_done>
	if (ncmd) {
    8080:	b125      	cbz	r5, 808c <hci_cmd_status+0x24>
    8082:	4803      	ldr	r0, [pc, #12]	; (8090 <hci_cmd_status+0x28>)
}
    8084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8088:	f014 b88a 	b.w	1c1a0 <z_impl_k_sem_give>
    808c:	bd38      	pop	{r3, r4, r5, pc}
    808e:	bf00      	nop
    8090:	200000f0 	.word	0x200000f0

00008094 <hci_cmd_complete>:
{
    8094:	b538      	push	{r3, r4, r5, lr}
    8096:	2103      	movs	r1, #3
    8098:	4604      	mov	r4, r0
    809a:	3008      	adds	r0, #8
    809c:	f019 fb1d 	bl	216da <net_buf_simple_pull_mem>
	status = buf->data[0];
    80a0:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    80a2:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    80a4:	7819      	ldrb	r1, [r3, #0]
    80a6:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    80aa:	4622      	mov	r2, r4
    80ac:	f7ff ff48 	bl	7f40 <hci_cmd_done>
	if (ncmd) {
    80b0:	b125      	cbz	r5, 80bc <hci_cmd_complete+0x28>
    80b2:	4803      	ldr	r0, [pc, #12]	; (80c0 <hci_cmd_complete+0x2c>)
}
    80b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    80b8:	f014 b872 	b.w	1c1a0 <z_impl_k_sem_give>
    80bc:	bd38      	pop	{r3, r4, r5, pc}
    80be:	bf00      	nop
    80c0:	200000f0 	.word	0x200000f0

000080c4 <hci_tx_thread>:
{
    80c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    80c8:	4d51      	ldr	r5, [pc, #324]	; (8210 <hci_tx_thread+0x14c>)
    80ca:	4b52      	ldr	r3, [pc, #328]	; (8214 <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
    80cc:	f8df 914c 	ldr.w	r9, [pc, #332]	; 821c <hci_tx_thread+0x158>
		BT_ASSERT(err == 0);
    80d0:	f8df a174 	ldr.w	sl, [pc, #372]	; 8248 <hci_tx_thread+0x184>
    80d4:	1aed      	subs	r5, r5, r3
    80d6:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
    80d8:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    80dc:	484e      	ldr	r0, [pc, #312]	; (8218 <hci_tx_thread+0x154>)
		events[0].state = K_POLL_STATE_NOT_READY;
    80de:	f36f 3310 	bfc	r3, #12, #5
    80e2:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    80e6:	f002 fa05 	bl	a4f4 <bt_conn_prepare_events>
    80ea:	1c47      	adds	r7, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    80ec:	484b      	ldr	r0, [pc, #300]	; (821c <hci_tx_thread+0x158>)
    80ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    80f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    80f6:	4639      	mov	r1, r7
    80f8:	f014 fc38 	bl	1c96c <z_impl_k_poll>
		BT_ASSERT(err == 0);
    80fc:	b160      	cbz	r0, 8118 <hci_tx_thread+0x54>
    80fe:	4948      	ldr	r1, [pc, #288]	; (8220 <hci_tx_thread+0x15c>)
    8100:	4848      	ldr	r0, [pc, #288]	; (8224 <hci_tx_thread+0x160>)
    8102:	f640 1328 	movw	r3, #2344	; 0x928
    8106:	4652      	mov	r2, sl
    8108:	f014 ff94 	bl	1d034 <printk>
    810c:	4040      	eors	r0, r0
    810e:	f380 8811 	msr	BASEPRI, r0
    8112:	f04f 0003 	mov.w	r0, #3
    8116:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    8118:	4e43      	ldr	r6, [pc, #268]	; (8228 <hci_tx_thread+0x164>)
{
    811a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 821c <hci_tx_thread+0x158>
    811e:	f106 0bf0 	add.w	fp, r6, #240	; 0xf0
	for (; count; ev++, count--) {
    8122:	b917      	cbnz	r7, 812a <hci_tx_thread+0x66>
	z_impl_k_yield();
    8124:	f013 ff1c 	bl	1bf60 <z_impl_k_yield>
	while (1) {
    8128:	e7d6      	b.n	80d8 <hci_tx_thread+0x14>
		switch (ev->state) {
    812a:	f8d8 100c 	ldr.w	r1, [r8, #12]
    812e:	f3c1 3104 	ubfx	r1, r1, #12, #5
    8132:	2901      	cmp	r1, #1
    8134:	d959      	bls.n	81ea <hci_tx_thread+0x126>
    8136:	2904      	cmp	r1, #4
    8138:	d163      	bne.n	8202 <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    813a:	f898 300c 	ldrb.w	r3, [r8, #12]
    813e:	2b00      	cmp	r3, #0
    8140:	d157      	bne.n	81f2 <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    8142:	483a      	ldr	r0, [pc, #232]	; (822c <hci_tx_thread+0x168>)
    8144:	2200      	movs	r2, #0
    8146:	2300      	movs	r3, #0
    8148:	f019 fa4e 	bl	215e8 <net_buf_get>
	BT_ASSERT(buf);
    814c:	4604      	mov	r4, r0
    814e:	b960      	cbnz	r0, 816a <hci_tx_thread+0xa6>
    8150:	4937      	ldr	r1, [pc, #220]	; (8230 <hci_tx_thread+0x16c>)
    8152:	4834      	ldr	r0, [pc, #208]	; (8224 <hci_tx_thread+0x160>)
    8154:	f640 03c5 	movw	r3, #2245	; 0x8c5
    8158:	4652      	mov	r2, sl
    815a:	f014 ff6b 	bl	1d034 <printk>
    815e:	4040      	eors	r0, r0
    8160:	f380 8811 	msr	BASEPRI, r0
    8164:	f04f 0003 	mov.w	r0, #3
    8168:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    816a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    816e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8172:	4658      	mov	r0, fp
    8174:	f014 f83a 	bl	1c1ec <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    8178:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
    817c:	b163      	cbz	r3, 8198 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
    817e:	01a9      	lsls	r1, r5, #6
    8180:	482c      	ldr	r0, [pc, #176]	; (8234 <hci_tx_thread+0x170>)
    8182:	f041 0101 	orr.w	r1, r1, #1
    8186:	f015 fbcd 	bl	1d924 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    818a:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
    818e:	f011 ff43 	bl	1a018 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    8192:	2300      	movs	r3, #0
    8194:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
	bt_dev.sent_cmd = net_buf_ref(buf);
    8198:	4620      	mov	r0, r4
    819a:	f019 fa51 	bl	21640 <net_buf_ref>
    819e:	f8c6 0108 	str.w	r0, [r6, #264]	; 0x108
		return bt_hci_ecc_send(buf);
    81a2:	4620      	mov	r0, r4
    81a4:	f7ff fbf4 	bl	7990 <bt_hci_ecc_send>
	if (err) {
    81a8:	4601      	mov	r1, r0
    81aa:	b1f0      	cbz	r0, 81ea <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
    81ac:	01aa      	lsls	r2, r5, #6
    81ae:	4822      	ldr	r0, [pc, #136]	; (8238 <hci_tx_thread+0x174>)
    81b0:	f042 0201 	orr.w	r2, r2, #1
    81b4:	f015 fbc5 	bl	1d942 <log_1>
	z_impl_k_sem_give(sem);
    81b8:	4820      	ldr	r0, [pc, #128]	; (823c <hci_tx_thread+0x178>)
    81ba:	f013 fff1 	bl	1c1a0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    81be:	4620      	mov	r0, r4
    81c0:	f011 fe74 	bl	19eac <net_buf_id>
    81c4:	4b1e      	ldr	r3, [pc, #120]	; (8240 <hci_tx_thread+0x17c>)
    81c6:	220c      	movs	r2, #12
    81c8:	fb02 3000 	mla	r0, r2, r0, r3
    81cc:	211f      	movs	r1, #31
    81ce:	8840      	ldrh	r0, [r0, #2]
    81d0:	4622      	mov	r2, r4
    81d2:	f7ff feb5 	bl	7f40 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    81d6:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
    81da:	f011 ff1d 	bl	1a018 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    81de:	2300      	movs	r3, #0
		net_buf_unref(buf);
    81e0:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    81e2:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
		net_buf_unref(buf);
    81e6:	f011 ff17 	bl	1a018 <net_buf_unref>
	for (; count; ev++, count--) {
    81ea:	f108 0814 	add.w	r8, r8, #20
    81ee:	3f01      	subs	r7, #1
    81f0:	e797      	b.n	8122 <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    81f2:	2b01      	cmp	r3, #1
    81f4:	d1f9      	bne.n	81ea <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    81f6:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    81fa:	3838      	subs	r0, #56	; 0x38
    81fc:	f002 fc22 	bl	aa44 <bt_conn_process_tx>
    8200:	e7f3      	b.n	81ea <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    8202:	01aa      	lsls	r2, r5, #6
    8204:	480f      	ldr	r0, [pc, #60]	; (8244 <hci_tx_thread+0x180>)
    8206:	f042 0202 	orr.w	r2, r2, #2
    820a:	f015 fb9a 	bl	1d942 <log_1>
    820e:	e7ec      	b.n	81ea <hci_tx_thread+0x126>
    8210:	000226b0 	.word	0x000226b0
    8214:	000225d8 	.word	0x000225d8
    8218:	20000208 	.word	0x20000208
    821c:	200001f4 	.word	0x200001f4
    8220:	00024ba2 	.word	0x00024ba2
    8224:	00024bab 	.word	0x00024bab
    8228:	20000000 	.word	0x20000000
    822c:	2000010c 	.word	0x2000010c
    8230:	00024913 	.word	0x00024913
    8234:	00024bc8 	.word	0x00024bc8
    8238:	00024be3 	.word	0x00024be3
    823c:	200000f0 	.word	0x200000f0
    8240:	20001920 	.word	0x20001920
    8244:	00024c05 	.word	0x00024c05
    8248:	00024b6e 	.word	0x00024b6e

0000824c <hci_num_completed_packets>:
{
    824c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8250:	4b3b      	ldr	r3, [pc, #236]	; (8340 <hci_num_completed_packets+0xf4>)
    8252:	4d3c      	ldr	r5, [pc, #240]	; (8344 <hci_num_completed_packets+0xf8>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    8254:	f8d0 8008 	ldr.w	r8, [r0, #8]
	return k_work_submit_to_queue(&k_sys_work_q, work);
    8258:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8350 <hci_num_completed_packets+0x104>
    825c:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
    825e:	2600      	movs	r6, #0
    8260:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
    8262:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
    8264:	f898 3000 	ldrb.w	r3, [r8]
    8268:	429e      	cmp	r6, r3
    826a:	db02      	blt.n	8272 <hci_num_completed_packets+0x26>
}
    826c:	b003      	add	sp, #12
    826e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    8272:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    8276:	f8b3 1001 	ldrh.w	r1, [r3, #1]
		conn = bt_conn_lookup_handle(handle);
    827a:	9101      	str	r1, [sp, #4]
    827c:	4608      	mov	r0, r1
		count = sys_le16_to_cpu(evt->h[i].count);
    827e:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    8282:	f002 f997 	bl	a5b4 <bt_conn_lookup_handle>
		if (!conn) {
    8286:	9901      	ldr	r1, [sp, #4]
    8288:	4604      	mov	r4, r0
    828a:	b1d8      	cbz	r0, 82c4 <hci_num_completed_packets+0x78>
			k_work_submit(&conn->tx_complete_work);
    828c:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    8290:	2f00      	cmp	r7, #0
    8292:	d032      	beq.n	82fa <hci_num_completed_packets+0xae>
	__asm__ volatile(
    8294:	f04f 0320 	mov.w	r3, #32
    8298:	f3ef 8111 	mrs	r1, BASEPRI
    829c:	f383 8811 	msr	BASEPRI, r3
    82a0:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    82a4:	69e3      	ldr	r3, [r4, #28]
    82a6:	b1ab      	cbz	r3, 82d4 <hci_num_completed_packets+0x88>
				conn->pending_no_cb--;
    82a8:	3b01      	subs	r3, #1
    82aa:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    82ac:	f381 8811 	msr	BASEPRI, r1
    82b0:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    82b4:	4620      	mov	r0, r4
    82b6:	f001 ff7d 	bl	a1b4 <bt_conn_get_pkts>
    82ba:	3f01      	subs	r7, #1
    82bc:	f013 ff70 	bl	1c1a0 <z_impl_k_sem_give>
    82c0:	b2bf      	uxth	r7, r7
    82c2:	e7e5      	b.n	8290 <hci_num_completed_packets+0x44>
			BT_ERR("No connection for handle %u", handle);
    82c4:	01aa      	lsls	r2, r5, #6
    82c6:	4820      	ldr	r0, [pc, #128]	; (8348 <hci_num_completed_packets+0xfc>)
    82c8:	f042 0201 	orr.w	r2, r2, #1
    82cc:	f015 fb39 	bl	1d942 <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    82d0:	3601      	adds	r6, #1
    82d2:	e7c7      	b.n	8264 <hci_num_completed_packets+0x18>
	return list->head;
    82d4:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
    82d6:	b12b      	cbz	r3, 82e4 <hci_num_completed_packets+0x98>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    82d8:	69a2      	ldr	r2, [r4, #24]
	return node->next;
    82da:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    82dc:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    82de:	4293      	cmp	r3, r2
	list->tail = node;
    82e0:	bf08      	it	eq
    82e2:	61a0      	streq	r0, [r4, #24]
    82e4:	f381 8811 	msr	BASEPRI, r1
    82e8:	f3bf 8f6f 	isb	sy
			if (!node) {
    82ec:	b94b      	cbnz	r3, 8302 <hci_num_completed_packets+0xb6>
				BT_ERR("packets count mismatch");
    82ee:	01a9      	lsls	r1, r5, #6
    82f0:	4816      	ldr	r0, [pc, #88]	; (834c <hci_num_completed_packets+0x100>)
    82f2:	f041 0101 	orr.w	r1, r1, #1
    82f6:	f015 fb15 	bl	1d924 <log_0>
		bt_conn_unref(conn);
    82fa:	4620      	mov	r0, r4
    82fc:	f017 fdfa 	bl	1fef4 <bt_conn_unref>
    8300:	e7e6      	b.n	82d0 <hci_num_completed_packets+0x84>
	__asm__ volatile(
    8302:	f04f 0220 	mov.w	r2, #32
    8306:	f3ef 8111 	mrs	r1, BASEPRI
    830a:	f382 8811 	msr	BASEPRI, r2
    830e:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    8312:	68da      	ldr	r2, [r3, #12]
    8314:	61e2      	str	r2, [r4, #28]
	return list->tail;
    8316:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    8318:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
    831c:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    8320:	b952      	cbnz	r2, 8338 <hci_num_completed_packets+0xec>
	list->head = node;
    8322:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    8326:	f381 8811 	msr	BASEPRI, r1
    832a:	f3bf 8f6f 	isb	sy
    832e:	4659      	mov	r1, fp
    8330:	4650      	mov	r0, sl
    8332:	f019 fe16 	bl	21f62 <k_work_submit_to_queue>
    8336:	e7bd      	b.n	82b4 <hci_num_completed_packets+0x68>
	parent->next = child;
    8338:	6013      	str	r3, [r2, #0]
	list->tail = node;
    833a:	6263      	str	r3, [r4, #36]	; 0x24
}
    833c:	e7f3      	b.n	8326 <hci_num_completed_packets+0xda>
    833e:	bf00      	nop
    8340:	000225d8 	.word	0x000225d8
    8344:	000226b0 	.word	0x000226b0
    8348:	00024c26 	.word	0x00024c26
    834c:	00024c42 	.word	0x00024c42
    8350:	200015c0 	.word	0x200015c0

00008354 <bt_hci_cmd_state_set_init>:
{
    8354:	b510      	push	{r4, lr}
	state->bit = bit;
    8356:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    835a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    835e:	720b      	strb	r3, [r1, #8]
{
    8360:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    8362:	f011 fda3 	bl	19eac <net_buf_id>
    8366:	4b03      	ldr	r3, [pc, #12]	; (8374 <bt_hci_cmd_state_set_init+0x20>)
    8368:	220c      	movs	r2, #12
    836a:	fb02 3000 	mla	r0, r2, r0, r3
    836e:	6044      	str	r4, [r0, #4]
}
    8370:	bd10      	pop	{r4, pc}
    8372:	bf00      	nop
    8374:	20001920 	.word	0x20001920

00008378 <bt_hci_cmd_create>:
{
    8378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    837c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8380:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8384:	4606      	mov	r6, r0
    8386:	4817      	ldr	r0, [pc, #92]	; (83e4 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    8388:	4d17      	ldr	r5, [pc, #92]	; (83e8 <bt_hci_cmd_create+0x70>)
{
    838a:	460f      	mov	r7, r1
    838c:	f019 f927 	bl	215de <net_buf_alloc_fixed>
    8390:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    8392:	f100 0a08 	add.w	sl, r0, #8
    8396:	2100      	movs	r1, #0
    8398:	f04f 0800 	mov.w	r8, #0
    839c:	4650      	mov	r0, sl
    839e:	f019 f93d 	bl	2161c <net_buf_simple_reserve>
    83a2:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    83a6:	4620      	mov	r0, r4
    83a8:	f011 fd80 	bl	19eac <net_buf_id>
    83ac:	f04f 090c 	mov.w	r9, #12
    83b0:	fb09 5000 	mla	r0, r9, r0, r5
    83b4:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    83b6:	4620      	mov	r0, r4
    83b8:	f011 fd78 	bl	19eac <net_buf_id>
    83bc:	fb09 5000 	mla	r0, r9, r0, r5
    83c0:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    83c4:	4620      	mov	r0, r4
    83c6:	f011 fd71 	bl	19eac <net_buf_id>
    83ca:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    83ce:	2103      	movs	r1, #3
    83d0:	f8c5 8004 	str.w	r8, [r5, #4]
    83d4:	4650      	mov	r0, sl
    83d6:	f019 f959 	bl	2168c <net_buf_simple_add>
	hdr->param_len = param_len;
    83da:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    83dc:	8006      	strh	r6, [r0, #0]
}
    83de:	4620      	mov	r0, r4
    83e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    83e4:	20000990 	.word	0x20000990
    83e8:	20001920 	.word	0x20001920

000083ec <bt_hci_cmd_send>:
{
    83ec:	b538      	push	{r3, r4, r5, lr}
    83ee:	4605      	mov	r5, r0
	if (!buf) {
    83f0:	460c      	mov	r4, r1
    83f2:	b919      	cbnz	r1, 83fc <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    83f4:	f7ff ffc0 	bl	8378 <bt_hci_cmd_create>
		if (!buf) {
    83f8:	4604      	mov	r4, r0
    83fa:	b1f0      	cbz	r0, 843a <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    83fc:	f640 4335 	movw	r3, #3125	; 0xc35
    8400:	429d      	cmp	r5, r3
    8402:	d114      	bne.n	842e <bt_hci_cmd_send+0x42>
		return bt_hci_ecc_send(buf);
    8404:	4620      	mov	r0, r4
    8406:	f7ff fac3 	bl	7990 <bt_hci_ecc_send>
		if (err) {
    840a:	4605      	mov	r5, r0
    840c:	b168      	cbz	r0, 842a <bt_hci_cmd_send+0x3e>
    840e:	4b0c      	ldr	r3, [pc, #48]	; (8440 <bt_hci_cmd_send+0x54>)
    8410:	4a0c      	ldr	r2, [pc, #48]	; (8444 <bt_hci_cmd_send+0x58>)
    8412:	1ad2      	subs	r2, r2, r3
    8414:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
    8416:	0192      	lsls	r2, r2, #6
    8418:	4601      	mov	r1, r0
    841a:	f042 0201 	orr.w	r2, r2, #1
    841e:	480a      	ldr	r0, [pc, #40]	; (8448 <bt_hci_cmd_send+0x5c>)
    8420:	f015 fa8f 	bl	1d942 <log_1>
			net_buf_unref(buf);
    8424:	4620      	mov	r0, r4
    8426:	f011 fdf7 	bl	1a018 <net_buf_unref>
}
    842a:	4628      	mov	r0, r5
    842c:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    842e:	4807      	ldr	r0, [pc, #28]	; (844c <bt_hci_cmd_send+0x60>)
    8430:	4621      	mov	r1, r4
    8432:	f019 f8f7 	bl	21624 <net_buf_put>
	return 0;
    8436:	2500      	movs	r5, #0
    8438:	e7f7      	b.n	842a <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    843a:	f06f 0536 	mvn.w	r5, #54	; 0x36
    843e:	e7f4      	b.n	842a <bt_hci_cmd_send+0x3e>
    8440:	000225d8 	.word	0x000225d8
    8444:	000226b0 	.word	0x000226b0
    8448:	00024be3 	.word	0x00024be3
    844c:	2000010c 	.word	0x2000010c

00008450 <le_ltk_request>:
{
    8450:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    8452:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    8454:	882e      	ldrh	r6, [r5, #0]
{
    8456:	b089      	sub	sp, #36	; 0x24
	handle = sys_le16_to_cpu(evt->handle);
    8458:	b2b1      	uxth	r1, r6
	conn = bt_conn_lookup_handle(handle);
    845a:	4608      	mov	r0, r1
    845c:	9103      	str	r1, [sp, #12]
    845e:	f002 f8a9 	bl	a5b4 <bt_conn_lookup_handle>
	if (!conn) {
    8462:	9903      	ldr	r1, [sp, #12]
    8464:	4604      	mov	r4, r0
    8466:	b960      	cbnz	r0, 8482 <le_ltk_request+0x32>
    8468:	4b27      	ldr	r3, [pc, #156]	; (8508 <le_ltk_request+0xb8>)
    846a:	4a28      	ldr	r2, [pc, #160]	; (850c <le_ltk_request+0xbc>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    846c:	4828      	ldr	r0, [pc, #160]	; (8510 <le_ltk_request+0xc0>)
    846e:	1ad2      	subs	r2, r2, r3
    8470:	08d2      	lsrs	r2, r2, #3
    8472:	0192      	lsls	r2, r2, #6
    8474:	f042 0201 	orr.w	r2, r2, #1
}
    8478:	b009      	add	sp, #36	; 0x24
    847a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    847e:	f015 ba60 	b.w	1d942 <log_1>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    8482:	af04      	add	r7, sp, #16
    8484:	f8d5 2002 	ldr.w	r2, [r5, #2]
    8488:	f8d5 3006 	ldr.w	r3, [r5, #6]
    848c:	9701      	str	r7, [sp, #4]
    848e:	8969      	ldrh	r1, [r5, #10]
    8490:	9100      	str	r1, [sp, #0]
    8492:	f018 ff1d 	bl	212d0 <bt_smp_request_ltk>
    8496:	b328      	cbz	r0, 84e4 <le_ltk_request+0x94>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    8498:	2112      	movs	r1, #18
    849a:	f242 001a 	movw	r0, #8218	; 0x201a
    849e:	f7ff ff6b 	bl	8378 <bt_hci_cmd_create>
	if (!buf) {
    84a2:	4605      	mov	r5, r0
    84a4:	b970      	cbnz	r0, 84c4 <le_ltk_request+0x74>
    84a6:	4919      	ldr	r1, [pc, #100]	; (850c <le_ltk_request+0xbc>)
    84a8:	4b17      	ldr	r3, [pc, #92]	; (8508 <le_ltk_request+0xb8>)
		BT_ERR("Out of command buffers");
    84aa:	481a      	ldr	r0, [pc, #104]	; (8514 <le_ltk_request+0xc4>)
    84ac:	1ac9      	subs	r1, r1, r3
    84ae:	08c9      	lsrs	r1, r1, #3
    84b0:	0189      	lsls	r1, r1, #6
    84b2:	f041 0101 	orr.w	r1, r1, #1
    84b6:	f015 fa35 	bl	1d924 <log_0>
	bt_conn_unref(conn);
    84ba:	4620      	mov	r0, r4
    84bc:	f017 fd1a 	bl	1fef4 <bt_conn_unref>
}
    84c0:	b009      	add	sp, #36	; 0x24
    84c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    84c4:	2112      	movs	r1, #18
    84c6:	3008      	adds	r0, #8
    84c8:	f019 f8e0 	bl	2168c <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    84cc:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
    84ce:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    84d2:	2210      	movs	r2, #16
    84d4:	f017 f800 	bl	1f4d8 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    84d8:	4629      	mov	r1, r5
    84da:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    84de:	f7ff ff85 	bl	83ec <bt_hci_cmd_send>
    84e2:	e7ea      	b.n	84ba <le_ltk_request+0x6a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    84e4:	2102      	movs	r1, #2
    84e6:	f242 001b 	movw	r0, #8219	; 0x201b
    84ea:	f7ff ff45 	bl	8378 <bt_hci_cmd_create>
	if (!buf) {
    84ee:	4605      	mov	r5, r0
    84f0:	2800      	cmp	r0, #0
    84f2:	d0d8      	beq.n	84a6 <le_ltk_request+0x56>
    84f4:	2102      	movs	r1, #2
    84f6:	3008      	adds	r0, #8
    84f8:	f019 f8c8 	bl	2168c <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    84fc:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
    84fe:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    8500:	f242 001b 	movw	r0, #8219	; 0x201b
    8504:	e7eb      	b.n	84de <le_ltk_request+0x8e>
    8506:	bf00      	nop
    8508:	000225d8 	.word	0x000225d8
    850c:	000226b0 	.word	0x000226b0
    8510:	00024a32 	.word	0x00024a32
    8514:	00024c59 	.word	0x00024c59

00008518 <le_conn_param_neg_reply>:
{
    8518:	b570      	push	{r4, r5, r6, lr}
    851a:	4606      	mov	r6, r0
    851c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    851e:	f242 0021 	movw	r0, #8225	; 0x2021
    8522:	2103      	movs	r1, #3
    8524:	f7ff ff28 	bl	8378 <bt_hci_cmd_create>
	if (!buf) {
    8528:	4604      	mov	r4, r0
    852a:	b958      	cbnz	r0, 8544 <le_conn_param_neg_reply+0x2c>
    852c:	490c      	ldr	r1, [pc, #48]	; (8560 <le_conn_param_neg_reply+0x48>)
    852e:	4b0d      	ldr	r3, [pc, #52]	; (8564 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
    8530:	480d      	ldr	r0, [pc, #52]	; (8568 <le_conn_param_neg_reply+0x50>)
    8532:	1ac9      	subs	r1, r1, r3
    8534:	08c9      	lsrs	r1, r1, #3
    8536:	0189      	lsls	r1, r1, #6
}
    8538:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    853c:	f041 0101 	orr.w	r1, r1, #1
    8540:	f015 b9f0 	b.w	1d924 <log_0>
    8544:	2103      	movs	r1, #3
    8546:	3008      	adds	r0, #8
    8548:	f019 f8a0 	bl	2168c <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    854c:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    854e:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    8550:	4621      	mov	r1, r4
    8552:	f242 0021 	movw	r0, #8225	; 0x2021
}
    8556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    855a:	f7ff bf47 	b.w	83ec <bt_hci_cmd_send>
    855e:	bf00      	nop
    8560:	000226b0 	.word	0x000226b0
    8564:	000225d8 	.word	0x000225d8
    8568:	00024c70 	.word	0x00024c70

0000856c <le_conn_param_req>:
{
    856c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    856e:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    8570:	78d9      	ldrb	r1, [r3, #3]
    8572:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    8574:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    8576:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    857a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    857e:	7959      	ldrb	r1, [r3, #5]
    8580:	791a      	ldrb	r2, [r3, #4]
    8582:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8586:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    858a:	799a      	ldrb	r2, [r3, #6]
    858c:	79d9      	ldrb	r1, [r3, #7]
    858e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8592:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    8596:	7a1a      	ldrb	r2, [r3, #8]
    8598:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    859a:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    859c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    85a0:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    85a2:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    85a6:	f002 f805 	bl	a5b4 <bt_conn_lookup_handle>
	if (!conn) {
    85aa:	4606      	mov	r6, r0
    85ac:	b980      	cbnz	r0, 85d0 <le_conn_param_req+0x64>
    85ae:	4b20      	ldr	r3, [pc, #128]	; (8630 <le_conn_param_req+0xc4>)
    85b0:	4a20      	ldr	r2, [pc, #128]	; (8634 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    85b2:	4821      	ldr	r0, [pc, #132]	; (8638 <le_conn_param_req+0xcc>)
    85b4:	1ad2      	subs	r2, r2, r3
    85b6:	08d2      	lsrs	r2, r2, #3
    85b8:	0192      	lsls	r2, r2, #6
    85ba:	4621      	mov	r1, r4
    85bc:	f042 0201 	orr.w	r2, r2, #1
    85c0:	f015 f9bf 	bl	1d942 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    85c4:	2102      	movs	r1, #2
    85c6:	4620      	mov	r0, r4
    85c8:	f7ff ffa6 	bl	8518 <le_conn_param_neg_reply>
}
    85cc:	b003      	add	sp, #12
    85ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    85d0:	4669      	mov	r1, sp
    85d2:	f001 fe23 	bl	a21c <le_param_req>
    85d6:	b938      	cbnz	r0, 85e8 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    85d8:	211e      	movs	r1, #30
    85da:	4620      	mov	r0, r4
    85dc:	f7ff ff9c 	bl	8518 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    85e0:	4630      	mov	r0, r6
    85e2:	f017 fc87 	bl	1fef4 <bt_conn_unref>
    85e6:	e7f1      	b.n	85cc <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    85e8:	210e      	movs	r1, #14
    85ea:	f242 0020 	movw	r0, #8224	; 0x2020
    85ee:	f7ff fec3 	bl	8378 <bt_hci_cmd_create>
	if (!buf) {
    85f2:	4605      	mov	r5, r0
    85f4:	2800      	cmp	r0, #0
    85f6:	d0f3      	beq.n	85e0 <le_conn_param_req+0x74>
    85f8:	210e      	movs	r1, #14
    85fa:	3008      	adds	r0, #8
    85fc:	f019 f846 	bl	2168c <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    8600:	220e      	movs	r2, #14
    8602:	4604      	mov	r4, r0
    8604:	2100      	movs	r1, #0
    8606:	f016 ff92 	bl	1f52e <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    860a:	f8bd 3000 	ldrh.w	r3, [sp]
    860e:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    8610:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8614:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    8616:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    861a:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    861c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    8620:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    8622:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    8624:	4629      	mov	r1, r5
    8626:	f242 0020 	movw	r0, #8224	; 0x2020
    862a:	f7ff fedf 	bl	83ec <bt_hci_cmd_send>
    862e:	e7d7      	b.n	85e0 <le_conn_param_req+0x74>
    8630:	000225d8 	.word	0x000225d8
    8634:	000226b0 	.word	0x000226b0
    8638:	00024a32 	.word	0x00024a32

0000863c <bt_hci_cmd_send_sync>:
{
    863c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8640:	4607      	mov	r7, r0
    8642:	b086      	sub	sp, #24
    8644:	4615      	mov	r5, r2
	if (!buf) {
    8646:	460c      	mov	r4, r1
    8648:	b921      	cbnz	r1, 8654 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    864a:	f7ff fe95 	bl	8378 <bt_hci_cmd_create>
		if (!buf) {
    864e:	4604      	mov	r4, r0
    8650:	2800      	cmp	r0, #0
    8652:	d057      	beq.n	8704 <bt_hci_cmd_send_sync+0xc8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    8654:	2201      	movs	r2, #1
    8656:	2100      	movs	r1, #0
    8658:	4668      	mov	r0, sp
    865a:	f019 fbe8 	bl	21e2e <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    865e:	4620      	mov	r0, r4
    8660:	f011 fc24 	bl	19eac <net_buf_id>
    8664:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 872c <bt_hci_cmd_send_sync+0xf0>
    8668:	230c      	movs	r3, #12
    866a:	fb03 8000 	mla	r0, r3, r0, r8
    866e:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    8672:	4620      	mov	r0, r4
    8674:	f018 ffe4 	bl	21640 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    8678:	4824      	ldr	r0, [pc, #144]	; (870c <bt_hci_cmd_send_sync+0xd0>)
    867a:	4621      	mov	r1, r4
    867c:	f018 ffd2 	bl	21624 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    8680:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    8684:	2300      	movs	r3, #0
    8686:	4668      	mov	r0, sp
    8688:	f013 fdb0 	bl	1c1ec <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    868c:	4606      	mov	r6, r0
    868e:	b180      	cbz	r0, 86b2 <bt_hci_cmd_send_sync+0x76>
    8690:	4a1f      	ldr	r2, [pc, #124]	; (8710 <bt_hci_cmd_send_sync+0xd4>)
    8692:	4920      	ldr	r1, [pc, #128]	; (8714 <bt_hci_cmd_send_sync+0xd8>)
    8694:	4820      	ldr	r0, [pc, #128]	; (8718 <bt_hci_cmd_send_sync+0xdc>)
    8696:	f240 1337 	movw	r3, #311	; 0x137
    869a:	f014 fccb 	bl	1d034 <printk>
    869e:	481f      	ldr	r0, [pc, #124]	; (871c <bt_hci_cmd_send_sync+0xe0>)
    86a0:	4631      	mov	r1, r6
    86a2:	f014 fcc7 	bl	1d034 <printk>
    86a6:	4040      	eors	r0, r0
    86a8:	f380 8811 	msr	BASEPRI, r0
    86ac:	f04f 0003 	mov.w	r0, #3
    86b0:	df02      	svc	2
	status = cmd(buf)->status;
    86b2:	4620      	mov	r0, r4
    86b4:	f011 fbfa 	bl	19eac <net_buf_id>
    86b8:	230c      	movs	r3, #12
    86ba:	4358      	muls	r0, r3
    86bc:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
    86c0:	b1be      	cbz	r6, 86f2 <bt_hci_cmd_send_sync+0xb6>
    86c2:	4a17      	ldr	r2, [pc, #92]	; (8720 <bt_hci_cmd_send_sync+0xe4>)
    86c4:	4b17      	ldr	r3, [pc, #92]	; (8724 <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    86c6:	4818      	ldr	r0, [pc, #96]	; (8728 <bt_hci_cmd_send_sync+0xec>)
    86c8:	1a9b      	subs	r3, r3, r2
    86ca:	08db      	lsrs	r3, r3, #3
    86cc:	019b      	lsls	r3, r3, #6
    86ce:	f043 0302 	orr.w	r3, r3, #2
    86d2:	4632      	mov	r2, r6
    86d4:	4639      	mov	r1, r7
    86d6:	f015 f94b 	bl	1d970 <log_2>
		net_buf_unref(buf);
    86da:	4620      	mov	r0, r4
    86dc:	f011 fc9c 	bl	1a018 <net_buf_unref>
			return -EIO;
    86e0:	2e09      	cmp	r6, #9
    86e2:	bf0c      	ite	eq
    86e4:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    86e8:	f06f 0004 	mvnne.w	r0, #4
}
    86ec:	b006      	add	sp, #24
    86ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    86f2:	b115      	cbz	r5, 86fa <bt_hci_cmd_send_sync+0xbe>
		*rsp = buf;
    86f4:	602c      	str	r4, [r5, #0]
	return 0;
    86f6:	4630      	mov	r0, r6
    86f8:	e7f8      	b.n	86ec <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
    86fa:	4620      	mov	r0, r4
    86fc:	f011 fc8c 	bl	1a018 <net_buf_unref>
	return 0;
    8700:	4628      	mov	r0, r5
    8702:	e7f3      	b.n	86ec <bt_hci_cmd_send_sync+0xb0>
			return -ENOBUFS;
    8704:	f06f 0036 	mvn.w	r0, #54	; 0x36
    8708:	e7f0      	b.n	86ec <bt_hci_cmd_send_sync+0xb0>
    870a:	bf00      	nop
    870c:	2000010c 	.word	0x2000010c
    8710:	00024b6e 	.word	0x00024b6e
    8714:	00024ba2 	.word	0x00024ba2
    8718:	00024bab 	.word	0x00024bab
    871c:	00024c8a 	.word	0x00024c8a
    8720:	000225d8 	.word	0x000225d8
    8724:	000226b0 	.word	0x000226b0
    8728:	00024caa 	.word	0x00024caa
    872c:	20001920 	.word	0x20001920

00008730 <hci_le_read_max_data_len>:
{
    8730:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8732:	4606      	mov	r6, r0
    8734:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    8736:	aa01      	add	r2, sp, #4
    8738:	2100      	movs	r1, #0
    873a:	f242 002f 	movw	r0, #8239	; 0x202f
    873e:	f7ff ff7d 	bl	863c <bt_hci_cmd_send_sync>
	if (err) {
    8742:	4604      	mov	r4, r0
    8744:	b160      	cbz	r0, 8760 <hci_le_read_max_data_len+0x30>
    8746:	490c      	ldr	r1, [pc, #48]	; (8778 <hci_le_read_max_data_len+0x48>)
    8748:	4b0c      	ldr	r3, [pc, #48]	; (877c <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
    874a:	480d      	ldr	r0, [pc, #52]	; (8780 <hci_le_read_max_data_len+0x50>)
    874c:	1ac9      	subs	r1, r1, r3
    874e:	08c9      	lsrs	r1, r1, #3
    8750:	0189      	lsls	r1, r1, #6
    8752:	f041 0101 	orr.w	r1, r1, #1
    8756:	f015 f8e5 	bl	1d924 <log_0>
}
    875a:	4620      	mov	r0, r4
    875c:	b002      	add	sp, #8
    875e:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    8760:	9801      	ldr	r0, [sp, #4]
    8762:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    8764:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    8768:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    876a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    876e:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    8770:	f011 fc52 	bl	1a018 <net_buf_unref>
	return 0;
    8774:	e7f1      	b.n	875a <hci_le_read_max_data_len+0x2a>
    8776:	bf00      	nop
    8778:	000226b0 	.word	0x000226b0
    877c:	000225d8 	.word	0x000225d8
    8780:	00024cc6 	.word	0x00024cc6

00008784 <conn_auto_initiate>:
{
    8784:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    8786:	7b43      	ldrb	r3, [r0, #13]
    8788:	2b07      	cmp	r3, #7
{
    878a:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    878c:	d16e      	bne.n	886c <conn_auto_initiate+0xe8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    878e:	f3bf 8f5b 	dmb	ish
    8792:	6843      	ldr	r3, [r0, #4]
    8794:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    8798:	049b      	lsls	r3, r3, #18
    879a:	f100 0604 	add.w	r6, r0, #4
    879e:	d41b      	bmi.n	87d8 <conn_auto_initiate+0x54>
    87a0:	78c3      	ldrb	r3, [r0, #3]
    87a2:	b123      	cbz	r3, 87ae <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    87a4:	4b32      	ldr	r3, [pc, #200]	; (8870 <conn_auto_initiate+0xec>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    87a6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    87aa:	071d      	lsls	r5, r3, #28
    87ac:	d514      	bpl.n	87d8 <conn_auto_initiate+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    87ae:	2102      	movs	r1, #2
    87b0:	f242 0016 	movw	r0, #8214	; 0x2016
    87b4:	f7ff fde0 	bl	8378 <bt_hci_cmd_create>
	if (!buf) {
    87b8:	4605      	mov	r5, r0
    87ba:	b168      	cbz	r0, 87d8 <conn_auto_initiate+0x54>
    87bc:	2102      	movs	r1, #2
    87be:	3008      	adds	r0, #8
    87c0:	f018 ff64 	bl	2168c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    87c4:	8823      	ldrh	r3, [r4, #0]
    87c6:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    87c8:	4629      	mov	r1, r5
    87ca:	f242 0016 	movw	r0, #8214	; 0x2016
}
    87ce:	b004      	add	sp, #16
    87d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    87d4:	f7ff be0a 	b.w	83ec <bt_hci_cmd_send>
    87d8:	f3bf 8f5b 	dmb	ish
    87dc:	6863      	ldr	r3, [r4, #4]
    87de:	4d24      	ldr	r5, [pc, #144]	; (8870 <conn_auto_initiate+0xec>)
    87e0:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    87e4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    87e8:	f3c3 3100 	ubfx	r1, r3, #12, #1
    87ec:	d11c      	bne.n	8828 <conn_auto_initiate+0xa4>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    87ee:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
    87f2:	07d8      	lsls	r0, r3, #31
    87f4:	d518      	bpl.n	8828 <conn_auto_initiate+0xa4>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    87f6:	2302      	movs	r3, #2
    87f8:	9100      	str	r1, [sp, #0]
    87fa:	461a      	mov	r2, r3
    87fc:	4620      	mov	r0, r4
    87fe:	f017 f83d 	bl	1f87c <bt_le_set_phy>
		if (!err) {
    8802:	4601      	mov	r1, r0
    8804:	b930      	cbnz	r0, 8814 <conn_auto_initiate+0x90>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8806:	2180      	movs	r1, #128	; 0x80
    8808:	4630      	mov	r0, r6
}
    880a:	b004      	add	sp, #16
    880c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8810:	f016 bfdd 	b.w	1f7ce <atomic_or>
    8814:	4a17      	ldr	r2, [pc, #92]	; (8874 <conn_auto_initiate+0xf0>)
    8816:	4b18      	ldr	r3, [pc, #96]	; (8878 <conn_auto_initiate+0xf4>)
		BT_ERR("Failed to set LE PHY (%d)", err);
    8818:	4818      	ldr	r0, [pc, #96]	; (887c <conn_auto_initiate+0xf8>)
    881a:	1ad2      	subs	r2, r2, r3
    881c:	08d2      	lsrs	r2, r2, #3
    881e:	0192      	lsls	r2, r2, #6
    8820:	f042 0201 	orr.w	r2, r2, #1
    8824:	f015 f88d 	bl	1d942 <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    8828:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    882c:	069a      	lsls	r2, r3, #26
    882e:	d51d      	bpl.n	886c <conn_auto_initiate+0xe8>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    8830:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    8834:	689b      	ldr	r3, [r3, #8]
    8836:	079b      	lsls	r3, r3, #30
    8838:	d518      	bpl.n	886c <conn_auto_initiate+0xe8>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    883a:	f10d 010e 	add.w	r1, sp, #14
    883e:	a803      	add	r0, sp, #12
    8840:	f7ff ff76 	bl	8730 <hci_le_read_max_data_len>
			if (!err) {
    8844:	b990      	cbnz	r0, 886c <conn_auto_initiate+0xe8>
				err = bt_le_set_data_len(conn,
    8846:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    884a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    884e:	4620      	mov	r0, r4
    8850:	f016 fff7 	bl	1f842 <bt_le_set_data_len>
				if (err) {
    8854:	4601      	mov	r1, r0
    8856:	b148      	cbz	r0, 886c <conn_auto_initiate+0xe8>
    8858:	4a06      	ldr	r2, [pc, #24]	; (8874 <conn_auto_initiate+0xf0>)
    885a:	4b07      	ldr	r3, [pc, #28]	; (8878 <conn_auto_initiate+0xf4>)
					BT_ERR("Failed to set data len (%d)", err);
    885c:	4808      	ldr	r0, [pc, #32]	; (8880 <conn_auto_initiate+0xfc>)
    885e:	1ad2      	subs	r2, r2, r3
    8860:	08d2      	lsrs	r2, r2, #3
    8862:	0192      	lsls	r2, r2, #6
    8864:	f042 0201 	orr.w	r2, r2, #1
    8868:	f015 f86b 	bl	1d942 <log_1>
}
    886c:	b004      	add	sp, #16
    886e:	bd70      	pop	{r4, r5, r6, pc}
    8870:	20000000 	.word	0x20000000
    8874:	000226b0 	.word	0x000226b0
    8878:	000225d8 	.word	0x000225d8
    887c:	00024ce6 	.word	0x00024ce6
    8880:	00024d00 	.word	0x00024d00

00008884 <le_phy_update_complete>:
{
    8884:	b513      	push	{r0, r1, r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8886:	6883      	ldr	r3, [r0, #8]
    8888:	f8b3 1001 	ldrh.w	r1, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    888c:	9101      	str	r1, [sp, #4]
    888e:	4608      	mov	r0, r1
    8890:	f001 fe90 	bl	a5b4 <bt_conn_lookup_handle>
	if (!conn) {
    8894:	9901      	ldr	r1, [sp, #4]
    8896:	4604      	mov	r4, r0
    8898:	b960      	cbnz	r0, 88b4 <le_phy_update_complete+0x30>
    889a:	4b14      	ldr	r3, [pc, #80]	; (88ec <le_phy_update_complete+0x68>)
    889c:	4a14      	ldr	r2, [pc, #80]	; (88f0 <le_phy_update_complete+0x6c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    889e:	4815      	ldr	r0, [pc, #84]	; (88f4 <le_phy_update_complete+0x70>)
    88a0:	1ad2      	subs	r2, r2, r3
    88a2:	08d2      	lsrs	r2, r2, #3
    88a4:	0192      	lsls	r2, r2, #6
    88a6:	f042 0201 	orr.w	r2, r2, #1
}
    88aa:	b002      	add	sp, #8
    88ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    88b0:	f015 b847 	b.w	1d942 <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    88b4:	3004      	adds	r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    88b6:	f3bf 8f5b 	dmb	ish
    88ba:	e850 3f00 	ldrex	r3, [r0]
    88be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    88c2:	e840 2100 	strex	r1, r2, [r0]
    88c6:	2900      	cmp	r1, #0
    88c8:	d1f7      	bne.n	88ba <le_phy_update_complete+0x36>
    88ca:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    88ce:	061b      	lsls	r3, r3, #24
    88d0:	d506      	bpl.n	88e0 <le_phy_update_complete+0x5c>
    88d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    88d6:	f016 ff7a 	bl	1f7ce <atomic_or>
		conn_auto_initiate(conn);
    88da:	4620      	mov	r0, r4
    88dc:	f7ff ff52 	bl	8784 <conn_auto_initiate>
	bt_conn_unref(conn);
    88e0:	4620      	mov	r0, r4
}
    88e2:	b002      	add	sp, #8
    88e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    88e8:	f017 bb04 	b.w	1fef4 <bt_conn_unref>
    88ec:	000225d8 	.word	0x000225d8
    88f0:	000226b0 	.word	0x000226b0
    88f4:	00024a32 	.word	0x00024a32

000088f8 <le_remote_feat_complete>:
{
    88f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    88fa:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    88fc:	f8b5 1001 	ldrh.w	r1, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    8900:	9101      	str	r1, [sp, #4]
    8902:	4608      	mov	r0, r1
    8904:	f001 fe56 	bl	a5b4 <bt_conn_lookup_handle>
	if (!conn) {
    8908:	9901      	ldr	r1, [sp, #4]
    890a:	4604      	mov	r4, r0
    890c:	b960      	cbnz	r0, 8928 <le_remote_feat_complete+0x30>
    890e:	4b11      	ldr	r3, [pc, #68]	; (8954 <le_remote_feat_complete+0x5c>)
    8910:	4a11      	ldr	r2, [pc, #68]	; (8958 <le_remote_feat_complete+0x60>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8912:	4812      	ldr	r0, [pc, #72]	; (895c <le_remote_feat_complete+0x64>)
    8914:	1ad2      	subs	r2, r2, r3
    8916:	08d2      	lsrs	r2, r2, #3
    8918:	0192      	lsls	r2, r2, #6
    891a:	f042 0201 	orr.w	r2, r2, #1
}
    891e:	b003      	add	sp, #12
    8920:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8924:	f015 b80d 	b.w	1d942 <log_1>
	if (!evt->status) {
    8928:	782b      	ldrb	r3, [r5, #0]
    892a:	b923      	cbnz	r3, 8936 <le_remote_feat_complete+0x3e>
		memcpy(conn->le.features, evt->features,
    892c:	2208      	movs	r2, #8
    892e:	1ce9      	adds	r1, r5, #3
    8930:	30ac      	adds	r0, #172	; 0xac
    8932:	f016 fdd1 	bl	1f4d8 <memcpy>
    8936:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    893a:	1d20      	adds	r0, r4, #4
    893c:	f016 ff47 	bl	1f7ce <atomic_or>
	conn_auto_initiate(conn);
    8940:	4620      	mov	r0, r4
    8942:	f7ff ff1f 	bl	8784 <conn_auto_initiate>
	bt_conn_unref(conn);
    8946:	4620      	mov	r0, r4
}
    8948:	b003      	add	sp, #12
    894a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
    894e:	f017 bad1 	b.w	1fef4 <bt_conn_unref>
    8952:	bf00      	nop
    8954:	000225d8 	.word	0x000225d8
    8958:	000226b0 	.word	0x000226b0
    895c:	00024a32 	.word	0x00024a32

00008960 <enh_conn_complete>:
{
    8960:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8964:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8966:	f8b0 8001 	ldrh.w	r8, [r0, #1]
	bt_id_pending_keys_update();
    896a:	f000 fc2d 	bl	91c8 <bt_id_pending_keys_update>
	if (evt->status) {
    896e:	7825      	ldrb	r5, [r4, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8970:	fa1f f788 	uxth.w	r7, r8
	if (evt->status) {
    8974:	2d00      	cmp	r5, #0
    8976:	d03a      	beq.n	89ee <enh_conn_complete+0x8e>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8978:	2d3c      	cmp	r5, #60	; 0x3c
    897a:	d12a      	bne.n	89d2 <enh_conn_complete+0x72>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    897c:	f001 f88c 	bl	9a98 <bt_le_adv_lookup_legacy>
    8980:	f3bf 8f5b 	dmb	ish
    8984:	3010      	adds	r0, #16
    8986:	e850 3f00 	ldrex	r3, [r0]
    898a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    898e:	e840 3200 	strex	r2, r3, [r0]
    8992:	2a00      	cmp	r2, #0
    8994:	d1f7      	bne.n	8986 <enh_conn_complete+0x26>
    8996:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    899a:	2000      	movs	r0, #0
    899c:	f7ff fab0 	bl	7f00 <find_pending_connect.part.0>
		if (!conn) {
    89a0:	4604      	mov	r4, r0
    89a2:	b960      	cbnz	r0, 89be <enh_conn_complete+0x5e>
    89a4:	4b63      	ldr	r3, [pc, #396]	; (8b34 <enh_conn_complete+0x1d4>)
    89a6:	4964      	ldr	r1, [pc, #400]	; (8b38 <enh_conn_complete+0x1d8>)
			BT_ERR("No pending slave connection");
    89a8:	4864      	ldr	r0, [pc, #400]	; (8b3c <enh_conn_complete+0x1dc>)
    89aa:	1ac9      	subs	r1, r1, r3
    89ac:	08c9      	lsrs	r1, r1, #3
    89ae:	0189      	lsls	r1, r1, #6
    89b0:	f041 0101 	orr.w	r1, r1, #1
}
    89b4:	b004      	add	sp, #16
    89b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_ERR("No pending slave connection");
    89ba:	f014 bfb3 	b.w	1d924 <log_0>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    89be:	7305      	strb	r5, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    89c0:	2100      	movs	r1, #0
    89c2:	f001 fdff 	bl	a5c4 <bt_conn_set_state>
		bt_conn_unref(conn);
    89c6:	4620      	mov	r0, r4
}
    89c8:	b004      	add	sp, #16
    89ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    89ce:	f017 ba91 	b.w	1fef4 <bt_conn_unref>
    89d2:	4b58      	ldr	r3, [pc, #352]	; (8b34 <enh_conn_complete+0x1d4>)
    89d4:	4a58      	ldr	r2, [pc, #352]	; (8b38 <enh_conn_complete+0x1d8>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
    89d6:	485a      	ldr	r0, [pc, #360]	; (8b40 <enh_conn_complete+0x1e0>)
    89d8:	1ad2      	subs	r2, r2, r3
    89da:	08d2      	lsrs	r2, r2, #3
    89dc:	0192      	lsls	r2, r2, #6
    89de:	f042 0202 	orr.w	r2, r2, #2
    89e2:	4629      	mov	r1, r5
}
    89e4:	b004      	add	sp, #16
    89e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
    89ea:	f014 bfaa 	b.w	1d942 <log_1>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    89ee:	7923      	ldrb	r3, [r4, #4]
    89f0:	3b02      	subs	r3, #2
    89f2:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    89f4:	f104 0604 	add.w	r6, r4, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    89f8:	d845      	bhi.n	8a86 <enh_conn_complete+0x126>
	memcpy(dst, src, sizeof(*dst));
    89fa:	2207      	movs	r2, #7
    89fc:	4631      	mov	r1, r6
    89fe:	a802      	add	r0, sp, #8
    8a00:	f016 fd6a 	bl	1f4d8 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    8a04:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
    8a08:	2206      	movs	r2, #6
    8a0a:	3b02      	subs	r3, #2
    8a0c:	f104 0111 	add.w	r1, r4, #17
    8a10:	f10d 0001 	add.w	r0, sp, #1
    8a14:	f88d 3008 	strb.w	r3, [sp, #8]
    8a18:	f016 fd5e 	bl	1f4d8 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    8a1c:	2301      	movs	r3, #1
    8a1e:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    8a22:	78e3      	ldrb	r3, [r4, #3]
    8a24:	2b01      	cmp	r3, #1
    8a26:	d116      	bne.n	8a56 <enh_conn_complete+0xf6>
    8a28:	a802      	add	r0, sp, #8
    8a2a:	f7ff fa69 	bl	7f00 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8a2e:	78e3      	ldrb	r3, [r4, #3]
    8a30:	2b01      	cmp	r3, #1
    8a32:	4605      	mov	r5, r0
    8a34:	d10e      	bne.n	8a54 <enh_conn_complete+0xf4>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    8a36:	f001 f82f 	bl	9a98 <bt_le_adv_lookup_legacy>
    8a3a:	f3bf 8f5b 	dmb	ish
    8a3e:	3010      	adds	r0, #16
    8a40:	e850 3f00 	ldrex	r3, [r0]
    8a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    8a48:	e840 3200 	strex	r2, r3, [r0]
    8a4c:	2a00      	cmp	r2, #0
    8a4e:	d1f7      	bne.n	8a40 <enh_conn_complete+0xe0>
    8a50:	f3bf 8f5b 	dmb	ish
	if (!conn) {
    8a54:	bb65      	cbnz	r5, 8ab0 <enh_conn_complete+0x150>
    8a56:	4a37      	ldr	r2, [pc, #220]	; (8b34 <enh_conn_complete+0x1d4>)
    8a58:	4c37      	ldr	r4, [pc, #220]	; (8b38 <enh_conn_complete+0x1d8>)
		BT_ERR("No pending conn for peer %s",
    8a5a:	4630      	mov	r0, r6
    8a5c:	1aa4      	subs	r4, r4, r2
    8a5e:	f7fe fe21 	bl	76a4 <bt_addr_le_str_real>
    8a62:	f7fc fe4f 	bl	5704 <log_strdup>
    8a66:	08e4      	lsrs	r4, r4, #3
    8a68:	01a4      	lsls	r4, r4, #6
    8a6a:	f044 0401 	orr.w	r4, r4, #1
    8a6e:	4601      	mov	r1, r0
    8a70:	4622      	mov	r2, r4
    8a72:	4834      	ldr	r0, [pc, #208]	; (8b44 <enh_conn_complete+0x1e4>)
    8a74:	f014 ff65 	bl	1d942 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    8a78:	211f      	movs	r1, #31
    8a7a:	4638      	mov	r0, r7
    8a7c:	f016 fec6 	bl	1f80c <bt_hci_disconnect>
}
    8a80:	b004      	add	sp, #16
    8a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    8a86:	78e3      	ldrb	r3, [r4, #3]
    8a88:	2b01      	cmp	r3, #1
    8a8a:	bf04      	itt	eq
    8a8c:	4b2e      	ldreq	r3, [pc, #184]	; (8b48 <enh_conn_complete+0x1e8>)
    8a8e:	f893 5033 	ldrbeq.w	r5, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
    8a92:	4631      	mov	r1, r6
    8a94:	4628      	mov	r0, r5
    8a96:	f017 f83a 	bl	1fb0e <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    8a9a:	2207      	movs	r2, #7
    8a9c:	4601      	mov	r1, r0
    8a9e:	a802      	add	r0, sp, #8
    8aa0:	f016 fd1a 	bl	1f4d8 <memcpy>
    8aa4:	2207      	movs	r2, #7
    8aa6:	4631      	mov	r1, r6
    8aa8:	4668      	mov	r0, sp
    8aaa:	f016 fd15 	bl	1f4d8 <memcpy>
}
    8aae:	e7b8      	b.n	8a22 <enh_conn_complete+0xc2>
	conn->handle = handle;
    8ab0:	4628      	mov	r0, r5
	memcpy(dst, src, sizeof(*dst));
    8ab2:	2207      	movs	r2, #7
    8ab4:	f820 8b88 	strh.w	r8, [r0], #136
    8ab8:	a902      	add	r1, sp, #8
    8aba:	f016 fd0d 	bl	1f4d8 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    8abe:	7e22      	ldrb	r2, [r4, #24]
    8ac0:	7de3      	ldrb	r3, [r4, #23]
    8ac2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8ac6:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    8aca:	7ea2      	ldrb	r2, [r4, #26]
    8acc:	7e63      	ldrb	r3, [r4, #25]
    8ace:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8ad2:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    8ad6:	7f22      	ldrb	r2, [r4, #28]
    8ad8:	7ee3      	ldrb	r3, [r4, #27]
    8ada:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8ade:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
    8ae2:	78e3      	ldrb	r3, [r4, #3]
    8ae4:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
    8ae6:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8ae8:	2b01      	cmp	r3, #1
	conn->err = 0U;
    8aea:	732a      	strb	r2, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8aec:	d117      	bne.n	8b1e <enh_conn_complete+0x1be>
    8aee:	2207      	movs	r2, #7
    8af0:	4669      	mov	r1, sp
    8af2:	f105 008f 	add.w	r0, r5, #143	; 0x8f
    8af6:	f016 fcef 	bl	1f4d8 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    8afa:	f000 ffcd 	bl	9a98 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    8afe:	7a29      	ldrb	r1, [r5, #8]
    8b00:	4c11      	ldr	r4, [pc, #68]	; (8b48 <enh_conn_complete+0x1e8>)
    8b02:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    8b06:	2207      	movs	r2, #7
    8b08:	4421      	add	r1, r4
    8b0a:	f105 0096 	add.w	r0, r5, #150	; 0x96
    8b0e:	f016 fce3 	bl	1f4d8 <memcpy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    8b12:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    8b16:	065b      	lsls	r3, r3, #25
    8b18:	d501      	bpl.n	8b1e <enh_conn_complete+0x1be>
			bt_le_adv_resume();
    8b1a:	f001 f8f5 	bl	9d08 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    8b1e:	2107      	movs	r1, #7
    8b20:	4628      	mov	r0, r5
    8b22:	f001 fd4f 	bl	a5c4 <bt_conn_set_state>
	conn_auto_initiate(conn);
    8b26:	4628      	mov	r0, r5
    8b28:	f7ff fe2c 	bl	8784 <conn_auto_initiate>
	bt_conn_unref(conn);
    8b2c:	4628      	mov	r0, r5
    8b2e:	f017 f9e1 	bl	1fef4 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    8b32:	e7a5      	b.n	8a80 <enh_conn_complete+0x120>
    8b34:	000225d8 	.word	0x000225d8
    8b38:	000226b0 	.word	0x000226b0
    8b3c:	00024d1c 	.word	0x00024d1c
    8b40:	00024d38 	.word	0x00024d38
    8b44:	00024d51 	.word	0x00024d51
    8b48:	20000000 	.word	0x20000000

00008b4c <bt_security_err_get>:
	switch (hci_err) {
    8b4c:	2829      	cmp	r0, #41	; 0x29
    8b4e:	bf9a      	itte	ls
    8b50:	4b01      	ldrls	r3, [pc, #4]	; (8b58 <bt_security_err_get+0xc>)
    8b52:	5c18      	ldrbls	r0, [r3, r0]
{
    8b54:	2008      	movhi	r0, #8
}
    8b56:	4770      	bx	lr
    8b58:	00025038 	.word	0x00025038

00008b5c <hci_encrypt_key_refresh_complete>:
{
    8b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    8b5e:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    8b60:	f8b3 1001 	ldrh.w	r1, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    8b64:	9101      	str	r1, [sp, #4]
    8b66:	4608      	mov	r0, r1
	uint8_t status = evt->status;
    8b68:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    8b6a:	f001 fd23 	bl	a5b4 <bt_conn_lookup_handle>
	if (!conn) {
    8b6e:	9901      	ldr	r1, [sp, #4]
    8b70:	4604      	mov	r4, r0
    8b72:	b960      	cbnz	r0, 8b8e <hci_encrypt_key_refresh_complete+0x32>
    8b74:	4b1f      	ldr	r3, [pc, #124]	; (8bf4 <hci_encrypt_key_refresh_complete+0x98>)
    8b76:	4a20      	ldr	r2, [pc, #128]	; (8bf8 <hci_encrypt_key_refresh_complete+0x9c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    8b78:	4820      	ldr	r0, [pc, #128]	; (8bfc <hci_encrypt_key_refresh_complete+0xa0>)
    8b7a:	1ad2      	subs	r2, r2, r3
    8b7c:	08d2      	lsrs	r2, r2, #3
    8b7e:	0192      	lsls	r2, r2, #6
    8b80:	f042 0201 	orr.w	r2, r2, #1
}
    8b84:	b003      	add	sp, #12
    8b86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    8b8a:	f014 beda 	b.w	1d942 <log_1>
	if (status) {
    8b8e:	b16d      	cbz	r5, 8bac <hci_encrypt_key_refresh_complete+0x50>
		bt_conn_security_changed(conn, status,
    8b90:	4628      	mov	r0, r5
    8b92:	f7ff ffdb 	bl	8b4c <bt_security_err_get>
    8b96:	4629      	mov	r1, r5
    8b98:	4602      	mov	r2, r0
    8b9a:	4620      	mov	r0, r4
    8b9c:	f001 fb78 	bl	a290 <bt_conn_security_changed>
	bt_conn_unref(conn);
    8ba0:	4620      	mov	r0, r4
}
    8ba2:	b003      	add	sp, #12
    8ba4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
    8ba8:	f017 b9a4 	b.w	1fef4 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    8bac:	7883      	ldrb	r3, [r0, #2]
    8bae:	2b01      	cmp	r3, #1
    8bb0:	d107      	bne.n	8bc2 <hci_encrypt_key_refresh_complete+0x66>
		bt_smp_update_keys(conn);
    8bb2:	f005 fa8d 	bl	e0d0 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    8bb6:	4620      	mov	r0, r4
    8bb8:	f016 fdf1 	bl	1f79e <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    8bbc:	2800      	cmp	r0, #0
    8bbe:	bf08      	it	eq
    8bc0:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    8bc2:	4628      	mov	r0, r5
    8bc4:	f7ff ffc2 	bl	8b4c <bt_security_err_get>
    8bc8:	4629      	mov	r1, r5
    8bca:	4602      	mov	r2, r0
    8bcc:	4620      	mov	r0, r4
    8bce:	f001 fb5f 	bl	a290 <bt_conn_security_changed>
	if (status) {
    8bd2:	2d00      	cmp	r5, #0
    8bd4:	d0e4      	beq.n	8ba0 <hci_encrypt_key_refresh_complete+0x44>
    8bd6:	4b07      	ldr	r3, [pc, #28]	; (8bf4 <hci_encrypt_key_refresh_complete+0x98>)
    8bd8:	4907      	ldr	r1, [pc, #28]	; (8bf8 <hci_encrypt_key_refresh_complete+0x9c>)
		BT_ERR("Failed to set required security level");
    8bda:	4809      	ldr	r0, [pc, #36]	; (8c00 <hci_encrypt_key_refresh_complete+0xa4>)
    8bdc:	1ac9      	subs	r1, r1, r3
    8bde:	08c9      	lsrs	r1, r1, #3
    8be0:	0189      	lsls	r1, r1, #6
    8be2:	f041 0101 	orr.w	r1, r1, #1
    8be6:	f014 fe9d 	bl	1d924 <log_0>
		bt_conn_disconnect(conn, status);
    8bea:	4629      	mov	r1, r5
    8bec:	4620      	mov	r0, r4
    8bee:	f017 f9ba 	bl	1ff66 <bt_conn_disconnect>
    8bf2:	e7d5      	b.n	8ba0 <hci_encrypt_key_refresh_complete+0x44>
    8bf4:	000225d8 	.word	0x000225d8
    8bf8:	000226b0 	.word	0x000226b0
    8bfc:	00024a56 	.word	0x00024a56
    8c00:	00024d6d 	.word	0x00024d6d

00008c04 <hci_encrypt_change>:
{
    8c04:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    8c06:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8c08:	f8b6 1001 	ldrh.w	r1, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    8c0c:	9101      	str	r1, [sp, #4]
    8c0e:	4608      	mov	r0, r1
	uint8_t status = evt->status;
    8c10:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
    8c12:	f001 fccf 	bl	a5b4 <bt_conn_lookup_handle>
	if (!conn) {
    8c16:	9901      	ldr	r1, [sp, #4]
    8c18:	4604      	mov	r4, r0
    8c1a:	b960      	cbnz	r0, 8c36 <hci_encrypt_change+0x32>
    8c1c:	4b21      	ldr	r3, [pc, #132]	; (8ca4 <hci_encrypt_change+0xa0>)
    8c1e:	4a22      	ldr	r2, [pc, #136]	; (8ca8 <hci_encrypt_change+0xa4>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    8c20:	4822      	ldr	r0, [pc, #136]	; (8cac <hci_encrypt_change+0xa8>)
    8c22:	1ad2      	subs	r2, r2, r3
    8c24:	08d2      	lsrs	r2, r2, #3
    8c26:	0192      	lsls	r2, r2, #6
    8c28:	f042 0201 	orr.w	r2, r2, #1
}
    8c2c:	b002      	add	sp, #8
    8c2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    8c32:	f014 be86 	b.w	1d942 <log_1>
	if (status) {
    8c36:	b16d      	cbz	r5, 8c54 <hci_encrypt_change+0x50>
		bt_conn_security_changed(conn, status,
    8c38:	4628      	mov	r0, r5
    8c3a:	f7ff ff87 	bl	8b4c <bt_security_err_get>
    8c3e:	4629      	mov	r1, r5
    8c40:	4602      	mov	r2, r0
    8c42:	4620      	mov	r0, r4
    8c44:	f001 fb24 	bl	a290 <bt_conn_security_changed>
	bt_conn_unref(conn);
    8c48:	4620      	mov	r0, r4
}
    8c4a:	b002      	add	sp, #8
    8c4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    8c50:	f017 b950 	b.w	1fef4 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    8c54:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    8c56:	78f3      	ldrb	r3, [r6, #3]
    8c58:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    8c5a:	2a01      	cmp	r2, #1
    8c5c:	d108      	bne.n	8c70 <hci_encrypt_change+0x6c>
		if (conn->encrypt) {
    8c5e:	b10b      	cbz	r3, 8c64 <hci_encrypt_change+0x60>
			bt_smp_update_keys(conn);
    8c60:	f005 fa36 	bl	e0d0 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    8c64:	4620      	mov	r0, r4
    8c66:	f016 fd9a 	bl	1f79e <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    8c6a:	2800      	cmp	r0, #0
    8c6c:	bf08      	it	eq
    8c6e:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    8c70:	4628      	mov	r0, r5
    8c72:	f7ff ff6b 	bl	8b4c <bt_security_err_get>
    8c76:	4629      	mov	r1, r5
    8c78:	4602      	mov	r2, r0
    8c7a:	4620      	mov	r0, r4
    8c7c:	f001 fb08 	bl	a290 <bt_conn_security_changed>
	if (status) {
    8c80:	2d00      	cmp	r5, #0
    8c82:	d0e1      	beq.n	8c48 <hci_encrypt_change+0x44>
    8c84:	4b07      	ldr	r3, [pc, #28]	; (8ca4 <hci_encrypt_change+0xa0>)
    8c86:	4908      	ldr	r1, [pc, #32]	; (8ca8 <hci_encrypt_change+0xa4>)
		BT_ERR("Failed to set required security level");
    8c88:	4809      	ldr	r0, [pc, #36]	; (8cb0 <hci_encrypt_change+0xac>)
    8c8a:	1ac9      	subs	r1, r1, r3
    8c8c:	08c9      	lsrs	r1, r1, #3
    8c8e:	0189      	lsls	r1, r1, #6
    8c90:	f041 0101 	orr.w	r1, r1, #1
    8c94:	f014 fe46 	bl	1d924 <log_0>
		bt_conn_disconnect(conn, status);
    8c98:	4629      	mov	r1, r5
    8c9a:	4620      	mov	r0, r4
    8c9c:	f017 f963 	bl	1ff66 <bt_conn_disconnect>
    8ca0:	e7d2      	b.n	8c48 <hci_encrypt_change+0x44>
    8ca2:	bf00      	nop
    8ca4:	000225d8 	.word	0x000225d8
    8ca8:	000226b0 	.word	0x000226b0
    8cac:	00024a56 	.word	0x00024a56
    8cb0:	00024d6d 	.word	0x00024d6d

00008cb4 <hci_event_prio>:
{
    8cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8cb8:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    8cba:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    8cbe:	4630      	mov	r0, r6
    8cc0:	f018 fd1b 	bl	216fa <net_buf_simple_headroom>
	state->len = buf->len;
    8cc4:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    8cc8:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    8ccc:	4605      	mov	r5, r0
    8cce:	d80c      	bhi.n	8cea <hci_event_prio+0x36>
    8cd0:	4a1c      	ldr	r2, [pc, #112]	; (8d44 <hci_event_prio+0x90>)
    8cd2:	491d      	ldr	r1, [pc, #116]	; (8d48 <hci_event_prio+0x94>)
    8cd4:	481d      	ldr	r0, [pc, #116]	; (8d4c <hci_event_prio+0x98>)
    8cd6:	f640 438f 	movw	r3, #3215	; 0xc8f
    8cda:	f014 f9ab 	bl	1d034 <printk>
    8cde:	4040      	eors	r0, r0
    8ce0:	f380 8811 	msr	BASEPRI, r0
    8ce4:	f04f 0003 	mov.w	r0, #3
    8ce8:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    8cea:	4630      	mov	r0, r6
    8cec:	2102      	movs	r1, #2
    8cee:	f018 fcf4 	bl	216da <net_buf_simple_pull_mem>
    8cf2:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    8cf4:	7800      	ldrb	r0, [r0, #0]
    8cf6:	f016 fd40 	bl	1f77a <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    8cfa:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    8cfc:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    8cfe:	d40c      	bmi.n	8d1a <hci_event_prio+0x66>
    8d00:	4a10      	ldr	r2, [pc, #64]	; (8d44 <hci_event_prio+0x90>)
    8d02:	4913      	ldr	r1, [pc, #76]	; (8d50 <hci_event_prio+0x9c>)
    8d04:	4811      	ldr	r0, [pc, #68]	; (8d4c <hci_event_prio+0x98>)
    8d06:	f640 4393 	movw	r3, #3219	; 0xc93
    8d0a:	f014 f993 	bl	1d034 <printk>
    8d0e:	4040      	eors	r0, r0
    8d10:	f380 8811 	msr	BASEPRI, r0
    8d14:	f04f 0003 	mov.w	r0, #3
    8d18:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    8d1a:	2305      	movs	r3, #5
    8d1c:	4a0d      	ldr	r2, [pc, #52]	; (8d54 <hci_event_prio+0xa0>)
    8d1e:	7838      	ldrb	r0, [r7, #0]
    8d20:	4621      	mov	r1, r4
    8d22:	f7ff f899 	bl	7e58 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    8d26:	07b3      	lsls	r3, r6, #30
    8d28:	d507      	bpl.n	8d3a <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    8d2a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    8d2c:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    8d30:	fa10 f585 	uxtah	r5, r0, r5
    8d34:	60a5      	str	r5, [r4, #8]
}
    8d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    8d3a:	4620      	mov	r0, r4
}
    8d3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    8d40:	f011 b96a 	b.w	1a018 <net_buf_unref>
    8d44:	00024b6e 	.word	0x00024b6e
    8d48:	00024d93 	.word	0x00024d93
    8d4c:	00024bab 	.word	0x00024bab
    8d50:	00024dac 	.word	0x00024dac
    8d54:	00022d98 	.word	0x00022d98

00008d58 <bt_recv>:
{
    8d58:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    8d5a:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    8d5c:	2901      	cmp	r1, #1
{
    8d5e:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    8d60:	d04b      	beq.n	8dfa <bt_recv+0xa2>
    8d62:	2903      	cmp	r1, #3
    8d64:	d178      	bne.n	8e58 <bt_recv+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    8d66:	8983      	ldrh	r3, [r0, #12]
    8d68:	2b03      	cmp	r3, #3
    8d6a:	d80c      	bhi.n	8d86 <bt_recv+0x2e>
    8d6c:	4a42      	ldr	r2, [pc, #264]	; (8e78 <bt_recv+0x120>)
    8d6e:	4943      	ldr	r1, [pc, #268]	; (8e7c <bt_recv+0x124>)
    8d70:	4843      	ldr	r0, [pc, #268]	; (8e80 <bt_recv+0x128>)
    8d72:	f240 137d 	movw	r3, #381	; 0x17d
    8d76:	f014 f95d 	bl	1d034 <printk>
    8d7a:	4040      	eors	r0, r0
    8d7c:	f380 8811 	msr	BASEPRI, r0
    8d80:	f04f 0003 	mov.w	r0, #3
    8d84:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    8d86:	2104      	movs	r1, #4
    8d88:	f104 0008 	add.w	r0, r4, #8
    8d8c:	f018 fca5 	bl	216da <net_buf_simple_pull_mem>
	if (buf->len != len) {
    8d90:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    8d92:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    8d94:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    8d96:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    8d98:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    8d9c:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    8d9e:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    8da0:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    8da2:	d00d      	beq.n	8dc0 <bt_recv+0x68>
    8da4:	4837      	ldr	r0, [pc, #220]	; (8e84 <bt_recv+0x12c>)
    8da6:	4b38      	ldr	r3, [pc, #224]	; (8e88 <bt_recv+0x130>)
    8da8:	1a1b      	subs	r3, r3, r0
    8daa:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    8dac:	019b      	lsls	r3, r3, #6
    8dae:	4837      	ldr	r0, [pc, #220]	; (8e8c <bt_recv+0x134>)
    8db0:	f043 0301 	orr.w	r3, r3, #1
    8db4:	f014 fddc 	bl	1d970 <log_2>
	net_buf_unref(buf);
    8db8:	4620      	mov	r0, r4
    8dba:	f011 f92d 	bl	1a018 <net_buf_unref>
    8dbe:	e01a      	b.n	8df6 <bt_recv+0x9e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    8dc0:	f001 fbf8 	bl	a5b4 <bt_conn_lookup_handle>
	if (!conn) {
    8dc4:	4605      	mov	r5, r0
    8dc6:	b958      	cbnz	r0, 8de0 <bt_recv+0x88>
    8dc8:	4b2e      	ldr	r3, [pc, #184]	; (8e84 <bt_recv+0x12c>)
    8dca:	4a2f      	ldr	r2, [pc, #188]	; (8e88 <bt_recv+0x130>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    8dcc:	8ae1      	ldrh	r1, [r4, #22]
    8dce:	4830      	ldr	r0, [pc, #192]	; (8e90 <bt_recv+0x138>)
    8dd0:	1ad2      	subs	r2, r2, r3
    8dd2:	08d2      	lsrs	r2, r2, #3
    8dd4:	0192      	lsls	r2, r2, #6
    8dd6:	f042 0201 	orr.w	r2, r2, #1
    8dda:	f014 fdb2 	bl	1d942 <log_1>
		net_buf_unref(buf);
    8dde:	e7eb      	b.n	8db8 <bt_recv+0x60>
	acl(buf)->index = bt_conn_index(conn);
    8de0:	f001 fe90 	bl	ab04 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    8de4:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    8de6:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    8de8:	4621      	mov	r1, r4
    8dea:	4628      	mov	r0, r5
    8dec:	f001 fa90 	bl	a310 <bt_conn_recv>
	bt_conn_unref(conn);
    8df0:	4628      	mov	r0, r5
    8df2:	f017 f87f 	bl	1fef4 <bt_conn_unref>
		return 0;
    8df6:	2000      	movs	r0, #0
}
    8df8:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    8dfa:	8983      	ldrh	r3, [r0, #12]
    8dfc:	2b01      	cmp	r3, #1
    8dfe:	d80c      	bhi.n	8e1a <bt_recv+0xc2>
    8e00:	4a1d      	ldr	r2, [pc, #116]	; (8e78 <bt_recv+0x120>)
    8e02:	491e      	ldr	r1, [pc, #120]	; (8e7c <bt_recv+0x124>)
    8e04:	481e      	ldr	r0, [pc, #120]	; (8e80 <bt_recv+0x128>)
    8e06:	f640 03b2 	movw	r3, #2226	; 0x8b2
    8e0a:	f014 f913 	bl	1d034 <printk>
    8e0e:	4040      	eors	r0, r0
    8e10:	f380 8811 	msr	BASEPRI, r0
    8e14:	f04f 0003 	mov.w	r0, #3
    8e18:	df02      	svc	2
    8e1a:	2102      	movs	r1, #2
    8e1c:	f104 0008 	add.w	r0, r4, #8
    8e20:	f018 fc5b 	bl	216da <net_buf_simple_pull_mem>
    8e24:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    8e26:	7800      	ldrb	r0, [r0, #0]
    8e28:	f016 fca7 	bl	1f77a <bt_hci_evt_get_flags>
    8e2c:	0783      	lsls	r3, r0, #30
    8e2e:	d40c      	bmi.n	8e4a <bt_recv+0xf2>
    8e30:	4a11      	ldr	r2, [pc, #68]	; (8e78 <bt_recv+0x120>)
    8e32:	4918      	ldr	r1, [pc, #96]	; (8e94 <bt_recv+0x13c>)
    8e34:	4812      	ldr	r0, [pc, #72]	; (8e80 <bt_recv+0x128>)
    8e36:	f640 03b6 	movw	r3, #2230	; 0x8b6
    8e3a:	f014 f8fb 	bl	1d034 <printk>
    8e3e:	4040      	eors	r0, r0
    8e40:	f380 8811 	msr	BASEPRI, r0
    8e44:	f04f 0003 	mov.w	r0, #3
    8e48:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    8e4a:	4a13      	ldr	r2, [pc, #76]	; (8e98 <bt_recv+0x140>)
    8e4c:	7828      	ldrb	r0, [r5, #0]
    8e4e:	2306      	movs	r3, #6
    8e50:	4621      	mov	r1, r4
    8e52:	f7ff f801 	bl	7e58 <handle_event>
    8e56:	e7af      	b.n	8db8 <bt_recv+0x60>
    8e58:	4b0a      	ldr	r3, [pc, #40]	; (8e84 <bt_recv+0x12c>)
    8e5a:	4a0b      	ldr	r2, [pc, #44]	; (8e88 <bt_recv+0x130>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    8e5c:	480f      	ldr	r0, [pc, #60]	; (8e9c <bt_recv+0x144>)
    8e5e:	1ad2      	subs	r2, r2, r3
    8e60:	08d2      	lsrs	r2, r2, #3
    8e62:	0192      	lsls	r2, r2, #6
    8e64:	f042 0201 	orr.w	r2, r2, #1
    8e68:	f014 fd6b 	bl	1d942 <log_1>
		net_buf_unref(buf);
    8e6c:	4620      	mov	r0, r4
    8e6e:	f011 f8d3 	bl	1a018 <net_buf_unref>
		return -EINVAL;
    8e72:	f06f 0015 	mvn.w	r0, #21
    8e76:	e7bf      	b.n	8df8 <bt_recv+0xa0>
    8e78:	00024b6e 	.word	0x00024b6e
    8e7c:	00024d93 	.word	0x00024d93
    8e80:	00024bab 	.word	0x00024bab
    8e84:	000225d8 	.word	0x000225d8
    8e88:	000226b0 	.word	0x000226b0
    8e8c:	00024dc5 	.word	0x00024dc5
    8e90:	00024de9 	.word	0x00024de9
    8e94:	00024e0b 	.word	0x00024e0b
    8e98:	00022d58 	.word	0x00022d58
    8e9c:	00024e39 	.word	0x00024e39

00008ea0 <bt_recv_prio>:
{
    8ea0:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    8ea2:	7d03      	ldrb	r3, [r0, #20]
    8ea4:	2b01      	cmp	r3, #1
{
    8ea6:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    8ea8:	d00c      	beq.n	8ec4 <bt_recv_prio+0x24>
    8eaa:	4a09      	ldr	r2, [pc, #36]	; (8ed0 <bt_recv_prio+0x30>)
    8eac:	4909      	ldr	r1, [pc, #36]	; (8ed4 <bt_recv_prio+0x34>)
    8eae:	480a      	ldr	r0, [pc, #40]	; (8ed8 <bt_recv_prio+0x38>)
    8eb0:	f640 43d6 	movw	r3, #3286	; 0xcd6
    8eb4:	f014 f8be 	bl	1d034 <printk>
    8eb8:	4040      	eors	r0, r0
    8eba:	f380 8811 	msr	BASEPRI, r0
    8ebe:	f04f 0003 	mov.w	r0, #3
    8ec2:	df02      	svc	2
	hci_event_prio(buf);
    8ec4:	4620      	mov	r0, r4
    8ec6:	f7ff fef5 	bl	8cb4 <hci_event_prio>
}
    8eca:	2000      	movs	r0, #0
    8ecc:	bd10      	pop	{r4, pc}
    8ece:	bf00      	nop
    8ed0:	00024b6e 	.word	0x00024b6e
    8ed4:	00024e4d 	.word	0x00024e4d
    8ed8:	00024bab 	.word	0x00024bab

00008edc <bt_hci_driver_register>:
	if (bt_dev.drv) {
    8edc:	4a08      	ldr	r2, [pc, #32]	; (8f00 <bt_hci_driver_register+0x24>)
    8ede:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
    8ee2:	b93b      	cbnz	r3, 8ef4 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    8ee4:	68c1      	ldr	r1, [r0, #12]
    8ee6:	b141      	cbz	r1, 8efa <bt_hci_driver_register+0x1e>
    8ee8:	6901      	ldr	r1, [r0, #16]
    8eea:	b131      	cbz	r1, 8efa <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    8eec:	f8c2 0124 	str.w	r0, [r2, #292]	; 0x124
	return 0;
    8ef0:	4618      	mov	r0, r3
    8ef2:	4770      	bx	lr
		return -EALREADY;
    8ef4:	f06f 0044 	mvn.w	r0, #68	; 0x44
    8ef8:	4770      	bx	lr
		return -EINVAL;
    8efa:	f06f 0015 	mvn.w	r0, #21
}
    8efe:	4770      	bx	lr
    8f00:	20000000 	.word	0x20000000

00008f04 <bt_finalize_init>:
{
    8f04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8f08:	4d2c      	ldr	r5, [pc, #176]	; (8fbc <bt_finalize_init+0xb8>)
    8f0a:	4c2d      	ldr	r4, [pc, #180]	; (8fc0 <bt_finalize_init+0xbc>)
		BT_INFO("Identity[%d]: %s",
    8f0c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8fdc <bt_finalize_init+0xd8>
{
    8f10:	b089      	sub	sp, #36	; 0x24
    8f12:	2102      	movs	r1, #2
    8f14:	f105 0098 	add.w	r0, r5, #152	; 0x98
    8f18:	f016 fc59 	bl	1f7ce <atomic_or>
    8f1c:	4b29      	ldr	r3, [pc, #164]	; (8fc4 <bt_finalize_init+0xc0>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    8f1e:	79ea      	ldrb	r2, [r5, #7]
    8f20:	4929      	ldr	r1, [pc, #164]	; (8fc8 <bt_finalize_init+0xc4>)
    8f22:	1ae4      	subs	r4, r4, r3
    8f24:	4b29      	ldr	r3, [pc, #164]	; (8fcc <bt_finalize_init+0xc8>)
    8f26:	4628      	mov	r0, r5
    8f28:	2a01      	cmp	r2, #1
    8f2a:	bf88      	it	hi
    8f2c:	4619      	movhi	r1, r3
    8f2e:	9103      	str	r1, [sp, #12]
    8f30:	f7fe fbb8 	bl	76a4 <bt_addr_le_str_real>
    8f34:	f7fc fbe6 	bl	5704 <log_strdup>
    8f38:	08e4      	lsrs	r4, r4, #3
    8f3a:	01a4      	lsls	r4, r4, #6
    8f3c:	f044 0803 	orr.w	r8, r4, #3
    8f40:	4602      	mov	r2, r0
    8f42:	9903      	ldr	r1, [sp, #12]
    8f44:	4822      	ldr	r0, [pc, #136]	; (8fd0 <bt_finalize_init+0xcc>)
    8f46:	4643      	mov	r3, r8
    8f48:	f014 fd12 	bl	1d970 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    8f4c:	462f      	mov	r7, r5
    8f4e:	2601      	movs	r6, #1
    8f50:	79eb      	ldrb	r3, [r5, #7]
    8f52:	429e      	cmp	r6, r3
    8f54:	f107 0707 	add.w	r7, r7, #7
    8f58:	db23      	blt.n	8fa2 <bt_finalize_init+0x9e>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    8f5a:	f895 6034 	ldrb.w	r6, [r5, #52]	; 0x34
    8f5e:	4630      	mov	r0, r6
    8f60:	f7fe fe40 	bl	7be4 <ver_str>
    8f64:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    8f66:	9306      	str	r3, [sp, #24]
    8f68:	f044 0403 	orr.w	r4, r4, #3
    8f6c:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
    8f6e:	9307      	str	r3, [sp, #28]
    8f70:	a904      	add	r1, sp, #16
    8f72:	4623      	mov	r3, r4
    8f74:	e9cd 0604 	strd	r0, r6, [sp, #16]
    8f78:	2204      	movs	r2, #4
    8f7a:	4816      	ldr	r0, [pc, #88]	; (8fd4 <bt_finalize_init+0xd0>)
    8f7c:	f014 fd30 	bl	1d9e0 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    8f80:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
    8f84:	9203      	str	r2, [sp, #12]
    8f86:	4610      	mov	r0, r2
    8f88:	f7fe fe2c 	bl	7be4 <ver_str>
    8f8c:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
    8f8e:	9a03      	ldr	r2, [sp, #12]
    8f90:	f8ad 4000 	strh.w	r4, [sp]
    8f94:	4601      	mov	r1, r0
    8f96:	4810      	ldr	r0, [pc, #64]	; (8fd8 <bt_finalize_init+0xd4>)
    8f98:	f014 fd03 	bl	1d9a2 <log_3>
}
    8f9c:	b009      	add	sp, #36	; 0x24
    8f9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    8fa2:	4638      	mov	r0, r7
    8fa4:	f7fe fb7e 	bl	76a4 <bt_addr_le_str_real>
    8fa8:	f7fc fbac 	bl	5704 <log_strdup>
    8fac:	4631      	mov	r1, r6
    8fae:	4602      	mov	r2, r0
    8fb0:	4643      	mov	r3, r8
    8fb2:	4648      	mov	r0, r9
    8fb4:	f014 fcdc 	bl	1d970 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    8fb8:	3601      	adds	r6, #1
    8fba:	e7c9      	b.n	8f50 <bt_finalize_init+0x4c>
    8fbc:	20000000 	.word	0x20000000
    8fc0:	000226b0 	.word	0x000226b0
    8fc4:	000225d8 	.word	0x000225d8
    8fc8:	00024149 	.word	0x00024149
    8fcc:	00024e70 	.word	0x00024e70
    8fd0:	00024e74 	.word	0x00024e74
    8fd4:	00024e94 	.word	0x00024e94
    8fd8:	00024ed2 	.word	0x00024ed2
    8fdc:	00024e83 	.word	0x00024e83

00008fe0 <init_work>:

static void init_work(struct k_work *work)
{
    8fe0:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    8fe2:	f7f8 fed1 	bl	1d88 <bt_init>
	if (ready_cb) {
    8fe6:	4b03      	ldr	r3, [pc, #12]	; (8ff4 <init_work+0x14>)
    8fe8:	681b      	ldr	r3, [r3, #0]
    8fea:	b113      	cbz	r3, 8ff2 <init_work+0x12>
		ready_cb(err);
	}
}
    8fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    8ff0:	4718      	bx	r3
}
    8ff2:	bd10      	pop	{r4, pc}
    8ff4:	20001938 	.word	0x20001938

00008ff8 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    8ff8:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    8ffa:	4d2c      	ldr	r5, [pc, #176]	; (90ac <bt_enable+0xb4>)
    8ffc:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
{
    9000:	b088      	sub	sp, #32
    9002:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    9004:	b973      	cbnz	r3, 9024 <bt_enable+0x2c>
    9006:	4b2a      	ldr	r3, [pc, #168]	; (90b0 <bt_enable+0xb8>)
    9008:	492a      	ldr	r1, [pc, #168]	; (90b4 <bt_enable+0xbc>)
		BT_ERR("No HCI driver registered");
    900a:	482b      	ldr	r0, [pc, #172]	; (90b8 <bt_enable+0xc0>)
    900c:	1ac9      	subs	r1, r1, r3
    900e:	08c9      	lsrs	r1, r1, #3
    9010:	0189      	lsls	r1, r1, #6
    9012:	f041 0101 	orr.w	r1, r1, #1
    9016:	f014 fc85 	bl	1d924 <log_0>
		return -ENODEV;
    901a:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    901e:	4620      	mov	r0, r4
    9020:	b008      	add	sp, #32
    9022:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    9024:	2101      	movs	r1, #1
    9026:	f105 0098 	add.w	r0, r5, #152	; 0x98
    902a:	f016 fbd0 	bl	1f7ce <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    902e:	ea10 0301 	ands.w	r3, r0, r1
    9032:	d137      	bne.n	90a4 <bt_enable+0xac>
	ready_cb = cb;
    9034:	4a21      	ldr	r2, [pc, #132]	; (90bc <bt_enable+0xc4>)
    9036:	6016      	str	r6, [r2, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    9038:	2000      	movs	r0, #0
    903a:	2100      	movs	r1, #0
    903c:	f06f 0208 	mvn.w	r2, #8
    9040:	e9cd 0106 	strd	r0, r1, [sp, #24]
    9044:	e9cd 3202 	strd	r3, r2, [sp, #8]
    9048:	e9cd 3300 	strd	r3, r3, [sp]
    904c:	9304      	str	r3, [sp, #16]
    904e:	491c      	ldr	r1, [pc, #112]	; (90c0 <bt_enable+0xc8>)
    9050:	4b1c      	ldr	r3, [pc, #112]	; (90c4 <bt_enable+0xcc>)
    9052:	481d      	ldr	r0, [pc, #116]	; (90c8 <bt_enable+0xd0>)
    9054:	f44f 7220 	mov.w	r2, #640	; 0x280
    9058:	f013 f93a 	bl	1c2d0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    905c:	491b      	ldr	r1, [pc, #108]	; (90cc <bt_enable+0xd4>)
    905e:	481a      	ldr	r0, [pc, #104]	; (90c8 <bt_enable+0xd0>)
    9060:	f018 feff 	bl	21e62 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    9064:	f7fe fd04 	bl	7a70 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    9068:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    906c:	68db      	ldr	r3, [r3, #12]
    906e:	4798      	blx	r3
	if (err) {
    9070:	4604      	mov	r4, r0
    9072:	b158      	cbz	r0, 908c <bt_enable+0x94>
    9074:	4b0e      	ldr	r3, [pc, #56]	; (90b0 <bt_enable+0xb8>)
    9076:	4a0f      	ldr	r2, [pc, #60]	; (90b4 <bt_enable+0xbc>)
    9078:	1ad2      	subs	r2, r2, r3
    907a:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
    907c:	0192      	lsls	r2, r2, #6
    907e:	4601      	mov	r1, r0
    9080:	f042 0201 	orr.w	r2, r2, #1
    9084:	4812      	ldr	r0, [pc, #72]	; (90d0 <bt_enable+0xd8>)
    9086:	f014 fc5c 	bl	1d942 <log_1>
		return err;
    908a:	e7c8      	b.n	901e <bt_enable+0x26>
	if (!cb) {
    908c:	b926      	cbnz	r6, 9098 <bt_enable+0xa0>
}
    908e:	b008      	add	sp, #32
    9090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    9094:	f7f8 be78 	b.w	1d88 <bt_init>
    9098:	f105 0188 	add.w	r1, r5, #136	; 0x88
    909c:	480d      	ldr	r0, [pc, #52]	; (90d4 <bt_enable+0xdc>)
    909e:	f018 ff60 	bl	21f62 <k_work_submit_to_queue>
    90a2:	e7bc      	b.n	901e <bt_enable+0x26>
		return -EALREADY;
    90a4:	f06f 0444 	mvn.w	r4, #68	; 0x44
    90a8:	e7b9      	b.n	901e <bt_enable+0x26>
    90aa:	bf00      	nop
    90ac:	20000000 	.word	0x20000000
    90b0:	000225d8 	.word	0x000225d8
    90b4:	000226b0 	.word	0x000226b0
    90b8:	00024ff1 	.word	0x00024ff1
    90bc:	20001938 	.word	0x20001938
    90c0:	20003cc0 	.word	0x20003cc0
    90c4:	000080c5 	.word	0x000080c5
    90c8:	20000bd0 	.word	0x20000bd0
    90cc:	0002500a 	.word	0x0002500a
    90d0:	00025010 	.word	0x00025010
    90d4:	200015c0 	.word	0x200015c0

000090d8 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    90d8:	4800      	ldr	r0, [pc, #0]	; (90dc <bt_get_name+0x4>)
    90da:	4770      	bx	lr
    90dc:	0002502c 	.word	0x0002502c

000090e0 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    90e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    90e2:	4f0b      	ldr	r7, [pc, #44]	; (9110 <id_find+0x30>)
{
    90e4:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    90e6:	2500      	movs	r5, #0
    90e8:	79fb      	ldrb	r3, [r7, #7]
    90ea:	b2ec      	uxtb	r4, r5
    90ec:	42a3      	cmp	r3, r4
    90ee:	d802      	bhi.n	90f6 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    90f0:	f06f 0401 	mvn.w	r4, #1
    90f4:	e009      	b.n	910a <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    90f6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    90fa:	2207      	movs	r2, #7
    90fc:	4439      	add	r1, r7
    90fe:	4630      	mov	r0, r6
    9100:	f016 f9d9 	bl	1f4b6 <memcmp>
    9104:	3501      	adds	r5, #1
    9106:	2800      	cmp	r0, #0
    9108:	d1ee      	bne.n	90e8 <id_find+0x8>
}
    910a:	4620      	mov	r0, r4
    910c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    910e:	bf00      	nop
    9110:	20000000 	.word	0x20000000

00009114 <set_random_address>:
{
    9114:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    9116:	4914      	ldr	r1, [pc, #80]	; (9168 <set_random_address+0x54>)
    9118:	2206      	movs	r2, #6
    911a:	4605      	mov	r5, r0
    911c:	f016 f9cb 	bl	1f4b6 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    9120:	4604      	mov	r4, r0
    9122:	b1e0      	cbz	r0, 915e <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    9124:	2106      	movs	r1, #6
    9126:	f242 0005 	movw	r0, #8197	; 0x2005
    912a:	f7ff f925 	bl	8378 <bt_hci_cmd_create>
	if (!buf) {
    912e:	4604      	mov	r4, r0
    9130:	b1b8      	cbz	r0, 9162 <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    9132:	2206      	movs	r2, #6
    9134:	4629      	mov	r1, r5
    9136:	3008      	adds	r0, #8
    9138:	f018 faae 	bl	21698 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    913c:	4621      	mov	r1, r4
    913e:	2200      	movs	r2, #0
    9140:	f242 0005 	movw	r0, #8197	; 0x2005
    9144:	f7ff fa7a 	bl	863c <bt_hci_cmd_send_sync>
	if (err) {
    9148:	4604      	mov	r4, r0
    914a:	b940      	cbnz	r0, 915e <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
    914c:	2206      	movs	r2, #6
    914e:	4806      	ldr	r0, [pc, #24]	; (9168 <set_random_address+0x54>)
    9150:	4629      	mov	r1, r5
    9152:	f016 f9c1 	bl	1f4d8 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    9156:	4b05      	ldr	r3, [pc, #20]	; (916c <set_random_address+0x58>)
    9158:	2201      	movs	r2, #1
    915a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
    915e:	4620      	mov	r0, r4
    9160:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    9162:	f06f 0436 	mvn.w	r4, #54	; 0x36
    9166:	e7fa      	b.n	915e <set_random_address+0x4a>
    9168:	2000002d 	.word	0x2000002d
    916c:	20000000 	.word	0x20000000

00009170 <id_create.constprop.0>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    9170:	b530      	push	{r4, r5, lr}
		do {
			bt_addr_le_create_static(&new_addr);
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    9172:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
    9176:	4813      	ldr	r0, [pc, #76]	; (91c4 <id_create.constprop.0+0x54>)
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    9178:	b085      	sub	sp, #20
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    917a:	4404      	add	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    917c:	460d      	mov	r5, r1
    917e:	b179      	cbz	r1, 91a0 <id_create.constprop.0+0x30>
    9180:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    9182:	2207      	movs	r2, #7
    9184:	4669      	mov	r1, sp
    9186:	4628      	mov	r0, r5
    9188:	9300      	str	r3, [sp, #0]
    918a:	f8cd 3003 	str.w	r3, [sp, #3]
    918e:	f016 f992 	bl	1f4b6 <memcmp>
    9192:	b128      	cbz	r0, 91a0 <id_create.constprop.0+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    9194:	4629      	mov	r1, r5
    9196:	4620      	mov	r0, r4

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    9198:	f016 fc36 	bl	1fa08 <bt_addr_le_copy>
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}
}
    919c:	b005      	add	sp, #20
    919e:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    91a0:	a802      	add	r0, sp, #8
    91a2:	f016 fadc 	bl	1f75e <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    91a6:	a802      	add	r0, sp, #8
    91a8:	f7ff ff9a 	bl	90e0 <id_find>
    91ac:	2800      	cmp	r0, #0
    91ae:	daf7      	bge.n	91a0 <id_create.constprop.0+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    91b0:	a902      	add	r1, sp, #8
    91b2:	4620      	mov	r0, r4
    91b4:	f016 fc28 	bl	1fa08 <bt_addr_le_copy>
		if (addr) {
    91b8:	2d00      	cmp	r5, #0
    91ba:	d0ef      	beq.n	919c <id_create.constprop.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    91bc:	4621      	mov	r1, r4
    91be:	4628      	mov	r0, r5
    91c0:	e7ea      	b.n	9198 <id_create.constprop.0+0x28>
    91c2:	bf00      	nop
    91c4:	20000000 	.word	0x20000000

000091c8 <bt_id_pending_keys_update>:
    91c8:	4b0a      	ldr	r3, [pc, #40]	; (91f4 <bt_id_pending_keys_update+0x2c>)
    91ca:	f3bf 8f5b 	dmb	ish
    91ce:	e853 2f00 	ldrex	r2, [r3]
    91d2:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
    91d6:	e843 1000 	strex	r0, r1, [r3]
    91da:	2800      	cmp	r0, #0
    91dc:	d1f7      	bne.n	91ce <bt_id_pending_keys_update+0x6>
    91de:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    91e2:	0453      	lsls	r3, r2, #17
    91e4:	d504      	bpl.n	91f0 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    91e6:	4904      	ldr	r1, [pc, #16]	; (91f8 <bt_id_pending_keys_update+0x30>)
    91e8:	2200      	movs	r2, #0
    91ea:	2002      	movs	r0, #2
    91ec:	f005 b83e 	b.w	e26c <bt_keys_foreach>
}
    91f0:	4770      	bx	lr
    91f2:	bf00      	nop
    91f4:	20000098 	.word	0x20000098
    91f8:	0001fb47 	.word	0x0001fb47

000091fc <bt_id_add>:
{
    91fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    91fe:	4c5f      	ldr	r4, [pc, #380]	; (937c <bt_id_add+0x180>)
    9200:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
    9204:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
{
    9208:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    920a:	b10a      	cbz	r2, 9210 <bt_id_add+0x14>
    920c:	429a      	cmp	r2, r3
    920e:	d208      	bcs.n	9222 <bt_id_add+0x26>
		bt_dev.le.rl_entries++;
    9210:	3301      	adds	r3, #1
    9212:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
    9216:	7a2b      	ldrb	r3, [r5, #8]
    9218:	f043 0304 	orr.w	r3, r3, #4
    921c:	722b      	strb	r3, [r5, #8]
}
    921e:	b003      	add	sp, #12
    9220:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    9222:	2100      	movs	r1, #0
    9224:	2206      	movs	r2, #6
    9226:	4608      	mov	r0, r1
    9228:	f001 fb04 	bl	a834 <bt_conn_lookup_state_le>
	if (conn) {
    922c:	4606      	mov	r6, r0
    922e:	b1a8      	cbz	r0, 925c <bt_id_add+0x60>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9230:	f3bf 8f5b 	dmb	ish
    9234:	3498      	adds	r4, #152	; 0x98
    9236:	e854 3f00 	ldrex	r3, [r4]
    923a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    923e:	e844 3200 	strex	r2, r3, [r4]
    9242:	2a00      	cmp	r2, #0
    9244:	d1f7      	bne.n	9236 <bt_id_add+0x3a>
    9246:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
    924a:	7a2b      	ldrb	r3, [r5, #8]
    924c:	f043 0301 	orr.w	r3, r3, #1
    9250:	722b      	strb	r3, [r5, #8]
}
    9252:	b003      	add	sp, #12
    9254:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    9258:	f016 be4c 	b.w	1fef4 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
    925c:	4601      	mov	r1, r0
    925e:	4848      	ldr	r0, [pc, #288]	; (9380 <bt_id_add+0x184>)
    9260:	f000 fbbe 	bl	99e0 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
    9264:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    9268:	b173      	cbz	r3, 9288 <bt_id_add+0x8c>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    926a:	4630      	mov	r0, r6
    926c:	f016 fc1b 	bl	1faa6 <addr_res_enable>
		if (err) {
    9270:	b150      	cbz	r0, 9288 <bt_id_add+0x8c>
    9272:	4944      	ldr	r1, [pc, #272]	; (9384 <bt_id_add+0x188>)
    9274:	4b44      	ldr	r3, [pc, #272]	; (9388 <bt_id_add+0x18c>)
			BT_WARN("Failed to disable address resolution");
    9276:	4845      	ldr	r0, [pc, #276]	; (938c <bt_id_add+0x190>)
    9278:	1ac9      	subs	r1, r1, r3
    927a:	08c9      	lsrs	r1, r1, #3
    927c:	0189      	lsls	r1, r1, #6
    927e:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
    9282:	f014 fb4f 	bl	1d924 <log_0>
	if (err) {
    9286:	e023      	b.n	92d0 <bt_id_add+0xd4>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    9288:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    928c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    9290:	429a      	cmp	r2, r3
    9292:	d127      	bne.n	92e4 <bt_id_add+0xe8>
    9294:	4b3c      	ldr	r3, [pc, #240]	; (9388 <bt_id_add+0x18c>)
    9296:	4e3b      	ldr	r6, [pc, #236]	; (9384 <bt_id_add+0x188>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
    9298:	483d      	ldr	r0, [pc, #244]	; (9390 <bt_id_add+0x194>)
    929a:	1af6      	subs	r6, r6, r3
    929c:	08f6      	lsrs	r6, r6, #3
    929e:	01b6      	lsls	r6, r6, #6
    92a0:	f046 0102 	orr.w	r1, r6, #2
    92a4:	f014 fb3e 	bl	1d924 <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    92a8:	2200      	movs	r2, #0
    92aa:	4611      	mov	r1, r2
    92ac:	f242 0029 	movw	r0, #8233	; 0x2029
    92b0:	f7ff f9c4 	bl	863c <bt_hci_cmd_send_sync>
		if (err) {
    92b4:	b118      	cbz	r0, 92be <bt_id_add+0xc2>
			BT_ERR("Failed to clear resolution list");
    92b6:	4837      	ldr	r0, [pc, #220]	; (9394 <bt_id_add+0x198>)
    92b8:	f046 0101 	orr.w	r1, r6, #1
    92bc:	e7e1      	b.n	9282 <bt_id_add+0x86>
		bt_dev.le.rl_entries++;
    92be:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    92c2:	3301      	adds	r3, #1
    92c4:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
    92c8:	7a2b      	ldrb	r3, [r5, #8]
    92ca:	f043 0304 	orr.w	r3, r3, #4
    92ce:	722b      	strb	r3, [r5, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    92d0:	2001      	movs	r0, #1
    92d2:	f016 fbe8 	bl	1faa6 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    92d6:	4830      	ldr	r0, [pc, #192]	; (9398 <bt_id_add+0x19c>)
    92d8:	2100      	movs	r1, #0
}
    92da:	b003      	add	sp, #12
    92dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    92e0:	f000 bb7e 	b.w	99e0 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    92e4:	1c6f      	adds	r7, r5, #1
    92e6:	f105 012a 	add.w	r1, r5, #42	; 0x2a
    92ea:	4638      	mov	r0, r7
    92ec:	f016 fbaa 	bl	1fa44 <hci_id_add.constprop.0>
	if (err) {
    92f0:	4606      	mov	r6, r0
    92f2:	b140      	cbz	r0, 9306 <bt_id_add+0x10a>
    92f4:	4923      	ldr	r1, [pc, #140]	; (9384 <bt_id_add+0x188>)
    92f6:	4b24      	ldr	r3, [pc, #144]	; (9388 <bt_id_add+0x18c>)
		BT_ERR("Failed to add IRK to controller");
    92f8:	4828      	ldr	r0, [pc, #160]	; (939c <bt_id_add+0x1a0>)
    92fa:	1ac9      	subs	r1, r1, r3
    92fc:	08c9      	lsrs	r1, r1, #3
    92fe:	0189      	lsls	r1, r1, #6
    9300:	f041 0101 	orr.w	r1, r1, #1
    9304:	e7bd      	b.n	9282 <bt_id_add+0x86>
	bt_dev.le.rl_entries++;
    9306:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    930a:	3301      	adds	r3, #1
    930c:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	keys->state |= BT_KEYS_ID_ADDED;
    9310:	7a2b      	ldrb	r3, [r5, #8]
    9312:	f043 0304 	orr.w	r3, r3, #4
    9316:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    9318:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
    931c:	075b      	lsls	r3, r3, #29
    931e:	d408      	bmi.n	9332 <bt_id_add+0x136>
    9320:	4918      	ldr	r1, [pc, #96]	; (9384 <bt_id_add+0x188>)
    9322:	4b19      	ldr	r3, [pc, #100]	; (9388 <bt_id_add+0x18c>)
		BT_WARN("Set privacy mode command is not supported");
    9324:	481e      	ldr	r0, [pc, #120]	; (93a0 <bt_id_add+0x1a4>)
    9326:	1ac9      	subs	r1, r1, r3
    9328:	08c9      	lsrs	r1, r1, #3
    932a:	0189      	lsls	r1, r1, #6
    932c:	f041 0102 	orr.w	r1, r1, #2
    9330:	e7a7      	b.n	9282 <bt_id_add+0x86>
	bt_addr_le_copy(&cp.id_addr, addr);
    9332:	4639      	mov	r1, r7
    9334:	4668      	mov	r0, sp
    9336:	f016 fb67 	bl	1fa08 <bt_addr_le_copy>
	cp.mode = mode;
    933a:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    933c:	2108      	movs	r1, #8
    933e:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    9342:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    9346:	f7ff f817 	bl	8378 <bt_hci_cmd_create>
	if (!buf) {
    934a:	4604      	mov	r4, r0
    934c:	b940      	cbnz	r0, 9360 <bt_id_add+0x164>
    934e:	490d      	ldr	r1, [pc, #52]	; (9384 <bt_id_add+0x188>)
    9350:	4b0d      	ldr	r3, [pc, #52]	; (9388 <bt_id_add+0x18c>)
		BT_ERR("Failed to set privacy mode");
    9352:	4814      	ldr	r0, [pc, #80]	; (93a4 <bt_id_add+0x1a8>)
    9354:	1ac9      	subs	r1, r1, r3
    9356:	08c9      	lsrs	r1, r1, #3
    9358:	0189      	lsls	r1, r1, #6
    935a:	f041 0101 	orr.w	r1, r1, #1
    935e:	e790      	b.n	9282 <bt_id_add+0x86>
    9360:	2208      	movs	r2, #8
    9362:	4669      	mov	r1, sp
    9364:	4410      	add	r0, r2
    9366:	f018 f997 	bl	21698 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    936a:	4632      	mov	r2, r6
    936c:	4621      	mov	r1, r4
    936e:	f242 004e 	movw	r0, #8270	; 0x204e
    9372:	f7ff f963 	bl	863c <bt_hci_cmd_send_sync>
	if (err) {
    9376:	2800      	cmp	r0, #0
    9378:	d0aa      	beq.n	92d0 <bt_id_add+0xd4>
    937a:	e7e8      	b.n	934e <bt_id_add+0x152>
    937c:	20000000 	.word	0x20000000
    9380:	0001fad7 	.word	0x0001fad7
    9384:	000226c0 	.word	0x000226c0
    9388:	000225d8 	.word	0x000225d8
    938c:	00025062 	.word	0x00025062
    9390:	00025087 	.word	0x00025087
    9394:	000250b8 	.word	0x000250b8
    9398:	0001fa1b 	.word	0x0001fa1b
    939c:	000250d8 	.word	0x000250d8
    93a0:	000250f8 	.word	0x000250f8
    93a4:	00025122 	.word	0x00025122

000093a8 <bt_id_del>:
{
    93a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
    93ac:	4c47      	ldr	r4, [pc, #284]	; (94cc <bt_id_del+0x124>)
    93ae:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    93b2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
{
    93b6:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size ||
    93b8:	b112      	cbz	r2, 93c0 <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    93ba:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    93bc:	4293      	cmp	r3, r2
    93be:	dd08      	ble.n	93d2 <bt_id_del+0x2a>
		bt_dev.le.rl_entries--;
    93c0:	3b01      	subs	r3, #1
    93c2:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
    93c6:	7a2b      	ldrb	r3, [r5, #8]
    93c8:	f023 0304 	bic.w	r3, r3, #4
    93cc:	722b      	strb	r3, [r5, #8]
}
    93ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    93d2:	2100      	movs	r1, #0
    93d4:	2206      	movs	r2, #6
    93d6:	4608      	mov	r0, r1
    93d8:	f001 fa2c 	bl	a834 <bt_conn_lookup_state_le>
	if (conn) {
    93dc:	4606      	mov	r6, r0
    93de:	b1a0      	cbz	r0, 940a <bt_id_del+0x62>
    93e0:	f3bf 8f5b 	dmb	ish
    93e4:	3498      	adds	r4, #152	; 0x98
    93e6:	e854 3f00 	ldrex	r3, [r4]
    93ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    93ee:	e844 3200 	strex	r2, r3, [r4]
    93f2:	2a00      	cmp	r2, #0
    93f4:	d1f7      	bne.n	93e6 <bt_id_del+0x3e>
    93f6:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
    93fa:	7a2b      	ldrb	r3, [r5, #8]
    93fc:	f043 0302 	orr.w	r3, r3, #2
    9400:	722b      	strb	r3, [r5, #8]
}
    9402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    9406:	f016 bd75 	b.w	1fef4 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
    940a:	4601      	mov	r1, r0
    940c:	4830      	ldr	r0, [pc, #192]	; (94d0 <bt_id_del+0x128>)
    940e:	f000 fae7 	bl	99e0 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    9412:	4630      	mov	r0, r6
    9414:	f016 fb47 	bl	1faa6 <addr_res_enable>
	if (err) {
    9418:	4606      	mov	r6, r0
    941a:	b1b0      	cbz	r0, 944a <bt_id_del+0xa2>
    941c:	4a2d      	ldr	r2, [pc, #180]	; (94d4 <bt_id_del+0x12c>)
    941e:	4b2e      	ldr	r3, [pc, #184]	; (94d8 <bt_id_del+0x130>)
    9420:	1a9b      	subs	r3, r3, r2
    9422:	08db      	lsrs	r3, r3, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
    9424:	019b      	lsls	r3, r3, #6
    9426:	4601      	mov	r1, r0
    9428:	f043 0201 	orr.w	r2, r3, #1
    942c:	482b      	ldr	r0, [pc, #172]	; (94dc <bt_id_del+0x134>)
    942e:	f014 fa88 	bl	1d942 <log_1>
	if (bt_dev.le.rl_entries) {
    9432:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    9436:	b113      	cbz	r3, 943e <bt_id_del+0x96>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    9438:	2001      	movs	r0, #1
    943a:	f016 fb34 	bl	1faa6 <addr_res_enable>
}
    943e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    9442:	4827      	ldr	r0, [pc, #156]	; (94e0 <bt_id_del+0x138>)
    9444:	2100      	movs	r1, #0
    9446:	f000 bacb 	b.w	99e0 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    944a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    944e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
    9452:	429a      	cmp	r2, r3
    9454:	d20c      	bcs.n	9470 <bt_id_del+0xc8>
		bt_dev.le.rl_entries--;
    9456:	3b01      	subs	r3, #1
    9458:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
    945c:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    945e:	4921      	ldr	r1, [pc, #132]	; (94e4 <bt_id_del+0x13c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    9460:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    9464:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    9466:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    9468:	2002      	movs	r0, #2
    946a:	f004 feff 	bl	e26c <bt_keys_foreach>
		goto done;
    946e:	e7e0      	b.n	9432 <bt_id_del+0x8a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    9470:	2107      	movs	r1, #7
    9472:	f242 0028 	movw	r0, #8232	; 0x2028
    9476:	f7fe ff7f 	bl	8378 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    947a:	f105 0801 	add.w	r8, r5, #1
	if (!buf) {
    947e:	4607      	mov	r7, r0
    9480:	b950      	cbnz	r0, 9498 <bt_id_del+0xf0>
    9482:	4b14      	ldr	r3, [pc, #80]	; (94d4 <bt_id_del+0x12c>)
    9484:	4914      	ldr	r1, [pc, #80]	; (94d8 <bt_id_del+0x130>)
		BT_ERR("Failed to remove IRK from controller");
    9486:	4818      	ldr	r0, [pc, #96]	; (94e8 <bt_id_del+0x140>)
    9488:	1ac9      	subs	r1, r1, r3
    948a:	08c9      	lsrs	r1, r1, #3
    948c:	0189      	lsls	r1, r1, #6
    948e:	f041 0101 	orr.w	r1, r1, #1
    9492:	f014 fa47 	bl	1d924 <log_0>
		goto done;
    9496:	e7cc      	b.n	9432 <bt_id_del+0x8a>
	return net_buf_simple_add(&buf->b, len);
    9498:	2107      	movs	r1, #7
    949a:	3008      	adds	r0, #8
    949c:	f018 f8f6 	bl	2168c <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    94a0:	4641      	mov	r1, r8
    94a2:	f016 fab1 	bl	1fa08 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    94a6:	4632      	mov	r2, r6
    94a8:	4639      	mov	r1, r7
    94aa:	f242 0028 	movw	r0, #8232	; 0x2028
    94ae:	f7ff f8c5 	bl	863c <bt_hci_cmd_send_sync>
	if (err) {
    94b2:	2800      	cmp	r0, #0
    94b4:	d1e5      	bne.n	9482 <bt_id_del+0xda>
	bt_dev.le.rl_entries--;
    94b6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    94ba:	3b01      	subs	r3, #1
    94bc:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	keys->state &= ~BT_KEYS_ID_ADDED;
    94c0:	7a2b      	ldrb	r3, [r5, #8]
    94c2:	f023 0304 	bic.w	r3, r3, #4
    94c6:	722b      	strb	r3, [r5, #8]
    94c8:	e7b3      	b.n	9432 <bt_id_del+0x8a>
    94ca:	bf00      	nop
    94cc:	20000000 	.word	0x20000000
    94d0:	0001fad7 	.word	0x0001fad7
    94d4:	000225d8 	.word	0x000225d8
    94d8:	000226c0 	.word	0x000226c0
    94dc:	0002513d 	.word	0x0002513d
    94e0:	0001fa1b 	.word	0x0001fa1b
    94e4:	0001fa95 	.word	0x0001fa95
    94e8:	0002516a 	.word	0x0002516a

000094ec <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    94ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
    94ee:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    94f0:	4605      	mov	r5, r0
    94f2:	b918      	cbnz	r0, 94fc <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    94f4:	b34c      	cbz	r4, 954a <bt_id_create+0x5e>
		return -EINVAL;
    94f6:	f06f 0415 	mvn.w	r4, #21
    94fa:	e023      	b.n	9544 <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    94fc:	2300      	movs	r3, #0
    94fe:	2207      	movs	r2, #7
    9500:	4669      	mov	r1, sp
    9502:	9300      	str	r3, [sp, #0]
    9504:	f8cd 3003 	str.w	r3, [sp, #3]
    9508:	f015 ffd5 	bl	1f4b6 <memcmp>
    950c:	2800      	cmp	r0, #0
    950e:	d0f1      	beq.n	94f4 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    9510:	782b      	ldrb	r3, [r5, #0]
    9512:	2b01      	cmp	r3, #1
    9514:	d104      	bne.n	9520 <bt_id_create+0x34>
    9516:	79ab      	ldrb	r3, [r5, #6]
    9518:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    951c:	2bc0      	cmp	r3, #192	; 0xc0
    951e:	d00a      	beq.n	9536 <bt_id_create+0x4a>
    9520:	4b1a      	ldr	r3, [pc, #104]	; (958c <bt_id_create+0xa0>)
    9522:	491b      	ldr	r1, [pc, #108]	; (9590 <bt_id_create+0xa4>)
			BT_ERR("Only static random identity address supported");
    9524:	481b      	ldr	r0, [pc, #108]	; (9594 <bt_id_create+0xa8>)
    9526:	1ac9      	subs	r1, r1, r3
    9528:	08c9      	lsrs	r1, r1, #3
    952a:	0189      	lsls	r1, r1, #6
    952c:	f041 0101 	orr.w	r1, r1, #1
    9530:	f014 f9f8 	bl	1d924 <log_0>
			return -EINVAL;
    9534:	e7df      	b.n	94f6 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    9536:	4628      	mov	r0, r5
    9538:	f7ff fdd2 	bl	90e0 <id_find>
    953c:	2800      	cmp	r0, #0
    953e:	dbd9      	blt.n	94f4 <bt_id_create+0x8>
			return -EALREADY;
    9540:	f06f 0444 	mvn.w	r4, #68	; 0x44

	new_id = bt_dev.id_count++;
	id_create(new_id, addr, irk);

	return new_id;
}
    9544:	4620      	mov	r0, r4
    9546:	b002      	add	sp, #8
    9548:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    954a:	4e13      	ldr	r6, [pc, #76]	; (9598 <bt_id_create+0xac>)
    954c:	79f3      	ldrb	r3, [r6, #7]
    954e:	2b01      	cmp	r3, #1
    9550:	d019      	beq.n	9586 <bt_id_create+0x9a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9552:	f106 0098 	add.w	r0, r6, #152	; 0x98
    9556:	f016 fa5a 	bl	1fa0e <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    955a:	07c3      	lsls	r3, r0, #31
    955c:	d40b      	bmi.n	9576 <bt_id_create+0x8a>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    955e:	2d00      	cmp	r5, #0
    9560:	d0c9      	beq.n	94f6 <bt_id_create+0xa>
    9562:	2207      	movs	r2, #7
    9564:	4669      	mov	r1, sp
    9566:	4628      	mov	r0, r5
    9568:	9400      	str	r4, [sp, #0]
    956a:	f8cd 4003 	str.w	r4, [sp, #3]
    956e:	f015 ffa2 	bl	1f4b6 <memcmp>
    9572:	2800      	cmp	r0, #0
    9574:	d0bf      	beq.n	94f6 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
    9576:	79f4      	ldrb	r4, [r6, #7]
	id_create(new_id, addr, irk);
    9578:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
    957a:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
    957c:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    957e:	71f3      	strb	r3, [r6, #7]
	id_create(new_id, addr, irk);
    9580:	f7ff fdf6 	bl	9170 <id_create.constprop.0>
	return new_id;
    9584:	e7de      	b.n	9544 <bt_id_create+0x58>
		return -ENOMEM;
    9586:	f06f 040b 	mvn.w	r4, #11
    958a:	e7db      	b.n	9544 <bt_id_create+0x58>
    958c:	000225d8 	.word	0x000225d8
    9590:	000226c0 	.word	0x000226c0
    9594:	0002518f 	.word	0x0002518f
    9598:	20000000 	.word	0x20000000

0000959c <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    959c:	b570      	push	{r4, r5, r6, lr}
    959e:	b086      	sub	sp, #24
    95a0:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    95a2:	aa01      	add	r2, sp, #4
    95a4:	2100      	movs	r1, #0
    95a6:	f241 0009 	movw	r0, #4105	; 0x1009
    95aa:	f7ff f847 	bl	863c <bt_hci_cmd_send_sync>
	if (err) {
    95ae:	4604      	mov	r4, r0
    95b0:	b160      	cbz	r0, 95cc <bt_id_read_public_addr+0x30>
    95b2:	491e      	ldr	r1, [pc, #120]	; (962c <bt_id_read_public_addr+0x90>)
    95b4:	4b1e      	ldr	r3, [pc, #120]	; (9630 <bt_id_read_public_addr+0x94>)
		BT_WARN("Failed to read public address");
    95b6:	481f      	ldr	r0, [pc, #124]	; (9634 <bt_id_read_public_addr+0x98>)
    95b8:	1ac9      	subs	r1, r1, r3
    95ba:	08c9      	lsrs	r1, r1, #3
    95bc:	0189      	lsls	r1, r1, #6
    95be:	f041 0102 	orr.w	r1, r1, #2
    95c2:	f014 f9af 	bl	1d924 <log_0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
    95c6:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    95c8:	b006      	add	sp, #24
    95ca:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    95cc:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    95ce:	9002      	str	r0, [sp, #8]
    95d0:	689d      	ldr	r5, [r3, #8]
    95d2:	f8ad 000c 	strh.w	r0, [sp, #12]
    95d6:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
    95d8:	2206      	movs	r2, #6
    95da:	a902      	add	r1, sp, #8
    95dc:	4628      	mov	r0, r5
    95de:	f015 ff6a 	bl	1f4b6 <memcmp>
    95e2:	b918      	cbnz	r0, 95ec <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
    95e4:	9801      	ldr	r0, [sp, #4]
    95e6:	f010 fd17 	bl	1a018 <net_buf_unref>
    95ea:	e7ec      	b.n	95c6 <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    95ec:	23ff      	movs	r3, #255	; 0xff
    95ee:	2206      	movs	r2, #6
    95f0:	a904      	add	r1, sp, #16
    95f2:	4628      	mov	r0, r5
    95f4:	f88d 3010 	strb.w	r3, [sp, #16]
    95f8:	f88d 3011 	strb.w	r3, [sp, #17]
    95fc:	f88d 3012 	strb.w	r3, [sp, #18]
    9600:	f88d 3013 	strb.w	r3, [sp, #19]
    9604:	f88d 3014 	strb.w	r3, [sp, #20]
    9608:	f88d 3015 	strb.w	r3, [sp, #21]
    960c:	f015 ff53 	bl	1f4b6 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    9610:	2800      	cmp	r0, #0
    9612:	d0e7      	beq.n	95e4 <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
    9614:	2206      	movs	r2, #6
    9616:	4629      	mov	r1, r5
    9618:	1c70      	adds	r0, r6, #1
    961a:	f015 ff5d 	bl	1f4d8 <memcpy>
	net_buf_unref(rsp);
    961e:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    9620:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    9622:	f010 fcf9 	bl	1a018 <net_buf_unref>
	return 1U;
    9626:	2001      	movs	r0, #1
    9628:	e7ce      	b.n	95c8 <bt_id_read_public_addr+0x2c>
    962a:	bf00      	nop
    962c:	000226c0 	.word	0x000226c0
    9630:	000225d8 	.word	0x000225d8
    9634:	000251bd 	.word	0x000251bd

00009638 <bt_setup_public_id_addr>:

void bt_setup_public_id_addr(void)
{
    9638:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    963a:	4668      	mov	r0, sp
    963c:	f7ff ffae 	bl	959c <bt_id_read_public_addr>
    9640:	4b04      	ldr	r3, [pc, #16]	; (9654 <bt_setup_public_id_addr+0x1c>)
    9642:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    9644:	b118      	cbz	r0, 964e <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
    9646:	4669      	mov	r1, sp
    9648:	2000      	movs	r0, #0
    964a:	f7ff fd91 	bl	9170 <id_create.constprop.0>
}
    964e:	b003      	add	sp, #12
    9650:	f85d fb04 	ldr.w	pc, [sp], #4
    9654:	20000000 	.word	0x20000000

00009658 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    9658:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    965c:	4b25      	ldr	r3, [pc, #148]	; (96f4 <bt_read_static_addr+0x9c>)
    965e:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    9662:	f014 0401 	ands.w	r4, r4, #1
{
    9666:	4607      	mov	r7, r0
    9668:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    966a:	d10a      	bne.n	9682 <bt_read_static_addr+0x2a>
    966c:	4922      	ldr	r1, [pc, #136]	; (96f8 <bt_read_static_addr+0xa0>)
    966e:	4b23      	ldr	r3, [pc, #140]	; (96fc <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
    9670:	4823      	ldr	r0, [pc, #140]	; (9700 <bt_read_static_addr+0xa8>)
    9672:	1ac9      	subs	r1, r1, r3
    9674:	08c9      	lsrs	r1, r1, #3
    9676:	0189      	lsls	r1, r1, #6
    9678:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
    967c:	f014 f952 	bl	1d924 <log_0>
    9680:	e012      	b.n	96a8 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    9682:	aa01      	add	r2, sp, #4
    9684:	2100      	movs	r1, #0
    9686:	f64f 4009 	movw	r0, #64521	; 0xfc09
    968a:	f7fe ffd7 	bl	863c <bt_hci_cmd_send_sync>
	if (err) {
    968e:	4605      	mov	r5, r0
    9690:	b170      	cbz	r0, 96b0 <bt_read_static_addr+0x58>
    9692:	4b1a      	ldr	r3, [pc, #104]	; (96fc <bt_read_static_addr+0xa4>)
    9694:	4918      	ldr	r1, [pc, #96]	; (96f8 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
    9696:	481b      	ldr	r0, [pc, #108]	; (9704 <bt_read_static_addr+0xac>)
    9698:	1ac9      	subs	r1, r1, r3
    969a:	08c9      	lsrs	r1, r1, #3
    969c:	0189      	lsls	r1, r1, #6
    969e:	f041 0102 	orr.w	r1, r1, #2
    96a2:	f014 f93f 	bl	1d924 <log_0>
		return 0;
    96a6:	2400      	movs	r4, #0
	}

	return cnt;
}
    96a8:	4620      	mov	r0, r4
    96aa:	b002      	add	sp, #8
    96ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
    96b0:	9b01      	ldr	r3, [sp, #4]
    96b2:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    96b4:	785c      	ldrb	r4, [r3, #1]
    96b6:	42b4      	cmp	r4, r6
    96b8:	bf28      	it	cs
    96ba:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    96bc:	f04f 0816 	mov.w	r8, #22
    96c0:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    96c2:	42a5      	cmp	r5, r4
    96c4:	db0d      	blt.n	96e2 <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
    96c6:	9801      	ldr	r0, [sp, #4]
    96c8:	f010 fca6 	bl	1a018 <net_buf_unref>
	if (!cnt) {
    96cc:	2c00      	cmp	r4, #0
    96ce:	d1eb      	bne.n	96a8 <bt_read_static_addr+0x50>
    96d0:	4909      	ldr	r1, [pc, #36]	; (96f8 <bt_read_static_addr+0xa0>)
    96d2:	4b0a      	ldr	r3, [pc, #40]	; (96fc <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
    96d4:	480c      	ldr	r0, [pc, #48]	; (9708 <bt_read_static_addr+0xb0>)
    96d6:	1ac9      	subs	r1, r1, r3
    96d8:	08c9      	lsrs	r1, r1, #3
    96da:	0189      	lsls	r1, r1, #6
    96dc:	f041 0102 	orr.w	r1, r1, #2
    96e0:	e7cc      	b.n	967c <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    96e2:	fb08 7005 	mla	r0, r8, r5, r7
    96e6:	2216      	movs	r2, #22
    96e8:	4631      	mov	r1, r6
    96ea:	f015 fef5 	bl	1f4d8 <memcpy>
	for (i = 0; i < cnt; i++) {
    96ee:	3501      	adds	r5, #1
    96f0:	e7e7      	b.n	96c2 <bt_read_static_addr+0x6a>
    96f2:	bf00      	nop
    96f4:	20000000 	.word	0x20000000
    96f8:	000226c0 	.word	0x000226c0
    96fc:	000225d8 	.word	0x000225d8
    9700:	000251db 	.word	0x000251db
    9704:	00025207 	.word	0x00025207
    9708:	00025227 	.word	0x00025227

0000970c <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    970c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    970e:	4d15      	ldr	r5, [pc, #84]	; (9764 <bt_setup_random_id_addr+0x58>)
    9710:	79ec      	ldrb	r4, [r5, #7]
{
    9712:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    9714:	b9f4      	cbnz	r4, 9754 <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    9716:	2101      	movs	r1, #1
    9718:	a802      	add	r0, sp, #8
    971a:	f7ff ff9d 	bl	9658 <bt_read_static_addr>
    971e:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
    9720:	b1c0      	cbz	r0, 9754 <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    9722:	2716      	movs	r7, #22
    9724:	b2e6      	uxtb	r6, r4
    9726:	ab02      	add	r3, sp, #8
    9728:	2206      	movs	r2, #6
    972a:	fb07 3106 	mla	r1, r7, r6, r3
    972e:	f10d 0001 	add.w	r0, sp, #1
    9732:	f015 fed1 	bl	1f4d8 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    9736:	2301      	movs	r3, #1

				id_create(i, &addr, irk);
    9738:	4669      	mov	r1, sp
    973a:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    973c:	f88d 3000 	strb.w	r3, [sp]
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    9740:	3401      	adds	r4, #1
				id_create(i, &addr, irk);
    9742:	f7ff fd15 	bl	9170 <id_create.constprop.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    9746:	79ea      	ldrb	r2, [r5, #7]
    9748:	b2e3      	uxtb	r3, r4
    974a:	429a      	cmp	r2, r3
    974c:	d8ea      	bhi.n	9724 <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    974e:	2000      	movs	r0, #0
    9750:	b009      	add	sp, #36	; 0x24
    9752:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    9754:	2100      	movs	r1, #0
    9756:	4608      	mov	r0, r1
}
    9758:	b009      	add	sp, #36	; 0x24
    975a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    975e:	f7ff bec5 	b.w	94ec <bt_id_create>
    9762:	bf00      	nop
    9764:	20000000 	.word	0x20000000

00009768 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    9768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    976c:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
    9770:	7805      	ldrb	r5, [r0, #0]
{
    9772:	460e      	mov	r6, r1
    9774:	4690      	mov	r8, r2
    9776:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    9778:	d026      	beq.n	97c8 <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    977a:	4c23      	ldr	r4, [pc, #140]	; (9808 <bt_id_set_adv_own_addr+0xa0>)
    977c:	b12a      	cbz	r2, 978a <bt_id_set_adv_own_addr+0x22>
    977e:	0688      	lsls	r0, r1, #26
    9780:	d503      	bpl.n	978a <bt_id_set_adv_own_addr+0x22>
    9782:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
    9786:	0659      	lsls	r1, r3, #25
    9788:	d53a      	bpl.n	9800 <bt_id_set_adv_own_addr+0x98>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    978a:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    978e:	ea4f 09c5 	mov.w	r9, r5, lsl #3
    9792:	5ce3      	ldrb	r3, [r4, r3]
    9794:	2b01      	cmp	r3, #1
    9796:	d008      	beq.n	97aa <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    9798:	eba9 0505 	sub.w	r5, r9, r5
    979c:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    979e:	f1b8 0f00 	cmp.w	r8, #0
    97a2:	d10c      	bne.n	97be <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    97a4:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    97a6:	2000      	movs	r0, #0
    97a8:	e007      	b.n	97ba <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    97aa:	2007      	movs	r0, #7
    97ac:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    97b0:	4420      	add	r0, r4
    97b2:	f7ff fcaf 	bl	9114 <set_random_address>
				if (err) {
    97b6:	2800      	cmp	r0, #0
    97b8:	d0ee      	beq.n	9798 <bt_id_set_adv_own_addr+0x30>
}
    97ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    97be:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    97c0:	bf48      	it	mi
    97c2:	f043 0302 	orrmi.w	r3, r3, #2
    97c6:	e7ed      	b.n	97a4 <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    97c8:	074b      	lsls	r3, r1, #29
    97ca:	d515      	bpl.n	97f8 <bt_id_set_adv_own_addr+0x90>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    97cc:	f8df 8038 	ldr.w	r8, [pc, #56]	; 9808 <bt_id_set_adv_own_addr+0xa0>
    97d0:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    97d4:	00ee      	lsls	r6, r5, #3
    97d6:	f818 3003 	ldrb.w	r3, [r8, r3]
    97da:	2b01      	cmp	r3, #1
    97dc:	d10a      	bne.n	97f4 <bt_id_set_adv_own_addr+0x8c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    97de:	2007      	movs	r0, #7
    97e0:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    97e4:	4440      	add	r0, r8
    97e6:	f7ff fc95 	bl	9114 <set_random_address>
			*own_addr_type = id_addr->type;
    97ea:	1b75      	subs	r5, r6, r5
    97ec:	f818 3005 	ldrb.w	r3, [r8, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
    97f0:	703b      	strb	r3, [r7, #0]
		if (err) {
    97f2:	e7e2      	b.n	97ba <bt_id_set_adv_own_addr+0x52>
	int err = 0;
    97f4:	4620      	mov	r0, r4
    97f6:	e7f8      	b.n	97ea <bt_id_set_adv_own_addr+0x82>
			err = bt_id_set_adv_private_addr(adv);
    97f8:	f016 f991 	bl	1fb1e <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    97fc:	2301      	movs	r3, #1
    97fe:	e7f7      	b.n	97f0 <bt_id_set_adv_own_addr+0x88>
			return -ENOTSUP;
    9800:	f06f 0022 	mvn.w	r0, #34	; 0x22
    9804:	e7d9      	b.n	97ba <bt_id_set_adv_own_addr+0x52>
    9806:	bf00      	nop
    9808:	20000000 	.word	0x20000000

0000980c <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    980c:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    980e:	4d14      	ldr	r5, [pc, #80]	; (9860 <bt_id_init+0x54>)
    9810:	79eb      	ldrb	r3, [r5, #7]
    9812:	b113      	cbz	r3, 981a <bt_id_init+0xe>

#if defined(CONFIG_BT_PRIVACY)
	k_delayed_work_init(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    9814:	2400      	movs	r4, #0
}
    9816:	4620      	mov	r0, r4
    9818:	bd38      	pop	{r3, r4, r5, pc}
		bt_setup_public_id_addr();
    981a:	f7ff ff0d 	bl	9638 <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    981e:	79eb      	ldrb	r3, [r5, #7]
    9820:	2b00      	cmp	r3, #0
    9822:	d1f7      	bne.n	9814 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
    9824:	f7ff ff72 	bl	970c <bt_setup_random_id_addr>
		if (err) {
    9828:	4604      	mov	r4, r0
    982a:	b150      	cbz	r0, 9842 <bt_id_init+0x36>
    982c:	490d      	ldr	r1, [pc, #52]	; (9864 <bt_id_init+0x58>)
    982e:	4b0e      	ldr	r3, [pc, #56]	; (9868 <bt_id_init+0x5c>)
			BT_ERR("Unable to set identity address");
    9830:	480e      	ldr	r0, [pc, #56]	; (986c <bt_id_init+0x60>)
    9832:	1ac9      	subs	r1, r1, r3
    9834:	08c9      	lsrs	r1, r1, #3
    9836:	0189      	lsls	r1, r1, #6
    9838:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to set random address");
    983c:	f014 f872 	bl	1d924 <log_0>
			return err;
    9840:	e7e9      	b.n	9816 <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
    9842:	1c68      	adds	r0, r5, #1
    9844:	f7ff fc66 	bl	9114 <set_random_address>
		if (err) {
    9848:	4604      	mov	r4, r0
    984a:	2800      	cmp	r0, #0
    984c:	d0e3      	beq.n	9816 <bt_id_init+0xa>
    984e:	4905      	ldr	r1, [pc, #20]	; (9864 <bt_id_init+0x58>)
    9850:	4b05      	ldr	r3, [pc, #20]	; (9868 <bt_id_init+0x5c>)
			BT_ERR("Unable to set random address");
    9852:	4807      	ldr	r0, [pc, #28]	; (9870 <bt_id_init+0x64>)
    9854:	1ac9      	subs	r1, r1, r3
    9856:	08c9      	lsrs	r1, r1, #3
    9858:	0189      	lsls	r1, r1, #6
    985a:	f041 0101 	orr.w	r1, r1, #1
    985e:	e7ed      	b.n	983c <bt_id_init+0x30>
    9860:	20000000 	.word	0x20000000
    9864:	000226c0 	.word	0x000226c0
    9868:	000225d8 	.word	0x000225d8
    986c:	00025250 	.word	0x00025250
    9870:	0002526f 	.word	0x0002526f

00009874 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    9874:	6843      	ldr	r3, [r0, #4]
{
    9876:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9878:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    987a:	0558      	lsls	r0, r3, #21
    987c:	d502      	bpl.n	9884 <valid_adv_param+0x10>
		return false;
    987e:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    9880:	b003      	add	sp, #12
    9882:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    9884:	6922      	ldr	r2, [r4, #16]
    9886:	b10a      	cbz	r2, 988c <valid_adv_param+0x18>
    9888:	07d9      	lsls	r1, r3, #31
    988a:	d5f8      	bpl.n	987e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    988c:	4d1a      	ldr	r5, [pc, #104]	; (98f8 <valid_adv_param+0x84>)
    988e:	7820      	ldrb	r0, [r4, #0]
    9890:	79eb      	ldrb	r3, [r5, #7]
    9892:	4283      	cmp	r3, r0
    9894:	d9f3      	bls.n	987e <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    9896:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    989a:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    989c:	2207      	movs	r2, #7
    989e:	4669      	mov	r1, sp
    98a0:	4428      	add	r0, r5
    98a2:	9300      	str	r3, [sp, #0]
    98a4:	f8cd 3003 	str.w	r3, [sp, #3]
    98a8:	f015 fe05 	bl	1f4b6 <memcmp>
	if (param->id >= bt_dev.id_count ||
    98ac:	2800      	cmp	r0, #0
    98ae:	d0e6      	beq.n	987e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    98b0:	6860      	ldr	r0, [r4, #4]
    98b2:	07c2      	lsls	r2, r0, #31
    98b4:	d406      	bmi.n	98c4 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    98b6:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    98ba:	2b08      	cmp	r3, #8
    98bc:	d802      	bhi.n	98c4 <valid_adv_param+0x50>
    98be:	68a3      	ldr	r3, [r4, #8]
    98c0:	2b9f      	cmp	r3, #159	; 0x9f
    98c2:	d9dc      	bls.n	987e <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    98c4:	f010 0f30 	tst.w	r0, #48	; 0x30
    98c8:	d002      	beq.n	98d0 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    98ca:	6923      	ldr	r3, [r4, #16]
    98cc:	2b00      	cmp	r3, #0
    98ce:	d0d6      	beq.n	987e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    98d0:	06c3      	lsls	r3, r0, #27
    98d2:	d401      	bmi.n	98d8 <valid_adv_param+0x64>
    98d4:	6923      	ldr	r3, [r4, #16]
    98d6:	b943      	cbnz	r3, 98ea <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
    98d8:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    98dc:	429a      	cmp	r2, r3
    98de:	d8ce      	bhi.n	987e <valid_adv_param+0xa>
    98e0:	2a1f      	cmp	r2, #31
    98e2:	d9cc      	bls.n	987e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    98e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    98e8:	d8c9      	bhi.n	987e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    98ea:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    98ee:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    98f2:	bf18      	it	ne
    98f4:	2001      	movne	r0, #1
    98f6:	e7c3      	b.n	9880 <valid_adv_param+0xc>
    98f8:	20000000 	.word	0x20000000

000098fc <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
    98fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9900:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    9902:	2120      	movs	r1, #32
{
    9904:	4682      	mov	sl, r0
    9906:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    9908:	f7fe fd36 	bl	8378 <bt_hci_cmd_create>
	if (!buf) {
    990c:	4606      	mov	r6, r0
    990e:	2800      	cmp	r0, #0
    9910:	d05c      	beq.n	99cc <hci_set_ad+0xd0>
    9912:	2120      	movs	r1, #32
    9914:	3008      	adds	r0, #8
    9916:	f017 feb9 	bl	2168c <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
    991a:	2220      	movs	r2, #32
    991c:	2100      	movs	r1, #0
    991e:	4681      	mov	r9, r0
    9920:	f015 fe05 	bl	1f52e <memset>

	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    9924:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    9928:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    992c:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
    992e:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    9930:	f8d4 8000 	ldr.w	r8, [r4]
    9934:	2300      	movs	r3, #0
    9936:	6862      	ldr	r2, [r4, #4]
    9938:	4293      	cmp	r3, r2
    993a:	d30d      	bcc.n	9958 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    993c:	9b00      	ldr	r3, [sp, #0]
    993e:	3408      	adds	r4, #8
    9940:	429c      	cmp	r4, r3
    9942:	d1f5      	bne.n	9930 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    9944:	2200      	movs	r2, #0
    9946:	4631      	mov	r1, r6
    9948:	4650      	mov	r0, sl
	*data_len = set_data_len;
    994a:	f889 5000 	strb.w	r5, [r9]
}
    994e:	b003      	add	sp, #12
    9950:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    9954:	f7fe be72 	b.w	863c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    9958:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    995c:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    9960:	1ca8      	adds	r0, r5, #2
    9962:	1881      	adds	r1, r0, r2
    9964:	291f      	cmp	r1, #31
    9966:	d91a      	bls.n	999e <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    9968:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    996c:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    9970:	d101      	bne.n	9976 <hci_set_ad+0x7a>
    9972:	2a00      	cmp	r2, #0
    9974:	dc11      	bgt.n	999a <hci_set_ad+0x9e>
    9976:	4b17      	ldr	r3, [pc, #92]	; (99d4 <hci_set_ad+0xd8>)
    9978:	4917      	ldr	r1, [pc, #92]	; (99d8 <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
    997a:	4818      	ldr	r0, [pc, #96]	; (99dc <hci_set_ad+0xe0>)
    997c:	1ac9      	subs	r1, r1, r3
    997e:	08c9      	lsrs	r1, r1, #3
    9980:	0189      	lsls	r1, r1, #6
    9982:	f041 0101 	orr.w	r1, r1, #1
    9986:	f013 ffcd 	bl	1d924 <log_0>
		net_buf_unref(buf);
    998a:	4630      	mov	r0, r6
    998c:	f010 fb44 	bl	1a018 <net_buf_unref>
					return -EINVAL;
    9990:	f06f 0015 	mvn.w	r0, #21
}
    9994:	b003      	add	sp, #12
    9996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    999a:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    999e:	b2d7      	uxtb	r7, r2
    99a0:	1c79      	adds	r1, r7, #1
    99a2:	f80b 1005 	strb.w	r1, [fp, r5]
    99a6:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    99a8:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
    99aa:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
    99ae:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    99b2:	f8d8 1004 	ldr.w	r1, [r8, #4]
    99b6:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    99b8:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    99ba:	f015 fd8d 	bl	1f4d8 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    99be:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    99c0:	443d      	add	r5, r7
    99c2:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    99c4:	3301      	adds	r3, #1
    99c6:	f108 0808 	add.w	r8, r8, #8
    99ca:	e7b4      	b.n	9936 <hci_set_ad+0x3a>
		return -ENOBUFS;
    99cc:	f06f 0036 	mvn.w	r0, #54	; 0x36
    99d0:	e7e0      	b.n	9994 <hci_set_ad+0x98>
    99d2:	bf00      	nop
    99d4:	000225d8 	.word	0x000225d8
    99d8:	000225e0 	.word	0x000225e0
    99dc:	00025292 	.word	0x00025292

000099e0 <bt_le_ext_adv_foreach>:
{
    99e0:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
    99e2:	4801      	ldr	r0, [pc, #4]	; (99e8 <bt_le_ext_adv_foreach+0x8>)
    99e4:	4718      	bx	r3
    99e6:	bf00      	nop
    99e8:	20000018 	.word	0x20000018

000099ec <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    99ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    99ee:	b087      	sub	sp, #28
	struct bt_adv_id_check_data check_data = {
    99f0:	7803      	ldrb	r3, [r0, #0]
    99f2:	f88d 3004 	strb.w	r3, [sp, #4]
{
    99f6:	4605      	mov	r5, r0
	struct bt_adv_id_check_data check_data = {
    99f8:	2300      	movs	r3, #0
		.id = adv->id,
		.adv_enabled = false
	};
	struct bt_conn *conn;

	bt_le_ext_adv_foreach(adv_id_check_connectable_func, &check_data);
    99fa:	4824      	ldr	r0, [pc, #144]	; (9a8c <le_adv_start_add_conn+0xa0>)
	struct bt_adv_id_check_data check_data = {
    99fc:	f88d 3005 	strb.w	r3, [sp, #5]
{
    9a00:	460f      	mov	r7, r1
	bt_le_ext_adv_foreach(adv_id_check_connectable_func, &check_data);
    9a02:	a901      	add	r1, sp, #4
    9a04:	f7ff ffec 	bl	99e0 <bt_le_ext_adv_foreach>
	if (check_data.adv_enabled) {
    9a08:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9a0c:	bba3      	cbnz	r3, 9a78 <le_adv_start_add_conn+0x8c>
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    9a0e:	462e      	mov	r6, r5
    9a10:	4a1f      	ldr	r2, [pc, #124]	; (9a90 <le_adv_start_add_conn+0xa4>)
    9a12:	f816 1b09 	ldrb.w	r1, [r6], #9
    9a16:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
    9a1a:	4630      	mov	r0, r6
    9a1c:	2207      	movs	r2, #7
    9a1e:	a902      	add	r1, sp, #8

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    9a20:	9302      	str	r3, [sp, #8]
    9a22:	f8cd 300b 	str.w	r3, [sp, #11]
    9a26:	f015 fd46 	bl	1f4b6 <memcmp>
    9a2a:	782a      	ldrb	r2, [r5, #0]
    9a2c:	4604      	mov	r4, r0
    9a2e:	b9a8      	cbnz	r0, 9a5c <le_adv_start_add_conn+0x70>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    9a30:	4b18      	ldr	r3, [pc, #96]	; (9a94 <le_adv_start_add_conn+0xa8>)
    9a32:	6818      	ldr	r0, [r3, #0]
    9a34:	8899      	ldrh	r1, [r3, #4]
    9a36:	9004      	str	r0, [sp, #16]
    9a38:	799b      	ldrb	r3, [r3, #6]
    9a3a:	f8ad 1014 	strh.w	r1, [sp, #20]
    9a3e:	4610      	mov	r0, r2
    9a40:	a904      	add	r1, sp, #16
    9a42:	f88d 3016 	strb.w	r3, [sp, #22]
    9a46:	f000 fd8b 	bl	a560 <bt_conn_add_le>
		if (!conn) {
    9a4a:	4605      	mov	r5, r0
    9a4c:	b1d0      	cbz	r0, 9a84 <le_adv_start_add_conn+0x98>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    9a4e:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    9a50:	f000 fdb8 	bl	a5c4 <bt_conn_set_state>
	*out_conn = conn;
    9a54:	603d      	str	r5, [r7, #0]
	return 0;
}
    9a56:	4620      	mov	r0, r4
    9a58:	b007      	add	sp, #28
    9a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    9a5c:	4631      	mov	r1, r6
    9a5e:	4610      	mov	r0, r2
    9a60:	f000 fec2 	bl	a7e8 <bt_conn_exists_le>
    9a64:	4604      	mov	r4, r0
    9a66:	b950      	cbnz	r0, 9a7e <le_adv_start_add_conn+0x92>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    9a68:	7828      	ldrb	r0, [r5, #0]
    9a6a:	4631      	mov	r1, r6
    9a6c:	f000 fd78 	bl	a560 <bt_conn_add_le>
	if (!conn) {
    9a70:	4605      	mov	r5, r0
    9a72:	b138      	cbz	r0, 9a84 <le_adv_start_add_conn+0x98>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    9a74:	2105      	movs	r1, #5
    9a76:	e7eb      	b.n	9a50 <le_adv_start_add_conn+0x64>
		return -ENOTSUP;
    9a78:	f06f 0422 	mvn.w	r4, #34	; 0x22
    9a7c:	e7eb      	b.n	9a56 <le_adv_start_add_conn+0x6a>
		return -EINVAL;
    9a7e:	f06f 0415 	mvn.w	r4, #21
    9a82:	e7e8      	b.n	9a56 <le_adv_start_add_conn+0x6a>
		return -ENOMEM;
    9a84:	f06f 040b 	mvn.w	r4, #11
    9a88:	e7e5      	b.n	9a56 <le_adv_start_add_conn+0x6a>
    9a8a:	bf00      	nop
    9a8c:	0001fcd9 	.word	0x0001fcd9
    9a90:	20000000 	.word	0x20000000
    9a94:	00022816 	.word	0x00022816

00009a98 <bt_le_adv_lookup_legacy>:
}
    9a98:	4800      	ldr	r0, [pc, #0]	; (9a9c <bt_le_adv_lookup_legacy+0x4>)
    9a9a:	4770      	bx	lr
    9a9c:	20000018 	.word	0x20000018

00009aa0 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    9aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    9aa4:	690e      	ldr	r6, [r1, #16]
{
    9aa6:	b08f      	sub	sp, #60	; 0x3c
    9aa8:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    9aaa:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
    9aac:	ebb6 0b03 	subs.w	fp, r6, r3
{
    9ab0:	4605      	mov	r5, r0
    9ab2:	4889      	ldr	r0, [pc, #548]	; (9cd8 <bt_le_adv_start_legacy+0x238>)
	struct bt_conn *conn = NULL;
    9ab4:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable;
    9ab6:	bf18      	it	ne
    9ab8:	f04f 0b01 	movne.w	fp, #1
    9abc:	f016 f862 	bl	1fb84 <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9ac0:	0787      	lsls	r7, r0, #30
{
    9ac2:	460c      	mov	r4, r1
    9ac4:	4691      	mov	r9, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9ac6:	f140 80fc 	bpl.w	9cc2 <bt_le_adv_start_legacy+0x222>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    9aca:	4608      	mov	r0, r1
    9acc:	f7ff fed2 	bl	9874 <valid_adv_param>
    9ad0:	b928      	cbnz	r0, 9ade <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
    9ad2:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    9ad6:	4658      	mov	r0, fp
    9ad8:	b00f      	add	sp, #60	; 0x3c
    9ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    9ade:	4620      	mov	r0, r4
    9ae0:	f016 f82f 	bl	1fb42 <bt_id_adv_random_addr_check>
    9ae4:	4607      	mov	r7, r0
    9ae6:	2800      	cmp	r0, #0
    9ae8:	d0f3      	beq.n	9ad2 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    9aea:	f105 0810 	add.w	r8, r5, #16
    9aee:	4640      	mov	r0, r8
    9af0:	f016 f848 	bl	1fb84 <atomic_get>
    9af4:	f3c0 1180 	ubfx	r1, r0, #6, #1
    9af8:	0640      	lsls	r0, r0, #25
    9afa:	f100 80e5 	bmi.w	9cc8 <bt_le_adv_start_legacy+0x228>
	(void)memset(&set_param, 0, sizeof(set_param));
    9afe:	220f      	movs	r2, #15
    9b00:	a80a      	add	r0, sp, #40	; 0x28
    9b02:	9105      	str	r1, [sp, #20]
    9b04:	f015 fd13 	bl	1f52e <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    9b08:	68a3      	ldr	r3, [r4, #8]
    9b0a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
    9b0e:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    9b10:	68e3      	ldr	r3, [r4, #12]
    9b12:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
    9b16:	f016 f826 	bl	1fb66 <get_adv_channel_map>
	if (adv->id != param->id) {
    9b1a:	782a      	ldrb	r2, [r5, #0]
    9b1c:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
    9b1e:	9905      	ldr	r1, [sp, #20]
	set_param.channel_map  = get_adv_channel_map(param->options);
    9b20:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
    9b24:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    9b26:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
    9b2a:	d004      	beq.n	9b36 <bt_le_adv_start_legacy+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9b2c:	486a      	ldr	r0, [pc, #424]	; (9cd8 <bt_le_adv_start_legacy+0x238>)
    9b2e:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    9b32:	f016 f82d 	bl	1fb90 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
    9b36:	4a69      	ldr	r2, [pc, #420]	; (9cdc <bt_le_adv_start_legacy+0x23c>)
	adv->id = param->id;
    9b38:	7823      	ldrb	r3, [r4, #0]
    9b3a:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    9b3c:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    9b40:	6861      	ldr	r1, [r4, #4]
    9b42:	465a      	mov	r2, fp
    9b44:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    9b48:	4628      	mov	r0, r5
    9b4a:	f7ff fe0d 	bl	9768 <bt_id_set_adv_own_addr>
	if (err) {
    9b4e:	4683      	mov	fp, r0
    9b50:	2800      	cmp	r0, #0
    9b52:	d1c0      	bne.n	9ad6 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    9b54:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
    9b58:	2e00      	cmp	r6, #0
    9b5a:	d04c      	beq.n	9bf6 <bt_le_adv_start_legacy+0x156>
	memcpy(dst, src, sizeof(*dst));
    9b5c:	6921      	ldr	r1, [r4, #16]
    9b5e:	2207      	movs	r2, #7
    9b60:	f015 fcba 	bl	1f4d8 <memcpy>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    9b64:	6860      	ldr	r0, [r4, #4]
    9b66:	07c1      	lsls	r1, r0, #31
    9b68:	d54e      	bpl.n	9c08 <bt_le_adv_start_legacy+0x168>
		if (dir_adv) {
    9b6a:	2e00      	cmp	r6, #0
    9b6c:	d049      	beq.n	9c02 <bt_le_adv_start_legacy+0x162>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    9b6e:	f010 0f10 	tst.w	r0, #16
    9b72:	bf14      	ite	ne
    9b74:	2304      	movne	r3, #4
    9b76:	2301      	moveq	r3, #1
    9b78:	6921      	ldr	r1, [r4, #16]
    9b7a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    9b7e:	2207      	movs	r2, #7
    9b80:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    9b84:	f015 fca8 	bl	1f4d8 <memcpy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    9b88:	210f      	movs	r1, #15
    9b8a:	f242 0006 	movw	r0, #8198	; 0x2006
    9b8e:	f7fe fbf3 	bl	8378 <bt_hci_cmd_create>
	if (!buf) {
    9b92:	4683      	mov	fp, r0
    9b94:	2800      	cmp	r0, #0
    9b96:	f000 809a 	beq.w	9cce <bt_le_adv_start_legacy+0x22e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    9b9a:	220f      	movs	r2, #15
    9b9c:	a90a      	add	r1, sp, #40	; 0x28
    9b9e:	3008      	adds	r0, #8
    9ba0:	f017 fd7a 	bl	21698 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    9ba4:	2200      	movs	r2, #0
    9ba6:	4659      	mov	r1, fp
    9ba8:	f242 0006 	movw	r0, #8198	; 0x2006
    9bac:	f7fe fd46 	bl	863c <bt_hci_cmd_send_sync>
	if (err) {
    9bb0:	2800      	cmp	r0, #0
    9bb2:	f040 808f 	bne.w	9cd4 <bt_le_adv_start_legacy+0x234>
	if (!dir_adv) {
    9bb6:	b396      	cbz	r6, 9c1e <bt_le_adv_start_legacy+0x17e>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    9bb8:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9bba:	07da      	lsls	r2, r3, #31
    9bbc:	d440      	bmi.n	9c40 <bt_le_adv_start_legacy+0x1a0>
	return bt_le_adv_set_enable_legacy(adv, enable);
    9bbe:	2101      	movs	r1, #1
    9bc0:	4628      	mov	r0, r5
    9bc2:	f016 f89e 	bl	1fd02 <bt_le_adv_set_enable_legacy>
	if (err) {
    9bc6:	4683      	mov	fp, r0
    9bc8:	2800      	cmp	r0, #0
    9bca:	d073      	beq.n	9cb4 <bt_le_adv_start_legacy+0x214>
    9bcc:	4b44      	ldr	r3, [pc, #272]	; (9ce0 <bt_le_adv_start_legacy+0x240>)
    9bce:	4945      	ldr	r1, [pc, #276]	; (9ce4 <bt_le_adv_start_legacy+0x244>)
		BT_ERR("Failed to start advertiser");
    9bd0:	4845      	ldr	r0, [pc, #276]	; (9ce8 <bt_le_adv_start_legacy+0x248>)
    9bd2:	1ac9      	subs	r1, r1, r3
    9bd4:	08c9      	lsrs	r1, r1, #3
    9bd6:	0189      	lsls	r1, r1, #6
    9bd8:	f041 0101 	orr.w	r1, r1, #1
    9bdc:	f013 fea2 	bl	1d924 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    9be0:	9807      	ldr	r0, [sp, #28]
    9be2:	2800      	cmp	r0, #0
    9be4:	f43f af77 	beq.w	9ad6 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9be8:	2100      	movs	r1, #0
    9bea:	f000 fceb 	bl	a5c4 <bt_conn_set_state>
			bt_conn_unref(conn);
    9bee:	9807      	ldr	r0, [sp, #28]
    9bf0:	f016 f980 	bl	1fef4 <bt_conn_unref>
    9bf4:	e76f      	b.n	9ad6 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    9bf6:	9608      	str	r6, [sp, #32]
    9bf8:	2207      	movs	r2, #7
    9bfa:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
    9bfe:	a908      	add	r1, sp, #32
    9c00:	e7ae      	b.n	9b60 <bt_le_adv_start_legacy+0xc0>
			set_param.type = BT_HCI_ADV_IND;
    9c02:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
    9c06:	e7bf      	b.n	9b88 <bt_le_adv_start_legacy+0xe8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    9c08:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9c0a:	b933      	cbnz	r3, 9c1a <bt_le_adv_start_legacy+0x17a>
    9c0c:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    9c10:	f1c7 0303 	rsb	r3, r7, #3
    9c14:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    9c18:	e7b6      	b.n	9b88 <bt_le_adv_start_legacy+0xe8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    9c1a:	2701      	movs	r7, #1
    9c1c:	e7f8      	b.n	9c10 <bt_le_adv_start_legacy+0x170>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    9c1e:	6863      	ldr	r3, [r4, #4]
    9c20:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    9c24:	e9cd 7301 	strd	r7, r3, [sp, #4]
    9c28:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9c2a:	9300      	str	r3, [sp, #0]
    9c2c:	4652      	mov	r2, sl
    9c2e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9c30:	4649      	mov	r1, r9
    9c32:	4628      	mov	r0, r5
    9c34:	f015 ffd4 	bl	1fbe0 <le_adv_update.constprop.0>
		if (err) {
    9c38:	4683      	mov	fp, r0
    9c3a:	2800      	cmp	r0, #0
    9c3c:	d0bc      	beq.n	9bb8 <bt_le_adv_start_legacy+0x118>
    9c3e:	e74a      	b.n	9ad6 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
    9c40:	a907      	add	r1, sp, #28
    9c42:	4628      	mov	r0, r5
    9c44:	f7ff fed2 	bl	99ec <le_adv_start_add_conn>
		if (err) {
    9c48:	4683      	mov	fp, r0
    9c4a:	2800      	cmp	r0, #0
    9c4c:	d0b7      	beq.n	9bbe <bt_le_adv_start_legacy+0x11e>
			if (err == -ENOMEM && !dir_adv &&
    9c4e:	f110 0f0c 	cmn.w	r0, #12
    9c52:	f47f af40 	bne.w	9ad6 <bt_le_adv_start_legacy+0x36>
    9c56:	2e00      	cmp	r6, #0
    9c58:	f47f af3d 	bne.w	9ad6 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    9c5c:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    9c5e:	079b      	lsls	r3, r3, #30
    9c60:	f53f af39 	bmi.w	9ad6 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    9c64:	6860      	ldr	r0, [r4, #4]
    9c66:	f080 0002 	eor.w	r0, r0, #2
    9c6a:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    9c6e:	f00b 0201 	and.w	r2, fp, #1
    9c72:	210c      	movs	r1, #12
    9c74:	4640      	mov	r0, r8
    9c76:	f015 ff9a 	bl	1fbae <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    9c7a:	6862      	ldr	r2, [r4, #4]
    9c7c:	2107      	movs	r1, #7
    9c7e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    9c82:	4640      	mov	r0, r8
    9c84:	f015 ff93 	bl	1fbae <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    9c88:	6862      	ldr	r2, [r4, #4]
    9c8a:	2108      	movs	r1, #8
    9c8c:	f002 0201 	and.w	r2, r2, #1
    9c90:	4640      	mov	r0, r8
    9c92:	f015 ff8c 	bl	1fbae <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    9c96:	463a      	mov	r2, r7
    9c98:	2109      	movs	r1, #9
    9c9a:	4640      	mov	r0, r8
    9c9c:	f015 ff87 	bl	1fbae <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    9ca0:	6862      	ldr	r2, [r4, #4]
    9ca2:	210b      	movs	r1, #11
    9ca4:	f3c2 0280 	ubfx	r2, r2, #2, #1
    9ca8:	4640      	mov	r0, r8
    9caa:	f015 ff80 	bl	1fbae <atomic_set_bit_to>
	return 0;
    9cae:	f04f 0b00 	mov.w	fp, #0
    9cb2:	e710      	b.n	9ad6 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    9cb4:	9807      	ldr	r0, [sp, #28]
    9cb6:	b108      	cbz	r0, 9cbc <bt_le_adv_start_legacy+0x21c>
		bt_conn_unref(conn);
    9cb8:	f016 f91c 	bl	1fef4 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    9cbc:	2e00      	cmp	r6, #0
    9cbe:	d1d6      	bne.n	9c6e <bt_le_adv_start_legacy+0x1ce>
    9cc0:	e7d0      	b.n	9c64 <bt_le_adv_start_legacy+0x1c4>
		return -EAGAIN;
    9cc2:	f06f 0b0a 	mvn.w	fp, #10
    9cc6:	e706      	b.n	9ad6 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
    9cc8:	f06f 0b44 	mvn.w	fp, #68	; 0x44
    9ccc:	e703      	b.n	9ad6 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
    9cce:	f06f 0b36 	mvn.w	fp, #54	; 0x36
    9cd2:	e700      	b.n	9ad6 <bt_le_adv_start_legacy+0x36>
    9cd4:	4683      	mov	fp, r0
    9cd6:	e6fe      	b.n	9ad6 <bt_le_adv_start_legacy+0x36>
    9cd8:	20000098 	.word	0x20000098
    9cdc:	20000000 	.word	0x20000000
    9ce0:	000225d8 	.word	0x000225d8
    9ce4:	000225e0 	.word	0x000225e0
    9ce8:	000252ab 	.word	0x000252ab

00009cec <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    9cec:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    9cee:	9c04      	ldr	r4, [sp, #16]
    9cf0:	e9cd 3400 	strd	r3, r4, [sp]
    9cf4:	4613      	mov	r3, r2
    9cf6:	460a      	mov	r2, r1
    9cf8:	4601      	mov	r1, r0
    9cfa:	4802      	ldr	r0, [pc, #8]	; (9d04 <bt_le_adv_start+0x18>)
    9cfc:	f7ff fed0 	bl	9aa0 <bt_le_adv_start_legacy>
	if (err) {
		bt_le_adv_delete_legacy();
	}

	return err;
}
    9d00:	b002      	add	sp, #8
    9d02:	bd10      	pop	{r4, pc}
    9d04:	20000018 	.word	0x20000018

00009d08 <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    9d08:	b537      	push	{r0, r1, r2, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9d0a:	481e      	ldr	r0, [pc, #120]	; (9d84 <bt_le_adv_resume+0x7c>)
    9d0c:	4c1d      	ldr	r4, [pc, #116]	; (9d84 <bt_le_adv_resume+0x7c>)
    9d0e:	f015 ff39 	bl	1fb84 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    9d12:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    9d16:	d032      	beq.n	9d7e <bt_le_adv_resume+0x76>
    9d18:	4620      	mov	r0, r4
    9d1a:	f015 ff33 	bl	1fb84 <atomic_get>
    9d1e:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    9d20:	f3c0 1580 	ubfx	r5, r0, #6, #1
    9d24:	d42b      	bmi.n	9d7e <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9d26:	4620      	mov	r0, r4
    9d28:	f015 ff2c 	bl	1fb84 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    9d2c:	05c3      	lsls	r3, r0, #23
    9d2e:	d526      	bpl.n	9d7e <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    9d30:	a901      	add	r1, sp, #4
    9d32:	f1a4 0010 	sub.w	r0, r4, #16
    9d36:	f7ff fe59 	bl	99ec <le_adv_start_add_conn>
	if (err) {
    9d3a:	bb00      	cbnz	r0, 9d7e <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
    9d3c:	2101      	movs	r1, #1
    9d3e:	f1a4 0010 	sub.w	r0, r4, #16
    9d42:	f015 ffde 	bl	1fd02 <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
    9d46:	b150      	cbz	r0, 9d5e <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9d48:	4629      	mov	r1, r5
    9d4a:	9801      	ldr	r0, [sp, #4]
    9d4c:	f000 fc3a 	bl	a5c4 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9d50:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    9d54:	4620      	mov	r0, r4
    9d56:	f015 ff1b 	bl	1fb90 <atomic_and>
	return (old & mask) != 0;
    9d5a:	f3c0 3500 	ubfx	r5, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    9d5e:	9801      	ldr	r0, [sp, #4]
    9d60:	f016 f8c8 	bl	1fef4 <bt_conn_unref>
	if (persist_paused) {
    9d64:	b15d      	cbz	r5, 9d7e <bt_le_adv_resume+0x76>
    9d66:	f3bf 8f5b 	dmb	ish
    9d6a:	e854 3f00 	ldrex	r3, [r4]
    9d6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    9d72:	e844 3200 	strex	r2, r3, [r4]
    9d76:	2a00      	cmp	r2, #0
    9d78:	d1f7      	bne.n	9d6a <bt_le_adv_resume+0x62>
    9d7a:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    9d7e:	b003      	add	sp, #12
    9d80:	bd30      	pop	{r4, r5, pc}
    9d82:	bf00      	nop
    9d84:	20000028 	.word	0x20000028

00009d88 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
    9d88:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, 64) == 0;
    9d8a:	4904      	ldr	r1, [pc, #16]	; (9d9c <bt_pub_key_is_debug+0x14>)
    9d8c:	2240      	movs	r2, #64	; 0x40
    9d8e:	f015 fb92 	bl	1f4b6 <memcmp>
}
    9d92:	fab0 f080 	clz	r0, r0
    9d96:	0940      	lsrs	r0, r0, #5
    9d98:	bd08      	pop	{r3, pc}
    9d9a:	bf00      	nop
    9d9c:	0002535b 	.word	0x0002535b

00009da0 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    9da0:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    9da2:	4b44      	ldr	r3, [pc, #272]	; (9eb4 <bt_pub_key_gen+0x114>)
    9da4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
    9da8:	f003 0306 	and.w	r3, r3, #6
    9dac:	2b06      	cmp	r3, #6
    9dae:	d00d      	beq.n	9dcc <bt_pub_key_gen+0x2c>
    9db0:	4b41      	ldr	r3, [pc, #260]	; (9eb8 <bt_pub_key_gen+0x118>)
    9db2:	4942      	ldr	r1, [pc, #264]	; (9ebc <bt_pub_key_gen+0x11c>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    9db4:	4842      	ldr	r0, [pc, #264]	; (9ec0 <bt_pub_key_gen+0x120>)
    9db6:	1ac9      	subs	r1, r1, r3
    9db8:	08c9      	lsrs	r1, r1, #3
    9dba:	0189      	lsls	r1, r1, #6
    9dbc:	f041 0102 	orr.w	r1, r1, #2
    9dc0:	f013 fdb0 	bl	1d924 <log_0>
		return -ENOTSUP;
    9dc4:	f06f 0522 	mvn.w	r5, #34	; 0x22
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
    9dc8:	4628      	mov	r0, r5
    9dca:	bd70      	pop	{r4, r5, r6, pc}
	if (!new_cb) {
    9dcc:	2800      	cmp	r0, #0
    9dce:	d06d      	beq.n	9eac <bt_pub_key_gen+0x10c>
	return list->head;
    9dd0:	4e3c      	ldr	r6, [pc, #240]	; (9ec4 <bt_pub_key_gen+0x124>)
    9dd2:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    9dd4:	b10a      	cbz	r2, 9dda <bt_pub_key_gen+0x3a>
    9dd6:	1f13      	subs	r3, r2, #4
    9dd8:	b9bb      	cbnz	r3, 9e0a <bt_pub_key_gen+0x6a>
	parent->next = child;
    9dda:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
    9ddc:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
    9dde:	1d03      	adds	r3, r0, #4
	list->head = node;
    9de0:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    9de2:	b902      	cbnz	r2, 9de6 <bt_pub_key_gen+0x46>
	list->tail = node;
    9de4:	6073      	str	r3, [r6, #4]
    9de6:	4c38      	ldr	r4, [pc, #224]	; (9ec8 <bt_pub_key_gen+0x128>)
    9de8:	f3bf 8f5b 	dmb	ish
    9dec:	e854 2f00 	ldrex	r2, [r4]
    9df0:	f042 0310 	orr.w	r3, r2, #16
    9df4:	e844 3100 	strex	r1, r3, [r4]
    9df8:	2900      	cmp	r1, #0
    9dfa:	d1f7      	bne.n	9dec <bt_pub_key_gen+0x4c>
    9dfc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    9e00:	f012 0210 	ands.w	r2, r2, #16
    9e04:	d017      	beq.n	9e36 <bt_pub_key_gen+0x96>
		return 0;
    9e06:	2500      	movs	r5, #0
    9e08:	e7de      	b.n	9dc8 <bt_pub_key_gen+0x28>
		if (cb == new_cb) {
    9e0a:	4283      	cmp	r3, r0
    9e0c:	d10c      	bne.n	9e28 <bt_pub_key_gen+0x88>
    9e0e:	4b2a      	ldr	r3, [pc, #168]	; (9eb8 <bt_pub_key_gen+0x118>)
    9e10:	492a      	ldr	r1, [pc, #168]	; (9ebc <bt_pub_key_gen+0x11c>)
			BT_WARN("Callback already registered");
    9e12:	482e      	ldr	r0, [pc, #184]	; (9ecc <bt_pub_key_gen+0x12c>)
    9e14:	1ac9      	subs	r1, r1, r3
    9e16:	08c9      	lsrs	r1, r1, #3
    9e18:	0189      	lsls	r1, r1, #6
    9e1a:	f041 0102 	orr.w	r1, r1, #2
    9e1e:	f013 fd81 	bl	1d924 <log_0>
			return -EALREADY;
    9e22:	f06f 0544 	mvn.w	r5, #68	; 0x44
    9e26:	e7cf      	b.n	9dc8 <bt_pub_key_gen+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
    9e28:	1d19      	adds	r1, r3, #4
    9e2a:	d0d6      	beq.n	9dda <bt_pub_key_gen+0x3a>
	return node->next;
    9e2c:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    9e2e:	2b00      	cmp	r3, #0
    9e30:	d0d3      	beq.n	9dda <bt_pub_key_gen+0x3a>
    9e32:	3b04      	subs	r3, #4
    9e34:	e7d0      	b.n	9dd8 <bt_pub_key_gen+0x38>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9e36:	f3bf 8f5b 	dmb	ish
    9e3a:	e854 3f00 	ldrex	r3, [r4]
    9e3e:	f023 0308 	bic.w	r3, r3, #8
    9e42:	e844 3100 	strex	r1, r3, [r4]
    9e46:	2900      	cmp	r1, #0
    9e48:	d1f7      	bne.n	9e3a <bt_pub_key_gen+0x9a>
    9e4a:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    9e4e:	4611      	mov	r1, r2
    9e50:	f242 0025 	movw	r0, #8229	; 0x2025
    9e54:	f7fe fbf2 	bl	863c <bt_hci_cmd_send_sync>
	if (err) {
    9e58:	4605      	mov	r5, r0
    9e5a:	2800      	cmp	r0, #0
    9e5c:	d0d3      	beq.n	9e06 <bt_pub_key_gen+0x66>
    9e5e:	4b16      	ldr	r3, [pc, #88]	; (9eb8 <bt_pub_key_gen+0x118>)
    9e60:	4916      	ldr	r1, [pc, #88]	; (9ebc <bt_pub_key_gen+0x11c>)
		BT_ERR("Sending LE P256 Public Key command failed");
    9e62:	481b      	ldr	r0, [pc, #108]	; (9ed0 <bt_pub_key_gen+0x130>)
    9e64:	1ac9      	subs	r1, r1, r3
    9e66:	08c9      	lsrs	r1, r1, #3
    9e68:	0189      	lsls	r1, r1, #6
    9e6a:	f041 0101 	orr.w	r1, r1, #1
    9e6e:	f013 fd59 	bl	1d924 <log_0>
    9e72:	f3bf 8f5b 	dmb	ish
    9e76:	e854 3f00 	ldrex	r3, [r4]
    9e7a:	f023 0310 	bic.w	r3, r3, #16
    9e7e:	e844 3200 	strex	r2, r3, [r4]
    9e82:	2a00      	cmp	r2, #0
    9e84:	d1f7      	bne.n	9e76 <bt_pub_key_gen+0xd6>
    9e86:	f3bf 8f5b 	dmb	ish
	return list->head;
    9e8a:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    9e8c:	b91c      	cbnz	r4, 9e96 <bt_pub_key_gen+0xf6>
	list->head = NULL;
    9e8e:	2300      	movs	r3, #0
	list->tail = NULL;
    9e90:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
    9e94:	e798      	b.n	9dc8 <bt_pub_key_gen+0x28>
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    9e96:	3c04      	subs	r4, #4
    9e98:	2c00      	cmp	r4, #0
    9e9a:	d0f8      	beq.n	9e8e <bt_pub_key_gen+0xee>
			if (cb->func) {
    9e9c:	6823      	ldr	r3, [r4, #0]
    9e9e:	b10b      	cbz	r3, 9ea4 <bt_pub_key_gen+0x104>
				cb->func(NULL);
    9ea0:	2000      	movs	r0, #0
    9ea2:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    9ea4:	1d23      	adds	r3, r4, #4
    9ea6:	d0f2      	beq.n	9e8e <bt_pub_key_gen+0xee>
	return node->next;
    9ea8:	6864      	ldr	r4, [r4, #4]
    9eaa:	e7ef      	b.n	9e8c <bt_pub_key_gen+0xec>
		return -EINVAL;
    9eac:	f06f 0515 	mvn.w	r5, #21
    9eb0:	e78a      	b.n	9dc8 <bt_pub_key_gen+0x28>
    9eb2:	bf00      	nop
    9eb4:	20000000 	.word	0x20000000
    9eb8:	000225d8 	.word	0x000225d8
    9ebc:	000226a0 	.word	0x000226a0
    9ec0:	000252cd 	.word	0x000252cd
    9ec4:	20001940 	.word	0x20001940
    9ec8:	20000098 	.word	0x20000098
    9ecc:	000252ec 	.word	0x000252ec
    9ed0:	00025308 	.word	0x00025308

00009ed4 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9ed4:	4b05      	ldr	r3, [pc, #20]	; (9eec <bt_pub_key_get+0x18>)
    9ed6:	f3bf 8f5b 	dmb	ish
    9eda:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
    9edc:	4804      	ldr	r0, [pc, #16]	; (9ef0 <bt_pub_key_get+0x1c>)
    9ede:	f3bf 8f5b 	dmb	ish
		return pub_key;
    9ee2:	f013 0f08 	tst.w	r3, #8
}
    9ee6:	bf08      	it	eq
    9ee8:	2000      	moveq	r0, #0
    9eea:	4770      	bx	lr
    9eec:	20000098 	.word	0x20000098
    9ef0:	2000350c 	.word	0x2000350c

00009ef4 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    9ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
    9ef6:	4d25      	ldr	r5, [pc, #148]	; (9f8c <bt_dh_key_gen+0x98>)
    9ef8:	682b      	ldr	r3, [r5, #0]
    9efa:	428b      	cmp	r3, r1
{
    9efc:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
    9efe:	d03f      	beq.n	9f80 <bt_dh_key_gen+0x8c>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    9f00:	b11b      	cbz	r3, 9f0a <bt_dh_key_gen+0x16>
		return -EBUSY;
    9f02:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
    9f06:	4620      	mov	r0, r4
    9f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9f0a:	4b21      	ldr	r3, [pc, #132]	; (9f90 <bt_dh_key_gen+0x9c>)
    9f0c:	f3bf 8f5b 	dmb	ish
    9f10:	681a      	ldr	r2, [r3, #0]
    9f12:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    9f16:	f3c2 1700 	ubfx	r7, r2, #4, #1
    9f1a:	06d2      	lsls	r2, r2, #27
    9f1c:	d4f1      	bmi.n	9f02 <bt_dh_key_gen+0xe>
    9f1e:	f3bf 8f5b 	dmb	ish
    9f22:	681b      	ldr	r3, [r3, #0]
    9f24:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    9f28:	071b      	lsls	r3, r3, #28
    9f2a:	d52c      	bpl.n	9f86 <bt_dh_key_gen+0x92>
	dh_key_cb = cb;
    9f2c:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    9f2e:	f242 0026 	movw	r0, #8230	; 0x2026
    9f32:	2140      	movs	r1, #64	; 0x40
    9f34:	f7fe fa20 	bl	8378 <bt_hci_cmd_create>
	if (!buf) {
    9f38:	4604      	mov	r4, r0
    9f3a:	b1f0      	cbz	r0, 9f7a <bt_dh_key_gen+0x86>
	return net_buf_simple_add(&buf->b, len);
    9f3c:	2140      	movs	r1, #64	; 0x40
    9f3e:	3008      	adds	r0, #8
    9f40:	f017 fba4 	bl	2168c <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    9f44:	2240      	movs	r2, #64	; 0x40
    9f46:	4631      	mov	r1, r6
    9f48:	f015 fac6 	bl	1f4d8 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    9f4c:	4621      	mov	r1, r4
    9f4e:	463a      	mov	r2, r7
    9f50:	f242 0026 	movw	r0, #8230	; 0x2026
    9f54:	f7fe fb72 	bl	863c <bt_hci_cmd_send_sync>
	if (err) {
    9f58:	4604      	mov	r4, r0
    9f5a:	2800      	cmp	r0, #0
    9f5c:	d0d3      	beq.n	9f06 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
    9f5e:	2300      	movs	r3, #0
    9f60:	602b      	str	r3, [r5, #0]
    9f62:	4a0c      	ldr	r2, [pc, #48]	; (9f94 <bt_dh_key_gen+0xa0>)
    9f64:	4b0c      	ldr	r3, [pc, #48]	; (9f98 <bt_dh_key_gen+0xa4>)
		BT_WARN("Failed to generate DHKey (err %d)", err);
    9f66:	480d      	ldr	r0, [pc, #52]	; (9f9c <bt_dh_key_gen+0xa8>)
    9f68:	1ad2      	subs	r2, r2, r3
    9f6a:	08d2      	lsrs	r2, r2, #3
    9f6c:	0192      	lsls	r2, r2, #6
    9f6e:	f042 0202 	orr.w	r2, r2, #2
    9f72:	4621      	mov	r1, r4
    9f74:	f013 fce5 	bl	1d942 <log_1>
		return err;
    9f78:	e7c5      	b.n	9f06 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
    9f7a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    9f7e:	e7ee      	b.n	9f5e <bt_dh_key_gen+0x6a>
		return -EALREADY;
    9f80:	f06f 0444 	mvn.w	r4, #68	; 0x44
    9f84:	e7bf      	b.n	9f06 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
    9f86:	f06f 0430 	mvn.w	r4, #48	; 0x30
    9f8a:	e7bc      	b.n	9f06 <bt_dh_key_gen+0x12>
    9f8c:	2000193c 	.word	0x2000193c
    9f90:	20000098 	.word	0x20000098
    9f94:	000226a0 	.word	0x000226a0
    9f98:	000225d8 	.word	0x000225d8
    9f9c:	00025332 	.word	0x00025332

00009fa0 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
    9fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9fa2:	4c1d      	ldr	r4, [pc, #116]	; (a018 <bt_hci_evt_le_pkey_complete+0x78>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    9fa4:	6886      	ldr	r6, [r0, #8]
    9fa6:	f3bf 8f5b 	dmb	ish
    9faa:	e854 3f00 	ldrex	r3, [r4]
    9fae:	f023 0310 	bic.w	r3, r3, #16
    9fb2:	e844 3200 	strex	r2, r3, [r4]
    9fb6:	2a00      	cmp	r2, #0
    9fb8:	d1f7      	bne.n	9faa <bt_hci_evt_le_pkey_complete+0xa>
    9fba:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
    9fbe:	7833      	ldrb	r3, [r6, #0]
    9fc0:	b983      	cbnz	r3, 9fe4 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, 64);
    9fc2:	4816      	ldr	r0, [pc, #88]	; (a01c <bt_hci_evt_le_pkey_complete+0x7c>)
    9fc4:	2240      	movs	r2, #64	; 0x40
    9fc6:	1c71      	adds	r1, r6, #1
    9fc8:	f015 fa86 	bl	1f4d8 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9fcc:	f3bf 8f5b 	dmb	ish
    9fd0:	e854 3f00 	ldrex	r3, [r4]
    9fd4:	f043 0308 	orr.w	r3, r3, #8
    9fd8:	e844 3200 	strex	r2, r3, [r4]
    9fdc:	2a00      	cmp	r2, #0
    9fde:	d1f7      	bne.n	9fd0 <bt_hci_evt_le_pkey_complete+0x30>
    9fe0:	f3bf 8f5b 	dmb	ish
	return list->head;
    9fe4:	4d0e      	ldr	r5, [pc, #56]	; (a020 <bt_hci_evt_le_pkey_complete+0x80>)
    9fe6:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    9fe8:	b91c      	cbnz	r4, 9ff2 <bt_hci_evt_le_pkey_complete+0x52>
	list->head = NULL;
    9fea:	2300      	movs	r3, #0
	list->tail = NULL;
    9fec:	e9c5 3300 	strd	r3, r3, [r5]
			cb->func(evt->status ? NULL : pub_key);
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
    9ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			cb->func(evt->status ? NULL : pub_key);
    9ff2:	4f0a      	ldr	r7, [pc, #40]	; (a01c <bt_hci_evt_le_pkey_complete+0x7c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    9ff4:	3c04      	subs	r4, #4
    9ff6:	2c00      	cmp	r4, #0
    9ff8:	d0f7      	beq.n	9fea <bt_hci_evt_le_pkey_complete+0x4a>
		if (cb->func) {
    9ffa:	6823      	ldr	r3, [r4, #0]
    9ffc:	b12b      	cbz	r3, a00a <bt_hci_evt_le_pkey_complete+0x6a>
			cb->func(evt->status ? NULL : pub_key);
    9ffe:	7832      	ldrb	r2, [r6, #0]
    a000:	2a00      	cmp	r2, #0
    a002:	bf0c      	ite	eq
    a004:	4638      	moveq	r0, r7
    a006:	2000      	movne	r0, #0
    a008:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    a00a:	1d23      	adds	r3, r4, #4
    a00c:	d0ed      	beq.n	9fea <bt_hci_evt_le_pkey_complete+0x4a>
	return node->next;
    a00e:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    a010:	2c00      	cmp	r4, #0
    a012:	d0ea      	beq.n	9fea <bt_hci_evt_le_pkey_complete+0x4a>
    a014:	3c04      	subs	r4, #4
    a016:	e7ee      	b.n	9ff6 <bt_hci_evt_le_pkey_complete+0x56>
    a018:	20000098 	.word	0x20000098
    a01c:	2000350c 	.word	0x2000350c
    a020:	20001940 	.word	0x20001940

0000a024 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
    a024:	4905      	ldr	r1, [pc, #20]	; (a03c <bt_hci_evt_le_dhkey_complete+0x18>)
    a026:	680b      	ldr	r3, [r1, #0]
    a028:	b133      	cbz	r3, a038 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    a02a:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
    a02c:	2000      	movs	r0, #0
    a02e:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    a030:	7811      	ldrb	r1, [r2, #0]
    a032:	b901      	cbnz	r1, a036 <bt_hci_evt_le_dhkey_complete+0x12>
    a034:	1c50      	adds	r0, r2, #1
    a036:	4718      	bx	r3
	}
}
    a038:	4770      	bx	lr
    a03a:	bf00      	nop
    a03c:	2000193c 	.word	0x2000193c

0000a040 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    a040:	2300      	movs	r3, #0
	tx->user_data = NULL;
    a042:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    a046:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    a048:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    a04a:	4801      	ldr	r0, [pc, #4]	; (a050 <tx_free+0x10>)
    a04c:	f017 bd8d 	b.w	21b6a <k_queue_append>
    a050:	200008e8 	.word	0x200008e8

0000a054 <notify_connected>:
	for (cb = callback_list; cb; cb = cb->_next) {
    a054:	4b09      	ldr	r3, [pc, #36]	; (a07c <notify_connected+0x28>)
{
    a056:	b513      	push	{r0, r1, r4, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    a058:	681c      	ldr	r4, [r3, #0]
			cb->connected(conn, conn->err);
    a05a:	7b01      	ldrb	r1, [r0, #12]
	for (cb = callback_list; cb; cb = cb->_next) {
    a05c:	b92c      	cbnz	r4, a06a <notify_connected+0x16>
	if (!conn->err) {
    a05e:	b959      	cbnz	r1, a078 <notify_connected+0x24>
}
    a060:	b002      	add	sp, #8
    a062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_gatt_connected(conn);
    a066:	f002 bc33 	b.w	c8d0 <bt_gatt_connected>
		if (cb->connected) {
    a06a:	6823      	ldr	r3, [r4, #0]
    a06c:	b113      	cbz	r3, a074 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    a06e:	9001      	str	r0, [sp, #4]
    a070:	4798      	blx	r3
    a072:	9801      	ldr	r0, [sp, #4]
	for (cb = callback_list; cb; cb = cb->_next) {
    a074:	69a4      	ldr	r4, [r4, #24]
    a076:	e7f0      	b.n	a05a <notify_connected+0x6>
}
    a078:	b002      	add	sp, #8
    a07a:	bd10      	pop	{r4, pc}
    a07c:	2000194c 	.word	0x2000194c

0000a080 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    a080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    a084:	694d      	ldr	r5, [r1, #20]
{
    a086:	4604      	mov	r4, r0
    a088:	460e      	mov	r6, r1
    a08a:	4691      	mov	r9, r2
    a08c:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    a08e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a092:	4844      	ldr	r0, [pc, #272]	; (a1a4 <send_frag+0x124>)
    a094:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a098:	f012 f8a8 	bl	1c1ec <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    a09c:	7b63      	ldrb	r3, [r4, #13]
    a09e:	2b07      	cmp	r3, #7
    a0a0:	d151      	bne.n	a146 <send_frag+0xc6>
	__asm__ volatile(
    a0a2:	f04f 0320 	mov.w	r3, #32
    a0a6:	f3ef 8211 	mrs	r2, BASEPRI
    a0aa:	f383 8811 	msr	BASEPRI, r3
    a0ae:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    a0b2:	69a3      	ldr	r3, [r4, #24]
    a0b4:	2d00      	cmp	r5, #0
    a0b6:	d058      	beq.n	a16a <send_frag+0xea>
	parent->next = child;
    a0b8:	2100      	movs	r1, #0
    a0ba:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    a0bc:	2b00      	cmp	r3, #0
    a0be:	d151      	bne.n	a164 <send_frag+0xe4>
	list->head = node;
    a0c0:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    a0c4:	f382 8811 	msr	BASEPRI, r2
    a0c8:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    a0cc:	2104      	movs	r1, #4
    a0ce:	f106 0008 	add.w	r0, r6, #8
    a0d2:	f017 faf2 	bl	216ba <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    a0d6:	8823      	ldrh	r3, [r4, #0]
    a0d8:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
    a0dc:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    a0e0:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    a0e2:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    a0e6:	3b04      	subs	r3, #4
    a0e8:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    a0ea:	2302      	movs	r3, #2
    a0ec:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    a0ee:	4630      	mov	r0, r6
    a0f0:	f015 fc48 	bl	1f984 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
    a0f4:	4601      	mov	r1, r0
    a0f6:	2800      	cmp	r0, #0
    a0f8:	d051      	beq.n	a19e <send_frag+0x11e>
    a0fa:	4b2b      	ldr	r3, [pc, #172]	; (a1a8 <send_frag+0x128>)
    a0fc:	4a2b      	ldr	r2, [pc, #172]	; (a1ac <send_frag+0x12c>)
		BT_ERR("Unable to send to driver (err %d)", err);
    a0fe:	482c      	ldr	r0, [pc, #176]	; (a1b0 <send_frag+0x130>)
    a100:	1ad2      	subs	r2, r2, r3
    a102:	08d2      	lsrs	r2, r2, #3
    a104:	0192      	lsls	r2, r2, #6
    a106:	f042 0201 	orr.w	r2, r2, #1
    a10a:	f013 fc1a 	bl	1d942 <log_1>
	__asm__ volatile(
    a10e:	f04f 0320 	mov.w	r3, #32
    a112:	f3ef 8011 	mrs	r0, BASEPRI
    a116:	f383 8811 	msr	BASEPRI, r3
    a11a:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    a11e:	2d00      	cmp	r5, #0
    a120:	d037      	beq.n	a192 <send_frag+0x112>
	return list->head;
    a122:	6963      	ldr	r3, [r4, #20]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a124:	2200      	movs	r2, #0
    a126:	b153      	cbz	r3, a13e <send_frag+0xbe>
    a128:	429d      	cmp	r5, r3
    a12a:	d12f      	bne.n	a18c <send_frag+0x10c>
	return node->next;
    a12c:	682b      	ldr	r3, [r5, #0]
	return list->tail;
    a12e:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
    a130:	bb3a      	cbnz	r2, a182 <send_frag+0x102>
    a132:	428d      	cmp	r5, r1
	list->head = node;
    a134:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    a136:	d100      	bne.n	a13a <send_frag+0xba>
	list->tail = node;
    a138:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    a13a:	2300      	movs	r3, #0
    a13c:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    a13e:	f380 8811 	msr	BASEPRI, r0
    a142:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    a146:	4817      	ldr	r0, [pc, #92]	; (a1a4 <send_frag+0x124>)
    a148:	f012 f82a 	bl	1c1a0 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    a14c:	b115      	cbz	r5, a154 <send_frag+0xd4>
		tx_free(tx);
    a14e:	4628      	mov	r0, r5
    a150:	f7ff ff76 	bl	a040 <tx_free>
	}

	if (always_consume) {
    a154:	b11f      	cbz	r7, a15e <send_frag+0xde>
		net_buf_unref(buf);
    a156:	4630      	mov	r0, r6
    a158:	f00f ff5e 	bl	1a018 <net_buf_unref>
	}
	return false;
    a15c:	2700      	movs	r7, #0
}
    a15e:	4638      	mov	r0, r7
    a160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a164:	601d      	str	r5, [r3, #0]
	list->tail = node;
    a166:	61a5      	str	r5, [r4, #24]
}
    a168:	e7ac      	b.n	a0c4 <send_frag+0x44>
		if (tail_tx) {
    a16a:	b133      	cbz	r3, a17a <send_frag+0xfa>
			pending_no_cb = &tail_tx->pending_no_cb;
    a16c:	f103 080c 	add.w	r8, r3, #12
    a170:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    a172:	3301      	adds	r3, #1
    a174:	f8c8 3000 	str.w	r3, [r8]
    a178:	e7a4      	b.n	a0c4 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    a17a:	69e3      	ldr	r3, [r4, #28]
    a17c:	f104 081c 	add.w	r8, r4, #28
    a180:	e7f7      	b.n	a172 <send_frag+0xf2>
Z_GENLIST_REMOVE(slist, snode)
    a182:	428d      	cmp	r5, r1
	parent->next = child;
    a184:	6013      	str	r3, [r2, #0]
	list->tail = node;
    a186:	bf08      	it	eq
    a188:	61a2      	streq	r2, [r4, #24]
}
    a18a:	e7d6      	b.n	a13a <send_frag+0xba>
	return node->next;
    a18c:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a18e:	681b      	ldr	r3, [r3, #0]
    a190:	e7c9      	b.n	a126 <send_frag+0xa6>
			(*pending_no_cb)--;
    a192:	f8d8 3000 	ldr.w	r3, [r8]
    a196:	3b01      	subs	r3, #1
    a198:	f8c8 3000 	str.w	r3, [r8]
    a19c:	e7cf      	b.n	a13e <send_frag+0xbe>
	return true;
    a19e:	2701      	movs	r7, #1
    a1a0:	e7dd      	b.n	a15e <send_frag+0xde>
    a1a2:	bf00      	nop
    a1a4:	200000d0 	.word	0x200000d0
    a1a8:	000225d8 	.word	0x000225d8
    a1ac:	000225f8 	.word	0x000225f8
    a1b0:	00024be3 	.word	0x00024be3

0000a1b4 <bt_conn_get_pkts>:
}
    a1b4:	4800      	ldr	r0, [pc, #0]	; (a1b8 <bt_conn_get_pkts+0x4>)
    a1b6:	4770      	bx	lr
    a1b8:	200000d0 	.word	0x200000d0

0000a1bc <notify_le_param_updated>:
{
    a1bc:	b570      	push	{r4, r5, r6, lr}
    a1be:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a1c0:	f3bf 8f5b 	dmb	ish
    a1c4:	6863      	ldr	r3, [r4, #4]
    a1c6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    a1ca:	059b      	lsls	r3, r3, #22
    a1cc:	f100 0004 	add.w	r0, r0, #4
    a1d0:	d511      	bpl.n	a1f6 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
    a1d2:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    a1d6:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
    a1da:	429a      	cmp	r2, r3
    a1dc:	d80b      	bhi.n	a1f6 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
    a1de:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
    a1e2:	429a      	cmp	r2, r3
    a1e4:	d307      	bcc.n	a1f6 <notify_le_param_updated+0x3a>
	    conn->le.latency == conn->le.pending_latency &&
    a1e6:	e9d4 2329 	ldrd	r2, r3, [r4, #164]	; 0xa4
    a1ea:	429a      	cmp	r2, r3
    a1ec:	d103      	bne.n	a1f6 <notify_le_param_updated+0x3a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a1ee:	f46f 7100 	mvn.w	r1, #512	; 0x200
    a1f2:	f015 fdad 	bl	1fd50 <atomic_and>
	for (cb = callback_list; cb; cb = cb->_next) {
    a1f6:	4b08      	ldr	r3, [pc, #32]	; (a218 <notify_le_param_updated+0x5c>)
    a1f8:	681d      	ldr	r5, [r3, #0]
    a1fa:	b905      	cbnz	r5, a1fe <notify_le_param_updated+0x42>
}
    a1fc:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    a1fe:	68ee      	ldr	r6, [r5, #12]
    a200:	b13e      	cbz	r6, a212 <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
    a202:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    a206:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    a20a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    a20e:	4620      	mov	r0, r4
    a210:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    a212:	69ad      	ldr	r5, [r5, #24]
    a214:	e7f1      	b.n	a1fa <notify_le_param_updated+0x3e>
    a216:	bf00      	nop
    a218:	2000194c 	.word	0x2000194c

0000a21c <le_param_req>:
{
    a21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a21e:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    a220:	4608      	mov	r0, r1
{
    a222:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    a224:	f015 fb8d 	bl	1f942 <bt_le_conn_params_valid>
    a228:	4604      	mov	r4, r0
    a22a:	b910      	cbnz	r0, a232 <le_param_req+0x16>
		return false;
    a22c:	2400      	movs	r4, #0
}
    a22e:	4620      	mov	r0, r4
    a230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    a232:	4b09      	ldr	r3, [pc, #36]	; (a258 <le_param_req+0x3c>)
    a234:	681e      	ldr	r6, [r3, #0]
    a236:	2e00      	cmp	r6, #0
    a238:	d0f9      	beq.n	a22e <le_param_req+0x12>
		if (!cb->le_param_req) {
    a23a:	68b3      	ldr	r3, [r6, #8]
    a23c:	b90b      	cbnz	r3, a242 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    a23e:	69b6      	ldr	r6, [r6, #24]
    a240:	e7f9      	b.n	a236 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    a242:	4629      	mov	r1, r5
    a244:	4638      	mov	r0, r7
    a246:	4798      	blx	r3
    a248:	2800      	cmp	r0, #0
    a24a:	d0ef      	beq.n	a22c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    a24c:	4628      	mov	r0, r5
    a24e:	f015 fb78 	bl	1f942 <bt_le_conn_params_valid>
    a252:	2800      	cmp	r0, #0
    a254:	d1f3      	bne.n	a23e <le_param_req+0x22>
    a256:	e7e9      	b.n	a22c <le_param_req+0x10>
    a258:	2000194c 	.word	0x2000194c

0000a25c <bt_conn_identity_resolved>:
{
    a25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    a25e:	78c3      	ldrb	r3, [r0, #3]
{
    a260:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    a262:	b93b      	cbnz	r3, a274 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    a264:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
    a268:	4b08      	ldr	r3, [pc, #32]	; (a28c <bt_conn_identity_resolved+0x30>)
    a26a:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    a26c:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    a270:	b91d      	cbnz	r5, a27a <bt_conn_identity_resolved+0x1e>
}
    a272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    a274:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    a278:	e7f6      	b.n	a268 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    a27a:	692b      	ldr	r3, [r5, #16]
    a27c:	b11b      	cbz	r3, a286 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    a27e:	463a      	mov	r2, r7
    a280:	4631      	mov	r1, r6
    a282:	4620      	mov	r0, r4
    a284:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a286:	69ad      	ldr	r5, [r5, #24]
    a288:	e7f2      	b.n	a270 <bt_conn_identity_resolved+0x14>
    a28a:	bf00      	nop
    a28c:	2000194c 	.word	0x2000194c

0000a290 <bt_conn_security_changed>:
{
    a290:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
    a292:	7a43      	ldrb	r3, [r0, #9]
    a294:	7283      	strb	r3, [r0, #10]
{
    a296:	4604      	mov	r4, r0
    a298:	4616      	mov	r6, r2
	bt_l2cap_security_changed(conn, hci_err);
    a29a:	f015 fefe 	bl	2009a <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
    a29e:	4b06      	ldr	r3, [pc, #24]	; (a2b8 <bt_conn_security_changed+0x28>)
    a2a0:	681d      	ldr	r5, [r3, #0]
    a2a2:	b905      	cbnz	r5, a2a6 <bt_conn_security_changed+0x16>
}
    a2a4:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
    a2a6:	696b      	ldr	r3, [r5, #20]
    a2a8:	b11b      	cbz	r3, a2b2 <bt_conn_security_changed+0x22>
			cb->security_changed(conn, conn->sec_level, err);
    a2aa:	7a61      	ldrb	r1, [r4, #9]
    a2ac:	4632      	mov	r2, r6
    a2ae:	4620      	mov	r0, r4
    a2b0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a2b2:	69ad      	ldr	r5, [r5, #24]
    a2b4:	e7f5      	b.n	a2a2 <bt_conn_security_changed+0x12>
    a2b6:	bf00      	nop
    a2b8:	2000194c 	.word	0x2000194c

0000a2bc <bt_conn_cb_register>:
	cb->_next = callback_list;
    a2bc:	4b02      	ldr	r3, [pc, #8]	; (a2c8 <bt_conn_cb_register+0xc>)
    a2be:	681a      	ldr	r2, [r3, #0]
    a2c0:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    a2c2:	6018      	str	r0, [r3, #0]
}
    a2c4:	4770      	bx	lr
    a2c6:	bf00      	nop
    a2c8:	2000194c 	.word	0x2000194c

0000a2cc <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    a2cc:	b570      	push	{r4, r5, r6, lr}
    a2ce:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    a2d0:	f100 0638 	add.w	r6, r0, #56	; 0x38
    a2d4:	2200      	movs	r2, #0
    a2d6:	2300      	movs	r3, #0
    a2d8:	4630      	mov	r0, r6
    a2da:	f017 f985 	bl	215e8 <net_buf_get>
    a2de:	4605      	mov	r5, r0
    a2e0:	b958      	cbnz	r0, a2fa <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
    a2e2:	4620      	mov	r0, r4
    a2e4:	f015 fdc2 	bl	1fe6c <bt_conn_reset_rx_state>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    a2e8:	f104 0158 	add.w	r1, r4, #88	; 0x58
    a2ec:	4807      	ldr	r0, [pc, #28]	; (a30c <conn_cleanup+0x40>)

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
    a2ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a2f2:	2200      	movs	r2, #0
    a2f4:	2300      	movs	r3, #0
    a2f6:	f012 b929 	b.w	1c54c <k_work_reschedule_for_queue>
		if (tx_data(buf)->tx) {
    a2fa:	6968      	ldr	r0, [r5, #20]
    a2fc:	b108      	cbz	r0, a302 <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
    a2fe:	f7ff fe9f 	bl	a040 <tx_free>
		net_buf_unref(buf);
    a302:	4628      	mov	r0, r5
    a304:	f00f fe88 	bl	1a018 <net_buf_unref>
    a308:	e7e4      	b.n	a2d4 <conn_cleanup+0x8>
    a30a:	bf00      	nop
    a30c:	200015c0 	.word	0x200015c0

0000a310 <bt_conn_recv>:
{
    a310:	b570      	push	{r4, r5, r6, lr}
    a312:	4616      	mov	r6, r2
    a314:	4604      	mov	r4, r0
    a316:	460d      	mov	r5, r1
	tx_notify(conn);
    a318:	f015 fd29 	bl	1fd6e <tx_notify>
	switch (flags) {
    a31c:	2e01      	cmp	r6, #1
    a31e:	d02b      	beq.n	a378 <bt_conn_recv+0x68>
    a320:	2e02      	cmp	r6, #2
    a322:	d158      	bne.n	a3d6 <bt_conn_recv+0xc6>
		if (conn->rx) {
    a324:	6923      	ldr	r3, [r4, #16]
    a326:	b163      	cbz	r3, a342 <bt_conn_recv+0x32>
    a328:	4b35      	ldr	r3, [pc, #212]	; (a400 <bt_conn_recv+0xf0>)
    a32a:	4936      	ldr	r1, [pc, #216]	; (a404 <bt_conn_recv+0xf4>)
			BT_ERR("Unexpected first L2CAP frame");
    a32c:	4836      	ldr	r0, [pc, #216]	; (a408 <bt_conn_recv+0xf8>)
    a32e:	1ac9      	subs	r1, r1, r3
    a330:	08c9      	lsrs	r1, r1, #3
    a332:	0189      	lsls	r1, r1, #6
    a334:	f041 0101 	orr.w	r1, r1, #1
    a338:	f013 faf4 	bl	1d924 <log_0>
			bt_conn_reset_rx_state(conn);
    a33c:	4620      	mov	r0, r4
    a33e:	f015 fd95 	bl	1fe6c <bt_conn_reset_rx_state>
		conn->rx = buf;
    a342:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    a344:	6923      	ldr	r3, [r4, #16]
    a346:	8999      	ldrh	r1, [r3, #12]
    a348:	2901      	cmp	r1, #1
    a34a:	d958      	bls.n	a3fe <bt_conn_recv+0xee>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    a34c:	689a      	ldr	r2, [r3, #8]
    a34e:	8812      	ldrh	r2, [r2, #0]
    a350:	3204      	adds	r2, #4
    a352:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
    a354:	428a      	cmp	r2, r1
    a356:	d852      	bhi.n	a3fe <bt_conn_recv+0xee>
	if (conn->rx->len > acl_total_len) {
    a358:	d249      	bcs.n	a3ee <bt_conn_recv+0xde>
    a35a:	4829      	ldr	r0, [pc, #164]	; (a400 <bt_conn_recv+0xf0>)
    a35c:	4b29      	ldr	r3, [pc, #164]	; (a404 <bt_conn_recv+0xf4>)
    a35e:	1a1b      	subs	r3, r3, r0
    a360:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
    a362:	019b      	lsls	r3, r3, #6
    a364:	4829      	ldr	r0, [pc, #164]	; (a40c <bt_conn_recv+0xfc>)
    a366:	f043 0301 	orr.w	r3, r3, #1
    a36a:	f013 fb01 	bl	1d970 <log_2>
		bt_conn_reset_rx_state(conn);
    a36e:	4620      	mov	r0, r4
}
    a370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
    a374:	f015 bd7a 	b.w	1fe6c <bt_conn_reset_rx_state>
		if (!conn->rx) {
    a378:	6920      	ldr	r0, [r4, #16]
    a37a:	b968      	cbnz	r0, a398 <bt_conn_recv+0x88>
    a37c:	4921      	ldr	r1, [pc, #132]	; (a404 <bt_conn_recv+0xf4>)
    a37e:	4b20      	ldr	r3, [pc, #128]	; (a400 <bt_conn_recv+0xf0>)
			BT_ERR("Unexpected L2CAP continuation");
    a380:	4823      	ldr	r0, [pc, #140]	; (a410 <bt_conn_recv+0x100>)
    a382:	1ac9      	subs	r1, r1, r3
    a384:	08c9      	lsrs	r1, r1, #3
    a386:	0189      	lsls	r1, r1, #6
    a388:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
    a38c:	f013 faca 	bl	1d924 <log_0>
			bt_conn_reset_rx_state(conn);
    a390:	4620      	mov	r0, r4
    a392:	f015 fd6b 	bl	1fe6c <bt_conn_reset_rx_state>
    a396:	e001      	b.n	a39c <bt_conn_recv+0x8c>
		if (!buf->len) {
    a398:	89ae      	ldrh	r6, [r5, #12]
    a39a:	b926      	cbnz	r6, a3a6 <bt_conn_recv+0x96>
			net_buf_unref(buf);
    a39c:	4628      	mov	r0, r5
}
    a39e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    a3a2:	f00f be39 	b.w	1a018 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    a3a6:	3008      	adds	r0, #8
    a3a8:	f017 f9ab 	bl	21702 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    a3ac:	4286      	cmp	r6, r0
    a3ae:	d908      	bls.n	a3c2 <bt_conn_recv+0xb2>
    a3b0:	4914      	ldr	r1, [pc, #80]	; (a404 <bt_conn_recv+0xf4>)
    a3b2:	4b13      	ldr	r3, [pc, #76]	; (a400 <bt_conn_recv+0xf0>)
			BT_ERR("Not enough buffer space for L2CAP data");
    a3b4:	4817      	ldr	r0, [pc, #92]	; (a414 <bt_conn_recv+0x104>)
    a3b6:	1ac9      	subs	r1, r1, r3
    a3b8:	08c9      	lsrs	r1, r1, #3
    a3ba:	0189      	lsls	r1, r1, #6
    a3bc:	f041 0101 	orr.w	r1, r1, #1
    a3c0:	e7e4      	b.n	a38c <bt_conn_recv+0x7c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    a3c2:	6920      	ldr	r0, [r4, #16]
    a3c4:	89aa      	ldrh	r2, [r5, #12]
    a3c6:	68a9      	ldr	r1, [r5, #8]
    a3c8:	3008      	adds	r0, #8
    a3ca:	f017 f965 	bl	21698 <net_buf_simple_add_mem>
		net_buf_unref(buf);
    a3ce:	4628      	mov	r0, r5
    a3d0:	f00f fe22 	bl	1a018 <net_buf_unref>
		break;
    a3d4:	e7b6      	b.n	a344 <bt_conn_recv+0x34>
    a3d6:	4a0a      	ldr	r2, [pc, #40]	; (a400 <bt_conn_recv+0xf0>)
    a3d8:	4b0a      	ldr	r3, [pc, #40]	; (a404 <bt_conn_recv+0xf4>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    a3da:	480f      	ldr	r0, [pc, #60]	; (a418 <bt_conn_recv+0x108>)
    a3dc:	1a9b      	subs	r3, r3, r2
    a3de:	08db      	lsrs	r3, r3, #3
    a3e0:	019b      	lsls	r3, r3, #6
    a3e2:	f043 0201 	orr.w	r2, r3, #1
    a3e6:	4631      	mov	r1, r6
    a3e8:	f013 faab 	bl	1d942 <log_1>
		bt_conn_reset_rx_state(conn);
    a3ec:	e7d0      	b.n	a390 <bt_conn_recv+0x80>
	conn->rx = NULL;
    a3ee:	2200      	movs	r2, #0
    a3f0:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
    a3f2:	4620      	mov	r0, r4
    a3f4:	4619      	mov	r1, r3
}
    a3f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    a3fa:	f000 bce5 	b.w	adc8 <bt_l2cap_recv>
}
    a3fe:	bd70      	pop	{r4, r5, r6, pc}
    a400:	000225d8 	.word	0x000225d8
    a404:	000225f8 	.word	0x000225f8
    a408:	0002539b 	.word	0x0002539b
    a40c:	0002541b 	.word	0x0002541b
    a410:	000253b8 	.word	0x000253b8
    a414:	000253d6 	.word	0x000253d6
    a418:	000253fd 	.word	0x000253fd

0000a41c <bt_conn_send_cb>:
{
    a41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a420:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    a422:	7b43      	ldrb	r3, [r0, #13]
    a424:	2b07      	cmp	r3, #7
{
    a426:	4606      	mov	r6, r0
    a428:	460d      	mov	r5, r1
    a42a:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    a42c:	d00f      	beq.n	a44e <bt_conn_send_cb+0x32>
    a42e:	4b2a      	ldr	r3, [pc, #168]	; (a4d8 <bt_conn_send_cb+0xbc>)
    a430:	492a      	ldr	r1, [pc, #168]	; (a4dc <bt_conn_send_cb+0xc0>)
		BT_ERR("not connected!");
    a432:	482b      	ldr	r0, [pc, #172]	; (a4e0 <bt_conn_send_cb+0xc4>)
    a434:	1ac9      	subs	r1, r1, r3
    a436:	08c9      	lsrs	r1, r1, #3
    a438:	0189      	lsls	r1, r1, #6
    a43a:	f041 0101 	orr.w	r1, r1, #1
    a43e:	f013 fa71 	bl	1d924 <log_0>
		net_buf_unref(buf);
    a442:	4628      	mov	r0, r5
    a444:	f00f fde8 	bl	1a018 <net_buf_unref>
			return -ENOTCONN;
    a448:	f06f 0038 	mvn.w	r0, #56	; 0x38
    a44c:	e020      	b.n	a490 <bt_conn_send_cb+0x74>
	if (cb) {
    a44e:	2a00      	cmp	r2, #0
    a450:	d040      	beq.n	a4d4 <bt_conn_send_cb+0xb8>
	return z_impl_k_current_get();
    a452:	f011 fe2b 	bl	1c0ac <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    a456:	4b23      	ldr	r3, [pc, #140]	; (a4e4 <bt_conn_send_cb+0xc8>)
    a458:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    a45a:	4823      	ldr	r0, [pc, #140]	; (a4e8 <bt_conn_send_cb+0xcc>)
    a45c:	bf07      	ittee	eq
    a45e:	2200      	moveq	r2, #0
    a460:	2300      	moveq	r3, #0
    a462:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    a466:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    a46a:	f011 faf9 	bl	1ba60 <z_impl_k_queue_get>
    a46e:	4604      	mov	r4, r0
		if (!tx) {
    a470:	b980      	cbnz	r0, a494 <bt_conn_send_cb+0x78>
    a472:	4b19      	ldr	r3, [pc, #100]	; (a4d8 <bt_conn_send_cb+0xbc>)
    a474:	4919      	ldr	r1, [pc, #100]	; (a4dc <bt_conn_send_cb+0xc0>)
			BT_ERR("Unable to allocate TX context");
    a476:	481d      	ldr	r0, [pc, #116]	; (a4ec <bt_conn_send_cb+0xd0>)
    a478:	1ac9      	subs	r1, r1, r3
    a47a:	08c9      	lsrs	r1, r1, #3
    a47c:	0189      	lsls	r1, r1, #6
    a47e:	f041 0101 	orr.w	r1, r1, #1
    a482:	f013 fa4f 	bl	1d924 <log_0>
			net_buf_unref(buf);
    a486:	4628      	mov	r0, r5
    a488:	f00f fdc6 	bl	1a018 <net_buf_unref>
			return -ENOBUFS;
    a48c:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    a490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    a494:	7b73      	ldrb	r3, [r6, #13]
    a496:	2b07      	cmp	r3, #7
    a498:	d010      	beq.n	a4bc <bt_conn_send_cb+0xa0>
    a49a:	4b0f      	ldr	r3, [pc, #60]	; (a4d8 <bt_conn_send_cb+0xbc>)
    a49c:	490f      	ldr	r1, [pc, #60]	; (a4dc <bt_conn_send_cb+0xc0>)
			BT_WARN("Disconnected while allocating context");
    a49e:	4814      	ldr	r0, [pc, #80]	; (a4f0 <bt_conn_send_cb+0xd4>)
    a4a0:	1ac9      	subs	r1, r1, r3
    a4a2:	08c9      	lsrs	r1, r1, #3
    a4a4:	0189      	lsls	r1, r1, #6
    a4a6:	f041 0102 	orr.w	r1, r1, #2
    a4aa:	f013 fa3b 	bl	1d924 <log_0>
			net_buf_unref(buf);
    a4ae:	4628      	mov	r0, r5
    a4b0:	f00f fdb2 	bl	1a018 <net_buf_unref>
			tx_free(tx);
    a4b4:	4620      	mov	r0, r4
    a4b6:	f7ff fdc3 	bl	a040 <tx_free>
    a4ba:	e7c5      	b.n	a448 <bt_conn_send_cb+0x2c>
		tx->pending_no_cb = 0U;
    a4bc:	2300      	movs	r3, #0
		tx->user_data = user_data;
    a4be:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    a4c2:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    a4c4:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    a4c6:	f106 0038 	add.w	r0, r6, #56	; 0x38
    a4ca:	4629      	mov	r1, r5
    a4cc:	f017 f8aa 	bl	21624 <net_buf_put>
	return 0;
    a4d0:	2000      	movs	r0, #0
    a4d2:	e7dd      	b.n	a490 <bt_conn_send_cb+0x74>
		tx_data(buf)->tx = NULL;
    a4d4:	614a      	str	r2, [r1, #20]
    a4d6:	e7f6      	b.n	a4c6 <bt_conn_send_cb+0xaa>
    a4d8:	000225d8 	.word	0x000225d8
    a4dc:	000225f8 	.word	0x000225f8
    a4e0:	00025436 	.word	0x00025436
    a4e4:	200015c0 	.word	0x200015c0
    a4e8:	200008e8 	.word	0x200008e8
    a4ec:	00025445 	.word	0x00025445
    a4f0:	00025463 	.word	0x00025463

0000a4f4 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    a4f4:	b570      	push	{r4, r5, r6, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
    a4f6:	4b17      	ldr	r3, [pc, #92]	; (a554 <bt_conn_prepare_events+0x60>)
    a4f8:	4c17      	ldr	r4, [pc, #92]	; (a558 <bt_conn_prepare_events+0x64>)
    a4fa:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    a4fc:	2101      	movs	r1, #1
{
    a4fe:	4605      	mov	r5, r0
	conn_change.signaled = 0U;
    a500:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    a502:	f017 ff39 	bl	22378 <k_poll_event_init>
    a506:	f3bf 8f5b 	dmb	ish
    a50a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    a50e:	f3bf 8f5b 	dmb	ish
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
    a512:	f105 0614 	add.w	r6, r5, #20
	if (!atomic_get(&conn->ref)) {
    a516:	b90b      	cbnz	r3, a51c <bt_conn_prepare_events+0x28>
		conn_cleanup(conn);
    a518:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
    a51a:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    a51c:	7b63      	ldrb	r3, [r4, #13]
    a51e:	b953      	cbnz	r3, a536 <bt_conn_prepare_events+0x42>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a520:	f06f 0140 	mvn.w	r1, #64	; 0x40
    a524:	1d20      	adds	r0, r4, #4
    a526:	f015 fc13 	bl	1fd50 <atomic_and>
    a52a:	0643      	lsls	r3, r0, #25
    a52c:	d503      	bpl.n	a536 <bt_conn_prepare_events+0x42>
		conn_cleanup(conn);
    a52e:	4620      	mov	r0, r4
    a530:	f7ff fecc 	bl	a2cc <conn_cleanup>
    a534:	e7f0      	b.n	a518 <bt_conn_prepare_events+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
    a536:	7b63      	ldrb	r3, [r4, #13]
    a538:	2b07      	cmp	r3, #7
    a53a:	d1ed      	bne.n	a518 <bt_conn_prepare_events+0x24>
	k_poll_event_init(&events[0],
    a53c:	4b07      	ldr	r3, [pc, #28]	; (a55c <bt_conn_prepare_events+0x68>)
    a53e:	4630      	mov	r0, r6
    a540:	2200      	movs	r2, #0
    a542:	2104      	movs	r1, #4
    a544:	f017 ff18 	bl	22378 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    a548:	2301      	movs	r3, #1
    a54a:	f885 3020 	strb.w	r3, [r5, #32]
			ev_count++;
    a54e:	2002      	movs	r0, #2
	return ev_count;
    a550:	e7e3      	b.n	a51a <bt_conn_prepare_events+0x26>
    a552:	bf00      	nop
    a554:	20000230 	.word	0x20000230
    a558:	20000c98 	.word	0x20000c98
    a55c:	20000cd0 	.word	0x20000cd0

0000a560 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    a560:	b570      	push	{r4, r5, r6, lr}
    a562:	4606      	mov	r6, r0
    a564:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    a566:	480f      	ldr	r0, [pc, #60]	; (a5a4 <bt_conn_add_le+0x44>)
    a568:	2101      	movs	r1, #1
    a56a:	f015 fc28 	bl	1fdbe <bt_conn_new>
	if (!conn) {
    a56e:	4604      	mov	r4, r0
    a570:	b1b0      	cbz	r0, a5a0 <bt_conn_add_le+0x40>
	k_work_init_delayable(&work->work, handler);
    a572:	490d      	ldr	r1, [pc, #52]	; (a5a8 <bt_conn_add_le+0x48>)
    a574:	3058      	adds	r0, #88	; 0x58
    a576:	f017 fd11 	bl	21f9c <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    a57a:	490c      	ldr	r1, [pc, #48]	; (a5ac <bt_conn_add_le+0x4c>)
    a57c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a580:	f017 fce6 	bl	21f50 <k_work_init>

	if (!conn) {
		return NULL;
	}

	conn->id = id;
    a584:	7226      	strb	r6, [r4, #8]
    a586:	2207      	movs	r2, #7
    a588:	4629      	mov	r1, r5
    a58a:	f104 0088 	add.w	r0, r4, #136	; 0x88
    a58e:	f014 ffa3 	bl	1f4d8 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
    a592:	2301      	movs	r3, #1
    a594:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    a596:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    a598:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    a59a:	4b05      	ldr	r3, [pc, #20]	; (a5b0 <bt_conn_add_le+0x50>)
    a59c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    a5a0:	4620      	mov	r0, r4
    a5a2:	bd70      	pop	{r4, r5, r6, pc}
    a5a4:	20000c98 	.word	0x20000c98
    a5a8:	0000a8dd 	.word	0x0000a8dd
    a5ac:	0001fdb9 	.word	0x0001fdb9
    a5b0:	00280018 	.word	0x00280018

0000a5b4 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
    a5b4:	4602      	mov	r2, r0
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    a5b6:	2101      	movs	r1, #1
    a5b8:	4801      	ldr	r0, [pc, #4]	; (a5c0 <bt_conn_lookup_handle+0xc>)
    a5ba:	f015 bcb2 	b.w	1ff22 <conn_lookup_handle>
    a5be:	bf00      	nop
    a5c0:	20000c98 	.word	0x20000c98

0000a5c4 <bt_conn_set_state>:
{
    a5c4:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    a5c6:	7b46      	ldrb	r6, [r0, #13]
    a5c8:	428e      	cmp	r6, r1
{
    a5ca:	4604      	mov	r4, r0
    a5cc:	460d      	mov	r5, r1
	if (conn->state == state) {
    a5ce:	d112      	bne.n	a5f6 <bt_conn_set_state+0x32>
    a5d0:	4b6b      	ldr	r3, [pc, #428]	; (a780 <bt_conn_set_state+0x1bc>)
    a5d2:	4a6c      	ldr	r2, [pc, #432]	; (a784 <bt_conn_set_state+0x1c0>)
		BT_WARN("no transition %s", state2str(state));
    a5d4:	486c      	ldr	r0, [pc, #432]	; (a788 <bt_conn_set_state+0x1c4>)
    a5d6:	2e08      	cmp	r6, #8
    a5d8:	eba2 0203 	sub.w	r2, r2, r3
    a5dc:	bf96      	itet	ls
    a5de:	4b6b      	ldrls	r3, [pc, #428]	; (a78c <bt_conn_set_state+0x1c8>)
    a5e0:	496b      	ldrhi	r1, [pc, #428]	; (a790 <bt_conn_set_state+0x1cc>)
    a5e2:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
    a5e6:	08d2      	lsrs	r2, r2, #3
    a5e8:	0192      	lsls	r2, r2, #6
    a5ea:	f042 0202 	orr.w	r2, r2, #2
}
    a5ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    a5f2:	f013 b9a6 	b.w	1d942 <log_1>
	conn->state = state;
    a5f6:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    a5f8:	b90e      	cbnz	r6, a5fe <bt_conn_set_state+0x3a>
		bt_conn_ref(conn);
    a5fa:	f015 fc60 	bl	1febe <bt_conn_ref>
	switch (conn->state) {
    a5fe:	7b63      	ldrb	r3, [r4, #13]
    a600:	2b08      	cmp	r3, #8
    a602:	f200 80b2 	bhi.w	a76a <bt_conn_set_state+0x1a6>
    a606:	e8df f003 	tbb	[pc, r3]
    a60a:	053f      	.short	0x053f
    a60c:	babababa 	.word	0xbabababa
    a610:	1cba      	.short	0x1cba
    a612:	ba          	.byte	0xba
    a613:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
    a614:	4d5f      	ldr	r5, [pc, #380]	; (a794 <bt_conn_set_state+0x1d0>)
		tx->pending_no_cb = 0U;
    a616:	2600      	movs	r6, #0
	__asm__ volatile(
    a618:	f04f 0320 	mov.w	r3, #32
    a61c:	f3ef 8211 	mrs	r2, BASEPRI
    a620:	f383 8811 	msr	BASEPRI, r3
    a624:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    a628:	69e3      	ldr	r3, [r4, #28]
    a62a:	2b00      	cmp	r3, #0
    a62c:	d07e      	beq.n	a72c <bt_conn_set_state+0x168>
			conn->pending_no_cb--;
    a62e:	3b01      	subs	r3, #1
    a630:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    a632:	f382 8811 	msr	BASEPRI, r2
    a636:	f3bf 8f6f 	isb	sy
    a63a:	4628      	mov	r0, r5
    a63c:	f011 fdb0 	bl	1c1a0 <z_impl_k_sem_give>
}
    a640:	e7ea      	b.n	a618 <bt_conn_set_state+0x54>
		if (conn->type == BT_CONN_TYPE_SCO) {
    a642:	78a3      	ldrb	r3, [r4, #2]
    a644:	2b04      	cmp	r3, #4
    a646:	f000 809a 	beq.w	a77e <bt_conn_set_state+0x1ba>
	z_impl_k_queue_init(queue);
    a64a:	f104 0038 	add.w	r0, r4, #56	; 0x38
    a64e:	f017 fa80 	bl	21b52 <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    a652:	2100      	movs	r1, #0
    a654:	4850      	ldr	r0, [pc, #320]	; (a798 <bt_conn_set_state+0x1d4>)
    a656:	f012 f9e5 	bl	1ca24 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    a65a:	2300      	movs	r3, #0
	list->tail = NULL;
    a65c:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		bt_l2cap_connected(conn);
    a660:	4620      	mov	r0, r4
    a662:	f000 fae3 	bl	ac2c <bt_l2cap_connected>
		notify_connected(conn);
    a666:	4620      	mov	r0, r4
    a668:	f7ff fcf4 	bl	a054 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    a66c:	78e3      	ldrb	r3, [r4, #3]
    a66e:	2b01      	cmp	r3, #1
    a670:	f040 8085 	bne.w	a77e <bt_conn_set_state+0x1ba>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    a674:	f104 0158 	add.w	r1, r4, #88	; 0x58
    a678:	4848      	ldr	r0, [pc, #288]	; (a79c <bt_conn_set_state+0x1d8>)
}
    a67a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a67e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    a682:	2300      	movs	r3, #0
    a684:	f011 bf62 	b.w	1c54c <k_work_reschedule_for_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
    a688:	78a3      	ldrb	r3, [r4, #2]
    a68a:	2b04      	cmp	r3, #4
    a68c:	d104      	bne.n	a698 <bt_conn_set_state+0xd4>
			bt_conn_unref(conn);
    a68e:	4620      	mov	r0, r4
}
    a690:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    a694:	f015 bc2e 	b.w	1fef4 <bt_conn_unref>
		switch (old_state) {
    a698:	2e08      	cmp	r6, #8
    a69a:	d870      	bhi.n	a77e <bt_conn_set_state+0x1ba>
    a69c:	a301      	add	r3, pc, #4	; (adr r3, a6a4 <bt_conn_set_state+0xe0>)
    a69e:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    a6a2:	bf00      	nop
    a6a4:	0000a719 	.word	0x0000a719
    a6a8:	0000a6c9 	.word	0x0000a6c9
    a6ac:	0000a70b 	.word	0x0000a70b
    a6b0:	0000a68f 	.word	0x0000a68f
    a6b4:	0000a68f 	.word	0x0000a68f
    a6b8:	0000a70b 	.word	0x0000a70b
    a6bc:	0000a70b 	.word	0x0000a70b
    a6c0:	0000a719 	.word	0x0000a719
    a6c4:	0000a719 	.word	0x0000a719
			tx_notify(conn);
    a6c8:	4620      	mov	r0, r4
    a6ca:	f015 fb50 	bl	1fd6e <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    a6ce:	78a3      	ldrb	r3, [r4, #2]
    a6d0:	2b01      	cmp	r3, #1
    a6d2:	d107      	bne.n	a6e4 <bt_conn_set_state+0x120>
	bool pending = k_work_delayable_is_pending(&work->work);
    a6d4:	f104 0558 	add.w	r5, r4, #88	; 0x58
	return k_work_delayable_busy_get(dwork) != 0;
    a6d8:	4628      	mov	r0, r5
    a6da:	f017 fc6b 	bl	21fb4 <k_work_delayable_busy_get>
	int rc = k_work_cancel_delayable(&work->work);
    a6de:	4628      	mov	r0, r5
    a6e0:	f017 fc7c 	bl	21fdc <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a6e4:	f3bf 8f5b 	dmb	ish
    a6e8:	3404      	adds	r4, #4
    a6ea:	e854 3f00 	ldrex	r3, [r4]
    a6ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a6f2:	e844 3200 	strex	r2, r3, [r4]
    a6f6:	2a00      	cmp	r2, #0
    a6f8:	d1f7      	bne.n	a6ea <bt_conn_set_state+0x126>
    a6fa:	f3bf 8f5b 	dmb	ish
    a6fe:	4826      	ldr	r0, [pc, #152]	; (a798 <bt_conn_set_state+0x1d4>)
}
    a700:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a704:	2100      	movs	r1, #0
    a706:	f012 b98d 	b.w	1ca24 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    a70a:	7b23      	ldrb	r3, [r4, #12]
    a70c:	2b00      	cmp	r3, #0
    a70e:	d0be      	beq.n	a68e <bt_conn_set_state+0xca>
				notify_connected(conn);
    a710:	4620      	mov	r0, r4
    a712:	f7ff fc9f 	bl	a054 <notify_connected>
    a716:	e7ba      	b.n	a68e <bt_conn_set_state+0xca>
    a718:	4a1a      	ldr	r2, [pc, #104]	; (a784 <bt_conn_set_state+0x1c0>)
    a71a:	4b19      	ldr	r3, [pc, #100]	; (a780 <bt_conn_set_state+0x1bc>)
			BT_WARN("Invalid (%u) old state", state);
    a71c:	4820      	ldr	r0, [pc, #128]	; (a7a0 <bt_conn_set_state+0x1dc>)
    a71e:	1ad2      	subs	r2, r2, r3
    a720:	08d2      	lsrs	r2, r2, #3
    a722:	0192      	lsls	r2, r2, #6
    a724:	f042 0202 	orr.w	r2, r2, #2
    a728:	4629      	mov	r1, r5
    a72a:	e760      	b.n	a5ee <bt_conn_set_state+0x2a>
	return list->head;
    a72c:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    a72e:	b128      	cbz	r0, a73c <bt_conn_set_state+0x178>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a730:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    a732:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    a734:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a736:	4288      	cmp	r0, r1
	list->tail = node;
    a738:	bf08      	it	eq
    a73a:	61a3      	streq	r3, [r4, #24]
    a73c:	f382 8811 	msr	BASEPRI, r2
    a740:	f3bf 8f6f 	isb	sy
		if (!node) {
    a744:	b1d8      	cbz	r0, a77e <bt_conn_set_state+0x1ba>
	__asm__ volatile(
    a746:	f04f 0220 	mov.w	r2, #32
    a74a:	f3ef 8311 	mrs	r3, BASEPRI
    a74e:	f382 8811 	msr	BASEPRI, r2
    a752:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    a756:	68c2      	ldr	r2, [r0, #12]
    a758:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    a75a:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    a75c:	f383 8811 	msr	BASEPRI, r3
    a760:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    a764:	f7ff fc6c 	bl	a040 <tx_free>
    a768:	e767      	b.n	a63a <bt_conn_set_state+0x76>
    a76a:	4a06      	ldr	r2, [pc, #24]	; (a784 <bt_conn_set_state+0x1c0>)
    a76c:	4b04      	ldr	r3, [pc, #16]	; (a780 <bt_conn_set_state+0x1bc>)
		BT_WARN("no valid (%u) state was set", state);
    a76e:	480d      	ldr	r0, [pc, #52]	; (a7a4 <bt_conn_set_state+0x1e0>)
    a770:	1ad2      	subs	r2, r2, r3
    a772:	08d2      	lsrs	r2, r2, #3
    a774:	0192      	lsls	r2, r2, #6
    a776:	f042 0202 	orr.w	r2, r2, #2
    a77a:	4629      	mov	r1, r5
    a77c:	e737      	b.n	a5ee <bt_conn_set_state+0x2a>
}
    a77e:	bd70      	pop	{r4, r5, r6, pc}
    a780:	000225d8 	.word	0x000225d8
    a784:	000225f8 	.word	0x000225f8
    a788:	00025493 	.word	0x00025493
    a78c:	00022dd0 	.word	0x00022dd0
    a790:	00025489 	.word	0x00025489
    a794:	200000d0 	.word	0x200000d0
    a798:	20000230 	.word	0x20000230
    a79c:	200015c0 	.word	0x200015c0
    a7a0:	000254a4 	.word	0x000254a4
    a7a4:	000254bb 	.word	0x000254bb

0000a7a8 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    a7a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a7aa:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    a7ac:	480d      	ldr	r0, [pc, #52]	; (a7e4 <bt_conn_lookup_addr_le+0x3c>)
{
    a7ae:	9101      	str	r1, [sp, #4]
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    a7b0:	f015 fb85 	bl	1febe <bt_conn_ref>

		if (!conn) {
    a7b4:	4604      	mov	r4, r0
    a7b6:	b130      	cbz	r0, a7c6 <bt_conn_lookup_addr_le+0x1e>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    a7b8:	7883      	ldrb	r3, [r0, #2]
    a7ba:	9a01      	ldr	r2, [sp, #4]
    a7bc:	2b01      	cmp	r3, #1
    a7be:	d005      	beq.n	a7cc <bt_conn_lookup_addr_le+0x24>
			bt_conn_unref(conn);
    a7c0:	f015 fb98 	bl	1fef4 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    a7c4:	2400      	movs	r4, #0
}
    a7c6:	4620      	mov	r0, r4
    a7c8:	b003      	add	sp, #12
    a7ca:	bd30      	pop	{r4, r5, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    a7cc:	4629      	mov	r1, r5
    a7ce:	f015 fb56 	bl	1fe7e <bt_conn_is_peer_addr_le>
    a7d2:	4605      	mov	r5, r0
    a7d4:	2800      	cmp	r0, #0
    a7d6:	d1f6      	bne.n	a7c6 <bt_conn_lookup_addr_le+0x1e>
			bt_conn_unref(conn);
    a7d8:	4620      	mov	r0, r4
    a7da:	f015 fb8b 	bl	1fef4 <bt_conn_unref>
	return NULL;
    a7de:	462c      	mov	r4, r5
			continue;
    a7e0:	e7f1      	b.n	a7c6 <bt_conn_lookup_addr_le+0x1e>
    a7e2:	bf00      	nop
    a7e4:	20000c98 	.word	0x20000c98

0000a7e8 <bt_conn_exists_le>:
{
    a7e8:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    a7ea:	f7ff ffdd 	bl	a7a8 <bt_conn_lookup_addr_le>
	if (conn) {
    a7ee:	4604      	mov	r4, r0
    a7f0:	b1a0      	cbz	r0, a81c <bt_conn_exists_le+0x34>
    a7f2:	4b0b      	ldr	r3, [pc, #44]	; (a820 <bt_conn_exists_le+0x38>)
    a7f4:	4a0b      	ldr	r2, [pc, #44]	; (a824 <bt_conn_exists_le+0x3c>)
    a7f6:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
    a7f8:	7b43      	ldrb	r3, [r0, #13]
    a7fa:	480b      	ldr	r0, [pc, #44]	; (a828 <bt_conn_exists_le+0x40>)
    a7fc:	2b08      	cmp	r3, #8
    a7fe:	bf96      	itet	ls
    a800:	490a      	ldrls	r1, [pc, #40]	; (a82c <bt_conn_exists_le+0x44>)
    a802:	490b      	ldrhi	r1, [pc, #44]	; (a830 <bt_conn_exists_le+0x48>)
    a804:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
    a808:	08d2      	lsrs	r2, r2, #3
    a80a:	0192      	lsls	r2, r2, #6
    a80c:	f042 0202 	orr.w	r2, r2, #2
    a810:	f013 f897 	bl	1d942 <log_1>
		bt_conn_unref(conn);
    a814:	4620      	mov	r0, r4
    a816:	f015 fb6d 	bl	1fef4 <bt_conn_unref>
		return true;
    a81a:	2001      	movs	r0, #1
}
    a81c:	bd10      	pop	{r4, pc}
    a81e:	bf00      	nop
    a820:	000225d8 	.word	0x000225d8
    a824:	000225f8 	.word	0x000225f8
    a828:	000254d7 	.word	0x000254d7
    a82c:	00022dd0 	.word	0x00022dd0
    a830:	00025489 	.word	0x00025489

0000a834 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    a834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a836:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    a838:	480f      	ldr	r0, [pc, #60]	; (a878 <bt_conn_lookup_state_le+0x44>)
{
    a83a:	460e      	mov	r6, r1
    a83c:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    a83e:	f015 fb3e 	bl	1febe <bt_conn_ref>

		if (!conn) {
    a842:	4604      	mov	r4, r0
    a844:	b1b0      	cbz	r0, a874 <bt_conn_lookup_state_le+0x40>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    a846:	7883      	ldrb	r3, [r0, #2]
    a848:	2b01      	cmp	r3, #1
    a84a:	d003      	beq.n	a854 <bt_conn_lookup_state_le+0x20>
			bt_conn_ref(conn);
    a84c:	f015 fb37 	bl	1febe <bt_conn_ref>
		}

		return conn;
	}

	return NULL;
    a850:	2400      	movs	r4, #0
			continue;
    a852:	e00f      	b.n	a874 <bt_conn_lookup_state_le+0x40>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    a854:	b146      	cbz	r6, a868 <bt_conn_lookup_state_le+0x34>
    a856:	4632      	mov	r2, r6
    a858:	4629      	mov	r1, r5
    a85a:	f015 fb10 	bl	1fe7e <bt_conn_is_peer_addr_le>
    a85e:	b918      	cbnz	r0, a868 <bt_conn_lookup_state_le+0x34>
			bt_conn_unref(conn);
    a860:	4620      	mov	r0, r4
    a862:	f015 fb47 	bl	1fef4 <bt_conn_unref>
    a866:	e7f3      	b.n	a850 <bt_conn_lookup_state_le+0x1c>
		if (!(conn->state == state && conn->id == id)) {
    a868:	7b63      	ldrb	r3, [r4, #13]
    a86a:	42bb      	cmp	r3, r7
    a86c:	d1f8      	bne.n	a860 <bt_conn_lookup_state_le+0x2c>
    a86e:	7a23      	ldrb	r3, [r4, #8]
    a870:	42ab      	cmp	r3, r5
    a872:	d1f5      	bne.n	a860 <bt_conn_lookup_state_le+0x2c>
}
    a874:	4620      	mov	r0, r4
    a876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a878:	20000c98 	.word	0x20000c98

0000a87c <send_conn_le_param_update>:
{
    a87c:	b538      	push	{r3, r4, r5, lr}
    a87e:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    a880:	4608      	mov	r0, r1
{
    a882:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    a884:	f015 f85d 	bl	1f942 <bt_le_conn_params_valid>
    a888:	b318      	cbz	r0, a8d2 <send_conn_le_param_update+0x56>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    a88a:	4b13      	ldr	r3, [pc, #76]	; (a8d8 <send_conn_le_param_update+0x5c>)
    a88c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    a890:	0799      	lsls	r1, r3, #30
    a892:	d407      	bmi.n	a8a4 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    a894:	78e3      	ldrb	r3, [r4, #3]
    a896:	b183      	cbz	r3, a8ba <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
    a898:	4629      	mov	r1, r5
    a89a:	4620      	mov	r0, r4
}
    a89c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    a8a0:	f000 baca 	b.w	ae38 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    a8a4:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    a8a8:	079a      	lsls	r2, r3, #30
    a8aa:	d5f3      	bpl.n	a894 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a8ac:	f3bf 8f5b 	dmb	ish
    a8b0:	6863      	ldr	r3, [r4, #4]
    a8b2:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    a8b6:	055b      	lsls	r3, r3, #21
    a8b8:	d4ec      	bmi.n	a894 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    a8ba:	4629      	mov	r1, r5
    a8bc:	4620      	mov	r0, r4
    a8be:	f015 fb76 	bl	1ffae <bt_conn_le_conn_update>
		if (rc == 0) {
    a8c2:	b928      	cbnz	r0, a8d0 <send_conn_le_param_update+0x54>
			conn->le.pending_latency = param->latency;
    a8c4:	88ab      	ldrh	r3, [r5, #4]
    a8c6:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    a8ca:	88eb      	ldrh	r3, [r5, #6]
    a8cc:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    a8d0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    a8d2:	f06f 0015 	mvn.w	r0, #21
    a8d6:	e7fb      	b.n	a8d0 <send_conn_le_param_update+0x54>
    a8d8:	20000000 	.word	0x20000000

0000a8dc <deferred_work>:
{
    a8dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    a8de:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    a8e2:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    a8e4:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    a8e8:	b99b      	cbnz	r3, a912 <deferred_work+0x36>
		bt_l2cap_disconnected(conn);
    a8ea:	4628      	mov	r0, r5
    a8ec:	f015 fbbf 	bl	2006e <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    a8f0:	4b22      	ldr	r3, [pc, #136]	; (a97c <deferred_work+0xa0>)
    a8f2:	681e      	ldr	r6, [r3, #0]
    a8f4:	b92e      	cbnz	r6, a902 <deferred_work+0x26>
		bt_conn_unref(conn);
    a8f6:	4628      	mov	r0, r5
}
    a8f8:	b002      	add	sp, #8
    a8fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
    a8fe:	f015 baf9 	b.w	1fef4 <bt_conn_unref>
		if (cb->disconnected) {
    a902:	6873      	ldr	r3, [r6, #4]
    a904:	b11b      	cbz	r3, a90e <deferred_work+0x32>
			cb->disconnected(conn, conn->err);
    a906:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    a90a:	4628      	mov	r0, r5
    a90c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a90e:	69b6      	ldr	r6, [r6, #24]
    a910:	e7f0      	b.n	a8f4 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    a912:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    a916:	2b01      	cmp	r3, #1
    a918:	d128      	bne.n	a96c <deferred_work+0x90>
	if (atomic_test_and_clear_bit(conn->flags,
    a91a:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
    a91e:	f46f 7100 	mvn.w	r1, #512	; 0x200
    a922:	4630      	mov	r0, r6
    a924:	f015 fa14 	bl	1fd50 <atomic_and>
    a928:	0583      	lsls	r3, r0, #22
    a92a:	d521      	bpl.n	a970 <deferred_work+0x94>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    a92c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    a930:	f8ad 3000 	strh.w	r3, [sp]
    a934:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    a938:	f8ad 3002 	strh.w	r3, [sp, #2]
    a93c:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    a940:	f8ad 3004 	strh.w	r3, [sp, #4]
    a944:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    a948:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
    a94c:	4669      	mov	r1, sp
    a94e:	4628      	mov	r0, r5
    a950:	f7ff ff94 	bl	a87c <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a954:	f3bf 8f5b 	dmb	ish
    a958:	e856 3f00 	ldrex	r3, [r6]
    a95c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a960:	e846 3200 	strex	r2, r3, [r6]
    a964:	2a00      	cmp	r2, #0
    a966:	d1f7      	bne.n	a958 <deferred_work+0x7c>
    a968:	f3bf 8f5b 	dmb	ish
}
    a96c:	b002      	add	sp, #8
    a96e:	bd70      	pop	{r4, r5, r6, pc}
		param = BT_LE_CONN_PARAM(
    a970:	4a03      	ldr	r2, [pc, #12]	; (a980 <deferred_work+0xa4>)
    a972:	6810      	ldr	r0, [r2, #0]
    a974:	6851      	ldr	r1, [r2, #4]
    a976:	466b      	mov	r3, sp
    a978:	c303      	stmia	r3!, {r0, r1}
    a97a:	e7e7      	b.n	a94c <deferred_work+0x70>
    a97c:	2000194c 	.word	0x2000194c
    a980:	0002280e 	.word	0x0002280e

0000a984 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    a984:	b538      	push	{r3, r4, r5, lr}
    a986:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    a988:	490c      	ldr	r1, [pc, #48]	; (a9bc <bt_conn_create_pdu_timeout+0x38>)
    a98a:	2800      	cmp	r0, #0
    a98c:	bf08      	it	eq
    a98e:	4608      	moveq	r0, r1
    a990:	f016 fe25 	bl	215de <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
    a994:	4604      	mov	r4, r0
    a996:	b958      	cbnz	r0, a9b0 <bt_conn_create_pdu_timeout+0x2c>
    a998:	4909      	ldr	r1, [pc, #36]	; (a9c0 <bt_conn_create_pdu_timeout+0x3c>)
    a99a:	4b0a      	ldr	r3, [pc, #40]	; (a9c4 <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
    a99c:	480a      	ldr	r0, [pc, #40]	; (a9c8 <bt_conn_create_pdu_timeout+0x44>)
    a99e:	1ac9      	subs	r1, r1, r3
    a9a0:	08c9      	lsrs	r1, r1, #3
    a9a2:	0189      	lsls	r1, r1, #6
    a9a4:	f041 0102 	orr.w	r1, r1, #2
    a9a8:	f012 ffbc 	bl	1d924 <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    a9ac:	4620      	mov	r0, r4
    a9ae:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    a9b0:	1d29      	adds	r1, r5, #4
    a9b2:	3008      	adds	r0, #8
    a9b4:	f016 fe32 	bl	2161c <net_buf_simple_reserve>
	return buf;
    a9b8:	e7f8      	b.n	a9ac <bt_conn_create_pdu_timeout+0x28>
    a9ba:	bf00      	nop
    a9bc:	20000918 	.word	0x20000918
    a9c0:	000225f8 	.word	0x000225f8
    a9c4:	000225d8 	.word	0x000225d8
    a9c8:	000254fa 	.word	0x000254fa

0000a9cc <bt_conn_create_frag_timeout>:
{
    a9cc:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    a9ce:	4801      	ldr	r0, [pc, #4]	; (a9d4 <bt_conn_create_frag_timeout+0x8>)
    a9d0:	f7ff bfd8 	b.w	a984 <bt_conn_create_pdu_timeout>
    a9d4:	20000968 	.word	0x20000968

0000a9d8 <create_frag>:
{
    a9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a9dc:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    a9de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a9e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a9e6:	2000      	movs	r0, #0
{
    a9e8:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    a9ea:	f7ff ffef 	bl	a9cc <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    a9ee:	7b73      	ldrb	r3, [r6, #13]
    a9f0:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    a9f2:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    a9f4:	f04f 0600 	mov.w	r6, #0
    a9f8:	d005      	beq.n	aa06 <create_frag+0x2e>
		net_buf_unref(frag);
    a9fa:	f00f fb0d 	bl	1a018 <net_buf_unref>
		return NULL;
    a9fe:	4635      	mov	r5, r6
}
    aa00:	4628      	mov	r0, r5
    aa02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    aa06:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
    aa08:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    aa0c:	4e0c      	ldr	r6, [pc, #48]	; (aa40 <create_frag+0x68>)
    aa0e:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    aa10:	f8b6 80cc 	ldrh.w	r8, [r6, #204]	; 0xcc
    aa14:	f016 fe75 	bl	21702 <net_buf_simple_tailroom>
    aa18:	4580      	cmp	r8, r0
    aa1a:	d20c      	bcs.n	aa36 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
    aa1c:	f8b6 60cc 	ldrh.w	r6, [r6, #204]	; 0xcc
	return net_buf_simple_add_mem(&buf->b, mem, len);
    aa20:	f854 1f08 	ldr.w	r1, [r4, #8]!
    aa24:	4632      	mov	r2, r6
    aa26:	4638      	mov	r0, r7
    aa28:	f016 fe36 	bl	21698 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    aa2c:	4631      	mov	r1, r6
    aa2e:	4620      	mov	r0, r4
    aa30:	f016 fe4b 	bl	216ca <net_buf_simple_pull>
    aa34:	e7e4      	b.n	aa00 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
    aa36:	4638      	mov	r0, r7
    aa38:	f016 fe63 	bl	21702 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    aa3c:	b286      	uxth	r6, r0
    aa3e:	e7ef      	b.n	aa20 <create_frag+0x48>
    aa40:	20000000 	.word	0x20000000

0000aa44 <bt_conn_process_tx>:
{
    aa44:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    aa46:	7b43      	ldrb	r3, [r0, #13]
{
    aa48:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    aa4a:	b95b      	cbnz	r3, aa64 <bt_conn_process_tx+0x20>
    aa4c:	f06f 0140 	mvn.w	r1, #64	; 0x40
    aa50:	3004      	adds	r0, #4
    aa52:	f015 f97d 	bl	1fd50 <atomic_and>
    aa56:	0643      	lsls	r3, r0, #25
    aa58:	d504      	bpl.n	aa64 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
    aa5a:	4620      	mov	r0, r4
}
    aa5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
    aa60:	f7ff bc34 	b.w	a2cc <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    aa64:	2200      	movs	r2, #0
    aa66:	2300      	movs	r3, #0
    aa68:	f104 0038 	add.w	r0, r4, #56	; 0x38
    aa6c:	f016 fdbc 	bl	215e8 <net_buf_get>
	BT_ASSERT(buf);
    aa70:	4605      	mov	r5, r0
    aa72:	b960      	cbnz	r0, aa8e <bt_conn_process_tx+0x4a>
    aa74:	4a1f      	ldr	r2, [pc, #124]	; (aaf4 <bt_conn_process_tx+0xb0>)
    aa76:	4920      	ldr	r1, [pc, #128]	; (aaf8 <bt_conn_process_tx+0xb4>)
    aa78:	4820      	ldr	r0, [pc, #128]	; (aafc <bt_conn_process_tx+0xb8>)
    aa7a:	f240 5361 	movw	r3, #1377	; 0x561
    aa7e:	f012 fad9 	bl	1d034 <printk>
    aa82:	4040      	eors	r0, r0
    aa84:	f380 8811 	msr	BASEPRI, r0
    aa88:	f04f 0003 	mov.w	r0, #3
    aa8c:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    aa8e:	4e1c      	ldr	r6, [pc, #112]	; (ab00 <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
    aa90:	89aa      	ldrh	r2, [r5, #12]
    aa92:	f8b6 30cc 	ldrh.w	r3, [r6, #204]	; 0xcc
    aa96:	429a      	cmp	r2, r3
    aa98:	d807      	bhi.n	aaaa <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    aa9a:	2300      	movs	r3, #0
    aa9c:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    aa9e:	4629      	mov	r1, r5
    aaa0:	4620      	mov	r0, r4
    aaa2:	f7ff faed 	bl	a080 <send_frag>
	if (!send_buf(conn, buf)) {
    aaa6:	b130      	cbz	r0, aab6 <bt_conn_process_tx+0x72>
}
    aaa8:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
    aaaa:	4629      	mov	r1, r5
    aaac:	4620      	mov	r0, r4
    aaae:	f7ff ff93 	bl	a9d8 <create_frag>
	if (!frag) {
    aab2:	4601      	mov	r1, r0
    aab4:	b920      	cbnz	r0, aac0 <bt_conn_process_tx+0x7c>
		net_buf_unref(buf);
    aab6:	4628      	mov	r0, r5
}
    aab8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    aabc:	f00f baac 	b.w	1a018 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    aac0:	2301      	movs	r3, #1
    aac2:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    aac4:	4620      	mov	r0, r4
    aac6:	f7ff fadb 	bl	a080 <send_frag>
    aaca:	2800      	cmp	r0, #0
    aacc:	d0f3      	beq.n	aab6 <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
    aace:	89aa      	ldrh	r2, [r5, #12]
    aad0:	f8b6 30cc 	ldrh.w	r3, [r6, #204]	; 0xcc
    aad4:	429a      	cmp	r2, r3
    aad6:	d802      	bhi.n	aade <bt_conn_process_tx+0x9a>
	return send_frag(conn, buf, FRAG_END, false);
    aad8:	2300      	movs	r3, #0
    aada:	2203      	movs	r2, #3
    aadc:	e7df      	b.n	aa9e <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
    aade:	4629      	mov	r1, r5
    aae0:	4620      	mov	r0, r4
    aae2:	f7ff ff79 	bl	a9d8 <create_frag>
		if (!frag) {
    aae6:	4601      	mov	r1, r0
    aae8:	2800      	cmp	r0, #0
    aaea:	d0e4      	beq.n	aab6 <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    aaec:	2301      	movs	r3, #1
    aaee:	461a      	mov	r2, r3
    aaf0:	e7e8      	b.n	aac4 <bt_conn_process_tx+0x80>
    aaf2:	bf00      	nop
    aaf4:	00025523 	.word	0x00025523
    aaf8:	00024913 	.word	0x00024913
    aafc:	00024bab 	.word	0x00024bab
    ab00:	20000000 	.word	0x20000000

0000ab04 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
    ab04:	4b03      	ldr	r3, [pc, #12]	; (ab14 <bt_conn_index+0x10>)
    ab06:	1ac0      	subs	r0, r0, r3
    ab08:	4b03      	ldr	r3, [pc, #12]	; (ab18 <bt_conn_index+0x14>)
    ab0a:	1180      	asrs	r0, r0, #6
    ab0c:	4358      	muls	r0, r3
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
    ab0e:	b2c0      	uxtb	r0, r0
    ab10:	4770      	bx	lr
    ab12:	bf00      	nop
    ab14:	20000c98 	.word	0x20000c98
    ab18:	aaaaaaab 	.word	0xaaaaaaab

0000ab1c <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    ab1c:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    ab1e:	490b      	ldr	r1, [pc, #44]	; (ab4c <bt_conn_init+0x30>)
    ab20:	480b      	ldr	r0, [pc, #44]	; (ab50 <bt_conn_init+0x34>)
    ab22:	f017 f822 	bl	21b6a <k_queue_append>
    ab26:	490b      	ldr	r1, [pc, #44]	; (ab54 <bt_conn_init+0x38>)
    ab28:	4809      	ldr	r0, [pc, #36]	; (ab50 <bt_conn_init+0x34>)
    ab2a:	f017 f81e 	bl	21b6a <k_queue_append>
    ab2e:	490a      	ldr	r1, [pc, #40]	; (ab58 <bt_conn_init+0x3c>)
    ab30:	4807      	ldr	r0, [pc, #28]	; (ab50 <bt_conn_init+0x34>)
    ab32:	f017 f81a 	bl	21b6a <k_queue_append>
	}

	bt_att_init();
    ab36:	f015 fe2f 	bl	20798 <bt_att_init>

	err = bt_smp_init();
    ab3a:	f003 fb59 	bl	e1f0 <bt_smp_init>
	if (err) {
    ab3e:	4604      	mov	r4, r0
    ab40:	b908      	cbnz	r0, ab46 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    ab42:	f015 fb00 	bl	20146 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    ab46:	4620      	mov	r0, r4
    ab48:	bd10      	pop	{r4, pc}
    ab4a:	bf00      	nop
    ab4c:	20001950 	.word	0x20001950
    ab50:	200008e8 	.word	0x200008e8
    ab54:	20001960 	.word	0x20001960
    ab58:	20001970 	.word	0x20001970

0000ab5c <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    ab5c:	4a0b      	ldr	r2, [pc, #44]	; (ab8c <l2cap_accept+0x30>)
{
    ab5e:	b508      	push	{r3, lr}
		if (l2cap->chan.chan.conn) {
    ab60:	6813      	ldr	r3, [r2, #0]
    ab62:	b923      	cbnz	r3, ab6e <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    ab64:	480a      	ldr	r0, [pc, #40]	; (ab90 <l2cap_accept+0x34>)
    ab66:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;
    ab68:	600a      	str	r2, [r1, #0]

		return 0;
    ab6a:	4618      	mov	r0, r3
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    ab6c:	bd08      	pop	{r3, pc}
    ab6e:	4b09      	ldr	r3, [pc, #36]	; (ab94 <l2cap_accept+0x38>)
    ab70:	4a09      	ldr	r2, [pc, #36]	; (ab98 <l2cap_accept+0x3c>)
    ab72:	1ad2      	subs	r2, r2, r3
    ab74:	08d2      	lsrs	r2, r2, #3
	BT_ERR("No available L2CAP context for conn %p", conn);
    ab76:	0192      	lsls	r2, r2, #6
    ab78:	4601      	mov	r1, r0
    ab7a:	f042 0201 	orr.w	r2, r2, #1
    ab7e:	4807      	ldr	r0, [pc, #28]	; (ab9c <l2cap_accept+0x40>)
    ab80:	f012 fedf 	bl	1d942 <log_1>
	return -ENOMEM;
    ab84:	f06f 000b 	mvn.w	r0, #11
    ab88:	e7f0      	b.n	ab6c <l2cap_accept+0x10>
    ab8a:	bf00      	nop
    ab8c:	20000d58 	.word	0x20000d58
    ab90:	00022e14 	.word	0x00022e14
    ab94:	000225d8 	.word	0x000225d8
    ab98:	000226d0 	.word	0x000226d0
    ab9c:	000255b0 	.word	0x000255b0

0000aba0 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    aba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aba2:	4605      	mov	r5, r0
    aba4:	460f      	mov	r7, r1
    aba6:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    aba8:	2300      	movs	r3, #0
    abaa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    abae:	2104      	movs	r1, #4
    abb0:	2000      	movs	r0, #0
    abb2:	f7ff fee7 	bl	a984 <bt_conn_create_pdu_timeout>
	if (!buf) {
    abb6:	4604      	mov	r4, r0
    abb8:	b960      	cbnz	r0, abd4 <l2cap_create_le_sig_pdu.constprop.0+0x34>
    abba:	4a0a      	ldr	r2, [pc, #40]	; (abe4 <l2cap_create_le_sig_pdu.constprop.0+0x44>)
    abbc:	4b0a      	ldr	r3, [pc, #40]	; (abe8 <l2cap_create_le_sig_pdu.constprop.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    abbe:	480b      	ldr	r0, [pc, #44]	; (abec <l2cap_create_le_sig_pdu.constprop.0+0x4c>)
    abc0:	1ad2      	subs	r2, r2, r3
    abc2:	08d2      	lsrs	r2, r2, #3
    abc4:	0192      	lsls	r2, r2, #6
    abc6:	f042 0201 	orr.w	r2, r2, #1
    abca:	4629      	mov	r1, r5
    abcc:	f012 feb9 	bl	1d942 <log_1>
}
    abd0:	4620      	mov	r0, r4
    abd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    abd4:	2104      	movs	r1, #4
    abd6:	3008      	adds	r0, #8
    abd8:	f016 fd58 	bl	2168c <net_buf_simple_add>
	hdr->code = code;
    abdc:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    abde:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    abe0:	8046      	strh	r6, [r0, #2]
	return buf;
    abe2:	e7f5      	b.n	abd0 <l2cap_create_le_sig_pdu.constprop.0+0x30>
    abe4:	000226d0 	.word	0x000226d0
    abe8:	000225d8 	.word	0x000225d8
    abec:	000255d7 	.word	0x000255d7

0000abf0 <l2cap_rtx_timeout>:
{
    abf0:	b538      	push	{r3, r4, r5, lr}
    abf2:	4a0b      	ldr	r2, [pc, #44]	; (ac20 <l2cap_rtx_timeout+0x30>)
    abf4:	4b0b      	ldr	r3, [pc, #44]	; (ac24 <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
    abf6:	4604      	mov	r4, r0
    abf8:	1ad2      	subs	r2, r2, r3
    abfa:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
    abfe:	480a      	ldr	r0, [pc, #40]	; (ac28 <l2cap_rtx_timeout+0x38>)
    ac00:	08d2      	lsrs	r2, r2, #3
    ac02:	0192      	lsls	r2, r2, #6
    ac04:	4621      	mov	r1, r4
    ac06:	f042 0201 	orr.w	r2, r2, #1
    ac0a:	f012 fe9a 	bl	1d942 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
    ac0e:	4628      	mov	r0, r5
    ac10:	4621      	mov	r1, r4
    ac12:	f015 f9f6 	bl	20002 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    ac16:	4620      	mov	r0, r4
}
    ac18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    ac1c:	f015 ba12 	b.w	20044 <bt_l2cap_chan_del>
    ac20:	000226d0 	.word	0x000226d0
    ac24:	000225d8 	.word	0x000225d8
    ac28:	000255ff 	.word	0x000255ff

0000ac2c <bt_l2cap_connected>:
{
    ac2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    ac30:	4e29      	ldr	r6, [pc, #164]	; (acd8 <bt_l2cap_connected+0xac>)
    ac32:	4f2a      	ldr	r7, [pc, #168]	; (acdc <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&work->work, handler);
    ac34:	f8df 80a8 	ldr.w	r8, [pc, #168]	; ace0 <bt_l2cap_connected+0xb4>
{
    ac38:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    ac3a:	42be      	cmp	r6, r7
    ac3c:	d302      	bcc.n	ac44 <bt_l2cap_connected+0x18>
}
    ac3e:	b003      	add	sp, #12
    ac40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    ac44:	6873      	ldr	r3, [r6, #4]
    ac46:	a901      	add	r1, sp, #4
    ac48:	4620      	mov	r0, r4
    ac4a:	4798      	blx	r3
    ac4c:	2800      	cmp	r0, #0
    ac4e:	db3d      	blt.n	accc <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
    ac50:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    ac52:	8833      	ldrh	r3, [r6, #0]
    ac54:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
		ch->tx.cid = fchan->cid;
    ac58:	f8a5 3054 	strh.w	r3, [r5, #84]	; 0x54
    ac5c:	4641      	mov	r1, r8
    ac5e:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    ac62:	f8d6 9008 	ldr.w	r9, [r6, #8]
    ac66:	f017 f999 	bl	21f9c <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ac6a:	f3bf 8f5b 	dmb	ish
    ac6e:	f105 0340 	add.w	r3, r5, #64	; 0x40
    ac72:	2200      	movs	r2, #0
    ac74:	e853 1f00 	ldrex	r1, [r3]
    ac78:	e843 2000 	strex	r0, r2, [r3]
    ac7c:	2800      	cmp	r0, #0
    ac7e:	d1f9      	bne.n	ac74 <bt_l2cap_connected+0x48>
    ac80:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    ac84:	60aa      	str	r2, [r5, #8]
	return list->tail;
    ac86:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    ac88:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
    ac8c:	bb02      	cbnz	r2, acd0 <bt_l2cap_connected+0xa4>
	list->head = node;
    ac8e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
    ac92:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    ac94:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    ac96:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    ac98:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    ac9c:	681b      	ldr	r3, [r3, #0]
    ac9e:	b103      	cbz	r3, aca2 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
    aca0:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    aca2:	9b01      	ldr	r3, [sp, #4]
    aca4:	f3bf 8f5b 	dmb	ish
    aca8:	3340      	adds	r3, #64	; 0x40
    acaa:	e853 2f00 	ldrex	r2, [r3]
    acae:	f042 0201 	orr.w	r2, r2, #1
    acb2:	e843 2100 	strex	r1, r2, [r3]
    acb6:	2900      	cmp	r1, #0
    acb8:	d1f7      	bne.n	acaa <bt_l2cap_connected+0x7e>
    acba:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    acbe:	9801      	ldr	r0, [sp, #4]
    acc0:	6843      	ldr	r3, [r0, #4]
    acc2:	699b      	ldr	r3, [r3, #24]
    acc4:	b113      	cbz	r3, accc <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
    acc6:	f100 0140 	add.w	r1, r0, #64	; 0x40
    acca:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    accc:	360c      	adds	r6, #12
    acce:	e7b4      	b.n	ac3a <bt_l2cap_connected+0xe>
	parent->next = child;
    acd0:	6013      	str	r3, [r2, #0]
	list->tail = node;
    acd2:	6563      	str	r3, [r4, #84]	; 0x54
}
    acd4:	e7dd      	b.n	ac92 <bt_l2cap_connected+0x66>
    acd6:	bf00      	nop
    acd8:	0002258c 	.word	0x0002258c
    acdc:	000225b0 	.word	0x000225b0
    ace0:	0000abf1 	.word	0x0000abf1

0000ace4 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    ace4:	898b      	ldrh	r3, [r1, #12]
    ace6:	2b03      	cmp	r3, #3
{
    ace8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    acea:	4606      	mov	r6, r0
    acec:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    acee:	d80a      	bhi.n	ad06 <l2cap_recv+0x22>
    acf0:	492e      	ldr	r1, [pc, #184]	; (adac <l2cap_recv+0xc8>)
    acf2:	4b2f      	ldr	r3, [pc, #188]	; (adb0 <l2cap_recv+0xcc>)
		BT_ERR("Too small L2CAP signaling PDU");
    acf4:	482f      	ldr	r0, [pc, #188]	; (adb4 <l2cap_recv+0xd0>)
    acf6:	1ac9      	subs	r1, r1, r3
    acf8:	08c9      	lsrs	r1, r1, #3
    acfa:	0189      	lsls	r1, r1, #6
    acfc:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
    ad00:	f012 fe10 	bl	1d924 <log_0>
		return 0;
    ad04:	e013      	b.n	ad2e <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
    ad06:	2104      	movs	r1, #4
    ad08:	f105 0008 	add.w	r0, r5, #8
    ad0c:	f016 fce5 	bl	216da <net_buf_simple_pull_mem>
	if (buf->len != len) {
    ad10:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    ad12:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    ad14:	428a      	cmp	r2, r1
    ad16:	4604      	mov	r4, r0
    ad18:	d00c      	beq.n	ad34 <l2cap_recv+0x50>
    ad1a:	4825      	ldr	r0, [pc, #148]	; (adb0 <l2cap_recv+0xcc>)
    ad1c:	4b23      	ldr	r3, [pc, #140]	; (adac <l2cap_recv+0xc8>)
    ad1e:	1a1b      	subs	r3, r3, r0
    ad20:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    ad22:	019b      	lsls	r3, r3, #6
    ad24:	4824      	ldr	r0, [pc, #144]	; (adb8 <l2cap_recv+0xd4>)
    ad26:	f043 0301 	orr.w	r3, r3, #1
    ad2a:	f012 fe21 	bl	1d970 <log_2>
}
    ad2e:	2000      	movs	r0, #0
    ad30:	b002      	add	sp, #8
    ad32:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
    ad34:	7843      	ldrb	r3, [r0, #1]
    ad36:	b943      	cbnz	r3, ad4a <l2cap_recv+0x66>
    ad38:	491c      	ldr	r1, [pc, #112]	; (adac <l2cap_recv+0xc8>)
    ad3a:	4b1d      	ldr	r3, [pc, #116]	; (adb0 <l2cap_recv+0xcc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    ad3c:	481f      	ldr	r0, [pc, #124]	; (adbc <l2cap_recv+0xd8>)
    ad3e:	1ac9      	subs	r1, r1, r3
    ad40:	08c9      	lsrs	r1, r1, #3
    ad42:	0189      	lsls	r1, r1, #6
    ad44:	f041 0101 	orr.w	r1, r1, #1
    ad48:	e7da      	b.n	ad00 <l2cap_recv+0x1c>
	switch (hdr->code) {
    ad4a:	7801      	ldrb	r1, [r0, #0]
    ad4c:	2901      	cmp	r1, #1
    ad4e:	d0ee      	beq.n	ad2e <l2cap_recv+0x4a>
    ad50:	2913      	cmp	r1, #19
    ad52:	d10a      	bne.n	ad6a <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
    ad54:	2a01      	cmp	r2, #1
    ad56:	d8ea      	bhi.n	ad2e <l2cap_recv+0x4a>
    ad58:	4914      	ldr	r1, [pc, #80]	; (adac <l2cap_recv+0xc8>)
    ad5a:	4b15      	ldr	r3, [pc, #84]	; (adb0 <l2cap_recv+0xcc>)
		BT_ERR("Too small LE conn param rsp");
    ad5c:	4818      	ldr	r0, [pc, #96]	; (adc0 <l2cap_recv+0xdc>)
    ad5e:	1ac9      	subs	r1, r1, r3
    ad60:	08c9      	lsrs	r1, r1, #3
    ad62:	0189      	lsls	r1, r1, #6
    ad64:	f041 0101 	orr.w	r1, r1, #1
    ad68:	e7ca      	b.n	ad00 <l2cap_recv+0x1c>
    ad6a:	4b11      	ldr	r3, [pc, #68]	; (adb0 <l2cap_recv+0xcc>)
    ad6c:	4a0f      	ldr	r2, [pc, #60]	; (adac <l2cap_recv+0xc8>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    ad6e:	4815      	ldr	r0, [pc, #84]	; (adc4 <l2cap_recv+0xe0>)
    ad70:	1ad2      	subs	r2, r2, r3
    ad72:	08d2      	lsrs	r2, r2, #3
    ad74:	0192      	lsls	r2, r2, #6
    ad76:	f042 0202 	orr.w	r2, r2, #2
    ad7a:	f012 fde2 	bl	1d942 <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    ad7e:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    ad80:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    ad82:	2202      	movs	r2, #2
    ad84:	2001      	movs	r0, #1
    ad86:	f7ff ff0b 	bl	aba0 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    ad8a:	4604      	mov	r4, r0
    ad8c:	2800      	cmp	r0, #0
    ad8e:	d0ce      	beq.n	ad2e <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
    ad90:	2102      	movs	r1, #2
    ad92:	3008      	adds	r0, #8
    ad94:	f016 fc7a 	bl	2168c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    ad98:	2300      	movs	r3, #0
    ad9a:	7003      	strb	r3, [r0, #0]
    ad9c:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    ad9e:	4622      	mov	r2, r4
    ada0:	9300      	str	r3, [sp, #0]
    ada2:	2105      	movs	r1, #5
    ada4:	4628      	mov	r0, r5
    ada6:	f015 f995 	bl	200d4 <bt_l2cap_send_cb>
}
    adaa:	e7c0      	b.n	ad2e <l2cap_recv+0x4a>
    adac:	000226d0 	.word	0x000226d0
    adb0:	000225d8 	.word	0x000225d8
    adb4:	0002560f 	.word	0x0002560f
    adb8:	0002562d 	.word	0x0002562d
    adbc:	0002564e 	.word	0x0002564e
    adc0:	0002566f 	.word	0x0002566f
    adc4:	0002568b 	.word	0x0002568b

0000adc8 <bt_l2cap_recv>:
{
    adc8:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    adca:	898b      	ldrh	r3, [r1, #12]
    adcc:	2b03      	cmp	r3, #3
{
    adce:	4605      	mov	r5, r0
    add0:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    add2:	d80e      	bhi.n	adf2 <bt_l2cap_recv+0x2a>
    add4:	4914      	ldr	r1, [pc, #80]	; (ae28 <bt_l2cap_recv+0x60>)
    add6:	4b15      	ldr	r3, [pc, #84]	; (ae2c <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
    add8:	4815      	ldr	r0, [pc, #84]	; (ae30 <bt_l2cap_recv+0x68>)
    adda:	1ac9      	subs	r1, r1, r3
    addc:	08c9      	lsrs	r1, r1, #3
    adde:	0189      	lsls	r1, r1, #6
    ade0:	f041 0101 	orr.w	r1, r1, #1
    ade4:	f012 fd9e 	bl	1d924 <log_0>
	net_buf_unref(buf);
    ade8:	4620      	mov	r0, r4
}
    adea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    adee:	f00f b913 	b.w	1a018 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
    adf2:	2104      	movs	r1, #4
    adf4:	f104 0008 	add.w	r0, r4, #8
    adf8:	f016 fc6f 	bl	216da <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    adfc:	8841      	ldrh	r1, [r0, #2]
    adfe:	4628      	mov	r0, r5
    ae00:	f015 f991 	bl	20126 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    ae04:	b950      	cbnz	r0, ae1c <bt_l2cap_recv+0x54>
    ae06:	4b09      	ldr	r3, [pc, #36]	; (ae2c <bt_l2cap_recv+0x64>)
    ae08:	4a07      	ldr	r2, [pc, #28]	; (ae28 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
    ae0a:	480a      	ldr	r0, [pc, #40]	; (ae34 <bt_l2cap_recv+0x6c>)
    ae0c:	1ad2      	subs	r2, r2, r3
    ae0e:	08d2      	lsrs	r2, r2, #3
    ae10:	0192      	lsls	r2, r2, #6
    ae12:	f042 0202 	orr.w	r2, r2, #2
    ae16:	f012 fd94 	bl	1d942 <log_1>
		net_buf_unref(buf);
    ae1a:	e7e5      	b.n	ade8 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    ae1c:	6843      	ldr	r3, [r0, #4]
    ae1e:	4621      	mov	r1, r4
    ae20:	691b      	ldr	r3, [r3, #16]
    ae22:	4798      	blx	r3
    ae24:	e7e0      	b.n	ade8 <bt_l2cap_recv+0x20>
    ae26:	bf00      	nop
    ae28:	000226d0 	.word	0x000226d0
    ae2c:	000225d8 	.word	0x000225d8
    ae30:	000256a9 	.word	0x000256a9
    ae34:	000256c6 	.word	0x000256c6

0000ae38 <bt_l2cap_update_conn_param>:
{
    ae38:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ae3a:	460c      	mov	r4, r1
	ident++;
    ae3c:	4914      	ldr	r1, [pc, #80]	; (ae90 <bt_l2cap_update_conn_param+0x58>)
    ae3e:	780b      	ldrb	r3, [r1, #0]
    ae40:	3301      	adds	r3, #1
	if (!ident) {
    ae42:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
    ae46:	bf08      	it	eq
    ae48:	2301      	moveq	r3, #1
    ae4a:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    ae4c:	7809      	ldrb	r1, [r1, #0]
{
    ae4e:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    ae50:	2208      	movs	r2, #8
    ae52:	2012      	movs	r0, #18
    ae54:	f7ff fea4 	bl	aba0 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    ae58:	4606      	mov	r6, r0
    ae5a:	b1b0      	cbz	r0, ae8a <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
    ae5c:	2108      	movs	r1, #8
    ae5e:	4408      	add	r0, r1
    ae60:	f016 fc14 	bl	2168c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    ae64:	8822      	ldrh	r2, [r4, #0]
    ae66:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    ae68:	8862      	ldrh	r2, [r4, #2]
    ae6a:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    ae6c:	88a2      	ldrh	r2, [r4, #4]
    ae6e:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    ae70:	88e2      	ldrh	r2, [r4, #6]
    ae72:	80c2      	strh	r2, [r0, #6]
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    ae74:	2400      	movs	r4, #0
    ae76:	9400      	str	r4, [sp, #0]
    ae78:	4623      	mov	r3, r4
    ae7a:	4632      	mov	r2, r6
    ae7c:	2105      	movs	r1, #5
    ae7e:	4628      	mov	r0, r5
    ae80:	f015 f928 	bl	200d4 <bt_l2cap_send_cb>
	return 0;
    ae84:	4620      	mov	r0, r4
}
    ae86:	b002      	add	sp, #8
    ae88:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    ae8a:	f06f 000b 	mvn.w	r0, #11
    ae8e:	e7fa      	b.n	ae86 <bt_l2cap_update_conn_param+0x4e>
    ae90:	2000354c 	.word	0x2000354c

0000ae94 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    ae94:	4b02      	ldr	r3, [pc, #8]	; (aea0 <att_cfm_sent+0xc>)
    ae96:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110

	att_sent(conn, user_data);
    ae9a:	f015 b967 	b.w	2016c <att_sent>
    ae9e:	bf00      	nop
    aea0:	000204fb 	.word	0x000204fb

0000aea4 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    aea4:	4b02      	ldr	r3, [pc, #8]	; (aeb0 <att_rsp_sent+0xc>)
    aea6:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110

	att_sent(conn, user_data);
    aeaa:	f015 b95f 	b.w	2016c <att_sent>
    aeae:	bf00      	nop
    aeb0:	000204df 	.word	0x000204df

0000aeb4 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    aeb4:	4b02      	ldr	r3, [pc, #8]	; (aec0 <att_req_sent+0xc>)
    aeb6:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110

	att_sent(conn, user_data);
    aeba:	f015 b957 	b.w	2016c <att_sent>
    aebe:	bf00      	nop
    aec0:	0000b189 	.word	0x0000b189

0000aec4 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
    aec4:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
    aec6:	7b43      	ldrb	r3, [r0, #13]
    aec8:	2b07      	cmp	r3, #7
    aeca:	d00b      	beq.n	aee4 <att_get+0x20>
    aecc:	4918      	ldr	r1, [pc, #96]	; (af30 <att_get+0x6c>)
    aece:	4b19      	ldr	r3, [pc, #100]	; (af34 <att_get+0x70>)
		BT_WARN("Not connected");
    aed0:	4819      	ldr	r0, [pc, #100]	; (af38 <att_get+0x74>)
    aed2:	1ac9      	subs	r1, r1, r3
    aed4:	08c9      	lsrs	r1, r1, #3
    aed6:	0189      	lsls	r1, r1, #6
    aed8:	f041 0102 	orr.w	r1, r1, #2
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
		BT_WARN("ATT channel flagged as disconnected");
    aedc:	f012 fd22 	bl	1d924 <log_0>
		return NULL;
    aee0:	2400      	movs	r4, #0
    aee2:	e00e      	b.n	af02 <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    aee4:	2104      	movs	r1, #4
    aee6:	f015 f91e 	bl	20126 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    aeea:	4604      	mov	r4, r0
    aeec:	b958      	cbnz	r0, af06 <att_get+0x42>
    aeee:	4910      	ldr	r1, [pc, #64]	; (af30 <att_get+0x6c>)
    aef0:	4b10      	ldr	r3, [pc, #64]	; (af34 <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
    aef2:	4812      	ldr	r0, [pc, #72]	; (af3c <att_get+0x78>)
    aef4:	1ac9      	subs	r1, r1, r3
    aef6:	08c9      	lsrs	r1, r1, #3
    aef8:	0189      	lsls	r1, r1, #6
    aefa:	f041 0101 	orr.w	r1, r1, #1
    aefe:	f012 fd11 	bl	1d924 <log_0>
	}

	return att_chan->att;
}
    af02:	4620      	mov	r0, r4
    af04:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    af06:	f3bf 8f5b 	dmb	ish
    af0a:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
    af0e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    af12:	075b      	lsls	r3, r3, #29
    af14:	d508      	bpl.n	af28 <att_get+0x64>
    af16:	4906      	ldr	r1, [pc, #24]	; (af30 <att_get+0x6c>)
    af18:	4b06      	ldr	r3, [pc, #24]	; (af34 <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
    af1a:	4809      	ldr	r0, [pc, #36]	; (af40 <att_get+0x7c>)
    af1c:	1ac9      	subs	r1, r1, r3
    af1e:	08c9      	lsrs	r1, r1, #3
    af20:	0189      	lsls	r1, r1, #6
    af22:	f041 0102 	orr.w	r1, r1, #2
    af26:	e7d9      	b.n	aedc <att_get+0x18>
	return att_chan->att;
    af28:	f850 4c08 	ldr.w	r4, [r0, #-8]
    af2c:	e7e9      	b.n	af02 <att_get+0x3e>
    af2e:	bf00      	nop
    af30:	000225e8 	.word	0x000225e8
    af34:	000225d8 	.word	0x000225d8
    af38:	00025702 	.word	0x00025702
    af3c:	00025710 	.word	0x00025710
    af40:	0002572b 	.word	0x0002572b

0000af44 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    af44:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    af46:	3808      	subs	r0, #8
    af48:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    af4a:	a901      	add	r1, sp, #4
    af4c:	4802      	ldr	r0, [pc, #8]	; (af58 <bt_att_released+0x14>)
    af4e:	f010 fca9 	bl	1b8a4 <k_mem_slab_free>
}
    af52:	b003      	add	sp, #12
    af54:	f85d fb04 	ldr.w	pc, [sp], #4
    af58:	2000083c 	.word	0x2000083c

0000af5c <find_type_cb>:
{
    af5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
    af60:	f8d2 9000 	ldr.w	r9, [r2]
{
    af64:	b091      	sub	sp, #68	; 0x44
    af66:	4607      	mov	r7, r0
    af68:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    af6a:	2500      	movs	r5, #0
    af6c:	f642 0301 	movw	r3, #10241	; 0x2801
    af70:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    af72:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    af76:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    af7a:	a90b      	add	r1, sp, #44	; 0x2c
{
    af7c:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    af7e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    af82:	f014 fba3 	bl	1f6cc <bt_uuid_cmp>
    af86:	2800      	cmp	r0, #0
    af88:	d066      	beq.n	b058 <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    af8a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    af8e:	6838      	ldr	r0, [r7, #0]
    af90:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    af94:	a90b      	add	r1, sp, #44	; 0x2c
    af96:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    af9a:	f014 fb97 	bl	1f6cc <bt_uuid_cmp>
    af9e:	b138      	cbz	r0, afb0 <find_type_cb+0x54>
		if (data->group &&
    afa0:	68a3      	ldr	r3, [r4, #8]
    afa2:	b11b      	cbz	r3, afac <find_type_cb+0x50>
    afa4:	885a      	ldrh	r2, [r3, #2]
    afa6:	42b2      	cmp	r2, r6
    afa8:	d200      	bcs.n	afac <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
    afaa:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    afac:	2001      	movs	r0, #1
    afae:	e009      	b.n	afc4 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    afb0:	6861      	ldr	r1, [r4, #4]
    afb2:	4608      	mov	r0, r1
    afb4:	f015 f8d2 	bl	2015c <net_buf_frags_len>
    afb8:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    afbc:	1a18      	subs	r0, r3, r0
    afbe:	2803      	cmp	r0, #3
    afc0:	d803      	bhi.n	afca <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    afc2:	2000      	movs	r0, #0
}
    afc4:	b011      	add	sp, #68	; 0x44
    afc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    afca:	4608      	mov	r0, r1
    afcc:	f016 fb3c 	bl	21648 <net_buf_frag_last>
    afd0:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    afd2:	6860      	ldr	r0, [r4, #4]
    afd4:	f015 f8c2 	bl	2015c <net_buf_frags_len>
    afd8:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
    afdc:	f105 0b08 	add.w	fp, r5, #8
    afe0:	eba3 0a00 	sub.w	sl, r3, r0
    afe4:	4658      	mov	r0, fp
    afe6:	f016 fb8c 	bl	21702 <net_buf_simple_tailroom>
    afea:	4582      	cmp	sl, r0
    afec:	d237      	bcs.n	b05e <find_type_cb+0x102>
    afee:	6860      	ldr	r0, [r4, #4]
    aff0:	f015 f8b4 	bl	2015c <net_buf_frags_len>
    aff4:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    aff8:	1a18      	subs	r0, r3, r0
	if (!len) {
    affa:	b970      	cbnz	r0, b01a <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    affc:	6863      	ldr	r3, [r4, #4]
    affe:	7998      	ldrb	r0, [r3, #6]
    b000:	f00e ff4c 	bl	19e9c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    b004:	2200      	movs	r2, #0
    b006:	2300      	movs	r3, #0
    b008:	f016 fae9 	bl	215de <net_buf_alloc_fixed>
		if (!frag) {
    b00c:	4605      	mov	r5, r0
    b00e:	2800      	cmp	r0, #0
    b010:	d0d7      	beq.n	afc2 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    b012:	4601      	mov	r1, r0
    b014:	6860      	ldr	r0, [r4, #4]
    b016:	f016 fb28 	bl	2166a <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    b01a:	2300      	movs	r3, #0
    b01c:	9300      	str	r3, [sp, #0]
    b01e:	f8d7 9004 	ldr.w	r9, [r7, #4]
    b022:	4639      	mov	r1, r7
    b024:	2310      	movs	r3, #16
    b026:	aa02      	add	r2, sp, #8
    b028:	4640      	mov	r0, r8
    b02a:	47c8      	blx	r9
	if (read < 0) {
    b02c:	1e07      	subs	r7, r0, #0
    b02e:	db13      	blt.n	b058 <find_type_cb+0xfc>
	if (read != data->value_len) {
    b030:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    b032:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
    b034:	42ba      	cmp	r2, r7
    b036:	d037      	beq.n	b0a8 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    b038:	4601      	mov	r1, r0
    b03a:	a80b      	add	r0, sp, #44	; 0x2c
    b03c:	f014 fb74 	bl	1f728 <bt_uuid_create>
    b040:	b988      	cbnz	r0, b066 <find_type_cb+0x10a>
    b042:	4a1b      	ldr	r2, [pc, #108]	; (b0b0 <find_type_cb+0x154>)
    b044:	4b1b      	ldr	r3, [pc, #108]	; (b0b4 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    b046:	7c21      	ldrb	r1, [r4, #16]
    b048:	481b      	ldr	r0, [pc, #108]	; (b0b8 <find_type_cb+0x15c>)
    b04a:	1ad2      	subs	r2, r2, r3
    b04c:	08d2      	lsrs	r2, r2, #3
    b04e:	0192      	lsls	r2, r2, #6
    b050:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
    b054:	f012 fc75 	bl	1d942 <log_1>
	data->group = NULL;
    b058:	2300      	movs	r3, #0
    b05a:	60a3      	str	r3, [r4, #8]
    b05c:	e7a6      	b.n	afac <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    b05e:	4658      	mov	r0, fp
    b060:	f016 fb4f 	bl	21702 <net_buf_simple_tailroom>
    b064:	e7c9      	b.n	affa <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    b066:	b2fa      	uxtb	r2, r7
    b068:	a902      	add	r1, sp, #8
    b06a:	a806      	add	r0, sp, #24
    b06c:	f014 fb5c 	bl	1f728 <bt_uuid_create>
    b070:	b948      	cbnz	r0, b086 <find_type_cb+0x12a>
    b072:	4a0f      	ldr	r2, [pc, #60]	; (b0b0 <find_type_cb+0x154>)
    b074:	4b0f      	ldr	r3, [pc, #60]	; (b0b4 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
    b076:	4811      	ldr	r0, [pc, #68]	; (b0bc <find_type_cb+0x160>)
    b078:	1ad2      	subs	r2, r2, r3
    b07a:	08d2      	lsrs	r2, r2, #3
    b07c:	0192      	lsls	r2, r2, #6
    b07e:	f042 0202 	orr.w	r2, r2, #2
    b082:	4639      	mov	r1, r7
    b084:	e7e6      	b.n	b054 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    b086:	a906      	add	r1, sp, #24
    b088:	a80b      	add	r0, sp, #44	; 0x2c
    b08a:	f014 fb1f 	bl	1f6cc <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    b08e:	2800      	cmp	r0, #0
    b090:	d1e2      	bne.n	b058 <find_type_cb+0xfc>
	data->err = 0x00;
    b092:	2300      	movs	r3, #0
    b094:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
    b096:	2104      	movs	r1, #4
    b098:	f105 0008 	add.w	r0, r5, #8
    b09c:	f016 faf6 	bl	2168c <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    b0a0:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    b0a2:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    b0a4:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    b0a6:	e781      	b.n	afac <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    b0a8:	a902      	add	r1, sp, #8
    b0aa:	f014 fa04 	bl	1f4b6 <memcmp>
    b0ae:	e7ee      	b.n	b08e <find_type_cb+0x132>
    b0b0:	000225e8 	.word	0x000225e8
    b0b4:	000225d8 	.word	0x000225d8
    b0b8:	0002574f 	.word	0x0002574f
    b0bc:	0002576e 	.word	0x0002576e

0000b0c0 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    b0c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    b0c2:	2300      	movs	r3, #0
{
    b0c4:	4606      	mov	r6, r0
    b0c6:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    b0c8:	4828      	ldr	r0, [pc, #160]	; (b16c <bt_att_accept+0xac>)
    b0ca:	2200      	movs	r2, #0
    b0cc:	4669      	mov	r1, sp
    b0ce:	f010 fbb9 	bl	1b844 <k_mem_slab_alloc>
    b0d2:	4604      	mov	r4, r0
    b0d4:	b178      	cbz	r0, b0f6 <bt_att_accept+0x36>
    b0d6:	4a26      	ldr	r2, [pc, #152]	; (b170 <bt_att_accept+0xb0>)
    b0d8:	4b26      	ldr	r3, [pc, #152]	; (b174 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT context for conn %p", conn);
    b0da:	4827      	ldr	r0, [pc, #156]	; (b178 <bt_att_accept+0xb8>)
    b0dc:	1ad2      	subs	r2, r2, r3
    b0de:	08d2      	lsrs	r2, r2, #3
    b0e0:	0192      	lsls	r2, r2, #6
    b0e2:	f042 0201 	orr.w	r2, r2, #1
    b0e6:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
    b0e8:	f012 fc2b 	bl	1d942 <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    b0ec:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    b0f0:	4620      	mov	r0, r4
    b0f2:	b003      	add	sp, #12
    b0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    b0f6:	4601      	mov	r1, r0
    b0f8:	222c      	movs	r2, #44	; 0x2c
    b0fa:	9800      	ldr	r0, [sp, #0]
    b0fc:	f014 fa17 	bl	1f52e <memset>
	att->conn = conn;
    b100:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    b102:	481e      	ldr	r0, [pc, #120]	; (b17c <bt_att_accept+0xbc>)
	list->tail = NULL;
    b104:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    b106:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
    b10a:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
    b10e:	2200      	movs	r2, #0
    b110:	2300      	movs	r3, #0
    b112:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    b114:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    b116:	f010 fb95 	bl	1b844 <k_mem_slab_alloc>
    b11a:	4604      	mov	r4, r0
    b11c:	b148      	cbz	r0, b132 <bt_att_accept+0x72>
    b11e:	4a14      	ldr	r2, [pc, #80]	; (b170 <bt_att_accept+0xb0>)
    b120:	4b14      	ldr	r3, [pc, #80]	; (b174 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
    b122:	6829      	ldr	r1, [r5, #0]
    b124:	4816      	ldr	r0, [pc, #88]	; (b180 <bt_att_accept+0xc0>)
    b126:	1ad2      	subs	r2, r2, r3
    b128:	08d2      	lsrs	r2, r2, #3
    b12a:	0192      	lsls	r2, r2, #6
    b12c:	f042 0201 	orr.w	r2, r2, #1
    b130:	e7da      	b.n	b0e8 <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
    b132:	4601      	mov	r1, r0
    b134:	f44f 7290 	mov.w	r2, #288	; 0x120
    b138:	9801      	ldr	r0, [sp, #4]
    b13a:	f014 f9f8 	bl	1f52e <memset>
	chan->chan.chan.ops = &ops;
    b13e:	9801      	ldr	r0, [sp, #4]
    b140:	4b10      	ldr	r3, [pc, #64]	; (b184 <bt_att_accept+0xc4>)
    b142:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    b144:	30d0      	adds	r0, #208	; 0xd0
    b146:	f016 fd04 	bl	21b52 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b14a:	9b01      	ldr	r3, [sp, #4]
    b14c:	f3bf 8f5b 	dmb	ish
    b150:	33c8      	adds	r3, #200	; 0xc8
    b152:	e853 2f00 	ldrex	r2, [r3]
    b156:	e843 4100 	strex	r1, r4, [r3]
    b15a:	2900      	cmp	r1, #0
    b15c:	d1f9      	bne.n	b152 <bt_att_accept+0x92>
    b15e:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    b162:	9b01      	ldr	r3, [sp, #4]
    b164:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    b168:	603b      	str	r3, [r7, #0]
	return 0;
    b16a:	e7c1      	b.n	b0f0 <bt_att_accept+0x30>
    b16c:	20000820 	.word	0x20000820
    b170:	000225e8 	.word	0x000225e8
    b174:	000225d8 	.word	0x000225d8
    b178:	0002578d 	.word	0x0002578d
    b17c:	2000083c 	.word	0x2000083c
    b180:	000257b2 	.word	0x000257b2
    b184:	20000240 	.word	0x20000240

0000b188 <chan_req_sent>:
	if (chan->req) {
    b188:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
    b18c:	b13b      	cbz	r3, b19e <chan_req_sent+0x16>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    b18e:	f100 01e8 	add.w	r1, r0, #232	; 0xe8
    b192:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    b196:	4802      	ldr	r0, [pc, #8]	; (b1a0 <chan_req_sent+0x18>)
    b198:	2300      	movs	r3, #0
    b19a:	f011 b9d7 	b.w	1c54c <k_work_reschedule_for_queue>
}
    b19e:	4770      	bx	lr
    b1a0:	200015c0 	.word	0x200015c0

0000b1a4 <read_group_cb>:
{
    b1a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    b1a8:	4605      	mov	r5, r0
    b1aa:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    b1ac:	f04f 0800 	mov.w	r8, #0
    b1b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    b1b4:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    b1b6:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    b1b8:	f88d 8008 	strb.w	r8, [sp, #8]
    b1bc:	a902      	add	r1, sp, #8
{
    b1be:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    b1c0:	f8ad 300a 	strh.w	r3, [sp, #10]
    b1c4:	f014 fa82 	bl	1f6cc <bt_uuid_cmp>
    b1c8:	b1a0      	cbz	r0, b1f4 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    b1ca:	f642 0301 	movw	r3, #10241	; 0x2801
    b1ce:	6828      	ldr	r0, [r5, #0]
    b1d0:	f88d 800c 	strb.w	r8, [sp, #12]
    b1d4:	a903      	add	r1, sp, #12
    b1d6:	f8ad 300e 	strh.w	r3, [sp, #14]
    b1da:	f014 fa77 	bl	1f6cc <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    b1de:	b148      	cbz	r0, b1f4 <read_group_cb+0x50>
		if (data->group &&
    b1e0:	6923      	ldr	r3, [r4, #16]
    b1e2:	b11b      	cbz	r3, b1ec <read_group_cb+0x48>
    b1e4:	885a      	ldrh	r2, [r3, #2]
    b1e6:	42b2      	cmp	r2, r6
    b1e8:	d200      	bcs.n	b1ec <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    b1ea:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    b1ec:	2001      	movs	r0, #1
}
    b1ee:	b004      	add	sp, #16
    b1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    b1f4:	6861      	ldr	r1, [r4, #4]
    b1f6:	6828      	ldr	r0, [r5, #0]
    b1f8:	f014 fa68 	bl	1f6cc <bt_uuid_cmp>
    b1fc:	b110      	cbz	r0, b204 <read_group_cb+0x60>
		data->group = NULL;
    b1fe:	2300      	movs	r3, #0
    b200:	6123      	str	r3, [r4, #16]
    b202:	e7f3      	b.n	b1ec <read_group_cb+0x48>
	if (data->rsp->len &&
    b204:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    b206:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    b208:	781a      	ldrb	r2, [r3, #0]
    b20a:	b13a      	cbz	r2, b21c <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    b20c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    b210:	8981      	ldrh	r1, [r0, #12]
    b212:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    b214:	4293      	cmp	r3, r2
    b216:	da01      	bge.n	b21c <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    b218:	2000      	movs	r0, #0
    b21a:	e7e8      	b.n	b1ee <read_group_cb+0x4a>
    b21c:	2104      	movs	r1, #4
    b21e:	3008      	adds	r0, #8
    b220:	f016 fa34 	bl	2168c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    b224:	4b09      	ldr	r3, [pc, #36]	; (b24c <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    b226:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    b228:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    b22a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    b22c:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    b22e:	4629      	mov	r1, r5
    b230:	9300      	str	r3, [sp, #0]
    b232:	9401      	str	r4, [sp, #4]
    b234:	2300      	movs	r3, #0
    b236:	4638      	mov	r0, r7
    b238:	f015 f872 	bl	20320 <att_chan_read>
	if (read < 0) {
    b23c:	2800      	cmp	r0, #0
    b23e:	dbeb      	blt.n	b218 <read_group_cb+0x74>
	if (!data->group) {
    b240:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    b242:	3800      	subs	r0, #0
    b244:	bf18      	it	ne
    b246:	2001      	movne	r0, #1
    b248:	e7d1      	b.n	b1ee <read_group_cb+0x4a>
    b24a:	bf00      	nop
    b24c:	000202a5 	.word	0x000202a5

0000b250 <chan_send>:
{
    b250:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    b254:	688b      	ldr	r3, [r1, #8]
    b256:	781b      	ldrb	r3, [r3, #0]
    b258:	2bd2      	cmp	r3, #210	; 0xd2
{
    b25a:	4606      	mov	r6, r0
    b25c:	460c      	mov	r4, r1
    b25e:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    b260:	d116      	bne.n	b290 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
    b262:	6803      	ldr	r3, [r0, #0]
    b264:	6818      	ldr	r0, [r3, #0]
    b266:	f016 f8d7 	bl	21418 <bt_smp_sign>
		if (err) {
    b26a:	4605      	mov	r5, r0
    b26c:	b180      	cbz	r0, b290 <chan_send+0x40>
    b26e:	4b24      	ldr	r3, [pc, #144]	; (b300 <chan_send+0xb0>)
    b270:	4924      	ldr	r1, [pc, #144]	; (b304 <chan_send+0xb4>)
			BT_ERR("Error signing data");
    b272:	4825      	ldr	r0, [pc, #148]	; (b308 <chan_send+0xb8>)
    b274:	1ac9      	subs	r1, r1, r3
    b276:	08c9      	lsrs	r1, r1, #3
    b278:	0189      	lsls	r1, r1, #6
    b27a:	f041 0101 	orr.w	r1, r1, #1
    b27e:	f012 fb51 	bl	1d924 <log_0>
			net_buf_unref(buf);
    b282:	4620      	mov	r0, r4
    b284:	f00e fec8 	bl	1a018 <net_buf_unref>
}
    b288:	4628      	mov	r0, r5
    b28a:	b003      	add	sp, #12
    b28c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    b290:	f104 0008 	add.w	r0, r4, #8
    b294:	f016 fa31 	bl	216fa <net_buf_simple_headroom>
	state->len = buf->len;
    b298:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    b29c:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
    b29e:	b957      	cbnz	r7, b2b6 <chan_send+0x66>
	switch (att_op_get_type(buf->data[0])) {
    b2a0:	68a3      	ldr	r3, [r4, #8]
    b2a2:	7818      	ldrb	r0, [r3, #0]
    b2a4:	f014 ff7a 	bl	2019c <att_op_get_type>
    b2a8:	3801      	subs	r0, #1
    b2aa:	b2c3      	uxtb	r3, r0
    b2ac:	2b04      	cmp	r3, #4
    b2ae:	bf9c      	itt	ls
    b2b0:	4a16      	ldrls	r2, [pc, #88]	; (b30c <chan_send+0xbc>)
    b2b2:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    b2b6:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    b2b8:	f8c6 7118 	str.w	r7, [r6, #280]	; 0x118
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    b2bc:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    b2be:	4b14      	ldr	r3, [pc, #80]	; (b310 <chan_send+0xc0>)
    b2c0:	429f      	cmp	r7, r3
    b2c2:	d018      	beq.n	b2f6 <chan_send+0xa6>
	} else if (cb == chan_cfm_sent) {
    b2c4:	4b13      	ldr	r3, [pc, #76]	; (b314 <chan_send+0xc4>)
    b2c6:	429f      	cmp	r7, r3
    b2c8:	d017      	beq.n	b2fa <chan_send+0xaa>
		return att_sent;
    b2ca:	4913      	ldr	r1, [pc, #76]	; (b318 <chan_send+0xc8>)
    b2cc:	4b13      	ldr	r3, [pc, #76]	; (b31c <chan_send+0xcc>)
    b2ce:	4a14      	ldr	r2, [pc, #80]	; (b320 <chan_send+0xd0>)
    b2d0:	428f      	cmp	r7, r1
    b2d2:	bf18      	it	ne
    b2d4:	4613      	movne	r3, r2
			       &chan->chan.chan);
    b2d6:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    b2d8:	9600      	str	r6, [sp, #0]
    b2da:	4622      	mov	r2, r4
    b2dc:	2104      	movs	r1, #4
    b2de:	f014 fef9 	bl	200d4 <bt_l2cap_send_cb>
	if (err) {
    b2e2:	4605      	mov	r5, r0
    b2e4:	2800      	cmp	r0, #0
    b2e6:	d0cf      	beq.n	b288 <chan_send+0x38>
	buf->data = buf->__buf + state->offset;
    b2e8:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    b2ea:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    b2ee:	fa10 f088 	uxtah	r0, r0, r8
    b2f2:	60a0      	str	r0, [r4, #8]
}
    b2f4:	e7c8      	b.n	b288 <chan_send+0x38>
		return att_rsp_sent;
    b2f6:	4b0b      	ldr	r3, [pc, #44]	; (b324 <chan_send+0xd4>)
    b2f8:	e7ed      	b.n	b2d6 <chan_send+0x86>
		return att_cfm_sent;
    b2fa:	4b0b      	ldr	r3, [pc, #44]	; (b328 <chan_send+0xd8>)
    b2fc:	e7eb      	b.n	b2d6 <chan_send+0x86>
    b2fe:	bf00      	nop
    b300:	000225d8 	.word	0x000225d8
    b304:	000225e8 	.word	0x000225e8
    b308:	000257d7 	.word	0x000257d7
    b30c:	00022e34 	.word	0x00022e34
    b310:	000204df 	.word	0x000204df
    b314:	000204fb 	.word	0x000204fb
    b318:	0000b189 	.word	0x0000b189
    b31c:	0000aeb5 	.word	0x0000aeb5
    b320:	0002016d 	.word	0x0002016d
    b324:	0000aea5 	.word	0x0000aea5
    b328:	0000ae95 	.word	0x0000ae95

0000b32c <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    b32c:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
    b32e:	4a07      	ldr	r2, [pc, #28]	; (b34c <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    b330:	4604      	mov	r4, r0
    b332:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
    b334:	f7ff ff8c 	bl	b250 <chan_send>
	if (err) {
    b338:	b130      	cbz	r0, b348 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
    b33a:	4629      	mov	r1, r5
    b33c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
    b340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
    b344:	f016 b96e 	b.w	21624 <net_buf_put>
}
    b348:	bd38      	pop	{r3, r4, r5, pc}
    b34a:	bf00      	nop
    b34c:	000204df 	.word	0x000204df

0000b350 <read_type_cb>:
{
    b350:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    b354:	f8d2 8000 	ldr.w	r8, [r2]
{
    b358:	4606      	mov	r6, r0
    b35a:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    b35c:	6800      	ldr	r0, [r0, #0]
    b35e:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    b360:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    b364:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    b366:	f014 f9b1 	bl	1f6cc <bt_uuid_cmp>
    b36a:	4607      	mov	r7, r0
    b36c:	2800      	cmp	r0, #0
    b36e:	d13e      	bne.n	b3ee <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    b370:	4628      	mov	r0, r5
    b372:	2215      	movs	r2, #21
    b374:	4631      	mov	r1, r6
    b376:	f015 fcf1 	bl	20d5c <bt_gatt_check_perm>
    b37a:	4605      	mov	r5, r0
    b37c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    b37e:	b148      	cbz	r0, b394 <read_type_cb+0x44>
		if (data->rsp->len) {
    b380:	68e3      	ldr	r3, [r4, #12]
    b382:	781b      	ldrb	r3, [r3, #0]
    b384:	b923      	cbnz	r3, b390 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    b386:	2500      	movs	r5, #0
}
    b388:	4628      	mov	r0, r5
    b38a:	b003      	add	sp, #12
    b38c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    b390:	7527      	strb	r7, [r4, #20]
    b392:	e7f8      	b.n	b386 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    b394:	68a0      	ldr	r0, [r4, #8]
    b396:	f016 f957 	bl	21648 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
    b39a:	2102      	movs	r1, #2
    b39c:	3008      	adds	r0, #8
    b39e:	f016 f975 	bl	2168c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    b3a2:	4b14      	ldr	r3, [pc, #80]	; (b3f4 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    b3a4:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    b3a6:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    b3a8:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    b3ac:	4631      	mov	r1, r6
    b3ae:	9300      	str	r3, [sp, #0]
    b3b0:	9401      	str	r4, [sp, #4]
    b3b2:	462b      	mov	r3, r5
    b3b4:	4640      	mov	r0, r8
    b3b6:	f014 ffb3 	bl	20320 <att_chan_read>
	if (read < 0) {
    b3ba:	2800      	cmp	r0, #0
    b3bc:	da07      	bge.n	b3ce <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    b3be:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    b3c2:	bf26      	itte	cs
    b3c4:	4240      	negcs	r0, r0
    b3c6:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    b3c8:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    b3ca:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    b3cc:	e7dc      	b.n	b388 <read_type_cb+0x38>
	if (!data->item) {
    b3ce:	6923      	ldr	r3, [r4, #16]
    b3d0:	2b00      	cmp	r3, #0
    b3d2:	d0d8      	beq.n	b386 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    b3d4:	68a0      	ldr	r0, [r4, #8]
    b3d6:	f014 fec1 	bl	2015c <net_buf_frags_len>
    b3da:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
    b3de:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    b3e0:	68e3      	ldr	r3, [r4, #12]
    b3e2:	781d      	ldrb	r5, [r3, #0]
    b3e4:	42a8      	cmp	r0, r5
    b3e6:	bf94      	ite	ls
    b3e8:	2500      	movls	r5, #0
    b3ea:	2501      	movhi	r5, #1
    b3ec:	e7cc      	b.n	b388 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    b3ee:	2501      	movs	r5, #1
    b3f0:	e7ca      	b.n	b388 <read_type_cb+0x38>
    b3f2:	bf00      	nop
    b3f4:	00020179 	.word	0x00020179

0000b3f8 <bt_att_connected>:
{
    b3f8:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    b3fa:	2104      	movs	r1, #4
{
    b3fc:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    b3fe:	6800      	ldr	r0, [r0, #0]
    b400:	f014 fe81 	bl	20106 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    b404:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    b408:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b40a:	b91b      	cbnz	r3, b414 <bt_att_connected+0x1c>
    b40c:	f105 000c 	add.w	r0, r5, #12
    b410:	f016 fb9f 	bl	21b52 <z_impl_k_queue_init>
	parent->next = child;
    b414:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    b416:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
Z_GENLIST_PREPEND(slist, snode)
    b41a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
    b41c:	f504 738a 	add.w	r3, r4, #276	; 0x114
	list->head = node;
    b420:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    b422:	b902      	cbnz	r2, b426 <bt_att_connected+0x2e>
	list->tail = node;
    b424:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b426:	f3bf 8f5b 	dmb	ish
    b42a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
	k_work_init_delayable(&work->work, handler);
    b42e:	4908      	ldr	r1, [pc, #32]	; (b450 <bt_att_connected+0x58>)
    b430:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    b434:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    b436:	bf5e      	ittt	pl
    b438:	2317      	movpl	r3, #23
    b43a:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    b43e:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
    b442:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
}
    b446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b44a:	f016 bda7 	b.w	21f9c <k_work_init_delayable>
    b44e:	bf00      	nop
    b450:	0000bd2d 	.word	0x0000bd2d

0000b454 <bt_att_chan_create_pdu>:
{
    b454:	b538      	push	{r3, r4, r5, lr}
    b456:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    b458:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    b45c:	3201      	adds	r2, #1
    b45e:	428a      	cmp	r2, r1
    b460:	d90c      	bls.n	b47c <bt_att_chan_create_pdu+0x28>
    b462:	481a      	ldr	r0, [pc, #104]	; (b4cc <bt_att_chan_create_pdu+0x78>)
    b464:	4b1a      	ldr	r3, [pc, #104]	; (b4d0 <bt_att_chan_create_pdu+0x7c>)
    b466:	1a1b      	subs	r3, r3, r0
    b468:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    b46a:	019b      	lsls	r3, r3, #6
    b46c:	4819      	ldr	r0, [pc, #100]	; (b4d4 <bt_att_chan_create_pdu+0x80>)
    b46e:	f043 0302 	orr.w	r3, r3, #2
    b472:	f012 fa7d 	bl	1d970 <log_2>
		return NULL;
    b476:	2400      	movs	r4, #0
}
    b478:	4620      	mov	r0, r4
    b47a:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    b47c:	4628      	mov	r0, r5
    b47e:	f014 fe8d 	bl	2019c <att_op_get_type>
    b482:	2802      	cmp	r0, #2
    b484:	d001      	beq.n	b48a <bt_att_chan_create_pdu+0x36>
    b486:	2804      	cmp	r0, #4
    b488:	d114      	bne.n	b4b4 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    b48a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    b48e:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    b490:	2100      	movs	r1, #0
    b492:	4608      	mov	r0, r1
    b494:	f014 fe1b 	bl	200ce <bt_l2cap_create_pdu_timeout>
    b498:	4604      	mov	r4, r0
	if (!buf) {
    b49a:	b980      	cbnz	r0, b4be <bt_att_chan_create_pdu+0x6a>
    b49c:	4b0b      	ldr	r3, [pc, #44]	; (b4cc <bt_att_chan_create_pdu+0x78>)
    b49e:	4a0c      	ldr	r2, [pc, #48]	; (b4d0 <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    b4a0:	480d      	ldr	r0, [pc, #52]	; (b4d8 <bt_att_chan_create_pdu+0x84>)
    b4a2:	1ad2      	subs	r2, r2, r3
    b4a4:	08d2      	lsrs	r2, r2, #3
    b4a6:	0192      	lsls	r2, r2, #6
    b4a8:	f042 0201 	orr.w	r2, r2, #1
    b4ac:	4629      	mov	r1, r5
    b4ae:	f012 fa48 	bl	1d942 <log_1>
		return NULL;
    b4b2:	e7e1      	b.n	b478 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
    b4b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b4b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b4bc:	e7e8      	b.n	b490 <bt_att_chan_create_pdu+0x3c>
    b4be:	2101      	movs	r1, #1
    b4c0:	3008      	adds	r0, #8
    b4c2:	f016 f8e3 	bl	2168c <net_buf_simple_add>
	hdr->code = op;
    b4c6:	7005      	strb	r5, [r0, #0]
	return buf;
    b4c8:	e7d6      	b.n	b478 <bt_att_chan_create_pdu+0x24>
    b4ca:	bf00      	nop
    b4cc:	000225d8 	.word	0x000225d8
    b4d0:	000225e8 	.word	0x000225e8
    b4d4:	000257ea 	.word	0x000257ea
    b4d8:	000255d7 	.word	0x000255d7

0000b4dc <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    b4dc:	898b      	ldrh	r3, [r1, #12]
{
    b4de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b4e2:	4604      	mov	r4, r0
    b4e4:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    b4e6:	b963      	cbnz	r3, b502 <bt_att_recv+0x26>
    b4e8:	494c      	ldr	r1, [pc, #304]	; (b61c <bt_att_recv+0x140>)
    b4ea:	4b4d      	ldr	r3, [pc, #308]	; (b620 <bt_att_recv+0x144>)
		BT_ERR("Too small ATT PDU received");
    b4ec:	484d      	ldr	r0, [pc, #308]	; (b624 <bt_att_recv+0x148>)
    b4ee:	1ac9      	subs	r1, r1, r3
    b4f0:	08c9      	lsrs	r1, r1, #3
    b4f2:	0189      	lsls	r1, r1, #6
    b4f4:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
    b4f8:	f012 fa14 	bl	1d924 <log_0>
}
    b4fc:	2000      	movs	r0, #0
    b4fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    b502:	2101      	movs	r1, #1
    b504:	f108 0008 	add.w	r0, r8, #8
    b508:	f016 f8e7 	bl	216da <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    b50c:	f854 3c08 	ldr.w	r3, [r4, #-8]
    b510:	4605      	mov	r5, r0
    b512:	2b00      	cmp	r3, #0
    b514:	d0f2      	beq.n	b4fc <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
    b516:	7801      	ldrb	r1, [r0, #0]
    b518:	4a43      	ldr	r2, [pc, #268]	; (b628 <bt_att_recv+0x14c>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    b51a:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    b51e:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    b520:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    b524:	4288      	cmp	r0, r1
    b526:	d11e      	bne.n	b566 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
    b528:	00d8      	lsls	r0, r3, #3
    b52a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    b52e:	789f      	ldrb	r7, [r3, #2]
    b530:	2f01      	cmp	r7, #1
    b532:	d133      	bne.n	b59c <bt_att_recv+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b534:	f3bf 8f5b 	dmb	ish
    b538:	34c0      	adds	r4, #192	; 0xc0
    b53a:	e854 3f00 	ldrex	r3, [r4]
    b53e:	f043 0101 	orr.w	r1, r3, #1
    b542:	e844 1c00 	strex	ip, r1, [r4]
    b546:	f1bc 0f00 	cmp.w	ip, #0
    b54a:	d1f6      	bne.n	b53a <bt_att_recv+0x5e>
    b54c:	f3bf 8f5b 	dmb	ish
    b550:	07d9      	lsls	r1, r3, #31
    b552:	d53e      	bpl.n	b5d2 <bt_att_recv+0xf6>
    b554:	4931      	ldr	r1, [pc, #196]	; (b61c <bt_att_recv+0x140>)
    b556:	4b32      	ldr	r3, [pc, #200]	; (b620 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected request");
    b558:	4834      	ldr	r0, [pc, #208]	; (b62c <bt_att_recv+0x150>)
    b55a:	1ac9      	subs	r1, r1, r3
    b55c:	08c9      	lsrs	r1, r1, #3
    b55e:	0189      	lsls	r1, r1, #6
    b560:	f041 0102 	orr.w	r1, r1, #2
    b564:	e7c8      	b.n	b4f8 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    b566:	3301      	adds	r3, #1
    b568:	2b0d      	cmp	r3, #13
    b56a:	d1d9      	bne.n	b520 <bt_att_recv+0x44>
    b56c:	4b2c      	ldr	r3, [pc, #176]	; (b620 <bt_att_recv+0x144>)
    b56e:	4a2b      	ldr	r2, [pc, #172]	; (b61c <bt_att_recv+0x140>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    b570:	482f      	ldr	r0, [pc, #188]	; (b630 <bt_att_recv+0x154>)
    b572:	1ad2      	subs	r2, r2, r3
    b574:	08d2      	lsrs	r2, r2, #3
    b576:	0192      	lsls	r2, r2, #6
    b578:	f042 0202 	orr.w	r2, r2, #2
    b57c:	f012 f9e1 	bl	1d942 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    b580:	7829      	ldrb	r1, [r5, #0]
    b582:	4608      	mov	r0, r1
    b584:	f014 fe0a 	bl	2019c <att_op_get_type>
    b588:	2800      	cmp	r0, #0
    b58a:	d0b7      	beq.n	b4fc <bt_att_recv+0x20>
	if (!req) {
    b58c:	2900      	cmp	r1, #0
    b58e:	d0b5      	beq.n	b4fc <bt_att_recv+0x20>
    b590:	2306      	movs	r3, #6
    b592:	2200      	movs	r2, #0
    b594:	4630      	mov	r0, r6
    b596:	f015 f872 	bl	2067e <send_err_rsp.part.0>
    b59a:	e7af      	b.n	b4fc <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
    b59c:	2f05      	cmp	r7, #5
    b59e:	d118      	bne.n	b5d2 <bt_att_recv+0xf6>
    b5a0:	f3bf 8f5b 	dmb	ish
    b5a4:	34c0      	adds	r4, #192	; 0xc0
    b5a6:	e854 3f00 	ldrex	r3, [r4]
    b5aa:	f043 0102 	orr.w	r1, r3, #2
    b5ae:	e844 1c00 	strex	ip, r1, [r4]
    b5b2:	f1bc 0f00 	cmp.w	ip, #0
    b5b6:	d1f6      	bne.n	b5a6 <bt_att_recv+0xca>
    b5b8:	f3bf 8f5b 	dmb	ish
    b5bc:	079b      	lsls	r3, r3, #30
    b5be:	d508      	bpl.n	b5d2 <bt_att_recv+0xf6>
    b5c0:	4916      	ldr	r1, [pc, #88]	; (b61c <bt_att_recv+0x140>)
    b5c2:	4b17      	ldr	r3, [pc, #92]	; (b620 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected indication");
    b5c4:	481b      	ldr	r0, [pc, #108]	; (b634 <bt_att_recv+0x158>)
    b5c6:	1ac9      	subs	r1, r1, r3
    b5c8:	08c9      	lsrs	r1, r1, #3
    b5ca:	0189      	lsls	r1, r1, #6
    b5cc:	f041 0102 	orr.w	r1, r1, #2
    b5d0:	e792      	b.n	b4f8 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    b5d2:	1813      	adds	r3, r2, r0
    b5d4:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    b5d8:	785a      	ldrb	r2, [r3, #1]
    b5da:	428a      	cmp	r2, r1
    b5dc:	d90e      	bls.n	b5fc <bt_att_recv+0x120>
    b5de:	4a10      	ldr	r2, [pc, #64]	; (b620 <bt_att_recv+0x144>)
    b5e0:	4b0e      	ldr	r3, [pc, #56]	; (b61c <bt_att_recv+0x140>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    b5e2:	4815      	ldr	r0, [pc, #84]	; (b638 <bt_att_recv+0x15c>)
    b5e4:	1a9b      	subs	r3, r3, r2
    b5e6:	08db      	lsrs	r3, r3, #3
    b5e8:	019b      	lsls	r3, r3, #6
    b5ea:	782a      	ldrb	r2, [r5, #0]
    b5ec:	f043 0301 	orr.w	r3, r3, #1
    b5f0:	f012 f9be 	bl	1d970 <log_2>
	if (handler->type == ATT_REQUEST && err) {
    b5f4:	2f01      	cmp	r7, #1
    b5f6:	d181      	bne.n	b4fc <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    b5f8:	2304      	movs	r3, #4
    b5fa:	e00a      	b.n	b612 <bt_att_recv+0x136>
		err = handler->func(att_chan, buf);
    b5fc:	685b      	ldr	r3, [r3, #4]
    b5fe:	4641      	mov	r1, r8
    b600:	4630      	mov	r0, r6
    b602:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    b604:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    b606:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    b608:	f47f af78 	bne.w	b4fc <bt_att_recv+0x20>
    b60c:	2800      	cmp	r0, #0
    b60e:	f43f af75 	beq.w	b4fc <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
    b612:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    b614:	2900      	cmp	r1, #0
    b616:	f43f af71 	beq.w	b4fc <bt_att_recv+0x20>
    b61a:	e7ba      	b.n	b592 <bt_att_recv+0xb6>
    b61c:	000225e8 	.word	0x000225e8
    b620:	000225d8 	.word	0x000225d8
    b624:	0002580f 	.word	0x0002580f
    b628:	00022e48 	.word	0x00022e48
    b62c:	0002582a 	.word	0x0002582a
    b630:	00025884 	.word	0x00025884
    b634:	00025846 	.word	0x00025846
    b638:	00025865 	.word	0x00025865

0000b63c <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    b63c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b640:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    b642:	6803      	ldr	r3, [r0, #0]
    b644:	460e      	mov	r6, r1
    b646:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    b648:	b087      	sub	sp, #28
    b64a:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    b64c:	bf18      	it	ne
    b64e:	2101      	movne	r1, #1
    b650:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    b652:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    b654:	f015 fbad 	bl	20db2 <bt_gatt_change_aware>
    b658:	2800      	cmp	r0, #0
    b65a:	d04a      	beq.n	b6f2 <att_write_rsp.constprop.0+0xb6>
	if (!handle) {
    b65c:	2f00      	cmp	r7, #0
    b65e:	d04a      	beq.n	b6f6 <att_write_rsp.constprop.0+0xba>
	(void)memset(&data, 0, sizeof(data));
    b660:	2218      	movs	r2, #24
    b662:	2100      	movs	r1, #0
    b664:	4668      	mov	r0, sp
    b666:	f013 ff62 	bl	1f52e <memset>
	if (rsp) {
    b66a:	f1b8 0f00 	cmp.w	r8, #0
    b66e:	d122      	bne.n	b6b6 <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
    b670:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    b672:	4a22      	ldr	r2, [pc, #136]	; (b6fc <att_write_rsp.constprop.0+0xc0>)
	data.conn = chan->att->conn;
    b674:	681b      	ldr	r3, [r3, #0]
    b676:	9300      	str	r3, [sp, #0]
	data.value = value;
    b678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b67a:	9303      	str	r3, [sp, #12]
	data.len = len;
    b67c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    b680:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    b684:	2301      	movs	r3, #1
    b686:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
    b68a:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    b68e:	466b      	mov	r3, sp
    b690:	4639      	mov	r1, r7
    b692:	4638      	mov	r0, r7
	data.req = req;
    b694:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    b698:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    b69c:	f014 fdab 	bl	201f6 <bt_gatt_foreach_attr>
	if (data.err) {
    b6a0:	f89d 4014 	ldrb.w	r4, [sp, #20]
    b6a4:	b1f4      	cbz	r4, b6e4 <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
    b6a6:	f1b8 0f00 	cmp.w	r8, #0
    b6aa:	d10e      	bne.n	b6ca <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    b6ac:	2400      	movs	r4, #0
}
    b6ae:	4620      	mov	r0, r4
    b6b0:	b007      	add	sp, #28
    b6b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    b6b6:	2200      	movs	r2, #0
    b6b8:	4641      	mov	r1, r8
    b6ba:	4628      	mov	r0, r5
    b6bc:	f7ff feca 	bl	b454 <bt_att_chan_create_pdu>
    b6c0:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    b6c2:	2800      	cmp	r0, #0
    b6c4:	d1d4      	bne.n	b670 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
    b6c6:	240e      	movs	r4, #14
    b6c8:	e7f1      	b.n	b6ae <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
    b6ca:	9801      	ldr	r0, [sp, #4]
    b6cc:	f00e fca4 	bl	1a018 <net_buf_unref>
	if (!req) {
    b6d0:	2e00      	cmp	r6, #0
    b6d2:	d0eb      	beq.n	b6ac <att_write_rsp.constprop.0+0x70>
    b6d4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    b6d8:	463a      	mov	r2, r7
    b6da:	4631      	mov	r1, r6
    b6dc:	4628      	mov	r0, r5
    b6de:	f014 ffce 	bl	2067e <send_err_rsp.part.0>
    b6e2:	e7e3      	b.n	b6ac <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
    b6e4:	9901      	ldr	r1, [sp, #4]
    b6e6:	2900      	cmp	r1, #0
    b6e8:	d0e0      	beq.n	b6ac <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    b6ea:	4628      	mov	r0, r5
    b6ec:	f7ff fe1e 	bl	b32c <bt_att_chan_send_rsp.constprop.0>
    b6f0:	e7dd      	b.n	b6ae <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    b6f2:	2412      	movs	r4, #18
    b6f4:	e7db      	b.n	b6ae <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
    b6f6:	2401      	movs	r4, #1
    b6f8:	e7d9      	b.n	b6ae <att_write_rsp.constprop.0+0x72>
    b6fa:	bf00      	nop
    b6fc:	000202c5 	.word	0x000202c5

0000b700 <bt_att_create_pdu>:
{
    b700:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b702:	4615      	mov	r5, r2
    b704:	9101      	str	r1, [sp, #4]
	att = att_get(conn);
    b706:	f7ff fbdd 	bl	aec4 <att_get>
	if (!att) {
    b70a:	b1d0      	cbz	r0, b742 <bt_att_create_pdu+0x42>
	return list->head;
    b70c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    b70e:	1c6e      	adds	r6, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    b710:	b163      	cbz	r3, b72c <bt_att_create_pdu+0x2c>
    b712:	f5b3 708e 	subs.w	r0, r3, #284	; 0x11c
    b716:	d009      	beq.n	b72c <bt_att_create_pdu+0x2c>
	return node->next;
    b718:	681b      	ldr	r3, [r3, #0]
    b71a:	9901      	ldr	r1, [sp, #4]
    b71c:	b10b      	cbz	r3, b722 <bt_att_create_pdu+0x22>
    b71e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    b722:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    b726:	4296      	cmp	r6, r2
    b728:	d90e      	bls.n	b748 <bt_att_create_pdu+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    b72a:	b99b      	cbnz	r3, b754 <bt_att_create_pdu+0x54>
    b72c:	4a0f      	ldr	r2, [pc, #60]	; (b76c <bt_att_create_pdu+0x6c>)
    b72e:	4b10      	ldr	r3, [pc, #64]	; (b770 <bt_att_create_pdu+0x70>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    b730:	4810      	ldr	r0, [pc, #64]	; (b774 <bt_att_create_pdu+0x74>)
    b732:	1ad2      	subs	r2, r2, r3
    b734:	08d2      	lsrs	r2, r2, #3
    b736:	0192      	lsls	r2, r2, #6
    b738:	f042 0202 	orr.w	r2, r2, #2
    b73c:	4631      	mov	r1, r6
    b73e:	f012 f900 	bl	1d942 <log_1>
}
    b742:	2000      	movs	r0, #0
    b744:	b002      	add	sp, #8
    b746:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    b748:	462a      	mov	r2, r5
}
    b74a:	b002      	add	sp, #8
    b74c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    b750:	f7ff be80 	b.w	b454 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
    b754:	f513 748e 	adds.w	r4, r3, #284	; 0x11c
    b758:	d004      	beq.n	b764 <bt_att_create_pdu+0x64>
	return node->next;
    b75a:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    b75e:	b10c      	cbz	r4, b764 <bt_att_create_pdu+0x64>
    b760:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
{
    b764:	4618      	mov	r0, r3
    b766:	4623      	mov	r3, r4
    b768:	e7db      	b.n	b722 <bt_att_create_pdu+0x22>
    b76a:	bf00      	nop
    b76c:	000225e8 	.word	0x000225e8
    b770:	000225d8 	.word	0x000225d8
    b774:	0002589e 	.word	0x0002589e

0000b778 <att_read_group_req>:
{
    b778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    b77c:	898c      	ldrh	r4, [r1, #12]
    b77e:	3c04      	subs	r4, #4
    b780:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    b782:	2c02      	cmp	r4, #2
{
    b784:	4605      	mov	r5, r0
    b786:	b08c      	sub	sp, #48	; 0x30
    b788:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    b78a:	d001      	beq.n	b790 <att_read_group_req+0x18>
    b78c:	2c10      	cmp	r4, #16
    b78e:	d16e      	bne.n	b86e <att_read_group_req+0xf6>
    b790:	2104      	movs	r1, #4
    b792:	3008      	adds	r0, #8
    b794:	f015 ffa1 	bl	216da <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    b798:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    b79c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    b79e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    b7a0:	1d01      	adds	r1, r0, #4
    b7a2:	4622      	mov	r2, r4
    b7a4:	4640      	mov	r0, r8
    b7a6:	f013 ffbf 	bl	1f728 <bt_uuid_create>
    b7aa:	2800      	cmp	r0, #0
    b7ac:	d061      	beq.n	b872 <att_read_group_req+0xfa>
	if (!start || !end) {
    b7ae:	2e00      	cmp	r6, #0
    b7b0:	d03a      	beq.n	b828 <att_read_group_req+0xb0>
    b7b2:	2400      	movs	r4, #0
    b7b4:	2f00      	cmp	r7, #0
    b7b6:	d036      	beq.n	b826 <att_read_group_req+0xae>
	if (start > end) {
    b7b8:	42be      	cmp	r6, r7
    b7ba:	d835      	bhi.n	b828 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    b7bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    b7c0:	a901      	add	r1, sp, #4
    b7c2:	4640      	mov	r0, r8
    b7c4:	f88d 4004 	strb.w	r4, [sp, #4]
    b7c8:	f8ad 3006 	strh.w	r3, [sp, #6]
    b7cc:	f013 ff7e 	bl	1f6cc <bt_uuid_cmp>
    b7d0:	2800      	cmp	r0, #0
    b7d2:	d134      	bne.n	b83e <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    b7d4:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    b7d6:	2214      	movs	r2, #20
    b7d8:	2100      	movs	r1, #0
    b7da:	a807      	add	r0, sp, #28
    b7dc:	f013 fea7 	bl	1f52e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    b7e0:	2201      	movs	r2, #1
    b7e2:	2111      	movs	r1, #17
    b7e4:	4620      	mov	r0, r4
    b7e6:	f7ff ff8b 	bl	b700 <bt_att_create_pdu>
    b7ea:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    b7ec:	2800      	cmp	r0, #0
    b7ee:	d040      	beq.n	b872 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
    b7f0:	2101      	movs	r1, #1
    b7f2:	3008      	adds	r0, #8
	data.uuid = uuid;
    b7f4:	e9cd 5807 	strd	r5, r8, [sp, #28]
    b7f8:	f015 ff48 	bl	2168c <net_buf_simple_add>
	data.rsp->len = 0U;
    b7fc:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    b800:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    b802:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    b804:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    b808:	4a1b      	ldr	r2, [pc, #108]	; (b878 <att_read_group_req+0x100>)
	data.group = NULL;
    b80a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    b80e:	4639      	mov	r1, r7
    b810:	4630      	mov	r0, r6
    b812:	f014 fcf0 	bl	201f6 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    b816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b818:	781c      	ldrb	r4, [r3, #0]
    b81a:	bb1c      	cbnz	r4, b864 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    b81c:	9809      	ldr	r0, [sp, #36]	; 0x24
    b81e:	f00e fbfb 	bl	1a018 <net_buf_unref>
	if (!req) {
    b822:	230a      	movs	r3, #10
    b824:	e018      	b.n	b858 <att_read_group_req+0xe0>
			*err = 0U;
    b826:	463e      	mov	r6, r7
	if (!req) {
    b828:	2301      	movs	r3, #1
    b82a:	4632      	mov	r2, r6
    b82c:	2110      	movs	r1, #16
    b82e:	4628      	mov	r0, r5
    b830:	f014 ff25 	bl	2067e <send_err_rsp.part.0>
		return 0;
    b834:	2400      	movs	r4, #0
}
    b836:	4620      	mov	r0, r4
    b838:	b00c      	add	sp, #48	; 0x30
    b83a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    b83e:	f642 0301 	movw	r3, #10241	; 0x2801
    b842:	a907      	add	r1, sp, #28
    b844:	4640      	mov	r0, r8
    b846:	f88d 401c 	strb.w	r4, [sp, #28]
    b84a:	f8ad 301e 	strh.w	r3, [sp, #30]
    b84e:	f013 ff3d 	bl	1f6cc <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    b852:	2800      	cmp	r0, #0
    b854:	d0be      	beq.n	b7d4 <att_read_group_req+0x5c>
	if (!req) {
    b856:	2310      	movs	r3, #16
    b858:	4632      	mov	r2, r6
    b85a:	2110      	movs	r1, #16
    b85c:	4628      	mov	r0, r5
    b85e:	f014 ff0e 	bl	2067e <send_err_rsp.part.0>
		return 0;
    b862:	e7e8      	b.n	b836 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    b864:	9909      	ldr	r1, [sp, #36]	; 0x24
    b866:	4628      	mov	r0, r5
    b868:	f7ff fd60 	bl	b32c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    b86c:	e7e2      	b.n	b834 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    b86e:	2404      	movs	r4, #4
    b870:	e7e1      	b.n	b836 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    b872:	240e      	movs	r4, #14
    b874:	e7df      	b.n	b836 <att_read_group_req+0xbe>
    b876:	bf00      	nop
    b878:	0000b1a5 	.word	0x0000b1a5

0000b87c <att_read_mult_req>:
{
    b87c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    b880:	6886      	ldr	r6, [r0, #8]
{
    b882:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
    b884:	2210      	movs	r2, #16
{
    b886:	4604      	mov	r4, r0
    b888:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    b88a:	4668      	mov	r0, sp
    b88c:	2100      	movs	r1, #0
    b88e:	f013 fe4e 	bl	1f52e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    b892:	2200      	movs	r2, #0
    b894:	210f      	movs	r1, #15
    b896:	4630      	mov	r0, r6
    b898:	f7ff ff32 	bl	b700 <bt_att_create_pdu>
    b89c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    b89e:	b358      	cbz	r0, b8f8 <att_read_mult_req+0x7c>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b8a0:	f8df 9058 	ldr.w	r9, [pc, #88]	; b8fc <att_read_mult_req+0x80>
	data.chan = chan;
    b8a4:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    b8a6:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    b8aa:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    b8ae:	89ab      	ldrh	r3, [r5, #12]
    b8b0:	2b01      	cmp	r3, #1
    b8b2:	d804      	bhi.n	b8be <att_read_mult_req+0x42>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    b8b4:	9902      	ldr	r1, [sp, #8]
    b8b6:	4620      	mov	r0, r4
    b8b8:	f7ff fd38 	bl	b32c <bt_att_chan_send_rsp.constprop.0>
    b8bc:	e018      	b.n	b8f0 <att_read_mult_req+0x74>
    b8be:	4638      	mov	r0, r7
    b8c0:	f015 ff13 	bl	216ea <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b8c4:	466b      	mov	r3, sp
    b8c6:	464a      	mov	r2, r9
    b8c8:	4601      	mov	r1, r0
    b8ca:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    b8cc:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b8d0:	f014 fc91 	bl	201f6 <bt_gatt_foreach_attr>
		if (data.err) {
    b8d4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    b8d8:	2b00      	cmp	r3, #0
    b8da:	d0e8      	beq.n	b8ae <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    b8dc:	9802      	ldr	r0, [sp, #8]
    b8de:	f00e fb9b 	bl	1a018 <net_buf_unref>
	if (!req) {
    b8e2:	f89d 300c 	ldrb.w	r3, [sp, #12]
    b8e6:	4632      	mov	r2, r6
    b8e8:	210e      	movs	r1, #14
    b8ea:	4620      	mov	r0, r4
    b8ec:	f014 fec7 	bl	2067e <send_err_rsp.part.0>
	return 0;
    b8f0:	2000      	movs	r0, #0
}
    b8f2:	b005      	add	sp, #20
    b8f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    b8f8:	200e      	movs	r0, #14
    b8fa:	e7fa      	b.n	b8f2 <att_read_mult_req+0x76>
    b8fc:	00020517 	.word	0x00020517

0000b900 <att_read_rsp>:
{
    b900:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    b904:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    b908:	4605      	mov	r5, r0
    b90a:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    b90c:	4640      	mov	r0, r8
    b90e:	2101      	movs	r1, #1
{
    b910:	4614      	mov	r4, r2
    b912:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    b914:	f015 fa4d 	bl	20db2 <bt_gatt_change_aware>
    b918:	b388      	cbz	r0, b97e <att_read_rsp+0x7e>
	if (!handle) {
    b91a:	b396      	cbz	r6, b982 <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
    b91c:	2210      	movs	r2, #16
    b91e:	2100      	movs	r1, #0
    b920:	4668      	mov	r0, sp
    b922:	f013 fe04 	bl	1f52e <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    b926:	2200      	movs	r2, #0
    b928:	4621      	mov	r1, r4
    b92a:	4640      	mov	r0, r8
    b92c:	f7ff fee8 	bl	b700 <bt_att_create_pdu>
    b930:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    b932:	b340      	cbz	r0, b986 <att_read_rsp+0x86>
	data.offset = offset;
    b934:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    b938:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    b93c:	2301      	movs	r3, #1
    b93e:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b942:	4a12      	ldr	r2, [pc, #72]	; (b98c <att_read_rsp+0x8c>)
	data.chan = chan;
    b944:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b946:	466b      	mov	r3, sp
    b948:	4631      	mov	r1, r6
    b94a:	4630      	mov	r0, r6
    b94c:	f014 fc53 	bl	201f6 <bt_gatt_foreach_attr>
	if (data.err) {
    b950:	f89d 400c 	ldrb.w	r4, [sp, #12]
    b954:	b174      	cbz	r4, b974 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    b956:	9802      	ldr	r0, [sp, #8]
    b958:	f00e fb5e 	bl	1a018 <net_buf_unref>
	if (!req) {
    b95c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    b960:	4632      	mov	r2, r6
    b962:	4639      	mov	r1, r7
    b964:	4628      	mov	r0, r5
    b966:	f014 fe8a 	bl	2067e <send_err_rsp.part.0>
		return 0;
    b96a:	2400      	movs	r4, #0
}
    b96c:	4620      	mov	r0, r4
    b96e:	b004      	add	sp, #16
    b970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    b974:	9902      	ldr	r1, [sp, #8]
    b976:	4628      	mov	r0, r5
    b978:	f7ff fcd8 	bl	b32c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    b97c:	e7f6      	b.n	b96c <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    b97e:	2412      	movs	r4, #18
    b980:	e7f4      	b.n	b96c <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    b982:	2401      	movs	r4, #1
    b984:	e7f2      	b.n	b96c <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    b986:	240e      	movs	r4, #14
    b988:	e7f0      	b.n	b96c <att_read_rsp+0x6c>
    b98a:	bf00      	nop
    b98c:	00020517 	.word	0x00020517

0000b990 <att_read_type_req>:
{
    b990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    b994:	898c      	ldrh	r4, [r1, #12]
    b996:	3c04      	subs	r4, #4
    b998:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    b99a:	2c02      	cmp	r4, #2
{
    b99c:	4605      	mov	r5, r0
    b99e:	b08c      	sub	sp, #48	; 0x30
    b9a0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    b9a2:	d001      	beq.n	b9a8 <att_read_type_req+0x18>
    b9a4:	2c10      	cmp	r4, #16
    b9a6:	d14f      	bne.n	ba48 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
    b9a8:	2104      	movs	r1, #4
    b9aa:	3008      	adds	r0, #8
    b9ac:	f015 fe95 	bl	216da <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    b9b0:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    b9b4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    b9b6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    b9b8:	1d01      	adds	r1, r0, #4
    b9ba:	4622      	mov	r2, r4
    b9bc:	4640      	mov	r0, r8
    b9be:	f013 feb3 	bl	1f728 <bt_uuid_create>
    b9c2:	b188      	cbz	r0, b9e8 <att_read_type_req+0x58>
	if (!start || !end) {
    b9c4:	b19e      	cbz	r6, b9ee <att_read_type_req+0x5e>
    b9c6:	b18f      	cbz	r7, b9ec <att_read_type_req+0x5c>
	if (start > end) {
    b9c8:	42b7      	cmp	r7, r6
    b9ca:	d310      	bcc.n	b9ee <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    b9cc:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    b9ce:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    b9d0:	2100      	movs	r1, #0
    b9d2:	eb0d 0002 	add.w	r0, sp, r2
    b9d6:	f013 fdaa 	bl	1f52e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    b9da:	2201      	movs	r2, #1
    b9dc:	2109      	movs	r1, #9
    b9de:	4620      	mov	r0, r4
    b9e0:	f7ff fe8e 	bl	b700 <bt_att_create_pdu>
    b9e4:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    b9e6:	b968      	cbnz	r0, ba04 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    b9e8:	240e      	movs	r4, #14
    b9ea:	e007      	b.n	b9fc <att_read_type_req+0x6c>
			*err = 0U;
    b9ec:	463e      	mov	r6, r7
	if (!req) {
    b9ee:	2301      	movs	r3, #1
    b9f0:	4632      	mov	r2, r6
    b9f2:	2108      	movs	r1, #8
    b9f4:	4628      	mov	r0, r5
    b9f6:	f014 fe42 	bl	2067e <send_err_rsp.part.0>
		return 0;
    b9fa:	2400      	movs	r4, #0
}
    b9fc:	4620      	mov	r0, r4
    b9fe:	b00c      	add	sp, #48	; 0x30
    ba00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    ba04:	2101      	movs	r1, #1
    ba06:	3008      	adds	r0, #8
	data.uuid = uuid;
    ba08:	e9cd 5806 	strd	r5, r8, [sp, #24]
    ba0c:	f015 fe3e 	bl	2168c <net_buf_simple_add>
	data.rsp->len = 0U;
    ba10:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    ba14:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    ba16:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    ba18:	4a0c      	ldr	r2, [pc, #48]	; (ba4c <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
    ba1a:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    ba1e:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    ba20:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    ba24:	4630      	mov	r0, r6
    ba26:	ab06      	add	r3, sp, #24
    ba28:	f014 fbe5 	bl	201f6 <bt_gatt_foreach_attr>
	if (data.err) {
    ba2c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    ba30:	b12c      	cbz	r4, ba3e <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    ba32:	9808      	ldr	r0, [sp, #32]
    ba34:	f00e faf0 	bl	1a018 <net_buf_unref>
	if (!req) {
    ba38:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    ba3c:	e7d8      	b.n	b9f0 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    ba3e:	9908      	ldr	r1, [sp, #32]
    ba40:	4628      	mov	r0, r5
    ba42:	f7ff fc73 	bl	b32c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    ba46:	e7d9      	b.n	b9fc <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    ba48:	2404      	movs	r4, #4
    ba4a:	e7d7      	b.n	b9fc <att_read_type_req+0x6c>
    ba4c:	0000b351 	.word	0x0000b351

0000ba50 <att_find_type_req>:
{
    ba50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ba54:	4688      	mov	r8, r1
    ba56:	b086      	sub	sp, #24
    ba58:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    ba5a:	2106      	movs	r1, #6
    ba5c:	f108 0008 	add.w	r0, r8, #8
    ba60:	f015 fe3b 	bl	216da <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    ba64:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    ba66:	b317      	cbz	r7, baae <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    ba68:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    ba6c:	f1b9 0f00 	cmp.w	r9, #0
    ba70:	d01c      	beq.n	baac <att_find_type_req+0x5c>
	if (start > end) {
    ba72:	454f      	cmp	r7, r9
    ba74:	d81b      	bhi.n	baae <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    ba76:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    ba78:	f8ad 3002 	strh.w	r3, [sp, #2]
    ba7c:	2400      	movs	r4, #0
    ba7e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    ba82:	a901      	add	r1, sp, #4
    ba84:	4668      	mov	r0, sp
	value = buf->data;
    ba86:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    ba8a:	f88d 4000 	strb.w	r4, [sp]
    ba8e:	f88d 4004 	strb.w	r4, [sp, #4]
    ba92:	f8ad 3006 	strh.w	r3, [sp, #6]
    ba96:	f013 fe19 	bl	1f6cc <bt_uuid_cmp>
    ba9a:	4606      	mov	r6, r0
    ba9c:	b190      	cbz	r0, bac4 <att_find_type_req+0x74>
	if (!req) {
    ba9e:	230a      	movs	r3, #10
    baa0:	463a      	mov	r2, r7
    baa2:	2106      	movs	r1, #6
    baa4:	4628      	mov	r0, r5
    baa6:	f014 fdea 	bl	2067e <send_err_rsp.part.0>
		return 0;
    baaa:	e007      	b.n	babc <att_find_type_req+0x6c>
			*err = 0U;
    baac:	464f      	mov	r7, r9
	if (!req) {
    baae:	2301      	movs	r3, #1
    bab0:	463a      	mov	r2, r7
    bab2:	2106      	movs	r1, #6
    bab4:	4628      	mov	r0, r5
    bab6:	f014 fde2 	bl	2067e <send_err_rsp.part.0>
		return 0;
    baba:	2400      	movs	r4, #0
}
    babc:	4620      	mov	r0, r4
    babe:	b006      	add	sp, #24
    bac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    bac4:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    bac8:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    bacc:	4601      	mov	r1, r0
    bace:	2214      	movs	r2, #20
    bad0:	a801      	add	r0, sp, #4
    bad2:	f013 fd2c 	bl	1f52e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    bad6:	4632      	mov	r2, r6
    bad8:	2107      	movs	r1, #7
    bada:	4640      	mov	r0, r8
    badc:	f7ff fe10 	bl	b700 <bt_att_create_pdu>
    bae0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    bae2:	b1d8      	cbz	r0, bb1c <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    bae4:	230a      	movs	r3, #10
    bae6:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    baea:	4a0d      	ldr	r2, [pc, #52]	; (bb20 <att_find_type_req+0xd0>)
	data.value_len = value_len;
    baec:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    baf0:	ab01      	add	r3, sp, #4
    baf2:	4649      	mov	r1, r9
    baf4:	4638      	mov	r0, r7
	data.value = value;
    baf6:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    bafa:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    bafc:	f014 fb7b 	bl	201f6 <bt_gatt_foreach_attr>
	if (data.err) {
    bb00:	f89d 4015 	ldrb.w	r4, [sp, #21]
    bb04:	b12c      	cbz	r4, bb12 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    bb06:	9802      	ldr	r0, [sp, #8]
    bb08:	f00e fa86 	bl	1a018 <net_buf_unref>
	if (!req) {
    bb0c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    bb10:	e7ce      	b.n	bab0 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    bb12:	9902      	ldr	r1, [sp, #8]
    bb14:	4628      	mov	r0, r5
    bb16:	f7ff fc09 	bl	b32c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    bb1a:	e7cf      	b.n	babc <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    bb1c:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    bb1e:	e7cd      	b.n	babc <att_find_type_req+0x6c>
    bb20:	0000af5d 	.word	0x0000af5d

0000bb24 <att_find_info_req>:
{
    bb24:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    bb26:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    bb28:	881e      	ldrh	r6, [r3, #0]
{
    bb2a:	b085      	sub	sp, #20
    bb2c:	4605      	mov	r5, r0
	if (!start || !end) {
    bb2e:	b19e      	cbz	r6, bb58 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    bb30:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    bb32:	b184      	cbz	r4, bb56 <att_find_info_req+0x32>
	if (start > end) {
    bb34:	42b4      	cmp	r4, r6
    bb36:	d30f      	bcc.n	bb58 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    bb38:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    bb3a:	2210      	movs	r2, #16
    bb3c:	2100      	movs	r1, #0
    bb3e:	4668      	mov	r0, sp
    bb40:	f013 fcf5 	bl	1f52e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    bb44:	2200      	movs	r2, #0
    bb46:	2105      	movs	r1, #5
    bb48:	4638      	mov	r0, r7
    bb4a:	f7ff fdd9 	bl	b700 <bt_att_create_pdu>
    bb4e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    bb50:	b958      	cbnz	r0, bb6a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    bb52:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    bb54:	e007      	b.n	bb66 <att_find_info_req+0x42>
			*err = 0U;
    bb56:	4626      	mov	r6, r4
	if (!req) {
    bb58:	2301      	movs	r3, #1
    bb5a:	4632      	mov	r2, r6
    bb5c:	2104      	movs	r1, #4
    bb5e:	4628      	mov	r0, r5
    bb60:	f014 fd8d 	bl	2067e <send_err_rsp.part.0>
	return 0;
    bb64:	2000      	movs	r0, #0
}
    bb66:	b005      	add	sp, #20
    bb68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    bb6a:	4621      	mov	r1, r4
    bb6c:	4a08      	ldr	r2, [pc, #32]	; (bb90 <att_find_info_req+0x6c>)
	data.chan = chan;
    bb6e:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    bb70:	466b      	mov	r3, sp
    bb72:	4630      	mov	r0, r6
    bb74:	f014 fb3f 	bl	201f6 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    bb78:	9c02      	ldr	r4, [sp, #8]
    bb7a:	b924      	cbnz	r4, bb86 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    bb7c:	9801      	ldr	r0, [sp, #4]
    bb7e:	f00e fa4b 	bl	1a018 <net_buf_unref>
	if (!req) {
    bb82:	230a      	movs	r3, #10
    bb84:	e7e9      	b.n	bb5a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    bb86:	9901      	ldr	r1, [sp, #4]
    bb88:	4628      	mov	r0, r5
    bb8a:	f7ff fbcf 	bl	b32c <bt_att_chan_send_rsp.constprop.0>
    bb8e:	e7e9      	b.n	bb64 <att_find_info_req+0x40>
    bb90:	0002020d 	.word	0x0002020d

0000bb94 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    bb94:	b513      	push	{r0, r1, r4, lr}
    bb96:	4602      	mov	r2, r0
    bb98:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    bb9a:	4808      	ldr	r0, [pc, #32]	; (bbbc <bt_att_req_alloc+0x28>)
    bb9c:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    bb9e:	2400      	movs	r4, #0
    bba0:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    bba2:	f00f fe4f 	bl	1b844 <k_mem_slab_alloc>
    bba6:	4601      	mov	r1, r0
    bba8:	b930      	cbnz	r0, bbb8 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    bbaa:	9801      	ldr	r0, [sp, #4]
    bbac:	221c      	movs	r2, #28
    bbae:	f013 fcbe 	bl	1f52e <memset>

	return req;
    bbb2:	9801      	ldr	r0, [sp, #4]
}
    bbb4:	b002      	add	sp, #8
    bbb6:	bd10      	pop	{r4, pc}
		return NULL;
    bbb8:	4620      	mov	r0, r4
    bbba:	e7fb      	b.n	bbb4 <bt_att_req_alloc+0x20>
    bbbc:	20000858 	.word	0x20000858

0000bbc0 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    bbc0:	b507      	push	{r0, r1, r2, lr}
    bbc2:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
    bbc4:	6880      	ldr	r0, [r0, #8]
    bbc6:	b120      	cbz	r0, bbd2 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
    bbc8:	f00e fa26 	bl	1a018 <net_buf_unref>
		req->buf = NULL;
    bbcc:	9b01      	ldr	r3, [sp, #4]
    bbce:	2200      	movs	r2, #0
    bbd0:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    bbd2:	4803      	ldr	r0, [pc, #12]	; (bbe0 <bt_att_req_free+0x20>)
    bbd4:	a901      	add	r1, sp, #4
    bbd6:	f00f fe65 	bl	1b8a4 <k_mem_slab_free>
}
    bbda:	b003      	add	sp, #12
    bbdc:	f85d fb04 	ldr.w	pc, [sp], #4
    bbe0:	20000858 	.word	0x20000858

0000bbe4 <att_handle_rsp>:
{
    bbe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bool pending = k_work_delayable_is_pending(&work->work);
    bbe8:	f100 05e8 	add.w	r5, r0, #232	; 0xe8
    bbec:	4604      	mov	r4, r0
	return k_work_delayable_busy_get(dwork) != 0;
    bbee:	4628      	mov	r0, r5
    bbf0:	460f      	mov	r7, r1
    bbf2:	4690      	mov	r8, r2
    bbf4:	461e      	mov	r6, r3
    bbf6:	f016 f9dd 	bl	21fb4 <k_work_delayable_busy_get>
	int rc = k_work_cancel_delayable(&work->work);
    bbfa:	4628      	mov	r0, r5
    bbfc:	f016 f9ee 	bl	21fdc <k_work_cancel_delayable>
	if (!chan->req) {
    bc00:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
    bc04:	b9e5      	cbnz	r5, bc40 <att_handle_rsp+0x5c>
    bc06:	4919      	ldr	r1, [pc, #100]	; (bc6c <att_handle_rsp+0x88>)
    bc08:	4819      	ldr	r0, [pc, #100]	; (bc70 <att_handle_rsp+0x8c>)
    bc0a:	1a40      	subs	r0, r0, r1
    bc0c:	08c0      	lsrs	r0, r0, #3
		BT_WARN("No pending ATT request");
    bc0e:	0180      	lsls	r0, r0, #6
    bc10:	f040 0102 	orr.w	r1, r0, #2
    bc14:	4817      	ldr	r0, [pc, #92]	; (bc74 <att_handle_rsp+0x90>)
    bc16:	f011 fe85 	bl	1d924 <log_0>
	bt_att_func_t func = NULL;
    bc1a:	46aa      	mov	sl, r5
	att_req_send_process(chan->att);
    bc1c:	6820      	ldr	r0, [r4, #0]
    bc1e:	f014 fcde 	bl	205de <att_req_send_process>
	if (func) {
    bc22:	f1ba 0f00 	cmp.w	sl, #0
    bc26:	d007      	beq.n	bc38 <att_handle_rsp+0x54>
		func(chan->att->conn, err, pdu, len, params);
    bc28:	6820      	ldr	r0, [r4, #0]
    bc2a:	f8cd 9000 	str.w	r9, [sp]
    bc2e:	6800      	ldr	r0, [r0, #0]
    bc30:	4643      	mov	r3, r8
    bc32:	463a      	mov	r2, r7
    bc34:	4631      	mov	r1, r6
    bc36:	47d0      	blx	sl
}
    bc38:	2000      	movs	r0, #0
    bc3a:	b003      	add	sp, #12
    bc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
    bc40:	4b0d      	ldr	r3, [pc, #52]	; (bc78 <att_handle_rsp+0x94>)
    bc42:	429d      	cmp	r5, r3
    bc44:	f04f 0b00 	mov.w	fp, #0
    bc48:	d103      	bne.n	bc52 <att_handle_rsp+0x6e>
		chan->req = NULL;
    bc4a:	f8c4 b0cc 	str.w	fp, [r4, #204]	; 0xcc
	bt_att_func_t func = NULL;
    bc4e:	46da      	mov	sl, fp
		goto process;
    bc50:	e7e4      	b.n	bc1c <att_handle_rsp+0x38>
	func = chan->req->func;
    bc52:	f8d5 a004 	ldr.w	sl, [r5, #4]
	chan->req->func = NULL;
    bc56:	f8c5 b004 	str.w	fp, [r5, #4]
	bt_att_req_free(chan->req);
    bc5a:	4628      	mov	r0, r5
	params = chan->req->user_data;
    bc5c:	f8d5 9018 	ldr.w	r9, [r5, #24]
	bt_att_req_free(chan->req);
    bc60:	f7ff ffae 	bl	bbc0 <bt_att_req_free>
	chan->req = NULL;
    bc64:	f8c4 b0cc 	str.w	fp, [r4, #204]	; 0xcc
    bc68:	e7d8      	b.n	bc1c <att_handle_rsp+0x38>
    bc6a:	bf00      	nop
    bc6c:	000225d8 	.word	0x000225d8
    bc70:	000225e8 	.word	0x000225e8
    bc74:	000258b9 	.word	0x000258b9
    bc78:	20001980 	.word	0x20001980

0000bc7c <bt_att_disconnected>:
{
    bc7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
    bc7e:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
    bc82:	b085      	sub	sp, #20
    bc84:	4604      	mov	r4, r0
	if (!att_chan->att) {
    bc86:	2d00      	cmp	r5, #0
    bc88:	d04b      	beq.n	bd22 <bt_att_disconnected+0xa6>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    bc8a:	f500 718a 	add.w	r1, r0, #276	; 0x114
    bc8e:	f105 0024 	add.w	r0, r5, #36	; 0x24
    bc92:	f014 fc0a 	bl	204aa <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    bc96:	f1a4 0608 	sub.w	r6, r4, #8
    bc9a:	f104 07c8 	add.w	r7, r4, #200	; 0xc8
    bc9e:	2200      	movs	r2, #0
    bca0:	2300      	movs	r3, #0
    bca2:	4638      	mov	r0, r7
    bca4:	f015 fca0 	bl	215e8 <net_buf_get>
    bca8:	4602      	mov	r2, r0
    bcaa:	bb10      	cbnz	r0, bcf2 <bt_att_disconnected+0x76>
	if (chan->req) {
    bcac:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    bcb0:	b123      	cbz	r3, bcbc <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    bcb2:	4601      	mov	r1, r0
    bcb4:	230e      	movs	r3, #14
    bcb6:	4630      	mov	r0, r6
    bcb8:	f7ff ff94 	bl	bbe4 <att_handle_rsp>
	chan->att = NULL;
    bcbc:	2300      	movs	r3, #0
    bcbe:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
    bcc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    bcc4:	bb6b      	cbnz	r3, bd22 <bt_att_disconnected+0xa6>
	att_reset(att);
    bcc6:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    bcc8:	9803      	ldr	r0, [sp, #12]
    bcca:	2200      	movs	r2, #0
    bccc:	2300      	movs	r3, #0
    bcce:	300c      	adds	r0, #12
    bcd0:	f015 fc8a 	bl	215e8 <net_buf_get>
    bcd4:	b980      	cbnz	r0, bcf8 <bt_att_disconnected+0x7c>
	att->conn = NULL;
    bcd6:	9a03      	ldr	r2, [sp, #12]
	return list->head;
    bcd8:	6855      	ldr	r5, [r2, #4]
    bcda:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    bcdc:	b97d      	cbnz	r5, bcfe <bt_att_disconnected+0x82>
	k_mem_slab_free(&att_slab, (void **)&att);
    bcde:	4812      	ldr	r0, [pc, #72]	; (bd28 <bt_att_disconnected+0xac>)
    bce0:	a903      	add	r1, sp, #12
    bce2:	f00f fddf 	bl	1b8a4 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
    bce6:	6820      	ldr	r0, [r4, #0]
}
    bce8:	b005      	add	sp, #20
    bcea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
    bcee:	f000 be47 	b.w	c980 <bt_gatt_disconnected>
		net_buf_unref(buf);
    bcf2:	f00e f991 	bl	1a018 <net_buf_unref>
    bcf6:	e7d2      	b.n	bc9e <bt_att_disconnected+0x22>
		net_buf_unref(buf);
    bcf8:	f00e f98e 	bl	1a018 <net_buf_unref>
    bcfc:	e7e4      	b.n	bcc8 <bt_att_disconnected+0x4c>
	return node->next;
    bcfe:	682e      	ldr	r6, [r5, #0]
		if (req->func) {
    bd00:	686f      	ldr	r7, [r5, #4]
    bd02:	b137      	cbz	r7, bd12 <bt_att_disconnected+0x96>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    bd04:	69ab      	ldr	r3, [r5, #24]
    bd06:	9300      	str	r3, [sp, #0]
    bd08:	2300      	movs	r3, #0
    bd0a:	461a      	mov	r2, r3
    bd0c:	210e      	movs	r1, #14
    bd0e:	4618      	mov	r0, r3
    bd10:	47b8      	blx	r7
		bt_att_req_free(req);
    bd12:	4628      	mov	r0, r5
    bd14:	f7ff ff54 	bl	bbc0 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    bd18:	2e00      	cmp	r6, #0
    bd1a:	d0e0      	beq.n	bcde <bt_att_disconnected+0x62>
    bd1c:	4635      	mov	r5, r6
    bd1e:	6836      	ldr	r6, [r6, #0]
    bd20:	e7ee      	b.n	bd00 <bt_att_disconnected+0x84>
}
    bd22:	b005      	add	sp, #20
    bd24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bd26:	bf00      	nop
    bd28:	20000820 	.word	0x20000820

0000bd2c <att_timeout>:
    bd2c:	4b08      	ldr	r3, [pc, #32]	; (bd50 <att_timeout+0x24>)
    bd2e:	4909      	ldr	r1, [pc, #36]	; (bd54 <att_timeout+0x28>)
{
    bd30:	b510      	push	{r4, lr}
    bd32:	1ac9      	subs	r1, r1, r3
    bd34:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
    bd36:	0189      	lsls	r1, r1, #6
{
    bd38:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    bd3a:	f041 0101 	orr.w	r1, r1, #1
    bd3e:	4806      	ldr	r0, [pc, #24]	; (bd58 <att_timeout+0x2c>)
    bd40:	f011 fdf0 	bl	1d924 <log_0>
	bt_att_disconnected(&chan->chan.chan);
    bd44:	f1a4 00e0 	sub.w	r0, r4, #224	; 0xe0
}
    bd48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
    bd4c:	f7ff bf96 	b.w	bc7c <bt_att_disconnected>
    bd50:	000225d8 	.word	0x000225d8
    bd54:	000225e8 	.word	0x000225e8
    bd58:	000258d0 	.word	0x000258d0

0000bd5c <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
    bd5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bd5e:	4d0f      	ldr	r5, [pc, #60]	; (bd9c <find_cf_cfg+0x40>)
    bd60:	4604      	mov	r4, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    bd62:	2700      	movs	r7, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    bd64:	462e      	mov	r6, r5

		if (!conn) {
    bd66:	1c68      	adds	r0, r5, #1
    bd68:	b964      	cbnz	r4, bd84 <find_cf_cfg+0x28>
	return memcmp(a, b, sizeof(*a));
    bd6a:	2207      	movs	r2, #7
    bd6c:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    bd6e:	9400      	str	r4, [sp, #0]
    bd70:	f8cd 4003 	str.w	r4, [sp, #3]
    bd74:	f013 fb9f 	bl	1f4b6 <memcmp>
    bd78:	b958      	cbnz	r0, bd92 <find_cf_cfg+0x36>
			return cfg;
		}
	}

	return NULL;
}
    bd7a:	4630      	mov	r0, r6
    bd7c:	b003      	add	sp, #12
    bd7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bd80:	2701      	movs	r7, #1
    bd82:	e7ef      	b.n	bd64 <find_cf_cfg+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    bd84:	4602      	mov	r2, r0
    bd86:	7829      	ldrb	r1, [r5, #0]
    bd88:	4620      	mov	r0, r4
    bd8a:	f014 f878 	bl	1fe7e <bt_conn_is_peer_addr_le>
    bd8e:	2800      	cmp	r0, #0
    bd90:	d1f3      	bne.n	bd7a <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    bd92:	3510      	adds	r5, #16
    bd94:	2f00      	cmp	r7, #0
    bd96:	d0f3      	beq.n	bd80 <find_cf_cfg+0x24>
	return NULL;
    bd98:	2600      	movs	r6, #0
    bd9a:	e7ee      	b.n	bd7a <find_cf_cfg+0x1e>
    bd9c:	2000199c 	.word	0x2000199c

0000bda0 <gatt_indicate>:
}
#endif

static int gatt_indicate(struct bt_conn *conn, uint16_t handle,
			 struct bt_gatt_indicate_params *params)
{
    bda0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bda4:	4680      	mov	r8, r0
    bda6:	4689      	mov	r9, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    bda8:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    bdac:	2100      	movs	r1, #0
	    params->func == sc_restore_rsp)) &&
	    !bt_gatt_change_aware(conn, false)) {
		return -EAGAIN;
	}
#endif
	len = sizeof(*ind) + params->len;
    bdae:	8a96      	ldrh	r6, [r2, #20]
{
    bdb0:	4615      	mov	r5, r2
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    bdb2:	f7ff feef 	bl	bb94 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    bdb6:	3602      	adds	r6, #2
	if (!req) {
    bdb8:	4604      	mov	r4, r0
    bdba:	b920      	cbnz	r0, bdc6 <gatt_indicate+0x26>

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
	if (!buf) {
		BT_WARN("No buffer available to send indication");
		bt_att_req_free(req);
		return -ENOMEM;
    bdbc:	f06f 050b 	mvn.w	r5, #11
	if (err) {
		bt_att_req_free(req);
	}

	return err;
}
    bdc0:	4628      	mov	r0, r5
    bdc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->encode = encode;
    bdc6:	2300      	movs	r3, #0
    bdc8:	60c3      	str	r3, [r0, #12]
	req->att_op = op;
    bdca:	211d      	movs	r1, #29
	req->func = func;
    bdcc:	4b1b      	ldr	r3, [pc, #108]	; (be3c <gatt_indicate+0x9c>)
	req->len = len;
    bdce:	6146      	str	r6, [r0, #20]
	req->att_op = op;
    bdd0:	7441      	strb	r1, [r0, #17]
	req->func = func;
    bdd2:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    bdd4:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    bdd6:	4632      	mov	r2, r6
    bdd8:	4640      	mov	r0, r8
    bdda:	f7ff fc91 	bl	b700 <bt_att_create_pdu>
	if (!buf) {
    bdde:	4606      	mov	r6, r0
    bde0:	b968      	cbnz	r0, bdfe <gatt_indicate+0x5e>
    bde2:	4b17      	ldr	r3, [pc, #92]	; (be40 <gatt_indicate+0xa0>)
    bde4:	4917      	ldr	r1, [pc, #92]	; (be44 <gatt_indicate+0xa4>)
		BT_WARN("No buffer available to send indication");
    bde6:	4818      	ldr	r0, [pc, #96]	; (be48 <gatt_indicate+0xa8>)
    bde8:	1ac9      	subs	r1, r1, r3
    bdea:	08c9      	lsrs	r1, r1, #3
    bdec:	0189      	lsls	r1, r1, #6
    bdee:	f041 0102 	orr.w	r1, r1, #2
    bdf2:	f011 fd97 	bl	1d924 <log_0>
		bt_att_req_free(req);
    bdf6:	4620      	mov	r0, r4
    bdf8:	f7ff fee2 	bl	bbc0 <bt_att_req_free>
    bdfc:	e7de      	b.n	bdbc <gatt_indicate+0x1c>
	return net_buf_simple_add(&buf->b, len);
    bdfe:	f100 0a08 	add.w	sl, r0, #8
    be02:	2102      	movs	r1, #2
    be04:	4650      	mov	r0, sl
    be06:	f015 fc41 	bl	2168c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    be0a:	4607      	mov	r7, r0
    be0c:	8aa9      	ldrh	r1, [r5, #20]
    be0e:	f827 9b02 	strh.w	r9, [r7], #2
    be12:	4650      	mov	r0, sl
    be14:	f015 fc3a 	bl	2168c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    be18:	8aaa      	ldrh	r2, [r5, #20]
    be1a:	6929      	ldr	r1, [r5, #16]
    be1c:	4638      	mov	r0, r7
    be1e:	f013 fb5b 	bl	1f4d8 <memcpy>
	req->buf = buf;
    be22:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    be24:	4621      	mov	r1, r4
    be26:	4640      	mov	r0, r8
    be28:	f014 fd47 	bl	208ba <bt_att_req_send>
	if (err) {
    be2c:	4605      	mov	r5, r0
    be2e:	2800      	cmp	r0, #0
    be30:	d0c6      	beq.n	bdc0 <gatt_indicate+0x20>
		bt_att_req_free(req);
    be32:	4620      	mov	r0, r4
    be34:	f7ff fec4 	bl	bbc0 <bt_att_req_free>
    be38:	e7c2      	b.n	bdc0 <gatt_indicate+0x20>
    be3a:	bf00      	nop
    be3c:	00020901 	.word	0x00020901
    be40:	000225d8 	.word	0x000225d8
    be44:	000226a8 	.word	0x000226a8
    be48:	000258e3 	.word	0x000258e3

0000be4c <cf_write>:
{
    be4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be50:	4698      	mov	r8, r3
    be52:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
    be56:	2b01      	cmp	r3, #1
{
    be58:	4606      	mov	r6, r0
    be5a:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
    be5c:	d83d      	bhi.n	beda <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
    be5e:	4443      	add	r3, r8
    be60:	2b01      	cmp	r3, #1
    be62:	4645      	mov	r5, r8
    be64:	dc3c      	bgt.n	bee0 <cf_write+0x94>
	cfg = find_cf_cfg(conn);
    be66:	f7ff ff79 	bl	bd5c <find_cf_cfg>
	if (!cfg) {
    be6a:	4604      	mov	r4, r0
    be6c:	b918      	cbnz	r0, be76 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
    be6e:	f7ff ff75 	bl	bd5c <find_cf_cfg>
	if (!cfg) {
    be72:	4604      	mov	r4, r0
    be74:	b180      	cbz	r0, be98 <cf_write+0x4c>
{
    be76:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    be78:	f1b8 0f00 	cmp.w	r8, #0
    be7c:	d11b      	bne.n	beb6 <cf_write+0x6a>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    be7e:	f106 0188 	add.w	r1, r6, #136	; 0x88
    be82:	1c60      	adds	r0, r4, #1
    be84:	f014 fda9 	bl	209da <bt_addr_le_copy>
	cfg->id = conn->id;
    be88:	4620      	mov	r0, r4
    be8a:	7a33      	ldrb	r3, [r6, #8]
    be8c:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    be90:	2100      	movs	r1, #0
    be92:	f014 fdc2 	bl	20a1a <atomic_set_bit>
	return len;
    be96:	e00b      	b.n	beb0 <cf_write+0x64>
    be98:	4b14      	ldr	r3, [pc, #80]	; (beec <cf_write+0xa0>)
    be9a:	4915      	ldr	r1, [pc, #84]	; (bef0 <cf_write+0xa4>)
		BT_WARN("No space to store Client Supported Features");
    be9c:	4815      	ldr	r0, [pc, #84]	; (bef4 <cf_write+0xa8>)
    be9e:	1ac9      	subs	r1, r1, r3
    bea0:	08c9      	lsrs	r1, r1, #3
    bea2:	0189      	lsls	r1, r1, #6
    bea4:	f041 0102 	orr.w	r1, r1, #2
    bea8:	f011 fd3c 	bl	1d924 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    beac:	f06f 0510 	mvn.w	r5, #16
}
    beb0:	4628      	mov	r0, r5
    beb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    beb6:	7a20      	ldrb	r0, [r4, #8]
    beb8:	fa20 f301 	lsr.w	r3, r0, r1
    bebc:	07da      	lsls	r2, r3, #31
    bebe:	d503      	bpl.n	bec8 <cf_write+0x7c>
		    !(value[i / 8] & BIT(i % 8))) {
    bec0:	783b      	ldrb	r3, [r7, #0]
    bec2:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    bec4:	07db      	lsls	r3, r3, #31
    bec6:	d50e      	bpl.n	bee6 <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    bec8:	3101      	adds	r1, #1
    beca:	2903      	cmp	r1, #3
    becc:	d1d4      	bne.n	be78 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
    bece:	783b      	ldrb	r3, [r7, #0]
    bed0:	f003 0307 	and.w	r3, r3, #7
    bed4:	4318      	orrs	r0, r3
    bed6:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
    bed8:	e7d1      	b.n	be7e <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    beda:	f06f 0506 	mvn.w	r5, #6
    bede:	e7e7      	b.n	beb0 <cf_write+0x64>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    bee0:	f06f 050c 	mvn.w	r5, #12
    bee4:	e7e4      	b.n	beb0 <cf_write+0x64>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    bee6:	f06f 0512 	mvn.w	r5, #18
    beea:	e7e1      	b.n	beb0 <cf_write+0x64>
    beec:	000225d8 	.word	0x000225d8
    bef0:	000226a8 	.word	0x000226a8
    bef4:	0002590a 	.word	0x0002590a

0000bef8 <gatt_notify>:
{
    bef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    befc:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    befe:	8992      	ldrh	r2, [r2, #12]
{
    bf00:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    bf02:	3202      	adds	r2, #2
    bf04:	211b      	movs	r1, #27
{
    bf06:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    bf08:	f7ff fbfa 	bl	b700 <bt_att_create_pdu>
	if (!buf) {
    bf0c:	4605      	mov	r5, r0
    bf0e:	b1c8      	cbz	r0, bf44 <gatt_notify+0x4c>
    bf10:	f100 0908 	add.w	r9, r0, #8
    bf14:	2102      	movs	r1, #2
    bf16:	4648      	mov	r0, r9
    bf18:	f015 fbb8 	bl	2168c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    bf1c:	4606      	mov	r6, r0
    bf1e:	89a1      	ldrh	r1, [r4, #12]
    bf20:	f826 8b02 	strh.w	r8, [r6], #2
    bf24:	4648      	mov	r0, r9
    bf26:	f015 fbb1 	bl	2168c <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    bf2a:	89a2      	ldrh	r2, [r4, #12]
    bf2c:	68a1      	ldr	r1, [r4, #8]
    bf2e:	4630      	mov	r0, r6
    bf30:	f013 fad2 	bl	1f4d8 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    bf34:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    bf38:	4629      	mov	r1, r5
    bf3a:	4638      	mov	r0, r7
}
    bf3c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    bf40:	f014 bc72 	b.w	20828 <bt_att_send>
    bf44:	4b06      	ldr	r3, [pc, #24]	; (bf60 <gatt_notify+0x68>)
    bf46:	4907      	ldr	r1, [pc, #28]	; (bf64 <gatt_notify+0x6c>)
		BT_WARN("No buffer available to send notification");
    bf48:	4807      	ldr	r0, [pc, #28]	; (bf68 <gatt_notify+0x70>)
    bf4a:	1ac9      	subs	r1, r1, r3
    bf4c:	08c9      	lsrs	r1, r1, #3
    bf4e:	0189      	lsls	r1, r1, #6
    bf50:	f041 0102 	orr.w	r1, r1, #2
    bf54:	f011 fce6 	bl	1d924 <log_0>
}
    bf58:	f06f 000b 	mvn.w	r0, #11
    bf5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bf60:	000225d8 	.word	0x000225d8
    bf64:	000226a8 	.word	0x000226a8
    bf68:	00025936 	.word	0x00025936

0000bf6c <bt_gatt_attr_write_ccc>:
{
    bf6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    bf70:	461f      	mov	r7, r3
    bf72:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
    bf76:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    bf7a:	4605      	mov	r5, r0
    bf7c:	4688      	mov	r8, r1
	if (offset) {
    bf7e:	2b00      	cmp	r3, #0
    bf80:	d14e      	bne.n	c020 <bt_gatt_attr_write_ccc+0xb4>
	if (!len || len > sizeof(uint16_t)) {
    bf82:	1e7b      	subs	r3, r7, #1
    bf84:	2b01      	cmp	r3, #1
    bf86:	d84e      	bhi.n	c026 <bt_gatt_attr_write_ccc+0xba>
		value = *(uint8_t *)buf;
    bf88:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
    bf8a:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
    bf8c:	4649      	mov	r1, r9
    bf8e:	bf14      	ite	ne
    bf90:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
    bf92:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
    bf94:	f014 fe08 	bl	20ba8 <find_ccc_cfg>
	if (!cfg) {
    bf98:	4604      	mov	r4, r0
    bf9a:	b9e8      	cbnz	r0, bfd8 <bt_gatt_attr_write_ccc+0x6c>
		if (!value) {
    bf9c:	b91e      	cbnz	r6, bfa6 <bt_gatt_attr_write_ccc+0x3a>
			return len;
    bf9e:	4638      	mov	r0, r7
}
    bfa0:	b003      	add	sp, #12
    bfa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    bfa6:	4649      	mov	r1, r9
    bfa8:	f014 fdfe 	bl	20ba8 <find_ccc_cfg>
		if (!cfg) {
    bfac:	4604      	mov	r4, r0
    bfae:	b960      	cbnz	r0, bfca <bt_gatt_attr_write_ccc+0x5e>
    bfb0:	4b1e      	ldr	r3, [pc, #120]	; (c02c <bt_gatt_attr_write_ccc+0xc0>)
    bfb2:	491f      	ldr	r1, [pc, #124]	; (c030 <bt_gatt_attr_write_ccc+0xc4>)
			BT_WARN("No space to store CCC cfg");
    bfb4:	481f      	ldr	r0, [pc, #124]	; (c034 <bt_gatt_attr_write_ccc+0xc8>)
    bfb6:	1ac9      	subs	r1, r1, r3
    bfb8:	08c9      	lsrs	r1, r1, #3
    bfba:	0189      	lsls	r1, r1, #6
    bfbc:	f041 0102 	orr.w	r1, r1, #2
    bfc0:	f011 fcb0 	bl	1d924 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    bfc4:	f06f 0010 	mvn.w	r0, #16
    bfc8:	e7ea      	b.n	bfa0 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    bfca:	f105 0188 	add.w	r1, r5, #136	; 0x88
    bfce:	3001      	adds	r0, #1
    bfd0:	f014 fd03 	bl	209da <bt_addr_le_copy>
		cfg->id = conn->id;
    bfd4:	7a2b      	ldrb	r3, [r5, #8]
    bfd6:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    bfd8:	f8d9 301c 	ldr.w	r3, [r9, #28]
    bfdc:	b9a3      	cbnz	r3, c008 <bt_gatt_attr_write_ccc+0x9c>
	if (cfg->value != ccc->value) {
    bfde:	f8b9 3014 	ldrh.w	r3, [r9, #20]
	cfg->value = value;
    bfe2:	8126      	strh	r6, [r4, #8]
	if (cfg->value != ccc->value) {
    bfe4:	42b3      	cmp	r3, r6
    bfe6:	d003      	beq.n	bff0 <bt_gatt_attr_write_ccc+0x84>
		gatt_ccc_changed(attr, ccc);
    bfe8:	4649      	mov	r1, r9
    bfea:	4640      	mov	r0, r8
    bfec:	f014 fc7a 	bl	208e4 <gatt_ccc_changed>
	if (!value) {
    bff0:	2e00      	cmp	r6, #0
    bff2:	d1d4      	bne.n	bf9e <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    bff4:	4669      	mov	r1, sp
    bff6:	1c60      	adds	r0, r4, #1
    bff8:	9600      	str	r6, [sp, #0]
    bffa:	f8cd 6003 	str.w	r6, [sp, #3]
    bffe:	f014 fcec 	bl	209da <bt_addr_le_copy>
	cfg->id = 0U;
    c002:	7026      	strb	r6, [r4, #0]
	cfg->value = 0U;
    c004:	8126      	strh	r6, [r4, #8]
}
    c006:	e7ca      	b.n	bf9e <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    c008:	4632      	mov	r2, r6
    c00a:	4641      	mov	r1, r8
    c00c:	4628      	mov	r0, r5
    c00e:	4798      	blx	r3
		if (write < 0) {
    c010:	2800      	cmp	r0, #0
    c012:	dbc5      	blt.n	bfa0 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
    c014:	1e45      	subs	r5, r0, #1
    c016:	2d01      	cmp	r5, #1
    c018:	d9e1      	bls.n	bfde <bt_gatt_attr_write_ccc+0x72>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    c01a:	f06f 000d 	mvn.w	r0, #13
    c01e:	e7bf      	b.n	bfa0 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    c020:	f06f 0006 	mvn.w	r0, #6
    c024:	e7bc      	b.n	bfa0 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    c026:	f06f 000c 	mvn.w	r0, #12
    c02a:	e7b9      	b.n	bfa0 <bt_gatt_attr_write_ccc+0x34>
    c02c:	000225d8 	.word	0x000225d8
    c030:	000226a8 	.word	0x000226a8
    c034:	0002595f 	.word	0x0002595f

0000c038 <find_sc_cfg>:
{
    c038:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
    c03a:	4c0e      	ldr	r4, [pc, #56]	; (c074 <find_sc_cfg+0x3c>)
    c03c:	7823      	ldrb	r3, [r4, #0]
    c03e:	4283      	cmp	r3, r0
{
    c040:	4605      	mov	r5, r0
    c042:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
    c044:	d00a      	beq.n	c05c <find_sc_cfg+0x24>
    c046:	7b23      	ldrb	r3, [r4, #12]
    c048:	42ab      	cmp	r3, r5
    c04a:	d111      	bne.n	c070 <find_sc_cfg+0x38>
    c04c:	480a      	ldr	r0, [pc, #40]	; (c078 <find_sc_cfg+0x40>)
    c04e:	2207      	movs	r2, #7
    c050:	4631      	mov	r1, r6
    c052:	f013 fa30 	bl	1f4b6 <memcmp>
    c056:	b958      	cbnz	r0, c070 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    c058:	2001      	movs	r0, #1
    c05a:	e005      	b.n	c068 <find_sc_cfg+0x30>
    c05c:	2207      	movs	r2, #7
    c05e:	1c60      	adds	r0, r4, #1
    c060:	f013 fa29 	bl	1f4b6 <memcmp>
		if (id == sc_cfg[i].id &&
    c064:	2800      	cmp	r0, #0
    c066:	d1ee      	bne.n	c046 <find_sc_cfg+0xe>
			return &sc_cfg[i];
    c068:	230c      	movs	r3, #12
    c06a:	fb03 4000 	mla	r0, r3, r0, r4
    c06e:	e000      	b.n	c072 <find_sc_cfg+0x3a>
	return NULL;
    c070:	2000      	movs	r0, #0
}
    c072:	bd70      	pop	{r4, r5, r6, pc}
    c074:	20002d92 	.word	0x20002d92
    c078:	20002d9f 	.word	0x20002d9f

0000c07c <sc_save>:
{
    c07c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c080:	4680      	mov	r8, r0
    c082:	460f      	mov	r7, r1
    c084:	4616      	mov	r6, r2
    c086:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    c088:	f7ff ffd6 	bl	c038 <find_sc_cfg>
	if (!cfg) {
    c08c:	4604      	mov	r4, r0
    c08e:	b9c8      	cbnz	r0, c0c4 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    c090:	4669      	mov	r1, sp
    c092:	9000      	str	r0, [sp, #0]
    c094:	f8cd 0003 	str.w	r0, [sp, #3]
    c098:	f7ff ffce 	bl	c038 <find_sc_cfg>
		if (!cfg) {
    c09c:	4604      	mov	r4, r0
    c09e:	b960      	cbnz	r0, c0ba <sc_save+0x3e>
    c0a0:	490f      	ldr	r1, [pc, #60]	; (c0e0 <sc_save+0x64>)
    c0a2:	4b10      	ldr	r3, [pc, #64]	; (c0e4 <sc_save+0x68>)
			BT_ERR("unable to save SC: no cfg left");
    c0a4:	4810      	ldr	r0, [pc, #64]	; (c0e8 <sc_save+0x6c>)
    c0a6:	1ac9      	subs	r1, r1, r3
    c0a8:	08c9      	lsrs	r1, r1, #3
    c0aa:	0189      	lsls	r1, r1, #6
    c0ac:	f041 0101 	orr.w	r1, r1, #1
    c0b0:	f011 fc38 	bl	1d924 <log_0>
}
    c0b4:	b002      	add	sp, #8
    c0b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    c0ba:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    c0be:	4639      	mov	r1, r7
    c0c0:	f014 fc8b 	bl	209da <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    c0c4:	8922      	ldrh	r2, [r4, #8]
    c0c6:	8963      	ldrh	r3, [r4, #10]
    c0c8:	b91a      	cbnz	r2, c0d2 <sc_save+0x56>
    c0ca:	b923      	cbnz	r3, c0d6 <sc_save+0x5a>
		cfg->data.start = start;
    c0cc:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    c0ce:	8165      	strh	r5, [r4, #10]
    c0d0:	e7f0      	b.n	c0b4 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
    c0d2:	4296      	cmp	r6, r2
    c0d4:	d302      	bcc.n	c0dc <sc_save+0x60>
    c0d6:	429d      	cmp	r5, r3
    c0d8:	d9ec      	bls.n	c0b4 <sc_save+0x38>
    c0da:	e7f8      	b.n	c0ce <sc_save+0x52>
		*start = new_start;
    c0dc:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    c0de:	e7fa      	b.n	c0d6 <sc_save+0x5a>
    c0e0:	000226a8 	.word	0x000226a8
    c0e4:	000225d8 	.word	0x000225d8
    c0e8:	00025979 	.word	0x00025979

0000c0ec <notify_cb>:

static uint8_t notify_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			 void *user_data)
{
    c0ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    c0f0:	4b38      	ldr	r3, [pc, #224]	; (c1d4 <notify_cb+0xe8>)
{
    c0f2:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    c0f4:	6882      	ldr	r2, [r0, #8]
    c0f6:	429a      	cmp	r2, r3
{
    c0f8:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    c0fa:	d003      	beq.n	c104 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
    c0fc:	2001      	movs	r0, #1

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
}
    c0fe:	b003      	add	sp, #12
    c100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
    c104:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    c108:	4b33      	ldr	r3, [pc, #204]	; (c1d8 <notify_cb+0xec>)
    c10a:	4599      	cmp	r9, r3
    c10c:	d01a      	beq.n	c144 <notify_cb+0x58>
    c10e:	f109 0701 	add.w	r7, r9, #1
    c112:	f109 0a15 	add.w	sl, r9, #21
    c116:	f04f 0b00 	mov.w	fp, #0
		if (cfg->value != data->type) {
    c11a:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    c11e:	89a3      	ldrh	r3, [r4, #12]
    c120:	429a      	cmp	r2, r3
    c122:	d10b      	bne.n	c13c <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    c124:	f817 0c01 	ldrb.w	r0, [r7, #-1]
    c128:	4639      	mov	r1, r7
    c12a:	f7fe fb3d 	bl	a7a8 <bt_conn_lookup_addr_le>
		if (!conn) {
    c12e:	4605      	mov	r5, r0
    c130:	b120      	cbz	r0, c13c <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
    c132:	7b43      	ldrb	r3, [r0, #13]
    c134:	2b07      	cmp	r3, #7
    c136:	d029      	beq.n	c18c <notify_cb+0xa0>
			bt_conn_unref(conn);
    c138:	f013 fedc 	bl	1fef4 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    c13c:	370a      	adds	r7, #10
    c13e:	4557      	cmp	r7, sl
    c140:	d0dc      	beq.n	c0fc <notify_cb+0x10>
    c142:	e7ea      	b.n	c11a <notify_cb+0x2e>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    c144:	2600      	movs	r6, #0
    c146:	4d25      	ldr	r5, [pc, #148]	; (c1dc <notify_cb+0xf0>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    c148:	4637      	mov	r7, r6
    c14a:	2207      	movs	r2, #7
    c14c:	4669      	mov	r1, sp
    c14e:	4628      	mov	r0, r5
    c150:	9700      	str	r7, [sp, #0]
    c152:	f8cd 7003 	str.w	r7, [sp, #3]
    c156:	f013 f9ae 	bl	1f4b6 <memcmp>
    c15a:	b178      	cbz	r0, c17c <notify_cb+0x90>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    c15c:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    c160:	2207      	movs	r2, #7
    c162:	4629      	mov	r1, r5
    c164:	f7fe fb66 	bl	a834 <bt_conn_lookup_state_le>
			if (!conn) {
    c168:	b968      	cbnz	r0, c186 <notify_cb+0x9a>
				sc = (struct sc_data *)data->ind_params->data;
    c16a:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    c16c:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    c170:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    c172:	4629      	mov	r1, r5
    c174:	8853      	ldrh	r3, [r2, #2]
    c176:	8812      	ldrh	r2, [r2, #0]
    c178:	f7ff ff80 	bl	c07c <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    c17c:	350c      	adds	r5, #12
    c17e:	2e00      	cmp	r6, #0
    c180:	d1c5      	bne.n	c10e <notify_cb+0x22>
    c182:	2601      	movs	r6, #1
    c184:	e7e1      	b.n	c14a <notify_cb+0x5e>
			bt_conn_unref(conn);
    c186:	f013 feb5 	bl	1fef4 <bt_conn_unref>
    c18a:	e7f7      	b.n	c17c <notify_cb+0x90>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    c18c:	f8d9 3020 	ldr.w	r3, [r9, #32]
    c190:	b123      	cbz	r3, c19c <notify_cb+0xb0>
    c192:	4641      	mov	r1, r8
    c194:	4798      	blx	r3
    c196:	b908      	cbnz	r0, c19c <notify_cb+0xb0>
			bt_conn_unref(conn);
    c198:	4628      	mov	r0, r5
    c19a:	e7cd      	b.n	c138 <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
    c19c:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
    c19e:	88a1      	ldrh	r1, [r4, #4]
    c1a0:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
    c1a2:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    c1a4:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    c1a6:	d10f      	bne.n	c1c8 <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
    c1a8:	f7ff fdfa 	bl	bda0 <gatt_indicate>
			if (err == 0) {
    c1ac:	4606      	mov	r6, r0
    c1ae:	b918      	cbnz	r0, c1b8 <notify_cb+0xcc>
				data->ind_params->_ref++;
    c1b0:	6922      	ldr	r2, [r4, #16]
    c1b2:	7d93      	ldrb	r3, [r2, #22]
    c1b4:	3301      	adds	r3, #1
    c1b6:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    c1b8:	4628      	mov	r0, r5
    c1ba:	f013 fe9b 	bl	1fef4 <bt_conn_unref>
		if (err < 0) {
    c1be:	2e00      	cmp	r6, #0
    c1c0:	db06      	blt.n	c1d0 <notify_cb+0xe4>
		data->err = 0;
    c1c2:	f8c4 b008 	str.w	fp, [r4, #8]
    c1c6:	e7b9      	b.n	c13c <notify_cb+0x50>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    c1c8:	f7ff fe96 	bl	bef8 <gatt_notify>
    c1cc:	4606      	mov	r6, r0
    c1ce:	e7f3      	b.n	c1b8 <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
    c1d0:	2000      	movs	r0, #0
    c1d2:	e794      	b.n	c0fe <notify_cb+0x12>
    c1d4:	0000bf6d 	.word	0x0000bf6d
    c1d8:	20000290 	.word	0x20000290
    c1dc:	20002d93 	.word	0x20002d93

0000c1e0 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
    c1e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    c1e4:	4b2b      	ldr	r3, [pc, #172]	; (c294 <disconnected_cb+0xb4>)
{
    c1e6:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    c1e8:	6882      	ldr	r2, [r0, #8]
    c1ea:	429a      	cmp	r2, r3
{
    c1ec:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    c1ee:	d12f      	bne.n	c250 <disconnected_cb+0x70>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    c1f0:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    c1f2:	8aab      	ldrh	r3, [r5, #20]
    c1f4:	b363      	cbz	r3, c250 <disconnected_cb+0x70>
				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
				if (ccc == &sc_ccc) {
    c1f6:	f8df b0a0 	ldr.w	fp, [pc, #160]	; c298 <disconnected_cb+0xb8>
    c1fa:	1c6c      	adds	r4, r5, #1
    c1fc:	f105 0a15 	add.w	sl, r5, #21
	value_used = false;
    c200:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c204:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
    c208:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    c20c:	b19b      	cbz	r3, c236 <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    c20e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    c212:	4622      	mov	r2, r4
    c214:	4630      	mov	r0, r6
    c216:	f013 fe32 	bl	1fe7e <bt_conn_is_peer_addr_le>
    c21a:	b9e8      	cbnz	r0, c258 <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    c21c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    c220:	4621      	mov	r1, r4
    c222:	f7fe fac1 	bl	a7a8 <bt_conn_lookup_addr_le>
			if (tmp) {
    c226:	b130      	cbz	r0, c236 <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
    c228:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
    c22a:	2b07      	cmp	r3, #7
    c22c:	bf08      	it	eq
    c22e:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
    c232:	f013 fe5f 	bl	1fef4 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    c236:	340a      	adds	r4, #10
    c238:	4554      	cmp	r4, sl
    c23a:	d1e5      	bne.n	c208 <disconnected_cb+0x28>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
    c23c:	f1b8 0f00 	cmp.w	r8, #0
    c240:	d106      	bne.n	c250 <disconnected_cb+0x70>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
    c242:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
    c244:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
    c248:	b113      	cbz	r3, c250 <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
    c24a:	4641      	mov	r1, r8
    c24c:	4638      	mov	r0, r7
    c24e:	4798      	blx	r3

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
    c250:	2001      	movs	r0, #1
    c252:	b003      	add	sp, #12
    c254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c258:	7a30      	ldrb	r0, [r6, #8]
    c25a:	4649      	mov	r1, r9
    c25c:	f013 fb94 	bl	1f988 <bt_addr_le_is_bonded>
    c260:	b990      	cbnz	r0, c288 <disconnected_cb+0xa8>
				if (ccc == &sc_ccc) {
    c262:	455d      	cmp	r5, fp
    c264:	d102      	bne.n	c26c <disconnected_cb+0x8c>
					sc_clear(conn);
    c266:	4630      	mov	r0, r6
    c268:	f014 fce0 	bl	20c2c <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    c26c:	2300      	movs	r3, #0
    c26e:	4669      	mov	r1, sp
    c270:	4620      	mov	r0, r4
    c272:	9300      	str	r3, [sp, #0]
    c274:	f8cd 3003 	str.w	r3, [sp, #3]
    c278:	f014 fbaf 	bl	209da <bt_addr_le_copy>
	cfg->id = 0U;
    c27c:	2300      	movs	r3, #0
    c27e:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
    c282:	f8a4 3007 	strh.w	r3, [r4, #7]
}
    c286:	e7d6      	b.n	c236 <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    c288:	4649      	mov	r1, r9
    c28a:	4620      	mov	r0, r4
    c28c:	f014 fba5 	bl	209da <bt_addr_le_copy>
    c290:	e7d1      	b.n	c236 <disconnected_cb+0x56>
    c292:	bf00      	nop
    c294:	0000bf6d 	.word	0x0000bf6d
    c298:	20000290 	.word	0x20000290

0000c29c <sc_indicate_rsp>:
{
    c29c:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c29e:	4915      	ldr	r1, [pc, #84]	; (c2f4 <sc_indicate_rsp+0x58>)
    c2a0:	f3bf 8f5b 	dmb	ish
    c2a4:	4604      	mov	r4, r0
    c2a6:	f101 0350 	add.w	r3, r1, #80	; 0x50
    c2aa:	e853 2f00 	ldrex	r2, [r3]
    c2ae:	f022 0202 	bic.w	r2, r2, #2
    c2b2:	e843 2000 	strex	r0, r2, [r3]
    c2b6:	2800      	cmp	r0, #0
    c2b8:	d1f7      	bne.n	c2aa <sc_indicate_rsp+0xe>
    c2ba:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c2be:	f3bf 8f5b 	dmb	ish
    c2c2:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    c2c4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    c2c8:	07da      	lsls	r2, r3, #31
    c2ca:	d505      	bpl.n	c2d8 <sc_indicate_rsp+0x3c>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    c2cc:	480a      	ldr	r0, [pc, #40]	; (c2f8 <sc_indicate_rsp+0x5c>)
    c2ce:	2200      	movs	r2, #0
    c2d0:	2300      	movs	r3, #0
    c2d2:	3120      	adds	r1, #32
    c2d4:	f010 f93a 	bl	1c54c <k_work_reschedule_for_queue>
	cfg = find_cf_cfg(conn);
    c2d8:	4620      	mov	r0, r4
    c2da:	f7ff fd3f 	bl	bd5c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    c2de:	b140      	cbz	r0, c2f2 <sc_indicate_rsp+0x56>
    c2e0:	7a03      	ldrb	r3, [r0, #8]
    c2e2:	07db      	lsls	r3, r3, #31
    c2e4:	d505      	bpl.n	c2f2 <sc_indicate_rsp+0x56>
}
    c2e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    c2ea:	2100      	movs	r1, #0
    c2ec:	300c      	adds	r0, #12
    c2ee:	f014 bb94 	b.w	20a1a <atomic_set_bit>
}
    c2f2:	bd10      	pop	{r4, pc}
    c2f4:	20000e48 	.word	0x20000e48
    c2f8:	200015c0 	.word	0x200015c0

0000c2fc <bt_gatt_init>:
{
    c2fc:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    c2fe:	4b1f      	ldr	r3, [pc, #124]	; (c37c <bt_gatt_init+0x80>)
    c300:	f3bf 8f5b 	dmb	ish
    c304:	2201      	movs	r2, #1
    c306:	e853 1f00 	ldrex	r1, [r3]
    c30a:	2900      	cmp	r1, #0
    c30c:	d103      	bne.n	c316 <bt_gatt_init+0x1a>
    c30e:	e843 2000 	strex	r0, r2, [r3]
    c312:	2800      	cmp	r0, #0
    c314:	d1f7      	bne.n	c306 <bt_gatt_init+0xa>
    c316:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    c31a:	d12d      	bne.n	c378 <bt_gatt_init+0x7c>
    c31c:	f3bf 8f5b 	dmb	ish
    c320:	4b17      	ldr	r3, [pc, #92]	; (c380 <bt_gatt_init+0x84>)
    c322:	e853 1f00 	ldrex	r1, [r3]
    c326:	2900      	cmp	r1, #0
    c328:	d103      	bne.n	c332 <bt_gatt_init+0x36>
    c32a:	e843 2000 	strex	r0, r2, [r3]
    c32e:	2800      	cmp	r0, #0
    c330:	d1f7      	bne.n	c322 <bt_gatt_init+0x26>
    c332:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    c336:	d108      	bne.n	c34a <bt_gatt_init+0x4e>
    c338:	4912      	ldr	r1, [pc, #72]	; (c384 <bt_gatt_init+0x88>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    c33a:	4a13      	ldr	r2, [pc, #76]	; (c388 <bt_gatt_init+0x8c>)
    c33c:	880b      	ldrh	r3, [r1, #0]
    c33e:	4c13      	ldr	r4, [pc, #76]	; (c38c <bt_gatt_init+0x90>)
	if (!atomic_cas(&service_init, 0, 1)) {
    c340:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    c342:	42a2      	cmp	r2, r4
    c344:	d312      	bcc.n	c36c <bt_gatt_init+0x70>
    c346:	b100      	cbz	r0, c34a <bt_gatt_init+0x4e>
    c348:	800b      	strh	r3, [r1, #0]
	k_work_init_delayable(&work->work, handler);
    c34a:	4911      	ldr	r1, [pc, #68]	; (c390 <bt_gatt_init+0x94>)
    c34c:	4811      	ldr	r0, [pc, #68]	; (c394 <bt_gatt_init+0x98>)
    c34e:	f015 fe25 	bl	21f9c <k_work_init_delayable>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    c352:	4910      	ldr	r1, [pc, #64]	; (c394 <bt_gatt_init+0x98>)
    c354:	4810      	ldr	r0, [pc, #64]	; (c398 <bt_gatt_init+0x9c>)
    c356:	f44f 72a4 	mov.w	r2, #328	; 0x148
    c35a:	2300      	movs	r3, #0
    c35c:	f010 f8f6 	bl	1c54c <k_work_reschedule_for_queue>
}
    c360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&work->work, handler);
    c364:	490d      	ldr	r1, [pc, #52]	; (c39c <bt_gatt_init+0xa0>)
    c366:	480e      	ldr	r0, [pc, #56]	; (c3a0 <bt_gatt_init+0xa4>)
    c368:	f015 be18 	b.w	21f9c <k_work_init_delayable>
		last_static_handle += svc->attr_count;
    c36c:	6850      	ldr	r0, [r2, #4]
    c36e:	4403      	add	r3, r0
    c370:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    c372:	3208      	adds	r2, #8
    c374:	2001      	movs	r0, #1
    c376:	e7e4      	b.n	c342 <bt_gatt_init+0x46>
}
    c378:	bd10      	pop	{r4, pc}
    c37a:	bf00      	nop
    c37c:	200019bc 	.word	0x200019bc
    c380:	200019d8 	.word	0x200019d8
    c384:	20002d90 	.word	0x20002d90
    c388:	000225b0 	.word	0x000225b0
    c38c:	000225d8 	.word	0x000225d8
    c390:	00020d59 	.word	0x00020d59
    c394:	20000e18 	.word	0x20000e18
    c398:	200015c0 	.word	0x200015c0
    c39c:	0000c72d 	.word	0x0000c72d
    c3a0:	20000e68 	.word	0x20000e68

0000c3a4 <bt_gatt_attr_get_handle>:
{
    c3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    c3a8:	b330      	cbz	r0, c3f8 <bt_gatt_attr_get_handle+0x54>
	if (attr->handle) {
    c3aa:	8a05      	ldrh	r5, [r0, #16]
    c3ac:	b93d      	cbnz	r5, c3be <bt_gatt_attr_get_handle+0x1a>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    c3ae:	4a14      	ldr	r2, [pc, #80]	; (c400 <bt_gatt_attr_get_handle+0x5c>)
    c3b0:	f8df e050 	ldr.w	lr, [pc, #80]	; c404 <bt_gatt_attr_get_handle+0x60>
	uint16_t handle = 1;
    c3b4:	2101      	movs	r1, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    c3b6:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    c3ba:	4572      	cmp	r2, lr
    c3bc:	d302      	bcc.n	c3c4 <bt_gatt_attr_get_handle+0x20>
}
    c3be:	4628      	mov	r0, r5
    c3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    c3c4:	e9d2 7600 	ldrd	r7, r6, [r2]
		if ((attr < &static_svc->attrs[0]) ||
    c3c8:	42b8      	cmp	r0, r7
    c3ca:	d304      	bcc.n	c3d6 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    c3cc:	fb0c 7306 	mla	r3, ip, r6, r7
    c3d0:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
    c3d2:	4298      	cmp	r0, r3
    c3d4:	d90e      	bls.n	c3f4 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    c3d6:	198b      	adds	r3, r1, r6
    c3d8:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    c3da:	3208      	adds	r2, #8
    c3dc:	4619      	mov	r1, r3
    c3de:	e7ec      	b.n	c3ba <bt_gatt_attr_get_handle+0x16>
			if (attr == &static_svc->attrs[i]) {
    c3e0:	fb0c 7804 	mla	r8, ip, r4, r7
    c3e4:	4540      	cmp	r0, r8
    c3e6:	d009      	beq.n	c3fc <bt_gatt_attr_get_handle+0x58>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    c3e8:	3401      	adds	r4, #1
    c3ea:	190b      	adds	r3, r1, r4
    c3ec:	42b4      	cmp	r4, r6
    c3ee:	b29b      	uxth	r3, r3
    c3f0:	d1f6      	bne.n	c3e0 <bt_gatt_attr_get_handle+0x3c>
    c3f2:	e7f2      	b.n	c3da <bt_gatt_attr_get_handle+0x36>
    c3f4:	2400      	movs	r4, #0
    c3f6:	e7f8      	b.n	c3ea <bt_gatt_attr_get_handle+0x46>
		return 0;
    c3f8:	4605      	mov	r5, r0
    c3fa:	e7e0      	b.n	c3be <bt_gatt_attr_get_handle+0x1a>
    c3fc:	461d      	mov	r5, r3
    c3fe:	e7de      	b.n	c3be <bt_gatt_attr_get_handle+0x1a>
    c400:	000225b0 	.word	0x000225b0
    c404:	000225d8 	.word	0x000225d8

0000c408 <bt_gatt_foreach_attr_type>:
{
    c408:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c40c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    c410:	9100      	str	r1, [sp, #0]
    c412:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    c414:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c418:	2d00      	cmp	r5, #0
    c41a:	bf08      	it	eq
    c41c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    c41e:	4b24      	ldr	r3, [pc, #144]	; (c4b0 <bt_gatt_foreach_attr_type+0xa8>)
    c420:	881b      	ldrh	r3, [r3, #0]
    c422:	4283      	cmp	r3, r0
{
    c424:	4607      	mov	r7, r0
    c426:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    c428:	d23c      	bcs.n	c4a4 <bt_gatt_foreach_attr_type+0x9c>
}
    c42a:	b003      	add	sp, #12
    c42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    c430:	6873      	ldr	r3, [r6, #4]
    c432:	4423      	add	r3, r4
    c434:	42bb      	cmp	r3, r7
    c436:	d232      	bcs.n	c49e <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    c438:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    c43a:	3608      	adds	r6, #8
    c43c:	4b1d      	ldr	r3, [pc, #116]	; (c4b4 <bt_gatt_foreach_attr_type+0xac>)
    c43e:	429e      	cmp	r6, r3
    c440:	d3f6      	bcc.n	c430 <bt_gatt_foreach_attr_type+0x28>
    c442:	e7f2      	b.n	c42a <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    c444:	5889      	ldr	r1, [r1, r2]
    c446:	9301      	str	r3, [sp, #4]
    c448:	4640      	mov	r0, r8
    c44a:	f013 f93f 	bl	1f6cc <bt_uuid_cmp>
    c44e:	9b01      	ldr	r3, [sp, #4]
    c450:	b190      	cbz	r0, c478 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    c452:	3401      	adds	r4, #1
    c454:	f10a 0a01 	add.w	sl, sl, #1
    c458:	b2a4      	uxth	r4, r4
    c45a:	6873      	ldr	r3, [r6, #4]
    c45c:	4553      	cmp	r3, sl
    c45e:	d9ec      	bls.n	c43a <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    c460:	9b00      	ldr	r3, [sp, #0]
    c462:	429c      	cmp	r4, r3
    c464:	d8e1      	bhi.n	c42a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    c466:	42bc      	cmp	r4, r7
    c468:	d3f3      	bcc.n	c452 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    c46a:	6831      	ldr	r1, [r6, #0]
    c46c:	fb0b f20a 	mul.w	r2, fp, sl
    c470:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    c472:	f1b8 0f00 	cmp.w	r8, #0
    c476:	d1e5      	bne.n	c444 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    c478:	f1b9 0f00 	cmp.w	r9, #0
    c47c:	d10b      	bne.n	c496 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    c47e:	3d01      	subs	r5, #1
    c480:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    c482:	4618      	mov	r0, r3
    c484:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c488:	4621      	mov	r1, r4
    c48a:	4798      	blx	r3
	if (!*num_matches) {
    c48c:	2d00      	cmp	r5, #0
    c48e:	d0cc      	beq.n	c42a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    c490:	2800      	cmp	r0, #0
    c492:	d1de      	bne.n	c452 <bt_gatt_foreach_attr_type+0x4a>
    c494:	e7c9      	b.n	c42a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    c496:	68da      	ldr	r2, [r3, #12]
    c498:	4591      	cmp	r9, r2
    c49a:	d1da      	bne.n	c452 <bt_gatt_foreach_attr_type+0x4a>
    c49c:	e7ef      	b.n	c47e <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    c49e:	f04f 0a00 	mov.w	sl, #0
    c4a2:	e7da      	b.n	c45a <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    c4a4:	4e04      	ldr	r6, [pc, #16]	; (c4b8 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    c4a6:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    c4a8:	f04f 0b14 	mov.w	fp, #20
    c4ac:	e7c6      	b.n	c43c <bt_gatt_foreach_attr_type+0x34>
    c4ae:	bf00      	nop
    c4b0:	20002d90 	.word	0x20002d90
    c4b4:	000225d8 	.word	0x000225d8
    c4b8:	000225b0 	.word	0x000225b0

0000c4bc <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
    c4bc:	b510      	push	{r4, lr}
    c4be:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
    c4c0:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    c4c2:	aa1c      	add	r2, sp, #112	; 0x70
    c4c4:	4669      	mov	r1, sp
    c4c6:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    c4c8:	e9cd 3300 	strd	r3, r3, [sp]
    c4cc:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    c4d0:	f012 fedf 	bl	1f292 <tc_cmac_setup>
    c4d4:	b958      	cbnz	r0, c4ee <db_hash_gen.constprop.0+0x32>
    c4d6:	4917      	ldr	r1, [pc, #92]	; (c534 <db_hash_gen.constprop.0+0x78>)
    c4d8:	4b17      	ldr	r3, [pc, #92]	; (c538 <db_hash_gen.constprop.0+0x7c>)
		BT_ERR("Unable to setup AES CMAC");
    c4da:	4818      	ldr	r0, [pc, #96]	; (c53c <db_hash_gen.constprop.0+0x80>)
    c4dc:	1ac9      	subs	r1, r1, r3
    c4de:	08c9      	lsrs	r1, r1, #3
    c4e0:	0189      	lsls	r1, r1, #6
    c4e2:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
    c4e6:	f011 fa1d 	bl	1d924 <log_0>
}
    c4ea:	b048      	add	sp, #288	; 0x120
    c4ec:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    c4ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c4f2:	2001      	movs	r0, #1
    c4f4:	4a12      	ldr	r2, [pc, #72]	; (c540 <db_hash_gen.constprop.0+0x84>)
    c4f6:	ab04      	add	r3, sp, #16
    c4f8:	f014 fc23 	bl	20d42 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    c4fc:	4811      	ldr	r0, [pc, #68]	; (c544 <db_hash_gen.constprop.0+0x88>)
    c4fe:	a904      	add	r1, sp, #16
    c500:	f012 ff5d 	bl	1f3be <tc_cmac_final>
    c504:	b940      	cbnz	r0, c518 <db_hash_gen.constprop.0+0x5c>
    c506:	490b      	ldr	r1, [pc, #44]	; (c534 <db_hash_gen.constprop.0+0x78>)
    c508:	4b0b      	ldr	r3, [pc, #44]	; (c538 <db_hash_gen.constprop.0+0x7c>)
		BT_ERR("Unable to calculate hash");
    c50a:	480f      	ldr	r0, [pc, #60]	; (c548 <db_hash_gen.constprop.0+0x8c>)
    c50c:	1ac9      	subs	r1, r1, r3
    c50e:	08c9      	lsrs	r1, r1, #3
    c510:	0189      	lsls	r1, r1, #6
    c512:	f041 0101 	orr.w	r1, r1, #1
    c516:	e7e6      	b.n	c4e6 <db_hash_gen.constprop.0+0x2a>
    c518:	4b0a      	ldr	r3, [pc, #40]	; (c544 <db_hash_gen.constprop.0+0x88>)
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    c51a:	2208      	movs	r2, #8
    c51c:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    c520:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    c522:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    c526:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
    c52a:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    c52c:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    c52e:	d1f7      	bne.n	c520 <db_hash_gen.constprop.0+0x64>
    c530:	e7db      	b.n	c4ea <db_hash_gen.constprop.0+0x2e>
    c532:	bf00      	nop
    c534:	000226a8 	.word	0x000226a8
    c538:	000225d8 	.word	0x000225d8
    c53c:	00025998 	.word	0x00025998
    c540:	0002092f 	.word	0x0002092f
    c544:	2000354d 	.word	0x2000354d
    c548:	000259b1 	.word	0x000259b1

0000c54c <bt_gatt_notify_cb>:
{
    c54c:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c54e:	4b37      	ldr	r3, [pc, #220]	; (c62c <bt_gatt_notify_cb+0xe0>)
    c550:	f3bf 8f5b 	dmb	ish
    c554:	681b      	ldr	r3, [r3, #0]
    c556:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    c55a:	079a      	lsls	r2, r3, #30
{
    c55c:	b08b      	sub	sp, #44	; 0x2c
    c55e:	4604      	mov	r4, r0
    c560:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    c562:	d55d      	bpl.n	c620 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
    c564:	6848      	ldr	r0, [r1, #4]
    c566:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    c568:	b114      	cbz	r4, c570 <bt_gatt_notify_cb+0x24>
    c56a:	7b63      	ldrb	r3, [r4, #13]
    c56c:	2b07      	cmp	r3, #7
    c56e:	d15a      	bne.n	c626 <bt_gatt_notify_cb+0xda>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    c570:	f7ff ff18 	bl	c3a4 <bt_gatt_attr_get_handle>
    c574:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    c578:	b918      	cbnz	r0, c582 <bt_gatt_notify_cb+0x36>
		return -ENOENT;
    c57a:	f06f 0001 	mvn.w	r0, #1
}
    c57e:	b00b      	add	sp, #44	; 0x2c
    c580:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    c582:	682a      	ldr	r2, [r5, #0]
    c584:	b9aa      	cbnz	r2, c5b2 <bt_gatt_notify_cb+0x66>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    c586:	9b05      	ldr	r3, [sp, #20]
    c588:	6818      	ldr	r0, [r3, #0]
    c58a:	2300      	movs	r3, #0
    c58c:	f88d 3010 	strb.w	r3, [sp, #16]
    c590:	a904      	add	r1, sp, #16
    c592:	f642 0303 	movw	r3, #10243	; 0x2803
    c596:	f8ad 3012 	strh.w	r3, [sp, #18]
    c59a:	f013 f897 	bl	1f6cc <bt_uuid_cmp>
    c59e:	b1c0      	cbz	r0, c5d2 <bt_gatt_notify_cb+0x86>
		return gatt_notify(conn, data.handle, params);
    c5a0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    c5a4:	b314      	cbz	r4, c5ec <bt_gatt_notify_cb+0xa0>
		return gatt_notify(conn, data.handle, params);
    c5a6:	4601      	mov	r1, r0
    c5a8:	462a      	mov	r2, r5
    c5aa:	4620      	mov	r0, r4
    c5ac:	f7ff fca4 	bl	bef8 <gatt_notify>
    c5b0:	e7e5      	b.n	c57e <bt_gatt_notify_cb+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    c5b2:	a905      	add	r1, sp, #20
    c5b4:	9102      	str	r1, [sp, #8]
    c5b6:	491e      	ldr	r1, [pc, #120]	; (c630 <bt_gatt_notify_cb+0xe4>)
    c5b8:	9101      	str	r1, [sp, #4]
    c5ba:	2101      	movs	r1, #1
	found->attr = NULL;
    c5bc:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    c5be:	9100      	str	r1, [sp, #0]
    c5c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    c5c4:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    c5c6:	f7ff ff1f 	bl	c408 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    c5ca:	9b05      	ldr	r3, [sp, #20]
    c5cc:	2b00      	cmp	r3, #0
    c5ce:	d1da      	bne.n	c586 <bt_gatt_notify_cb+0x3a>
    c5d0:	e7d3      	b.n	c57a <bt_gatt_notify_cb+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    c5d2:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    c5d4:	68c3      	ldr	r3, [r0, #12]
    c5d6:	799b      	ldrb	r3, [r3, #6]
    c5d8:	06db      	lsls	r3, r3, #27
    c5da:	d402      	bmi.n	c5e2 <bt_gatt_notify_cb+0x96>
			return -EINVAL;
    c5dc:	f06f 0015 	mvn.w	r0, #21
    c5e0:	e7cd      	b.n	c57e <bt_gatt_notify_cb+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    c5e2:	f014 fb5f 	bl	20ca4 <bt_gatt_attr_value_handle>
    c5e6:	f8ad 0018 	strh.w	r0, [sp, #24]
    c5ea:	e7d9      	b.n	c5a0 <bt_gatt_notify_cb+0x54>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    c5ec:	f642 1202 	movw	r2, #10498	; 0x2902
    c5f0:	f8ad 2012 	strh.w	r2, [sp, #18]
    c5f4:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
    c5f6:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    c5fa:	9202      	str	r2, [sp, #8]
    c5fc:	4a0d      	ldr	r2, [pc, #52]	; (c634 <bt_gatt_notify_cb+0xe8>)
	data.err = -ENOTCONN;
    c5fe:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
    c600:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    c602:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    c606:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    c60a:	aa04      	add	r2, sp, #16
    c60c:	4623      	mov	r3, r4
    c60e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    c612:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    c614:	f88d 4010 	strb.w	r4, [sp, #16]
    c618:	f7ff fef6 	bl	c408 <bt_gatt_foreach_attr_type>
	return data.err;
    c61c:	9807      	ldr	r0, [sp, #28]
    c61e:	e7ae      	b.n	c57e <bt_gatt_notify_cb+0x32>
		return -EAGAIN;
    c620:	f06f 000a 	mvn.w	r0, #10
    c624:	e7ab      	b.n	c57e <bt_gatt_notify_cb+0x32>
		return -ENOTCONN;
    c626:	f06f 0038 	mvn.w	r0, #56	; 0x38
    c62a:	e7a8      	b.n	c57e <bt_gatt_notify_cb+0x32>
    c62c:	20000098 	.word	0x20000098
    c630:	00020927 	.word	0x00020927
    c634:	0000c0ed 	.word	0x0000c0ed

0000c638 <bt_gatt_indicate>:
{
    c638:	b530      	push	{r4, r5, lr}
    c63a:	4b39      	ldr	r3, [pc, #228]	; (c720 <bt_gatt_indicate+0xe8>)
    c63c:	f3bf 8f5b 	dmb	ish
    c640:	681b      	ldr	r3, [r3, #0]
    c642:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    c646:	079a      	lsls	r2, r3, #30
{
    c648:	b08b      	sub	sp, #44	; 0x2c
    c64a:	4604      	mov	r4, r0
    c64c:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    c64e:	d561      	bpl.n	c714 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
    c650:	6848      	ldr	r0, [r1, #4]
    c652:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    c654:	b114      	cbz	r4, c65c <bt_gatt_indicate+0x24>
    c656:	7b63      	ldrb	r3, [r4, #13]
    c658:	2b07      	cmp	r3, #7
    c65a:	d15e      	bne.n	c71a <bt_gatt_indicate+0xe2>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    c65c:	f7ff fea2 	bl	c3a4 <bt_gatt_attr_get_handle>
    c660:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    c664:	b918      	cbnz	r0, c66e <bt_gatt_indicate+0x36>
		return -ENOENT;
    c666:	f06f 0001 	mvn.w	r0, #1
}
    c66a:	b00b      	add	sp, #44	; 0x2c
    c66c:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    c66e:	682a      	ldr	r2, [r5, #0]
    c670:	b9ba      	cbnz	r2, c6a2 <bt_gatt_indicate+0x6a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    c672:	9b05      	ldr	r3, [sp, #20]
    c674:	6818      	ldr	r0, [r3, #0]
    c676:	2300      	movs	r3, #0
    c678:	f88d 3010 	strb.w	r3, [sp, #16]
    c67c:	a904      	add	r1, sp, #16
    c67e:	f642 0303 	movw	r3, #10243	; 0x2803
    c682:	f8ad 3012 	strh.w	r3, [sp, #18]
    c686:	f013 f821 	bl	1f6cc <bt_uuid_cmp>
    c68a:	b1d0      	cbz	r0, c6c2 <bt_gatt_indicate+0x8a>
		return gatt_indicate(conn, data.handle, params);
    c68c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    c690:	b324      	cbz	r4, c6dc <bt_gatt_indicate+0xa4>
		params->_ref = 1;
    c692:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    c694:	4601      	mov	r1, r0
		params->_ref = 1;
    c696:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    c698:	462a      	mov	r2, r5
    c69a:	4620      	mov	r0, r4
    c69c:	f7ff fb80 	bl	bda0 <gatt_indicate>
    c6a0:	e7e3      	b.n	c66a <bt_gatt_indicate+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    c6a2:	a905      	add	r1, sp, #20
    c6a4:	9102      	str	r1, [sp, #8]
    c6a6:	491f      	ldr	r1, [pc, #124]	; (c724 <bt_gatt_indicate+0xec>)
    c6a8:	9101      	str	r1, [sp, #4]
    c6aa:	2101      	movs	r1, #1
	found->attr = NULL;
    c6ac:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    c6ae:	9100      	str	r1, [sp, #0]
    c6b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    c6b4:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    c6b6:	f7ff fea7 	bl	c408 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    c6ba:	9b05      	ldr	r3, [sp, #20]
    c6bc:	2b00      	cmp	r3, #0
    c6be:	d1d8      	bne.n	c672 <bt_gatt_indicate+0x3a>
    c6c0:	e7d1      	b.n	c666 <bt_gatt_indicate+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    c6c2:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    c6c4:	68c3      	ldr	r3, [r0, #12]
    c6c6:	799b      	ldrb	r3, [r3, #6]
    c6c8:	069b      	lsls	r3, r3, #26
    c6ca:	d402      	bmi.n	c6d2 <bt_gatt_indicate+0x9a>
			return -EINVAL;
    c6cc:	f06f 0015 	mvn.w	r0, #21
    c6d0:	e7cb      	b.n	c66a <bt_gatt_indicate+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    c6d2:	f014 fae7 	bl	20ca4 <bt_gatt_attr_value_handle>
    c6d6:	f8ad 0018 	strh.w	r0, [sp, #24]
    c6da:	e7d7      	b.n	c68c <bt_gatt_indicate+0x54>
	data.err = -ENOTCONN;
    c6dc:	f06f 0338 	mvn.w	r3, #56	; 0x38
    c6e0:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    c6e2:	2302      	movs	r3, #2
    c6e4:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    c6e8:	f642 1302 	movw	r3, #10498	; 0x2902
    c6ec:	f8ad 3012 	strh.w	r3, [sp, #18]
    c6f0:	ab05      	add	r3, sp, #20
    c6f2:	9302      	str	r3, [sp, #8]
    c6f4:	4b0c      	ldr	r3, [pc, #48]	; (c728 <bt_gatt_indicate+0xf0>)
    c6f6:	9301      	str	r3, [sp, #4]
    c6f8:	2301      	movs	r3, #1
    c6fa:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    c6fc:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    c6fe:	4623      	mov	r3, r4
    c700:	aa04      	add	r2, sp, #16
    c702:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    c706:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    c708:	f88d 4010 	strb.w	r4, [sp, #16]
    c70c:	f7ff fe7c 	bl	c408 <bt_gatt_foreach_attr_type>
	return data.err;
    c710:	9807      	ldr	r0, [sp, #28]
    c712:	e7aa      	b.n	c66a <bt_gatt_indicate+0x32>
		return -EAGAIN;
    c714:	f06f 000a 	mvn.w	r0, #10
    c718:	e7a7      	b.n	c66a <bt_gatt_indicate+0x32>
		return -ENOTCONN;
    c71a:	f06f 0038 	mvn.w	r0, #56	; 0x38
    c71e:	e7a4      	b.n	c66a <bt_gatt_indicate+0x32>
    c720:	20000098 	.word	0x20000098
    c724:	00020927 	.word	0x00020927
    c728:	0000c0ed 	.word	0x0000c0ed

0000c72c <sc_process>:
{
    c72c:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    c72e:	f830 3c08 	ldrh.w	r3, [r0, #-8]
    c732:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    c736:	f830 3c06 	ldrh.w	r3, [r0, #-6]
    c73a:	f8ad 3006 	strh.w	r3, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    c73e:	f1a0 0120 	sub.w	r1, r0, #32
    c742:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c746:	f3bf 8f5b 	dmb	ish
    c74a:	e854 3f00 	ldrex	r3, [r4]
    c74e:	f023 0301 	bic.w	r3, r3, #1
    c752:	e844 3200 	strex	r2, r3, [r4]
    c756:	2a00      	cmp	r2, #0
    c758:	d1f7      	bne.n	c74a <sc_process+0x1e>
    c75a:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    c75e:	4a0d      	ldr	r2, [pc, #52]	; (c794 <sc_process+0x68>)
    c760:	f840 2c1c 	str.w	r2, [r0, #-28]
	sc->params.func = sc_indicate_rsp;
    c764:	4a0c      	ldr	r2, [pc, #48]	; (c798 <sc_process+0x6c>)
    c766:	f840 2c18 	str.w	r2, [r0, #-24]
	sc->params.data = &sc_range[0];
    c76a:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    c76c:	2300      	movs	r3, #0
	sc->params.data = &sc_range[0];
    c76e:	f840 2c10 	str.w	r2, [r0, #-16]
	sc->params.len = sizeof(sc_range);
    c772:	2204      	movs	r2, #4
	sc->start = 0U;
    c774:	f820 3c08 	strh.w	r3, [r0, #-8]
	sc->end = 0U;
    c778:	f820 3c06 	strh.w	r3, [r0, #-6]
	sc->params.len = sizeof(sc_range);
    c77c:	f820 2c0c 	strh.w	r2, [r0, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    c780:	4618      	mov	r0, r3
    c782:	f7ff ff59 	bl	c638 <bt_gatt_indicate>
    c786:	b918      	cbnz	r0, c790 <sc_process+0x64>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    c788:	2101      	movs	r1, #1
    c78a:	4620      	mov	r0, r4
    c78c:	f014 f945 	bl	20a1a <atomic_set_bit>
}
    c790:	b002      	add	sp, #8
    c792:	bd10      	pop	{r4, pc}
    c794:	00022ed8 	.word	0x00022ed8
    c798:	0000c29d 	.word	0x0000c29d

0000c79c <update_ccc>:
{
    c79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    c7a0:	6881      	ldr	r1, [r0, #8]
{
    c7a2:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    c7a4:	4a41      	ldr	r2, [pc, #260]	; (c8ac <update_ccc+0x110>)
    c7a6:	4291      	cmp	r1, r2
{
    c7a8:	b085      	sub	sp, #20
    c7aa:	4682      	mov	sl, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    c7ac:	d179      	bne.n	c8a2 <update_ccc+0x106>
    c7ae:	4c40      	ldr	r4, [pc, #256]	; (c8b0 <update_ccc+0x114>)
    c7b0:	4940      	ldr	r1, [pc, #256]	; (c8b4 <update_ccc+0x118>)
	ccc = attr->user_data;
    c7b2:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
    c7b6:	683d      	ldr	r5, [r7, #0]
				BT_WARN("CCC %p not writable", attr);
    c7b8:	f8df b110 	ldr.w	fp, [pc, #272]	; c8cc <update_ccc+0x130>
    c7bc:	1a64      	subs	r4, r4, r1
    c7be:	08e4      	lsrs	r4, r4, #3
    c7c0:	f108 0315 	add.w	r3, r8, #21
    c7c4:	ea4f 1984 	mov.w	r9, r4, lsl #6
    c7c8:	f108 0601 	add.w	r6, r8, #1
    c7cc:	9300      	str	r3, [sp, #0]
    c7ce:	f049 0902 	orr.w	r9, r9, #2
		if (!cfg->value ||
    c7d2:	f8b6 2007 	ldrh.w	r2, [r6, #7]
    c7d6:	b19a      	cbz	r2, c800 <update_ccc+0x64>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    c7d8:	f816 1c01 	ldrb.w	r1, [r6, #-1]
    c7dc:	4632      	mov	r2, r6
    c7de:	4628      	mov	r0, r5
    c7e0:	f013 fb4d 	bl	1fe7e <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    c7e4:	b160      	cbz	r0, c800 <update_ccc+0x64>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    c7e6:	222a      	movs	r2, #42	; 0x2a
    c7e8:	4651      	mov	r1, sl
    c7ea:	4628      	mov	r0, r5
    c7ec:	f014 fab6 	bl	20d5c <bt_gatt_check_perm>
		if (err) {
    c7f0:	b1d8      	cbz	r0, c82a <update_ccc+0x8e>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    c7f2:	2803      	cmp	r0, #3
    c7f4:	d109      	bne.n	c80a <update_ccc+0x6e>
				BT_WARN("CCC %p not writable", attr);
    c7f6:	464a      	mov	r2, r9
    c7f8:	4651      	mov	r1, sl
    c7fa:	4658      	mov	r0, fp
    c7fc:	f011 f8a1 	bl	1d942 <log_1>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    c800:	9b00      	ldr	r3, [sp, #0]
    c802:	360a      	adds	r6, #10
    c804:	429e      	cmp	r6, r3
    c806:	d04c      	beq.n	c8a2 <update_ccc+0x106>
    c808:	e7e3      	b.n	c7d2 <update_ccc+0x36>
				sec = BT_SECURITY_L3;
    c80a:	2805      	cmp	r0, #5
    c80c:	bf14      	ite	ne
    c80e:	2202      	movne	r2, #2
    c810:	2203      	moveq	r2, #3
			    bt_conn_get_security(conn) < sec) {
    c812:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
    c814:	9201      	str	r2, [sp, #4]
			    bt_conn_get_security(conn) < sec) {
    c816:	f013 fb27 	bl	1fe68 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    c81a:	9a01      	ldr	r2, [sp, #4]
    c81c:	4282      	cmp	r2, r0
    c81e:	d904      	bls.n	c82a <update_ccc+0x8e>
				if (data->sec < sec) {
    c820:	7939      	ldrb	r1, [r7, #4]
    c822:	4291      	cmp	r1, r2
    c824:	d2ec      	bcs.n	c800 <update_ccc+0x64>
					data->sec = sec;
    c826:	713a      	strb	r2, [r7, #4]
    c828:	e7ea      	b.n	c800 <update_ccc+0x64>
		gatt_ccc_changed(attr, ccc);
    c82a:	4641      	mov	r1, r8
    c82c:	4650      	mov	r0, sl
    c82e:	f014 f859 	bl	208e4 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    c832:	4b21      	ldr	r3, [pc, #132]	; (c8b8 <update_ccc+0x11c>)
    c834:	4598      	cmp	r8, r3
    c836:	d134      	bne.n	c8a2 <update_ccc+0x106>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    c838:	7a28      	ldrb	r0, [r5, #8]
    c83a:	f105 0188 	add.w	r1, r5, #136	; 0x88
    c83e:	f7ff fbfb 	bl	c038 <find_sc_cfg>
	if (!cfg) {
    c842:	4606      	mov	r6, r0
    c844:	b368      	cbz	r0, c8a2 <update_ccc+0x106>
	if (!(cfg->data.start || cfg->data.end)) {
    c846:	8902      	ldrh	r2, [r0, #8]
    c848:	8943      	ldrh	r3, [r0, #10]
    c84a:	ea52 0103 	orrs.w	r1, r2, r3
    c84e:	d028      	beq.n	c8a2 <update_ccc+0x106>
	index = bt_conn_index(conn);
    c850:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    c852:	f8ad 200c 	strh.w	r2, [sp, #12]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    c856:	f8ad 300e 	strh.w	r3, [sp, #14]
	index = bt_conn_index(conn);
    c85a:	f7fe f953 	bl	ab04 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    c85e:	4917      	ldr	r1, [pc, #92]	; (c8bc <update_ccc+0x120>)
    c860:	2218      	movs	r2, #24
    c862:	fb02 1200 	mla	r2, r2, r0, r1
	index = bt_conn_index(conn);
    c866:	4603      	mov	r3, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    c868:	4815      	ldr	r0, [pc, #84]	; (c8c0 <update_ccc+0x124>)
    c86a:	6050      	str	r0, [r2, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    c86c:	4815      	ldr	r0, [pc, #84]	; (c8c4 <update_ccc+0x128>)
    c86e:	6090      	str	r0, [r2, #8]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    c870:	b21b      	sxth	r3, r3
	sc_restore_params[index].data = &sc_range[0];
    c872:	a803      	add	r0, sp, #12
    c874:	6110      	str	r0, [r2, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    c876:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	sc_restore_params[index].len = sizeof(sc_range);
    c87a:	2004      	movs	r0, #4
    c87c:	8290      	strh	r0, [r2, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    c87e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    c882:	4628      	mov	r0, r5
    c884:	f7ff fed8 	bl	c638 <bt_gatt_indicate>
    c888:	b128      	cbz	r0, c896 <update_ccc+0xfa>
		BT_ERR("SC restore indication failed");
    c88a:	01a1      	lsls	r1, r4, #6
    c88c:	480e      	ldr	r0, [pc, #56]	; (c8c8 <update_ccc+0x12c>)
    c88e:	f041 0101 	orr.w	r1, r1, #1
    c892:	f011 f847 	bl	1d924 <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
    c896:	2204      	movs	r2, #4
    c898:	2100      	movs	r1, #0
    c89a:	f106 0008 	add.w	r0, r6, #8
    c89e:	f012 fe46 	bl	1f52e <memset>
}
    c8a2:	2001      	movs	r0, #1
    c8a4:	b005      	add	sp, #20
    c8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c8aa:	bf00      	nop
    c8ac:	0000bf6d 	.word	0x0000bf6d
    c8b0:	000226a8 	.word	0x000226a8
    c8b4:	000225d8 	.word	0x000225d8
    c8b8:	20000290 	.word	0x20000290
    c8bc:	200019c0 	.word	0x200019c0
    c8c0:	00022ed8 	.word	0x00022ed8
    c8c4:	00020a39 	.word	0x00020a39
    c8c8:	000259de 	.word	0x000259de
    c8cc:	000259ca 	.word	0x000259ca

0000c8d0 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    c8d0:	b513      	push	{r0, r1, r4, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    c8d2:	4a0b      	ldr	r2, [pc, #44]	; (c900 <bt_gatt_connected+0x30>)
	data.conn = conn;
    c8d4:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    c8d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
    c8da:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    c8dc:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    c8de:	2001      	movs	r0, #1
    c8e0:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    c8e4:	f014 fa2d 	bl	20d42 <bt_gatt_foreach_attr>
	 * client prior to sending an indication or notification. If the client
	 * does not have an LTK indicating that the client has lost the bond,
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    bt_conn_get_security(conn) < data.sec) {
    c8e8:	4620      	mov	r0, r4
    c8ea:	f013 fabd 	bl	1fe68 <bt_conn_get_security>
    c8ee:	f89d 1004 	ldrb.w	r1, [sp, #4]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    c8f2:	4288      	cmp	r0, r1
    c8f4:	d202      	bcs.n	c8fc <bt_gatt_connected+0x2c>
		bt_conn_set_security(conn, data.sec);
    c8f6:	4620      	mov	r0, r4
    c8f8:	f013 fa86 	bl	1fe08 <bt_conn_set_security>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
    c8fc:	b002      	add	sp, #8
    c8fe:	bd10      	pop	{r4, pc}
    c900:	0000c79d 	.word	0x0000c79d

0000c904 <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
    c904:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("conn %p", conn);

	data.conn = conn;
	data.sec = BT_SECURITY_L1;

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    c906:	4a06      	ldr	r2, [pc, #24]	; (c920 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
    c908:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    c90a:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    c90c:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    c90e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    c912:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    c916:	f014 fa14 	bl	20d42 <bt_gatt_foreach_attr>
}
    c91a:	b003      	add	sp, #12
    c91c:	f85d fb04 	ldr.w	pc, [sp], #4
    c920:	0000c79d 	.word	0x0000c79d

0000c924 <db_hash_read>:
{
    c924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c928:	4680      	mov	r8, r0
	return k_work_delayable_busy_get(dwork) != 0;
    c92a:	4813      	ldr	r0, [pc, #76]	; (c978 <db_hash_read+0x54>)
    c92c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    c930:	4615      	mov	r5, r2
    c932:	461f      	mov	r7, r3
    c934:	f015 fb3e 	bl	21fb4 <k_work_delayable_busy_get>
    c938:	4604      	mov	r4, r0
	int rc = k_work_cancel_delayable(&work->work);
    c93a:	480f      	ldr	r0, [pc, #60]	; (c978 <db_hash_read+0x54>)
    c93c:	f015 fb4e 	bl	21fdc <k_work_cancel_delayable>
	if (pending) {
    c940:	b114      	cbz	r4, c948 <db_hash_read+0x24>
		return (rc == 0) ? 0 : -EINVAL;
    c942:	b908      	cbnz	r0, c948 <db_hash_read+0x24>
		db_hash_gen(true);
    c944:	f7ff fdba 	bl	c4bc <db_hash_gen.constprop.0>
	bt_gatt_change_aware(conn, true);
    c948:	2101      	movs	r1, #1
    c94a:	4640      	mov	r0, r8
    c94c:	f014 fa31 	bl	20db2 <bt_gatt_change_aware>
	if (offset > value_len) {
    c950:	2e10      	cmp	r6, #16
    c952:	d80d      	bhi.n	c970 <db_hash_read+0x4c>
	len = MIN(buf_len, value_len - offset);
    c954:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    c958:	4908      	ldr	r1, [pc, #32]	; (c97c <db_hash_read+0x58>)
	len = MIN(buf_len, value_len - offset);
    c95a:	42bc      	cmp	r4, r7
    c95c:	bfa8      	it	ge
    c95e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    c960:	4622      	mov	r2, r4
    c962:	4431      	add	r1, r6
    c964:	4628      	mov	r0, r5
    c966:	f012 fdb7 	bl	1f4d8 <memcpy>
}
    c96a:	4620      	mov	r0, r4
    c96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    c970:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    c974:	e7f9      	b.n	c96a <db_hash_read+0x46>
    c976:	bf00      	nop
    c978:	20000e18 	.word	0x20000e18
    c97c:	2000354d 	.word	0x2000354d

0000c980 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    c980:	b537      	push	{r0, r1, r2, r4, r5, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    c982:	4603      	mov	r3, r0
    c984:	4a15      	ldr	r2, [pc, #84]	; (c9dc <bt_gatt_disconnected+0x5c>)
{
    c986:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    c988:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c98c:	2001      	movs	r0, #1
    c98e:	f014 f9d8 	bl	20d42 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    c992:	4628      	mov	r0, r5
    c994:	f7ff f9e2 	bl	bd5c <find_cf_cfg>
	if (!cfg) {
    c998:	4604      	mov	r4, r0
    c99a:	b1e8      	cbz	r0, c9d8 <bt_gatt_disconnected+0x58>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c99c:	f105 0188 	add.w	r1, r5, #136	; 0x88
    c9a0:	7a28      	ldrb	r0, [r5, #8]
    c9a2:	9101      	str	r1, [sp, #4]
    c9a4:	f012 fff0 	bl	1f988 <bt_addr_le_is_bonded>
    c9a8:	9901      	ldr	r1, [sp, #4]
    c9aa:	b928      	cbnz	r0, c9b8 <bt_gatt_disconnected+0x38>
		clear_cf_cfg(cfg);
    c9ac:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    c9ae:	b003      	add	sp, #12
    c9b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		clear_cf_cfg(cfg);
    c9b4:	f014 b814 	b.w	209e0 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    c9b8:	1c60      	adds	r0, r4, #1
    c9ba:	340c      	adds	r4, #12
    c9bc:	f014 f80d 	bl	209da <bt_addr_le_copy>
    c9c0:	f3bf 8f5b 	dmb	ish
    c9c4:	e854 3f00 	ldrex	r3, [r4]
    c9c8:	f023 0302 	bic.w	r3, r3, #2
    c9cc:	e844 3200 	strex	r2, r3, [r4]
    c9d0:	2a00      	cmp	r2, #0
    c9d2:	d1f7      	bne.n	c9c4 <bt_gatt_disconnected+0x44>
    c9d4:	f3bf 8f5b 	dmb	ish
}
    c9d8:	b003      	add	sp, #12
    c9da:	bd30      	pop	{r4, r5, pc}
    c9dc:	0000c1e1 	.word	0x0000c1e1

0000c9e0 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
    c9e0:	4b10      	ldr	r3, [pc, #64]	; (ca24 <get_io_capa+0x44>)
    c9e2:	681b      	ldr	r3, [r3, #0]
    c9e4:	b1bb      	cbz	r3, ca16 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    c9e6:	681a      	ldr	r2, [r3, #0]
    c9e8:	b142      	cbz	r2, c9fc <get_io_capa+0x1c>
    c9ea:	6859      	ldr	r1, [r3, #4]
    c9ec:	b131      	cbz	r1, c9fc <get_io_capa+0x1c>
    c9ee:	6899      	ldr	r1, [r3, #8]
    c9f0:	b911      	cbnz	r1, c9f8 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    c9f2:	490d      	ldr	r1, [pc, #52]	; (ca28 <get_io_capa+0x48>)
    c9f4:	7809      	ldrb	r1, [r1, #0]
    c9f6:	b939      	cbnz	r1, ca08 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    c9f8:	2004      	movs	r0, #4
    c9fa:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    c9fc:	490a      	ldr	r1, [pc, #40]	; (ca28 <get_io_capa+0x48>)
    c9fe:	7809      	ldrb	r1, [r1, #0]
    ca00:	b111      	cbz	r1, ca08 <get_io_capa+0x28>
    ca02:	b10a      	cbz	r2, ca08 <get_io_capa+0x28>
    ca04:	6899      	ldr	r1, [r3, #8]
    ca06:	b941      	cbnz	r1, ca1a <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    ca08:	685b      	ldr	r3, [r3, #4]
    ca0a:	b943      	cbnz	r3, ca1e <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    ca0c:	2a00      	cmp	r2, #0
    ca0e:	bf0c      	ite	eq
    ca10:	2003      	moveq	r0, #3
    ca12:	2000      	movne	r0, #0
    ca14:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    ca16:	2003      	movs	r0, #3
    ca18:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    ca1a:	2001      	movs	r0, #1
    ca1c:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    ca1e:	2002      	movs	r0, #2
	}
}
    ca20:	4770      	bx	lr
    ca22:	bf00      	nop
    ca24:	20001948 	.word	0x20001948
    ca28:	2000355e 	.word	0x2000355e

0000ca2c <smp_chan_get>:
		return false;
	}
}

static struct bt_smp *smp_chan_get(struct bt_conn *conn)
{
    ca2c:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    ca2e:	2106      	movs	r1, #6
    ca30:	f013 fb79 	bl	20126 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    ca34:	4604      	mov	r4, r0
    ca36:	b948      	cbnz	r0, ca4c <smp_chan_get+0x20>
    ca38:	4905      	ldr	r1, [pc, #20]	; (ca50 <smp_chan_get+0x24>)
    ca3a:	4b06      	ldr	r3, [pc, #24]	; (ca54 <smp_chan_get+0x28>)
		BT_ERR("Unable to find SMP channel");
    ca3c:	4806      	ldr	r0, [pc, #24]	; (ca58 <smp_chan_get+0x2c>)
    ca3e:	1ac9      	subs	r1, r1, r3
    ca40:	08c9      	lsrs	r1, r1, #3
    ca42:	0189      	lsls	r1, r1, #6
    ca44:	f041 0101 	orr.w	r1, r1, #1
    ca48:	f010 ff6c 	bl	1d924 <log_0>
		return NULL;
	}

	return CONTAINER_OF(chan, struct bt_smp, chan);
}
    ca4c:	4620      	mov	r0, r4
    ca4e:	bd10      	pop	{r4, pc}
    ca50:	000226e0 	.word	0x000226e0
    ca54:	000225d8 	.word	0x000225d8
    ca58:	00025a0a 	.word	0x00025a0a

0000ca5c <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    ca5c:	4a0b      	ldr	r2, [pc, #44]	; (ca8c <bt_smp_accept+0x30>)
{
    ca5e:	b508      	push	{r3, lr}
		if (smp->chan.chan.conn) {
    ca60:	6813      	ldr	r3, [r2, #0]
    ca62:	b923      	cbnz	r3, ca6e <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.chan.ops = &ops;
    ca64:	480a      	ldr	r0, [pc, #40]	; (ca90 <bt_smp_accept+0x34>)
    ca66:	6050      	str	r0, [r2, #4]

		*chan = &smp->chan.chan;
    ca68:	600a      	str	r2, [r1, #0]

		return 0;
    ca6a:	4618      	mov	r0, r3
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    ca6c:	bd08      	pop	{r3, pc}
    ca6e:	4b09      	ldr	r3, [pc, #36]	; (ca94 <bt_smp_accept+0x38>)
    ca70:	4a09      	ldr	r2, [pc, #36]	; (ca98 <bt_smp_accept+0x3c>)
    ca72:	1ad2      	subs	r2, r2, r3
    ca74:	08d2      	lsrs	r2, r2, #3
	BT_ERR("No available SMP context for conn %p", conn);
    ca76:	0192      	lsls	r2, r2, #6
    ca78:	4601      	mov	r1, r0
    ca7a:	f042 0201 	orr.w	r2, r2, #1
    ca7e:	4807      	ldr	r0, [pc, #28]	; (ca9c <bt_smp_accept+0x40>)
    ca80:	f010 ff5f 	bl	1d942 <log_1>
	return -ENOMEM;
    ca84:	f06f 000b 	mvn.w	r0, #11
    ca88:	e7f0      	b.n	ca6c <bt_smp_accept+0x10>
    ca8a:	bf00      	nop
    ca8c:	20000ea0 	.word	0x20000ea0
    ca90:	00023054 	.word	0x00023054
    ca94:	000225d8 	.word	0x000225d8
    ca98:	000226e0 	.word	0x000226e0
    ca9c:	00025a25 	.word	0x00025a25

0000caa0 <get_auth.constprop.0>:
	if (sc_supported) {
    caa0:	4b0c      	ldr	r3, [pc, #48]	; (cad4 <get_auth.constprop.0+0x34>)
    caa2:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
    caa4:	b510      	push	{r4, lr}
	if (sc_supported) {
    caa6:	b17b      	cbz	r3, cac8 <get_auth.constprop.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
    caa8:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    caac:	f7ff ff98 	bl	c9e0 <get_io_capa>
	if (bondable) {
    cab0:	4b09      	ldr	r3, [pc, #36]	; (cad8 <get_auth.constprop.0+0x38>)
    cab2:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    cab4:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    cab6:	bf0c      	ite	eq
    cab8:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    cabc:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
    cac0:	b12b      	cbz	r3, cace <get_auth.constprop.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
    cac2:	f044 0001 	orr.w	r0, r4, #1
}
    cac6:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    cac8:	f000 0407 	and.w	r4, r0, #7
    cacc:	e7ee      	b.n	caac <get_auth.constprop.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
    cace:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
    cad2:	e7f8      	b.n	cac6 <get_auth.constprop.0+0x26>
    cad4:	2000355e 	.word	0x2000355e
    cad8:	2000078d 	.word	0x2000078d

0000cadc <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    cadc:	b513      	push	{r0, r1, r4, lr}
    cade:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    cae0:	2200      	movs	r2, #0
    cae2:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    cae4:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    cae6:	460a      	mov	r2, r1
    cae8:	6800      	ldr	r0, [r0, #0]
    caea:	2106      	movs	r1, #6
    caec:	f013 faf2 	bl	200d4 <bt_l2cap_send_cb>
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    caf0:	4805      	ldr	r0, [pc, #20]	; (cb08 <smp_send.constprop.0+0x2c>)
    caf2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    caf6:	2300      	movs	r3, #0
    caf8:	f504 71d8 	add.w	r1, r4, #432	; 0x1b0
}
    cafc:	b002      	add	sp, #8
    cafe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cb02:	f00f bd23 	b.w	1c54c <k_work_reschedule_for_queue>
    cb06:	bf00      	nop
    cb08:	200015c0 	.word	0x200015c0

0000cb0c <smp_init>:
{
    cb0c:	b538      	push	{r3, r4, r5, lr}
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    cb0e:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
{
    cb12:	4604      	mov	r4, r0
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    cb14:	22f0      	movs	r2, #240	; 0xf0
    cb16:	2100      	movs	r1, #0
    cb18:	4628      	mov	r0, r5
    cb1a:	f012 fd08 	bl	1f52e <memset>
	if (bt_rand(smp->prnd, 16)) {
    cb1e:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
    cb22:	2110      	movs	r1, #16
    cb24:	f004 fafa 	bl	1111c <bt_rand>
    cb28:	4604      	mov	r4, r0
    cb2a:	b948      	cbnz	r0, cb40 <smp_init+0x34>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    cb2c:	2105      	movs	r1, #5
    cb2e:	4628      	mov	r0, r5
    cb30:	f014 fa33 	bl	20f9a <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    cb34:	f7fd f9ce 	bl	9ed4 <bt_pub_key_get>
    cb38:	4b02      	ldr	r3, [pc, #8]	; (cb44 <smp_init+0x38>)
    cb3a:	6018      	str	r0, [r3, #0]
}
    cb3c:	4620      	mov	r0, r4
    cb3e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    cb40:	2408      	movs	r4, #8
    cb42:	e7fb      	b.n	cb3c <smp_init+0x30>
    cb44:	200019dc 	.word	0x200019dc

0000cb48 <smp_dhkey_generate>:
{
    cb48:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    cb4a:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
{
    cb4e:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    cb50:	2108      	movs	r1, #8
    cb52:	4628      	mov	r0, r5
    cb54:	f014 fa21 	bl	20f9a <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
    cb58:	490a      	ldr	r1, [pc, #40]	; (cb84 <smp_dhkey_generate+0x3c>)
    cb5a:	f204 1017 	addw	r0, r4, #279	; 0x117
    cb5e:	f7fd f9c9 	bl	9ef4 <bt_dh_key_gen>
	if (err) {
    cb62:	b170      	cbz	r0, cb82 <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    cb64:	2108      	movs	r1, #8
    cb66:	4628      	mov	r0, r5
    cb68:	f014 f961 	bl	20e2e <atomic_clear_bit>
    cb6c:	4b06      	ldr	r3, [pc, #24]	; (cb88 <smp_dhkey_generate+0x40>)
    cb6e:	4907      	ldr	r1, [pc, #28]	; (cb8c <smp_dhkey_generate+0x44>)
		BT_ERR("Failed to generate DHKey");
    cb70:	4807      	ldr	r0, [pc, #28]	; (cb90 <smp_dhkey_generate+0x48>)
    cb72:	1ac9      	subs	r1, r1, r3
    cb74:	08c9      	lsrs	r1, r1, #3
    cb76:	0189      	lsls	r1, r1, #6
    cb78:	f041 0101 	orr.w	r1, r1, #1
    cb7c:	f010 fed2 	bl	1d924 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    cb80:	2008      	movs	r0, #8
}
    cb82:	bd38      	pop	{r3, r4, r5, pc}
    cb84:	00021487 	.word	0x00021487
    cb88:	000225d8 	.word	0x000225d8
    cb8c:	000226e0 	.word	0x000226e0
    cb90:	00025a4a 	.word	0x00025a4a

0000cb94 <smp_find>:
{
    cb94:	4601      	mov	r1, r0
    cb96:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
    cb98:	4803      	ldr	r0, [pc, #12]	; (cba8 <smp_find+0x14>)
    cb9a:	f014 fa16 	bl	20fca <atomic_test_bit>
	return NULL;
    cb9e:	2800      	cmp	r0, #0
}
    cba0:	4802      	ldr	r0, [pc, #8]	; (cbac <smp_find+0x18>)
    cba2:	bf08      	it	eq
    cba4:	2000      	moveq	r0, #0
    cba6:	bd08      	pop	{r3, pc}
    cba8:	20000f64 	.word	0x20000f64
    cbac:	20000ea0 	.word	0x20000ea0

0000cbb0 <smp_ident_info>:
{
    cbb0:	b570      	push	{r4, r5, r6, lr}
    cbb2:	460b      	mov	r3, r1
    cbb4:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    cbb6:	210d      	movs	r1, #13
    cbb8:	30c4      	adds	r0, #196	; 0xc4
    cbba:	f014 fa06 	bl	20fca <atomic_test_bit>
    cbbe:	b308      	cbz	r0, cc04 <smp_ident_info+0x54>
		struct bt_smp_ident_info *req = (void *)buf->data;
    cbc0:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    cbc2:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    cbc4:	f103 0588 	add.w	r5, r3, #136	; 0x88
    cbc8:	7a19      	ldrb	r1, [r3, #8]
    cbca:	462a      	mov	r2, r5
    cbcc:	2002      	movs	r0, #2
    cbce:	f014 fce3 	bl	21598 <bt_keys_get_type>
		if (!keys) {
    cbd2:	b990      	cbnz	r0, cbfa <smp_ident_info+0x4a>
    cbd4:	4a0f      	ldr	r2, [pc, #60]	; (cc14 <smp_ident_info+0x64>)
    cbd6:	4c10      	ldr	r4, [pc, #64]	; (cc18 <smp_ident_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    cbd8:	4628      	mov	r0, r5
    cbda:	1aa4      	subs	r4, r4, r2
    cbdc:	f7fa fd62 	bl	76a4 <bt_addr_le_str_real>
    cbe0:	f7f8 fd90 	bl	5704 <log_strdup>
    cbe4:	08e4      	lsrs	r4, r4, #3
    cbe6:	01a4      	lsls	r4, r4, #6
    cbe8:	f044 0401 	orr.w	r4, r4, #1
    cbec:	4601      	mov	r1, r0
    cbee:	4622      	mov	r2, r4
    cbf0:	480a      	ldr	r0, [pc, #40]	; (cc1c <smp_ident_info+0x6c>)
    cbf2:	f010 fea6 	bl	1d942 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    cbf6:	2008      	movs	r0, #8
}
    cbf8:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
    cbfa:	2210      	movs	r2, #16
    cbfc:	4631      	mov	r1, r6
    cbfe:	302a      	adds	r0, #42	; 0x2a
    cc00:	f012 fc6a 	bl	1f4d8 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    cc04:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    cc08:	2109      	movs	r1, #9
    cc0a:	f014 f9c6 	bl	20f9a <atomic_set_bit>
	return 0;
    cc0e:	2000      	movs	r0, #0
    cc10:	e7f2      	b.n	cbf8 <smp_ident_info+0x48>
    cc12:	bf00      	nop
    cc14:	000225d8 	.word	0x000225d8
    cc18:	000226e0 	.word	0x000226e0
    cc1c:	00025a63 	.word	0x00025a63

0000cc20 <smp_encrypt_info>:
{
    cc20:	b570      	push	{r4, r5, r6, lr}
    cc22:	460b      	mov	r3, r1
    cc24:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    cc26:	210d      	movs	r1, #13
    cc28:	30c4      	adds	r0, #196	; 0xc4
    cc2a:	f014 f9ce 	bl	20fca <atomic_test_bit>
    cc2e:	b308      	cbz	r0, cc74 <smp_encrypt_info+0x54>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    cc30:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    cc32:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    cc34:	f103 0588 	add.w	r5, r3, #136	; 0x88
    cc38:	7a19      	ldrb	r1, [r3, #8]
    cc3a:	462a      	mov	r2, r5
    cc3c:	2004      	movs	r0, #4
    cc3e:	f014 fcab 	bl	21598 <bt_keys_get_type>
		if (!keys) {
    cc42:	b990      	cbnz	r0, cc6a <smp_encrypt_info+0x4a>
    cc44:	4a0f      	ldr	r2, [pc, #60]	; (cc84 <smp_encrypt_info+0x64>)
    cc46:	4c10      	ldr	r4, [pc, #64]	; (cc88 <smp_encrypt_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    cc48:	4628      	mov	r0, r5
    cc4a:	1aa4      	subs	r4, r4, r2
    cc4c:	f7fa fd2a 	bl	76a4 <bt_addr_le_str_real>
    cc50:	f7f8 fd58 	bl	5704 <log_strdup>
    cc54:	08e4      	lsrs	r4, r4, #3
    cc56:	01a4      	lsls	r4, r4, #6
    cc58:	f044 0401 	orr.w	r4, r4, #1
    cc5c:	4601      	mov	r1, r0
    cc5e:	4622      	mov	r2, r4
    cc60:	480a      	ldr	r0, [pc, #40]	; (cc8c <smp_encrypt_info+0x6c>)
    cc62:	f010 fe6e 	bl	1d942 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    cc66:	2008      	movs	r0, #8
}
    cc68:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
    cc6a:	2210      	movs	r2, #16
    cc6c:	4631      	mov	r1, r6
    cc6e:	301a      	adds	r0, #26
    cc70:	f012 fc32 	bl	1f4d8 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    cc74:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    cc78:	2107      	movs	r1, #7
    cc7a:	f014 f98e 	bl	20f9a <atomic_set_bit>
	return 0;
    cc7e:	2000      	movs	r0, #0
    cc80:	e7f2      	b.n	cc68 <smp_encrypt_info+0x48>
    cc82:	bf00      	nop
    cc84:	000225d8 	.word	0x000225d8
    cc88:	000226e0 	.word	0x000226e0
    cc8c:	00025a63 	.word	0x00025a63

0000cc90 <smp_send_pairing_confirm>:
{
    cc90:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    cc92:	f890 40c8 	ldrb.w	r4, [r0, #200]	; 0xc8
    cc96:	2c02      	cmp	r4, #2
{
    cc98:	4606      	mov	r6, r0
	switch (smp->method) {
    cc9a:	d823      	bhi.n	cce4 <smp_send_pairing_confirm+0x54>
    cc9c:	b144      	cbz	r4, ccb0 <smp_send_pairing_confirm+0x20>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    cc9e:	f890 319c 	ldrb.w	r3, [r0, #412]	; 0x19c
    cca2:	f8d0 4198 	ldr.w	r4, [r0, #408]	; 0x198
    cca6:	40dc      	lsrs	r4, r3
    cca8:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    ccac:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    ccb0:	2103      	movs	r1, #3
    ccb2:	4630      	mov	r0, r6
    ccb4:	f014 f9b7 	bl	21026 <smp_create_pdu.constprop.0>
	if (!buf) {
    ccb8:	4605      	mov	r5, r0
    ccba:	b300      	cbz	r0, ccfe <smp_send_pairing_confirm+0x6e>
    ccbc:	2110      	movs	r1, #16
    ccbe:	3008      	adds	r0, #8
    ccc0:	f014 fce4 	bl	2168c <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    ccc4:	9000      	str	r0, [sp, #0]
    ccc6:	4816      	ldr	r0, [pc, #88]	; (cd20 <smp_send_pairing_confirm+0x90>)
    ccc8:	4623      	mov	r3, r4
    ccca:	6800      	ldr	r0, [r0, #0]
    cccc:	f106 02e7 	add.w	r2, r6, #231	; 0xe7
    ccd0:	f206 1117 	addw	r1, r6, #279	; 0x117
    ccd4:	f014 f933 	bl	20f3e <smp_f4>
    ccd8:	4604      	mov	r4, r0
    ccda:	b1a0      	cbz	r0, cd06 <smp_send_pairing_confirm+0x76>
		net_buf_unref(buf);
    ccdc:	4628      	mov	r0, r5
    ccde:	f00d f99b 	bl	1a018 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    cce2:	e00c      	b.n	ccfe <smp_send_pairing_confirm+0x6e>
	switch (smp->method) {
    cce4:	2c03      	cmp	r4, #3
    cce6:	d00c      	beq.n	cd02 <smp_send_pairing_confirm+0x72>
    cce8:	4a0e      	ldr	r2, [pc, #56]	; (cd24 <smp_send_pairing_confirm+0x94>)
    ccea:	4b0f      	ldr	r3, [pc, #60]	; (cd28 <smp_send_pairing_confirm+0x98>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    ccec:	480f      	ldr	r0, [pc, #60]	; (cd2c <smp_send_pairing_confirm+0x9c>)
    ccee:	1ad2      	subs	r2, r2, r3
    ccf0:	08d2      	lsrs	r2, r2, #3
    ccf2:	0192      	lsls	r2, r2, #6
    ccf4:	f042 0201 	orr.w	r2, r2, #1
    ccf8:	4621      	mov	r1, r4
    ccfa:	f010 fe22 	bl	1d942 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    ccfe:	2008      	movs	r0, #8
    cd00:	e00c      	b.n	cd1c <smp_send_pairing_confirm+0x8c>
	switch (smp->method) {
    cd02:	2400      	movs	r4, #0
    cd04:	e7d4      	b.n	ccb0 <smp_send_pairing_confirm+0x20>
	smp_send(smp, buf, NULL, NULL);
    cd06:	4602      	mov	r2, r0
    cd08:	4629      	mov	r1, r5
    cd0a:	4630      	mov	r0, r6
    cd0c:	f7ff fee6 	bl	cadc <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    cd10:	f106 00c4 	add.w	r0, r6, #196	; 0xc4
    cd14:	4621      	mov	r1, r4
    cd16:	f014 f88a 	bl	20e2e <atomic_clear_bit>
	return 0;
    cd1a:	4620      	mov	r0, r4
}
    cd1c:	b002      	add	sp, #8
    cd1e:	bd70      	pop	{r4, r5, r6, pc}
    cd20:	200019dc 	.word	0x200019dc
    cd24:	000226e0 	.word	0x000226e0
    cd28:	000225d8 	.word	0x000225d8
    cd2c:	00025a7d 	.word	0x00025a7d

0000cd30 <smp_public_key_slave>:
{
    cd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    cd34:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
{
    cd38:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    cd3a:	210e      	movs	r1, #14
    cd3c:	4630      	mov	r0, r6
    cd3e:	f014 f944 	bl	20fca <atomic_test_bit>
    cd42:	b998      	cbnz	r0, cd6c <smp_public_key_slave+0x3c>
	    memcmp(smp->pkey, sc_public_key, 64) == 0) {
    cd44:	4b4c      	ldr	r3, [pc, #304]	; (ce78 <smp_public_key_slave+0x148>)
    cd46:	2240      	movs	r2, #64	; 0x40
    cd48:	6819      	ldr	r1, [r3, #0]
    cd4a:	f204 1017 	addw	r0, r4, #279	; 0x117
    cd4e:	f012 fbb2 	bl	1f4b6 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    cd52:	b958      	cbnz	r0, cd6c <smp_public_key_slave+0x3c>
    cd54:	4949      	ldr	r1, [pc, #292]	; (ce7c <smp_public_key_slave+0x14c>)
    cd56:	4b4a      	ldr	r3, [pc, #296]	; (ce80 <smp_public_key_slave+0x150>)
		BT_WARN("Remote is using identical public key");
    cd58:	484a      	ldr	r0, [pc, #296]	; (ce84 <smp_public_key_slave+0x154>)
    cd5a:	1ac9      	subs	r1, r1, r3
    cd5c:	08c9      	lsrs	r1, r1, #3
    cd5e:	0189      	lsls	r1, r1, #6
    cd60:	f041 0102 	orr.w	r1, r1, #2
    cd64:	f010 fdde 	bl	1d924 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    cd68:	2008      	movs	r0, #8
    cd6a:	e031      	b.n	cdd0 <smp_public_key_slave+0xa0>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    cd6c:	210c      	movs	r1, #12
    cd6e:	4620      	mov	r0, r4
    cd70:	f014 f959 	bl	21026 <smp_create_pdu.constprop.0>
	if (!req_buf) {
    cd74:	4605      	mov	r5, r0
    cd76:	2800      	cmp	r0, #0
    cd78:	d0f6      	beq.n	cd68 <smp_public_key_slave+0x38>
    cd7a:	2140      	movs	r1, #64	; 0x40
    cd7c:	3008      	adds	r0, #8
    cd7e:	f014 fc85 	bl	2168c <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    cd82:	f8df 80f4 	ldr.w	r8, [pc, #244]	; ce78 <smp_public_key_slave+0x148>
    cd86:	2220      	movs	r2, #32
    cd88:	f8d8 1000 	ldr.w	r1, [r8]
    cd8c:	4607      	mov	r7, r0
    cd8e:	f012 fba3 	bl	1f4d8 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    cd92:	f8d8 1000 	ldr.w	r1, [r8]
    cd96:	2220      	movs	r2, #32
    cd98:	4411      	add	r1, r2
    cd9a:	18b8      	adds	r0, r7, r2
    cd9c:	f012 fb9c 	bl	1f4d8 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    cda0:	4629      	mov	r1, r5
    cda2:	2200      	movs	r2, #0
    cda4:	4620      	mov	r0, r4
    cda6:	f7ff fe99 	bl	cadc <smp_send.constprop.0>
	switch (smp->method) {
    cdaa:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
    cdae:	2905      	cmp	r1, #5
    cdb0:	d854      	bhi.n	ce5c <smp_public_key_slave+0x12c>
    cdb2:	e8df f001 	tbb	[pc, r1]
    cdb6:	3603      	.short	0x3603
    cdb8:	5153030f 	.word	0x5153030f
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    cdbc:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    cdc0:	2104      	movs	r1, #4
    cdc2:	f014 f8ea 	bl	20f9a <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    cdc6:	4620      	mov	r0, r4
    cdc8:	f7ff ff62 	bl	cc90 <smp_send_pairing_confirm>
		if (err) {
    cdcc:	2800      	cmp	r0, #0
    cdce:	d036      	beq.n	ce3e <smp_public_key_slave+0x10e>
}
    cdd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    cdd4:	2104      	movs	r1, #4
    cdd6:	f504 70cc 	add.w	r0, r4, #408	; 0x198
    cdda:	f004 f99f 	bl	1111c <bt_rand>
    cdde:	2800      	cmp	r0, #0
    cde0:	d1c2      	bne.n	cd68 <smp_public_key_slave+0x38>
		smp->passkey %= 1000000;
    cde2:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
    cde6:	4a28      	ldr	r2, [pc, #160]	; (ce88 <smp_public_key_slave+0x158>)
	if (bt_auth && bt_auth->passkey_display) {
    cde8:	4d28      	ldr	r5, [pc, #160]	; (ce8c <smp_public_key_slave+0x15c>)
		smp->passkey %= 1000000;
    cdea:	fbb3 f1f2 	udiv	r1, r3, r2
    cdee:	fb02 3311 	mls	r3, r2, r1, r3
    cdf2:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
	if (bt_auth && bt_auth->passkey_display) {
    cdf6:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
    cdf8:	f884 019c 	strb.w	r0, [r4, #412]	; 0x19c
	if (bt_auth && bt_auth->passkey_display) {
    cdfc:	b15b      	cbz	r3, ce16 <smp_public_key_slave+0xe6>
    cdfe:	681b      	ldr	r3, [r3, #0]
    ce00:	b14b      	cbz	r3, ce16 <smp_public_key_slave+0xe6>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    ce02:	210b      	movs	r1, #11
    ce04:	4630      	mov	r0, r6
    ce06:	f014 f8c8 	bl	20f9a <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    ce0a:	682b      	ldr	r3, [r5, #0]
    ce0c:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
    ce10:	681b      	ldr	r3, [r3, #0]
    ce12:	6820      	ldr	r0, [r4, #0]
    ce14:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    ce16:	2103      	movs	r1, #3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    ce18:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    ce1c:	f014 f8bd 	bl	20f9a <atomic_set_bit>
		break;
    ce20:	e00d      	b.n	ce3e <smp_public_key_slave+0x10e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    ce22:	2103      	movs	r1, #3
    ce24:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    ce28:	f014 f8b7 	bl	20f9a <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ce2c:	4630      	mov	r0, r6
    ce2e:	210a      	movs	r1, #10
    ce30:	f014 f8b3 	bl	20f9a <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    ce34:	4b15      	ldr	r3, [pc, #84]	; (ce8c <smp_public_key_slave+0x15c>)
    ce36:	6820      	ldr	r0, [r4, #0]
    ce38:	681b      	ldr	r3, [r3, #0]
    ce3a:	685b      	ldr	r3, [r3, #4]
    ce3c:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    ce3e:	4630      	mov	r0, r6
    ce40:	2107      	movs	r1, #7
    ce42:	f014 f8aa 	bl	20f9a <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
    ce46:	2008      	movs	r0, #8
    ce48:	f7ff fea4 	bl	cb94 <smp_find>
    ce4c:	b988      	cbnz	r0, ce72 <smp_public_key_slave+0x142>
		return smp_dhkey_generate(smp);
    ce4e:	4620      	mov	r0, r4
}
    ce50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return smp_dhkey_generate(smp);
    ce54:	f7ff be78 	b.w	cb48 <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    ce58:	2104      	movs	r1, #4
    ce5a:	e7dd      	b.n	ce18 <smp_public_key_slave+0xe8>
    ce5c:	4b08      	ldr	r3, [pc, #32]	; (ce80 <smp_public_key_slave+0x150>)
    ce5e:	4a07      	ldr	r2, [pc, #28]	; (ce7c <smp_public_key_slave+0x14c>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    ce60:	480b      	ldr	r0, [pc, #44]	; (ce90 <smp_public_key_slave+0x160>)
    ce62:	1ad2      	subs	r2, r2, r3
    ce64:	08d2      	lsrs	r2, r2, #3
    ce66:	0192      	lsls	r2, r2, #6
    ce68:	f042 0201 	orr.w	r2, r2, #1
    ce6c:	f010 fd69 	bl	1d942 <log_1>
    ce70:	e77a      	b.n	cd68 <smp_public_key_slave+0x38>
	return 0;
    ce72:	2000      	movs	r0, #0
    ce74:	e7ac      	b.n	cdd0 <smp_public_key_slave+0xa0>
    ce76:	bf00      	nop
    ce78:	200019dc 	.word	0x200019dc
    ce7c:	000226e0 	.word	0x000226e0
    ce80:	000225d8 	.word	0x000225d8
    ce84:	00025a99 	.word	0x00025a99
    ce88:	000f4240 	.word	0x000f4240
    ce8c:	20001948 	.word	0x20001948
    ce90:	00025a7d 	.word	0x00025a7d

0000ce94 <smp_public_key>:
{
    ce94:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    ce96:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    ce98:	f200 1517 	addw	r5, r0, #279	; 0x117
{
    ce9c:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, 32);
    ce9e:	2220      	movs	r2, #32
    cea0:	4631      	mov	r1, r6
    cea2:	4628      	mov	r0, r5
    cea4:	f012 fb18 	bl	1f4d8 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    cea8:	2220      	movs	r2, #32
    ceaa:	18b1      	adds	r1, r6, r2
    ceac:	f204 1037 	addw	r0, r4, #311	; 0x137
    ceb0:	f012 fb12 	bl	1f4d8 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
    ceb4:	4628      	mov	r0, r5
    ceb6:	f7fc ff67 	bl	9d88 <bt_pub_key_is_debug>
    ceba:	b948      	cbnz	r0, ced0 <smp_public_key+0x3c>
	if (!sc_public_key) {
    cebc:	4b1b      	ldr	r3, [pc, #108]	; (cf2c <smp_public_key+0x98>)
    cebe:	681d      	ldr	r5, [r3, #0]
    cec0:	bb75      	cbnz	r5, cf20 <smp_public_key+0x8c>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    cec2:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    cec6:	2106      	movs	r1, #6
    cec8:	f014 f867 	bl	20f9a <atomic_set_bit>
		return 0;
    cecc:	4628      	mov	r0, r5
    cece:	e026      	b.n	cf1e <smp_public_key+0x8a>
    ced0:	4b17      	ldr	r3, [pc, #92]	; (cf30 <smp_public_key+0x9c>)
    ced2:	4918      	ldr	r1, [pc, #96]	; (cf34 <smp_public_key+0xa0>)
		BT_INFO("Remote is using Debug Public key");
    ced4:	4818      	ldr	r0, [pc, #96]	; (cf38 <smp_public_key+0xa4>)
    ced6:	1ac9      	subs	r1, r1, r3
    ced8:	08c9      	lsrs	r1, r1, #3
    ceda:	0189      	lsls	r1, r1, #6
    cedc:	f041 0103 	orr.w	r1, r1, #3
    cee0:	f010 fd20 	bl	1d924 <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    cee4:	210e      	movs	r1, #14
    cee6:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    ceea:	f014 f856 	bl	20f9a <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    ceee:	6825      	ldr	r5, [r4, #0]
	if (!conn->le.keys) {
    cef0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    cef4:	b933      	cbnz	r3, cf04 <smp_public_key+0x70>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    cef6:	7a28      	ldrb	r0, [r5, #8]
    cef8:	f105 0188 	add.w	r1, r5, #136	; 0x88
    cefc:	f001 f98e 	bl	e21c <bt_keys_get_addr>
    cf00:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    cf04:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    cf08:	2b00      	cmp	r3, #0
    cf0a:	d0d7      	beq.n	cebc <smp_public_key+0x28>
    cf0c:	89da      	ldrh	r2, [r3, #14]
    cf0e:	f002 0224 	and.w	r2, r2, #36	; 0x24
    cf12:	2a00      	cmp	r2, #0
    cf14:	d0d2      	beq.n	cebc <smp_public_key+0x28>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    cf16:	7b5b      	ldrb	r3, [r3, #13]
    cf18:	079b      	lsls	r3, r3, #30
    cf1a:	d4cf      	bmi.n	cebc <smp_public_key+0x28>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    cf1c:	2003      	movs	r0, #3
}
    cf1e:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_slave(smp);
    cf20:	4620      	mov	r0, r4
}
    cf22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_slave(smp);
    cf26:	f7ff bf03 	b.w	cd30 <smp_public_key_slave>
    cf2a:	bf00      	nop
    cf2c:	200019dc 	.word	0x200019dc
    cf30:	000225d8 	.word	0x000225d8
    cf34:	000226e0 	.word	0x000226e0
    cf38:	00025abe 	.word	0x00025abe

0000cf3c <smp_pairing_req>:
{
    cf3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    cf40:	688f      	ldr	r7, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    cf42:	78fb      	ldrb	r3, [r7, #3]
    cf44:	3b07      	subs	r3, #7
    cf46:	2b09      	cmp	r3, #9
{
    cf48:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    cf4a:	d904      	bls.n	cf56 <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    cf4c:	2706      	movs	r7, #6
}
    cf4e:	4638      	mov	r0, r7
    cf50:	b002      	add	sp, #8
    cf52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
    cf56:	6806      	ldr	r6, [r0, #0]
	if (!conn->le.keys) {
    cf58:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    cf5c:	b163      	cbz	r3, cf78 <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    cf5e:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
    cf62:	210f      	movs	r1, #15
    cf64:	4628      	mov	r0, r5
    cf66:	f014 f830 	bl	20fca <atomic_test_bit>
    cf6a:	b980      	cbnz	r0, cf8e <smp_pairing_req+0x52>
		int ret = smp_init(smp);
    cf6c:	4620      	mov	r0, r4
    cf6e:	f7ff fdcd 	bl	cb0c <smp_init>
		if (ret) {
    cf72:	b160      	cbz	r0, cf8e <smp_pairing_req+0x52>
			return ret;
    cf74:	b2c7      	uxtb	r7, r0
    cf76:	e7ea      	b.n	cf4e <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    cf78:	7a30      	ldrb	r0, [r6, #8]
    cf7a:	f106 0188 	add.w	r1, r6, #136	; 0x88
    cf7e:	f001 f94d 	bl	e21c <bt_keys_get_addr>
    cf82:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
		if (!conn->le.keys) {
    cf86:	2800      	cmp	r0, #0
    cf88:	d1e9      	bne.n	cf5e <smp_pairing_req+0x22>
	switch (sec) {
    cf8a:	2708      	movs	r7, #8
    cf8c:	e7df      	b.n	cf4e <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    cf8e:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
    cf90:	2206      	movs	r2, #6
    cf92:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    cf94:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
	memcpy(smp->preq + 1, req, sizeof(*req));
    cf98:	f104 00ca 	add.w	r0, r4, #202	; 0xca
    cf9c:	f012 fa9c 	bl	1f4d8 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    cfa0:	2302      	movs	r3, #2
    cfa2:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
	rsp->auth_req = get_auth(conn, req->auth_req);
    cfa6:	78b8      	ldrb	r0, [r7, #2]
    cfa8:	f7ff fd7a 	bl	caa0 <get_auth.constprop.0>
    cfac:	f884 00d3 	strb.w	r0, [r4, #211]	; 0xd3
    cfb0:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
    cfb2:	f7ff fd15 	bl	c9e0 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    cfb6:	4ba9      	ldr	r3, [pc, #676]	; (d25c <smp_pairing_req+0x320>)
	rsp->io_capability = get_io_capa();
    cfb8:	f884 00d1 	strb.w	r0, [r4, #209]	; 0xd1
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    cfbc:	781b      	ldrb	r3, [r3, #0]
    cfbe:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    cfc2:	2310      	movs	r3, #16
    cfc4:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    cfc8:	793b      	ldrb	r3, [r7, #4]
    cfca:	f003 0303 	and.w	r3, r3, #3
    cfce:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    cfd2:	797b      	ldrb	r3, [r7, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    cfd4:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    cfd8:	f003 0301 	and.w	r3, r3, #1
    cfdc:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    cfe0:	d00f      	beq.n	d002 <smp_pairing_req+0xc6>
    cfe2:	78bb      	ldrb	r3, [r7, #2]
    cfe4:	0719      	lsls	r1, r3, #28
    cfe6:	d50c      	bpl.n	d002 <smp_pairing_req+0xc6>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    cfe8:	2105      	movs	r1, #5
    cfea:	4628      	mov	r0, r5
    cfec:	f013 ffd5 	bl	20f9a <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    cff0:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
    cff4:	f003 0302 	and.w	r3, r3, #2
    cff8:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
		rsp->resp_key_dist &= SEND_KEYS_SC;
    cffc:	2300      	movs	r3, #0
    cffe:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    d002:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
    d006:	069a      	lsls	r2, r3, #26
    d008:	d506      	bpl.n	d018 <smp_pairing_req+0xdc>
    d00a:	78bb      	ldrb	r3, [r7, #2]
    d00c:	069b      	lsls	r3, r3, #26
    d00e:	d503      	bpl.n	d018 <smp_pairing_req+0xdc>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    d010:	2114      	movs	r1, #20
    d012:	4628      	mov	r0, r5
    d014:	f013 ffc1 	bl	20f9a <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    d018:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
    d01c:	f884 31a8 	strb.w	r3, [r4, #424]	; 0x1a8
	smp->remote_dist = rsp->init_key_dist;
    d020:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
    d024:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    d028:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
    d02c:	07d8      	lsls	r0, r3, #31
    d02e:	d506      	bpl.n	d03e <smp_pairing_req+0x102>
    d030:	78bb      	ldrb	r3, [r7, #2]
    d032:	07d9      	lsls	r1, r3, #31
    d034:	d503      	bpl.n	d03e <smp_pairing_req+0x102>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    d036:	210d      	movs	r1, #13
    d038:	4628      	mov	r0, r5
    d03a:	f013 ffae 	bl	20f9a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    d03e:	2103      	movs	r1, #3
    d040:	4628      	mov	r0, r5
    d042:	f013 ffaa 	bl	20f9a <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    d046:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
    d048:	783f      	ldrb	r7, [r7, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    d04a:	f013 ffbe 	bl	20fca <atomic_test_bit>
    d04e:	bb48      	cbnz	r0, d0a4 <smp_pairing_req+0x168>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    d050:	2f04      	cmp	r7, #4
    d052:	d848      	bhi.n	d0e6 <smp_pairing_req+0x1aa>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    d054:	f894 20d2 	ldrb.w	r2, [r4, #210]	; 0xd2
    d058:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    d05c:	4013      	ands	r3, r2
    d05e:	07da      	lsls	r2, r3, #31
    d060:	d43f      	bmi.n	d0e2 <smp_pairing_req+0x1a6>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    d062:	f894 10cc 	ldrb.w	r1, [r4, #204]	; 0xcc
    d066:	f894 00d3 	ldrb.w	r0, [r4, #211]	; 0xd3
    d06a:	4301      	orrs	r1, r0
    d06c:	f011 0104 	ands.w	r1, r1, #4
    d070:	d00e      	beq.n	d090 <smp_pairing_req+0x154>
	method = gen_method_legacy[remote_io][get_io_capa()];
    d072:	f7ff fcb5 	bl	c9e0 <get_io_capa>
    d076:	4b7a      	ldr	r3, [pc, #488]	; (d260 <smp_pairing_req+0x324>)
    d078:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    d07c:	441f      	add	r7, r3
    d07e:	5c39      	ldrb	r1, [r7, r0]
	if (method == PASSKEY_ROLE) {
    d080:	2904      	cmp	r1, #4
    d082:	d105      	bne.n	d090 <smp_pairing_req+0x154>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    d084:	6823      	ldr	r3, [r4, #0]
    d086:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
    d088:	2b00      	cmp	r3, #0
    d08a:	bf0c      	ite	eq
    d08c:	2102      	moveq	r1, #2
    d08e:	2101      	movne	r1, #1
	smp->method = get_pair_method(smp, req->io_capability);
    d090:	f884 10c8 	strb.w	r1, [r4, #200]	; 0xc8
	if (!update_keys_check(smp, conn->le.keys)) {
    d094:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
    d098:	4620      	mov	r0, r4
    d09a:	f013 ff9f 	bl	20fdc <update_keys_check>
    d09e:	bb20      	cbnz	r0, d0ea <smp_pairing_req+0x1ae>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    d0a0:	2703      	movs	r7, #3
    d0a2:	e754      	b.n	cf4e <smp_pairing_req+0x12>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    d0a4:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
    d0a8:	f894 20d3 	ldrb.w	r2, [r4, #211]	; 0xd3
    d0ac:	ea00 0302 	and.w	r3, r0, r2
    d0b0:	071b      	lsls	r3, r3, #28
    d0b2:	d507      	bpl.n	d0c4 <smp_pairing_req+0x188>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    d0b4:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    d0b8:	f894 c0d2 	ldrb.w	ip, [r4, #210]	; 0xd2
    d0bc:	ea43 030c 	orr.w	r3, r3, ip
    d0c0:	07db      	lsls	r3, r3, #31
    d0c2:	d4e5      	bmi.n	d090 <smp_pairing_req+0x154>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    d0c4:	2f04      	cmp	r7, #4
    d0c6:	d80e      	bhi.n	d0e6 <smp_pairing_req+0x1aa>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    d0c8:	ea40 0102 	orr.w	r1, r0, r2
    d0cc:	f011 0104 	ands.w	r1, r1, #4
    d0d0:	d0de      	beq.n	d090 <smp_pairing_req+0x154>
	return gen_method_sc[remote_io][get_io_capa()];
    d0d2:	f7ff fc85 	bl	c9e0 <get_io_capa>
    d0d6:	4b63      	ldr	r3, [pc, #396]	; (d264 <smp_pairing_req+0x328>)
    d0d8:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    d0dc:	441f      	add	r7, r3
    d0de:	5c39      	ldrb	r1, [r7, r0]
    d0e0:	e7d6      	b.n	d090 <smp_pairing_req+0x154>
		return LEGACY_OOB;
    d0e2:	2106      	movs	r1, #6
    d0e4:	e7d4      	b.n	d090 <smp_pairing_req+0x154>
		return JUST_WORKS;
    d0e6:	2100      	movs	r1, #0
    d0e8:	e7d2      	b.n	d090 <smp_pairing_req+0x154>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
    d0ea:	6823      	ldr	r3, [r4, #0]
    d0ec:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
    d0ee:	2b03      	cmp	r3, #3
    d0f0:	d036      	beq.n	d160 <smp_pairing_req+0x224>
    d0f2:	d822      	bhi.n	d13a <smp_pairing_req+0x1fe>
    d0f4:	3b01      	subs	r3, #1
    d0f6:	2b01      	cmp	r3, #1
    d0f8:	f63f af47 	bhi.w	cf8a <smp_pairing_req+0x4e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    d0fc:	2105      	movs	r1, #5
    d0fe:	4628      	mov	r0, r5
    d100:	f013 ff63 	bl	20fca <atomic_test_bit>
    d104:	2800      	cmp	r0, #0
    d106:	f040 80c6 	bne.w	d296 <smp_pairing_req+0x35a>
	struct bt_conn *conn = smp->chan.chan.conn;
    d10a:	6826      	ldr	r6, [r4, #0]
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    d10c:	f106 0188 	add.w	r1, r6, #136	; 0x88
    d110:	7a30      	ldrb	r0, [r6, #8]
    d112:	f001 f909 	bl	e328 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    d116:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
    d11a:	b330      	cbz	r0, d16a <smp_pairing_req+0x22e>
    d11c:	7b43      	ldrb	r3, [r0, #13]
    d11e:	07db      	lsls	r3, r3, #31
    d120:	d523      	bpl.n	d16a <smp_pairing_req+0x22e>
    d122:	bb11      	cbnz	r1, d16a <smp_pairing_req+0x22e>
    d124:	4b50      	ldr	r3, [pc, #320]	; (d268 <smp_pairing_req+0x32c>)
    d126:	4951      	ldr	r1, [pc, #324]	; (d26c <smp_pairing_req+0x330>)
		BT_ERR("JustWorks failed, authenticated keys present");
    d128:	4851      	ldr	r0, [pc, #324]	; (d270 <smp_pairing_req+0x334>)
    d12a:	1ac9      	subs	r1, r1, r3
    d12c:	08c9      	lsrs	r1, r1, #3
    d12e:	0189      	lsls	r1, r1, #6
    d130:	f041 0101 	orr.w	r1, r1, #1
    d134:	f010 fbf6 	bl	1d924 <log_0>
	if (ret) {
    d138:	e727      	b.n	cf8a <smp_pairing_req+0x4e>
	switch (sec) {
    d13a:	2b04      	cmp	r3, #4
    d13c:	f47f af25 	bne.w	cf8a <smp_pairing_req+0x4e>
	return MIN(req->max_key_size, rsp->max_key_size);
    d140:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
    d144:	f894 20cd 	ldrb.w	r2, [r4, #205]	; 0xcd
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
    d148:	4293      	cmp	r3, r2
    d14a:	bf28      	it	cs
    d14c:	4613      	movcs	r3, r2
    d14e:	2b10      	cmp	r3, #16
    d150:	f47f aefc 	bne.w	cf4c <smp_pairing_req+0x10>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    d154:	2105      	movs	r1, #5
    d156:	4628      	mov	r0, r5
    d158:	f013 ff37 	bl	20fca <atomic_test_bit>
    d15c:	2800      	cmp	r0, #0
    d15e:	d09f      	beq.n	d0a0 <smp_pairing_req+0x164>
		if (smp->method == JUST_WORKS) {
    d160:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    d164:	2b00      	cmp	r3, #0
    d166:	d1c9      	bne.n	d0fc <smp_pairing_req+0x1c0>
    d168:	e79a      	b.n	d0a0 <smp_pairing_req+0x164>
	switch (smp->method) {
    d16a:	2906      	cmp	r1, #6
    d16c:	d868      	bhi.n	d240 <smp_pairing_req+0x304>
    d16e:	e8df f001 	tbb	[pc, r1]
    d172:	5d1b      	.short	0x5d1b
    d174:	67676732 	.word	0x67676732
    d178:	04          	.byte	0x04
    d179:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
    d17a:	4e3e      	ldr	r6, [pc, #248]	; (d274 <smp_pairing_req+0x338>)
    d17c:	6833      	ldr	r3, [r6, #0]
    d17e:	2b00      	cmp	r3, #0
    d180:	d069      	beq.n	d256 <smp_pairing_req+0x31a>
    d182:	68db      	ldr	r3, [r3, #12]
    d184:	2b00      	cmp	r3, #0
    d186:	d066      	beq.n	d256 <smp_pairing_req+0x31a>
			struct bt_conn_oob_info info = {
    d188:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    d18a:	210a      	movs	r1, #10
    d18c:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
    d18e:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    d192:	f013 ff02 	bl	20f9a <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    d196:	6833      	ldr	r3, [r6, #0]
    d198:	6820      	ldr	r0, [r4, #0]
    d19a:	68db      	ldr	r3, [r3, #12]
    d19c:	a901      	add	r1, sp, #4
    d19e:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    d1a0:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    d1a4:	2b00      	cmp	r3, #0
    d1a6:	d16b      	bne.n	d280 <smp_pairing_req+0x344>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    d1a8:	210f      	movs	r1, #15
    d1aa:	4628      	mov	r0, r5
    d1ac:	f013 ff0d 	bl	20fca <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    d1b0:	4607      	mov	r7, r0
    d1b2:	2800      	cmp	r0, #0
    d1b4:	d164      	bne.n	d280 <smp_pairing_req+0x344>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    d1b6:	4e2f      	ldr	r6, [pc, #188]	; (d274 <smp_pairing_req+0x338>)
    d1b8:	6833      	ldr	r3, [r6, #0]
    d1ba:	2b00      	cmp	r3, #0
    d1bc:	d060      	beq.n	d280 <smp_pairing_req+0x344>
	    bt_auth && bt_auth->pairing_confirm) {
    d1be:	695b      	ldr	r3, [r3, #20]
    d1c0:	2b00      	cmp	r3, #0
    d1c2:	d05d      	beq.n	d280 <smp_pairing_req+0x344>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    d1c4:	4628      	mov	r0, r5
    d1c6:	210a      	movs	r1, #10
    d1c8:	f013 fee7 	bl	20f9a <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    d1cc:	6833      	ldr	r3, [r6, #0]
    d1ce:	6820      	ldr	r0, [r4, #0]
    d1d0:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
    d1d2:	4798      	blx	r3
		return 0;
    d1d4:	e6bb      	b.n	cf4e <smp_pairing_req+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
    d1d6:	2104      	movs	r1, #4
    d1d8:	eb0d 0001 	add.w	r0, sp, r1
    d1dc:	f003 ff9e 	bl	1111c <bt_rand>
    d1e0:	2800      	cmp	r0, #0
    d1e2:	f47f aed2 	bne.w	cf8a <smp_pairing_req+0x4e>
			passkey %= 1000000;
    d1e6:	9b01      	ldr	r3, [sp, #4]
    d1e8:	4a23      	ldr	r2, [pc, #140]	; (d278 <smp_pairing_req+0x33c>)
		if (bt_auth && bt_auth->passkey_display) {
    d1ea:	4f22      	ldr	r7, [pc, #136]	; (d274 <smp_pairing_req+0x338>)
			passkey %= 1000000;
    d1ec:	fbb3 f1f2 	udiv	r1, r3, r2
    d1f0:	fb02 3311 	mls	r3, r2, r1, r3
    d1f4:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    d1f6:	683b      	ldr	r3, [r7, #0]
    d1f8:	b153      	cbz	r3, d210 <smp_pairing_req+0x2d4>
    d1fa:	681b      	ldr	r3, [r3, #0]
    d1fc:	b143      	cbz	r3, d210 <smp_pairing_req+0x2d4>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    d1fe:	210b      	movs	r1, #11
    d200:	4628      	mov	r0, r5
    d202:	f013 feca 	bl	20f9a <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    d206:	683b      	ldr	r3, [r7, #0]
    d208:	9901      	ldr	r1, [sp, #4]
    d20a:	681b      	ldr	r3, [r3, #0]
    d20c:	4630      	mov	r0, r6
    d20e:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    d210:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
    d212:	f884 3107 	strb.w	r3, [r4, #263]	; 0x107
	dst[1] = val >> 8;
    d216:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    d21a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d21c:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
	dst[1] = val >> 8;
    d220:	0a1b      	lsrs	r3, r3, #8
    d222:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
    d226:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
	if (ret) {
    d22a:	e7b9      	b.n	d1a0 <smp_pairing_req+0x264>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    d22c:	4628      	mov	r0, r5
    d22e:	210a      	movs	r1, #10
    d230:	f013 feb3 	bl	20f9a <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    d234:	4b0f      	ldr	r3, [pc, #60]	; (d274 <smp_pairing_req+0x338>)
    d236:	681b      	ldr	r3, [r3, #0]
    d238:	4630      	mov	r0, r6
    d23a:	685b      	ldr	r3, [r3, #4]
    d23c:	4798      	blx	r3
	if (ret) {
    d23e:	e7af      	b.n	d1a0 <smp_pairing_req+0x264>
    d240:	4b09      	ldr	r3, [pc, #36]	; (d268 <smp_pairing_req+0x32c>)
    d242:	4a0a      	ldr	r2, [pc, #40]	; (d26c <smp_pairing_req+0x330>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    d244:	480d      	ldr	r0, [pc, #52]	; (d27c <smp_pairing_req+0x340>)
    d246:	1ad2      	subs	r2, r2, r3
    d248:	08d2      	lsrs	r2, r2, #3
    d24a:	0192      	lsls	r2, r2, #6
    d24c:	f042 0201 	orr.w	r2, r2, #1
    d250:	f010 fb77 	bl	1d942 <log_1>
	if (ret) {
    d254:	e699      	b.n	cf8a <smp_pairing_req+0x4e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    d256:	2702      	movs	r7, #2
    d258:	e679      	b.n	cf4e <smp_pairing_req+0x12>
    d25a:	bf00      	nop
    d25c:	2000355d 	.word	0x2000355d
    d260:	00025d21 	.word	0x00025d21
    d264:	00025d3a 	.word	0x00025d3a
    d268:	000225d8 	.word	0x000225d8
    d26c:	000226e0 	.word	0x000226e0
    d270:	00025adf 	.word	0x00025adf
    d274:	20001948 	.word	0x20001948
    d278:	000f4240 	.word	0x000f4240
    d27c:	00025a7d 	.word	0x00025a7d
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    d280:	2103      	movs	r1, #3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    d282:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    d286:	f013 fe88 	bl	20f9a <atomic_set_bit>
	return send_pairing_rsp(smp);
    d28a:	4620      	mov	r0, r4
}
    d28c:	b002      	add	sp, #8
    d28e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
    d292:	f013 bee8 	b.w	21066 <send_pairing_rsp>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    d296:	f894 70c8 	ldrb.w	r7, [r4, #200]	; 0xc8
    d29a:	b9a7      	cbnz	r7, d2c6 <smp_pairing_req+0x38a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    d29c:	210f      	movs	r1, #15
    d29e:	4628      	mov	r0, r5
    d2a0:	f013 fe93 	bl	20fca <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    d2a4:	b978      	cbnz	r0, d2c6 <smp_pairing_req+0x38a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    d2a6:	f8df 8024 	ldr.w	r8, [pc, #36]	; d2cc <smp_pairing_req+0x390>
    d2aa:	f8d8 3000 	ldr.w	r3, [r8]
    d2ae:	b153      	cbz	r3, d2c6 <smp_pairing_req+0x38a>
	    bt_auth && bt_auth->pairing_confirm) {
    d2b0:	695b      	ldr	r3, [r3, #20]
    d2b2:	b143      	cbz	r3, d2c6 <smp_pairing_req+0x38a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    d2b4:	4628      	mov	r0, r5
    d2b6:	210a      	movs	r1, #10
    d2b8:	f013 fe6f 	bl	20f9a <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
    d2bc:	f8d8 3000 	ldr.w	r3, [r8]
    d2c0:	4630      	mov	r0, r6
    d2c2:	695b      	ldr	r3, [r3, #20]
    d2c4:	e785      	b.n	d1d2 <smp_pairing_req+0x296>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    d2c6:	210c      	movs	r1, #12
    d2c8:	e7db      	b.n	d282 <smp_pairing_req+0x346>
    d2ca:	bf00      	nop
    d2cc:	20001948 	.word	0x20001948

0000d2d0 <compute_and_check_and_send_slave_dhcheck>:
{
    d2d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
    d2d4:	2210      	movs	r2, #16
{
    d2d6:	b0a3      	sub	sp, #140	; 0x8c
    d2d8:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
    d2da:	2100      	movs	r1, #0
    d2dc:	eb0d 0002 	add.w	r0, sp, r2
    d2e0:	f012 f925 	bl	1f52e <memset>
	switch (smp->method) {
    d2e4:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
    d2e8:	2905      	cmp	r1, #5
    d2ea:	f200 8098 	bhi.w	d41e <compute_and_check_and_send_slave_dhcheck+0x14e>
    d2ee:	e8df f001 	tbb	[pc, r1]
    d2f2:	0309      	.short	0x0309
    d2f4:	8d960903 	.word	0x8d960903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    d2f8:	2204      	movs	r2, #4
    d2fa:	f504 71cc 	add.w	r1, r4, #408	; 0x198
    d2fe:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    d300:	f012 f8ea 	bl	1f4d8 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
    d304:	4b78      	ldr	r3, [pc, #480]	; (d4e8 <compute_and_check_and_send_slave_dhcheck+0x218>)
		   &smp->chan.chan.conn->le.init_addr,
    d306:	f8d4 9000 	ldr.w	r9, [r4]
	uint8_t m[53] = { 0x00, /* counter */
    d30a:	aa14      	add	r2, sp, #80	; 0x50
    d30c:	f103 0630 	add.w	r6, r3, #48	; 0x30
    d310:	6818      	ldr	r0, [r3, #0]
    d312:	6859      	ldr	r1, [r3, #4]
    d314:	4615      	mov	r5, r2
    d316:	c503      	stmia	r5!, {r0, r1}
    d318:	3308      	adds	r3, #8
    d31a:	42b3      	cmp	r3, r6
    d31c:	462a      	mov	r2, r5
    d31e:	d1f7      	bne.n	d310 <compute_and_check_and_send_slave_dhcheck+0x40>
    d320:	6818      	ldr	r0, [r3, #0]
    d322:	791b      	ldrb	r3, [r3, #4]
    d324:	6028      	str	r0, [r5, #0]
    d326:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
    d328:	ad0c      	add	r5, sp, #48	; 0x30
    d32a:	2220      	movs	r2, #32
    d32c:	f204 1157 	addw	r1, r4, #343	; 0x157
    d330:	4628      	mov	r0, r5
    d332:	f013 fd70 	bl	20e16 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    d336:	486d      	ldr	r0, [pc, #436]	; (d4ec <compute_and_check_and_send_slave_dhcheck+0x21c>)
    d338:	ab08      	add	r3, sp, #32
    d33a:	2220      	movs	r2, #32
    d33c:	4629      	mov	r1, r5
    d33e:	f013 fd86 	bl	20e4e <bt_smp_aes_cmac>
	if (err) {
    d342:	2800      	cmp	r0, #0
    d344:	f040 80c7 	bne.w	d4d6 <compute_and_check_and_send_slave_dhcheck+0x206>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    d348:	f104 07f7 	add.w	r7, r4, #247	; 0xf7
	sys_memcpy_swap(m + 5, n1, 16);
    d34c:	2210      	movs	r2, #16
    d34e:	4639      	mov	r1, r7
    d350:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    d354:	f104 08e7 	add.w	r8, r4, #231	; 0xe7
	sys_memcpy_swap(m + 5, n1, 16);
    d358:	f013 fd5d 	bl	20e16 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    d35c:	2210      	movs	r2, #16
    d35e:	4641      	mov	r1, r8
    d360:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    d364:	f013 fd57 	bl	20e16 <sys_memcpy_swap>
	m[37] = a1->type;
    d368:	f899 308f 	ldrb.w	r3, [r9, #143]	; 0x8f
    d36c:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    d370:	2206      	movs	r2, #6
    d372:	f109 0190 	add.w	r1, r9, #144	; 0x90
    d376:	f10d 0076 	add.w	r0, sp, #118	; 0x76
    d37a:	f013 fd4c 	bl	20e16 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    d37e:	f204 1687 	addw	r6, r4, #391	; 0x187
	m[44] = a2->type;
    d382:	f899 3096 	ldrb.w	r3, [r9, #150]	; 0x96
    d386:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    d38a:	2206      	movs	r2, #6
    d38c:	f109 0197 	add.w	r1, r9, #151	; 0x97
    d390:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
    d394:	f013 fd3f 	bl	20e16 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    d398:	4633      	mov	r3, r6
    d39a:	2235      	movs	r2, #53	; 0x35
    d39c:	a914      	add	r1, sp, #80	; 0x50
    d39e:	a808      	add	r0, sp, #32
    d3a0:	f013 fd55 	bl	20e4e <bt_smp_aes_cmac>
	if (err) {
    d3a4:	2800      	cmp	r0, #0
    d3a6:	f040 8096 	bne.w	d4d6 <compute_and_check_and_send_slave_dhcheck+0x206>
	sys_mem_swap(mackey, 16);
    d3aa:	4630      	mov	r0, r6
    d3ac:	f013 fd6d 	bl	20e8a <sys_mem_swap.constprop.0>
		   smp->tk)) {
    d3b0:	f204 1907 	addw	r9, r4, #263	; 0x107
	m[0] = 0x01;
    d3b4:	2301      	movs	r3, #1
    d3b6:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    d3ba:	2235      	movs	r2, #53	; 0x35
    d3bc:	464b      	mov	r3, r9
    d3be:	a914      	add	r1, sp, #80	; 0x50
    d3c0:	a808      	add	r0, sp, #32
    d3c2:	f013 fd44 	bl	20e4e <bt_smp_aes_cmac>
	if (err) {
    d3c6:	2800      	cmp	r0, #0
    d3c8:	f040 8085 	bne.w	d4d6 <compute_and_check_and_send_slave_dhcheck+0x206>
	sys_mem_swap(ltk, 16);
    d3cc:	4648      	mov	r0, r9
    d3ce:	f013 fd5c 	bl	20e8a <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
    d3d2:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    d3d4:	a914      	add	r1, sp, #80	; 0x50
		   &smp->chan.chan.conn->le.resp_addr,
    d3d6:	f852 3bd1 	ldr.w	r3, [r2], #209
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    d3da:	9103      	str	r1, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
    d3dc:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
    d3e0:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    d3e2:	e9cd 2300 	strd	r2, r3, [sp]
    d3e6:	9102      	str	r1, [sp, #8]
    d3e8:	ab04      	add	r3, sp, #16
    d3ea:	463a      	mov	r2, r7
    d3ec:	4641      	mov	r1, r8
    d3ee:	4630      	mov	r0, r6
    d3f0:	f013 fd59 	bl	20ea6 <smp_f6>
    d3f4:	b1f8      	cbz	r0, d436 <compute_and_check_and_send_slave_dhcheck+0x166>
    d3f6:	493e      	ldr	r1, [pc, #248]	; (d4f0 <compute_and_check_and_send_slave_dhcheck+0x220>)
    d3f8:	4b3e      	ldr	r3, [pc, #248]	; (d4f4 <compute_and_check_and_send_slave_dhcheck+0x224>)
		BT_ERR("Calculate local DHKey check failed");
    d3fa:	483f      	ldr	r0, [pc, #252]	; (d4f8 <compute_and_check_and_send_slave_dhcheck+0x228>)
    d3fc:	1ac9      	subs	r1, r1, r3
    d3fe:	08c9      	lsrs	r1, r1, #3
    d400:	0189      	lsls	r1, r1, #6
    d402:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate LTK failed");
    d406:	f010 fa8d 	bl	1d924 <log_0>
    d40a:	e012      	b.n	d432 <compute_and_check_and_send_slave_dhcheck+0x162>
		if (smp->oobd_remote) {
    d40c:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
    d410:	2900      	cmp	r1, #0
    d412:	f43f af77 	beq.w	d304 <compute_and_check_and_send_slave_dhcheck+0x34>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    d416:	2210      	movs	r2, #16
    d418:	eb0d 0002 	add.w	r0, sp, r2
    d41c:	e770      	b.n	d300 <compute_and_check_and_send_slave_dhcheck+0x30>
    d41e:	4a34      	ldr	r2, [pc, #208]	; (d4f0 <compute_and_check_and_send_slave_dhcheck+0x220>)
    d420:	4b34      	ldr	r3, [pc, #208]	; (d4f4 <compute_and_check_and_send_slave_dhcheck+0x224>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    d422:	4836      	ldr	r0, [pc, #216]	; (d4fc <compute_and_check_and_send_slave_dhcheck+0x22c>)
    d424:	1ad2      	subs	r2, r2, r3
    d426:	08d2      	lsrs	r2, r2, #3
    d428:	0192      	lsls	r2, r2, #6
    d42a:	f042 0201 	orr.w	r2, r2, #1
    d42e:	f010 fa88 	bl	1d942 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    d432:	2008      	movs	r0, #8
    d434:	e04a      	b.n	d4cc <compute_and_check_and_send_slave_dhcheck+0x1fc>
	if (smp->method == LE_SC_OOB) {
    d436:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    d43a:	2b05      	cmp	r3, #5
    d43c:	d107      	bne.n	d44e <compute_and_check_and_send_slave_dhcheck+0x17e>
		if (smp->oobd_local) {
    d43e:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
			memcpy(r, smp->oobd_local->r, sizeof(r));
    d442:	2210      	movs	r2, #16
    d444:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
    d448:	b1d9      	cbz	r1, d482 <compute_and_check_and_send_slave_dhcheck+0x1b2>
			memcpy(r, smp->oobd_local->r, sizeof(r));
    d44a:	f012 f845 	bl	1f4d8 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    d44e:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    d450:	4630      	mov	r0, r6
		   &smp->chan.chan.conn->le.init_addr,
    d452:	f852 3bca 	ldr.w	r3, [r2], #202
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    d456:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    d458:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
    d45c:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    d45e:	e9cd 2300 	strd	r2, r3, [sp]
    d462:	9102      	str	r1, [sp, #8]
    d464:	ab04      	add	r3, sp, #16
    d466:	4642      	mov	r2, r8
    d468:	4639      	mov	r1, r7
    d46a:	f013 fd1c 	bl	20ea6 <smp_f6>
    d46e:	b158      	cbz	r0, d488 <compute_and_check_and_send_slave_dhcheck+0x1b8>
    d470:	491f      	ldr	r1, [pc, #124]	; (d4f0 <compute_and_check_and_send_slave_dhcheck+0x220>)
    d472:	4b20      	ldr	r3, [pc, #128]	; (d4f4 <compute_and_check_and_send_slave_dhcheck+0x224>)
		BT_ERR("Calculate remote DHKey check failed");
    d474:	4822      	ldr	r0, [pc, #136]	; (d500 <compute_and_check_and_send_slave_dhcheck+0x230>)
    d476:	1ac9      	subs	r1, r1, r3
    d478:	08c9      	lsrs	r1, r1, #3
    d47a:	0189      	lsls	r1, r1, #6
    d47c:	f041 0101 	orr.w	r1, r1, #1
    d480:	e7c1      	b.n	d406 <compute_and_check_and_send_slave_dhcheck+0x136>
			memset(r, 0, sizeof(r));
    d482:	f012 f854 	bl	1f52e <memset>
    d486:	e7e2      	b.n	d44e <compute_and_check_and_send_slave_dhcheck+0x17e>
	if (memcmp(smp->e, re, 16)) {
    d488:	4629      	mov	r1, r5
    d48a:	2210      	movs	r2, #16
    d48c:	f204 1077 	addw	r0, r4, #375	; 0x177
    d490:	f012 f811 	bl	1f4b6 <memcmp>
    d494:	4605      	mov	r5, r0
    d496:	b9e0      	cbnz	r0, d4d2 <compute_and_check_and_send_slave_dhcheck+0x202>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
    d498:	210d      	movs	r1, #13
    d49a:	4620      	mov	r0, r4
    d49c:	f013 fdc3 	bl	21026 <smp_create_pdu.constprop.0>
	if (!buf) {
    d4a0:	4606      	mov	r6, r0
    d4a2:	2800      	cmp	r0, #0
    d4a4:	d0c5      	beq.n	d432 <compute_and_check_and_send_slave_dhcheck+0x162>
    d4a6:	2110      	movs	r1, #16
    d4a8:	3008      	adds	r0, #8
    d4aa:	f014 f8ef 	bl	2168c <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    d4ae:	2210      	movs	r2, #16
    d4b0:	a914      	add	r1, sp, #80	; 0x50
    d4b2:	f012 f811 	bl	1f4d8 <memcpy>
	smp_send(smp, buf, NULL, NULL);
    d4b6:	462a      	mov	r2, r5
    d4b8:	4631      	mov	r1, r6
    d4ba:	4620      	mov	r0, r4
    d4bc:	f7ff fb0e 	bl	cadc <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    d4c0:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    d4c4:	2101      	movs	r1, #1
    d4c6:	f013 fd68 	bl	20f9a <atomic_set_bit>
	return 0;
    d4ca:	4628      	mov	r0, r5
}
    d4cc:	b023      	add	sp, #140	; 0x8c
    d4ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    d4d2:	200b      	movs	r0, #11
    d4d4:	e7fa      	b.n	d4cc <compute_and_check_and_send_slave_dhcheck+0x1fc>
    d4d6:	4906      	ldr	r1, [pc, #24]	; (d4f0 <compute_and_check_and_send_slave_dhcheck+0x220>)
    d4d8:	4b06      	ldr	r3, [pc, #24]	; (d4f4 <compute_and_check_and_send_slave_dhcheck+0x224>)
		BT_ERR("Calculate LTK failed");
    d4da:	480a      	ldr	r0, [pc, #40]	; (d504 <compute_and_check_and_send_slave_dhcheck+0x234>)
    d4dc:	1ac9      	subs	r1, r1, r3
    d4de:	08c9      	lsrs	r1, r1, #3
    d4e0:	0189      	lsls	r1, r1, #6
    d4e2:	f041 0101 	orr.w	r1, r1, #1
    d4e6:	e78e      	b.n	d406 <compute_and_check_and_send_slave_dhcheck+0x136>
    d4e8:	0002281d 	.word	0x0002281d
    d4ec:	00025d53 	.word	0x00025d53
    d4f0:	000226e0 	.word	0x000226e0
    d4f4:	000225d8 	.word	0x000225d8
    d4f8:	00025b0c 	.word	0x00025b0c
    d4fc:	00025a7d 	.word	0x00025a7d
    d500:	00025b2f 	.word	0x00025b2f
    d504:	00025b53 	.word	0x00025b53

0000d508 <bt_smp_connected>:
{
    d508:	b510      	push	{r4, lr}
	k_work_init_delayable(&work->work, handler);
    d50a:	4905      	ldr	r1, [pc, #20]	; (d520 <bt_smp_connected+0x18>)
    d50c:	4604      	mov	r4, r0
    d50e:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
    d512:	f014 fd43 	bl	21f9c <k_work_init_delayable>
	smp_reset(smp);
    d516:	4620      	mov	r0, r4
}
    d518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    d51c:	f013 be16 	b.w	2114c <smp_reset>
    d520:	0000e095 	.word	0x0000e095

0000d524 <smp_pairing_confirm>:
{
    d524:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
    d526:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    d528:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
{
    d52c:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    d52e:	210b      	movs	r1, #11
    d530:	4628      	mov	r0, r5
    d532:	f013 fc7c 	bl	20e2e <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    d536:	4631      	mov	r1, r6
    d538:	2210      	movs	r2, #16
    d53a:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
    d53e:	f011 ffcb 	bl	1f4d8 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    d542:	2105      	movs	r1, #5
    d544:	4628      	mov	r0, r5
    d546:	f013 fd40 	bl	20fca <atomic_test_bit>
    d54a:	b920      	cbnz	r0, d556 <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
    d54c:	4620      	mov	r0, r4
}
    d54e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
    d552:	f013 be7b 	b.w	2124c <legacy_pairing_confirm>
	switch (smp->method) {
    d556:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
    d55a:	2901      	cmp	r1, #1
    d55c:	d00b      	beq.n	d576 <smp_pairing_confirm+0x52>
    d55e:	2902      	cmp	r1, #2
    d560:	d115      	bne.n	d58e <smp_pairing_confirm+0x6a>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    d562:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    d566:	2104      	movs	r1, #4
    d568:	f013 fd17 	bl	20f9a <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
    d56c:	4620      	mov	r0, r4
}
    d56e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
    d572:	f7ff bb8d 	b.w	cc90 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    d576:	210a      	movs	r1, #10
    d578:	4628      	mov	r0, r5
    d57a:	f013 fd26 	bl	20fca <atomic_test_bit>
    d57e:	2800      	cmp	r0, #0
    d580:	d0ef      	beq.n	d562 <smp_pairing_confirm+0x3e>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    d582:	4628      	mov	r0, r5
    d584:	2100      	movs	r1, #0
    d586:	f013 fd08 	bl	20f9a <atomic_set_bit>
			return 0;
    d58a:	2000      	movs	r0, #0
}
    d58c:	bd70      	pop	{r4, r5, r6, pc}
    d58e:	4b06      	ldr	r3, [pc, #24]	; (d5a8 <smp_pairing_confirm+0x84>)
    d590:	4a06      	ldr	r2, [pc, #24]	; (d5ac <smp_pairing_confirm+0x88>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    d592:	4807      	ldr	r0, [pc, #28]	; (d5b0 <smp_pairing_confirm+0x8c>)
    d594:	1ad2      	subs	r2, r2, r3
    d596:	08d2      	lsrs	r2, r2, #3
    d598:	0192      	lsls	r2, r2, #6
    d59a:	f042 0201 	orr.w	r2, r2, #1
    d59e:	f010 f9d0 	bl	1d942 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    d5a2:	2008      	movs	r0, #8
    d5a4:	e7f2      	b.n	d58c <smp_pairing_confirm+0x68>
    d5a6:	bf00      	nop
    d5a8:	000225d8 	.word	0x000225d8
    d5ac:	000226e0 	.word	0x000226e0
    d5b0:	00025a7d 	.word	0x00025a7d

0000d5b4 <smp_pairing_random>:
{
    d5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d5b8:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    d5ba:	f100 07f7 	add.w	r7, r0, #247	; 0xf7
    d5be:	6889      	ldr	r1, [r1, #8]
{
    d5c0:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    d5c2:	2210      	movs	r2, #16
    d5c4:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    d5c6:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    d5ca:	f011 ff85 	bl	1f4d8 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    d5ce:	2105      	movs	r1, #5
    d5d0:	4630      	mov	r0, r6
    d5d2:	f013 fcfa 	bl	20fca <atomic_test_bit>
    d5d6:	2800      	cmp	r0, #0
    d5d8:	d146      	bne.n	d668 <smp_pairing_random+0xb4>
	struct bt_conn *conn = smp->chan.chan.conn;
    d5da:	6823      	ldr	r3, [r4, #0]
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    d5dc:	f204 1807 	addw	r8, r4, #263	; 0x107
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    d5e0:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    d5e4:	ad0a      	add	r5, sp, #40	; 0x28
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    d5e6:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    d5e8:	9201      	str	r2, [sp, #4]
    d5ea:	9300      	str	r3, [sp, #0]
    d5ec:	9502      	str	r5, [sp, #8]
    d5ee:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    d5f2:	f104 02c9 	add.w	r2, r4, #201	; 0xc9
    d5f6:	4639      	mov	r1, r7
    d5f8:	4640      	mov	r0, r8
    d5fa:	f013 fdcc 	bl	21196 <smp_c1>
	if (err) {
    d5fe:	bb18      	cbnz	r0, d648 <smp_pairing_random+0x94>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    d600:	2210      	movs	r2, #16
    d602:	4629      	mov	r1, r5
    d604:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
    d608:	f011 ff55 	bl	1f4b6 <memcmp>
    d60c:	2800      	cmp	r0, #0
    d60e:	f040 8096 	bne.w	d73e <smp_pairing_random+0x18a>
	memcpy(out, r2, 8);
    d612:	2208      	movs	r2, #8
    d614:	4639      	mov	r1, r7
    d616:	4628      	mov	r0, r5
    d618:	f011 ff5e 	bl	1f4d8 <memcpy>
	memcpy(out + 8, r1, 8);
    d61c:	2208      	movs	r2, #8
    d61e:	f104 01e7 	add.w	r1, r4, #231	; 0xe7
    d622:	a80c      	add	r0, sp, #48	; 0x30
    d624:	f011 ff58 	bl	1f4d8 <memcpy>
	return bt_encrypt_le(k, out, out);
    d628:	462a      	mov	r2, r5
    d62a:	4629      	mov	r1, r5
    d62c:	4640      	mov	r0, r8
    d62e:	f003 fd77 	bl	11120 <bt_encrypt_le>
		if (err) {
    d632:	b158      	cbz	r0, d64c <smp_pairing_random+0x98>
    d634:	4976      	ldr	r1, [pc, #472]	; (d810 <smp_pairing_random+0x25c>)
    d636:	4b77      	ldr	r3, [pc, #476]	; (d814 <smp_pairing_random+0x260>)
			BT_ERR("Calculate STK failed");
    d638:	4877      	ldr	r0, [pc, #476]	; (d818 <smp_pairing_random+0x264>)
    d63a:	1ac9      	subs	r1, r1, r3
    d63c:	08c9      	lsrs	r1, r1, #3
    d63e:	0189      	lsls	r1, r1, #6
    d640:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate confirm failed");
    d644:	f010 f96e 	bl	1d924 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    d648:	2508      	movs	r5, #8
    d64a:	e079      	b.n	d740 <smp_pairing_random+0x18c>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    d64c:	4629      	mov	r1, r5
    d64e:	2210      	movs	r2, #16
    d650:	4640      	mov	r0, r8
    d652:	f011 ff41 	bl	1f4d8 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    d656:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    d658:	4630      	mov	r0, r6
    d65a:	f013 fc9e 	bl	20f9a <atomic_set_bit>
	return smp_send_pairing_random(smp);
    d65e:	4620      	mov	r0, r4
    d660:	f013 fd1a 	bl	21098 <smp_send_pairing_random>
    d664:	4605      	mov	r5, r0
    d666:	e06b      	b.n	d740 <smp_pairing_random+0x18c>
	switch (smp->method) {
    d668:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
    d66c:	2905      	cmp	r1, #5
    d66e:	f200 80af 	bhi.w	d7d0 <smp_pairing_random+0x21c>
    d672:	e8df f001 	tbb	[pc, r1]
    d676:	413a      	.short	0x413a
    d678:	8ead0341 	.word	0x8ead0341
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    d67c:	4b67      	ldr	r3, [pc, #412]	; (d81c <smp_pairing_random+0x268>)
    d67e:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
    d680:	2220      	movs	r2, #32
    d682:	f204 1117 	addw	r1, r4, #279	; 0x117
    d686:	a80a      	add	r0, sp, #40	; 0x28
    d688:	f013 fbc5 	bl	20e16 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    d68c:	2220      	movs	r2, #32
    d68e:	4629      	mov	r1, r5
    d690:	a812      	add	r0, sp, #72	; 0x48
    d692:	f013 fbc0 	bl	20e16 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    d696:	2210      	movs	r2, #16
    d698:	f104 01e7 	add.w	r1, r4, #231	; 0xe7
    d69c:	a81a      	add	r0, sp, #104	; 0x68
    d69e:	f013 fbba 	bl	20e16 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    d6a2:	2210      	movs	r2, #16
    d6a4:	4639      	mov	r1, r7
    d6a6:	a806      	add	r0, sp, #24
    d6a8:	f013 fbb5 	bl	20e16 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    d6ac:	ab06      	add	r3, sp, #24
    d6ae:	2250      	movs	r2, #80	; 0x50
    d6b0:	a90a      	add	r1, sp, #40	; 0x28
    d6b2:	4618      	mov	r0, r3
    d6b4:	f013 fbcb 	bl	20e4e <bt_smp_aes_cmac>
	if (err) {
    d6b8:	2800      	cmp	r0, #0
    d6ba:	d1c5      	bne.n	d648 <smp_pairing_random+0x94>
	memcpy(passkey, xs + 12, 4);
    d6bc:	2204      	movs	r2, #4
    d6be:	a909      	add	r1, sp, #36	; 0x24
    d6c0:	a805      	add	r0, sp, #20
    d6c2:	f011 ff09 	bl	1f4d8 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    d6c6:	9b05      	ldr	r3, [sp, #20]
    d6c8:	4a55      	ldr	r2, [pc, #340]	; (d820 <smp_pairing_random+0x26c>)
    d6ca:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    d6cc:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    d6ce:	fbb3 f1f2 	udiv	r1, r3, r2
    d6d2:	fb02 3311 	mls	r3, r2, r1, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    d6d6:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    d6d8:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    d6da:	f013 fc5e 	bl	20f9a <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    d6de:	4b51      	ldr	r3, [pc, #324]	; (d824 <smp_pairing_random+0x270>)
    d6e0:	9905      	ldr	r1, [sp, #20]
    d6e2:	681b      	ldr	r3, [r3, #0]
    d6e4:	6820      	ldr	r0, [r4, #0]
    d6e6:	689b      	ldr	r3, [r3, #8]
    d6e8:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    d6ea:	210d      	movs	r1, #13
    d6ec:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    d6f0:	f013 fc53 	bl	20f9a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    d6f4:	2110      	movs	r1, #16
    d6f6:	e7af      	b.n	d658 <smp_pairing_random+0xa4>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    d6f8:	f894 219c 	ldrb.w	r2, [r4, #412]	; 0x19c
    d6fc:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    d700:	4946      	ldr	r1, [pc, #280]	; (d81c <smp_pairing_random+0x268>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    d702:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    d704:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    d706:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    d70a:	9500      	str	r5, [sp, #0]
    d70c:	6809      	ldr	r1, [r1, #0]
    d70e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d712:	463a      	mov	r2, r7
    d714:	f204 1017 	addw	r0, r4, #279	; 0x117
    d718:	f013 fc11 	bl	20f3e <smp_f4>
    d71c:	b140      	cbz	r0, d730 <smp_pairing_random+0x17c>
    d71e:	493c      	ldr	r1, [pc, #240]	; (d810 <smp_pairing_random+0x25c>)
    d720:	4b3c      	ldr	r3, [pc, #240]	; (d814 <smp_pairing_random+0x260>)
		BT_ERR("Calculate confirm failed");
    d722:	4841      	ldr	r0, [pc, #260]	; (d828 <smp_pairing_random+0x274>)
    d724:	1ac9      	subs	r1, r1, r3
    d726:	08c9      	lsrs	r1, r1, #3
    d728:	0189      	lsls	r1, r1, #6
    d72a:	f041 0101 	orr.w	r1, r1, #1
    d72e:	e789      	b.n	d644 <smp_pairing_random+0x90>
	if (memcmp(smp->pcnf, cfm, 16)) {
    d730:	2210      	movs	r2, #16
    d732:	4629      	mov	r1, r5
    d734:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
    d738:	f011 febd 	bl	1f4b6 <memcmp>
    d73c:	b120      	cbz	r0, d748 <smp_pairing_random+0x194>
		return BT_SMP_ERR_CONFIRM_FAILED;
    d73e:	2504      	movs	r5, #4
}
    d740:	4628      	mov	r0, r5
    d742:	b01e      	add	sp, #120	; 0x78
    d744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(smp->allowed_cmds,
    d748:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
    d74c:	2103      	movs	r1, #3
    d74e:	4638      	mov	r0, r7
    d750:	f013 fc23 	bl	20f9a <atomic_set_bit>
		err = smp_send_pairing_random(smp);
    d754:	4620      	mov	r0, r4
    d756:	f013 fc9f 	bl	21098 <smp_send_pairing_random>
		if (err) {
    d75a:	4605      	mov	r5, r0
    d75c:	2800      	cmp	r0, #0
    d75e:	d1ef      	bne.n	d740 <smp_pairing_random+0x18c>
		smp->passkey_round++;
    d760:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
    d764:	3301      	adds	r3, #1
    d766:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
    d768:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    d76a:	f884 319c 	strb.w	r3, [r4, #412]	; 0x19c
		if (smp->passkey_round == 20U) {
    d76e:	d108      	bne.n	d782 <smp_pairing_random+0x1ce>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    d770:	4638      	mov	r0, r7
    d772:	210d      	movs	r1, #13
    d774:	f013 fc11 	bl	20f9a <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    d778:	2110      	movs	r1, #16
    d77a:	4630      	mov	r0, r6
    d77c:	f013 fc0d 	bl	20f9a <atomic_set_bit>
			return 0;
    d780:	e7de      	b.n	d740 <smp_pairing_random+0x18c>
		if (bt_rand(smp->prnd, 16)) {
    d782:	2110      	movs	r1, #16
    d784:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
    d788:	f003 fcc8 	bl	1111c <bt_rand>
    d78c:	2800      	cmp	r0, #0
    d78e:	d0d7      	beq.n	d740 <smp_pairing_random+0x18c>
    d790:	e75a      	b.n	d648 <smp_pairing_random+0x94>
		if (bt_rand(smp->prnd, 16)) {
    d792:	2110      	movs	r1, #16
    d794:	f104 00e7 	add.w	r0, r4, #231	; 0xe7
    d798:	f003 fcc0 	bl	1111c <bt_rand>
    d79c:	2800      	cmp	r0, #0
    d79e:	f47f af53 	bne.w	d648 <smp_pairing_random+0x94>
		if (bt_auth && bt_auth->oob_data_request) {
    d7a2:	4f20      	ldr	r7, [pc, #128]	; (d824 <smp_pairing_random+0x270>)
    d7a4:	683b      	ldr	r3, [r7, #0]
    d7a6:	b1f3      	cbz	r3, d7e6 <smp_pairing_random+0x232>
    d7a8:	68db      	ldr	r3, [r3, #12]
    d7aa:	b1e3      	cbz	r3, d7e6 <smp_pairing_random+0x232>
			struct bt_conn_oob_info info = {
    d7ac:	4b1f      	ldr	r3, [pc, #124]	; (d82c <smp_pairing_random+0x278>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    d7ae:	f894 20cb 	ldrb.w	r2, [r4, #203]	; 0xcb
			struct bt_conn_oob_info info = {
    d7b2:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
    d7b6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    d7ba:	f894 30d2 	ldrb.w	r3, [r4, #210]	; 0xd2
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    d7be:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    d7c0:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    d7c4:	d411      	bmi.n	d7ea <smp_pairing_random+0x236>
				     BT_CONN_OOB_BOTH_PEERS :
    d7c6:	2b00      	cmp	r3, #0
    d7c8:	bf0c      	ite	eq
    d7ca:	2003      	moveq	r0, #3
    d7cc:	2001      	movne	r0, #1
    d7ce:	e00f      	b.n	d7f0 <smp_pairing_random+0x23c>
    d7d0:	4b10      	ldr	r3, [pc, #64]	; (d814 <smp_pairing_random+0x260>)
    d7d2:	4a0f      	ldr	r2, [pc, #60]	; (d810 <smp_pairing_random+0x25c>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    d7d4:	4816      	ldr	r0, [pc, #88]	; (d830 <smp_pairing_random+0x27c>)
    d7d6:	1ad2      	subs	r2, r2, r3
    d7d8:	08d2      	lsrs	r2, r2, #3
    d7da:	0192      	lsls	r2, r2, #6
    d7dc:	f042 0201 	orr.w	r2, r2, #1
    d7e0:	f010 f8af 	bl	1d942 <log_1>
    d7e4:	e730      	b.n	d648 <smp_pairing_random+0x94>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    d7e6:	2502      	movs	r5, #2
    d7e8:	e7aa      	b.n	d740 <smp_pairing_random+0x18c>
				     BT_CONN_OOB_BOTH_PEERS :
    d7ea:	2b00      	cmp	r3, #0
    d7ec:	bf18      	it	ne
    d7ee:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
    d7f0:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
    d7f2:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
    d7f6:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    d7fa:	4630      	mov	r0, r6
    d7fc:	210c      	movs	r1, #12
    d7fe:	f013 fbcc 	bl	20f9a <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    d802:	683b      	ldr	r3, [r7, #0]
    d804:	6820      	ldr	r0, [r4, #0]
    d806:	68db      	ldr	r3, [r3, #12]
    d808:	a90a      	add	r1, sp, #40	; 0x28
    d80a:	4798      	blx	r3
			return 0;
    d80c:	e798      	b.n	d740 <smp_pairing_random+0x18c>
    d80e:	bf00      	nop
    d810:	000226e0 	.word	0x000226e0
    d814:	000225d8 	.word	0x000225d8
    d818:	00025b68 	.word	0x00025b68
    d81c:	200019dc 	.word	0x200019dc
    d820:	000f4240 	.word	0x000f4240
    d824:	20001948 	.word	0x20001948
    d828:	00025b7d 	.word	0x00025b7d
    d82c:	0002281d 	.word	0x0002281d
    d830:	00025a7d 	.word	0x00025a7d

0000d834 <bt_smp_start_security>:
{
    d834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
    d838:	78c4      	ldrb	r4, [r0, #3]
    d83a:	2c01      	cmp	r4, #1
{
    d83c:	b085      	sub	sp, #20
    d83e:	4605      	mov	r5, r0
	switch (conn->role) {
    d840:	d005      	beq.n	d84e <bt_smp_start_security+0x1a>
		return -EINVAL;
    d842:	f06f 0415 	mvn.w	r4, #21
}
    d846:	4620      	mov	r0, r4
    d848:	b005      	add	sp, #20
    d84a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
    d84e:	f7ff f8ed 	bl	ca2c <smp_chan_get>
	if (!smp) {
    d852:	4606      	mov	r6, r0
    d854:	2800      	cmp	r0, #0
    d856:	f000 80a0 	beq.w	d99a <bt_smp_start_security+0x166>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    d85a:	f100 07c4 	add.w	r7, r0, #196	; 0xc4
    d85e:	2104      	movs	r1, #4
    d860:	4638      	mov	r0, r7
    d862:	f013 fbb2 	bl	20fca <atomic_test_bit>
    d866:	2800      	cmp	r0, #0
    d868:	f040 809a 	bne.w	d9a0 <bt_smp_start_security+0x16c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    d86c:	2103      	movs	r1, #3
    d86e:	4638      	mov	r0, r7
    d870:	f013 fbab 	bl	20fca <atomic_test_bit>
    d874:	b110      	cbz	r0, d87c <bt_smp_start_security+0x48>
		return -EBUSY;
    d876:	f06f 040f 	mvn.w	r4, #15
    d87a:	e7e4      	b.n	d846 <bt_smp_start_security+0x12>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    d87c:	4621      	mov	r1, r4
    d87e:	4638      	mov	r0, r7
    d880:	f013 fba3 	bl	20fca <atomic_test_bit>
    d884:	2800      	cmp	r0, #0
    d886:	d1f6      	bne.n	d876 <bt_smp_start_security+0x42>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    d888:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
    d88a:	2b03      	cmp	r3, #3
    d88c:	d03d      	beq.n	d90a <bt_smp_start_security+0xd6>
    d88e:	d82c      	bhi.n	d8ea <bt_smp_start_security+0xb6>
    d890:	3b01      	subs	r3, #1
    d892:	2b01      	cmp	r3, #1
    d894:	d946      	bls.n	d924 <bt_smp_start_security+0xf0>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
    d896:	210b      	movs	r1, #11
    d898:	1d28      	adds	r0, r5, #4
    d89a:	f013 fb96 	bl	20fca <atomic_test_bit>
    d89e:	2800      	cmp	r0, #0
    d8a0:	d1cf      	bne.n	d842 <bt_smp_start_security+0xe>
	if (!conn->le.keys) {
    d8a2:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    d8a6:	b983      	cbnz	r3, d8ca <bt_smp_start_security+0x96>
						     conn->id, &conn->le.dst);
    d8a8:	f105 0288 	add.w	r2, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    d8ac:	7a29      	ldrb	r1, [r5, #8]
    d8ae:	9203      	str	r2, [sp, #12]
    d8b0:	2020      	movs	r0, #32
    d8b2:	f000 fceb 	bl	e28c <bt_keys_find>
		if (!conn->le.keys) {
    d8b6:	9a03      	ldr	r2, [sp, #12]
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    d8b8:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    d8bc:	b928      	cbnz	r0, d8ca <bt_smp_start_security+0x96>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    d8be:	7a29      	ldrb	r1, [r5, #8]
    d8c0:	2004      	movs	r0, #4
    d8c2:	f000 fce3 	bl	e28c <bt_keys_find>
    d8c6:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    d8ca:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    d8ce:	2b00      	cmp	r3, #0
    d8d0:	d0b7      	beq.n	d842 <bt_smp_start_security+0xe>
    d8d2:	89da      	ldrh	r2, [r3, #14]
    d8d4:	f002 0224 	and.w	r2, r2, #36	; 0x24
    d8d8:	2a00      	cmp	r2, #0
    d8da:	d0b2      	beq.n	d842 <bt_smp_start_security+0xe>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
    d8dc:	7aaa      	ldrb	r2, [r5, #10]
    d8de:	2a02      	cmp	r2, #2
    d8e0:	d920      	bls.n	d924 <bt_smp_start_security+0xf0>
    d8e2:	7b5b      	ldrb	r3, [r3, #13]
    d8e4:	07db      	lsls	r3, r3, #31
    d8e6:	d5ac      	bpl.n	d842 <bt_smp_start_security+0xe>
    d8e8:	e01c      	b.n	d924 <bt_smp_start_security+0xf0>
	switch (conn->required_sec_level) {
    d8ea:	2b04      	cmp	r3, #4
    d8ec:	d1d3      	bne.n	d896 <bt_smp_start_security+0x62>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    d8ee:	f7ff f877 	bl	c9e0 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    d8f2:	2803      	cmp	r0, #3
    d8f4:	d104      	bne.n	d900 <bt_smp_start_security+0xcc>
    d8f6:	4b2c      	ldr	r3, [pc, #176]	; (d9a8 <bt_smp_start_security+0x174>)
    d8f8:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    d8fa:	b1f3      	cbz	r3, d93a <bt_smp_start_security+0x106>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    d8fc:	68dc      	ldr	r4, [r3, #12]
    d8fe:	b10c      	cbz	r4, d904 <bt_smp_start_security+0xd0>
    d900:	4b2a      	ldr	r3, [pc, #168]	; (d9ac <bt_smp_start_security+0x178>)
    d902:	781c      	ldrb	r4, [r3, #0]
    d904:	f004 0401 	and.w	r4, r4, #1
    d908:	e00a      	b.n	d920 <bt_smp_start_security+0xec>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    d90a:	f7ff f869 	bl	c9e0 <get_io_capa>
    d90e:	2803      	cmp	r0, #3
    d910:	d106      	bne.n	d920 <bt_smp_start_security+0xec>
		       (bt_auth && bt_auth->oob_data_request);
    d912:	4b25      	ldr	r3, [pc, #148]	; (d9a8 <bt_smp_start_security+0x174>)
    d914:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    d916:	b11c      	cbz	r4, d920 <bt_smp_start_security+0xec>
		       (bt_auth && bt_auth->oob_data_request);
    d918:	68e4      	ldr	r4, [r4, #12]
    d91a:	3c00      	subs	r4, #0
    d91c:	bf18      	it	ne
    d91e:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    d920:	2c00      	cmp	r4, #0
    d922:	d0b8      	beq.n	d896 <bt_smp_start_security+0x62>
	if (!conn->le.keys) {
    d924:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    d928:	b14b      	cbz	r3, d93e <bt_smp_start_security+0x10a>
	if (smp_init(smp) != 0) {
    d92a:	4630      	mov	r0, r6
    d92c:	f7ff f8ee 	bl	cb0c <smp_init>
    d930:	4604      	mov	r4, r0
    d932:	b180      	cbz	r0, d956 <bt_smp_start_security+0x122>
		return -ENOBUFS;
    d934:	f06f 0436 	mvn.w	r4, #54	; 0x36
    d938:	e785      	b.n	d846 <bt_smp_start_security+0x12>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    d93a:	2400      	movs	r4, #0
    d93c:	e7e2      	b.n	d904 <bt_smp_start_security+0xd0>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    d93e:	7a28      	ldrb	r0, [r5, #8]
    d940:	f105 0188 	add.w	r1, r5, #136	; 0x88
    d944:	f000 fc6a 	bl	e21c <bt_keys_get_addr>
    d948:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    d94c:	2800      	cmp	r0, #0
    d94e:	d1ec      	bne.n	d92a <bt_smp_start_security+0xf6>
			return -ENOMEM;
    d950:	f06f 040b 	mvn.w	r4, #11
    d954:	e777      	b.n	d846 <bt_smp_start_security+0x12>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
    d956:	210b      	movs	r1, #11
    d958:	4630      	mov	r0, r6
    d95a:	f013 fb64 	bl	21026 <smp_create_pdu.constprop.0>
	if (!req_buf) {
    d95e:	4680      	mov	r8, r0
    d960:	2800      	cmp	r0, #0
    d962:	d0e7      	beq.n	d934 <bt_smp_start_security+0x100>
    d964:	2101      	movs	r1, #1
    d966:	3008      	adds	r0, #8
    d968:	f013 fe90 	bl	2168c <net_buf_simple_add>
    d96c:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    d96e:	2009      	movs	r0, #9
    d970:	f7ff f896 	bl	caa0 <get_auth.constprop.0>
    d974:	4623      	mov	r3, r4
    d976:	f889 0000 	strb.w	r0, [r9]
    d97a:	4642      	mov	r2, r8
    d97c:	9400      	str	r4, [sp, #0]
    d97e:	2106      	movs	r1, #6
    d980:	4628      	mov	r0, r5
    d982:	f012 fba7 	bl	200d4 <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    d986:	4638      	mov	r0, r7
    d988:	210f      	movs	r1, #15
    d98a:	f013 fb06 	bl	20f9a <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    d98e:	2101      	movs	r1, #1
    d990:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
    d994:	f013 fb01 	bl	20f9a <atomic_set_bit>
	return 0;
    d998:	e755      	b.n	d846 <bt_smp_start_security+0x12>
		return -ENOTCONN;
    d99a:	f06f 0438 	mvn.w	r4, #56	; 0x38
    d99e:	e752      	b.n	d846 <bt_smp_start_security+0x12>
		return -EIO;
    d9a0:	f06f 0404 	mvn.w	r4, #4
    d9a4:	e74f      	b.n	d846 <bt_smp_start_security+0x12>
    d9a6:	bf00      	nop
    d9a8:	20001948 	.word	0x20001948
    d9ac:	2000355e 	.word	0x2000355e

0000d9b0 <smp_pairing_complete>:
{
    d9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    d9b4:	4606      	mov	r6, r0
    d9b6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; da64 <smp_pairing_complete+0xb4>
    d9ba:	f856 4bc4 	ldr.w	r4, [r6], #196
{
    d9be:	4607      	mov	r7, r0
	if (!status) {
    d9c0:	b9b9      	cbnz	r1, d9f2 <smp_pairing_complete+0x42>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    d9c2:	210d      	movs	r1, #13
    d9c4:	4630      	mov	r0, r6
    d9c6:	f013 fb00 	bl	20fca <atomic_test_bit>
		if (bt_auth && bt_auth->pairing_complete) {
    d9ca:	f8d8 3000 	ldr.w	r3, [r8]
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    d9ce:	4601      	mov	r1, r0
		if (bt_auth && bt_auth->pairing_complete) {
    d9d0:	b11b      	cbz	r3, d9da <smp_pairing_complete+0x2a>
    d9d2:	699b      	ldr	r3, [r3, #24]
    d9d4:	b10b      	cbz	r3, d9da <smp_pairing_complete+0x2a>
			bt_auth->pairing_failed(conn, security_err);
    d9d6:	4620      	mov	r0, r4
    d9d8:	4798      	blx	r3
	smp_reset(smp);
    d9da:	4638      	mov	r0, r7
    d9dc:	f013 fbb6 	bl	2114c <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
    d9e0:	7a62      	ldrb	r2, [r4, #9]
    d9e2:	7aa3      	ldrb	r3, [r4, #10]
    d9e4:	429a      	cmp	r2, r3
    d9e6:	d036      	beq.n	da56 <smp_pairing_complete+0xa6>
		bt_smp_start_security(conn);
    d9e8:	4620      	mov	r0, r4
}
    d9ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_smp_start_security(conn);
    d9ee:	f7ff bf21 	b.w	d834 <bt_smp_start_security>
	switch (smp_err) {
    d9f2:	3901      	subs	r1, #1
    d9f4:	b2c9      	uxtb	r1, r1
    d9f6:	290d      	cmp	r1, #13
    d9f8:	bf9c      	itt	ls
    d9fa:	4b18      	ldrls	r3, [pc, #96]	; (da5c <smp_pairing_complete+0xac>)
    d9fc:	5c5d      	ldrbls	r5, [r3, r1]
		if (conn->le.keys &&
    d9fe:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
    da02:	bf88      	it	hi
    da04:	2508      	movhi	r5, #8
		if (conn->le.keys &&
    da06:	b143      	cbz	r3, da1a <smp_pairing_complete+0x6a>
    da08:	7b1b      	ldrb	r3, [r3, #12]
    da0a:	b9eb      	cbnz	r3, da48 <smp_pairing_complete+0x98>
			bt_keys_clear(conn->le.keys);
    da0c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    da10:	f013 fdd6 	bl	215c0 <bt_keys_clear>
			conn->le.keys = NULL;
    da14:	2300      	movs	r3, #0
    da16:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    da1a:	2102      	movs	r1, #2
    da1c:	4630      	mov	r0, r6
    da1e:	f013 fad4 	bl	20fca <atomic_test_bit>
    da22:	b940      	cbnz	r0, da36 <smp_pairing_complete+0x86>
	switch (err) {
    da24:	2d08      	cmp	r5, #8
    da26:	bf16      	itet	ne
    da28:	4b0d      	ldrne	r3, [pc, #52]	; (da60 <smp_pairing_complete+0xb0>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    da2a:	211f      	moveq	r1, #31
    da2c:	5d59      	ldrbne	r1, [r3, r5]
			bt_conn_security_changed(conn,
    da2e:	462a      	mov	r2, r5
    da30:	4620      	mov	r0, r4
    da32:	f7fc fc2d 	bl	a290 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
    da36:	f8d8 3000 	ldr.w	r3, [r8]
    da3a:	2b00      	cmp	r3, #0
    da3c:	d0cd      	beq.n	d9da <smp_pairing_complete+0x2a>
    da3e:	69db      	ldr	r3, [r3, #28]
    da40:	2b00      	cmp	r3, #0
    da42:	d0ca      	beq.n	d9da <smp_pairing_complete+0x2a>
			bt_auth->pairing_failed(conn, security_err);
    da44:	4629      	mov	r1, r5
    da46:	e7c6      	b.n	d9d6 <smp_pairing_complete+0x26>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
    da48:	2102      	movs	r1, #2
    da4a:	4630      	mov	r0, r6
    da4c:	f013 fabd 	bl	20fca <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
    da50:	2800      	cmp	r0, #0
    da52:	d1db      	bne.n	da0c <smp_pairing_complete+0x5c>
    da54:	e7e1      	b.n	da1a <smp_pairing_complete+0x6a>
}
    da56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    da5a:	bf00      	nop
    da5c:	00025d03 	.word	0x00025d03
    da60:	00025d19 	.word	0x00025d19
    da64:	20001948 	.word	0x20001948

0000da68 <bt_smp_recv>:
{
    da68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    da6a:	898b      	ldrh	r3, [r1, #12]
{
    da6c:	4604      	mov	r4, r0
    da6e:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    da70:	b95b      	cbnz	r3, da8a <bt_smp_recv+0x22>
    da72:	493a      	ldr	r1, [pc, #232]	; (db5c <bt_smp_recv+0xf4>)
    da74:	4b3a      	ldr	r3, [pc, #232]	; (db60 <bt_smp_recv+0xf8>)
		BT_ERR("Too small SMP PDU received");
    da76:	483b      	ldr	r0, [pc, #236]	; (db64 <bt_smp_recv+0xfc>)
    da78:	1ac9      	subs	r1, r1, r3
    da7a:	08c9      	lsrs	r1, r1, #3
    da7c:	0189      	lsls	r1, r1, #6
    da7e:	f041 0101 	orr.w	r1, r1, #1
    da82:	f00f ff4f 	bl	1d924 <log_0>
}
    da86:	2000      	movs	r0, #0
    da88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    da8a:	2101      	movs	r1, #1
    da8c:	f105 0008 	add.w	r0, r5, #8
    da90:	f013 fe23 	bl	216da <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    da94:	2104      	movs	r1, #4
    da96:	4606      	mov	r6, r0
    da98:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    da9c:	f013 fa95 	bl	20fca <atomic_test_bit>
    daa0:	7831      	ldrb	r1, [r6, #0]
    daa2:	b150      	cbz	r0, daba <bt_smp_recv+0x52>
    daa4:	4a2d      	ldr	r2, [pc, #180]	; (db5c <bt_smp_recv+0xf4>)
    daa6:	4b2e      	ldr	r3, [pc, #184]	; (db60 <bt_smp_recv+0xf8>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    daa8:	482f      	ldr	r0, [pc, #188]	; (db68 <bt_smp_recv+0x100>)
    daaa:	1ad2      	subs	r2, r2, r3
    daac:	08d2      	lsrs	r2, r2, #3
    daae:	0192      	lsls	r2, r2, #6
    dab0:	f042 0202 	orr.w	r2, r2, #2
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
    dab4:	f00f ff45 	bl	1d942 <log_1>
		return 0;
    dab8:	e7e5      	b.n	da86 <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
    daba:	290e      	cmp	r1, #14
    dabc:	d908      	bls.n	dad0 <bt_smp_recv+0x68>
    dabe:	4a27      	ldr	r2, [pc, #156]	; (db5c <bt_smp_recv+0xf4>)
    dac0:	4b27      	ldr	r3, [pc, #156]	; (db60 <bt_smp_recv+0xf8>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
    dac2:	482a      	ldr	r0, [pc, #168]	; (db6c <bt_smp_recv+0x104>)
    dac4:	1ad2      	subs	r2, r2, r3
    dac6:	08d2      	lsrs	r2, r2, #3
    dac8:	0192      	lsls	r2, r2, #6
    daca:	f042 0202 	orr.w	r2, r2, #2
    dace:	e7f1      	b.n	dab4 <bt_smp_recv+0x4c>
	if (!handlers[hdr->code].func) {
    dad0:	4f27      	ldr	r7, [pc, #156]	; (db70 <bt_smp_recv+0x108>)
    dad2:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    dad6:	b973      	cbnz	r3, daf6 <bt_smp_recv+0x8e>
    dad8:	4b21      	ldr	r3, [pc, #132]	; (db60 <bt_smp_recv+0xf8>)
    dada:	4a20      	ldr	r2, [pc, #128]	; (db5c <bt_smp_recv+0xf4>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    dadc:	4825      	ldr	r0, [pc, #148]	; (db74 <bt_smp_recv+0x10c>)
    dade:	1ad2      	subs	r2, r2, r3
    dae0:	08d2      	lsrs	r2, r2, #3
    dae2:	0192      	lsls	r2, r2, #6
    dae4:	f042 0202 	orr.w	r2, r2, #2
    dae8:	f00f ff2b 	bl	1d942 <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    daec:	2107      	movs	r1, #7
		smp_error(smp, err);
    daee:	4620      	mov	r0, r4
    daf0:	f013 fc95 	bl	2141e <smp_error>
    daf4:	e7c7      	b.n	da86 <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
    daf6:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    dafa:	f013 fb0f 	bl	2111c <atomic_test_and_clear_bit>
    dafe:	7831      	ldrb	r1, [r6, #0]
    db00:	b970      	cbnz	r0, db20 <bt_smp_recv+0xb8>
    db02:	4b17      	ldr	r3, [pc, #92]	; (db60 <bt_smp_recv+0xf8>)
    db04:	4a15      	ldr	r2, [pc, #84]	; (db5c <bt_smp_recv+0xf4>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    db06:	481c      	ldr	r0, [pc, #112]	; (db78 <bt_smp_recv+0x110>)
    db08:	1ad2      	subs	r2, r2, r3
    db0a:	08d2      	lsrs	r2, r2, #3
    db0c:	0192      	lsls	r2, r2, #6
    db0e:	f042 0202 	orr.w	r2, r2, #2
    db12:	f00f ff16 	bl	1d942 <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    db16:	7833      	ldrb	r3, [r6, #0]
    db18:	2b05      	cmp	r3, #5
    db1a:	d0b4      	beq.n	da86 <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    db1c:	2108      	movs	r1, #8
    db1e:	e7e6      	b.n	daee <bt_smp_recv+0x86>
	if (buf->len != handlers[hdr->code].expect_len) {
    db20:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
    db24:	89a8      	ldrh	r0, [r5, #12]
    db26:	791b      	ldrb	r3, [r3, #4]
    db28:	4283      	cmp	r3, r0
    db2a:	d00d      	beq.n	db48 <bt_smp_recv+0xe0>
    db2c:	4a0c      	ldr	r2, [pc, #48]	; (db60 <bt_smp_recv+0xf8>)
    db2e:	4b0b      	ldr	r3, [pc, #44]	; (db5c <bt_smp_recv+0xf4>)
    db30:	1a9b      	subs	r3, r3, r2
    db32:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    db34:	019b      	lsls	r3, r3, #6
    db36:	460a      	mov	r2, r1
    db38:	f043 0301 	orr.w	r3, r3, #1
    db3c:	4601      	mov	r1, r0
    db3e:	480f      	ldr	r0, [pc, #60]	; (db7c <bt_smp_recv+0x114>)
    db40:	f00f ff16 	bl	1d970 <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    db44:	210a      	movs	r1, #10
    db46:	e7d2      	b.n	daee <bt_smp_recv+0x86>
	err = handlers[hdr->code].func(smp, buf);
    db48:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    db4c:	4620      	mov	r0, r4
    db4e:	4629      	mov	r1, r5
    db50:	4798      	blx	r3
	if (err) {
    db52:	4601      	mov	r1, r0
    db54:	2800      	cmp	r0, #0
    db56:	d096      	beq.n	da86 <bt_smp_recv+0x1e>
    db58:	e7c9      	b.n	daee <bt_smp_recv+0x86>
    db5a:	bf00      	nop
    db5c:	000226e0 	.word	0x000226e0
    db60:	000225d8 	.word	0x000225d8
    db64:	00025b96 	.word	0x00025b96
    db68:	00025bb1 	.word	0x00025bb1
    db6c:	00025be2 	.word	0x00025be2
    db70:	00022fdc 	.word	0x00022fdc
    db74:	00025c04 	.word	0x00025c04
    db78:	00025c1e 	.word	0x00025c1e
    db7c:	00025865 	.word	0x00025865

0000db80 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
    db80:	4b13      	ldr	r3, [pc, #76]	; (dbd0 <bt_smp_pkey_ready+0x50>)
{
    db82:	b510      	push	{r4, lr}
	sc_public_key = pkey;
    db84:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    db86:	b958      	cbnz	r0, dba0 <bt_smp_pkey_ready+0x20>
    db88:	4912      	ldr	r1, [pc, #72]	; (dbd4 <bt_smp_pkey_ready+0x54>)
    db8a:	4b13      	ldr	r3, [pc, #76]	; (dbd8 <bt_smp_pkey_ready+0x58>)
		BT_WARN("Public key not available");
    db8c:	4813      	ldr	r0, [pc, #76]	; (dbdc <bt_smp_pkey_ready+0x5c>)
    db8e:	1ac9      	subs	r1, r1, r3
    db90:	08c9      	lsrs	r1, r1, #3
    db92:	0189      	lsls	r1, r1, #6
}
    db94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
    db98:	f041 0102 	orr.w	r1, r1, #2
    db9c:	f00f bec2 	b.w	1d924 <log_0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    dba0:	4c0f      	ldr	r4, [pc, #60]	; (dbe0 <bt_smp_pkey_ready+0x60>)
	z_impl_k_sem_give(sem);
    dba2:	4810      	ldr	r0, [pc, #64]	; (dbe4 <bt_smp_pkey_ready+0x64>)
    dba4:	f00e fafc 	bl	1c1a0 <z_impl_k_sem_give>
    dba8:	f3bf 8f5b 	dmb	ish
    dbac:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    dbb0:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    dbb4:	065b      	lsls	r3, r3, #25
    dbb6:	d509      	bpl.n	dbcc <bt_smp_pkey_ready+0x4c>
		err = smp_public_key_slave(smp);
    dbb8:	4620      	mov	r0, r4
    dbba:	f7ff f8b9 	bl	cd30 <smp_public_key_slave>
		if (err) {
    dbbe:	4601      	mov	r1, r0
    dbc0:	b120      	cbz	r0, dbcc <bt_smp_pkey_ready+0x4c>
			smp_error(smp, err);
    dbc2:	4620      	mov	r0, r4
}
    dbc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    dbc8:	f013 bc29 	b.w	2141e <smp_error>
}
    dbcc:	bd10      	pop	{r4, pc}
    dbce:	bf00      	nop
    dbd0:	200019dc 	.word	0x200019dc
    dbd4:	000226e0 	.word	0x000226e0
    dbd8:	000225d8 	.word	0x000225d8
    dbdc:	00025c39 	.word	0x00025c39
    dbe0:	20000ea0 	.word	0x20000ea0
    dbe4:	200008b8 	.word	0x200008b8

0000dbe8 <smp_ident_addr_info>:
{
    dbe8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    dbec:	688d      	ldr	r5, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    dbee:	6807      	ldr	r7, [r0, #0]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    dbf0:	782b      	ldrb	r3, [r5, #0]
{
    dbf2:	4604      	mov	r4, r0
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    dbf4:	f107 0688 	add.w	r6, r7, #136	; 0x88
    dbf8:	b31b      	cbz	r3, dc42 <smp_ident_addr_info+0x5a>
	if (!bt_addr_le_is_identity(&req->addr)) {
    dbfa:	79ab      	ldrb	r3, [r5, #6]
    dbfc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    dc00:	2bc0      	cmp	r3, #192	; 0xc0
    dc02:	d01e      	beq.n	dc42 <smp_ident_addr_info+0x5a>
    dc04:	4b4d      	ldr	r3, [pc, #308]	; (dd3c <smp_ident_addr_info+0x154>)
    dc06:	4c4e      	ldr	r4, [pc, #312]	; (dd40 <smp_ident_addr_info+0x158>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
    dc08:	4628      	mov	r0, r5
    dc0a:	1ae4      	subs	r4, r4, r3
    dc0c:	f7f9 fd4a 	bl	76a4 <bt_addr_le_str_real>
    dc10:	f7f7 fd78 	bl	5704 <log_strdup>
    dc14:	08e4      	lsrs	r4, r4, #3
    dc16:	01a4      	lsls	r4, r4, #6
    dc18:	f044 0401 	orr.w	r4, r4, #1
    dc1c:	4601      	mov	r1, r0
    dc1e:	4622      	mov	r2, r4
    dc20:	4848      	ldr	r0, [pc, #288]	; (dd44 <smp_ident_addr_info+0x15c>)
    dc22:	f00f fe8e 	bl	1d942 <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    dc26:	4630      	mov	r0, r6
    dc28:	f7f9 fd3c 	bl	76a4 <bt_addr_le_str_real>
    dc2c:	f7f7 fd6a 	bl	5704 <log_strdup>
    dc30:	4622      	mov	r2, r4
    dc32:	4601      	mov	r1, r0
    dc34:	4844      	ldr	r0, [pc, #272]	; (dd48 <smp_ident_addr_info+0x160>)
    dc36:	f00f fe84 	bl	1d942 <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
    dc3a:	200a      	movs	r0, #10
}
    dc3c:	b002      	add	sp, #8
    dc3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
    dc42:	2207      	movs	r2, #7
    dc44:	4629      	mov	r1, r5
    dc46:	4630      	mov	r0, r6
    dc48:	f011 fc35 	bl	1f4b6 <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
    dc4c:	b170      	cbz	r0, dc6c <smp_ident_addr_info+0x84>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
    dc4e:	4629      	mov	r1, r5
    dc50:	7a38      	ldrb	r0, [r7, #8]
    dc52:	f000 fb69 	bl	e328 <bt_keys_find_addr>
		if (keys) {
    dc56:	4601      	mov	r1, r0
    dc58:	b140      	cbz	r0, dc6c <smp_ident_addr_info+0x84>
			if (!update_keys_check(smp, keys)) {
    dc5a:	9001      	str	r0, [sp, #4]
    dc5c:	4620      	mov	r0, r4
    dc5e:	f013 f9bd 	bl	20fdc <update_keys_check>
    dc62:	b310      	cbz	r0, dcaa <smp_ident_addr_info+0xc2>
			bt_keys_clear(keys);
    dc64:	9901      	ldr	r1, [sp, #4]
    dc66:	4608      	mov	r0, r1
    dc68:	f013 fcaa 	bl	215c0 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    dc6c:	210d      	movs	r1, #13
    dc6e:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    dc72:	f013 f9aa 	bl	20fca <atomic_test_bit>
    dc76:	2800      	cmp	r0, #0
    dc78:	d046      	beq.n	dd08 <smp_ident_addr_info+0x120>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    dc7a:	7a39      	ldrb	r1, [r7, #8]
    dc7c:	4632      	mov	r2, r6
    dc7e:	2002      	movs	r0, #2
    dc80:	f013 fc8a 	bl	21598 <bt_keys_get_type>
		if (!keys) {
    dc84:	4680      	mov	r8, r0
    dc86:	b990      	cbnz	r0, dcae <smp_ident_addr_info+0xc6>
    dc88:	4a2c      	ldr	r2, [pc, #176]	; (dd3c <smp_ident_addr_info+0x154>)
    dc8a:	4c2d      	ldr	r4, [pc, #180]	; (dd40 <smp_ident_addr_info+0x158>)
			BT_ERR("Unable to get keys for %s",
    dc8c:	4630      	mov	r0, r6
    dc8e:	1aa4      	subs	r4, r4, r2
    dc90:	f7f9 fd08 	bl	76a4 <bt_addr_le_str_real>
    dc94:	f7f7 fd36 	bl	5704 <log_strdup>
    dc98:	08e4      	lsrs	r4, r4, #3
    dc9a:	01a4      	lsls	r4, r4, #6
    dc9c:	f044 0401 	orr.w	r4, r4, #1
    dca0:	4601      	mov	r1, r0
    dca2:	4622      	mov	r2, r4
    dca4:	4829      	ldr	r0, [pc, #164]	; (dd4c <smp_ident_addr_info+0x164>)
    dca6:	f00f fe4c 	bl	1d942 <log_1>
				return BT_SMP_ERR_UNSPECIFIED;
    dcaa:	2008      	movs	r0, #8
    dcac:	e7c6      	b.n	dc3c <smp_ident_addr_info+0x54>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    dcae:	78fb      	ldrb	r3, [r7, #3]
    dcb0:	2b00      	cmp	r3, #0
    dcb2:	d13f      	bne.n	dd34 <smp_ident_addr_info+0x14c>
			dst = &conn->le.resp_addr;
    dcb4:	f107 0196 	add.w	r1, r7, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
    dcb8:	780b      	ldrb	r3, [r1, #0]
    dcba:	2b01      	cmp	r3, #1
    dcbc:	d121      	bne.n	dd02 <smp_ident_addr_info+0x11a>
		if (bt_addr_le_is_rpa(dst)) {
    dcbe:	798b      	ldrb	r3, [r1, #6]
    dcc0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    dcc4:	2b40      	cmp	r3, #64	; 0x40
    dcc6:	d11c      	bne.n	dd02 <smp_ident_addr_info+0x11a>
	memcpy(dst, src, sizeof(*dst));
    dcc8:	2206      	movs	r2, #6
    dcca:	3101      	adds	r1, #1
    dccc:	f108 003a 	add.w	r0, r8, #58	; 0x3a
    dcd0:	f011 fc02 	bl	1f4d8 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    dcd4:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
    dcd8:	b19b      	cbz	r3, dd02 <smp_ident_addr_info+0x11a>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    dcda:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
    dcde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    dce2:	2bc0      	cmp	r3, #192	; 0xc0
    dce4:	d00d      	beq.n	dd02 <smp_ident_addr_info+0x11a>
	memcpy(dst, src, sizeof(*dst));
    dce6:	2207      	movs	r2, #7
    dce8:	4629      	mov	r1, r5
    dcea:	f108 0001 	add.w	r0, r8, #1
    dcee:	f011 fbf3 	bl	1f4d8 <memcpy>
    dcf2:	2207      	movs	r2, #7
    dcf4:	4629      	mov	r1, r5
    dcf6:	4630      	mov	r0, r6
    dcf8:	f011 fbee 	bl	1f4d8 <memcpy>
				bt_conn_identity_resolved(conn);
    dcfc:	4638      	mov	r0, r7
    dcfe:	f7fc faad 	bl	a25c <bt_conn_identity_resolved>
		bt_id_add(keys);
    dd02:	4640      	mov	r0, r8
    dd04:	f7fb fa7a 	bl	91fc <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    dd08:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    dd0c:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    dd10:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    dd12:	f884 21a9 	strb.w	r2, [r4, #425]	; 0x1a9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    dd16:	d504      	bpl.n	dd22 <smp_ident_addr_info+0x13a>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    dd18:	210a      	movs	r1, #10
    dd1a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    dd1e:	f013 f93c 	bl	20f9a <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    dd22:	f8b4 51a8 	ldrh.w	r5, [r4, #424]	; 0x1a8
    dd26:	b91d      	cbnz	r5, dd30 <smp_ident_addr_info+0x148>
		smp_pairing_complete(smp, 0);
    dd28:	4629      	mov	r1, r5
    dd2a:	4620      	mov	r0, r4
    dd2c:	f7ff fe40 	bl	d9b0 <smp_pairing_complete>
	return 0;
    dd30:	2000      	movs	r0, #0
    dd32:	e783      	b.n	dc3c <smp_ident_addr_info+0x54>
			dst = &conn->le.init_addr;
    dd34:	f107 018f 	add.w	r1, r7, #143	; 0x8f
    dd38:	e7be      	b.n	dcb8 <smp_ident_addr_info+0xd0>
    dd3a:	bf00      	nop
    dd3c:	000225d8 	.word	0x000225d8
    dd40:	000226e0 	.word	0x000226e0
    dd44:	00025c52 	.word	0x00025c52
    dd48:	00025c7f 	.word	0x00025c7f
    dd4c:	00025a63 	.word	0x00025a63

0000dd50 <smp_master_ident>:
{
    dd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dd52:	4604      	mov	r4, r0
    dd54:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    dd56:	f850 5bc4 	ldr.w	r5, [r0], #196
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    dd5a:	210d      	movs	r1, #13
    dd5c:	f013 f935 	bl	20fca <atomic_test_bit>
    dd60:	b368      	cbz	r0, ddbe <smp_master_ident+0x6e>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    dd62:	f105 0788 	add.w	r7, r5, #136	; 0x88
    dd66:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
    dd68:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    dd6a:	463a      	mov	r2, r7
    dd6c:	2004      	movs	r0, #4
    dd6e:	f013 fc13 	bl	21598 <bt_keys_get_type>
		if (!keys) {
    dd72:	4605      	mov	r5, r0
    dd74:	b990      	cbnz	r0, dd9c <smp_master_ident+0x4c>
    dd76:	4a1d      	ldr	r2, [pc, #116]	; (ddec <smp_master_ident+0x9c>)
    dd78:	4c1d      	ldr	r4, [pc, #116]	; (ddf0 <smp_master_ident+0xa0>)
			BT_ERR("Unable to get keys for %s",
    dd7a:	4638      	mov	r0, r7
    dd7c:	1aa4      	subs	r4, r4, r2
    dd7e:	f7f9 fc91 	bl	76a4 <bt_addr_le_str_real>
    dd82:	f7f7 fcbf 	bl	5704 <log_strdup>
    dd86:	08e4      	lsrs	r4, r4, #3
    dd88:	01a4      	lsls	r4, r4, #6
    dd8a:	f044 0401 	orr.w	r4, r4, #1
    dd8e:	4601      	mov	r1, r0
    dd90:	4622      	mov	r2, r4
    dd92:	4818      	ldr	r0, [pc, #96]	; (ddf4 <smp_master_ident+0xa4>)
    dd94:	f00f fdd5 	bl	1d942 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    dd98:	2008      	movs	r0, #8
}
    dd9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
    dd9c:	2202      	movs	r2, #2
    dd9e:	4631      	mov	r1, r6
    dda0:	3018      	adds	r0, #24
    dda2:	f011 fb99 	bl	1f4d8 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
    dda6:	2208      	movs	r2, #8
    dda8:	1cb1      	adds	r1, r6, #2
    ddaa:	f105 0010 	add.w	r0, r5, #16
    ddae:	f011 fb93 	bl	1f4d8 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    ddb2:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    ddb6:	f023 0301 	bic.w	r3, r3, #1
    ddba:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    ddbe:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    ddc2:	079a      	lsls	r2, r3, #30
    ddc4:	d50d      	bpl.n	dde2 <smp_master_ident+0x92>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    ddc6:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    ddc8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    ddcc:	f013 f8e5 	bl	20f9a <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    ddd0:	f8b4 51a8 	ldrh.w	r5, [r4, #424]	; 0x1a8
    ddd4:	b91d      	cbnz	r5, ddde <smp_master_ident+0x8e>
		smp_pairing_complete(smp, 0);
    ddd6:	4629      	mov	r1, r5
    ddd8:	4620      	mov	r0, r4
    ddda:	f7ff fde9 	bl	d9b0 <smp_pairing_complete>
	return 0;
    ddde:	2000      	movs	r0, #0
    dde0:	e7db      	b.n	dd9a <smp_master_ident+0x4a>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    dde2:	075b      	lsls	r3, r3, #29
    dde4:	d5f4      	bpl.n	ddd0 <smp_master_ident+0x80>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    dde6:	210a      	movs	r1, #10
    dde8:	e7ee      	b.n	ddc8 <smp_master_ident+0x78>
    ddea:	bf00      	nop
    ddec:	000225d8 	.word	0x000225d8
    ddf0:	000226e0 	.word	0x000226e0
    ddf4:	00025a63 	.word	0x00025a63

0000ddf8 <smp_pairing_failed>:
{
    ddf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ddfa:	4a15      	ldr	r2, [pc, #84]	; (de50 <smp_pairing_failed+0x58>)
    ddfc:	4b15      	ldr	r3, [pc, #84]	; (de54 <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    ddfe:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    de00:	4605      	mov	r5, r0
    de02:	1ad2      	subs	r2, r2, r3
    de04:	08d2      	lsrs	r2, r2, #3
    de06:	f855 7bc4 	ldr.w	r7, [r5], #196
	BT_ERR("reason 0x%x", req->reason);
    de0a:	7831      	ldrb	r1, [r6, #0]
    de0c:	0192      	lsls	r2, r2, #6
{
    de0e:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    de10:	f042 0201 	orr.w	r2, r2, #1
    de14:	4810      	ldr	r0, [pc, #64]	; (de58 <smp_pairing_failed+0x60>)
    de16:	f00f fd94 	bl	1d942 <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    de1a:	210a      	movs	r1, #10
    de1c:	4628      	mov	r0, r5
    de1e:	f013 f97d 	bl	2111c <atomic_test_and_clear_bit>
    de22:	b140      	cbz	r0, de36 <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
    de24:	4b0d      	ldr	r3, [pc, #52]	; (de5c <smp_pairing_failed+0x64>)
    de26:	681b      	ldr	r3, [r3, #0]
    de28:	b963      	cbnz	r3, de44 <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
    de2a:	4620      	mov	r0, r4
    de2c:	7831      	ldrb	r1, [r6, #0]
    de2e:	f7ff fdbf 	bl	d9b0 <smp_pairing_complete>
}
    de32:	2000      	movs	r0, #0
    de34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    de36:	210b      	movs	r1, #11
    de38:	4628      	mov	r0, r5
    de3a:	f013 f96f 	bl	2111c <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    de3e:	2800      	cmp	r0, #0
    de40:	d1f0      	bne.n	de24 <smp_pairing_failed+0x2c>
    de42:	e7f2      	b.n	de2a <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
    de44:	691b      	ldr	r3, [r3, #16]
    de46:	2b00      	cmp	r3, #0
    de48:	d0ef      	beq.n	de2a <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
    de4a:	4638      	mov	r0, r7
    de4c:	4798      	blx	r3
    de4e:	e7ec      	b.n	de2a <smp_pairing_failed+0x32>
    de50:	000226e0 	.word	0x000226e0
    de54:	000225d8 	.word	0x000225d8
    de58:	00025c66 	.word	0x00025c66
    de5c:	20001948 	.word	0x20001948

0000de60 <bt_smp_encrypt_change>:
{
    de60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->conn;
    de64:	4605      	mov	r5, r0
{
    de66:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = chan->conn;
    de68:	f855 7bc4 	ldr.w	r7, [r5], #196
{
    de6c:	4604      	mov	r4, r0
    de6e:	460e      	mov	r6, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    de70:	4628      	mov	r0, r5
    de72:	2101      	movs	r1, #1
    de74:	f013 f952 	bl	2111c <atomic_test_and_clear_bit>
    de78:	2800      	cmp	r0, #0
    de7a:	f000 8091 	beq.w	dfa0 <bt_smp_encrypt_change+0x140>
	if (hci_status) {
    de7e:	b1de      	cbz	r6, deb8 <bt_smp_encrypt_change+0x58>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    de80:	2103      	movs	r1, #3
    de82:	4628      	mov	r0, r5
    de84:	f013 f8a1 	bl	20fca <atomic_test_bit>
    de88:	2800      	cmp	r0, #0
    de8a:	f000 8089 	beq.w	dfa0 <bt_smp_encrypt_change+0x140>
			uint8_t smp_err = smp_err_get(
    de8e:	4630      	mov	r0, r6
    de90:	f7fa fe5c 	bl	8b4c <bt_security_err_get>
	switch (auth_err) {
    de94:	3801      	subs	r0, #1
    de96:	b2c0      	uxtb	r0, r0
    de98:	2807      	cmp	r0, #7
    de9a:	bf9a      	itte	ls
    de9c:	4b75      	ldrls	r3, [pc, #468]	; (e074 <bt_smp_encrypt_change+0x214>)
    de9e:	5c1e      	ldrbls	r6, [r3, r0]
			uint8_t smp_err = smp_err_get(
    dea0:	2600      	movhi	r6, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    dea2:	2102      	movs	r1, #2
    dea4:	4628      	mov	r0, r5
    dea6:	f013 f878 	bl	20f9a <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
    deaa:	4631      	mov	r1, r6
		smp_pairing_complete(smp, 0);
    deac:	4620      	mov	r0, r4
}
    deae:	b009      	add	sp, #36	; 0x24
    deb0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		smp_pairing_complete(smp, 0);
    deb4:	f7ff bd7c 	b.w	d9b0 <smp_pairing_complete>
	if (!conn->encrypt) {
    deb8:	7afb      	ldrb	r3, [r7, #11]
    deba:	2b00      	cmp	r3, #0
    debc:	d070      	beq.n	dfa0 <bt_smp_encrypt_change+0x140>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    debe:	2103      	movs	r1, #3
    dec0:	4628      	mov	r0, r5
    dec2:	f013 f882 	bl	20fca <atomic_test_bit>
    dec6:	b928      	cbnz	r0, ded4 <bt_smp_encrypt_change+0x74>
		smp_reset(smp);
    dec8:	4620      	mov	r0, r4
}
    deca:	b009      	add	sp, #36	; 0x24
    decc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		smp_reset(smp);
    ded0:	f013 b93c 	b.w	2114c <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ded4:	2105      	movs	r1, #5
    ded6:	4628      	mov	r0, r5
    ded8:	f013 f877 	bl	20fca <atomic_test_bit>
    dedc:	b198      	cbz	r0, df06 <bt_smp_encrypt_change+0xa6>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    dede:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
    dee2:	071f      	lsls	r7, r3, #28
    dee4:	d507      	bpl.n	def6 <bt_smp_encrypt_change+0x96>
    dee6:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    deea:	071e      	lsls	r6, r3, #28
    deec:	d503      	bpl.n	def6 <bt_smp_encrypt_change+0x96>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    deee:	2111      	movs	r1, #17
    def0:	4628      	mov	r0, r5
    def2:	f013 f852 	bl	20f9a <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    def6:	f8b4 31a8 	ldrh.w	r3, [r4, #424]	; 0x1a8
    defa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    defe:	f023 0308 	bic.w	r3, r3, #8
    df02:	f8a4 31a8 	strh.w	r3, [r4, #424]	; 0x1a8
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    df06:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    df0a:	07d8      	lsls	r0, r3, #31
    df0c:	d521      	bpl.n	df52 <bt_smp_encrypt_change+0xf2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    df0e:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    df10:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    df14:	f013 f841 	bl	20f9a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    df18:	2102      	movs	r1, #2
    df1a:	4628      	mov	r0, r5
    df1c:	f013 f83d 	bl	20f9a <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
    df20:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
    df22:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    df26:	b9e2      	cbnz	r2, df62 <bt_smp_encrypt_change+0x102>
    df28:	4a53      	ldr	r2, [pc, #332]	; (e078 <bt_smp_encrypt_change+0x218>)
    df2a:	4c54      	ldr	r4, [pc, #336]	; (e07c <bt_smp_encrypt_change+0x21c>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    df2c:	f103 0088 	add.w	r0, r3, #136	; 0x88
    df30:	1aa4      	subs	r4, r4, r2
    df32:	f7f9 fbb7 	bl	76a4 <bt_addr_le_str_real>
    df36:	f7f7 fbe5 	bl	5704 <log_strdup>
    df3a:	08e4      	lsrs	r4, r4, #3
    df3c:	01a4      	lsls	r4, r4, #6
    df3e:	f044 0401 	orr.w	r4, r4, #1
    df42:	4601      	mov	r1, r0
    df44:	484e      	ldr	r0, [pc, #312]	; (e080 <bt_smp_encrypt_change+0x220>)
    df46:	4622      	mov	r2, r4
}
    df48:	b009      	add	sp, #36	; 0x24
    df4a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    df4e:	f00f bcf8 	b.w	1d942 <log_1>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    df52:	0799      	lsls	r1, r3, #30
    df54:	d501      	bpl.n	df5a <bt_smp_encrypt_change+0xfa>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    df56:	2108      	movs	r1, #8
    df58:	e7da      	b.n	df10 <bt_smp_encrypt_change+0xb0>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    df5a:	075a      	lsls	r2, r3, #29
    df5c:	d5dc      	bpl.n	df18 <bt_smp_encrypt_change+0xb8>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    df5e:	210a      	movs	r1, #10
    df60:	e7d6      	b.n	df10 <bt_smp_encrypt_change+0xb0>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    df62:	2105      	movs	r1, #5
    df64:	f013 f831 	bl	20fca <atomic_test_bit>
    df68:	b9b0      	cbnz	r0, df98 <bt_smp_encrypt_change+0x138>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    df6a:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
    df6e:	07db      	lsls	r3, r3, #31
    df70:	d512      	bpl.n	df98 <bt_smp_encrypt_change+0x138>
	struct bt_keys *keys = conn->le.keys;
    df72:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
    df74:	211a      	movs	r1, #26
    df76:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
    df78:	f8d3 60b4 	ldr.w	r6, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
    df7c:	f003 f8ce 	bl	1111c <bt_rand>
    df80:	4680      	mov	r8, r0
    df82:	b180      	cbz	r0, dfa6 <bt_smp_encrypt_change+0x146>
    df84:	493d      	ldr	r1, [pc, #244]	; (e07c <bt_smp_encrypt_change+0x21c>)
    df86:	4b3c      	ldr	r3, [pc, #240]	; (e078 <bt_smp_encrypt_change+0x218>)
			BT_ERR("Unable to get random bytes");
    df88:	483e      	ldr	r0, [pc, #248]	; (e084 <bt_smp_encrypt_change+0x224>)
    df8a:	1ac9      	subs	r1, r1, r3
    df8c:	08c9      	lsrs	r1, r1, #3
    df8e:	0189      	lsls	r1, r1, #6
    df90:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Encrypt Info buffer");
    df94:	f00f fcc6 	bl	1d924 <log_0>
	if (!smp->local_dist && !smp->remote_dist) {
    df98:	f8b4 11a8 	ldrh.w	r1, [r4, #424]	; 0x1a8
    df9c:	2900      	cmp	r1, #0
    df9e:	d085      	beq.n	deac <bt_smp_encrypt_change+0x4c>
}
    dfa0:	b009      	add	sp, #36	; 0x24
    dfa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    dfa6:	2106      	movs	r1, #6
    dfa8:	4620      	mov	r0, r4
    dfaa:	f013 f83c 	bl	21026 <smp_create_pdu.constprop.0>
		if (!buf) {
    dfae:	4607      	mov	r7, r0
    dfb0:	b940      	cbnz	r0, dfc4 <bt_smp_encrypt_change+0x164>
    dfb2:	4932      	ldr	r1, [pc, #200]	; (e07c <bt_smp_encrypt_change+0x21c>)
    dfb4:	4b30      	ldr	r3, [pc, #192]	; (e078 <bt_smp_encrypt_change+0x218>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
    dfb6:	4834      	ldr	r0, [pc, #208]	; (e088 <bt_smp_encrypt_change+0x228>)
    dfb8:	1ac9      	subs	r1, r1, r3
    dfba:	08c9      	lsrs	r1, r1, #3
    dfbc:	0189      	lsls	r1, r1, #6
    dfbe:	f041 0101 	orr.w	r1, r1, #1
    dfc2:	e7e7      	b.n	df94 <bt_smp_encrypt_change+0x134>
	return net_buf_simple_add(&buf->b, len);
    dfc4:	2110      	movs	r1, #16
    dfc6:	3008      	adds	r0, #8
    dfc8:	f013 fb60 	bl	2168c <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
    dfcc:	7b32      	ldrb	r2, [r6, #12]
    dfce:	a901      	add	r1, sp, #4
    dfd0:	4681      	mov	r9, r0
    dfd2:	f011 fa81 	bl	1f4d8 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    dfd6:	7b30      	ldrb	r0, [r6, #12]
    dfd8:	280f      	cmp	r0, #15
    dfda:	d805      	bhi.n	dfe8 <bt_smp_encrypt_change+0x188>
			(void)memset(info->ltk + keys->enc_size, 0,
    dfdc:	f1c0 0210 	rsb	r2, r0, #16
    dfe0:	4641      	mov	r1, r8
    dfe2:	4448      	add	r0, r9
    dfe4:	f011 faa3 	bl	1f52e <memset>
		smp_send(smp, buf, NULL, NULL);
    dfe8:	4639      	mov	r1, r7
    dfea:	2200      	movs	r2, #0
    dfec:	4620      	mov	r0, r4
    dfee:	f7fe fd75 	bl	cadc <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
    dff2:	2107      	movs	r1, #7
    dff4:	4620      	mov	r0, r4
    dff6:	f013 f816 	bl	21026 <smp_create_pdu.constprop.0>
		if (!buf) {
    dffa:	4607      	mov	r7, r0
    dffc:	b940      	cbnz	r0, e010 <bt_smp_encrypt_change+0x1b0>
    dffe:	491f      	ldr	r1, [pc, #124]	; (e07c <bt_smp_encrypt_change+0x21c>)
    e000:	4b1d      	ldr	r3, [pc, #116]	; (e078 <bt_smp_encrypt_change+0x218>)
			BT_ERR("Unable to allocate Master Ident buffer");
    e002:	4822      	ldr	r0, [pc, #136]	; (e08c <bt_smp_encrypt_change+0x22c>)
    e004:	1ac9      	subs	r1, r1, r3
    e006:	08c9      	lsrs	r1, r1, #3
    e008:	0189      	lsls	r1, r1, #6
    e00a:	f041 0101 	orr.w	r1, r1, #1
    e00e:	e7c1      	b.n	df94 <bt_smp_encrypt_change+0x134>
    e010:	210a      	movs	r1, #10
    e012:	3008      	adds	r0, #8
    e014:	f013 fb3a 	bl	2168c <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    e018:	2208      	movs	r2, #8
    e01a:	4680      	mov	r8, r0
    e01c:	a905      	add	r1, sp, #20
    e01e:	3002      	adds	r0, #2
    e020:	f011 fa5a 	bl	1f4d8 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
    e024:	2202      	movs	r2, #2
    e026:	a907      	add	r1, sp, #28
    e028:	4640      	mov	r0, r8
    e02a:	f011 fa55 	bl	1f4d8 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
    e02e:	4639      	mov	r1, r7
    e030:	4620      	mov	r0, r4
    e032:	4a17      	ldr	r2, [pc, #92]	; (e090 <bt_smp_encrypt_change+0x230>)
    e034:	f7fe fd52 	bl	cadc <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e038:	210d      	movs	r1, #13
    e03a:	4628      	mov	r0, r5
    e03c:	f012 ffc5 	bl	20fca <atomic_test_bit>
    e040:	2800      	cmp	r0, #0
    e042:	d0a9      	beq.n	df98 <bt_smp_encrypt_change+0x138>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    e044:	4630      	mov	r0, r6
    e046:	2101      	movs	r1, #1
    e048:	f013 fab6 	bl	215b8 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
    e04c:	a901      	add	r1, sp, #4
    e04e:	2210      	movs	r2, #16
    e050:	f106 004a 	add.w	r0, r6, #74	; 0x4a
    e054:	f011 fa40 	bl	1f4d8 <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
    e058:	a905      	add	r1, sp, #20
    e05a:	2208      	movs	r2, #8
    e05c:	f106 0040 	add.w	r0, r6, #64	; 0x40
    e060:	f011 fa3a 	bl	1f4d8 <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
    e064:	2202      	movs	r2, #2
    e066:	a907      	add	r1, sp, #28
    e068:	f106 0048 	add.w	r0, r6, #72	; 0x48
    e06c:	f011 fa34 	bl	1f4d8 <memcpy>
    e070:	e792      	b.n	df98 <bt_smp_encrypt_change+0x138>
    e072:	bf00      	nop
    e074:	00025d11 	.word	0x00025d11
    e078:	000225d8 	.word	0x000225d8
    e07c:	000226e0 	.word	0x000226e0
    e080:	00025c72 	.word	0x00025c72
    e084:	00025c87 	.word	0x00025c87
    e088:	00025ca2 	.word	0x00025ca2
    e08c:	00025cc9 	.word	0x00025cc9
    e090:	0002156f 	.word	0x0002156f

0000e094 <smp_timeout>:
    e094:	4b0b      	ldr	r3, [pc, #44]	; (e0c4 <smp_timeout+0x30>)
    e096:	490c      	ldr	r1, [pc, #48]	; (e0c8 <smp_timeout+0x34>)
{
    e098:	b510      	push	{r4, lr}
    e09a:	1ac9      	subs	r1, r1, r3
    e09c:	08c9      	lsrs	r1, r1, #3
	BT_ERR("SMP Timeout");
    e09e:	0189      	lsls	r1, r1, #6
{
    e0a0:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
    e0a2:	f041 0101 	orr.w	r1, r1, #1
    e0a6:	4809      	ldr	r0, [pc, #36]	; (e0cc <smp_timeout+0x38>)
    e0a8:	f00f fc3c 	bl	1d924 <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    e0ac:	f5a4 70d8 	sub.w	r0, r4, #432	; 0x1b0
    e0b0:	2108      	movs	r1, #8
    e0b2:	f7ff fc7d 	bl	d9b0 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    e0b6:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
    e0ba:	2104      	movs	r1, #4
}
    e0bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    e0c0:	f012 bf6b 	b.w	20f9a <atomic_set_bit>
    e0c4:	000225d8 	.word	0x000225d8
    e0c8:	000226e0 	.word	0x000226e0
    e0cc:	00025cf0 	.word	0x00025cf0

0000e0d0 <bt_smp_update_keys>:
{
    e0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e0d2:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    e0d4:	f7fe fcaa 	bl	ca2c <smp_chan_get>
	if (!smp) {
    e0d8:	4605      	mov	r5, r0
    e0da:	2800      	cmp	r0, #0
    e0dc:	f000 8081 	beq.w	e1e2 <bt_smp_update_keys+0x112>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    e0e0:	f100 06c4 	add.w	r6, r0, #196	; 0xc4
    e0e4:	2103      	movs	r1, #3
    e0e6:	4630      	mov	r0, r6
    e0e8:	f012 ff6f 	bl	20fca <atomic_test_bit>
    e0ec:	2800      	cmp	r0, #0
    e0ee:	d078      	beq.n	e1e2 <bt_smp_update_keys+0x112>
	if (conn->le.keys) {
    e0f0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    e0f4:	b108      	cbz	r0, e0fa <bt_smp_update_keys+0x2a>
		bt_keys_clear(conn->le.keys);
    e0f6:	f013 fa63 	bl	215c0 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    e0fa:	f104 0788 	add.w	r7, r4, #136	; 0x88
    e0fe:	7a20      	ldrb	r0, [r4, #8]
    e100:	4639      	mov	r1, r7
    e102:	f000 f88b 	bl	e21c <bt_keys_get_addr>
    e106:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
    e10a:	b9b0      	cbnz	r0, e13a <bt_smp_update_keys+0x6a>
    e10c:	4a35      	ldr	r2, [pc, #212]	; (e1e4 <bt_smp_update_keys+0x114>)
    e10e:	4c36      	ldr	r4, [pc, #216]	; (e1e8 <bt_smp_update_keys+0x118>)
		BT_ERR("Unable to get keys for %s",
    e110:	4638      	mov	r0, r7
    e112:	1aa4      	subs	r4, r4, r2
    e114:	f7f9 fac6 	bl	76a4 <bt_addr_le_str_real>
    e118:	f7f7 faf4 	bl	5704 <log_strdup>
    e11c:	08e4      	lsrs	r4, r4, #3
    e11e:	01a4      	lsls	r4, r4, #6
    e120:	f044 0401 	orr.w	r4, r4, #1
    e124:	4601      	mov	r1, r0
    e126:	4622      	mov	r2, r4
    e128:	4830      	ldr	r0, [pc, #192]	; (e1ec <bt_smp_update_keys+0x11c>)
    e12a:	f00f fc0a 	bl	1d942 <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    e12e:	4628      	mov	r0, r5
    e130:	2108      	movs	r1, #8
}
    e132:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    e136:	f013 b972 	b.w	2141e <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    e13a:	210e      	movs	r1, #14
    e13c:	4630      	mov	r0, r6
    e13e:	f012 ff44 	bl	20fca <atomic_test_bit>
    e142:	b128      	cbz	r0, e150 <bt_smp_update_keys+0x80>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
    e144:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    e148:	7b53      	ldrb	r3, [r2, #13]
    e14a:	f043 0302 	orr.w	r3, r3, #2
    e14e:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
    e150:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
		conn->le.keys->flags |= BT_KEYS_DEBUG;
    e154:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
    e158:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
    e15a:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
    e15c:	d838      	bhi.n	e1d0 <bt_smp_update_keys+0x100>
    e15e:	b3d2      	cbz	r2, e1d6 <bt_smp_update_keys+0x106>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
    e160:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    e164:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
    e166:	f895 30d4 	ldrb.w	r3, [r5, #212]	; 0xd4
    e16a:	f895 20cd 	ldrb.w	r2, [r5, #205]	; 0xcd
    e16e:	4293      	cmp	r3, r2
    e170:	bf28      	it	cs
    e172:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    e174:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e176:	4630      	mov	r0, r6
    e178:	2105      	movs	r1, #5
    e17a:	f012 ff26 	bl	20fca <atomic_test_bit>
    e17e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
    e182:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e184:	b350      	cbz	r0, e1dc <bt_smp_update_keys+0x10c>
		conn->le.keys->flags |= BT_KEYS_SC;
    e186:	f042 0210 	orr.w	r2, r2, #16
    e18a:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e18c:	210d      	movs	r1, #13
    e18e:	4630      	mov	r0, r6
    e190:	f012 ff1b 	bl	20fca <atomic_test_bit>
    e194:	b328      	cbz	r0, e1e2 <bt_smp_update_keys+0x112>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    e196:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    e19a:	2120      	movs	r1, #32
    e19c:	f013 fa0c 	bl	215b8 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
    e1a0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    e1a4:	f205 1107 	addw	r1, r5, #263	; 0x107
    e1a8:	2210      	movs	r2, #16
    e1aa:	301a      	adds	r0, #26
    e1ac:	f011 f994 	bl	1f4d8 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
    e1b0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    e1b4:	2208      	movs	r2, #8
    e1b6:	2100      	movs	r1, #0
    e1b8:	3010      	adds	r0, #16
    e1ba:	f011 f9b8 	bl	1f52e <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
    e1be:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    e1c2:	2202      	movs	r2, #2
}
    e1c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
    e1c8:	2100      	movs	r1, #0
    e1ca:	3018      	adds	r0, #24
    e1cc:	f011 b9af 	b.w	1f52e <memset>
	switch (smp->method) {
    e1d0:	3a05      	subs	r2, #5
    e1d2:	2a01      	cmp	r2, #1
    e1d4:	d9c4      	bls.n	e160 <bt_smp_update_keys+0x90>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    e1d6:	f023 0301 	bic.w	r3, r3, #1
    e1da:	e7c3      	b.n	e164 <bt_smp_update_keys+0x94>
		conn->le.keys->flags &= ~BT_KEYS_SC;
    e1dc:	f022 0210 	bic.w	r2, r2, #16
    e1e0:	735a      	strb	r2, [r3, #13]
}
    e1e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e1e4:	000225d8 	.word	0x000225d8
    e1e8:	000226e0 	.word	0x000226e0
    e1ec:	00025a63 	.word	0x00025a63

0000e1f0 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
    e1f0:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    e1f2:	4b07      	ldr	r3, [pc, #28]	; (e210 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
    e1f4:	4807      	ldr	r0, [pc, #28]	; (e214 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    e1f6:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
    e1fa:	f003 0306 	and.w	r3, r3, #6
    e1fe:	1f9a      	subs	r2, r3, #6
    e200:	4253      	negs	r3, r2
    e202:	4153      	adcs	r3, r2
    e204:	4a04      	ldr	r2, [pc, #16]	; (e218 <bt_smp_init+0x28>)
    e206:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
    e208:	f7fb fdca 	bl	9da0 <bt_pub_key_gen>
	}

	return smp_self_test();
}
    e20c:	2000      	movs	r0, #0
    e20e:	bd08      	pop	{r3, pc}
    e210:	20000000 	.word	0x20000000
    e214:	200002b4 	.word	0x200002b4
    e218:	2000355e 	.word	0x2000355e

0000e21c <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
    e21c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    e21e:	4d11      	ldr	r5, [pc, #68]	; (e264 <bt_keys_get_addr+0x48>)
    e220:	782b      	ldrb	r3, [r5, #0]
    e222:	4283      	cmp	r3, r0
{
    e224:	4606      	mov	r6, r0
    e226:	460f      	mov	r7, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    e228:	d00b      	beq.n	e242 <bt_keys_get_addr+0x26>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    e22a:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
    e22c:	480e      	ldr	r0, [pc, #56]	; (e268 <bt_keys_get_addr+0x4c>)
    e22e:	9400      	str	r4, [sp, #0]
    e230:	2207      	movs	r2, #7
    e232:	4669      	mov	r1, sp
    e234:	f8cd 4003 	str.w	r4, [sp, #3]
    e238:	f011 f93d 	bl	1f4b6 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
    e23c:	b150      	cbz	r0, e254 <bt_keys_get_addr+0x38>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    e23e:	4620      	mov	r0, r4
    e240:	e006      	b.n	e250 <bt_keys_get_addr+0x34>
    e242:	2207      	movs	r2, #7
    e244:	1c68      	adds	r0, r5, #1
    e246:	f011 f936 	bl	1f4b6 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    e24a:	2800      	cmp	r0, #0
    e24c:	d1ed      	bne.n	e22a <bt_keys_get_addr+0xe>
		keys = &key_pool[i];
    e24e:	4628      	mov	r0, r5
}
    e250:	b003      	add	sp, #12
    e252:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(dst, src, sizeof(*dst));
    e254:	4804      	ldr	r0, [pc, #16]	; (e268 <bt_keys_get_addr+0x4c>)
		keys->id = id;
    e256:	702e      	strb	r6, [r5, #0]
    e258:	2207      	movs	r2, #7
    e25a:	4639      	mov	r1, r7
    e25c:	f011 f93c 	bl	1f4d8 <memcpy>
		return keys;
    e260:	4800      	ldr	r0, [pc, #0]	; (e264 <bt_keys_get_addr+0x48>)
}
    e262:	e7f5      	b.n	e250 <bt_keys_get_addr+0x34>
    e264:	200019e0 	.word	0x200019e0
    e268:	200019e1 	.word	0x200019e1

0000e26c <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
    e26c:	460b      	mov	r3, r1
    e26e:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
    e270:	4a05      	ldr	r2, [pc, #20]	; (e288 <bt_keys_foreach+0x1c>)
{
    e272:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
    e274:	89d4      	ldrh	r4, [r2, #14]
    e276:	4204      	tst	r4, r0
    e278:	d003      	beq.n	e282 <bt_keys_foreach+0x16>
			func(&key_pool[i], data);
		}
	}
}
    e27a:	f85d 4b04 	ldr.w	r4, [sp], #4
			func(&key_pool[i], data);
    e27e:	4610      	mov	r0, r2
    e280:	4718      	bx	r3
}
    e282:	f85d 4b04 	ldr.w	r4, [sp], #4
    e286:	4770      	bx	lr
    e288:	200019e0 	.word	0x200019e0

0000e28c <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, uint8_t id, const bt_addr_le_t *addr)
{
    e28c:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    e28e:	4c09      	ldr	r4, [pc, #36]	; (e2b4 <bt_keys_find+0x28>)
{
    e290:	460b      	mov	r3, r1
    e292:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    e294:	89e2      	ldrh	r2, [r4, #14]
    e296:	4202      	tst	r2, r0
    e298:	d007      	beq.n	e2aa <bt_keys_find+0x1e>
    e29a:	7822      	ldrb	r2, [r4, #0]
    e29c:	429a      	cmp	r2, r3
    e29e:	d104      	bne.n	e2aa <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
    e2a0:	2207      	movs	r2, #7
    e2a2:	1c60      	adds	r0, r4, #1
    e2a4:	f011 f907 	bl	1f4b6 <memcmp>
    e2a8:	b108      	cbz	r0, e2ae <bt_keys_find+0x22>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    e2aa:	2000      	movs	r0, #0
}
    e2ac:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    e2ae:	4620      	mov	r0, r4
    e2b0:	e7fc      	b.n	e2ac <bt_keys_find+0x20>
    e2b2:	bf00      	nop
    e2b4:	200019e0 	.word	0x200019e0

0000e2b8 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
    e2b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    e2ba:	780b      	ldrb	r3, [r1, #0]
    e2bc:	2b01      	cmp	r3, #1
    e2be:	4606      	mov	r6, r0
    e2c0:	460d      	mov	r5, r1
    e2c2:	d002      	beq.n	e2ca <bt_keys_find_irk+0x12>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
    e2c4:	2000      	movs	r0, #0
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
    e2c6:	b002      	add	sp, #8
    e2c8:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    e2ca:	798b      	ldrb	r3, [r1, #6]
    e2cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e2d0:	2b40      	cmp	r3, #64	; 0x40
    e2d2:	d1f7      	bne.n	e2c4 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    e2d4:	4c11      	ldr	r4, [pc, #68]	; (e31c <bt_keys_find_irk+0x64>)
    e2d6:	89e3      	ldrh	r3, [r4, #14]
    e2d8:	079b      	lsls	r3, r3, #30
    e2da:	d5f3      	bpl.n	e2c4 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
    e2dc:	7823      	ldrb	r3, [r4, #0]
    e2de:	42b3      	cmp	r3, r6
    e2e0:	d10b      	bne.n	e2fa <bt_keys_find_irk+0x42>
	return memcmp(a, b, sizeof(*a));
    e2e2:	2206      	movs	r2, #6
    e2e4:	f104 013a 	add.w	r1, r4, #58	; 0x3a
    e2e8:	1c68      	adds	r0, r5, #1
    e2ea:	f011 f8e4 	bl	1f4b6 <memcmp>
    e2ee:	b908      	cbnz	r0, e2f4 <bt_keys_find_irk+0x3c>
			return &key_pool[i];
    e2f0:	4620      	mov	r0, r4
    e2f2:	e7e8      	b.n	e2c6 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    e2f4:	89e3      	ldrh	r3, [r4, #14]
    e2f6:	079a      	lsls	r2, r3, #30
    e2f8:	d5e4      	bpl.n	e2c4 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
    e2fa:	7823      	ldrb	r3, [r4, #0]
    e2fc:	42b3      	cmp	r3, r6
    e2fe:	d1e1      	bne.n	e2c4 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    e300:	1c69      	adds	r1, r5, #1
    e302:	4807      	ldr	r0, [pc, #28]	; (e320 <bt_keys_find_irk+0x68>)
    e304:	9101      	str	r1, [sp, #4]
    e306:	f011 f975 	bl	1f5f4 <bt_rpa_irk_matches>
    e30a:	9901      	ldr	r1, [sp, #4]
    e30c:	2800      	cmp	r0, #0
    e30e:	d0d9      	beq.n	e2c4 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
    e310:	4804      	ldr	r0, [pc, #16]	; (e324 <bt_keys_find_irk+0x6c>)
    e312:	2206      	movs	r2, #6
    e314:	f011 f8e0 	bl	1f4d8 <memcpy>
			return &key_pool[i];
    e318:	4800      	ldr	r0, [pc, #0]	; (e31c <bt_keys_find_irk+0x64>)
}
    e31a:	e7d4      	b.n	e2c6 <bt_keys_find_irk+0xe>
    e31c:	200019e0 	.word	0x200019e0
    e320:	20001a0a 	.word	0x20001a0a
    e324:	20001a1a 	.word	0x20001a1a

0000e328 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
    e328:	b510      	push	{r4, lr}
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
    e32a:	4c06      	ldr	r4, [pc, #24]	; (e344 <bt_keys_find_addr+0x1c>)
    e32c:	7823      	ldrb	r3, [r4, #0]
    e32e:	4283      	cmp	r3, r0
    e330:	d104      	bne.n	e33c <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
    e332:	2207      	movs	r2, #7
    e334:	1c60      	adds	r0, r4, #1
    e336:	f011 f8be 	bl	1f4b6 <memcmp>
    e33a:	b108      	cbz	r0, e340 <bt_keys_find_addr+0x18>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    e33c:	2000      	movs	r0, #0
}
    e33e:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    e340:	4620      	mov	r0, r4
    e342:	e7fc      	b.n	e33e <bt_keys_find_addr+0x16>
    e344:	200019e0 	.word	0x200019e0

0000e348 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    e348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e34c:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    e34e:	1dc2      	adds	r2, r0, #7
    e350:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    e354:	1e75      	subs	r5, r6, #1
{
    e356:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    e358:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
    e35a:	6018      	str	r0, [r3, #0]
{
    e35c:	b082      	sub	sp, #8
    e35e:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    e360:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    e362:	2100      	movs	r1, #0
    e364:	2204      	movs	r2, #4
    e366:	fb07 0005 	mla	r0, r7, r5, r0
    e36a:	f011 f8e0 	bl	1f52e <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
    e36e:	b1bd      	cbz	r5, e3a0 <mem_init+0x58>
    e370:	3e02      	subs	r6, #2
    e372:	b2b6      	uxth	r6, r6
    e374:	fb06 7307 	mla	r3, r6, r7, r7
    e378:	fb06 f807 	mul.w	r8, r6, r7
    e37c:	441c      	add	r4, r3
    e37e:	eba8 0803 	sub.w	r8, r8, r3
    e382:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    e384:	2204      	movs	r2, #4
    e386:	eb04 0008 	add.w	r0, r4, r8
    e38a:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
    e38e:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    e390:	f011 f8a2 	bl	1f4d8 <memcpy>
	while (mem_count--) {
    e394:	42b5      	cmp	r5, r6
    e396:	eba4 0407 	sub.w	r4, r4, r7
    e39a:	f105 0501 	add.w	r5, r5, #1
    e39e:	d1f1      	bne.n	e384 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
    e3a0:	b002      	add	sp, #8
    e3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e3a6:	bf00      	nop

0000e3a8 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    e3a8:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
    e3aa:	6805      	ldr	r5, [r0, #0]
{
    e3ac:	b082      	sub	sp, #8
	if (*mem_head) {
    e3ae:	b195      	cbz	r5, e3d6 <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    e3b0:	1deb      	adds	r3, r5, #7
    e3b2:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    e3b6:	2204      	movs	r2, #4
    e3b8:	4604      	mov	r4, r0
    e3ba:	4629      	mov	r1, r5
    e3bc:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    e3c0:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    e3c2:	f011 f889 	bl	1f4d8 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    e3c6:	9b01      	ldr	r3, [sp, #4]
    e3c8:	b123      	cbz	r3, e3d4 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    e3ca:	1dda      	adds	r2, r3, #7
    e3cc:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
    e3d0:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    e3d2:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
    e3d4:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
    e3d6:	4628      	mov	r0, r5
    e3d8:	b002      	add	sp, #8
    e3da:	bd70      	pop	{r4, r5, r6, pc}

0000e3dc <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    e3dc:	680b      	ldr	r3, [r1, #0]
{
    e3de:	b570      	push	{r4, r5, r6, lr}
    e3e0:	460c      	mov	r4, r1
    e3e2:	4605      	mov	r5, r0
	if (*mem_head) {
    e3e4:	b183      	cbz	r3, e408 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    e3e6:	3307      	adds	r3, #7
    e3e8:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
    e3ec:	881e      	ldrh	r6, [r3, #0]
    e3ee:	3601      	adds	r6, #1
    e3f0:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
    e3f2:	2204      	movs	r2, #4
    e3f4:	4621      	mov	r1, r4
    e3f6:	4628      	mov	r0, r5
    e3f8:	f011 f86e 	bl	1f4d8 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
    e3fc:	1deb      	adds	r3, r5, #7
    e3fe:	f023 0303 	bic.w	r3, r3, #3
    e402:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    e404:	6025      	str	r5, [r4, #0]
}
    e406:	bd70      	pop	{r4, r5, r6, pc}
    e408:	2601      	movs	r6, #1
    e40a:	e7f2      	b.n	e3f2 <mem_release+0x16>

0000e40c <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    e40c:	fb02 0001 	mla	r0, r2, r1, r0
    e410:	4770      	bx	lr
    e412:	bf00      	nop

0000e414 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
    e414:	1a41      	subs	r1, r0, r1
    e416:	b289      	uxth	r1, r1
}
    e418:	fbb1 f0f2 	udiv	r0, r1, r2
    e41c:	4770      	bx	lr
    e41e:	bf00      	nop

0000e420 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
    e420:	1e53      	subs	r3, r2, #1
	src += len;
    e422:	4411      	add	r1, r2
	while (len--) {
    e424:	b29b      	uxth	r3, r3
    e426:	b142      	cbz	r2, e43a <mem_rcopy+0x1a>
    e428:	43db      	mvns	r3, r3
    e42a:	3801      	subs	r0, #1
    e42c:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
    e42e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    e432:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    e436:	4291      	cmp	r1, r2
    e438:	d1f9      	bne.n	e42e <mem_rcopy+0xe>
	}
}
    e43a:	4770      	bx	lr

0000e43c <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
    e43c:	4401      	add	r1, r0
    e43e:	e002      	b.n	e446 <mem_nz+0xa>
		if (*src++) {
    e440:	f810 3b01 	ldrb.w	r3, [r0], #1
    e444:	b91b      	cbnz	r3, e44e <mem_nz+0x12>
	while (len--) {
    e446:	4288      	cmp	r0, r1
    e448:	d1fa      	bne.n	e440 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    e44a:	2000      	movs	r0, #0
    e44c:	4770      	bx	lr
			return 1;
    e44e:	2001      	movs	r0, #1
}
    e450:	4770      	bx	lr
    e452:	bf00      	nop

0000e454 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    e454:	6010      	str	r0, [r2, #0]
    e456:	6008      	str	r0, [r1, #0]

	return link;
}
    e458:	4770      	bx	lr
    e45a:	bf00      	nop

0000e45c <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    e45c:	6803      	ldr	r3, [r0, #0]
    e45e:	680a      	ldr	r2, [r1, #0]
    e460:	4293      	cmp	r3, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    e462:	bf09      	itett	eq
    e464:	2200      	moveq	r2, #0
		return NULL;
    e466:	2300      	movne	r3, #0
	*head = *tail = NULL;
    e468:	600a      	streq	r2, [r1, #0]
    e46a:	6002      	streq	r2, [r0, #0]

	return old_head;
}
    e46c:	4618      	mov	r0, r3
    e46e:	4770      	bx	lr

0000e470 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    e470:	b410      	push	{r4}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    e472:	6814      	ldr	r4, [r2, #0]
    e474:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    e476:	6814      	ldr	r4, [r2, #0]
    e478:	6061      	str	r1, [r4, #4]
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */

	return link;
}
    e47a:	f85d 4b04 	ldr.w	r4, [sp], #4
	*tail = link; /* Commit: enqueue of memq node */
    e47e:	6010      	str	r0, [r2, #0]
}
    e480:	4770      	bx	lr
    e482:	bf00      	nop

0000e484 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    e484:	4288      	cmp	r0, r1
    e486:	d003      	beq.n	e490 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    e488:	b11a      	cbz	r2, e492 <memq_peek+0xe>
		*mem = head->mem;
    e48a:	6843      	ldr	r3, [r0, #4]
    e48c:	6013      	str	r3, [r2, #0]
    e48e:	4770      	bx	lr
		return NULL;
    e490:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    e492:	4770      	bx	lr

0000e494 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    e494:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    e496:	4283      	cmp	r3, r0
    e498:	d009      	beq.n	e4ae <memq_dequeue+0x1a>
	if (mem) {
    e49a:	b12a      	cbz	r2, e4a8 <memq_dequeue+0x14>
		*mem = head->mem;
    e49c:	6858      	ldr	r0, [r3, #4]
    e49e:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    e4a0:	681a      	ldr	r2, [r3, #0]
    e4a2:	600a      	str	r2, [r1, #0]

	return old_head;
}
    e4a4:	4618      	mov	r0, r3
    e4a6:	4770      	bx	lr
	if (old_head == NULL) {
    e4a8:	2b00      	cmp	r3, #0
    e4aa:	d1f9      	bne.n	e4a0 <memq_dequeue+0xc>
    e4ac:	e7fa      	b.n	e4a4 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    e4ae:	2300      	movs	r3, #0
    e4b0:	e7f8      	b.n	e4a4 <memq_dequeue+0x10>
    e4b2:	bf00      	nop

0000e4b4 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    e4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e4b8:	f8df 8034 	ldr.w	r8, [pc, #52]	; e4f0 <mayfly_init+0x3c>
    e4bc:	4e0b      	ldr	r6, [pc, #44]	; (e4ec <mayfly_init+0x38>)
    e4be:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    e4c0:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    e4c4:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    e4c6:	1d22      	adds	r2, r4, #4
    e4c8:	4621      	mov	r1, r4
    e4ca:	4628      	mov	r0, r5
		while (caller_id--) {
    e4cc:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
    e4ce:	f7ff ffc1 	bl	e454 <memq_init>
		while (caller_id--) {
    e4d2:	42b4      	cmp	r4, r6
    e4d4:	f1a5 0508 	sub.w	r5, r5, #8
    e4d8:	d1f5      	bne.n	e4c6 <mayfly_init+0x12>
	while (callee_id--) {
    e4da:	3f04      	subs	r7, #4
    e4dc:	1d3b      	adds	r3, r7, #4
    e4de:	f1a8 0820 	sub.w	r8, r8, #32
    e4e2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    e4e6:	d1eb      	bne.n	e4c0 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    e4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e4ec:	20001b44 	.word	0x20001b44
    e4f0:	20001ab4 	.word	0x20001ab4

0000e4f4 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    e4f4:	b410      	push	{r4}
    e4f6:	4603      	mov	r3, r0
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
    e4f8:	4c17      	ldr	r4, [pc, #92]	; (e558 <mayfly_enable+0x64>)
{
    e4fa:	468c      	mov	ip, r1
	if (enable) {
    e4fc:	b19a      	cbz	r2, e526 <mayfly_enable+0x32>
		if (mft[callee_id][caller_id].enable_req ==
    e4fe:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    e502:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
    e506:	0100      	lsls	r0, r0, #4
    e508:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    e50c:	4421      	add	r1, r4
    e50e:	7a48      	ldrb	r0, [r1, #9]
    e510:	7a0c      	ldrb	r4, [r1, #8]
    e512:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    e514:	bf04      	itt	eq
    e516:	3001      	addeq	r0, #1
    e518:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    e51a:	f85d 4b04 	ldr.w	r4, [sp], #4
		mayfly_enable_cb(caller_id, callee_id, enable);
    e51e:	4661      	mov	r1, ip
    e520:	4618      	mov	r0, r3
    e522:	f00b baa3 	b.w	19a6c <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    e526:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    e52a:	0112      	lsls	r2, r2, #4
    e52c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    e530:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    e534:	4423      	add	r3, r4
    e536:	7a9c      	ldrb	r4, [r3, #10]
    e538:	7ada      	ldrb	r2, [r3, #11]
    e53a:	42a2      	cmp	r2, r4
    e53c:	d002      	beq.n	e544 <mayfly_enable+0x50>
}
    e53e:	f85d 4b04 	ldr.w	r4, [sp], #4
    e542:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
    e544:	3201      	adds	r2, #1
    e546:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    e548:	4b04      	ldr	r3, [pc, #16]	; (e55c <mayfly_enable+0x68>)
    e54a:	2201      	movs	r2, #1
    e54c:	545a      	strb	r2, [r3, r1]
}
    e54e:	f85d 4b04 	ldr.w	r4, [sp], #4
			mayfly_pend(caller_id, callee_id);
    e552:	f00b bae1 	b.w	19b18 <mayfly_pend>
    e556:	bf00      	nop
    e558:	20001ac0 	.word	0x20001ac0
    e55c:	20001abc 	.word	0x20001abc

0000e560 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    e560:	b570      	push	{r4, r5, r6, lr}
    e562:	4606      	mov	r6, r0
    e564:	461c      	mov	r4, r3
    e566:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    e568:	b352      	cbz	r2, e5c0 <mayfly_enqueue+0x60>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    e56a:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
    e56c:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    e56e:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    e570:	f012 0203 	ands.w	r2, r2, #3
    e574:	d00b      	beq.n	e58e <mayfly_enqueue+0x2e>
		if (chain) {
			if (state != 1U) {
    e576:	2a01      	cmp	r2, #1
    e578:	d046      	beq.n	e608 <mayfly_enqueue+0xa8>
				/* mark as ready in queue */
				m->_req = ack + 1;
    e57a:	3301      	adds	r3, #1
    e57c:	b2db      	uxtb	r3, r3
    e57e:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
    e580:	e015      	b.n	e5ae <mayfly_enqueue+0x4e>
	ack = m->_ack;
    e582:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    e584:	7822      	ldrb	r2, [r4, #0]
    e586:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    e588:	f012 0203 	ands.w	r2, r2, #3
    e58c:	d1f3      	bne.n	e576 <mayfly_enqueue+0x16>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    e58e:	3301      	adds	r3, #1
    e590:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    e592:	2130      	movs	r1, #48	; 0x30
	m->_req = ack + 1;
    e594:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    e596:	2304      	movs	r3, #4
    e598:	fb11 3105 	smlabb	r1, r1, r5, r3
    e59c:	4a1b      	ldr	r2, [pc, #108]	; (e60c <mayfly_enqueue+0xac>)
    e59e:	6860      	ldr	r0, [r4, #4]
    e5a0:	230c      	movs	r3, #12
    e5a2:	fb13 1306 	smlabb	r3, r3, r6, r1
    e5a6:	441a      	add	r2, r3
    e5a8:	4621      	mov	r1, r4
    e5aa:	f7ff ff61 	bl	e470 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    e5ae:	4b18      	ldr	r3, [pc, #96]	; (e610 <mayfly_enqueue+0xb0>)
    e5b0:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    e5b2:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    e5b4:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    e5b6:	4629      	mov	r1, r5
    e5b8:	f00b faae 	bl	19b18 <mayfly_pend>

	return 0;
    e5bc:	2000      	movs	r0, #0
}
    e5be:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    e5c0:	f00b fa94 	bl	19aec <mayfly_prio_is_equal>
    e5c4:	2800      	cmp	r0, #0
    e5c6:	d0d0      	beq.n	e56a <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    e5c8:	4629      	mov	r1, r5
    e5ca:	4630      	mov	r0, r6
    e5cc:	f00b fa6e 	bl	19aac <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    e5d0:	2800      	cmp	r0, #0
    e5d2:	d0d6      	beq.n	e582 <mayfly_enqueue+0x22>
		(mft[callee_id][caller_id].disable_req !=
    e5d4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    e5d8:	0109      	lsls	r1, r1, #4
    e5da:	480c      	ldr	r0, [pc, #48]	; (e60c <mayfly_enqueue+0xac>)
	ack = m->_ack;
    e5dc:	7863      	ldrb	r3, [r4, #1]
		(mft[callee_id][caller_id].disable_req !=
    e5de:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    e5e2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    e5e6:	4402      	add	r2, r0
		!mayfly_is_enabled(caller_id, callee_id) ||
    e5e8:	7a91      	ldrb	r1, [r2, #10]
    e5ea:	7ad2      	ldrb	r2, [r2, #11]
    e5ec:	4291      	cmp	r1, r2
    e5ee:	d1c9      	bne.n	e584 <mayfly_enqueue+0x24>
	state = (m->_req - ack) & 0x03;
    e5f0:	7822      	ldrb	r2, [r4, #0]
    e5f2:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    e5f4:	0792      	lsls	r2, r2, #30
    e5f6:	d002      	beq.n	e5fe <mayfly_enqueue+0x9e>
		m->_req = ack + 2;
    e5f8:	3302      	adds	r3, #2
    e5fa:	b2db      	uxtb	r3, r3
    e5fc:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    e5fe:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    e602:	4798      	blx	r3
		return 0;
    e604:	2000      	movs	r0, #0
}
    e606:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
    e608:	4610      	mov	r0, r2
}
    e60a:	bd70      	pop	{r4, r5, r6, pc}
    e60c:	20001ac0 	.word	0x20001ac0
    e610:	20001abc 	.word	0x20001abc

0000e614 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    e614:	4a51      	ldr	r2, [pc, #324]	; (e75c <mayfly_run+0x148>)
    e616:	5c13      	ldrb	r3, [r2, r0]
    e618:	2b00      	cmp	r3, #0
    e61a:	f000 809d 	beq.w	e758 <mayfly_run+0x144>
{
    e61e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    e622:	4f4f      	ldr	r7, [pc, #316]	; (e760 <mayfly_run+0x14c>)
{
    e624:	b087      	sub	sp, #28
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    e626:	f04f 0b3c 	mov.w	fp, #60	; 0x3c
		return;
	}
	mfp[callee_id] = 0U;
    e62a:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    e62c:	fb0b 7b00 	mla	fp, fp, r0, r7
	mfp[callee_id] = 0U;
    e630:	5413      	strb	r3, [r2, r0]
	uint8_t enable = 0U;
    e632:	4619      	mov	r1, r3
    e634:	9303      	str	r3, [sp, #12]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    e636:	f10b 0204 	add.w	r2, fp, #4
    e63a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    e63e:	eb07 1703 	add.w	r7, r7, r3, lsl #4

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    e642:	f04f 0903 	mov.w	r9, #3
	uint8_t disable = 0U;
    e646:	9101      	str	r1, [sp, #4]
		memq_link_t *link;
		struct mayfly *m = 0;
    e648:	4693      	mov	fp, r2
    e64a:	9002      	str	r0, [sp, #8]
    e64c:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    e64e:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    e652:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
    e654:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    e656:	f7ff ff15 	bl	e484 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    e65a:	f107 0824 	add.w	r8, r7, #36	; 0x24
    e65e:	4606      	mov	r6, r0
    e660:	2800      	cmp	r0, #0
    e662:	d036      	beq.n	e6d2 <mayfly_run+0xbe>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    e664:	9c05      	ldr	r4, [sp, #20]
    e666:	7863      	ldrb	r3, [r4, #1]
    e668:	7825      	ldrb	r5, [r4, #0]
    e66a:	1aed      	subs	r5, r5, r3
    e66c:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
    e670:	2d01      	cmp	r5, #1
    e672:	d106      	bne.n	e682 <mayfly_run+0x6e>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
    e674:	3b01      	subs	r3, #1
    e676:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
    e678:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
    e67c:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
    e67e:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
    e680:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
    e682:	f894 c000 	ldrb.w	ip, [r4]
		memq_dequeue(mft[callee_id][caller_id].tail,
    e686:	f8d7 e028 	ldr.w	lr, [r7, #40]	; 0x28
	if (((req - m->_ack) & 0x03) != 1U) {
    e68a:	ebac 0303 	sub.w	r3, ip, r3
    e68e:	f003 0303 	and.w	r3, r3, #3
    e692:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
    e694:	f04f 0200 	mov.w	r2, #0
    e698:	4641      	mov	r1, r8
    e69a:	4670      	mov	r0, lr
	req = m->_req;
    e69c:	fa5f fa8c 	uxtb.w	sl, ip
	if (((req - m->_ack) & 0x03) != 1U) {
    e6a0:	d00d      	beq.n	e6be <mayfly_run+0xaa>
		memq_dequeue(mft[callee_id][caller_id].tail,
    e6a2:	f7ff fef7 	bl	e494 <memq_dequeue>
		ack = m->_ack;
    e6a6:	7861      	ldrb	r1, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    e6a8:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
    e6aa:	6066      	str	r6, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    e6ac:	1a5b      	subs	r3, r3, r1
    e6ae:	f003 0303 	and.w	r3, r3, #3
    e6b2:	2b01      	cmp	r3, #1
		m->_ack = req;
    e6b4:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    e6b8:	d047      	beq.n	e74a <mayfly_run+0x136>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    e6ba:	f8d7 e028 	ldr.w	lr, [r7, #40]	; 0x28
    e6be:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e6c0:	aa05      	add	r2, sp, #20
    e6c2:	4671      	mov	r1, lr
    e6c4:	f7ff fede 	bl	e484 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    e6c8:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    e6ca:	4606      	mov	r6, r0
			if (state == 1U) {
    e6cc:	d02b      	beq.n	e726 <mayfly_run+0x112>
		while (link) {
    e6ce:	2800      	cmp	r0, #0
    e6d0:	d1c8      	bne.n	e664 <mayfly_run+0x50>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
    e6d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    e6d6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
    e6da:	429a      	cmp	r2, r3
    e6dc:	d003      	beq.n	e6e6 <mayfly_run+0xd2>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
    e6de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
    e6e2:	2301      	movs	r3, #1
    e6e4:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    e6e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    e6ea:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
    e6ee:	429a      	cmp	r2, r3
    e6f0:	d003      	beq.n	e6fa <mayfly_run+0xe6>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
    e6f2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
    e6f6:	2301      	movs	r3, #1
    e6f8:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
    e6fa:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    e6fe:	fa5f f989 	uxtb.w	r9, r9
    e702:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    e706:	f1a7 070c 	sub.w	r7, r7, #12
    e70a:	d19f      	bne.n	e64c <mayfly_run+0x38>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    e70c:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
    e710:	b1c3      	cbz	r3, e744 <mayfly_run+0x130>
    e712:	9b03      	ldr	r3, [sp, #12]
    e714:	b9b3      	cbnz	r3, e744 <mayfly_run+0x130>
		mayfly_enable_cb(callee_id, callee_id, 0);
    e716:	461a      	mov	r2, r3
    e718:	4651      	mov	r1, sl
    e71a:	4650      	mov	r0, sl
	}
}
    e71c:	b007      	add	sp, #28
    e71e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
    e722:	f00b b9a3 	b.w	19a6c <mayfly_enable_cb>
				if (caller_id || link) {
    e726:	f1b9 0f00 	cmp.w	r9, #0
    e72a:	d101      	bne.n	e730 <mayfly_run+0x11c>
    e72c:	2800      	cmp	r0, #0
    e72e:	d0d0      	beq.n	e6d2 <mayfly_run+0xbe>
					mfp[callee_id] = 1U;
    e730:	f8dd a008 	ldr.w	sl, [sp, #8]
    e734:	4a09      	ldr	r2, [pc, #36]	; (e75c <mayfly_run+0x148>)
    e736:	2301      	movs	r3, #1
    e738:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
    e73c:	4651      	mov	r1, sl
    e73e:	4650      	mov	r0, sl
    e740:	f00b f9ea 	bl	19b18 <mayfly_pend>
}
    e744:	b007      	add	sp, #28
    e746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			m->_ack = ack;
    e74a:	7061      	strb	r1, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    e74c:	465a      	mov	r2, fp
    e74e:	4630      	mov	r0, r6
    e750:	4621      	mov	r1, r4
    e752:	f7ff fe8d 	bl	e470 <memq_enqueue>
    e756:	e7b0      	b.n	e6ba <mayfly_run+0xa6>
    e758:	4770      	bx	lr
    e75a:	bf00      	nop
    e75c:	20001abc 	.word	0x20001abc
    e760:	20001ac0 	.word	0x20001ac0

0000e764 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
    e764:	1e4b      	subs	r3, r1, #1
    e766:	b2db      	uxtb	r3, r3
    e768:	b189      	cbz	r1, e78e <util_ones_count_get+0x2a>
    e76a:	1e41      	subs	r1, r0, #1
    e76c:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
    e770:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
    e772:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
    e776:	b13b      	cbz	r3, e788 <util_ones_count_get+0x24>
			bite &= (bite - 1);
    e778:	b25b      	sxtb	r3, r3
    e77a:	1e5a      	subs	r2, r3, #1
    e77c:	4013      	ands	r3, r2
			one_count++;
    e77e:	3001      	adds	r0, #1
		while (bite) {
    e780:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
    e784:	b2c0      	uxtb	r0, r0
		while (bite) {
    e786:	d1f7      	bne.n	e778 <util_ones_count_get+0x14>
	while (octets_len--) {
    e788:	4561      	cmp	r1, ip
    e78a:	d1f2      	bne.n	e772 <util_ones_count_get+0xe>
    e78c:	4770      	bx	lr
	uint8_t one_count = 0U;
    e78e:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
    e790:	4770      	bx	lr
    e792:	bf00      	nop

0000e794 <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    e794:	eba2 0c01 	sub.w	ip, r2, r1
    e798:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
    e79c:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
    e79e:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    e7a0:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    e7a2:	d10b      	bne.n	e7bc <ticks_to_expire_prep+0x28>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    e7a4:	f02c 417f 	bic.w	r1, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    e7a8:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
    e7aa:	42a3      	cmp	r3, r4
    e7ac:	d916      	bls.n	e7dc <ticks_to_expire_prep+0x48>
		ticks_to_expire -= ticks_to_expire_minus;
    e7ae:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
    e7b0:	2100      	movs	r1, #0
}
    e7b2:	f85d 4b04 	ldr.w	r4, [sp], #4
	ticker->ticks_to_expire = ticks_to_expire;
    e7b6:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    e7b8:	6141      	str	r1, [r0, #20]
}
    e7ba:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    e7bc:	1a89      	subs	r1, r1, r2
    e7be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    e7c2:	428b      	cmp	r3, r1
    e7c4:	d807      	bhi.n	e7d6 <ticks_to_expire_prep+0x42>
			ticks_to_expire_minus +=
    e7c6:	4421      	add	r1, r4
    e7c8:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
    e7ca:	2300      	movs	r3, #0
}
    e7cc:	f85d 4b04 	ldr.w	r4, [sp], #4
	ticker->ticks_to_expire = ticks_to_expire;
    e7d0:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    e7d2:	6141      	str	r1, [r0, #20]
}
    e7d4:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
    e7d6:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
    e7d8:	42a3      	cmp	r3, r4
    e7da:	d8e8      	bhi.n	e7ae <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
    e7dc:	1ae1      	subs	r1, r4, r3
    e7de:	e7f4      	b.n	e7ca <ticks_to_expire_prep+0x36>

0000e7e0 <ticker_job_list_insert>:
{
    e7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e7e4:	b087      	sub	sp, #28
    e7e6:	4603      	mov	r3, r0
	count_user = instance->count_user;
    e7e8:	7a42      	ldrb	r2, [r0, #9]
{
    e7ea:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
    e7ec:	6800      	ldr	r0, [r0, #0]
    e7ee:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
    e7f0:	6858      	ldr	r0, [r3, #4]
    e7f2:	9005      	str	r0, [sp, #20]
	while (count_user--) {
    e7f4:	2a00      	cmp	r2, #0
    e7f6:	f000 80f2 	beq.w	e9de <ticker_job_list_insert+0x1fe>
    e7fa:	1e53      	subs	r3, r2, #1
    e7fc:	b2db      	uxtb	r3, r3
    e7fe:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    e802:	460f      	mov	r7, r1
    e804:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
    e806:	9b03      	ldr	r3, [sp, #12]
    e808:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
    e80a:	785e      	ldrb	r6, [r3, #1]
		user_ops = (void *)&user->user_op[0];
    e80c:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
    e80e:	2fff      	cmp	r7, #255	; 0xff
    e810:	d05e      	beq.n	e8d0 <ticker_job_list_insert+0xf0>
				ticker = &node[id_insert];
    e812:	eb07 0447 	add.w	r4, r7, r7, lsl #1
    e816:	9b02      	ldr	r3, [sp, #8]
    e818:	ea4f 1a04 	mov.w	sl, r4, lsl #4
    e81c:	46b8      	mov	r8, r7
				insert_head = ticker->next;
    e81e:	f813 700a 	ldrb.w	r7, [r3, sl]
				ticker = &node[id_insert];
    e822:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
    e826:	2500      	movs	r5, #0
	node = &instance->nodes[0];
    e828:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
    e82a:	f04f 09ff 	mov.w	r9, #255	; 0xff
    e82e:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
    e832:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
    e836:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
    e838:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    e83c:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
    e83e:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    e842:	d10f      	bne.n	e864 <ticker_job_list_insert+0x84>
    e844:	e0c6      	b.n	e9d4 <ticker_job_list_insert+0x1f4>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    e846:	1a09      	subs	r1, r1, r0
    e848:	d106      	bne.n	e858 <ticker_job_list_insert+0x78>
    e84a:	f8bb a01e 	ldrh.w	sl, [fp, #30]
    e84e:	f8bc c01e 	ldrh.w	ip, [ip, #30]
    e852:	45e2      	cmp	sl, ip
    e854:	f200 8086 	bhi.w	e964 <ticker_job_list_insert+0x184>
		current = ticker_current->next;
    e858:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    e85c:	2bff      	cmp	r3, #255	; 0xff
    e85e:	4691      	mov	r9, r2
    e860:	d072      	beq.n	e948 <ticker_job_list_insert+0x168>
    e862:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
    e864:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    e868:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
    e86c:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
    e86e:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    e872:	4288      	cmp	r0, r1
    e874:	d9e7      	bls.n	e846 <ticker_job_list_insert+0x66>
	if (previous == TICKER_NULL) {
    e876:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
    e87a:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
    e87e:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
    e882:	d166      	bne.n	e952 <ticker_job_list_insert+0x172>
		instance->ticker_id_head = id;
    e884:	9b01      	ldr	r3, [sp, #4]
    e886:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
    e88a:	2aff      	cmp	r2, #255	; 0xff
    e88c:	d008      	beq.n	e8a0 <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
    e88e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    e892:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
    e896:	f8de 3008 	ldr.w	r3, [lr, #8]
    e89a:	1a5b      	subs	r3, r3, r1
    e89c:	f8ce 3008 	str.w	r3, [lr, #8]
	ticker->req = ticker->ack + 1;
    e8a0:	78a3      	ldrb	r3, [r4, #2]
    e8a2:	3301      	adds	r3, #1
    e8a4:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    e8a6:	2d00      	cmp	r5, #0
    e8a8:	d0b1      	beq.n	e80e <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    e8aa:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
    e8ae:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    e8b0:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    e8b2:	2200      	movs	r2, #0
    e8b4:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    e8b6:	b113      	cbz	r3, e8be <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    e8b8:	6b29      	ldr	r1, [r5, #48]	; 0x30
    e8ba:	4610      	mov	r0, r2
    e8bc:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
    e8be:	6863      	ldr	r3, [r4, #4]
    e8c0:	2b00      	cmp	r3, #0
    e8c2:	d1a4      	bne.n	e80e <ticker_job_list_insert+0x2e>
					ticker->op_context =
    e8c4:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
    e8c8:	2fff      	cmp	r7, #255	; 0xff
					ticker->op_context =
    e8ca:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    e8ce:	d1a0      	bne.n	e812 <ticker_job_list_insert+0x32>
    e8d0:	9b03      	ldr	r3, [sp, #12]
    e8d2:	7898      	ldrb	r0, [r3, #2]
    e8d4:	42b0      	cmp	r0, r6
    e8d6:	d02f      	beq.n	e938 <ticker_job_list_insert+0x158>
    e8d8:	e9dd b903 	ldrd	fp, r9, [sp, #12]
				user_op = &user_ops[user_ops_first];
    e8dc:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    e8e0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				if (first == user->count_user_op) {
    e8e4:	f89b 1000 	ldrb.w	r1, [fp]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    e8e8:	f819 3022 	ldrb.w	r3, [r9, r2, lsl #2]
				first = user_ops_first + 1;
    e8ec:	3601      	adds	r6, #1
    e8ee:	b2f6      	uxtb	r6, r6
					first = 0U;
    e8f0:	42b1      	cmp	r1, r6
    e8f2:	bf08      	it	eq
    e8f4:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    e8f6:	2b04      	cmp	r3, #4
				user_op = &user_ops[user_ops_first];
    e8f8:	eb09 0582 	add.w	r5, r9, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    e8fc:	d11a      	bne.n	e934 <ticker_job_list_insert+0x154>
				id_insert = user_op->id;
    e8fe:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    e902:	9902      	ldr	r1, [sp, #8]
    e904:	eb08 0348 	add.w	r3, r8, r8, lsl #1
    e908:	eb01 1403 	add.w	r4, r1, r3, lsl #4
    e90c:	ea4f 1a03 	mov.w	sl, r3, lsl #4
				      ticker->ack) & 0xff) != 0U) {
    e910:	78a1      	ldrb	r1, [r4, #2]
				if (((ticker->req -
    e912:	7863      	ldrb	r3, [r4, #1]
    e914:	1a5b      	subs	r3, r3, r1
    e916:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    e91a:	d025      	beq.n	e968 <ticker_job_list_insert+0x188>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    e91c:	f04f 0300 	mov.w	r3, #0
    e920:	f809 3022 	strb.w	r3, [r9, r2, lsl #2]
	if (user_op->fp_op_func) {
    e924:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
    e926:	2001      	movs	r0, #1
	user_op->status = status;
    e928:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    e92a:	b10b      	cbz	r3, e930 <ticker_job_list_insert+0x150>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    e92c:	6b29      	ldr	r1, [r5, #48]	; 0x30
    e92e:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    e930:	f89b 0002 	ldrb.w	r0, [fp, #2]
    e934:	42b0      	cmp	r0, r6
    e936:	d1d1      	bne.n	e8dc <ticker_job_list_insert+0xfc>
	while (count_user--) {
    e938:	9a03      	ldr	r2, [sp, #12]
    e93a:	9905      	ldr	r1, [sp, #20]
    e93c:	4291      	cmp	r1, r2
    e93e:	f1a2 0308 	sub.w	r3, r2, #8
    e942:	d04c      	beq.n	e9de <ticker_job_list_insert+0x1fe>
    e944:	9303      	str	r3, [sp, #12]
    e946:	e75e      	b.n	e806 <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
    e948:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
    e94c:	f88b 3000 	strb.w	r3, [fp]
    e950:	461a      	mov	r2, r3
		node[previous].next = id;
    e952:	fa0f f989 	sxth.w	r9, r9
    e956:	eb09 0949 	add.w	r9, r9, r9, lsl #1
    e95a:	ea4f 1909 	mov.w	r9, r9, lsl #4
    e95e:	f80e 8009 	strb.w	r8, [lr, r9]
    e962:	e792      	b.n	e88a <ticker_job_list_insert+0xaa>
    e964:	4601      	mov	r1, r0
    e966:	e786      	b.n	e876 <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    e968:	8aaa      	ldrh	r2, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    e96a:	9901      	ldr	r1, [sp, #4]
	ticker->ext_data = start->ext_data;
    e96c:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
				ticker_job_op_start(ticker, user_op,
    e970:	6949      	ldr	r1, [r1, #20]
	ticker->remainder_periodic = start->remainder_periodic;
    e972:	e9d5 ec03 	ldrd	lr, ip, [r5, #12]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    e976:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    e97a:	4282      	cmp	r2, r0
	ticker->ext_data = start->ext_data;
    e97c:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    e980:	f8c4 e004 	str.w	lr, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    e984:	f8c4 c020 	str.w	ip, [r4, #32]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    e988:	d022      	beq.n	e9d0 <ticker_job_list_insert+0x1f0>
		ticker->must_expire =
    e98a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e98e:	1ad3      	subs	r3, r2, r3
    e990:	fab3 f383 	clz	r3, r3
    e994:	095b      	lsrs	r3, r3, #5
    e996:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
    e99a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    e99e:	429a      	cmp	r2, r3
    e9a0:	bf88      	it	hi
    e9a2:	2200      	movhi	r2, #0
	ticker->ticks_slot = start->ticks_slot;
    e9a4:	69ab      	ldr	r3, [r5, #24]
    e9a6:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    e9a8:	69eb      	ldr	r3, [r5, #28]
    e9aa:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    e9ac:	6a2b      	ldr	r3, [r5, #32]
    e9ae:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
    e9b0:	68ab      	ldr	r3, [r5, #8]
    e9b2:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
    e9b4:	2300      	movs	r3, #0
	ticker->lazy_periodic =
    e9b6:	83a2      	strh	r2, [r4, #28]
	ticker->ticks_to_expire_minus = 0U;
    e9b8:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    e9ba:	686a      	ldr	r2, [r5, #4]
    e9bc:	4620      	mov	r0, r4
    e9be:	f7ff fee9 	bl	e794 <ticks_to_expire_prep>
	ticker->remainder_current = 0U;
    e9c2:	2300      	movs	r3, #0
    e9c4:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    e9c6:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
    e9c8:	f04f 0301 	mov.w	r3, #1
    e9cc:	70e3      	strb	r3, [r4, #3]
}
    e9ce:	e72b      	b.n	e828 <ticker_job_list_insert+0x48>
	ticker->lazy_periodic =
    e9d0:	461a      	mov	r2, r3
    e9d2:	e7e7      	b.n	e9a4 <ticker_job_list_insert+0x1c4>
	ticker_new->next = current;
    e9d4:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
    e9d8:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
    e9dc:	e760      	b.n	e8a0 <ticker_job_list_insert+0xc0>
}
    e9de:	b007      	add	sp, #28
    e9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e9e4 <ticker_worker>:
{
    e9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    e9e8:	7f82      	ldrb	r2, [r0, #30]
{
    e9ea:	b08d      	sub	sp, #52	; 0x34
	instance->worker_trigger = 1U;
    e9ec:	2301      	movs	r3, #1
	if (instance->job_guard) {
    e9ee:	9204      	str	r2, [sp, #16]
	instance->worker_trigger = 1U;
    e9f0:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    e9f2:	2a00      	cmp	r2, #0
    e9f4:	d15b      	bne.n	eaae <ticker_worker+0xca>
	if (instance->ticker_id_head == TICKER_NULL) {
    e9f6:	7f43      	ldrb	r3, [r0, #29]
    e9f8:	2bff      	cmp	r3, #255	; 0xff
    e9fa:	4681      	mov	r9, r0
    e9fc:	d056      	beq.n	eaac <ticker_worker+0xc8>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    e9fe:	f00a fb7d 	bl	190fc <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ea02:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    ea06:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
    ea0a:	f899 b01d 	ldrb.w	fp, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ea0e:	1a80      	subs	r0, r0, r2
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    ea10:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ea12:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    ea16:	f000 8136 	beq.w	ec86 <ticker_worker+0x2a2>
		if (instance->ticks_slot_previous > ticks_elapsed) {
    ea1a:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
    ea1e:	42b3      	cmp	r3, r6
    ea20:	bf94      	ite	ls
    ea22:	2300      	movls	r3, #0
    ea24:	2301      	movhi	r3, #1
    ea26:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
    ea28:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
	node = &instance->nodes[0];
    ea2c:	f8d9 7000 	ldr.w	r7, [r9]
	ticks_expired = 0U;
    ea30:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
    ea34:	d046      	beq.n	eac4 <ticker_worker+0xe0>
			must_expire_skip = 1U;
    ea36:	f8cd 9008 	str.w	r9, [sp, #8]
		ticker = &node[ticker_id_head];
    ea3a:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    ea3e:	eb07 140b 	add.w	r4, r7, fp, lsl #4
    ea42:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    ea46:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    ea48:	42b3      	cmp	r3, r6
    ea4a:	d839      	bhi.n	eac0 <ticker_worker+0xdc>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    ea4c:	f894 a002 	ldrb.w	sl, [r4, #2]
		ticker_id_head = ticker->next;
    ea50:	f817 b00b 	ldrb.w	fp, [r7, fp]
		ticks_elapsed -= ticks_to_expire;
    ea54:	1af6      	subs	r6, r6, r3
		ticks_expired += ticks_to_expire;
    ea56:	4498      	add	r8, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    ea58:	7863      	ldrb	r3, [r4, #1]
    ea5a:	eba3 030a 	sub.w	r3, r3, sl
    ea5e:	b2db      	uxtb	r3, r3
    ea60:	2b01      	cmp	r3, #1
    ea62:	d12a      	bne.n	eaba <ticker_worker+0xd6>
		if (ticker->ticks_slot != 0U &&
    ea64:	69a0      	ldr	r0, [r4, #24]
    ea66:	2800      	cmp	r0, #0
    ea68:	d054      	beq.n	eb14 <ticker_worker+0x130>
    ea6a:	9b01      	ldr	r3, [sp, #4]
    ea6c:	2b00      	cmp	r3, #0
    ea6e:	d04c      	beq.n	eb0a <ticker_worker+0x126>
		int32_t lazy_current = ticker->lazy_current;
    ea70:	8be3      	ldrh	r3, [r4, #30]
    ea72:	9303      	str	r3, [sp, #12]
			struct ticker_ext *ext_data = ticker->ext_data;
    ea74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
    ea76:	b13b      	cbz	r3, ea88 <ticker_worker+0xa4>
    ea78:	681a      	ldr	r2, [r3, #0]
    ea7a:	b11a      	cbz	r2, ea84 <ticker_worker+0xa0>
			    ext_data->ticks_slot_window != 0U &&
    ea7c:	7a1a      	ldrb	r2, [r3, #8]
    ea7e:	2a00      	cmp	r2, #0
    ea80:	f000 80ed 	beq.w	ec5e <ticker_worker+0x27a>
				ext_data->reschedule_state =
    ea84:	2200      	movs	r2, #0
    ea86:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
    ea88:	9a03      	ldr	r2, [sp, #12]
			if ((ticker->must_expire == 0U) ||
    ea8a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
    ea8e:	3201      	adds	r2, #1
    ea90:	b292      	uxth	r2, r2
    ea92:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    ea94:	b171      	cbz	r1, eab4 <ticker_worker+0xd0>
    ea96:	8ba1      	ldrh	r1, [r4, #28]
    ea98:	4291      	cmp	r1, r2
    ea9a:	d20b      	bcs.n	eab4 <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
    ea9c:	2b00      	cmp	r3, #0
    ea9e:	f000 80f5 	beq.w	ec8c <ticker_worker+0x2a8>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    eaa2:	7a1a      	ldrb	r2, [r3, #8]
    eaa4:	2a01      	cmp	r2, #1
    eaa6:	d005      	beq.n	eab4 <ticker_worker+0xd0>
			must_expire_skip = 1U;
    eaa8:	2201      	movs	r2, #1
    eaaa:	e036      	b.n	eb1a <ticker_worker+0x136>
		instance->worker_trigger = 0U;
    eaac:	77c2      	strb	r2, [r0, #31]
}
    eaae:	b00d      	add	sp, #52	; 0x34
    eab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
    eab4:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    eab8:	70a3      	strb	r3, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
    eaba:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    eabe:	d1bc      	bne.n	ea3a <ticker_worker+0x56>
    eac0:	f8dd 9008 	ldr.w	r9, [sp, #8]
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    eac4:	f899 300b 	ldrb.w	r3, [r9, #11]
    eac8:	f899 200a 	ldrb.w	r2, [r9, #10]
    eacc:	429a      	cmp	r2, r3
    eace:	d10a      	bne.n	eae6 <ticker_worker+0x102>
	uint8_t idx = *ticks_elapsed_index + 1;
    ead0:	3201      	adds	r2, #1
    ead2:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    ead4:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    ead6:	bf1c      	itt	ne
    ead8:	4613      	movne	r3, r2
    eada:	9304      	strne	r3, [sp, #16]
	*ticks_elapsed_index = idx;
    eadc:	9a04      	ldr	r2, [sp, #16]
    eade:	f889 200b 	strb.w	r2, [r9, #11]
    eae2:	bf08      	it	eq
    eae4:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    eae6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    eaea:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    eaee:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
    eaf2:	2200      	movs	r2, #0
    eaf4:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    eaf8:	464b      	mov	r3, r9
    eafa:	2201      	movs	r2, #1
    eafc:	2104      	movs	r1, #4
    eafe:	2003      	movs	r0, #3
    eb00:	46a4      	mov	ip, r4
}
    eb02:	b00d      	add	sp, #52	; 0x34
    eb04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    eb08:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    eb0a:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
    eb0e:	9305      	str	r3, [sp, #20]
    eb10:	3380      	adds	r3, #128	; 0x80
    eb12:	d136      	bne.n	eb82 <ticker_worker+0x19e>
		if (ticker->ext_data) {
    eb14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    eb16:	b1c3      	cbz	r3, eb4a <ticker_worker+0x166>
    eb18:	2200      	movs	r2, #0
			ticker->ext_data->ticks_drift = 0U;
    eb1a:	2100      	movs	r1, #0
			ticker->ext_data->reschedule_state =
    eb1c:	7219      	strb	r1, [r3, #8]
		if (ticker->timeout_func) {
    eb1e:	68e5      	ldr	r5, [r4, #12]
			ticker->ext_data->ticks_drift = 0U;
    eb20:	6059      	str	r1, [r3, #4]
		ticker->ack--;
    eb22:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
    eb26:	70a0      	strb	r0, [r4, #2]
		if (ticker->timeout_func) {
    eb28:	2d00      	cmp	r5, #0
    eb2a:	d0c6      	beq.n	eaba <ticker_worker+0xd6>
					   ticks_expired -
    eb2c:	9b02      	ldr	r3, [sp, #8]
    eb2e:	6960      	ldr	r0, [r4, #20]
    eb30:	695b      	ldr	r3, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    eb32:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
    eb34:	eba8 0000 	sub.w	r0, r8, r0
    eb38:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
    eb3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    eb3e:	6923      	ldr	r3, [r4, #16]
    eb40:	b19a      	cbz	r2, eb6a <ticker_worker+0x186>
    eb42:	f64f 72ff 	movw	r2, #65535	; 0xffff
    eb46:	47a8      	blx	r5
			if (must_expire_skip == 0U) {
    eb48:	e7b7      	b.n	eaba <ticker_worker+0xd6>
		if (ticker->timeout_func) {
    eb4a:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    eb4c:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    eb50:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    eb52:	2d00      	cmp	r5, #0
    eb54:	d0b1      	beq.n	eaba <ticker_worker+0xd6>
					   ticks_expired -
    eb56:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    eb58:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
    eb5a:	eba8 0003 	sub.w	r0, r8, r3
    eb5e:	9b02      	ldr	r3, [sp, #8]
    eb60:	695b      	ldr	r3, [r3, #20]
    eb62:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    eb64:	6923      	ldr	r3, [r4, #16]
			ticks_at_expire = (instance->ticks_current +
    eb66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    eb6a:	8be2      	ldrh	r2, [r4, #30]
    eb6c:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
    eb6e:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
    eb70:	2b00      	cmp	r3, #0
    eb72:	9b01      	ldr	r3, [sp, #4]
    eb74:	bf18      	it	ne
    eb76:	2301      	movne	r3, #1
    eb78:	9301      	str	r3, [sp, #4]
				ticker->lazy_current = 0U;
    eb7a:	2300      	movs	r3, #0
    eb7c:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
    eb7e:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
    eb80:	e79b      	b.n	eaba <ticker_worker+0xd6>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    eb82:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    eb86:	d0c5      	beq.n	eb14 <ticker_worker+0x130>
		int32_t lazy_current = ticker->lazy_current;
    eb88:	8be3      	ldrh	r3, [r4, #30]
    eb8a:	9303      	str	r3, [sp, #12]
    eb8c:	4619      	mov	r1, r3
		if (lazy_current >= ticker->lazy_periodic) {
    eb8e:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t acc_ticks_to_expire = 0U;
    eb90:	f8cd a020 	str.w	sl, [sp, #32]
		if (lazy_current >= ticker->lazy_periodic) {
    eb94:	4299      	cmp	r1, r3
		int32_t lazy_current = ticker->lazy_current;
    eb96:	460a      	mov	r2, r1
			lazy_current -= ticker->lazy_periodic;
    eb98:	bf28      	it	cs
    eb9a:	1aca      	subcs	r2, r1, r3
		uint32_t current_age = ticker->ticks_periodic +
    eb9c:	6861      	ldr	r1, [r4, #4]
		uint32_t acc_ticks_to_expire = 0U;
    eb9e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
		uint32_t current_age = ticker->ticks_periodic +
    eba2:	fb02 1501 	mla	r5, r2, r1, r1
    eba6:	9506      	str	r5, [sp, #24]
				(lazy_current - ticker->priority);
    eba8:	9d05      	ldr	r5, [sp, #20]
		uint32_t acc_ticks_to_expire = 0U;
    ebaa:	9100      	str	r1, [sp, #0]
				(lazy_current - ticker->priority);
    ebac:	1b52      	subs	r2, r2, r5
		uint32_t acc_ticks_to_expire = 0U;
    ebae:	e9cd 6809 	strd	r6, r8, [sp, #36]	; 0x24
		uint32_t current_age = ticker->ticks_periodic +
    ebb2:	465b      	mov	r3, fp
				(lazy_current - ticker->priority);
    ebb4:	9207      	str	r2, [sp, #28]
		uint32_t acc_ticks_to_expire = 0U;
    ebb6:	2500      	movs	r5, #0
    ebb8:	46a1      	mov	r9, r4
    ebba:	e02b      	b.n	ec14 <ticker_worker+0x230>
				(ticker->ticks_periodic == 0U) ||
    ebbc:	9c00      	ldr	r4, [sp, #0]
					  0U :
    ebbe:	ebaa 0808 	sub.w	r8, sl, r8
				(ticker->ticks_periodic == 0U) ||
    ebc2:	2c00      	cmp	r4, #0
    ebc4:	d046      	beq.n	ec54 <ticker_worker+0x270>
    ebc6:	9c06      	ldr	r4, [sp, #24]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    ebc8:	fb0a 880c 	mla	r8, sl, ip, r8
				(ticker->ticks_periodic == 0U) ||
    ebcc:	4544      	cmp	r4, r8
    ebce:	bf8c      	ite	hi
    ebd0:	f04f 0801 	movhi.w	r8, #1
    ebd4:	f04f 0800 	movls.w	r8, #0
					(ticker->ticks_periodic != 0U) &&
    ebd8:	bf34      	ite	cc
    ebda:	f04f 0a01 	movcc.w	sl, #1
    ebde:	f04f 0a00 	movcs.w	sl, #0
			if (!lazy_next_periodic_skip &&
    ebe2:	42b1      	cmp	r1, r6
			uint8_t next_force = (ticker_next->force > ticker->force);
    ebe4:	f892 b003 	ldrb.w	fp, [r2, #3]
    ebe8:	f899 2003 	ldrb.w	r2, [r9, #3]
			if (!lazy_next_periodic_skip &&
    ebec:	d30f      	bcc.n	ec0e <ticker_worker+0x22a>
    ebee:	4593      	cmp	fp, r2
    ebf0:	d841      	bhi.n	ec76 <ticker_worker+0x292>
			    (next_force ||
    ebf2:	f11e 0f80 	cmn.w	lr, #128	; 0x80
    ebf6:	d03e      	beq.n	ec76 <ticker_worker+0x292>
			     next_is_critical ||
    ebf8:	9a07      	ldr	r2, [sp, #28]
				(lazy_next - ticker_next->priority) >
    ebfa:	ebac 0c0e 	sub.w	ip, ip, lr
			     next_is_critical ||
    ebfe:	4594      	cmp	ip, r2
    ec00:	dd02      	ble.n	ec08 <ticker_worker+0x224>
			     (next_has_priority && !current_is_older) ||
    ec02:	f1b8 0f00 	cmp.w	r8, #0
    ec06:	d036      	beq.n	ec76 <ticker_worker+0x292>
    ec08:	9a05      	ldr	r2, [sp, #20]
    ec0a:	4572      	cmp	r2, lr
    ec0c:	d030      	beq.n	ec70 <ticker_worker+0x28c>
			id_head = ticker_next->next;
    ec0e:	5cfb      	ldrb	r3, [r7, r3]
		while (id_head != TICKER_NULL) {
    ec10:	2bff      	cmp	r3, #255	; 0xff
    ec12:	d04d      	beq.n	ecb0 <ticker_worker+0x2cc>
			struct ticker_node *ticker_next = &nodes[id_head];
    ec14:	b21b      	sxth	r3, r3
    ec16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    ec1a:	eb07 1203 	add.w	r2, r7, r3, lsl #4
    ec1e:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    ec20:	f8d2 8008 	ldr.w	r8, [r2, #8]
    ec24:	4445      	add	r5, r8
			if (acc_ticks_to_expire > ticker->ticks_slot) {
    ec26:	42a8      	cmp	r0, r5
    ec28:	d342      	bcc.n	ecb0 <ticker_worker+0x2cc>
			if (ticker_next->ticks_slot == 0U) {
    ec2a:	6991      	ldr	r1, [r2, #24]
    ec2c:	2900      	cmp	r1, #0
    ec2e:	d0ee      	beq.n	ec0e <ticker_worker+0x22a>
			int32_t lazy_next = ticker_next->lazy_current;
    ec30:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
    ec32:	8b96      	ldrh	r6, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    ec34:	f8d2 a004 	ldr.w	sl, [r2, #4]
				ticker_next->priority;
    ec38:	f992 e02d 	ldrsb.w	lr, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
    ec3c:	42b1      	cmp	r1, r6
			int32_t lazy_next = ticker_next->lazy_current;
    ec3e:	468c      	mov	ip, r1
				lazy_next -= ticker_next->lazy_periodic;
    ec40:	bf28      	it	cs
    ec42:	eba1 0c06 	subcs.w	ip, r1, r6
					  0U :
    ec46:	f1ba 0f00 	cmp.w	sl, #0
    ec4a:	d1b7      	bne.n	ebbc <ticker_worker+0x1d8>
				(ticker->ticks_periodic == 0U) ||
    ec4c:	9c00      	ldr	r4, [sp, #0]
					  0U :
    ec4e:	46d0      	mov	r8, sl
				(ticker->ticks_periodic == 0U) ||
    ec50:	2c00      	cmp	r4, #0
    ec52:	d1b8      	bne.n	ebc6 <ticker_worker+0x1e2>
					(ticker->ticks_periodic != 0U) &&
    ec54:	f8dd a000 	ldr.w	sl, [sp]
				(ticker->ticks_periodic == 0U) ||
    ec58:	f04f 0801 	mov.w	r8, #1
    ec5c:	e7c1      	b.n	ebe2 <ticker_worker+0x1fe>
			    TICKER_RESCHEDULE_STATE_NONE &&
    ec5e:	8ba2      	ldrh	r2, [r4, #28]
    ec60:	9903      	ldr	r1, [sp, #12]
    ec62:	428a      	cmp	r2, r1
    ec64:	f63f af0e 	bhi.w	ea84 <ticker_worker+0xa0>
				ext_data->reschedule_state =
    ec68:	f04f 0201 	mov.w	r2, #1
    ec6c:	721a      	strb	r2, [r3, #8]
    ec6e:	e70b      	b.n	ea88 <ticker_worker+0xa4>
			     (equal_priority && next_is_older))) {
    ec70:	f1ba 0f00 	cmp.w	sl, #0
    ec74:	d0cb      	beq.n	ec0e <ticker_worker+0x22a>
    ec76:	e9dd 6809 	ldrd	r6, r8, [sp, #36]	; 0x24
    ec7a:	f8dd a020 	ldr.w	sl, [sp, #32]
    ec7e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    ec82:	464c      	mov	r4, r9
    ec84:	e6f6      	b.n	ea74 <ticker_worker+0x90>
	uint8_t slot_reserved = 0;
    ec86:	9b04      	ldr	r3, [sp, #16]
    ec88:	9301      	str	r3, [sp, #4]
    ec8a:	e6cd      	b.n	ea28 <ticker_worker+0x44>
		if (ticker->timeout_func) {
    ec8c:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    ec8e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    ec92:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    ec94:	2d00      	cmp	r5, #0
    ec96:	f43f af10 	beq.w	eaba <ticker_worker+0xd6>
					   ticks_expired -
    ec9a:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    ec9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
    ec9e:	eba8 0003 	sub.w	r0, r8, r3
    eca2:	9b02      	ldr	r3, [sp, #8]
    eca4:	695b      	ldr	r3, [r3, #20]
    eca6:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
    eca8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    ecac:	6923      	ldr	r3, [r4, #16]
    ecae:	e748      	b.n	eb42 <ticker_worker+0x15e>
    ecb0:	e9dd 6809 	ldrd	r6, r8, [sp, #36]	; 0x24
    ecb4:	f8dd a020 	ldr.w	sl, [sp, #32]
    ecb8:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    ecbc:	464c      	mov	r4, r9
    ecbe:	e729      	b.n	eb14 <ticker_worker+0x130>

0000ecc0 <ticker_job>:
{
    ecc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ecc4:	b08f      	sub	sp, #60	; 0x3c
	if (instance->worker_trigger) {
    ecc6:	7fc3      	ldrb	r3, [r0, #31]
{
    ecc8:	9001      	str	r0, [sp, #4]
	if (instance->worker_trigger) {
    ecca:	2b00      	cmp	r3, #0
    eccc:	f040 80b1 	bne.w	ee32 <ticker_job+0x172>
	if (instance->job_guard) {
    ecd0:	7f82      	ldrb	r2, [r0, #30]
    ecd2:	2a00      	cmp	r2, #0
    ecd4:	f040 80b0 	bne.w	ee38 <ticker_job+0x178>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    ecd8:	9c01      	ldr	r4, [sp, #4]
    ecda:	7aa3      	ldrb	r3, [r4, #10]
    ecdc:	7ae1      	ldrb	r1, [r4, #11]
	instance->job_guard = 1U;
    ecde:	2001      	movs	r0, #1
    ece0:	77a0      	strb	r0, [r4, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    ece2:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
    ece4:	6960      	ldr	r0, [r4, #20]
    ece6:	9007      	str	r0, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    ece8:	f000 847e 	beq.w	f5e8 <ticker_job+0x928>
	uint8_t idx = *ticks_elapsed_index + 1;
    ecec:	3301      	adds	r3, #1
    ecee:	b2db      	uxtb	r3, r3
		ticks_elapsed =
    ecf0:	9901      	ldr	r1, [sp, #4]
	if (idx == DOUBLE_BUFFER_SIZE) {
    ecf2:	2b02      	cmp	r3, #2
		idx = 0U;
    ecf4:	bf08      	it	eq
    ecf6:	4613      	moveq	r3, r2
		ticks_elapsed =
    ecf8:	eb01 0283 	add.w	r2, r1, r3, lsl #2
	*ticks_elapsed_index = idx;
    ecfc:	728b      	strb	r3, [r1, #10]
	ticker_id_old_head = instance->ticker_id_head;
    ecfe:	7f4b      	ldrb	r3, [r1, #29]
		ticks_elapsed =
    ed00:	68d0      	ldr	r0, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
    ed02:	930a      	str	r3, [sp, #40]	; 0x28
		instance->ticks_current += ticks_elapsed;
    ed04:	9b07      	ldr	r3, [sp, #28]
	node = &instance->nodes[0];
    ed06:	680a      	ldr	r2, [r1, #0]
		ticks_elapsed =
    ed08:	9004      	str	r0, [sp, #16]
		instance->ticks_current += ticks_elapsed;
    ed0a:	4403      	add	r3, r0
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    ed0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ed10:	614b      	str	r3, [r1, #20]
	node = &instance->nodes[0];
    ed12:	460b      	mov	r3, r1
	count_user = instance->count_user;
    ed14:	7a49      	ldrb	r1, [r1, #9]
	users = &instance->users[0];
    ed16:	685b      	ldr	r3, [r3, #4]
    ed18:	9306      	str	r3, [sp, #24]
	while (count_user--) {
    ed1a:	1e4b      	subs	r3, r1, #1
	node = &instance->nodes[0];
    ed1c:	9202      	str	r2, [sp, #8]
	count_user = instance->count_user;
    ed1e:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
    ed20:	b2db      	uxtb	r3, r3
    ed22:	2900      	cmp	r1, #0
    ed24:	f000 8224 	beq.w	f170 <ticker_job+0x4b0>
		flag_elapsed = 1U;
    ed28:	2201      	movs	r2, #1
    ed2a:	920d      	str	r2, [sp, #52]	; 0x34
    ed2c:	9a06      	ldr	r2, [sp, #24]
    ed2e:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
	pending = 0U;
    ed32:	2300      	movs	r3, #0
    ed34:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    ed36:	23ff      	movs	r3, #255	; 0xff
    ed38:	9303      	str	r3, [sp, #12]
    ed3a:	46cb      	mov	fp, r9
		user_ops = &user->user_op[0];
    ed3c:	f8db 3004 	ldr.w	r3, [fp, #4]
		while (user->middle != user->last) {
    ed40:	f89b 8003 	ldrb.w	r8, [fp, #3]
    ed44:	f89b 7002 	ldrb.w	r7, [fp, #2]
		user_ops = &user->user_op[0];
    ed48:	9300      	str	r3, [sp, #0]
		while (user->middle != user->last) {
    ed4a:	4547      	cmp	r7, r8
    ed4c:	d069      	beq.n	ee22 <ticker_job+0x162>
			if (middle == user->count_user_op) {
    ed4e:	f89b 2000 	ldrb.w	r2, [fp]
			middle = user->middle + 1;
    ed52:	1c7b      	adds	r3, r7, #1
			user_op = &user_ops[user->middle];
    ed54:	fa0f f987 	sxth.w	r9, r7
			middle = user->middle + 1;
    ed58:	b2db      	uxtb	r3, r3
				middle = 0U;
    ed5a:	429a      	cmp	r2, r3
    ed5c:	bf08      	it	eq
    ed5e:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
    ed60:	eb09 0249 	add.w	r2, r9, r9, lsl #1
    ed64:	eb09 0982 	add.w	r9, r9, r2, lsl #2
    ed68:	9a00      	ldr	r2, [sp, #0]
			user->middle = middle;
    ed6a:	f88b 3002 	strb.w	r3, [fp, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    ed6e:	f812 1029 	ldrb.w	r1, [r2, r9, lsl #2]
    ed72:	2904      	cmp	r1, #4
			user_op = &user_ops[user->middle];
    ed74:	eb02 0589 	add.w	r5, r2, r9, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    ed78:	d968      	bls.n	ee4c <ticker_job+0x18c>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    ed7a:	2907      	cmp	r1, #7
    ed7c:	d878      	bhi.n	ee70 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    ed7e:	786a      	ldrb	r2, [r5, #1]
    ed80:	9802      	ldr	r0, [sp, #8]
    ed82:	eb02 0442 	add.w	r4, r2, r2, lsl #1
    ed86:	eb00 1404 	add.w	r4, r0, r4, lsl #4
			state = (ticker->req - ticker->ack) & 0xff;
    ed8a:	f894 c002 	ldrb.w	ip, [r4, #2]
    ed8e:	7866      	ldrb	r6, [r4, #1]
    ed90:	eba6 060c 	sub.w	r6, r6, ip
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    ed94:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    ed98:	d06a      	beq.n	ee70 <ticker_job+0x1b0>
			    (state == 0U) ||
    ed9a:	2905      	cmp	r1, #5
    ed9c:	d058      	beq.n	ee50 <ticker_job+0x190>
			if (state == 1U) {
    ed9e:	2e01      	cmp	r6, #1
    eda0:	f040 8165 	bne.w	f06e <ticker_job+0x3ae>
	previous = instance->ticker_id_head;
    eda4:	9b01      	ldr	r3, [sp, #4]
    eda6:	f893 a01d 	ldrb.w	sl, [r3, #29]
	node = &instance->nodes[0];
    edaa:	681f      	ldr	r7, [r3, #0]
	while (current != TICKER_NULL) {
    edac:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    edb0:	d01c      	beq.n	edec <ticker_job+0x12c>
		ticker_current = &node[current];
    edb2:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
    edb6:	011e      	lsls	r6, r3, #4
		if (current == id) {
    edb8:	4552      	cmp	r2, sl
		current = ticker_current->next;
    edba:	5dbe      	ldrb	r6, [r7, r6]
		ticker_current = &node[current];
    edbc:	eb07 1003 	add.w	r0, r7, r3, lsl #4
		if (current == id) {
    edc0:	f000 812f 	beq.w	f022 <ticker_job+0x362>
	total = 0U;
    edc4:	f04f 0e00 	mov.w	lr, #0
    edc8:	4603      	mov	r3, r0
    edca:	e005      	b.n	edd8 <ticker_job+0x118>
		if (current == id) {
    edcc:	42b2      	cmp	r2, r6
	node[previous].next = ticker_current->next;
    edce:	f817 0008 	ldrb.w	r0, [r7, r8]
		if (current == id) {
    edd2:	d05d      	beq.n	ee90 <ticker_job+0x1d0>
    edd4:	46b2      	mov	sl, r6
	node[previous].next = ticker_current->next;
    edd6:	4606      	mov	r6, r0
		total += ticker_current->ticks_to_expire;
    edd8:	689b      	ldr	r3, [r3, #8]
		ticker_current = &node[current];
    edda:	eb06 0046 	add.w	r0, r6, r6, lsl #1
	while (current != TICKER_NULL) {
    edde:	2eff      	cmp	r6, #255	; 0xff
		total += ticker_current->ticks_to_expire;
    ede0:	449e      	add	lr, r3
		ticker_current = &node[current];
    ede2:	ea4f 1800 	mov.w	r8, r0, lsl #4
    ede6:	eb07 1300 	add.w	r3, r7, r0, lsl #4
	while (current != TICKER_NULL) {
    edea:	d1ef      	bne.n	edcc <ticker_job+0x10c>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    edec:	2600      	movs	r6, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    edee:	2905      	cmp	r1, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    edf0:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    edf2:	f000 8129 	beq.w	f048 <ticker_job+0x388>
		if (instance->ticker_id_slot_previous == user_op->id) {
    edf6:	9b01      	ldr	r3, [sp, #4]
		ticker->req = ticker->ack;
    edf8:	f884 c001 	strb.w	ip, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    edfc:	7f1b      	ldrb	r3, [r3, #28]
    edfe:	4293      	cmp	r3, r2
    ee00:	f000 80fa 	beq.w	eff8 <ticker_job+0x338>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    ee04:	9b00      	ldr	r3, [sp, #0]
    ee06:	2000      	movs	r0, #0
    ee08:	f803 0029 	strb.w	r0, [r3, r9, lsl #2]
	if (user_op->fp_op_func) {
    ee0c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
    ee0e:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    ee10:	b10b      	cbz	r3, ee16 <ticker_job+0x156>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    ee12:	6b29      	ldr	r1, [r5, #48]	; 0x30
    ee14:	4798      	blx	r3
		while (user->middle != user->last) {
    ee16:	f89b 8003 	ldrb.w	r8, [fp, #3]
    ee1a:	f89b 7002 	ldrb.w	r7, [fp, #2]
    ee1e:	4547      	cmp	r7, r8
    ee20:	d195      	bne.n	ed4e <ticker_job+0x8e>
	while (count_user--) {
    ee22:	9a06      	ldr	r2, [sp, #24]
    ee24:	455a      	cmp	r2, fp
    ee26:	f1ab 0308 	sub.w	r3, fp, #8
    ee2a:	f000 8130 	beq.w	f08e <ticker_job+0x3ce>
    ee2e:	469b      	mov	fp, r3
    ee30:	e784      	b.n	ed3c <ticker_job+0x7c>
}
    ee32:	b00f      	add	sp, #60	; 0x3c
    ee34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
    ee38:	6a44      	ldr	r4, [r0, #36]	; 0x24
    ee3a:	2104      	movs	r1, #4
    ee3c:	4603      	mov	r3, r0
    ee3e:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    ee40:	2004      	movs	r0, #4
    ee42:	46a4      	mov	ip, r4
}
    ee44:	b00f      	add	sp, #60	; 0x3c
    ee46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    ee4a:	4760      	bx	ip
    ee4c:	461f      	mov	r7, r3
    ee4e:	e77c      	b.n	ed4a <ticker_job+0x8a>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    ee50:	6868      	ldr	r0, [r5, #4]
    ee52:	2800      	cmp	r0, #0
    ee54:	d1a3      	bne.n	ed9e <ticker_job+0xde>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    ee56:	68a8      	ldr	r0, [r5, #8]
    ee58:	2800      	cmp	r0, #0
    ee5a:	d1a0      	bne.n	ed9e <ticker_job+0xde>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    ee5c:	68e8      	ldr	r0, [r5, #12]
    ee5e:	2800      	cmp	r0, #0
    ee60:	d19d      	bne.n	ed9e <ticker_job+0xde>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    ee62:	6928      	ldr	r0, [r5, #16]
    ee64:	2800      	cmp	r0, #0
    ee66:	d19a      	bne.n	ed9e <ticker_job+0xde>
			     (user_op->params.update.lazy == 0U) &&
    ee68:	6968      	ldr	r0, [r5, #20]
    ee6a:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
    ee6e:	d196      	bne.n	ed9e <ticker_job+0xde>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    ee70:	9900      	ldr	r1, [sp, #0]
    ee72:	2200      	movs	r2, #0
    ee74:	f801 2029 	strb.w	r2, [r1, r9, lsl #2]
	if (user_op->fp_op_func) {
    ee78:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	user_op->status = status;
    ee7a:	2001      	movs	r0, #1
    ee7c:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    ee7e:	2a00      	cmp	r2, #0
    ee80:	d0e4      	beq.n	ee4c <ticker_job+0x18c>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    ee82:	6b29      	ldr	r1, [r5, #48]	; 0x30
    ee84:	4790      	blx	r2
		while (user->middle != user->last) {
    ee86:	f89b 8003 	ldrb.w	r8, [fp, #3]
    ee8a:	f89b 7002 	ldrb.w	r7, [fp, #2]
    ee8e:	e75c      	b.n	ed4a <ticker_job+0x8a>
	node[previous].next = ticker_current->next;
    ee90:	fa0f f88a 	sxth.w	r8, sl
    ee94:	4606      	mov	r6, r0
    ee96:	eb08 0848 	add.w	r8, r8, r8, lsl #1
	if (previous == current) {
    ee9a:	4592      	cmp	sl, r2
	node[previous].next = ticker_current->next;
    ee9c:	4618      	mov	r0, r3
    ee9e:	eb07 1808 	add.w	r8, r7, r8, lsl #4
    eea2:	4633      	mov	r3, r6
	if (previous == current) {
    eea4:	f000 80c1 	beq.w	f02a <ticker_job+0x36a>
	timeout = ticker_current->ticks_to_expire;
    eea8:	6886      	ldr	r6, [r0, #8]
	node[previous].next = ticker_current->next;
    eeaa:	f888 3000 	strb.w	r3, [r8]
	if (ticker_current->next != TICKER_NULL) {
    eeae:	7803      	ldrb	r3, [r0, #0]
    eeb0:	2bff      	cmp	r3, #255	; 0xff
    eeb2:	d006      	beq.n	eec2 <ticker_job+0x202>
		node[ticker_current->next].ticks_to_expire += timeout;
    eeb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    eeb8:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    eebc:	68bb      	ldr	r3, [r7, #8]
    eebe:	4433      	add	r3, r6
    eec0:	60bb      	str	r3, [r7, #8]
	return (total + timeout);
    eec2:	4476      	add	r6, lr
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    eec4:	2905      	cmp	r1, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    eec6:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    eec8:	d195      	bne.n	edf6 <ticker_job+0x136>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    eeca:	9b01      	ldr	r3, [sp, #4]
    eecc:	f8d3 8014 	ldr.w	r8, [r3, #20]
	ticks_now = cntr_cnt_get();
    eed0:	f00a f914 	bl	190fc <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    eed4:	9b04      	ldr	r3, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    eed6:	eba0 0108 	sub.w	r1, r0, r8
    eeda:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    eede:	4419      	add	r1, r3
	if (ticks_to_expire > ticks_elapsed) {
    eee0:	428e      	cmp	r6, r1
	ticks_now = cntr_cnt_get();
    eee2:	4602      	mov	r2, r0
	if (ticks_to_expire > ticks_elapsed) {
    eee4:	f240 80bc 	bls.w	f060 <ticker_job+0x3a0>
	ticker->ticks_to_expire_minus +=
    eee8:	6963      	ldr	r3, [r4, #20]
    eeea:	9305      	str	r3, [sp, #20]
		ticks_to_expire -= ticks_elapsed;
    eeec:	1a71      	subs	r1, r6, r1
	if ((ticker->ticks_periodic != 0U) &&
    eeee:	6860      	ldr	r0, [r4, #4]
    eef0:	2800      	cmp	r0, #0
    eef2:	d057      	beq.n	efa4 <ticker_job+0x2e4>
	    (user_op->params.update.lazy != 0U)) {
    eef4:	8aab      	ldrh	r3, [r5, #20]
    eef6:	9309      	str	r3, [sp, #36]	; 0x24
	if ((ticker->ticks_periodic != 0U) &&
    eef8:	2b00      	cmp	r3, #0
    eefa:	d053      	beq.n	efa4 <ticker_job+0x2e4>
		user_op->params.update.lazy--;
    eefc:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
    ef00:	fa1f fe8e 	uxth.w	lr, lr
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    ef04:	4288      	cmp	r0, r1
		while (ticker->lazy_current < user_op->params.update.lazy) {
    ef06:	8be3      	ldrh	r3, [r4, #30]
		user_op->params.update.lazy--;
    ef08:	f8a5 e014 	strh.w	lr, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    ef0c:	d21f      	bcs.n	ef4e <ticker_job+0x28e>
    ef0e:	f100 0a01 	add.w	sl, r0, #1
    ef12:	920b      	str	r2, [sp, #44]	; 0x2c
    ef14:	e018      	b.n	ef48 <ticker_job+0x288>
	if ((ticker->remainder_current >= BIT(31)) ||
    ef16:	6a66      	ldr	r6, [r4, #36]	; 0x24
    ef18:	f8df c244 	ldr.w	ip, [pc, #580]	; f160 <ticker_job+0x4a0>
    ef1c:	4a8f      	ldr	r2, [pc, #572]	; (f15c <ticker_job+0x49c>)
    ef1e:	44b4      	add	ip, r6
    ef20:	4594      	cmp	ip, r2
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    ef22:	bf84      	itt	hi
    ef24:	f106 76e8 	addhi.w	r6, r6, #30408704	; 0x1d00000
    ef28:	f506 36d4 	addhi.w	r6, r6, #108544	; 0x1a800
    ef2c:	4657      	mov	r7, sl
	ticker->remainder_current -= ticker->remainder_periodic;
    ef2e:	6a22      	ldr	r2, [r4, #32]
    ef30:	bf94      	ite	ls
    ef32:	4607      	movls	r7, r0
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    ef34:	f506 76a5 	addhi.w	r6, r6, #330	; 0x14a
			ticker->lazy_current--;
    ef38:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
    ef3a:	1bc9      	subs	r1, r1, r7
	ticker->remainder_current -= ticker->remainder_periodic;
    ef3c:	1ab6      	subs	r6, r6, r2
			ticker->lazy_current--;
    ef3e:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    ef40:	4288      	cmp	r0, r1
	ticker->remainder_current -= ticker->remainder_periodic;
    ef42:	6266      	str	r6, [r4, #36]	; 0x24
			ticker->lazy_current--;
    ef44:	83e3      	strh	r3, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    ef46:	d201      	bcs.n	ef4c <ticker_job+0x28c>
    ef48:	459e      	cmp	lr, r3
    ef4a:	d3e4      	bcc.n	ef16 <ticker_job+0x256>
    ef4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		while (ticker->lazy_current < user_op->params.update.lazy) {
    ef4e:	459e      	cmp	lr, r3
    ef50:	d926      	bls.n	efa0 <ticker_job+0x2e0>
    ef52:	3301      	adds	r3, #1
	ticker->remainder_current += ticker->remainder_periodic;
    ef54:	e9d4 c608 	ldrd	ip, r6, [r4, #32]
			ticks_to_expire += ticker->ticks_periodic +
    ef58:	e9cd 520b 	strd	r5, r2, [sp, #44]	; 0x2c
    ef5c:	9f09      	ldr	r7, [sp, #36]	; 0x24
    ef5e:	b29b      	uxth	r3, r3
    ef60:	f100 0a01 	add.w	sl, r0, #1
    ef64:	e005      	b.n	ef72 <ticker_job+0x2b2>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    ef66:	3301      	adds	r3, #1
    ef68:	b29b      	uxth	r3, r3
    ef6a:	4605      	mov	r5, r0
    ef6c:	429f      	cmp	r7, r3
			ticks_to_expire += ticker->ticks_periodic +
    ef6e:	4429      	add	r1, r5
		while (ticker->lazy_current < user_op->params.update.lazy) {
    ef70:	d011      	beq.n	ef96 <ticker_job+0x2d6>
	if ((ticker->remainder_current < BIT(31)) &&
    ef72:	4d7b      	ldr	r5, [pc, #492]	; (f160 <ticker_job+0x4a0>)
    ef74:	4a79      	ldr	r2, [pc, #484]	; (f15c <ticker_job+0x49c>)
	ticker->remainder_current += ticker->remainder_periodic;
    ef76:	4466      	add	r6, ip
	if ((ticker->remainder_current < BIT(31)) &&
    ef78:	1975      	adds	r5, r6, r5
    ef7a:	4295      	cmp	r5, r2
    ef7c:	d8f3      	bhi.n	ef66 <ticker_job+0x2a6>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    ef7e:	3301      	adds	r3, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    ef80:	f1a6 76e8 	sub.w	r6, r6, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
    ef84:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    ef86:	f5a6 36d4 	sub.w	r6, r6, #108544	; 0x1a800
			ticks_to_expire += ticker->ticks_periodic +
    ef8a:	4655      	mov	r5, sl
		while (ticker->lazy_current < user_op->params.update.lazy) {
    ef8c:	429f      	cmp	r7, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    ef8e:	f5a6 76a5 	sub.w	r6, r6, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
    ef92:	4429      	add	r1, r5
		while (ticker->lazy_current < user_op->params.update.lazy) {
    ef94:	d1ed      	bne.n	ef72 <ticker_job+0x2b2>
    ef96:	e9dd 520b 	ldrd	r5, r2, [sp, #44]	; 0x2c
    ef9a:	6266      	str	r6, [r4, #36]	; 0x24
    ef9c:	f8a4 e01e 	strh.w	lr, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
    efa0:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    efa4:	6868      	ldr	r0, [r5, #4]
				user_op->params.update.ticks_drift_minus;
    efa6:	68af      	ldr	r7, [r5, #8]
	ticker->ticks_to_expire_minus +=
    efa8:	9b05      	ldr	r3, [sp, #20]
	ticker->ticks_to_expire = ticks_to_expire +
    efaa:	4401      	add	r1, r0
    efac:	60a1      	str	r1, [r4, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
    efae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	ticker->ticks_to_expire_minus +=
    efb0:	443b      	add	r3, r7
    efb2:	6163      	str	r3, [r4, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
    efb4:	b119      	cbz	r1, efbe <ticker_job+0x2fe>
    efb6:	680b      	ldr	r3, [r1, #0]
    efb8:	b10b      	cbz	r3, efbe <ticker_job+0x2fe>
			user_op->params.update.ticks_drift_plus -
    efba:	1bc0      	subs	r0, r0, r7
		ext_data->ticks_drift =
    efbc:	6048      	str	r0, [r1, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    efbe:	4641      	mov	r1, r8
    efc0:	4620      	mov	r0, r4
    efc2:	f7ff fbe7 	bl	e794 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    efc6:	68ea      	ldr	r2, [r5, #12]
    efc8:	69a3      	ldr	r3, [r4, #24]
    efca:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    efcc:	692a      	ldr	r2, [r5, #16]
    efce:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    efd0:	bf8c      	ite	hi
    efd2:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
    efd4:	2300      	movls	r3, #0
    efd6:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
    efd8:	7dab      	ldrb	r3, [r5, #22]
    efda:	b103      	cbz	r3, efde <ticker_job+0x31e>
		ticker->force = user_op->params.update.force;
    efdc:	70e3      	strb	r3, [r4, #3]
	if (user_op->params.update.must_expire) {
    efde:	7deb      	ldrb	r3, [r5, #23]
    efe0:	b113      	cbz	r3, efe8 <ticker_job+0x328>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
    efe2:	3b01      	subs	r3, #1
    efe4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->next = *insert_head;
    efe8:	9b03      	ldr	r3, [sp, #12]
    efea:	7023      	strb	r3, [r4, #0]
		ticker->req++;
    efec:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    efee:	786a      	ldrb	r2, [r5, #1]
    eff0:	9203      	str	r2, [sp, #12]
		ticker->req++;
    eff2:	3301      	adds	r3, #1
    eff4:	7063      	strb	r3, [r4, #1]
    eff6:	e705      	b.n	ee04 <ticker_job+0x144>
			instance->ticker_id_slot_previous = TICKER_NULL;
    eff8:	9a01      	ldr	r2, [sp, #4]
    effa:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    effc:	2907      	cmp	r1, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
    effe:	7713      	strb	r3, [r2, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    f000:	d11f      	bne.n	f042 <ticker_job+0x382>
				ticks_at_stop =
    f002:	6868      	ldr	r0, [r5, #4]
			ticks_current = instance->ticks_current;
    f004:	9b01      	ldr	r3, [sp, #4]
    f006:	695b      	ldr	r3, [r3, #20]
			if (!((ticks_at_stop - ticks_current) &
    f008:	1ac2      	subs	r2, r0, r3
    f00a:	0214      	lsls	r4, r2, #8
    f00c:	d410      	bmi.n	f030 <ticker_job+0x370>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f00e:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
    f012:	9a04      	ldr	r2, [sp, #16]
    f014:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
    f016:	9901      	ldr	r1, [sp, #4]
    f018:	698a      	ldr	r2, [r1, #24]
    f01a:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
    f01c:	bf88      	it	hi
    f01e:	618b      	strhi	r3, [r1, #24]
    f020:	e6f0      	b.n	ee04 <ticker_job+0x144>
		if (current == id) {
    f022:	4633      	mov	r3, r6
    f024:	4680      	mov	r8, r0
	total = 0U;
    f026:	f04f 0e00 	mov.w	lr, #0
		instance->ticker_id_head = ticker_current->next;
    f02a:	9e01      	ldr	r6, [sp, #4]
    f02c:	7773      	strb	r3, [r6, #29]
    f02e:	e73b      	b.n	eea8 <ticker_job+0x1e8>
				if (ticks_elapsed > ticks_used) {
    f030:	9a04      	ldr	r2, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f032:	1a1b      	subs	r3, r3, r0
    f034:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
    f038:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
    f03a:	bf34      	ite	cc
    f03c:	1ad3      	subcc	r3, r2, r3
					ticks_used = 0;
    f03e:	2300      	movcs	r3, #0
    f040:	e7e9      	b.n	f016 <ticker_job+0x356>
				ticks_at_stop = cntr_cnt_get();
    f042:	f00a f85b 	bl	190fc <cntr_cnt_get>
    f046:	e7dd      	b.n	f004 <ticker_job+0x344>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    f048:	9b01      	ldr	r3, [sp, #4]
    f04a:	f8d3 8014 	ldr.w	r8, [r3, #20]
	ticks_now = cntr_cnt_get();
    f04e:	f00a f855 	bl	190fc <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    f052:	9b04      	ldr	r3, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f054:	eba0 0108 	sub.w	r1, r0, r8
    f058:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
	ticks_now = cntr_cnt_get();
    f05c:	4602      	mov	r2, r0
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    f05e:	4419      	add	r1, r3
		ticker->ticks_to_expire_minus += ticks_elapsed -
    f060:	6963      	ldr	r3, [r4, #20]
    f062:	4419      	add	r1, r3
    f064:	1b8b      	subs	r3, r1, r6
    f066:	9305      	str	r3, [sp, #20]
    f068:	6163      	str	r3, [r4, #20]
		ticks_to_expire = 0U;
    f06a:	2100      	movs	r1, #0
    f06c:	e73f      	b.n	eeee <ticker_job+0x22e>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    f06e:	9b01      	ldr	r3, [sp, #4]
    f070:	2104      	movs	r1, #4
    f072:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    f074:	2201      	movs	r2, #1
    f076:	4608      	mov	r0, r1
    f078:	47a0      	blx	r4
	while (count_user--) {
    f07a:	9a06      	ldr	r2, [sp, #24]
				user->middle = prev;
    f07c:	f88b 7002 	strb.w	r7, [fp, #2]
				pending = 1U;
    f080:	2301      	movs	r3, #1
	while (count_user--) {
    f082:	455a      	cmp	r2, fp
				pending = 1U;
    f084:	9308      	str	r3, [sp, #32]
	while (count_user--) {
    f086:	f1ab 0308 	sub.w	r3, fp, #8
    f08a:	f47f aed0 	bne.w	ee2e <ticker_job+0x16e>
	if (instance->ticker_id_head != ticker_id_old_head) {
    f08e:	9b01      	ldr	r3, [sp, #4]
		flag_compare_update = 1U;
    f090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	if (instance->ticker_id_head != ticker_id_old_head) {
    f092:	7f5b      	ldrb	r3, [r3, #29]
		flag_compare_update = 1U;
    f094:	1a9b      	subs	r3, r3, r2
    f096:	bf18      	it	ne
    f098:	2301      	movne	r3, #1
    f09a:	9309      	str	r3, [sp, #36]	; 0x24
	if (flag_elapsed) {
    f09c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f09e:	2b00      	cmp	r3, #0
    f0a0:	d16a      	bne.n	f178 <ticker_job+0x4b8>
		ticker_job_list_insert(instance, insert_head);
    f0a2:	9c01      	ldr	r4, [sp, #4]
    f0a4:	9903      	ldr	r1, [sp, #12]
    f0a6:	4620      	mov	r0, r4
    f0a8:	f7ff fb9a 	bl	e7e0 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
    f0ac:	7f63      	ldrb	r3, [r4, #29]
    f0ae:	9300      	str	r3, [sp, #0]
    f0b0:	9b00      	ldr	r3, [sp, #0]
    f0b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f0b4:	4293      	cmp	r3, r2
    f0b6:	f000 8260 	beq.w	f57a <ticker_job+0x8ba>
	if (!pending) {
    f0ba:	9b08      	ldr	r3, [sp, #32]
    f0bc:	2b00      	cmp	r3, #0
    f0be:	f000 81d3 	beq.w	f468 <ticker_job+0x7a8>
	if (instance->ticker_id_head == TICKER_NULL) {
    f0c2:	9b01      	ldr	r3, [sp, #4]
    f0c4:	7f5b      	ldrb	r3, [r3, #29]
    f0c6:	9300      	str	r3, [sp, #0]
    f0c8:	9b00      	ldr	r3, [sp, #0]
    f0ca:	2bff      	cmp	r3, #255	; 0xff
    f0cc:	f000 82b3 	beq.w	f636 <__kernel_ram_size+0x3e>
	if (ticker_id_old_head == TICKER_NULL) {
    f0d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f0d2:	2bff      	cmp	r3, #255	; 0xff
    f0d4:	f000 82b9 	beq.w	f64a <__kernel_ram_size+0x52>
	ticks_to_expire = ticker->ticks_to_expire;
    f0d8:	9901      	ldr	r1, [sp, #4]
	ticker = &instance->nodes[instance->ticker_id_head];
    f0da:	9a00      	ldr	r2, [sp, #0]
	ticks_to_expire = ticker->ticks_to_expire;
    f0dc:	680b      	ldr	r3, [r1, #0]
		LL_ASSERT(i);
    f0de:	f8df 9088 	ldr.w	r9, [pc, #136]	; f168 <ticker_job+0x4a8>
    f0e2:	f8df 8088 	ldr.w	r8, [pc, #136]	; f16c <ticker_job+0x4ac>
    f0e6:	4f1f      	ldr	r7, [pc, #124]	; (f164 <ticker_job+0x4a4>)
	ticker = &instance->nodes[instance->ticker_id_head];
    f0e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
    f0ec:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
    f0f0:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
    f0f2:	689e      	ldr	r6, [r3, #8]
		LL_ASSERT(i);
    f0f4:	468a      	mov	sl, r1
		ctr = cntr_cnt_get();
    f0f6:	f00a f801 	bl	190fc <cntr_cnt_get>
		cc = instance->ticks_current;
    f0fa:	f8da 4014 	ldr.w	r4, [sl, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f0fe:	1b03      	subs	r3, r0, r4
    f100:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    f104:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    f106:	42b3      	cmp	r3, r6
    f108:	bf2c      	ite	cs
    f10a:	18e4      	addcs	r4, r4, r3
    f10c:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
    f10e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
    f112:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
		ctr = cntr_cnt_get();
    f116:	4683      	mov	fp, r0
		instance->trigger_set_cb(cc);
    f118:	4620      	mov	r0, r4
    f11a:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    f11c:	f009 ffee 	bl	190fc <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f120:	eba0 020b 	sub.w	r2, r0, fp
    f124:	eba4 030b 	sub.w	r3, r4, fp
    f128:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    f12c:	3203      	adds	r2, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f12e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
    f132:	429a      	cmp	r2, r3
		i--;
    f134:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
    f138:	f240 8226 	bls.w	f588 <ticker_job+0x8c8>
		LL_ASSERT(i);
    f13c:	2d00      	cmp	r5, #0
    f13e:	d1da      	bne.n	f0f6 <ticker_job+0x436>
    f140:	f640 03c9 	movw	r3, #2249	; 0x8c9
    f144:	464a      	mov	r2, r9
    f146:	4641      	mov	r1, r8
    f148:	4638      	mov	r0, r7
    f14a:	f00d ff73 	bl	1d034 <printk>
    f14e:	4040      	eors	r0, r0
    f150:	f380 8811 	msr	BASEPRI, r0
    f154:	f04f 0003 	mov.w	r0, #3
    f158:	df02      	svc	2
    f15a:	e7cc      	b.n	f0f6 <ticker_job+0x436>
    f15c:	7f172b59 	.word	0x7f172b59
    f160:	ff172b5a 	.word	0xff172b5a
    f164:	000230b4 	.word	0x000230b4
    f168:	00023074 	.word	0x00023074
    f16c:	00023178 	.word	0x00023178
	pending = 0U;
    f170:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f172:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    f174:	23ff      	movs	r3, #255	; 0xff
    f176:	9303      	str	r3, [sp, #12]
	ticks_now = cntr_cnt_get();
    f178:	f009 ffc0 	bl	190fc <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f17c:	9b07      	ldr	r3, [sp, #28]
    f17e:	1ac0      	subs	r0, r0, r3
	while (instance->ticker_id_head != TICKER_NULL) {
    f180:	9b01      	ldr	r3, [sp, #4]
    f182:	7f5e      	ldrb	r6, [r3, #29]
    f184:	461d      	mov	r5, r3
    f186:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
    f188:	681b      	ldr	r3, [r3, #0]
    f18a:	9300      	str	r3, [sp, #0]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f18c:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
    f190:	d04d      	beq.n	f22e <ticker_job+0x56e>
	if ((ticker->remainder_current < BIT(31)) &&
    f192:	f8df b4dc 	ldr.w	fp, [pc, #1244]	; f670 <__kernel_ram_size+0x78>
    f196:	f8df a4dc 	ldr.w	sl, [pc, #1244]	; f674 <__kernel_ram_size+0x7c>
	while (instance->ticker_id_head != TICKER_NULL) {
    f19a:	9f04      	ldr	r7, [sp, #16]
	ticks_expired = 0U;
    f19c:	f04f 0900 	mov.w	r9, #0
		ticker = &node[id_expired];
    f1a0:	9a00      	ldr	r2, [sp, #0]
    f1a2:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    f1a6:	eb02 1403 	add.w	r4, r2, r3, lsl #4
    f1aa:	011b      	lsls	r3, r3, #4
    f1ac:	9302      	str	r3, [sp, #8]
		ticks_to_expire = ticker->ticks_to_expire;
    f1ae:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    f1b0:	42bb      	cmp	r3, r7
    f1b2:	f200 8233 	bhi.w	f61c <__kernel_ram_size+0x24>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    f1b6:	69aa      	ldr	r2, [r5, #24]
		skip_collision = (ticker->lazy_current != 0U);
    f1b8:	8be1      	ldrh	r1, [r4, #30]
		instance->ticker_id_head = ticker->next;
    f1ba:	9800      	ldr	r0, [sp, #0]
		skip_collision = (ticker->lazy_current != 0U);
    f1bc:	9105      	str	r1, [sp, #20]
		if (instance->ticks_slot_previous > ticks_to_expire) {
    f1be:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
    f1c0:	eba7 0703 	sub.w	r7, r7, r3
		ticks_expired += ticks_to_expire;
    f1c4:	4499      	add	r9, r3
		ticks_latency -= ticks_to_expire;
    f1c6:	eba8 0803 	sub.w	r8, r8, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    f1ca:	bf25      	ittet	cs
    f1cc:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
    f1d0:	772b      	strbcs	r3, [r5, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
    f1d2:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
    f1d4:	2300      	movcs	r3, #0
    f1d6:	61ab      	str	r3, [r5, #24]
		state = (ticker->req - ticker->ack) & 0xff;
    f1d8:	78a2      	ldrb	r2, [r4, #2]
    f1da:	7863      	ldrb	r3, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    f1dc:	f8d4 e018 	ldr.w	lr, [r4, #24]
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    f1e0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		if ((ticker->ticks_periodic != 0U) ||
    f1e2:	f8d4 c004 	ldr.w	ip, [r4, #4]
		state = (ticker->req - ticker->ack) & 0xff;
    f1e6:	1a9b      	subs	r3, r3, r2
    f1e8:	b2db      	uxtb	r3, r3
    f1ea:	9306      	str	r3, [sp, #24]
		instance->ticker_id_head = ticker->next;
    f1ec:	4603      	mov	r3, r0
    f1ee:	9802      	ldr	r0, [sp, #8]
    f1f0:	5c18      	ldrb	r0, [r3, r0]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    f1f2:	f1be 0f00 	cmp.w	lr, #0
    f1f6:	d003      	beq.n	f200 <ticker_job+0x540>
    f1f8:	9b06      	ldr	r3, [sp, #24]
    f1fa:	2b02      	cmp	r3, #2
    f1fc:	f000 8124 	beq.w	f448 <ticker_job+0x788>
		ticker->ticks_to_expire = 0U;
    f200:	2300      	movs	r3, #0
    f202:	60a3      	str	r3, [r4, #8]
		instance->ticker_id_head = ticker->next;
    f204:	7768      	strb	r0, [r5, #29]
		if ((ticker->ticks_periodic != 0U) ||
    f206:	f1bc 0f00 	cmp.w	ip, #0
    f20a:	f040 80d1 	bne.w	f3b0 <ticker_job+0x6f0>
    f20e:	b119      	cbz	r1, f218 <ticker_job+0x558>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    f210:	7a09      	ldrb	r1, [r1, #8]
    f212:	2901      	cmp	r1, #1
    f214:	f000 8115 	beq.w	f442 <ticker_job+0x782>
			if (state && ((state == 1U) || skip_collision) &&
    f218:	9b06      	ldr	r3, [sp, #24]
    f21a:	b123      	cbz	r3, f226 <ticker_job+0x566>
    f21c:	2b01      	cmp	r3, #1
    f21e:	d03e      	beq.n	f29e <ticker_job+0x5de>
    f220:	9b05      	ldr	r3, [sp, #20]
    f222:	2b00      	cmp	r3, #0
    f224:	d13b      	bne.n	f29e <ticker_job+0x5de>
			ticker->req = ticker->ack;
    f226:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    f228:	7f6e      	ldrb	r6, [r5, #29]
    f22a:	2eff      	cmp	r6, #255	; 0xff
    f22c:	d1b8      	bne.n	f1a0 <ticker_job+0x4e0>
			flag_compare_update = 1U;
    f22e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
    f232:	9c01      	ldr	r4, [sp, #4]
    f234:	9903      	ldr	r1, [sp, #12]
			flag_compare_update = 1U;
    f236:	4296      	cmp	r6, r2
    f238:	bf18      	it	ne
    f23a:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
    f23c:	4620      	mov	r0, r4
			flag_compare_update = 1U;
    f23e:	9309      	str	r3, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
    f240:	f7ff face 	bl	e7e0 <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
    f244:	7f63      	ldrb	r3, [r4, #29]
	nodes = &instance->nodes[0];
    f246:	6821      	ldr	r1, [r4, #0]
		ticker_id_head = instance->ticker_id_head;
    f248:	9300      	str	r3, [sp, #0]
	uint8_t  rescheduled = 0U;
    f24a:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
    f24c:	9b00      	ldr	r3, [sp, #0]
    f24e:	2bff      	cmp	r3, #255	; 0xff
    f250:	d00e      	beq.n	f270 <ticker_job+0x5b0>
    f252:	9f00      	ldr	r7, [sp, #0]
			ticker = &nodes[ticker_id_head];
    f254:	b23b      	sxth	r3, r7
    f256:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f25a:	eb01 1603 	add.w	r6, r1, r3, lsl #4
    f25e:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
    f260:	6ab0      	ldr	r0, [r6, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
    f262:	b110      	cbz	r0, f26a <ticker_job+0x5aa>
    f264:	7a04      	ldrb	r4, [r0, #8]
    f266:	2c01      	cmp	r4, #1
    f268:	d021      	beq.n	f2ae <ticker_job+0x5ee>
			ticker_id_head = ticker->next;
    f26a:	5ccf      	ldrb	r7, [r1, r3]
		while (ticker_id_head != TICKER_NULL) {
    f26c:	2fff      	cmp	r7, #255	; 0xff
    f26e:	d1f1      	bne.n	f254 <ticker_job+0x594>
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
    f270:	2a00      	cmp	r2, #0
    f272:	f43f af1d 	beq.w	f0b0 <ticker_job+0x3f0>
	if (instance->ticker_id_head != ticker_id_old_head) {
    f276:	9b00      	ldr	r3, [sp, #0]
    f278:	990a      	ldr	r1, [sp, #40]	; 0x28
    f27a:	428b      	cmp	r3, r1
    f27c:	f47f af1d 	bne.w	f0ba <ticker_job+0x3fa>
	if (!pending) {
    f280:	9b08      	ldr	r3, [sp, #32]
    f282:	2b00      	cmp	r3, #0
    f284:	f47f af20 	bne.w	f0c8 <ticker_job+0x408>
	users = &instance->users[0];
    f288:	9b01      	ldr	r3, [sp, #4]
    f28a:	f8d3 a004 	ldr.w	sl, [r3, #4]
	count_user = instance->count_user;
    f28e:	7a5b      	ldrb	r3, [r3, #9]
	while (count_user--) {
    f290:	1e5c      	subs	r4, r3, #1
    f292:	b2e4      	uxtb	r4, r4
    f294:	2b00      	cmp	r3, #0
    f296:	f43f af17 	beq.w	f0c8 <ticker_job+0x408>
			flag_compare_update = 1U;
    f29a:	9209      	str	r2, [sp, #36]	; 0x24
    f29c:	e0ef      	b.n	f47e <ticker_job+0x7be>
			    ticker->fp_op_func) {
    f29e:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
    f2a0:	2b00      	cmp	r3, #0
    f2a2:	d0c0      	beq.n	f226 <ticker_job+0x566>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
    f2a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    f2a6:	2001      	movs	r0, #1
    f2a8:	4798      	blx	r3
			ticker->req = ticker->ack;
    f2aa:	78a2      	ldrb	r2, [r4, #2]
    f2ac:	e7bb      	b.n	f226 <ticker_job+0x566>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    f2ae:	9b01      	ldr	r3, [sp, #4]
    f2b0:	7f1b      	ldrb	r3, [r3, #28]
    f2b2:	2bff      	cmp	r3, #255	; 0xff
    f2b4:	4686      	mov	lr, r0
    f2b6:	d045      	beq.n	f344 <ticker_job+0x684>
			instance->ticks_slot_previous > ticks_elapsed) {
    f2b8:	9b01      	ldr	r3, [sp, #4]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    f2ba:	9a04      	ldr	r2, [sp, #16]
			instance->ticks_slot_previous > ticks_elapsed) {
    f2bc:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    f2be:	4293      	cmp	r3, r2
    f2c0:	4610      	mov	r0, r2
    f2c2:	d93f      	bls.n	f344 <ticker_job+0x684>
			window_start_ticks = instance->ticks_slot_previous -
    f2c4:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    f2c8:	e9de 2300 	ldrd	r2, r3, [lr]
    f2cc:	4293      	cmp	r3, r2
		ticker_id_iter = nodes[ticker_id_head].next;
    f2ce:	f896 b000 	ldrb.w	fp, [r6]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    f2d2:	d23f      	bcs.n	f354 <ticker_job+0x694>
		while (ticker_id_iter != TICKER_NULL &&
    f2d4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
    f2d8:	eba2 0903 	sub.w	r9, r2, r3
		while (ticker_id_iter != TICKER_NULL &&
    f2dc:	d03a      	beq.n	f354 <ticker_job+0x694>
		       ticks_start_offset + ticker->ticks_slot <=
    f2de:	f8d6 8018 	ldr.w	r8, [r6, #24]
		while (ticker_id_iter != TICKER_NULL &&
    f2e2:	45c1      	cmp	r9, r8
    f2e4:	f04f 0300 	mov.w	r3, #0
    f2e8:	d337      	bcc.n	f35a <ticker_job+0x69a>
    f2ea:	46c2      	mov	sl, r8
    f2ec:	465a      	mov	r2, fp
    f2ee:	461d      	mov	r5, r3
    f2f0:	e01b      	b.n	f32a <ticker_job+0x66a>
			if (node->ticks_to_expire >
    f2f2:	68a0      	ldr	r0, [r4, #8]
					MIN(ticks_slot_window,
    f2f4:	1f03      	subs	r3, r0, #4
			if (node->ticks_to_expire >
    f2f6:	2804      	cmp	r0, #4
					MIN(ticks_slot_window,
    f2f8:	442b      	add	r3, r5
			if (node->ticks_to_expire >
    f2fa:	d909      	bls.n	f310 <ticker_job+0x650>
				window_end_ticks =
    f2fc:	454b      	cmp	r3, r9
    f2fe:	bf28      	it	cs
    f300:	464b      	movcs	r3, r9
			if (window_end_ticks > ticks_start_offset +
    f302:	4553      	cmp	r3, sl
    f304:	d904      	bls.n	f310 <ticker_job+0x650>
			if (ticks_to_expire != 0U &&
    f306:	ebb3 0308 	subs.w	r3, r3, r8
    f30a:	d001      	beq.n	f310 <ticker_job+0x650>
    f30c:	459c      	cmp	ip, r3
    f30e:	d924      	bls.n	f35a <ticker_job+0x69a>
			window_start_ticks  = node->ticks_to_expire +
    f310:	69a3      	ldr	r3, [r4, #24]
			ticker_id_iter = node->next;
    f312:	5c8a      	ldrb	r2, [r1, r2]
			window_start_ticks  = node->ticks_to_expire +
    f314:	eb00 0c03 	add.w	ip, r0, r3
			ticks_start_offset += node->ticks_to_expire;
    f318:	4405      	add	r5, r0
			ticks_to_expire     = ticks_slot_window -
    f31a:	eba9 0308 	sub.w	r3, r9, r8
		while (ticker_id_iter != TICKER_NULL &&
    f31e:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
    f320:	eb05 0a08 	add.w	sl, r5, r8
		while (ticker_id_iter != TICKER_NULL &&
    f324:	d019      	beq.n	f35a <ticker_job+0x69a>
    f326:	45d1      	cmp	r9, sl
    f328:	d317      	bcc.n	f35a <ticker_job+0x69a>
			node = &nodes[ticker_id_iter];
    f32a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    f32e:	eb01 1402 	add.w	r4, r1, r2, lsl #4
    f332:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
    f334:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    f336:	2800      	cmp	r0, #0
    f338:	d0db      	beq.n	f2f2 <ticker_job+0x632>
    f33a:	7a00      	ldrb	r0, [r0, #8]
    f33c:	2801      	cmp	r0, #1
    f33e:	d1d8      	bne.n	f2f2 <ticker_job+0x632>
				ticker_id_iter = node->next;
    f340:	5c8a      	ldrb	r2, [r1, r2]
				continue;
    f342:	e7ec      	b.n	f31e <ticker_job+0x65e>
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    f344:	e9de 2300 	ldrd	r2, r3, [lr]
    f348:	4293      	cmp	r3, r2
		ticker_id_iter = nodes[ticker_id_head].next;
    f34a:	f896 b000 	ldrb.w	fp, [r6]
		window_start_ticks = 0U;
    f34e:	f04f 0c00 	mov.w	ip, #0
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    f352:	d3bf      	bcc.n	f2d4 <ticker_job+0x614>
		ticker->ticks_to_expire = ticks_to_expire;
    f354:	2300      	movs	r3, #0
    f356:	60b3      	str	r3, [r6, #8]
		while (ticker_id_iter != TICKER_NULL) {
    f358:	e021      	b.n	f39e <ticker_job+0x6de>
		ticker->ticks_to_expire = ticks_to_expire;
    f35a:	60b3      	str	r3, [r6, #8]
    f35c:	465d      	mov	r5, fp
    f35e:	f04f 08ff 	mov.w	r8, #255	; 0xff
    f362:	e000      	b.n	f366 <ticker_job+0x6a6>
    f364:	4615      	mov	r5, r2
			node = &nodes[ticker_id_iter];
    f366:	b228      	sxth	r0, r5
    f368:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    f36c:	eb01 1c02 	add.w	ip, r1, r2, lsl #4
    f370:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
    f372:	f8dc 4008 	ldr.w	r4, [ip, #8]
    f376:	429c      	cmp	r4, r3
    f378:	f080 8146 	bcs.w	f608 <__kernel_ram_size+0x10>
				ticker->ticks_to_expire -=
    f37c:	1b1b      	subs	r3, r3, r4
    f37e:	60b3      	str	r3, [r6, #8]
			ticker_id_iter = node->next;
    f380:	5c8a      	ldrb	r2, [r1, r2]
		while (ticker_id_iter != TICKER_NULL) {
    f382:	2aff      	cmp	r2, #255	; 0xff
    f384:	46a8      	mov	r8, r5
    f386:	d1ed      	bne.n	f364 <ticker_job+0x6a4>
			instance->ticker_id_head = nodes[ticker_id_head].next;
    f388:	9a01      	ldr	r2, [sp, #4]
			nodes[ticker_id_prev].next = ticker_id_head;
    f38a:	f8cd b000 	str.w	fp, [sp]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    f38e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f392:	0103      	lsls	r3, r0, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
    f394:	f882 b01d 	strb.w	fp, [r2, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    f398:	5cca      	ldrb	r2, [r1, r3]
    f39a:	7032      	strb	r2, [r6, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
    f39c:	54cf      	strb	r7, [r1, r3]
		ticker->lazy_current--;
    f39e:	8bf3      	ldrh	r3, [r6, #30]
    f3a0:	3b01      	subs	r3, #1
    f3a2:	83f3      	strh	r3, [r6, #30]
		ext_data->reschedule_state =
    f3a4:	f04f 0302 	mov.w	r3, #2
    f3a8:	f88e 3008 	strb.w	r3, [lr, #8]
		rescheduled  = 1U;
    f3ac:	2201      	movs	r2, #1
    f3ae:	e74d      	b.n	f24c <ticker_job+0x58c>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    f3b0:	b111      	cbz	r1, f3b8 <ticker_job+0x6f8>
    f3b2:	7a0b      	ldrb	r3, [r1, #8]
    f3b4:	2b01      	cmp	r3, #1
    f3b6:	d044      	beq.n	f442 <ticker_job+0x782>
				if (!ticker->lazy_current) {
    f3b8:	9b05      	ldr	r3, [sp, #20]
    f3ba:	2b00      	cmp	r3, #0
    f3bc:	d150      	bne.n	f460 <ticker_job+0x7a0>
					lazy_periodic = ticker->lazy_periodic;
    f3be:	8ba3      	ldrh	r3, [r4, #28]
    f3c0:	930b      	str	r3, [sp, #44]	; 0x2c
    f3c2:	461a      	mov	r2, r3
				while (count--) {
    f3c4:	f10c 0001 	add.w	r0, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    f3c8:	e9d4 e308 	ldrd	lr, r3, [r4, #32]
				ticks_to_expire = 0U;
    f3cc:	2100      	movs	r1, #0
    f3ce:	9006      	str	r0, [sp, #24]
    f3d0:	e004      	b.n	f3dc <ticker_job+0x71c>
    f3d2:	4660      	mov	r0, ip
				while (count--) {
    f3d4:	3a01      	subs	r2, #1
					ticks_to_expire +=
    f3d6:	4401      	add	r1, r0
				while (count--) {
    f3d8:	1c50      	adds	r0, r2, #1
    f3da:	d00f      	beq.n	f3fc <ticker_job+0x73c>
	ticker->remainder_current += ticker->remainder_periodic;
    f3dc:	4473      	add	r3, lr
	if ((ticker->remainder_current < BIT(31)) &&
    f3de:	eb03 000b 	add.w	r0, r3, fp
    f3e2:	4550      	cmp	r0, sl
    f3e4:	d8f5      	bhi.n	f3d2 <ticker_job+0x712>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    f3e6:	9806      	ldr	r0, [sp, #24]
    f3e8:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
    f3ec:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    f3ee:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
    f3f2:	4401      	add	r1, r0
				while (count--) {
    f3f4:	1c50      	adds	r0, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    f3f6:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
    f3fa:	d1ef      	bne.n	f3dc <ticker_job+0x71c>
				if (!ticker->must_expire) {
    f3fc:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    f400:	6263      	str	r3, [r4, #36]	; 0x24
    f402:	2a00      	cmp	r2, #0
    f404:	f000 80cc 	beq.w	f5a0 <ticker_job+0x8e0>
				ticker->lazy_current += (lazy_periodic + lazy);
    f408:	9b05      	ldr	r3, [sp, #20]
    f40a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
				ticker->ticks_to_expire = ticks_to_expire;
    f40c:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
    f40e:	4413      	add	r3, r2
    f410:	83e3      	strh	r3, [r4, #30]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    f412:	9b07      	ldr	r3, [sp, #28]
    f414:	6969      	ldr	r1, [r5, #20]
    f416:	eb03 0209 	add.w	r2, r3, r9
    f41a:	4620      	mov	r0, r4
    f41c:	f7ff f9ba 	bl	e794 <ticks_to_expire_prep>
			ticker->next = *insert_head;
    f420:	9b00      	ldr	r3, [sp, #0]
    f422:	4619      	mov	r1, r3
    f424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    f428:	548b      	strb	r3, [r1, r2]
			ticker->req++;
    f42a:	7863      	ldrb	r3, [r4, #1]
    f42c:	9603      	str	r6, [sp, #12]
    f42e:	3301      	adds	r3, #1
    f430:	7063      	strb	r3, [r4, #1]
    f432:	e6f9      	b.n	f228 <ticker_job+0x568>
		ticker->ticks_to_expire = 0U;
    f434:	9b05      	ldr	r3, [sp, #20]
    f436:	60a3      	str	r3, [r4, #8]
		instance->ticker_id_head = ticker->next;
    f438:	7768      	strb	r0, [r5, #29]
		if ((ticker->ticks_periodic != 0U) ||
    f43a:	f1bc 0f00 	cmp.w	ip, #0
    f43e:	f43f aee7 	beq.w	f210 <ticker_job+0x550>
				ticker->req = ticker->ack;
    f442:	7062      	strb	r2, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
    f444:	60a7      	str	r7, [r4, #8]
				ticker->req = ticker->ack;
    f446:	e7e4      	b.n	f412 <ticker_job+0x752>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    f448:	9b05      	ldr	r3, [sp, #20]
    f44a:	2b00      	cmp	r3, #0
    f44c:	f47f aed8 	bne.w	f200 <ticker_job+0x540>
    f450:	b111      	cbz	r1, f458 <ticker_job+0x798>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    f452:	7a0b      	ldrb	r3, [r1, #8]
    f454:	2b01      	cmp	r3, #1
    f456:	d0ed      	beq.n	f434 <ticker_job+0x774>
			instance->ticks_slot_previous = ticker->ticks_slot;
    f458:	f8c5 e018 	str.w	lr, [r5, #24]
			instance->ticker_id_slot_previous = id_expired;
    f45c:	772e      	strb	r6, [r5, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    f45e:	e6cf      	b.n	f200 <ticker_job+0x540>
					ticker->req = ticker->ack;
    f460:	7062      	strb	r2, [r4, #1]
    f462:	2200      	movs	r2, #0
					lazy_periodic = 0U;
    f464:	920b      	str	r2, [sp, #44]	; 0x2c
    f466:	e7ad      	b.n	f3c4 <ticker_job+0x704>
	count_user = instance->count_user;
    f468:	9a01      	ldr	r2, [sp, #4]
    f46a:	7a53      	ldrb	r3, [r2, #9]
	users = &instance->users[0];
    f46c:	f8d2 a004 	ldr.w	sl, [r2, #4]
	while (count_user--) {
    f470:	1e5c      	subs	r4, r3, #1
    f472:	b2e4      	uxtb	r4, r4
    f474:	2b00      	cmp	r3, #0
    f476:	f43f ae24 	beq.w	f0c2 <ticker_job+0x402>
		flag_compare_update = 1U;
    f47a:	2301      	movs	r3, #1
    f47c:	9309      	str	r3, [sp, #36]	; 0x24
    f47e:	f8dd 8004 	ldr.w	r8, [sp, #4]
    f482:	f8cd a000 	str.w	sl, [sp]
    f486:	eb0a 04c4 	add.w	r4, sl, r4, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
    f48a:	2600      	movs	r6, #0
			uop->status = TICKER_STATUS_FAILURE;
    f48c:	f04f 0b01 	mov.w	fp, #1
		while (user->first != user->last) {
    f490:	7863      	ldrb	r3, [r4, #1]
    f492:	78e2      	ldrb	r2, [r4, #3]
		user_op = &user->user_op[0];
    f494:	6867      	ldr	r7, [r4, #4]
		while (user->first != user->last) {
    f496:	429a      	cmp	r2, r3
    f498:	d10c      	bne.n	f4b4 <ticker_job+0x7f4>
    f49a:	e05f      	b.n	f55c <ticker_job+0x89c>
	switch (uop->op) {
    f49c:	2b01      	cmp	r3, #1
    f49e:	d057      	beq.n	f550 <ticker_job+0x890>
			first = user->first + 1;
    f4a0:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
    f4a2:	7821      	ldrb	r1, [r4, #0]
			first = user->first + 1;
    f4a4:	3301      	adds	r3, #1
    f4a6:	b2db      	uxtb	r3, r3
				first = 0U;
    f4a8:	4299      	cmp	r1, r3
    f4aa:	bf08      	it	eq
    f4ac:	2300      	moveq	r3, #0
		while (user->first != user->last) {
    f4ae:	429a      	cmp	r2, r3
			user->first = first;
    f4b0:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
    f4b2:	d053      	beq.n	f55c <ticker_job+0x89c>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    f4b4:	b21b      	sxth	r3, r3
    f4b6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    f4ba:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    f4be:	eb07 0583 	add.w	r5, r7, r3, lsl #2
	switch (uop->op) {
    f4c2:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
    f4c6:	2b02      	cmp	r3, #2
    f4c8:	d017      	beq.n	f4fa <ticker_job+0x83a>
    f4ca:	2b03      	cmp	r3, #3
    f4cc:	d1e6      	bne.n	f49c <ticker_job+0x7dc>
		if (uop->id < instance->count_node) {
    f4ce:	786b      	ldrb	r3, [r5, #1]
    f4d0:	f898 2008 	ldrb.w	r2, [r8, #8]
    f4d4:	429a      	cmp	r2, r3
    f4d6:	d93e      	bls.n	f556 <ticker_job+0x896>
			node[uop->id].priority =
    f4d8:	f8d8 2000 	ldr.w	r2, [r8]
    f4dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f4e0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    f4e4:	792a      	ldrb	r2, [r5, #4]
    f4e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
    f4ea:	62ae      	str	r6, [r5, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
    f4ec:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	if (fp_op_func) {
    f4ee:	b113      	cbz	r3, f4f6 <ticker_job+0x836>
		fp_op_func(uop->status, uop->op_context);
    f4f0:	6b29      	ldr	r1, [r5, #48]	; 0x30
    f4f2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    f4f4:	4798      	blx	r3
    f4f6:	78e2      	ldrb	r2, [r4, #3]
    f4f8:	e7d2      	b.n	f4a0 <ticker_job+0x7e0>
		ticker_by_next_slot_get(instance,
    f4fa:	e9d5 c101 	ldrd	ip, r1, [r5, #4]
	_ticker_id_head = *ticker_id_head;
    f4fe:	f89c 2000 	ldrb.w	r2, [ip]
		ticker_by_next_slot_get(instance,
    f502:	f8d5 e00c 	ldr.w	lr, [r5, #12]
	node = instance->nodes;
    f506:	f8d8 a000 	ldr.w	sl, [r8]
	    (*ticks_current != instance->ticks_current)) {
    f50a:	f8d8 3014 	ldr.w	r3, [r8, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
    f50e:	2aff      	cmp	r2, #255	; 0xff
    f510:	d002      	beq.n	f518 <ticker_job+0x858>
    f512:	6808      	ldr	r0, [r1, #0]
    f514:	4283      	cmp	r3, r0
    f516:	d028      	beq.n	f56a <ticker_job+0x8aa>
		_ticker_id_head = instance->ticker_id_head;
    f518:	f898 201d 	ldrb.w	r2, [r8, #29]
		*ticks_current = instance->ticks_current;
    f51c:	600b      	str	r3, [r1, #0]
		_ticks_to_expire = 0U;
    f51e:	f04f 0900 	mov.w	r9, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    f522:	2aff      	cmp	r2, #255	; 0xff
    f524:	bf18      	it	ne
    f526:	4650      	movne	r0, sl
    f528:	d103      	bne.n	f532 <ticker_job+0x872>
    f52a:	e00d      	b.n	f548 <ticker_job+0x888>
		_ticker_id_head = ticker->next;
    f52c:	5cc2      	ldrb	r2, [r0, r3]
	while ((_ticker_id_head != TICKER_NULL) &&
    f52e:	2aff      	cmp	r2, #255	; 0xff
    f530:	d00a      	beq.n	f548 <ticker_job+0x888>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
    f532:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    f536:	eb00 1103 	add.w	r1, r0, r3, lsl #4
    f53a:	011b      	lsls	r3, r3, #4
		_ticks_to_expire += ticker->ticks_to_expire;
    f53c:	f8d1 a008 	ldr.w	sl, [r1, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
    f540:	6989      	ldr	r1, [r1, #24]
		_ticks_to_expire += ticker->ticks_to_expire;
    f542:	44d1      	add	r9, sl
	while ((_ticker_id_head != TICKER_NULL) &&
    f544:	2900      	cmp	r1, #0
    f546:	d0f1      	beq.n	f52c <ticker_job+0x86c>
	*ticker_id_head = _ticker_id_head;
    f548:	f88c 2000 	strb.w	r2, [ip]
	*ticks_to_expire = _ticks_to_expire;
    f54c:	f8ce 9000 	str.w	r9, [lr]
		fp_op_func = uop->fp_op_func;
    f550:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
    f552:	62ae      	str	r6, [r5, #40]	; 0x28
		break;
    f554:	e7cb      	b.n	f4ee <ticker_job+0x82e>
			uop->status = TICKER_STATUS_FAILURE;
    f556:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
    f55a:	e7c7      	b.n	f4ec <ticker_job+0x82c>
	while (count_user--) {
    f55c:	9a00      	ldr	r2, [sp, #0]
    f55e:	42a2      	cmp	r2, r4
    f560:	f1a4 0308 	sub.w	r3, r4, #8
    f564:	d00c      	beq.n	f580 <ticker_job+0x8c0>
    f566:	461c      	mov	r4, r3
    f568:	e792      	b.n	f490 <ticker_job+0x7d0>
		ticker = &node[_ticker_id_head];
    f56a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    f56e:	0113      	lsls	r3, r2, #4
	_ticks_to_expire = *ticks_to_expire;
    f570:	f8de 9000 	ldr.w	r9, [lr]
		_ticker_id_head = ticker->next;
    f574:	f81a 2003 	ldrb.w	r2, [sl, r3]
    f578:	e7d3      	b.n	f522 <ticker_job+0x862>
	if (!pending) {
    f57a:	9b08      	ldr	r3, [sp, #32]
    f57c:	2b00      	cmp	r3, #0
    f57e:	d050      	beq.n	f622 <__kernel_ram_size+0x2a>
	if (flag_compare_update) {
    f580:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f582:	2b00      	cmp	r3, #0
    f584:	f47f ad9d 	bne.w	f0c2 <ticker_job+0x402>
	if (instance->worker_trigger) {
    f588:	9901      	ldr	r1, [sp, #4]
    f58a:	7fcb      	ldrb	r3, [r1, #31]
	instance->job_guard = 0U;
    f58c:	2200      	movs	r2, #0
    f58e:	778a      	strb	r2, [r1, #30]
	if (instance->worker_trigger) {
    f590:	2b00      	cmp	r3, #0
    f592:	f43f ac4e 	beq.w	ee32 <ticker_job+0x172>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    f596:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    f598:	460b      	mov	r3, r1
    f59a:	2201      	movs	r2, #1
    f59c:	2103      	movs	r1, #3
    f59e:	e44f      	b.n	ee40 <ticker_job+0x180>
					while (ticks_to_expire <
    f5a0:	4588      	cmp	r8, r1
    f5a2:	f67f af31 	bls.w	f408 <ticker_job+0x748>
    f5a6:	f10c 0001 	add.w	r0, ip, #1
    f5aa:	9006      	str	r0, [sp, #24]
    f5ac:	e005      	b.n	f5ba <ticker_job+0x8fa>
    f5ae:	4660      	mov	r0, ip
						ticks_to_expire +=
    f5b0:	4401      	add	r1, r0
						lazy++;
    f5b2:	3201      	adds	r2, #1
					while (ticks_to_expire <
    f5b4:	4588      	cmp	r8, r1
						lazy++;
    f5b6:	b292      	uxth	r2, r2
					while (ticks_to_expire <
    f5b8:	d910      	bls.n	f5dc <ticker_job+0x91c>
	ticker->remainder_current += ticker->remainder_periodic;
    f5ba:	4473      	add	r3, lr
	if ((ticker->remainder_current < BIT(31)) &&
    f5bc:	eb03 000b 	add.w	r0, r3, fp
    f5c0:	4550      	cmp	r0, sl
    f5c2:	d8f4      	bhi.n	f5ae <ticker_job+0x8ee>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    f5c4:	9806      	ldr	r0, [sp, #24]
    f5c6:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
    f5ca:	4401      	add	r1, r0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    f5cc:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
    f5d0:	3201      	adds	r2, #1
					while (ticks_to_expire <
    f5d2:	4588      	cmp	r8, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    f5d4:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
    f5d8:	b292      	uxth	r2, r2
					while (ticks_to_expire <
    f5da:	d8ee      	bhi.n	f5ba <ticker_job+0x8fa>
				ticker->lazy_current += (lazy_periodic + lazy);
    f5dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f5de:	6263      	str	r3, [r4, #36]	; 0x24
    f5e0:	4410      	add	r0, r2
    f5e2:	b283      	uxth	r3, r0
    f5e4:	930b      	str	r3, [sp, #44]	; 0x2c
    f5e6:	e70f      	b.n	f408 <ticker_job+0x748>
	ticker_id_old_head = instance->ticker_id_head;
    f5e8:	9b01      	ldr	r3, [sp, #4]
    f5ea:	7f59      	ldrb	r1, [r3, #29]
    f5ec:	910a      	str	r1, [sp, #40]	; 0x28
	node = &instance->nodes[0];
    f5ee:	6819      	ldr	r1, [r3, #0]
    f5f0:	9102      	str	r1, [sp, #8]
	count_user = instance->count_user;
    f5f2:	7a59      	ldrb	r1, [r3, #9]
	users = &instance->users[0];
    f5f4:	685b      	ldr	r3, [r3, #4]
    f5f6:	9306      	str	r3, [sp, #24]
	while (count_user--) {
    f5f8:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
    f5fa:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
    f5fc:	b2db      	uxtb	r3, r3
    f5fe:	b371      	cbz	r1, f65e <__kernel_ram_size+0x66>
		flag_elapsed = 0U;
    f600:	920d      	str	r2, [sp, #52]	; 0x34
		ticks_elapsed = 0U;
    f602:	9204      	str	r2, [sp, #16]
    f604:	f7ff bb92 	b.w	ed2c <ticker_job+0x6c>
				node->ticks_to_expire -=
    f608:	1ae3      	subs	r3, r4, r3
		if (ticker_id_prev != TICKER_NULL) {
    f60a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
				node->ticks_to_expire -=
    f60e:	f8cc 3008 	str.w	r3, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
    f612:	f43f aec4 	beq.w	f39e <ticker_job+0x6de>
    f616:	fa0f f088 	sxth.w	r0, r8
    f61a:	e6b5      	b.n	f388 <ticker_job+0x6c8>
			ticker->ticks_to_expire -= ticks_elapsed;
    f61c:	1bdb      	subs	r3, r3, r7
    f61e:	60a3      	str	r3, [r4, #8]
			break;
    f620:	e605      	b.n	f22e <ticker_job+0x56e>
	count_user = instance->count_user;
    f622:	9a01      	ldr	r2, [sp, #4]
    f624:	7a53      	ldrb	r3, [r2, #9]
	users = &instance->users[0];
    f626:	f8d2 a004 	ldr.w	sl, [r2, #4]
	while (count_user--) {
    f62a:	1e5c      	subs	r4, r3, #1
    f62c:	b2e4      	uxtb	r4, r4
    f62e:	2b00      	cmp	r3, #0
    f630:	f47f af25 	bne.w	f47e <ticker_job+0x7be>
    f634:	e7a4      	b.n	f580 <ticker_job+0x8c0>
		if (cntr_stop() == 0) {
    f636:	f009 fd3b 	bl	190b0 <cntr_stop>
    f63a:	2800      	cmp	r0, #0
    f63c:	d1a4      	bne.n	f588 <ticker_job+0x8c8>
			instance->ticks_slot_previous = 0U;
    f63e:	9c01      	ldr	r4, [sp, #4]
    f640:	61a0      	str	r0, [r4, #24]
			instance->ticks_current = cntr_cnt_get();
    f642:	f009 fd5b 	bl	190fc <cntr_cnt_get>
    f646:	6160      	str	r0, [r4, #20]
    f648:	e79e      	b.n	f588 <ticker_job+0x8c8>
		ticks_current = cntr_cnt_get();
    f64a:	f009 fd57 	bl	190fc <cntr_cnt_get>
    f64e:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    f650:	f009 fd1e 	bl	19090 <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
    f654:	9b01      	ldr	r3, [sp, #4]
		if (cntr_start() == 0) {
    f656:	b130      	cbz	r0, f666 <__kernel_ram_size+0x6e>
	ticker = &instance->nodes[instance->ticker_id_head];
    f658:	7f5b      	ldrb	r3, [r3, #29]
    f65a:	9300      	str	r3, [sp, #0]
    f65c:	e53c      	b.n	f0d8 <ticker_job+0x418>
	insert_head = TICKER_NULL;
    f65e:	23ff      	movs	r3, #255	; 0xff
	pending = 0U;
    f660:	9108      	str	r1, [sp, #32]
	insert_head = TICKER_NULL;
    f662:	9303      	str	r3, [sp, #12]
    f664:	e51d      	b.n	f0a2 <ticker_job+0x3e2>
	ticker = &instance->nodes[instance->ticker_id_head];
    f666:	7f5a      	ldrb	r2, [r3, #29]
    f668:	9200      	str	r2, [sp, #0]
			instance->ticks_current = ticks_current;
    f66a:	615c      	str	r4, [r3, #20]
    f66c:	e534      	b.n	f0d8 <ticker_job+0x418>
    f66e:	bf00      	nop
    f670:	ff172b5a 	.word	0xff172b5a
    f674:	7f172b59 	.word	0x7f172b59

0000f678 <ticker_init>:
{
    f678:	b4f0      	push	{r4, r5, r6, r7}
    f67a:	9d04      	ldr	r5, [sp, #16]
    f67c:	f89d 7014 	ldrb.w	r7, [sp, #20]
    f680:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    f682:	2800      	cmp	r0, #0
    f684:	d137      	bne.n	f6f6 <ticker_init+0x7e>
	instance->count_node = count_node;
    f686:	4e1d      	ldr	r6, [pc, #116]	; (f6fc <ticker_init+0x84>)
	while (count_node--) {
    f688:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
	instance->count_node = count_node;
    f68c:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
    f68e:	6032      	str	r2, [r6, #0]
	while (count_node--) {
    f690:	fa5f fc8c 	uxtb.w	ip, ip
    f694:	b149      	cbz	r1, f6aa <ticker_init+0x32>
    f696:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    f69a:	eb02 110c 	add.w	r1, r2, ip, lsl #4
    f69e:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
    f6a0:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
    f6a4:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    f6a8:	d1f9      	bne.n	f69e <ticker_init+0x26>
	while (count_user--) {
    f6aa:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
    f6ac:	7273      	strb	r3, [r6, #9]
	instance->users = user;
    f6ae:	6075      	str	r5, [r6, #4]
	while (count_user--) {
    f6b0:	b2d2      	uxtb	r2, r2
    f6b2:	b183      	cbz	r3, f6d6 <ticker_init+0x5e>
    f6b4:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
    f6b8:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    f6ba:	4610      	mov	r0, r2
    f6bc:	f812 3908 	ldrb.w	r3, [r2], #-8
    f6c0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    f6c4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
    f6c8:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
    f6ca:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
    f6ce:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
    f6d2:	b2df      	uxtb	r7, r3
	while (count_user--) {
    f6d4:	d1f0      	bne.n	f6b8 <ticker_init+0x40>
	if (count_op) {
    f6d6:	b977      	cbnz	r7, f6f6 <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
    f6d8:	9a07      	ldr	r2, [sp, #28]
    f6da:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
    f6dc:	9a08      	ldr	r2, [sp, #32]
    f6de:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
    f6e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
    f6e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f6e6:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
    f6e8:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
    f6ea:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
    f6ee:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
    f6f0:	8177      	strh	r7, [r6, #10]
}
    f6f2:	bcf0      	pop	{r4, r5, r6, r7}
    f6f4:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
    f6f6:	2001      	movs	r0, #1
}
    f6f8:	bcf0      	pop	{r4, r5, r6, r7}
    f6fa:	4770      	bx	lr
    f6fc:	20001b80 	.word	0x20001b80

0000f700 <ticker_trigger>:
	if (instance->sched_cb) {
    f700:	4b0b      	ldr	r3, [pc, #44]	; (f730 <ticker_trigger+0x30>)
    f702:	222c      	movs	r2, #44	; 0x2c
    f704:	fb02 3200 	mla	r2, r2, r0, r3
{
    f708:	b410      	push	{r4}
	if (instance->sched_cb) {
    f70a:	6a54      	ldr	r4, [r2, #36]	; 0x24
    f70c:	b164      	cbz	r4, f728 <ticker_trigger+0x28>
	instance = &_instance[instance_index];
    f70e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    f712:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    f716:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    f71a:	46a4      	mov	ip, r4
    f71c:	2201      	movs	r2, #1
}
    f71e:	f85d 4b04 	ldr.w	r4, [sp], #4
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    f722:	2103      	movs	r1, #3
    f724:	2002      	movs	r0, #2
    f726:	4760      	bx	ip
}
    f728:	f85d 4b04 	ldr.w	r4, [sp], #4
    f72c:	4770      	bx	lr
    f72e:	bf00      	nop
    f730:	20001b80 	.word	0x20001b80

0000f734 <ticker_start_ext>:
{
    f734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    f738:	4e28      	ldr	r6, [pc, #160]	; (f7dc <ticker_start_ext+0xa8>)
{
    f73a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
	user = &instance->users[user_id];
    f73e:	252c      	movs	r5, #44	; 0x2c
    f740:	fb05 6500 	mla	r5, r5, r0, r6
	struct ticker_instance *instance = &_instance[instance_index];
    f744:	eb00 0480 	add.w	r4, r0, r0, lsl #2
    f748:	eb00 0444 	add.w	r4, r0, r4, lsl #1
	user = &instance->users[user_id];
    f74c:	6868      	ldr	r0, [r5, #4]
    f74e:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
    f752:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
    f756:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last >= user->count_user_op) {
    f75a:	f810 4031 	ldrb.w	r4, [r0, r1, lsl #3]
	if (last == user->first) {
    f75e:	7878      	ldrb	r0, [r7, #1]
	last = user->last + 1;
    f760:	f10e 0c01 	add.w	ip, lr, #1
    f764:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    f768:	4564      	cmp	r4, ip
    f76a:	bf98      	it	ls
    f76c:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    f770:	4560      	cmp	r0, ip
    f772:	d02f      	beq.n	f7d4 <ticker_start_ext+0xa0>
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    f774:	4608      	mov	r0, r1
	user_op = &user->user_op[user->last];
    f776:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
    f77a:	6879      	ldr	r1, [r7, #4]
    f77c:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
    f780:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
    f784:	f04f 0904 	mov.w	r9, #4
    f788:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
    f78c:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    f78e:	9b08      	ldr	r3, [sp, #32]
    f790:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    f792:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f794:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    f796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f798:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    f79a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f79c:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
    f79e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f7a0:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    f7a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f7a4:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    f7a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f7a8:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
    f7aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f7ac:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    f7ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f7b0:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    f7b2:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    f7b4:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    f7b6:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
    f7b8:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
    f7bc:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    f7c0:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
    f7c4:	4798      	blx	r3
    f7c6:	4633      	mov	r3, r6
    f7c8:	4649      	mov	r1, r9
    f7ca:	2200      	movs	r2, #0
    f7cc:	47a8      	blx	r5
	return user_op->status;
    f7ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    f7d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    f7d4:	2001      	movs	r0, #1
}
    f7d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f7da:	bf00      	nop
    f7dc:	20001b80 	.word	0x20001b80

0000f7e0 <ticker_start>:
{
    f7e0:	b510      	push	{r4, lr}
    f7e2:	b08a      	sub	sp, #40	; 0x28
    f7e4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
    f7e6:	9400      	str	r4, [sp, #0]
{
    f7e8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
    f7ea:	9401      	str	r4, [sp, #4]
{
    f7ec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
    f7ee:	9402      	str	r4, [sp, #8]
{
    f7f0:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
    f7f4:	9403      	str	r4, [sp, #12]
{
    f7f6:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
    f7f8:	9404      	str	r4, [sp, #16]
{
    f7fa:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
    f7fc:	9405      	str	r4, [sp, #20]
{
    f7fe:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
    f800:	9406      	str	r4, [sp, #24]
{
    f802:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
    f804:	9407      	str	r4, [sp, #28]
{
    f806:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
    f808:	9408      	str	r4, [sp, #32]
    f80a:	2400      	movs	r4, #0
    f80c:	9409      	str	r4, [sp, #36]	; 0x24
    f80e:	f7ff ff91 	bl	f734 <ticker_start_ext>
}
    f812:	b00a      	add	sp, #40	; 0x28
    f814:	bd10      	pop	{r4, pc}
    f816:	bf00      	nop

0000f818 <ticker_update_ext>:
{
    f818:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    f81c:	4e28      	ldr	r6, [pc, #160]	; (f8c0 <ticker_update_ext+0xa8>)
{
    f81e:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
    f822:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
    f826:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	user = &instance->users[user_id];
    f82a:	252c      	movs	r5, #44	; 0x2c
    f82c:	fb05 6500 	mla	r5, r5, r0, r6
	struct ticker_instance *instance = &_instance[instance_index];
    f830:	eb00 0480 	add.w	r4, r0, r0, lsl #2
    f834:	eb00 0444 	add.w	r4, r0, r4, lsl #1
	user = &instance->users[user_id];
    f838:	6868      	ldr	r0, [r5, #4]
    f83a:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
    f83e:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
    f842:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last >= user->count_user_op) {
    f846:	f810 4031 	ldrb.w	r4, [r0, r1, lsl #3]
	if (last == user->first) {
    f84a:	7878      	ldrb	r0, [r7, #1]
	last = user->last + 1;
    f84c:	f10e 0c01 	add.w	ip, lr, #1
    f850:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    f854:	4564      	cmp	r4, ip
    f856:	bf98      	it	ls
    f858:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    f85c:	4560      	cmp	r0, ip
    f85e:	d02b      	beq.n	f8b8 <ticker_update_ext+0xa0>
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    f860:	4608      	mov	r0, r1
	user_op = &user->user_op[user->last];
    f862:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
    f866:	6879      	ldr	r1, [r7, #4]
    f868:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
    f86c:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    f870:	f04f 0b05 	mov.w	fp, #5
    f874:	f801 b02e 	strb.w	fp, [r1, lr, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    f878:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    f87a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f87c:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    f87e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f880:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    f882:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f884:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
    f886:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f888:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    f88a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f88c:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    f88e:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    f890:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    f892:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
    f894:	f8a4 8014 	strh.w	r8, [r4, #20]
	user_op->params.update.force = force;
    f898:	f884 9016 	strb.w	r9, [r4, #22]
	user_op->params.update.must_expire = must_expire;
    f89c:	f884 a017 	strb.w	sl, [r4, #23]
	user->last = last;
    f8a0:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    f8a4:	e9d5 3708 	ldrd	r3, r7, [r5, #32]
    f8a8:	4798      	blx	r3
    f8aa:	4633      	mov	r3, r6
    f8ac:	2200      	movs	r2, #0
    f8ae:	2104      	movs	r1, #4
    f8b0:	47b8      	blx	r7
	return user_op->status;
    f8b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    f8b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
    f8b8:	2001      	movs	r0, #1
}
    f8ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f8be:	bf00      	nop
    f8c0:	20001b80 	.word	0x20001b80

0000f8c4 <ticker_update>:
{
    f8c4:	b510      	push	{r4, lr}
    f8c6:	b088      	sub	sp, #32
    f8c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
    f8ca:	9400      	str	r4, [sp, #0]
{
    f8cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
    f8ce:	9401      	str	r4, [sp, #4]
{
    f8d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
    f8d2:	9402      	str	r4, [sp, #8]
{
    f8d4:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
    f8d8:	9403      	str	r4, [sp, #12]
{
    f8da:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
    f8de:	9404      	str	r4, [sp, #16]
{
    f8e0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
    f8e2:	9405      	str	r4, [sp, #20]
{
    f8e4:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
    f8e6:	9406      	str	r4, [sp, #24]
    f8e8:	2400      	movs	r4, #0
    f8ea:	9407      	str	r4, [sp, #28]
    f8ec:	f7ff ff94 	bl	f818 <ticker_update_ext>
}
    f8f0:	b008      	add	sp, #32
    f8f2:	bd10      	pop	{r4, pc}

0000f8f4 <ticker_stop>:
{
    f8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    f8f8:	4d1e      	ldr	r5, [pc, #120]	; (f974 <ticker_stop+0x80>)
	user = &instance->users[user_id];
    f8fa:	242c      	movs	r4, #44	; 0x2c
    f8fc:	fb04 5400 	mla	r4, r4, r0, r5
	struct ticker_instance *instance = &_instance[instance_index];
    f900:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
    f904:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
	user = &instance->users[user_id];
    f908:	6860      	ldr	r0, [r4, #4]
    f90a:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
	if (last >= user->count_user_op) {
    f90e:	f810 6031 	ldrb.w	r6, [r0, r1, lsl #3]
	last = user->last + 1;
    f912:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last == user->first) {
    f916:	7878      	ldrb	r0, [r7, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    f918:	eb05 058c 	add.w	r5, r5, ip, lsl #2
	last = user->last + 1;
    f91c:	f10e 0c01 	add.w	ip, lr, #1
    f920:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    f924:	4566      	cmp	r6, ip
    f926:	bf98      	it	ls
    f928:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    f92c:	4560      	cmp	r0, ip
    f92e:	d01d      	beq.n	f96c <ticker_stop+0x78>
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    f930:	4608      	mov	r0, r1
	user_op = &user->user_op[user->last];
    f932:	eb0e 064e 	add.w	r6, lr, lr, lsl #1
    f936:	6879      	ldr	r1, [r7, #4]
    f938:	eb0e 0e86 	add.w	lr, lr, r6, lsl #2
    f93c:	eb01 068e 	add.w	r6, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    f940:	f04f 0806 	mov.w	r8, #6
    f944:	f801 802e 	strb.w	r8, [r1, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
    f948:	62f3      	str	r3, [r6, #44]	; 0x2c
	user_op->op_context = op_context;
    f94a:	9b06      	ldr	r3, [sp, #24]
    f94c:	6333      	str	r3, [r6, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    f94e:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    f950:	7072      	strb	r2, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    f952:	62b3      	str	r3, [r6, #40]	; 0x28
	user->last = last;
    f954:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    f958:	e9d4 3708 	ldrd	r3, r7, [r4, #32]
    f95c:	4798      	blx	r3
    f95e:	462b      	mov	r3, r5
    f960:	2200      	movs	r2, #0
    f962:	2104      	movs	r1, #4
    f964:	47b8      	blx	r7
	return user_op->status;
    f966:	6ab0      	ldr	r0, [r6, #40]	; 0x28
}
    f968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    f96c:	2001      	movs	r0, #1
}
    f96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f972:	bf00      	nop
    f974:	20001b80 	.word	0x20001b80

0000f978 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    f978:	f009 bbc0 	b.w	190fc <cntr_cnt_get>

0000f97c <ll_addr_get>:
static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type > 1) {
    f97c:	2801      	cmp	r0, #1
    f97e:	d814      	bhi.n	f9aa <ll_addr_get+0x2e>
{
    f980:	b508      	push	{r3, lr}
    f982:	460b      	mov	r3, r1
		return NULL;
	}

	if (addr_type) {
    f984:	b948      	cbnz	r0, f99a <ll_addr_get+0x1e>
		}

		return rnd_addr;
	}

	if (bdaddr) {
    f986:	b131      	cbz	r1, f996 <ll_addr_get+0x1a>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    f988:	490a      	ldr	r1, [pc, #40]	; (f9b4 <ll_addr_get+0x38>)
    f98a:	2206      	movs	r2, #6
    f98c:	4618      	mov	r0, r3
    f98e:	f00f fda3 	bl	1f4d8 <memcpy>
	}

	return pub_addr;
    f992:	4808      	ldr	r0, [pc, #32]	; (f9b4 <ll_addr_get+0x38>)
}
    f994:	bd08      	pop	{r3, pc}
	return pub_addr;
    f996:	4807      	ldr	r0, [pc, #28]	; (f9b4 <ll_addr_get+0x38>)
}
    f998:	bd08      	pop	{r3, pc}
		if (bdaddr) {
    f99a:	b141      	cbz	r1, f9ae <ll_addr_get+0x32>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    f99c:	4906      	ldr	r1, [pc, #24]	; (f9b8 <ll_addr_get+0x3c>)
    f99e:	2206      	movs	r2, #6
    f9a0:	4618      	mov	r0, r3
    f9a2:	f00f fd99 	bl	1f4d8 <memcpy>
		return rnd_addr;
    f9a6:	4804      	ldr	r0, [pc, #16]	; (f9b8 <ll_addr_get+0x3c>)
}
    f9a8:	bd08      	pop	{r3, pc}
		return NULL;
    f9aa:	2000      	movs	r0, #0
}
    f9ac:	4770      	bx	lr
		return rnd_addr;
    f9ae:	4802      	ldr	r0, [pc, #8]	; (f9b8 <ll_addr_get+0x3c>)
}
    f9b0:	bd08      	pop	{r3, pc}
    f9b2:	bf00      	nop
    f9b4:	20001bac 	.word	0x20001bac
    f9b8:	20001bb4 	.word	0x20001bb4

0000f9bc <ll_addr_set>:

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
    f9bc:	b570      	push	{r4, r5, r6, lr}
    f9be:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
    f9c0:	2000      	movs	r0, #0
{
    f9c2:	460e      	mov	r6, r1
		if (ull_adv_is_enabled(0)) {
    f9c4:	f003 f93c 	bl	12c40 <ull_adv_is_enabled>
    f9c8:	b978      	cbnz	r0, f9ea <ll_addr_set+0x2e>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
    f9ca:	b13c      	cbz	r4, f9dc <ll_addr_set+0x20>
    f9cc:	4605      	mov	r5, r0
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    f9ce:	2206      	movs	r2, #6
    f9d0:	4631      	mov	r1, r6
    f9d2:	4807      	ldr	r0, [pc, #28]	; (f9f0 <ll_addr_set+0x34>)
    f9d4:	f00f fd80 	bl	1f4d8 <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
    f9d8:	4628      	mov	r0, r5
}
    f9da:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    f9dc:	2206      	movs	r2, #6
    f9de:	4631      	mov	r1, r6
    f9e0:	4804      	ldr	r0, [pc, #16]	; (f9f4 <ll_addr_set+0x38>)
    f9e2:	f00f fd79 	bl	1f4d8 <memcpy>
	return 0;
    f9e6:	4620      	mov	r0, r4
}
    f9e8:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    f9ea:	200c      	movs	r0, #12
}
    f9ec:	bd70      	pop	{r4, r5, r6, pc}
    f9ee:	bf00      	nop
    f9f0:	20001bb4 	.word	0x20001bb4
    f9f4:	20001bac 	.word	0x20001bac

0000f9f8 <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
    f9f8:	2802      	cmp	r0, #2
    f9fa:	d001      	beq.n	fa00 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
    f9fc:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
    f9fe:	4770      	bx	lr
{
    fa00:	b538      	push	{r3, r4, r5, lr}
    fa02:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
    fa04:	4608      	mov	r0, r1
    fa06:	461d      	mov	r5, r3
    fa08:	f003 ff2a 	bl	13860 <ll_connected_get>
			if (!conn) {
    fa0c:	b110      	cbz	r0, fa14 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
    fa0e:	2000      	movs	r0, #0
    fa10:	7028      	strb	r0, [r5, #0]
}
    fa12:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
    fa14:	4620      	mov	r0, r4
}
    fa16:	bd38      	pop	{r3, r4, r5, pc}

0000fa18 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
    fa18:	2300      	movs	r3, #0
    fa1a:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
    fa1c:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
    fa1e:	4770      	bx	lr

0000fa20 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
    fa20:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    fa22:	4802      	ldr	r0, [pc, #8]	; (fa2c <hci_driver_init+0xc>)
    fa24:	f7f9 fa5a 	bl	8edc <bt_hci_driver_register>

	return 0;
}
    fa28:	2000      	movs	r0, #0
    fa2a:	bd08      	pop	{r3, pc}
    fa2c:	000231a4 	.word	0x000231a4

0000fa30 <hci_driver_send>:
{
    fa30:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    fa32:	8983      	ldrh	r3, [r0, #12]
{
    fa34:	b083      	sub	sp, #12
	if (!buf->len) {
    fa36:	2b00      	cmp	r3, #0
    fa38:	d03a      	beq.n	fab0 <hci_driver_send+0x80>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    fa3a:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    fa3c:	4604      	mov	r4, r0
    fa3e:	b31b      	cbz	r3, fa88 <hci_driver_send+0x58>
    fa40:	2b02      	cmp	r3, #2
    fa42:	d00f      	beq.n	fa64 <hci_driver_send+0x34>
    fa44:	4921      	ldr	r1, [pc, #132]	; (facc <hci_driver_send+0x9c>)
    fa46:	4a22      	ldr	r2, [pc, #136]	; (fad0 <hci_driver_send+0xa0>)
		BT_ERR("Unknown HCI type %u", type);
    fa48:	4822      	ldr	r0, [pc, #136]	; (fad4 <hci_driver_send+0xa4>)
    fa4a:	1a52      	subs	r2, r2, r1
    fa4c:	08d2      	lsrs	r2, r2, #3
    fa4e:	0192      	lsls	r2, r2, #6
    fa50:	f042 0201 	orr.w	r2, r2, #1
    fa54:	4619      	mov	r1, r3
    fa56:	f00d ff74 	bl	1d942 <log_1>
		return -EINVAL;
    fa5a:	f06f 0515 	mvn.w	r5, #21
}
    fa5e:	4628      	mov	r0, r5
    fa60:	b003      	add	sp, #12
    fa62:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
    fa64:	a901      	add	r1, sp, #4
    fa66:	f000 ff45 	bl	108f4 <hci_acl_handle>
	if (evt) {
    fa6a:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
    fa6c:	4605      	mov	r5, r0
	if (evt) {
    fa6e:	b113      	cbz	r3, fa76 <hci_driver_send+0x46>
		bt_recv_prio(evt);
    fa70:	4618      	mov	r0, r3
    fa72:	f7f9 fa15 	bl	8ea0 <bt_recv_prio>
	if (!err) {
    fa76:	2d00      	cmp	r5, #0
    fa78:	d1f1      	bne.n	fa5e <hci_driver_send+0x2e>
		net_buf_unref(buf);
    fa7a:	4620      	mov	r0, r4
    fa7c:	f00a facc 	bl	1a018 <net_buf_unref>
    fa80:	2500      	movs	r5, #0
}
    fa82:	4628      	mov	r0, r5
    fa84:	b003      	add	sp, #12
    fa86:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    fa88:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
    fa8a:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    fa8c:	f000 fa52 	bl	ff34 <hci_cmd_handle>
	if (evt) {
    fa90:	2800      	cmp	r0, #0
    fa92:	d0f2      	beq.n	fa7a <hci_driver_send+0x4a>
		bt_recv_prio(evt);
    fa94:	f7f9 fa04 	bl	8ea0 <bt_recv_prio>
		if (node_rx) {
    fa98:	9d01      	ldr	r5, [sp, #4]
    fa9a:	2d00      	cmp	r5, #0
    fa9c:	d0ed      	beq.n	fa7a <hci_driver_send+0x4a>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    fa9e:	4628      	mov	r0, r5
    faa0:	f001 fb26 	bl	110f0 <hci_get_class>
    faa4:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
    faa6:	9901      	ldr	r1, [sp, #4]
    faa8:	480b      	ldr	r0, [pc, #44]	; (fad8 <hci_driver_send+0xa8>)
    faaa:	f012 f85e 	bl	21b6a <k_queue_append>
	if (!err) {
    faae:	e7e4      	b.n	fa7a <hci_driver_send+0x4a>
    fab0:	4b06      	ldr	r3, [pc, #24]	; (facc <hci_driver_send+0x9c>)
    fab2:	4907      	ldr	r1, [pc, #28]	; (fad0 <hci_driver_send+0xa0>)
		BT_ERR("Empty HCI packet");
    fab4:	4809      	ldr	r0, [pc, #36]	; (fadc <hci_driver_send+0xac>)
    fab6:	1ac9      	subs	r1, r1, r3
    fab8:	08c9      	lsrs	r1, r1, #3
    faba:	0189      	lsls	r1, r1, #6
    fabc:	f041 0101 	orr.w	r1, r1, #1
    fac0:	f00d ff30 	bl	1d924 <log_0>
		return -EINVAL;
    fac4:	f06f 0515 	mvn.w	r5, #21
    fac8:	e7c9      	b.n	fa5e <hci_driver_send+0x2e>
    faca:	bf00      	nop
    facc:	000225d8 	.word	0x000225d8
    fad0:	00022630 	.word	0x00022630
    fad4:	000230f8 	.word	0x000230f8
    fad8:	20000900 	.word	0x20000900
    fadc:	000230e4 	.word	0x000230e4

0000fae0 <recv_thread>:
{
    fae0:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
    fae2:	4d37      	ldr	r5, [pc, #220]	; (fbc0 <recv_thread+0xe0>)
		LL_ASSERT(0);
    fae4:	4f37      	ldr	r7, [pc, #220]	; (fbc4 <recv_thread+0xe4>)
    fae6:	4e38      	ldr	r6, [pc, #224]	; (fbc8 <recv_thread+0xe8>)
{
    fae8:	b083      	sub	sp, #12
    faea:	e015      	b.n	fb18 <recv_thread+0x38>
	switch (class) {
    faec:	2b00      	cmp	r3, #0
    faee:	d13c      	bne.n	fb6a <recv_thread+0x8a>
		LL_ASSERT(0);
    faf0:	4836      	ldr	r0, [pc, #216]	; (fbcc <recv_thread+0xec>)
    faf2:	23cf      	movs	r3, #207	; 0xcf
    faf4:	463a      	mov	r2, r7
    faf6:	4631      	mov	r1, r6
    faf8:	f00d fa9c 	bl	1d034 <printk>
    fafc:	4040      	eors	r0, r0
    fafe:	f380 8811 	msr	BASEPRI, r0
    fb02:	f04f 0003 	mov.w	r0, #3
    fb06:	df02      	svc	2
	node_rx->hdr.next = NULL;
    fb08:	9b01      	ldr	r3, [sp, #4]
    fb0a:	2200      	movs	r2, #0
    fb0c:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    fb0e:	a801      	add	r0, sp, #4
    fb10:	f002 f91c 	bl	11d4c <ll_rx_mem_release>
	z_impl_k_yield();
    fb14:	f00c fa24 	bl	1bf60 <z_impl_k_yield>
	return z_impl_k_queue_get(queue, timeout);
    fb18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fb1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fb20:	4628      	mov	r0, r5
    fb22:	f00b ff9d 	bl	1ba60 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    fb26:	2800      	cmp	r0, #0
    fb28:	d0f4      	beq.n	fb14 <recv_thread+0x34>
	uint8_t class = node_rx->hdr.user_meta;
    fb2a:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    fb2c:	9001      	str	r0, [sp, #4]
	switch (class) {
    fb2e:	2b04      	cmp	r3, #4
    fb30:	d9dc      	bls.n	faec <recv_thread+0xc>
    fb32:	2b05      	cmp	r3, #5
    fb34:	d1dc      	bne.n	faf0 <recv_thread+0x10>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    fb36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fb3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fb3e:	2003      	movs	r0, #3
    fb40:	f7f7 fff0 	bl	7b24 <bt_buf_get_rx>
    fb44:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    fb46:	4621      	mov	r1, r4
    fb48:	9801      	ldr	r0, [sp, #4]
    fb4a:	f000 ff99 	bl	10a80 <hci_acl_encode>
	node_rx->hdr.next = NULL;
    fb4e:	9b01      	ldr	r3, [sp, #4]
    fb50:	2200      	movs	r2, #0
    fb52:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    fb54:	a801      	add	r0, sp, #4
    fb56:	f002 f8f9 	bl	11d4c <ll_rx_mem_release>
		if (buf) {
    fb5a:	2c00      	cmp	r4, #0
    fb5c:	d0da      	beq.n	fb14 <recv_thread+0x34>
			if (buf->len) {
    fb5e:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    fb60:	4620      	mov	r0, r4
			if (buf->len) {
    fb62:	b1db      	cbz	r3, fb9c <recv_thread+0xbc>
				bt_recv(buf);
    fb64:	f7f9 f8f8 	bl	8d58 <bt_recv>
    fb68:	e7d4      	b.n	fb14 <recv_thread+0x34>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    fb6a:	2b02      	cmp	r3, #2
    fb6c:	d019      	beq.n	fba2 <recv_thread+0xc2>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    fb6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fb72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fb76:	2001      	movs	r0, #1
    fb78:	f7f7 ffd4 	bl	7b24 <bt_buf_get_rx>
    fb7c:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
    fb7e:	9801      	ldr	r0, [sp, #4]
		if (buf) {
    fb80:	b1cc      	cbz	r4, fbb6 <recv_thread+0xd6>
			hci_evt_encode(node_rx, buf);
    fb82:	4621      	mov	r1, r4
    fb84:	f000 ffb6 	bl	10af4 <hci_evt_encode>
	node_rx->hdr.next = NULL;
    fb88:	9b01      	ldr	r3, [sp, #4]
    fb8a:	2200      	movs	r2, #0
    fb8c:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    fb8e:	a801      	add	r0, sp, #4
    fb90:	f002 f8dc 	bl	11d4c <ll_rx_mem_release>
			if (buf->len) {
    fb94:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    fb96:	4620      	mov	r0, r4
			if (buf->len) {
    fb98:	2b00      	cmp	r3, #0
    fb9a:	d1e3      	bne.n	fb64 <recv_thread+0x84>
				net_buf_unref(buf);
    fb9c:	f00a fa3c 	bl	1a018 <net_buf_unref>
    fba0:	e7b8      	b.n	fb14 <recv_thread+0x34>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    fba2:	2200      	movs	r2, #0
    fba4:	2300      	movs	r3, #0
    fba6:	2101      	movs	r1, #1
    fba8:	2000      	movs	r0, #0
    fbaa:	f7f7 fff1 	bl	7b90 <bt_buf_get_evt>
    fbae:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
    fbb0:	9801      	ldr	r0, [sp, #4]
		if (buf) {
    fbb2:	2c00      	cmp	r4, #0
    fbb4:	d1e5      	bne.n	fb82 <recv_thread+0xa2>
	node_rx->hdr.next = NULL;
    fbb6:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
    fbb8:	a801      	add	r0, sp, #4
    fbba:	f002 f8c7 	bl	11d4c <ll_rx_mem_release>
		if (buf) {
    fbbe:	e7a9      	b.n	fb14 <recv_thread+0x34>
    fbc0:	20000900 	.word	0x20000900
    fbc4:	0002310c 	.word	0x0002310c
    fbc8:	0002314c 	.word	0x0002314c
    fbcc:	000230b4 	.word	0x000230b4

0000fbd0 <prio_recv_thread>:
{
    fbd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    fbd4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; fc8c <prio_recv_thread+0xbc>
				k_fifo_put(&recv_fifo, node_rx);
    fbd8:	4f2b      	ldr	r7, [pc, #172]	; (fc88 <prio_recv_thread+0xb8>)
{
    fbda:	b082      	sub	sp, #8
    fbdc:	e00c      	b.n	fbf8 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    fbde:	f7f7 ffd7 	bl	7b90 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    fbe2:	4622      	mov	r2, r4
    fbe4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    fbe8:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    fbea:	f001 fa69 	bl	110c0 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    fbee:	4620      	mov	r0, r4
    fbf0:	f7f9 f956 	bl	8ea0 <bt_recv_prio>
	z_impl_k_yield();
    fbf4:	f00c f9b4 	bl	1bf60 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    fbf8:	f10d 0102 	add.w	r1, sp, #2
    fbfc:	a801      	add	r0, sp, #4
    fbfe:	f001 fee7 	bl	119d0 <ll_rx_get>
    fc02:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    fc04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fc08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fc0c:	2100      	movs	r1, #0
    fc0e:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    fc10:	2c00      	cmp	r4, #0
    fc12:	d1e4      	bne.n	fbde <prio_recv_thread+0xe>
		if (node_rx) {
    fc14:	9b01      	ldr	r3, [sp, #4]
    fc16:	b193      	cbz	r3, fc3e <prio_recv_thread+0x6e>
			ll_rx_dequeue();
    fc18:	f001 ffc8 	bl	11bac <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    fc1c:	9e01      	ldr	r6, [sp, #4]
    fc1e:	4630      	mov	r0, r6
    fc20:	f001 fa66 	bl	110f0 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
    fc24:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    fc26:	7170      	strb	r0, [r6, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
    fc28:	796b      	ldrb	r3, [r5, #5]
    fc2a:	2b03      	cmp	r3, #3
    fc2c:	d102      	bne.n	fc34 <prio_recv_thread+0x64>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
    fc2e:	792b      	ldrb	r3, [r5, #4]
    fc30:	2b15      	cmp	r3, #21
    fc32:	d00c      	beq.n	fc4e <prio_recv_thread+0x7e>
				k_fifo_put(&recv_fifo, node_rx);
    fc34:	4629      	mov	r1, r5
    fc36:	4638      	mov	r0, r7
    fc38:	f011 ff97 	bl	21b6a <k_queue_append>
			continue;
    fc3c:	e7dc      	b.n	fbf8 <prio_recv_thread+0x28>
	return z_impl_k_sem_take(sem, timeout);
    fc3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fc42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fc46:	4640      	mov	r0, r8
    fc48:	f00c fad0 	bl	1c1ec <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    fc4c:	e7d4      	b.n	fbf8 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    fc4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fc52:	4621      	mov	r1, r4
    fc54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fc58:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
    fc5a:	88ee      	ldrh	r6, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    fc5c:	f7f7 ff98 	bl	7b90 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
    fc60:	4631      	mov	r1, r6
    fc62:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    fc64:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
    fc66:	f105 001c 	add.w	r0, r5, #28
    fc6a:	f000 fee1 	bl	10a30 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
    fc6e:	4630      	mov	r0, r6
    fc70:	f000 fefe 	bl	10a70 <hci_disconn_complete_process>
				bt_recv_prio(buf);
    fc74:	4620      	mov	r0, r4
			if (buf) {
    fc76:	b124      	cbz	r4, fc82 <prio_recv_thread+0xb2>
				bt_recv_prio(buf);
    fc78:	f7f9 f912 	bl	8ea0 <bt_recv_prio>
					net_buf_unref(buf);
    fc7c:	4620      	mov	r0, r4
    fc7e:	f00a f9cb 	bl	1a018 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
    fc82:	9d01      	ldr	r5, [sp, #4]
    fc84:	e7d6      	b.n	fc34 <prio_recv_thread+0x64>
    fc86:	bf00      	nop
    fc88:	20000900 	.word	0x20000900
    fc8c:	200008d0 	.word	0x200008d0

0000fc90 <hci_driver_open>:
{
    fc90:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
    fc92:	4821      	ldr	r0, [pc, #132]	; (fd18 <hci_driver_open+0x88>)
{
    fc94:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
    fc96:	f001 fd97 	bl	117c8 <ll_init>
	if (err) {
    fc9a:	4604      	mov	r4, r0
    fc9c:	bb70      	cbnz	r0, fcfc <hci_driver_open+0x6c>
	hci_init(NULL);
    fc9e:	f7f2 fae7 	bl	2270 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    fca2:	2600      	movs	r6, #0
    fca4:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    fca6:	f06f 0209 	mvn.w	r2, #9
    fcaa:	e9cd 2403 	strd	r2, r4, [sp, #12]
    fcae:	e9cd 6706 	strd	r6, r7, [sp, #24]
    fcb2:	e9cd 4401 	strd	r4, r4, [sp, #4]
    fcb6:	4b19      	ldr	r3, [pc, #100]	; (fd1c <hci_driver_open+0x8c>)
    fcb8:	4919      	ldr	r1, [pc, #100]	; (fd20 <hci_driver_open+0x90>)
    fcba:	9400      	str	r4, [sp, #0]
    fcbc:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    fcc0:	4818      	ldr	r0, [pc, #96]	; (fd24 <hci_driver_open+0x94>)
    fcc2:	f00c fb05 	bl	1c2d0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    fcc6:	4918      	ldr	r1, [pc, #96]	; (fd28 <hci_driver_open+0x98>)
    fcc8:	4816      	ldr	r0, [pc, #88]	; (fd24 <hci_driver_open+0x94>)
    fcca:	f012 f8ca 	bl	21e62 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    fcce:	f06f 0207 	mvn.w	r2, #7
    fcd2:	e9cd 2403 	strd	r2, r4, [sp, #12]
    fcd6:	e9cd 6706 	strd	r6, r7, [sp, #24]
    fcda:	e9cd 4401 	strd	r4, r4, [sp, #4]
    fcde:	4b13      	ldr	r3, [pc, #76]	; (fd2c <hci_driver_open+0x9c>)
    fce0:	4913      	ldr	r1, [pc, #76]	; (fd30 <hci_driver_open+0xa0>)
    fce2:	9400      	str	r4, [sp, #0]
    fce4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    fce8:	4812      	ldr	r0, [pc, #72]	; (fd34 <hci_driver_open+0xa4>)
    fcea:	f00c faf1 	bl	1c2d0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    fcee:	4912      	ldr	r1, [pc, #72]	; (fd38 <hci_driver_open+0xa8>)
    fcf0:	4810      	ldr	r0, [pc, #64]	; (fd34 <hci_driver_open+0xa4>)
    fcf2:	f012 f8b6 	bl	21e62 <z_impl_k_thread_name_set>
}
    fcf6:	4620      	mov	r0, r4
    fcf8:	b008      	add	sp, #32
    fcfa:	bdd0      	pop	{r4, r6, r7, pc}
    fcfc:	4b0f      	ldr	r3, [pc, #60]	; (fd3c <hci_driver_open+0xac>)
    fcfe:	4a10      	ldr	r2, [pc, #64]	; (fd40 <hci_driver_open+0xb0>)
		BT_ERR("LL initialization failed: %d", err);
    fd00:	4810      	ldr	r0, [pc, #64]	; (fd44 <hci_driver_open+0xb4>)
    fd02:	1ad2      	subs	r2, r2, r3
    fd04:	08d2      	lsrs	r2, r2, #3
    fd06:	0192      	lsls	r2, r2, #6
    fd08:	f042 0201 	orr.w	r2, r2, #1
    fd0c:	4621      	mov	r1, r4
    fd0e:	f00d fe18 	bl	1d942 <log_1>
}
    fd12:	4620      	mov	r0, r4
    fd14:	b008      	add	sp, #32
    fd16:	bdd0      	pop	{r4, r6, r7, pc}
    fd18:	200008d0 	.word	0x200008d0
    fd1c:	0000fbd1 	.word	0x0000fbd1
    fd20:	20004060 	.word	0x20004060
    fd24:	20001080 	.word	0x20001080
    fd28:	00023170 	.word	0x00023170
    fd2c:	0000fae1 	.word	0x0000fae1
    fd30:	20004220 	.word	0x20004220
    fd34:	20001148 	.word	0x20001148
    fd38:	0002317c 	.word	0x0002317c
    fd3c:	000225d8 	.word	0x000225d8
    fd40:	00022630 	.word	0x00022630
    fd44:	00023150 	.word	0x00023150

0000fd48 <le_remote_feat_complete>:
{
    fd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fd4a:	4c19      	ldr	r4, [pc, #100]	; (fdb0 <le_remote_feat_complete+0x68>)
    fd4c:	6864      	ldr	r4, [r4, #4]
    fd4e:	00a4      	lsls	r4, r4, #2
    fd50:	d504      	bpl.n	fd5c <le_remote_feat_complete+0x14>
    fd52:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    fd54:	4a17      	ldr	r2, [pc, #92]	; (fdb4 <le_remote_feat_complete+0x6c>)
    fd56:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    fd58:	0712      	lsls	r2, r2, #28
    fd5a:	d400      	bmi.n	fd5e <le_remote_feat_complete+0x16>
}
    fd5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fd5e:	f103 0408 	add.w	r4, r3, #8
    fd62:	4607      	mov	r7, r0
    fd64:	460e      	mov	r6, r1
    fd66:	4620      	mov	r0, r4
    fd68:	2102      	movs	r1, #2
    fd6a:	f011 fc8f 	bl	2168c <net_buf_simple_add>
	hdr->evt = evt;
    fd6e:	233e      	movs	r3, #62	; 0x3e
    fd70:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    fd72:	230c      	movs	r3, #12
    fd74:	7043      	strb	r3, [r0, #1]
    fd76:	2101      	movs	r1, #1
    fd78:	4620      	mov	r0, r4
    fd7a:	f011 fc87 	bl	2168c <net_buf_simple_add>
    fd7e:	4603      	mov	r3, r0
	me->subevent = subevt;
    fd80:	2204      	movs	r2, #4
    fd82:	701a      	strb	r2, [r3, #0]
    fd84:	4620      	mov	r0, r4
    fd86:	210b      	movs	r1, #11
    fd88:	f011 fc80 	bl	2168c <net_buf_simple_add>
		memcpy(&sep->features[0],
    fd8c:	2208      	movs	r2, #8
	sep->status = status;
    fd8e:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    fd90:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
    fd94:	b92f      	cbnz	r7, fda2 <le_remote_feat_complete+0x5a>
		memcpy(&sep->features[0],
    fd96:	1d31      	adds	r1, r6, #4
    fd98:	3003      	adds	r0, #3
}
    fd9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
    fd9e:	f00f bb9b 	b.w	1f4d8 <memcpy>
}
    fda2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    fda6:	2100      	movs	r1, #0
    fda8:	3003      	adds	r0, #3
    fdaa:	f00f bbc0 	b.w	1f52e <memset>
    fdae:	bf00      	nop
    fdb0:	20000128 	.word	0x20000128
    fdb4:	20000130 	.word	0x20000130

0000fdb8 <hci_vendor_cmd_handle_common>:
{
    fdb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    fdba:	3801      	subs	r0, #1
    fdbc:	b087      	sub	sp, #28
    fdbe:	4615      	mov	r5, r2
    fdc0:	2809      	cmp	r0, #9
    fdc2:	d806      	bhi.n	fdd2 <hci_vendor_cmd_handle_common+0x1a>
    fdc4:	e8df f000 	tbb	[pc, r0]
    fdc8:	05442709 	.word	0x05442709
    fdcc:	6c055805 	.word	0x6c055805
    fdd0:	9e89      	.short	0x9e89
	return 0;
    fdd2:	f06f 0015 	mvn.w	r0, #21
}
    fdd6:	b007      	add	sp, #28
    fdd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    fdda:	4b54      	ldr	r3, [pc, #336]	; (ff2c <hci_vendor_cmd_handle_common+0x174>)
    fddc:	210d      	movs	r1, #13
    fdde:	8818      	ldrh	r0, [r3, #0]
    fde0:	f00f fdee 	bl	1f9c0 <bt_hci_cmd_complete_create>
    fde4:	210d      	movs	r1, #13
    fde6:	6028      	str	r0, [r5, #0]
    fde8:	3008      	adds	r0, #8
    fdea:	f011 fc4f 	bl	2168c <net_buf_simple_add>
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    fdee:	2405      	movs	r4, #5
	rp->status = 0x00;
    fdf0:	2100      	movs	r1, #0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    fdf2:	2302      	movs	r3, #2
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    fdf4:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    fdf6:	7001      	strb	r1, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    fdf8:	7043      	strb	r3, [r0, #1]
    fdfa:	7081      	strb	r1, [r0, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    fdfc:	70c3      	strb	r3, [r0, #3]
    fdfe:	7101      	strb	r1, [r0, #4]
	rp->fw_variant = 0U;
    fe00:	7141      	strb	r1, [r0, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    fe02:	7183      	strb	r3, [r0, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    fe04:	71c4      	strb	r4, [r0, #7]
    fe06:	7201      	strb	r1, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    fe08:	7242      	strb	r2, [r0, #9]
    fe0a:	7281      	strb	r1, [r0, #10]
    fe0c:	72c1      	strb	r1, [r0, #11]
    fe0e:	7301      	strb	r1, [r0, #12]
	return 0;
    fe10:	4608      	mov	r0, r1
}
    fe12:	b007      	add	sp, #28
    fe14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    fe16:	4b45      	ldr	r3, [pc, #276]	; (ff2c <hci_vendor_cmd_handle_common+0x174>)
    fe18:	2141      	movs	r1, #65	; 0x41
    fe1a:	8818      	ldrh	r0, [r3, #0]
    fe1c:	f00f fdd0 	bl	1f9c0 <bt_hci_cmd_complete_create>
    fe20:	2141      	movs	r1, #65	; 0x41
    fe22:	6028      	str	r0, [r5, #0]
    fe24:	3008      	adds	r0, #8
    fe26:	f011 fc31 	bl	2168c <net_buf_simple_add>
	rp->status = 0x00;
    fe2a:	2400      	movs	r4, #0
    fe2c:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    fe2e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    fe30:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    fe34:	4621      	mov	r1, r4
    fe36:	f00f fb7a 	bl	1f52e <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    fe3a:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    fe3c:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
    fe3e:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
    fe42:	f043 0303 	orr.w	r3, r3, #3
	return 0;
    fe46:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
    fe48:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    fe4a:	70ab      	strb	r3, [r5, #2]
}
    fe4c:	b007      	add	sp, #28
    fe4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    fe50:	4b36      	ldr	r3, [pc, #216]	; (ff2c <hci_vendor_cmd_handle_common+0x174>)
    fe52:	2109      	movs	r1, #9
    fe54:	8818      	ldrh	r0, [r3, #0]
    fe56:	f00f fdb3 	bl	1f9c0 <bt_hci_cmd_complete_create>
    fe5a:	2109      	movs	r1, #9
    fe5c:	6028      	str	r0, [r5, #0]
    fe5e:	3008      	adds	r0, #8
    fe60:	f011 fc14 	bl	2168c <net_buf_simple_add>
	rp->status = 0x00;
    fe64:	2400      	movs	r4, #0
    fe66:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    fe6a:	2208      	movs	r2, #8
    fe6c:	4621      	mov	r1, r4
    fe6e:	f00f fb5e 	bl	1f52e <memset>
	return 0;
    fe72:	4620      	mov	r0, r4
}
    fe74:	b007      	add	sp, #28
    fe76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    fe78:	6889      	ldr	r1, [r1, #8]
    fe7a:	2000      	movs	r0, #0
    fe7c:	f7ff fd9e 	bl	f9bc <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    fe80:	4b2a      	ldr	r3, [pc, #168]	; (ff2c <hci_vendor_cmd_handle_common+0x174>)
    fe82:	2101      	movs	r1, #1
    fe84:	8818      	ldrh	r0, [r3, #0]
    fe86:	f00f fd9b 	bl	1f9c0 <bt_hci_cmd_complete_create>
    fe8a:	2101      	movs	r1, #1
    fe8c:	4604      	mov	r4, r0
    fe8e:	3008      	adds	r0, #8
    fe90:	f011 fbfc 	bl	2168c <net_buf_simple_add>
	ccst->status = status;
    fe94:	2100      	movs	r1, #0
    fe96:	7001      	strb	r1, [r0, #0]
	return 0;
    fe98:	4608      	mov	r0, r1
	*evt = cmd_complete_status(0x00);
    fe9a:	602c      	str	r4, [r5, #0]
}
    fe9c:	b007      	add	sp, #28
    fe9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
    fea0:	4e23      	ldr	r6, [pc, #140]	; (ff30 <hci_vendor_cmd_handle_common+0x178>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    fea2:	4f22      	ldr	r7, [pc, #136]	; (ff2c <hci_vendor_cmd_handle_common+0x174>)
	const char build_info[] = HCI_VS_BUILD_INFO;
    fea4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    fea6:	f10d 0c04 	add.w	ip, sp, #4
    feaa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    feae:	6833      	ldr	r3, [r6, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    feb0:	8838      	ldrh	r0, [r7, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
    feb2:	f8ac 3000 	strh.w	r3, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    feb6:	2113      	movs	r1, #19
    feb8:	f00f fd82 	bl	1f9c0 <bt_hci_cmd_complete_create>
    febc:	2113      	movs	r1, #19
    febe:	6028      	str	r0, [r5, #0]
    fec0:	3008      	adds	r0, #8
    fec2:	f011 fbe3 	bl	2168c <net_buf_simple_add>
	rp->status = 0x00;
    fec6:	2400      	movs	r4, #0
    fec8:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    fecc:	2212      	movs	r2, #18
    fece:	a901      	add	r1, sp, #4
    fed0:	f00f fb02 	bl	1f4d8 <memcpy>
	return 0;
    fed4:	4620      	mov	r0, r4
}
    fed6:	b007      	add	sp, #28
    fed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    feda:	4b14      	ldr	r3, [pc, #80]	; (ff2c <hci_vendor_cmd_handle_common+0x174>)
    fedc:	2118      	movs	r1, #24
    fede:	8818      	ldrh	r0, [r3, #0]
    fee0:	f00f fd6e 	bl	1f9c0 <bt_hci_cmd_complete_create>
    fee4:	2118      	movs	r1, #24
    fee6:	6028      	str	r0, [r5, #0]
    fee8:	3008      	adds	r0, #8
    feea:	f011 fbcf 	bl	2168c <net_buf_simple_add>
	rp->status = 0x00;
    feee:	2400      	movs	r4, #0
    fef0:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    fef2:	2101      	movs	r1, #1
	rp->status = 0x00;
    fef4:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    fef8:	f009 ff14 	bl	19d24 <hci_vendor_read_static_addr>
    fefc:	7068      	strb	r0, [r5, #1]
	return 0;
    fefe:	4620      	mov	r0, r4
}
    ff00:	b007      	add	sp, #28
    ff02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ff04:	4b09      	ldr	r3, [pc, #36]	; (ff2c <hci_vendor_cmd_handle_common+0x174>)
    ff06:	2121      	movs	r1, #33	; 0x21
    ff08:	8818      	ldrh	r0, [r3, #0]
    ff0a:	f00f fd59 	bl	1f9c0 <bt_hci_cmd_complete_create>
    ff0e:	2121      	movs	r1, #33	; 0x21
    ff10:	6028      	str	r0, [r5, #0]
    ff12:	3008      	adds	r0, #8
    ff14:	f011 fbba 	bl	2168c <net_buf_simple_add>
	rp->status = 0x00;
    ff18:	4601      	mov	r1, r0
    ff1a:	2400      	movs	r4, #0
    ff1c:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
    ff20:	3001      	adds	r0, #1
    ff22:	f009 ff73 	bl	19e0c <hci_vendor_read_key_hierarchy_roots>
	return 0;
    ff26:	4620      	mov	r0, r4
}
    ff28:	b007      	add	sp, #28
    ff2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ff2c:	20002daa 	.word	0x20002daa
    ff30:	000231b8 	.word	0x000231b8

0000ff34 <hci_cmd_handle>:
{
    ff34:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    ff36:	8983      	ldrh	r3, [r0, #12]
{
    ff38:	b08f      	sub	sp, #60	; 0x3c
	struct net_buf *evt = NULL;
    ff3a:	2400      	movs	r4, #0
	if (cmd->len < sizeof(*chdr)) {
    ff3c:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
    ff3e:	9409      	str	r4, [sp, #36]	; 0x24
	if (cmd->len < sizeof(*chdr)) {
    ff40:	f240 811e 	bls.w	10180 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x181>
	return net_buf_simple_pull_mem(&buf->b, len);
    ff44:	4605      	mov	r5, r0
    ff46:	2103      	movs	r1, #3
    ff48:	3008      	adds	r0, #8
    ff4a:	f011 fbc6 	bl	216da <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    ff4e:	89a9      	ldrh	r1, [r5, #12]
    ff50:	7882      	ldrb	r2, [r0, #2]
    ff52:	4291      	cmp	r1, r2
    ff54:	f0c0 8152 	bcc.w	101fc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1fd>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    ff58:	8802      	ldrh	r2, [r0, #0]
    ff5a:	4ebd      	ldr	r6, [pc, #756]	; (10250 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x251>)
	switch (BT_OGF(_opcode)) {
    ff5c:	f3c2 2385 	ubfx	r3, r2, #10, #6
    ff60:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
    ff62:	8032      	strh	r2, [r6, #0]
    ff64:	b290      	uxth	r0, r2
	ocf = BT_OCF(_opcode);
    ff66:	f3c2 0409 	ubfx	r4, r2, #0, #10
	switch (BT_OGF(_opcode)) {
    ff6a:	d809      	bhi.n	ff80 <hci_cmd_handle+0x4c>
    ff6c:	b1a3      	cbz	r3, ff98 <hci_cmd_handle+0x64>
    ff6e:	3b01      	subs	r3, #1
    ff70:	2b07      	cmp	r3, #7
    ff72:	d811      	bhi.n	ff98 <hci_cmd_handle+0x64>
    ff74:	e8df f003 	tbb	[pc, r3]
    ff78:	eac81017 	.word	0xeac81017
    ff7c:	26101010 	.word	0x26101010
    ff80:	2b3f      	cmp	r3, #63	; 0x3f
    ff82:	d109      	bne.n	ff98 <hci_cmd_handle+0x64>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    ff84:	4629      	mov	r1, r5
    ff86:	aa09      	add	r2, sp, #36	; 0x24
    ff88:	4620      	mov	r0, r4
    ff8a:	f7ff ff15 	bl	fdb8 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    ff8e:	3016      	adds	r0, #22
	return evt;
    ff90:	bf18      	it	ne
    ff92:	9d09      	ldrne	r5, [sp, #36]	; 0x24
	if (err == -EINVAL) {
    ff94:	d104      	bne.n	ffa0 <hci_cmd_handle+0x6c>
	return bt_hci_cmd_status_create(_opcode, status);
    ff96:	8830      	ldrh	r0, [r6, #0]
    ff98:	2101      	movs	r1, #1
    ff9a:	f00f fd23 	bl	1f9e4 <bt_hci_cmd_status_create>
    ff9e:	4605      	mov	r5, r0
}
    ffa0:	4628      	mov	r0, r5
    ffa2:	b00f      	add	sp, #60	; 0x3c
    ffa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
    ffa6:	2c06      	cmp	r4, #6
    ffa8:	f000 843f 	beq.w	1082a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x82b>
    ffac:	2c1d      	cmp	r4, #29
    ffae:	d1f3      	bne.n	ff98 <hci_cmd_handle+0x64>
	handle = sys_le16_to_cpu(cmd->handle);
    ffb0:	68ab      	ldr	r3, [r5, #8]
	status = ll_version_ind_send(handle);
    ffb2:	8818      	ldrh	r0, [r3, #0]
    ffb4:	f003 fdda 	bl	13b6c <ll_version_ind_send>
    ffb8:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    ffba:	8830      	ldrh	r0, [r6, #0]
    ffbc:	f00f fd12 	bl	1f9e4 <bt_hci_cmd_status_create>
    ffc0:	4605      	mov	r5, r0
}
    ffc2:	e7ed      	b.n	ffa0 <hci_cmd_handle+0x6c>
	switch (ocf) {
    ffc4:	1e62      	subs	r2, r4, #1
    ffc6:	2a4d      	cmp	r2, #77	; 0x4d
    ffc8:	d8e6      	bhi.n	ff98 <hci_cmd_handle+0x64>
    ffca:	a301      	add	r3, pc, #4	; (adr r3, ffd0 <hci_cmd_handle+0x9c>)
    ffcc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    ffd0:	00010557 	.word	0x00010557
    ffd4:	000105c5 	.word	0x000105c5
    ffd8:	00010589 	.word	0x00010589
    ffdc:	0000ff99 	.word	0x0000ff99
    ffe0:	0001057f 	.word	0x0001057f
    ffe4:	00010563 	.word	0x00010563
    ffe8:	00010643 	.word	0x00010643
    ffec:	00010637 	.word	0x00010637
    fff0:	0001062b 	.word	0x0001062b
    fff4:	00010621 	.word	0x00010621
    fff8:	0000ff99 	.word	0x0000ff99
    fffc:	0000ff99 	.word	0x0000ff99
   10000:	0000ff99 	.word	0x0000ff99
   10004:	0000ff99 	.word	0x0000ff99
   10008:	000105ff 	.word	0x000105ff
   1000c:	000105f9 	.word	0x000105f9
   10010:	000105f1 	.word	0x000105f1
   10014:	000105e9 	.word	0x000105e9
   10018:	00010803 	.word	0x00010803
   1001c:	0000ff99 	.word	0x0000ff99
   10020:	000107d7 	.word	0x000107d7
   10024:	000107c1 	.word	0x000107c1
   10028:	0001078b 	.word	0x0001078b
   1002c:	00010769 	.word	0x00010769
   10030:	0000ff99 	.word	0x0000ff99
   10034:	0001075f 	.word	0x0001075f
   10038:	0001074f 	.word	0x0001074f
   1003c:	00010719 	.word	0x00010719
   10040:	0000ff99 	.word	0x0000ff99
   10044:	0000ff99 	.word	0x0000ff99
   10048:	0000ff99 	.word	0x0000ff99
   1004c:	00010703 	.word	0x00010703
   10050:	000106cd 	.word	0x000106cd
   10054:	000106bd 	.word	0x000106bd
   10058:	00010687 	.word	0x00010687
   1005c:	0001067b 	.word	0x0001067b
   10060:	0000ff99 	.word	0x0000ff99
   10064:	0000ff99 	.word	0x0000ff99
   10068:	0001066d 	.word	0x0001066d
   1006c:	00010665 	.word	0x00010665
   10070:	0001065f 	.word	0x0001065f
   10074:	000104db 	.word	0x000104db
   10078:	000104ad 	.word	0x000104ad
   1007c:	0001047f 	.word	0x0001047f
   10080:	00010475 	.word	0x00010475
   10084:	00010549 	.word	0x00010549
   10088:	000104fd 	.word	0x000104fd
   1008c:	0001041b 	.word	0x0001041b
   10090:	000103fd 	.word	0x000103fd
   10094:	000103a1 	.word	0x000103a1
   10098:	0000ff99 	.word	0x0000ff99
   1009c:	0000ff99 	.word	0x0000ff99
   100a0:	0000ff99 	.word	0x0000ff99
   100a4:	0000ff99 	.word	0x0000ff99
   100a8:	0000ff99 	.word	0x0000ff99
   100ac:	0000ff99 	.word	0x0000ff99
   100b0:	0000ff99 	.word	0x0000ff99
   100b4:	0000ff99 	.word	0x0000ff99
   100b8:	0000ff99 	.word	0x0000ff99
   100bc:	0000ff99 	.word	0x0000ff99
   100c0:	0000ff99 	.word	0x0000ff99
   100c4:	0000ff99 	.word	0x0000ff99
   100c8:	0000ff99 	.word	0x0000ff99
   100cc:	0000ff99 	.word	0x0000ff99
   100d0:	0000ff99 	.word	0x0000ff99
   100d4:	0000ff99 	.word	0x0000ff99
   100d8:	0000ff99 	.word	0x0000ff99
   100dc:	0000ff99 	.word	0x0000ff99
   100e0:	0000ff99 	.word	0x0000ff99
   100e4:	0000ff99 	.word	0x0000ff99
   100e8:	0000ff99 	.word	0x0000ff99
   100ec:	0000ff99 	.word	0x0000ff99
   100f0:	0000ff99 	.word	0x0000ff99
   100f4:	0000ff99 	.word	0x0000ff99
   100f8:	0001037d 	.word	0x0001037d
   100fc:	0000ff99 	.word	0x0000ff99
   10100:	0000ff99 	.word	0x0000ff99
   10104:	0001035b 	.word	0x0001035b
	switch (ocf) {
   10108:	2c63      	cmp	r4, #99	; 0x63
   1010a:	f000 839a 	beq.w	10842 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x843>
   1010e:	d859      	bhi.n	101c4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1c5>
   10110:	2c03      	cmp	r4, #3
   10112:	f000 839d 	beq.w	10850 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x851>
   10116:	2c2d      	cmp	r4, #45	; 0x2d
   10118:	d140      	bne.n	1019c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x19d>
		read_tx_power_level(cmd, evt);
   1011a:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1011c:	2104      	movs	r1, #4
	type = cmd->type;
   1011e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
   10120:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
   10122:	9205      	str	r2, [sp, #20]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10124:	f00f fc4c 	bl	1f9c0 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   10128:	2104      	movs	r1, #4
   1012a:	9009      	str	r0, [sp, #36]	; 0x24
   1012c:	3008      	adds	r0, #8
   1012e:	f011 faad 	bl	2168c <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
   10132:	b2b5      	uxth	r5, r6
   10134:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   10136:	1cc3      	adds	r3, r0, #3
   10138:	4629      	mov	r1, r5
   1013a:	9a05      	ldr	r2, [sp, #20]
   1013c:	2002      	movs	r0, #2
   1013e:	f7ff fc5b 	bl	f9f8 <ll_tx_pwr_lvl_get>
	rp->status = status;
   10142:	7020      	strb	r0, [r4, #0]
	return evt;
   10144:	9d09      	ldr	r5, [sp, #36]	; 0x24
	rp->handle = sys_cpu_to_le16(handle);
   10146:	f8a4 6001 	strh.w	r6, [r4, #1]
}
   1014a:	e729      	b.n	ffa0 <hci_cmd_handle+0x6c>
	switch (ocf) {
   1014c:	1e62      	subs	r2, r4, #1
   1014e:	2a08      	cmp	r2, #8
   10150:	f63f af22 	bhi.w	ff98 <hci_cmd_handle+0x64>
   10154:	a301      	add	r3, pc, #4	; (adr r3, 1015c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x15d>)
   10156:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   1015a:	bf00      	nop
   1015c:	00010325 	.word	0x00010325
   10160:	00010269 	.word	0x00010269
   10164:	00010227 	.word	0x00010227
   10168:	0000ff99 	.word	0x0000ff99
   1016c:	0000ff99 	.word	0x0000ff99
   10170:	0000ff99 	.word	0x0000ff99
   10174:	0000ff99 	.word	0x0000ff99
   10178:	0000ff99 	.word	0x0000ff99
   1017c:	00010205 	.word	0x00010205
   10180:	4934      	ldr	r1, [pc, #208]	; (10254 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x255>)
   10182:	4b35      	ldr	r3, [pc, #212]	; (10258 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x259>)
		BT_ERR("No HCI Command header");
   10184:	4835      	ldr	r0, [pc, #212]	; (1025c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x25d>)
   10186:	1ac9      	subs	r1, r1, r3
   10188:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI CMD packet length");
   1018a:	0189      	lsls	r1, r1, #6
   1018c:	f041 0101 	orr.w	r1, r1, #1
   10190:	f00d fbc8 	bl	1d924 <log_0>
		return NULL;
   10194:	4625      	mov	r5, r4
}
   10196:	4628      	mov	r0, r5
   10198:	b00f      	add	sp, #60	; 0x3c
   1019a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   1019c:	2c01      	cmp	r4, #1
   1019e:	f47f aefb 	bne.w	ff98 <hci_cmd_handle+0x64>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   101a2:	68aa      	ldr	r2, [r5, #8]
	event_mask = sys_get_le64(cmd->events);
   101a4:	4b2e      	ldr	r3, [pc, #184]	; (10260 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x261>)
   101a6:	6811      	ldr	r1, [r2, #0]
   101a8:	6852      	ldr	r2, [r2, #4]
   101aa:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   101ac:	2101      	movs	r1, #1
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   101ae:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   101b0:	f00f fc06 	bl	1f9c0 <bt_hci_cmd_complete_create>
   101b4:	2101      	movs	r1, #1
   101b6:	4605      	mov	r5, r0
   101b8:	3008      	adds	r0, #8
   101ba:	f011 fa67 	bl	2168c <net_buf_simple_add>
	ccst->status = status;
   101be:	2300      	movs	r3, #0
   101c0:	7003      	strb	r3, [r0, #0]
}
   101c2:	e6ed      	b.n	ffa0 <hci_cmd_handle+0x6c>
	switch (ocf) {
   101c4:	2c7b      	cmp	r4, #123	; 0x7b
   101c6:	f000 8365 	beq.w	10894 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x895>
   101ca:	2c7c      	cmp	r4, #124	; 0x7c
   101cc:	f47f aee4 	bne.w	ff98 <hci_cmd_handle+0x64>
		write_auth_payload_timeout(cmd, evt);
   101d0:	68ab      	ldr	r3, [r5, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   101d2:	881f      	ldrh	r7, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   101d4:	8859      	ldrh	r1, [r3, #2]
   101d6:	b2b8      	uxth	r0, r7
   101d8:	f003 fe02 	bl	13de0 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   101dc:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   101de:	2103      	movs	r1, #3
   101e0:	8830      	ldrh	r0, [r6, #0]
   101e2:	f00f fbed 	bl	1f9c0 <bt_hci_cmd_complete_create>
   101e6:	2103      	movs	r1, #3
   101e8:	4603      	mov	r3, r0
   101ea:	3008      	adds	r0, #8
   101ec:	9309      	str	r3, [sp, #36]	; 0x24
   101ee:	f011 fa4d 	bl	2168c <net_buf_simple_add>
	rp->status = status;
   101f2:	7004      	strb	r4, [r0, #0]
	return evt;
   101f4:	9d09      	ldr	r5, [sp, #36]	; 0x24
	rp->handle = sys_cpu_to_le16(handle);
   101f6:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (err == -EINVAL) {
   101fa:	e6d1      	b.n	ffa0 <hci_cmd_handle+0x6c>
   101fc:	4915      	ldr	r1, [pc, #84]	; (10254 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x255>)
   101fe:	4b16      	ldr	r3, [pc, #88]	; (10258 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x259>)
		BT_ERR("Invalid HCI CMD packet length");
   10200:	4818      	ldr	r0, [pc, #96]	; (10264 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x265>)
   10202:	e7c0      	b.n	10186 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x187>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10204:	2107      	movs	r1, #7
   10206:	f00f fbdb 	bl	1f9c0 <bt_hci_cmd_complete_create>
   1020a:	2107      	movs	r1, #7
   1020c:	4603      	mov	r3, r0
   1020e:	3008      	adds	r0, #8
   10210:	9309      	str	r3, [sp, #36]	; 0x24
   10212:	f011 fa3b 	bl	2168c <net_buf_simple_add>
	rp->status = 0x00;
   10216:	4601      	mov	r1, r0
   10218:	2000      	movs	r0, #0
   1021a:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   1021e:	f7ff fbad 	bl	f97c <ll_addr_get>
	return evt;
   10222:	9d09      	ldr	r5, [sp, #36]	; 0x24
   10224:	e6bc      	b.n	ffa0 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10226:	2109      	movs	r1, #9
   10228:	f00f fbca 	bl	1f9c0 <bt_hci_cmd_complete_create>
   1022c:	2109      	movs	r1, #9
   1022e:	4603      	mov	r3, r0
   10230:	3008      	adds	r0, #8
   10232:	9309      	str	r3, [sp, #36]	; 0x24
   10234:	f011 fa2a 	bl	2168c <net_buf_simple_add>
	rp->status = 0x00;
   10238:	2100      	movs	r1, #0
   1023a:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1023c:	2208      	movs	r2, #8
	rp->status = 0x00;
   1023e:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   10242:	f00f f974 	bl	1f52e <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   10246:	2360      	movs	r3, #96	; 0x60
	return evt;
   10248:	9d09      	ldr	r5, [sp, #36]	; 0x24
	rp->features[4] = (1 << 5) | (1 << 6);
   1024a:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
   1024c:	e6a8      	b.n	ffa0 <hci_cmd_handle+0x6c>
   1024e:	bf00      	nop
   10250:	20002daa 	.word	0x20002daa
   10254:	00022628 	.word	0x00022628
   10258:	000225d8 	.word	0x000225d8
   1025c:	000231cc 	.word	0x000231cc
   10260:	20000128 	.word	0x20000128
   10264:	000231e4 	.word	0x000231e4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10268:	2141      	movs	r1, #65	; 0x41
   1026a:	f00f fba9 	bl	1f9c0 <bt_hci_cmd_complete_create>
   1026e:	2141      	movs	r1, #65	; 0x41
   10270:	4603      	mov	r3, r0
   10272:	3008      	adds	r0, #8
   10274:	9309      	str	r3, [sp, #36]	; 0x24
   10276:	f011 fa09 	bl	2168c <net_buf_simple_add>
	rp->status = 0x00;
   1027a:	2100      	movs	r1, #0
   1027c:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1027e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   10280:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   10284:	f00f f953 	bl	1f52e <memset>
	rp->commands[15] |= BIT(1);
   10288:	7c23      	ldrb	r3, [r4, #16]
	rp->commands[5] |= BIT(6) | BIT(7);
   1028a:	79a0      	ldrb	r0, [r4, #6]
	rp->commands[10] |= BIT(2);
   1028c:	7ae1      	ldrb	r1, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   1028e:	7be2      	ldrb	r2, [r4, #15]
	rp->commands[15] |= BIT(1);
   10290:	f043 0302 	orr.w	r3, r3, #2
   10294:	7423      	strb	r3, [r4, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   10296:	7ea3      	ldrb	r3, [r4, #26]
	rp->commands[5] |= BIT(6) | BIT(7);
   10298:	f060 003f 	orn	r0, r0, #63	; 0x3f
	rp->commands[10] |= BIT(2);
   1029c:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   102a0:	f063 0308 	orn	r3, r3, #8
	rp->commands[5] |= BIT(6) | BIT(7);
   102a4:	71a0      	strb	r0, [r4, #6]
	rp->commands[10] |= BIT(2);
   102a6:	72e1      	strb	r1, [r4, #11]
	rp->commands[26] |= BIT(6) | BIT(7);
   102a8:	7ee0      	ldrb	r0, [r4, #27]
	rp->commands[22] |= BIT(2);
   102aa:	7de1      	ldrb	r1, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   102ac:	76a3      	strb	r3, [r4, #26]
	rp->commands[33] |= BIT(4) | BIT(5);
   102ae:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[14] |= BIT(3) | BIT(5);
   102b2:	f042 0228 	orr.w	r2, r2, #40	; 0x28
	rp->commands[22] |= BIT(2);
   102b6:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[26] |= BIT(0) | BIT(1);
   102ba:	f060 003c 	orn	r0, r0, #60	; 0x3c
	rp->commands[33] |= BIT(6) | BIT(7);
   102be:	f063 030f 	orn	r3, r3, #15
	rp->commands[26] |= BIT(0) | BIT(1);
   102c2:	76e0      	strb	r0, [r4, #27]
	rp->commands[14] |= BIT(3) | BIT(5);
   102c4:	73e2      	strb	r2, [r4, #15]
	rp->commands[28] |= BIT(3);
   102c6:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[27] |= BIT(0) | BIT(1);
   102c8:	7f22      	ldrb	r2, [r4, #28]
	rp->commands[22] |= BIT(2);
   102ca:	75e1      	strb	r1, [r4, #23]
	rp->commands[33] |= BIT(6) | BIT(7);
   102cc:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
   102d0:	7861      	ldrb	r1, [r4, #1]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   102d2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
	rp->commands[28] |= BIT(1) | BIT(2);
   102d6:	f040 000e 	orr.w	r0, r0, #14
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   102da:	f062 0208 	orn	r2, r2, #8
	rp->commands[0] |= BIT(5);
   102de:	f041 0120 	orr.w	r1, r1, #32
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   102e2:	f063 0306 	orn	r3, r3, #6
	rp->commands[0] |= BIT(5);
   102e6:	7061      	strb	r1, [r4, #1]
	rp->commands[28] |= BIT(1) | BIT(2);
   102e8:	7760      	strb	r0, [r4, #29]
	rp->commands[35] |= BIT(3);
   102ea:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
   102ee:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   102f2:	7722      	strb	r2, [r4, #28]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   102f4:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	rp->commands[39] |= BIT(2);
   102f8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   102fc:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   10300:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
   10304:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	rp->commands[39] |= BIT(2);
   10308:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
   1030c:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
   10310:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   10314:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   10318:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   1031c:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return evt;
   10320:	9d09      	ldr	r5, [sp, #36]	; 0x24
   10322:	e63d      	b.n	ffa0 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10324:	2109      	movs	r1, #9
   10326:	f00f fb4b 	bl	1f9c0 <bt_hci_cmd_complete_create>
   1032a:	2109      	movs	r1, #9
   1032c:	4603      	mov	r3, r0
   1032e:	3008      	adds	r0, #8
   10330:	9309      	str	r3, [sp, #36]	; 0x24
   10332:	f011 f9ab 	bl	2168c <net_buf_simple_add>
	rp->status = 0x00;
   10336:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
   10338:	210b      	movs	r1, #11
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   1033a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	rp->status = 0x00;
   1033e:	7003      	strb	r3, [r0, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   10340:	7041      	strb	r1, [r0, #1]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   10342:	f06f 040e 	mvn.w	r4, #14
	rp->hci_revision = sys_cpu_to_le16(0);
   10346:	7083      	strb	r3, [r0, #2]
   10348:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   1034a:	2305      	movs	r3, #5
	return evt;
   1034c:	9d09      	ldr	r5, [sp, #36]	; 0x24
	rp->lmp_version = LL_VERSION_NUMBER;
   1034e:	7101      	strb	r1, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   10350:	7144      	strb	r4, [r0, #5]
   10352:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   10354:	71c2      	strb	r2, [r0, #7]
   10356:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
   10358:	e622      	b.n	ffa0 <hci_cmd_handle+0x6c>
		le_set_privacy_mode(cmd, evt);
   1035a:	68a8      	ldr	r0, [r5, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   1035c:	79c1      	ldrb	r1, [r0, #7]
   1035e:	f006 fbcd 	bl	16afc <ll_priv_mode_set>
   10362:	4603      	mov	r3, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   10364:	2101      	movs	r1, #1
   10366:	8830      	ldrh	r0, [r6, #0]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   10368:	461e      	mov	r6, r3
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1036a:	f00f fb29 	bl	1f9c0 <bt_hci_cmd_complete_create>
   1036e:	2101      	movs	r1, #1
   10370:	4605      	mov	r5, r0
   10372:	3008      	adds	r0, #8
   10374:	f011 f98a 	bl	2168c <net_buf_simple_add>
	ccst->status = status;
   10378:	7006      	strb	r6, [r0, #0]
	if (err == -EINVAL) {
   1037a:	e611      	b.n	ffa0 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1037c:	2103      	movs	r1, #3
   1037e:	f00f fb1f 	bl	1f9c0 <bt_hci_cmd_complete_create>
   10382:	2103      	movs	r1, #3
   10384:	4603      	mov	r3, r0
   10386:	3008      	adds	r0, #8
   10388:	9309      	str	r3, [sp, #36]	; 0x24
   1038a:	f011 f97f 	bl	2168c <net_buf_simple_add>
	rp->status = 0x00;
   1038e:	4601      	mov	r1, r0
   10390:	2300      	movs	r3, #0
   10392:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   10396:	3001      	adds	r0, #1
   10398:	f7ff fb3e 	bl	fa18 <ll_tx_pwr_get>
	return evt;
   1039c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1039e:	e5ff      	b.n	ffa0 <hci_cmd_handle+0x6c>
		le_set_phy(cmd, evt);
   103a0:	68aa      	ldr	r2, [r5, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   103a2:	7894      	ldrb	r4, [r2, #2]
	return ((uint16_t)src[1] << 8) | src[0];
   103a4:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   103a6:	8817      	ldrh	r7, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   103a8:	f8b2 5005 	ldrh.w	r5, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   103ac:	07e3      	lsls	r3, r4, #31
		cmd->tx_phys |= mask_phys;
   103ae:	bf48      	it	mi
   103b0:	f041 0103 	orrmi.w	r1, r1, #3
   103b4:	7913      	ldrb	r3, [r2, #4]
   103b6:	bf48      	it	mi
   103b8:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   103ba:	07a4      	lsls	r4, r4, #30
		cmd->rx_phys |= mask_phys;
   103bc:	bf44      	itt	mi
   103be:	f043 0303 	orrmi.w	r3, r3, #3
   103c2:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   103c4:	ea43 0201 	orr.w	r2, r3, r1
   103c8:	f032 0203 	bics.w	r2, r2, #3
   103cc:	f040 8283 	bne.w	108d6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8d7>
	if (!(cmd->tx_phys & 0x07) ||
   103d0:	074c      	lsls	r4, r1, #29
   103d2:	f000 827a 	beq.w	108ca <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8cb>
   103d6:	075a      	lsls	r2, r3, #29
   103d8:	f000 8277 	beq.w	108ca <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8cb>
	if (phy_opts & 0x03) {
   103dc:	f015 0203 	ands.w	r2, r5, #3
		phy_opts -= 1U;
   103e0:	bf1c      	itt	ne
   103e2:	f105 35ff 	addne.w	r5, r5, #4294967295	; 0xffffffff
		phy_opts &= 1;
   103e6:	f005 0201 	andne.w	r2, r5, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   103ea:	4638      	mov	r0, r7
   103ec:	f003 fc82 	bl	13cf4 <ll_phy_req_send>
   103f0:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   103f2:	8830      	ldrh	r0, [r6, #0]
   103f4:	f00f faf6 	bl	1f9e4 <bt_hci_cmd_status_create>
   103f8:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   103fa:	e5d1      	b.n	ffa0 <hci_cmd_handle+0x6c>
		le_set_default_phy(cmd, evt);
   103fc:	68ab      	ldr	r3, [r5, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   103fe:	781a      	ldrb	r2, [r3, #0]
   10400:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   10402:	bf4a      	itet	mi
   10404:	2007      	movmi	r0, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   10406:	7858      	ldrbpl	r0, [r3, #1]
		cmd->tx_phys = 0x07;
   10408:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   1040a:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   1040c:	bf4a      	itet	mi
   1040e:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   10410:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
   10412:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   10414:	f003 fc64 	bl	13ce0 <ll_phy_default_set>
   10418:	e7a3      	b.n	10362 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x363>
	handle = sys_le16_to_cpu(cmd->handle);
   1041a:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1041c:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
   1041e:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10420:	f00f face 	bl	1f9c0 <bt_hci_cmd_complete_create>
   10424:	2105      	movs	r1, #5
   10426:	4603      	mov	r3, r0
   10428:	3008      	adds	r0, #8
   1042a:	9309      	str	r3, [sp, #36]	; 0x24
   1042c:	f011 f92e 	bl	2168c <net_buf_simple_add>
   10430:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   10432:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
   10434:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   10436:	1ce1      	adds	r1, r4, #3
   10438:	f003 fc34 	bl	13ca4 <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
   1043c:	78e3      	ldrb	r3, [r4, #3]
	rp->status = status;
   1043e:	7020      	strb	r0, [r4, #0]
   10440:	2b00      	cmp	r3, #0
   10442:	fa93 f2a3 	rbit	r2, r3
   10446:	7923      	ldrb	r3, [r4, #4]
   10448:	fab2 f282 	clz	r2, r2
   1044c:	bf08      	it	eq
   1044e:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   10452:	2b00      	cmp	r3, #0
   10454:	fa93 f3a3 	rbit	r3, r3
   10458:	fab3 f383 	clz	r3, r3
   1045c:	f102 0201 	add.w	r2, r2, #1
   10460:	bf08      	it	eq
   10462:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   10466:	70e2      	strb	r2, [r4, #3]
   10468:	3301      	adds	r3, #1
	return evt;
   1046a:	9d09      	ldr	r5, [sp, #36]	; 0x24
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   1046c:	7123      	strb	r3, [r4, #4]
	rp->handle = sys_cpu_to_le16(handle);
   1046e:	f8a4 6001 	strh.w	r6, [r4, #1]
	if (err == -EINVAL) {
   10472:	e595      	b.n	ffa0 <hci_cmd_handle+0x6c>
	status = ll_rl_enable(cmd->enable);
   10474:	68ab      	ldr	r3, [r5, #8]
   10476:	7818      	ldrb	r0, [r3, #0]
   10478:	f006 fb20 	bl	16abc <ll_rl_enable>
   1047c:	e771      	b.n	10362 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x363>
	memcpy(dst, src, sizeof(*dst));
   1047e:	2207      	movs	r2, #7
   10480:	68a9      	ldr	r1, [r5, #8]
   10482:	a80a      	add	r0, sp, #40	; 0x28
   10484:	f00f f828 	bl	1f4d8 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10488:	2107      	movs	r1, #7
   1048a:	8830      	ldrh	r0, [r6, #0]
   1048c:	f00f fa98 	bl	1f9c0 <bt_hci_cmd_complete_create>
   10490:	2107      	movs	r1, #7
   10492:	4603      	mov	r3, r0
   10494:	3008      	adds	r0, #8
   10496:	9309      	str	r3, [sp, #36]	; 0x24
   10498:	f011 f8f8 	bl	2168c <net_buf_simple_add>
   1049c:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   1049e:	1c41      	adds	r1, r0, #1
   104a0:	a80a      	add	r0, sp, #40	; 0x28
   104a2:	f006 fad9 	bl	16a58 <ll_rl_lrpa_get>
   104a6:	7020      	strb	r0, [r4, #0]
	return evt;
   104a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
   104aa:	e579      	b.n	ffa0 <hci_cmd_handle+0x6c>
   104ac:	2207      	movs	r2, #7
   104ae:	68a9      	ldr	r1, [r5, #8]
   104b0:	a80a      	add	r0, sp, #40	; 0x28
   104b2:	f00f f811 	bl	1f4d8 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   104b6:	2107      	movs	r1, #7
   104b8:	8830      	ldrh	r0, [r6, #0]
   104ba:	f00f fa81 	bl	1f9c0 <bt_hci_cmd_complete_create>
   104be:	2107      	movs	r1, #7
   104c0:	4603      	mov	r3, r0
   104c2:	3008      	adds	r0, #8
   104c4:	9309      	str	r3, [sp, #36]	; 0x24
   104c6:	f011 f8e1 	bl	2168c <net_buf_simple_add>
   104ca:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   104cc:	1c41      	adds	r1, r0, #1
   104ce:	a80a      	add	r0, sp, #40	; 0x28
   104d0:	f006 fa88 	bl	169e4 <ll_rl_crpa_get>
   104d4:	7020      	strb	r0, [r4, #0]
	return evt;
   104d6:	9d09      	ldr	r5, [sp, #36]	; 0x24
   104d8:	e562      	b.n	ffa0 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   104da:	2102      	movs	r1, #2
   104dc:	f00f fa70 	bl	1f9c0 <bt_hci_cmd_complete_create>
   104e0:	2102      	movs	r1, #2
   104e2:	4603      	mov	r3, r0
   104e4:	3008      	adds	r0, #8
   104e6:	9309      	str	r3, [sp, #36]	; 0x24
   104e8:	f011 f8d0 	bl	2168c <net_buf_simple_add>
   104ec:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   104ee:	f006 f941 	bl	16774 <ll_rl_size_get>
	rp->status = 0x00;
   104f2:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   104f4:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   104f6:	7023      	strb	r3, [r4, #0]
	return evt;
   104f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
   104fa:	e551      	b.n	ffa0 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   104fc:	2109      	movs	r1, #9
   104fe:	f00f fa5f 	bl	1f9c0 <bt_hci_cmd_complete_create>
   10502:	2109      	movs	r1, #9
   10504:	4603      	mov	r3, r0
   10506:	3008      	adds	r0, #8
   10508:	9309      	str	r3, [sp, #36]	; 0x24
   1050a:	f011 f8bf 	bl	2168c <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   1050e:	ab0a      	add	r3, sp, #40	; 0x28
   10510:	4604      	mov	r4, r0
   10512:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   10516:	a908      	add	r1, sp, #32
   10518:	f10d 001e 	add.w	r0, sp, #30
   1051c:	f003 fbb6 	bl	13c8c <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   10520:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   10524:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   10528:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1052c:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   10530:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   10534:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
   10538:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   1053a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   1053e:	7022      	strb	r2, [r4, #0]
	return evt;
   10540:	9d09      	ldr	r5, [sp, #36]	; 0x24
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   10542:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
   10546:	e52b      	b.n	ffa0 <hci_cmd_handle+0x6c>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   10548:	68ab      	ldr	r3, [r5, #8]
	ll_rl_timeout_set(timeout);
   1054a:	8818      	ldrh	r0, [r3, #0]
   1054c:	f006 facc 	bl	16ae8 <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   10550:	8830      	ldrh	r0, [r6, #0]
   10552:	2101      	movs	r1, #1
   10554:	e62c      	b.n	101b0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1b1>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   10556:	68aa      	ldr	r2, [r5, #8]
	le_event_mask = sys_get_le64(cmd->events);
   10558:	4bbb      	ldr	r3, [pc, #748]	; (10848 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x849>)
   1055a:	6811      	ldr	r1, [r2, #0]
   1055c:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   1055e:	6019      	str	r1, [r3, #0]
   10560:	e624      	b.n	101ac <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1ad>
		le_set_adv_param(cmd, evt);
   10562:	68ac      	ldr	r4, [r5, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   10564:	7ba5      	ldrb	r5, [r4, #14]
   10566:	79a3      	ldrb	r3, [r4, #6]
   10568:	7962      	ldrb	r2, [r4, #5]
   1056a:	7921      	ldrb	r1, [r4, #4]
   1056c:	8820      	ldrh	r0, [r4, #0]
   1056e:	9502      	str	r5, [sp, #8]
   10570:	7b65      	ldrb	r5, [r4, #13]
   10572:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   10574:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   10576:	9400      	str	r4, [sp, #0]
   10578:	f002 fa18 	bl	129ac <ll_adv_params_set>
   1057c:	e6f1      	b.n	10362 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x363>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   1057e:	68a9      	ldr	r1, [r5, #8]
   10580:	2001      	movs	r0, #1
   10582:	f7ff fa1b 	bl	f9bc <ll_addr_set>
   10586:	e6ec      	b.n	10362 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x363>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10588:	2109      	movs	r1, #9
   1058a:	f00f fa19 	bl	1f9c0 <bt_hci_cmd_complete_create>
   1058e:	2109      	movs	r1, #9
   10590:	4603      	mov	r3, r0
   10592:	3008      	adds	r0, #8
   10594:	9309      	str	r3, [sp, #36]	; 0x24
   10596:	f011 f879 	bl	2168c <net_buf_simple_add>
	rp->status = 0x00;
   1059a:	2600      	movs	r6, #0
   1059c:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1059e:	2208      	movs	r2, #8
   105a0:	4631      	mov	r1, r6
	rp->status = 0x00;
   105a2:	f800 6b01 	strb.w	r6, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   105a6:	f00e ffc2 	bl	1f52e <memset>
	dst[0] = val;
   105aa:	217f      	movs	r1, #127	; 0x7f
	dst[1] = val >> 8;
   105ac:	2241      	movs	r2, #65	; 0x41
	dst[0] = val;
   105ae:	2301      	movs	r3, #1
   105b0:	7061      	strb	r1, [r4, #1]
	dst[1] = val >> 8;
   105b2:	70a2      	strb	r2, [r4, #2]
	dst[0] = val;
   105b4:	70e3      	strb	r3, [r4, #3]
	return evt;
   105b6:	9d09      	ldr	r5, [sp, #36]	; 0x24
	dst[1] = val >> 8;
   105b8:	7126      	strb	r6, [r4, #4]
	dst[0] = val;
   105ba:	7166      	strb	r6, [r4, #5]
	dst[1] = val >> 8;
   105bc:	71a6      	strb	r6, [r4, #6]
	dst[0] = val;
   105be:	71e6      	strb	r6, [r4, #7]
	dst[1] = val >> 8;
   105c0:	7226      	strb	r6, [r4, #8]
	if (err == -EINVAL) {
   105c2:	e4ed      	b.n	ffa0 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   105c4:	2104      	movs	r1, #4
   105c6:	f00f f9fb 	bl	1f9c0 <bt_hci_cmd_complete_create>
   105ca:	2104      	movs	r1, #4
   105cc:	4603      	mov	r3, r0
   105ce:	3008      	adds	r0, #8
   105d0:	9309      	str	r3, [sp, #36]	; 0x24
   105d2:	f011 f85b 	bl	2168c <net_buf_simple_add>
	rp->status = 0x00;
   105d6:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   105d8:	2103      	movs	r1, #3
	rp->status = 0x00;
   105da:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   105dc:	221b      	movs	r2, #27
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   105de:	70c1      	strb	r1, [r0, #3]
	return evt;
   105e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   105e2:	7042      	strb	r2, [r0, #1]
   105e4:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   105e6:	e4db      	b.n	ffa0 <hci_cmd_handle+0x6c>
	status = ll_wl_remove(&cmd->addr);
   105e8:	68a8      	ldr	r0, [r5, #8]
   105ea:	f006 f831 	bl	16650 <ll_wl_remove>
   105ee:	e6b8      	b.n	10362 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x363>
	status = ll_wl_add(&cmd->addr);
   105f0:	68a8      	ldr	r0, [r5, #8]
   105f2:	f005 ff8d 	bl	16510 <ll_wl_add>
   105f6:	e6b4      	b.n	10362 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x363>
	status = ll_wl_clear();
   105f8:	f005 ff60 	bl	164bc <ll_wl_clear>
   105fc:	e6b1      	b.n	10362 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x363>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   105fe:	2102      	movs	r1, #2
   10600:	f00f f9de 	bl	1f9c0 <bt_hci_cmd_complete_create>
   10604:	2102      	movs	r1, #2
   10606:	4603      	mov	r3, r0
   10608:	3008      	adds	r0, #8
   1060a:	9309      	str	r3, [sp, #36]	; 0x24
   1060c:	f011 f83e 	bl	2168c <net_buf_simple_add>
	rp->status = 0x00;
   10610:	2300      	movs	r3, #0
   10612:	7003      	strb	r3, [r0, #0]
   10614:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   10616:	f005 ff4f 	bl	164b8 <ll_wl_size_get>
   1061a:	7060      	strb	r0, [r4, #1]
	return evt;
   1061c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1061e:	e4bf      	b.n	ffa0 <hci_cmd_handle+0x6c>
	status = ll_adv_enable(cmd->enable);
   10620:	68ab      	ldr	r3, [r5, #8]
   10622:	7818      	ldrb	r0, [r3, #0]
   10624:	f7f1 fe90 	bl	2348 <ll_adv_enable>
   10628:	e69b      	b.n	10362 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x363>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   1062a:	68a9      	ldr	r1, [r5, #8]
   1062c:	f811 0b01 	ldrb.w	r0, [r1], #1
   10630:	f002 fb4e 	bl	12cd0 <ll_adv_scan_rsp_set>
   10634:	e695      	b.n	10362 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x363>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   10636:	68a9      	ldr	r1, [r5, #8]
   10638:	f811 0b01 	ldrb.w	r0, [r1], #1
   1063c:	f002 fa58 	bl	12af0 <ll_adv_data_set>
   10640:	e68f      	b.n	10362 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x363>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10642:	2102      	movs	r1, #2
   10644:	f00f f9bc 	bl	1f9c0 <bt_hci_cmd_complete_create>
   10648:	2102      	movs	r1, #2
   1064a:	4603      	mov	r3, r0
   1064c:	3008      	adds	r0, #8
   1064e:	9309      	str	r3, [sp, #36]	; 0x24
   10650:	f011 f81c 	bl	2168c <net_buf_simple_add>
	rp->status = 0x00;
   10654:	2300      	movs	r3, #0
   10656:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   10658:	7043      	strb	r3, [r0, #1]
	return evt;
   1065a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1065c:	e4a0      	b.n	ffa0 <hci_cmd_handle+0x6c>
	status = ll_rl_clear();
   1065e:	f006 f88b 	bl	16778 <ll_rl_clear>
   10662:	e67e      	b.n	10362 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x363>
	status = ll_rl_remove(&cmd->peer_id_addr);
   10664:	68a8      	ldr	r0, [r5, #8]
   10666:	f006 f8c5 	bl	167f4 <ll_rl_remove>
   1066a:	e67a      	b.n	10362 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x363>
		le_add_dev_to_rl(cmd, evt);
   1066c:	68a8      	ldr	r0, [r5, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   1066e:	f100 0217 	add.w	r2, r0, #23
   10672:	1dc1      	adds	r1, r0, #7
   10674:	f006 fc5a 	bl	16f2c <ll_rl_add>
   10678:	e673      	b.n	10362 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x363>
		le_write_default_data_len(cmd, evt);
   1067a:	68ab      	ldr	r3, [r5, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   1067c:	8859      	ldrh	r1, [r3, #2]
   1067e:	8818      	ldrh	r0, [r3, #0]
   10680:	f003 fafa 	bl	13c78 <ll_length_default_set>
   10684:	e66d      	b.n	10362 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x363>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10686:	2105      	movs	r1, #5
   10688:	f00f f99a 	bl	1f9c0 <bt_hci_cmd_complete_create>
   1068c:	2105      	movs	r1, #5
   1068e:	4603      	mov	r3, r0
   10690:	3008      	adds	r0, #8
   10692:	9309      	str	r3, [sp, #36]	; 0x24
   10694:	f010 fffa 	bl	2168c <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   10698:	a90a      	add	r1, sp, #40	; 0x28
   1069a:	4604      	mov	r4, r0
   1069c:	f10d 0022 	add.w	r0, sp, #34	; 0x22
   106a0:	f003 fade 	bl	13c60 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   106a4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   106a8:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
   106ac:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   106ae:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   106b2:	7022      	strb	r2, [r4, #0]
	return evt;
   106b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   106b6:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
   106ba:	e471      	b.n	ffa0 <hci_cmd_handle+0x6c>
		le_set_data_len(cmd, evt);
   106bc:	68ab      	ldr	r3, [r5, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   106be:	881f      	ldrh	r7, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   106c0:	889a      	ldrh	r2, [r3, #4]
   106c2:	8859      	ldrh	r1, [r3, #2]
   106c4:	b2b8      	uxth	r0, r7
   106c6:	f003 fa77 	bl	13bb8 <ll_length_req_send>
   106ca:	e587      	b.n	101dc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1dd>
		le_conn_param_req_neg_reply(cmd, evt);
   106cc:	68aa      	ldr	r2, [r5, #8]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   106ce:	2300      	movs	r3, #0
	handle = sys_le16_to_cpu(cmd->handle);
   106d0:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   106d2:	7892      	ldrb	r2, [r2, #2]
   106d4:	9300      	str	r3, [sp, #0]
   106d6:	e9cd 3301 	strd	r3, r3, [sp, #4]
   106da:	2102      	movs	r1, #2
   106dc:	b2a0      	uxth	r0, r4
   106de:	f003 f929 	bl	13934 <ll_conn_update>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   106e2:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   106e4:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   106e6:	8830      	ldrh	r0, [r6, #0]
   106e8:	f00f f96a 	bl	1f9c0 <bt_hci_cmd_complete_create>
   106ec:	2103      	movs	r1, #3
   106ee:	4603      	mov	r3, r0
   106f0:	3008      	adds	r0, #8
   106f2:	9309      	str	r3, [sp, #36]	; 0x24
   106f4:	f010 ffca 	bl	2168c <net_buf_simple_add>
	rp->status = status;
   106f8:	7005      	strb	r5, [r0, #0]
	return evt;
   106fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
	rp->handle = sys_cpu_to_le16(handle);
   106fc:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
   10700:	e44e      	b.n	ffa0 <hci_cmd_handle+0x6c>
		le_conn_param_req_reply(cmd, evt);
   10702:	68aa      	ldr	r2, [r5, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   10704:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   10706:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   10708:	8853      	ldrh	r3, [r2, #2]
   1070a:	9102      	str	r1, [sp, #8]
   1070c:	88d1      	ldrh	r1, [r2, #6]
   1070e:	9101      	str	r1, [sp, #4]
   10710:	8891      	ldrh	r1, [r2, #4]
   10712:	9100      	str	r1, [sp, #0]
   10714:	2200      	movs	r2, #0
   10716:	e7e0      	b.n	106da <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6db>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10718:	2109      	movs	r1, #9
   1071a:	f00f f951 	bl	1f9c0 <bt_hci_cmd_complete_create>
   1071e:	2109      	movs	r1, #9
   10720:	4603      	mov	r3, r0
   10722:	3008      	adds	r0, #8
   10724:	9309      	str	r3, [sp, #36]	; 0x24
   10726:	f010 ffb1 	bl	2168c <net_buf_simple_add>
	dst[0] = val;
   1072a:	248f      	movs	r4, #143	; 0x8f
	rp->status = 0x00;
   1072c:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   1072e:	21cc      	movs	r1, #204	; 0xcc
	dst[0] = val;
   10730:	2230      	movs	r2, #48	; 0x30
   10732:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
   10734:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
   10736:	70c2      	strb	r2, [r0, #3]
   10738:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1073a:	24ec      	movs	r4, #236	; 0xec
	dst[0] = val;
   1073c:	21c0      	movs	r1, #192	; 0xc0
	dst[1] = val >> 8;
   1073e:	2201      	movs	r2, #1
	return evt;
   10740:	9d09      	ldr	r5, [sp, #36]	; 0x24
   10742:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
   10744:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
   10746:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
   10748:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   1074a:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   1074c:	e428      	b.n	ffa0 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   1074e:	68ab      	ldr	r3, [r5, #8]
   10750:	881f      	ldrh	r7, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   10752:	2200      	movs	r2, #0
   10754:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   10756:	b2b8      	uxth	r0, r7
   10758:	f005 fd34 	bl	161c4 <ll_start_enc_req_send>
   1075c:	e53e      	b.n	101dc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1dd>
	handle = sys_le16_to_cpu(cmd->handle);
   1075e:	68aa      	ldr	r2, [r5, #8]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   10760:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
   10762:	f832 7b02 	ldrh.w	r7, [r2], #2
   10766:	e7f6      	b.n	10756 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x757>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10768:	2109      	movs	r1, #9
   1076a:	f00f f929 	bl	1f9c0 <bt_hci_cmd_complete_create>
   1076e:	2109      	movs	r1, #9
   10770:	4603      	mov	r3, r0
   10772:	3008      	adds	r0, #8
   10774:	9309      	str	r3, [sp, #36]	; 0x24
   10776:	f010 ff89 	bl	2168c <net_buf_simple_add>
	rp->status = 0x00;
   1077a:	2300      	movs	r3, #0
   1077c:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   10780:	2108      	movs	r1, #8
   10782:	f006 ffa9 	bl	176d8 <lll_csrand_get>
	return evt;
   10786:	9d09      	ldr	r5, [sp, #36]	; 0x24
   10788:	e40a      	b.n	ffa0 <hci_cmd_handle+0x6c>
		le_encrypt(cmd, evt);
   1078a:	68a8      	ldr	r0, [r5, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   1078c:	aa0a      	add	r2, sp, #40	; 0x28
   1078e:	2300      	movs	r3, #0
   10790:	f100 0110 	add.w	r1, r0, #16
   10794:	f008 fce8 	bl	19168 <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10798:	2111      	movs	r1, #17
   1079a:	8830      	ldrh	r0, [r6, #0]
   1079c:	f00f f910 	bl	1f9c0 <bt_hci_cmd_complete_create>
   107a0:	2111      	movs	r1, #17
   107a2:	4603      	mov	r3, r0
   107a4:	3008      	adds	r0, #8
   107a6:	9309      	str	r3, [sp, #36]	; 0x24
   107a8:	f010 ff70 	bl	2168c <net_buf_simple_add>
	rp->status = 0x00;
   107ac:	2300      	movs	r3, #0
   107ae:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   107b2:	2210      	movs	r2, #16
   107b4:	a90a      	add	r1, sp, #40	; 0x28
   107b6:	f00e fe8f 	bl	1f4d8 <memcpy>
	return evt;
   107ba:	9d09      	ldr	r5, [sp, #36]	; 0x24
   107bc:	f7ff bbf0 	b.w	ffa0 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   107c0:	68ab      	ldr	r3, [r5, #8]
	status = ll_feature_req_send(handle);
   107c2:	8818      	ldrh	r0, [r3, #0]
   107c4:	f003 f9ac 	bl	13b20 <ll_feature_req_send>
   107c8:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   107ca:	8830      	ldrh	r0, [r6, #0]
   107cc:	f00f f90a 	bl	1f9e4 <bt_hci_cmd_status_create>
   107d0:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   107d2:	f7ff bbe5 	b.w	ffa0 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   107d6:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   107d8:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
   107da:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   107dc:	f00f f8f0 	bl	1f9c0 <bt_hci_cmd_complete_create>
   107e0:	2108      	movs	r1, #8
   107e2:	4603      	mov	r3, r0
   107e4:	4408      	add	r0, r1
   107e6:	9309      	str	r3, [sp, #36]	; 0x24
   107e8:	f010 ff50 	bl	2168c <net_buf_simple_add>
   107ec:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   107ee:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
   107f0:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
   107f2:	f003 f933 	bl	13a5c <ll_chm_get>
	rp->status = status;
   107f6:	7020      	strb	r0, [r4, #0]
	return evt;
   107f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
	rp->handle = sys_le16_to_cpu(handle);
   107fa:	f8a4 6001 	strh.w	r6, [r4, #1]
	if (err == -EINVAL) {
   107fe:	f7ff bbcf 	b.w	ffa0 <hci_cmd_handle+0x6c>
		le_conn_update(cmd, evt);
   10802:	68a9      	ldr	r1, [r5, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   10804:	890a      	ldrh	r2, [r1, #8]
   10806:	884b      	ldrh	r3, [r1, #2]
   10808:	8808      	ldrh	r0, [r1, #0]
   1080a:	9202      	str	r2, [sp, #8]
   1080c:	88ca      	ldrh	r2, [r1, #6]
   1080e:	9201      	str	r2, [sp, #4]
   10810:	8889      	ldrh	r1, [r1, #4]
   10812:	9100      	str	r1, [sp, #0]
   10814:	2200      	movs	r2, #0
   10816:	4611      	mov	r1, r2
   10818:	f003 f88c 	bl	13934 <ll_conn_update>
   1081c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1081e:	8830      	ldrh	r0, [r6, #0]
   10820:	f00f f8e0 	bl	1f9e4 <bt_hci_cmd_status_create>
   10824:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   10826:	f7ff bbbb 	b.w	ffa0 <hci_cmd_handle+0x6c>
		disconnect(cmd, evt);
   1082a:	68ab      	ldr	r3, [r5, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   1082c:	7899      	ldrb	r1, [r3, #2]
   1082e:	8818      	ldrh	r0, [r3, #0]
   10830:	f003 f934 	bl	13a9c <ll_terminate_ind_send>
   10834:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   10836:	8830      	ldrh	r0, [r6, #0]
   10838:	f00f f8d4 	bl	1f9e4 <bt_hci_cmd_status_create>
   1083c:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   1083e:	f7ff bbaf 	b.w	ffa0 <hci_cmd_handle+0x6c>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   10842:	68aa      	ldr	r2, [r5, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   10844:	4b01      	ldr	r3, [pc, #4]	; (1084c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x84d>)
   10846:	e688      	b.n	1055a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x55b>
   10848:	20000130 	.word	0x20000130
   1084c:	20001210 	.word	0x20001210
	event_mask = DEFAULT_EVENT_MASK;
   10850:	4b24      	ldr	r3, [pc, #144]	; (108e4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8e5>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   10852:	4a25      	ldr	r2, [pc, #148]	; (108e8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8e9>)
	event_mask = DEFAULT_EVENT_MASK;
   10854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10858:	f641 71ff 	movw	r1, #8191	; 0x1fff
   1085c:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   10860:	4b22      	ldr	r3, [pc, #136]	; (108ec <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8ed>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   10862:	2000      	movs	r0, #0
   10864:	2100      	movs	r1, #0
   10866:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1086a:	201f      	movs	r0, #31
   1086c:	2100      	movs	r1, #0
   1086e:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   10872:	f001 f817 	bl	118a4 <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   10876:	2101      	movs	r1, #1
   10878:	8830      	ldrh	r0, [r6, #0]
   1087a:	f00f f8a1 	bl	1f9c0 <bt_hci_cmd_complete_create>
   1087e:	2101      	movs	r1, #1
   10880:	4605      	mov	r5, r0
   10882:	3008      	adds	r0, #8
   10884:	f010 ff02 	bl	2168c <net_buf_simple_add>
	conn_count = 0U;
   10888:	4a19      	ldr	r2, [pc, #100]	; (108f0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8f1>)
	ccst->status = status;
   1088a:	2300      	movs	r3, #0
   1088c:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
   1088e:	6013      	str	r3, [r2, #0]
}
   10890:	f7ff bb86 	b.w	ffa0 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   10894:	68ab      	ldr	r3, [r5, #8]
   10896:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   10898:	a90a      	add	r1, sp, #40	; 0x28
   1089a:	b2a8      	uxth	r0, r5
   1089c:	f003 fa7c 	bl	13d98 <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   108a0:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   108a2:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   108a4:	8830      	ldrh	r0, [r6, #0]
   108a6:	f00f f88b 	bl	1f9c0 <bt_hci_cmd_complete_create>
   108aa:	2105      	movs	r1, #5
   108ac:	4603      	mov	r3, r0
   108ae:	3008      	adds	r0, #8
   108b0:	9309      	str	r3, [sp, #36]	; 0x24
   108b2:	f010 feeb 	bl	2168c <net_buf_simple_add>
	rp->status = status;
   108b6:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   108b8:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   108bc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	return evt;
   108c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   108c2:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   108c6:	f7ff bb6b 	b.w	ffa0 <hci_cmd_handle+0x6c>
	return bt_hci_cmd_status_create(_opcode, status);
   108ca:	2112      	movs	r1, #18
   108cc:	f00f f88a 	bl	1f9e4 <bt_hci_cmd_status_create>
   108d0:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   108d2:	f7ff bb65 	b.w	ffa0 <hci_cmd_handle+0x6c>
	return bt_hci_cmd_status_create(_opcode, status);
   108d6:	2111      	movs	r1, #17
   108d8:	f00f f884 	bl	1f9e4 <bt_hci_cmd_status_create>
   108dc:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   108de:	f7ff bb5f 	b.w	ffa0 <hci_cmd_handle+0x6c>
   108e2:	bf00      	nop
   108e4:	20000128 	.word	0x20000128
   108e8:	20001210 	.word	0x20001210
   108ec:	20000130 	.word	0x20000130
   108f0:	20001bbc 	.word	0x20001bbc

000108f4 <hci_acl_handle>:
{
   108f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
   108f8:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   108fa:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
   108fc:	2b03      	cmp	r3, #3
	*evt = NULL;
   108fe:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   10900:	d944      	bls.n	1098c <hci_acl_handle+0x98>
	return net_buf_simple_pull_mem(&buf->b, len);
   10902:	4605      	mov	r5, r0
   10904:	4688      	mov	r8, r1
   10906:	3008      	adds	r0, #8
   10908:	2104      	movs	r1, #4
   1090a:	f010 fee6 	bl	216da <net_buf_simple_pull_mem>
	if (buf->len < len) {
   1090e:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   10910:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   10912:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   10916:	42b3      	cmp	r3, r6
   10918:	d349      	bcc.n	109ae <hci_acl_handle+0xba>
	if (len > CONFIG_BT_CTLR_TX_BUFFER_SIZE) {
   1091a:	2e1b      	cmp	r6, #27
   1091c:	d843      	bhi.n	109a6 <hci_acl_handle+0xb2>
	node_tx = ll_tx_mem_acquire();
   1091e:	f002 ffb1 	bl	13884 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   10922:	ea4f 3719 	mov.w	r7, r9, lsr #12
	if (!node_tx) {
   10926:	4604      	mov	r4, r0
   10928:	2800      	cmp	r0, #0
   1092a:	d044      	beq.n	109b6 <hci_acl_handle+0xc2>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   1092c:	08bb      	lsrs	r3, r7, #2
   1092e:	d102      	bne.n	10936 <hci_acl_handle+0x42>
	switch (bt_acl_flags_pb(flags)) {
   10930:	b337      	cbz	r7, 10980 <hci_acl_handle+0x8c>
   10932:	2f01      	cmp	r7, #1
   10934:	d003      	beq.n	1093e <hci_acl_handle+0x4a>
		return -EINVAL;
   10936:	f06f 0015 	mvn.w	r0, #21
}
   1093a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1093e:	7903      	ldrb	r3, [r0, #4]
   10940:	f367 0301 	bfi	r3, r7, #0, #2
   10944:	7103      	strb	r3, [r0, #4]
	pdu_data->len = len;
   10946:	7166      	strb	r6, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   10948:	68a9      	ldr	r1, [r5, #8]
   1094a:	4632      	mov	r2, r6
   1094c:	1de0      	adds	r0, r4, #7
   1094e:	f00e fdc3 	bl	1f4d8 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   10952:	4621      	mov	r1, r4
   10954:	f3c9 000b 	ubfx	r0, r9, #0, #12
   10958:	f002 ffa0 	bl	1389c <ll_tx_mem_enqueue>
   1095c:	2800      	cmp	r0, #0
   1095e:	d0ec      	beq.n	1093a <hci_acl_handle+0x46>
   10960:	4b2b      	ldr	r3, [pc, #172]	; (10a10 <hci_acl_handle+0x11c>)
   10962:	492c      	ldr	r1, [pc, #176]	; (10a14 <hci_acl_handle+0x120>)
		BT_ERR("Invalid Tx Enqueue");
   10964:	482c      	ldr	r0, [pc, #176]	; (10a18 <hci_acl_handle+0x124>)
   10966:	1ac9      	subs	r1, r1, r3
   10968:	08c9      	lsrs	r1, r1, #3
   1096a:	0189      	lsls	r1, r1, #6
   1096c:	f041 0101 	orr.w	r1, r1, #1
   10970:	f00c ffd8 	bl	1d924 <log_0>
		ll_tx_mem_release(node_tx);
   10974:	4620      	mov	r0, r4
   10976:	f002 ff8b 	bl	13890 <ll_tx_mem_release>
		return -EINVAL;
   1097a:	f06f 0015 	mvn.w	r0, #21
   1097e:	e7dc      	b.n	1093a <hci_acl_handle+0x46>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   10980:	7903      	ldrb	r3, [r0, #4]
   10982:	2202      	movs	r2, #2
   10984:	f362 0301 	bfi	r3, r2, #0, #2
   10988:	7103      	strb	r3, [r0, #4]
		break;
   1098a:	e7dc      	b.n	10946 <hci_acl_handle+0x52>
   1098c:	4921      	ldr	r1, [pc, #132]	; (10a14 <hci_acl_handle+0x120>)
   1098e:	4b20      	ldr	r3, [pc, #128]	; (10a10 <hci_acl_handle+0x11c>)
		BT_ERR("No HCI ACL header");
   10990:	4822      	ldr	r0, [pc, #136]	; (10a1c <hci_acl_handle+0x128>)
   10992:	1ac9      	subs	r1, r1, r3
   10994:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI ACL packet length");
   10996:	0189      	lsls	r1, r1, #6
   10998:	f041 0101 	orr.w	r1, r1, #1
   1099c:	f00c ffc2 	bl	1d924 <log_0>
		return -EINVAL;
   109a0:	f06f 0015 	mvn.w	r0, #21
   109a4:	e7c9      	b.n	1093a <hci_acl_handle+0x46>
   109a6:	491b      	ldr	r1, [pc, #108]	; (10a14 <hci_acl_handle+0x120>)
   109a8:	4b19      	ldr	r3, [pc, #100]	; (10a10 <hci_acl_handle+0x11c>)
		BT_ERR("Invalid HCI ACL Data length");
   109aa:	481d      	ldr	r0, [pc, #116]	; (10a20 <hci_acl_handle+0x12c>)
   109ac:	e7f1      	b.n	10992 <hci_acl_handle+0x9e>
   109ae:	4919      	ldr	r1, [pc, #100]	; (10a14 <hci_acl_handle+0x120>)
   109b0:	4b17      	ldr	r3, [pc, #92]	; (10a10 <hci_acl_handle+0x11c>)
		BT_ERR("Invalid HCI ACL packet length");
   109b2:	481c      	ldr	r0, [pc, #112]	; (10a24 <hci_acl_handle+0x130>)
   109b4:	e7ed      	b.n	10992 <hci_acl_handle+0x9e>
   109b6:	4b16      	ldr	r3, [pc, #88]	; (10a10 <hci_acl_handle+0x11c>)
   109b8:	4916      	ldr	r1, [pc, #88]	; (10a14 <hci_acl_handle+0x120>)
		BT_ERR("Tx Buffer Overflow");
   109ba:	481b      	ldr	r0, [pc, #108]	; (10a28 <hci_acl_handle+0x134>)
   109bc:	1ac9      	subs	r1, r1, r3
   109be:	08c9      	lsrs	r1, r1, #3
   109c0:	0189      	lsls	r1, r1, #6
   109c2:	f041 0101 	orr.w	r1, r1, #1
   109c6:	f00c ffad 	bl	1d924 <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   109ca:	4b18      	ldr	r3, [pc, #96]	; (10a2c <hci_acl_handle+0x138>)
   109cc:	681b      	ldr	r3, [r3, #0]
   109ce:	019b      	lsls	r3, r3, #6
   109d0:	d402      	bmi.n	109d8 <hci_acl_handle+0xe4>
		return -ENOBUFS;
   109d2:	f06f 0036 	mvn.w	r0, #54	; 0x36
   109d6:	e7b0      	b.n	1093a <hci_acl_handle+0x46>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   109d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   109dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   109e0:	2001      	movs	r0, #1
   109e2:	f7f7 f89f 	bl	7b24 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   109e6:	2102      	movs	r1, #2
   109e8:	f8c8 0000 	str.w	r0, [r8]
   109ec:	3008      	adds	r0, #8
   109ee:	f010 fe4d 	bl	2168c <net_buf_simple_add>
	hdr->len = len;
   109f2:	2401      	movs	r4, #1
	hdr->evt = evt;
   109f4:	231a      	movs	r3, #26
   109f6:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   109f8:	7044      	strb	r4, [r0, #1]
   109fa:	f8d8 0000 	ldr.w	r0, [r8]
   109fe:	4621      	mov	r1, r4
   10a00:	3008      	adds	r0, #8
   10a02:	f010 fe43 	bl	2168c <net_buf_simple_add>
   10a06:	4603      	mov	r3, r0
		return -ENOBUFS;
   10a08:	f06f 0036 	mvn.w	r0, #54	; 0x36
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   10a0c:	701c      	strb	r4, [r3, #0]
   10a0e:	e794      	b.n	1093a <hci_acl_handle+0x46>
   10a10:	000225d8 	.word	0x000225d8
   10a14:	00022628 	.word	0x00022628
   10a18:	00023268 	.word	0x00023268
   10a1c:	00023204 	.word	0x00023204
   10a20:	00023238 	.word	0x00023238
   10a24:	00023218 	.word	0x00023218
   10a28:	00023254 	.word	0x00023254
   10a2c:	20000128 	.word	0x20000128

00010a30 <hci_disconn_complete_encode>:
{
   10a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   10a32:	4b0e      	ldr	r3, [pc, #56]	; (10a6c <hci_disconn_complete_encode+0x3c>)
   10a34:	681b      	ldr	r3, [r3, #0]
   10a36:	06db      	lsls	r3, r3, #27
   10a38:	d400      	bmi.n	10a3c <hci_disconn_complete_encode+0xc>
}
   10a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10a3c:	f102 0408 	add.w	r4, r2, #8
   10a40:	4605      	mov	r5, r0
   10a42:	460e      	mov	r6, r1
   10a44:	4620      	mov	r0, r4
   10a46:	2102      	movs	r1, #2
   10a48:	f010 fe20 	bl	2168c <net_buf_simple_add>
   10a4c:	4603      	mov	r3, r0
	hdr->len = len;
   10a4e:	2104      	movs	r1, #4
	hdr->evt = evt;
   10a50:	2205      	movs	r2, #5
	hdr->len = len;
   10a52:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
   10a54:	701a      	strb	r2, [r3, #0]
   10a56:	4620      	mov	r0, r4
   10a58:	f010 fe18 	bl	2168c <net_buf_simple_add>
   10a5c:	2700      	movs	r7, #0
	ep->status = 0x00;
   10a5e:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   10a60:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   10a64:	782b      	ldrb	r3, [r5, #0]
   10a66:	70c3      	strb	r3, [r0, #3]
}
   10a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10a6a:	bf00      	nop
   10a6c:	20000128 	.word	0x20000128

00010a70 <hci_disconn_complete_process>:
	conn_count--;
   10a70:	4a02      	ldr	r2, [pc, #8]	; (10a7c <hci_disconn_complete_process+0xc>)
   10a72:	6813      	ldr	r3, [r2, #0]
   10a74:	3b01      	subs	r3, #1
   10a76:	6013      	str	r3, [r2, #0]
}
   10a78:	4770      	bx	lr
   10a7a:	bf00      	nop
   10a7c:	20001bbc 	.word	0x20001bbc

00010a80 <hci_acl_encode>:
	switch (pdu_data->ll_id) {
   10a80:	7f03      	ldrb	r3, [r0, #28]
   10a82:	f003 0303 	and.w	r3, r3, #3
   10a86:	3b01      	subs	r3, #1
   10a88:	2b01      	cmp	r3, #1
{
   10a8a:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   10a8c:	d90d      	bls.n	10aaa <hci_acl_encode+0x2a>
		LL_ASSERT(0);
   10a8e:	4a16      	ldr	r2, [pc, #88]	; (10ae8 <hci_acl_encode+0x68>)
   10a90:	4916      	ldr	r1, [pc, #88]	; (10aec <hci_acl_encode+0x6c>)
   10a92:	4817      	ldr	r0, [pc, #92]	; (10af0 <hci_acl_encode+0x70>)
   10a94:	f241 73d4 	movw	r3, #6100	; 0x17d4
   10a98:	f00c facc 	bl	1d034 <printk>
   10a9c:	4040      	eors	r0, r0
   10a9e:	f380 8811 	msr	BASEPRI, r0
   10aa2:	f04f 0003 	mov.w	r0, #3
   10aa6:	df02      	svc	2
}
   10aa8:	bd70      	pop	{r4, r5, r6, pc}
   10aaa:	4604      	mov	r4, r0
   10aac:	f101 0508 	add.w	r5, r1, #8
   10ab0:	4628      	mov	r0, r5
   10ab2:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   10ab4:	88e6      	ldrh	r6, [r4, #6]
   10ab6:	f010 fde9 	bl	2168c <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   10aba:	7f23      	ldrb	r3, [r4, #28]
   10abc:	f003 0303 	and.w	r3, r3, #3
   10ac0:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   10ac2:	bf0c      	ite	eq
   10ac4:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   10ac8:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   10acc:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   10ace:	7f61      	ldrb	r1, [r4, #29]
   10ad0:	8041      	strh	r1, [r0, #2]
   10ad2:	4628      	mov	r0, r5
   10ad4:	f010 fdda 	bl	2168c <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   10ad8:	7f62      	ldrb	r2, [r4, #29]
   10ada:	f104 011f 	add.w	r1, r4, #31
}
   10ade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   10ae2:	f00e bcf9 	b.w	1f4d8 <memcpy>
   10ae6:	bf00      	nop
   10ae8:	0002327c 	.word	0x0002327c
   10aec:	0002314c 	.word	0x0002314c
   10af0:	000230b4 	.word	0x000230b4

00010af4 <hci_evt_encode>:
{
   10af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   10af8:	f890 c004 	ldrb.w	ip, [r0, #4]
   10afc:	88c6      	ldrh	r6, [r0, #6]
   10afe:	f1bc 0f03 	cmp.w	ip, #3
{
   10b02:	4604      	mov	r4, r0
   10b04:	b089      	sub	sp, #36	; 0x24
   10b06:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   10b08:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   10b0c:	d00e      	beq.n	10b2c <hci_evt_encode+0x38>
	switch (node_rx->hdr.type) {
   10b0e:	f1ac 0c14 	sub.w	ip, ip, #20
   10b12:	f1bc 0f06 	cmp.w	ip, #6
   10b16:	f200 82bb 	bhi.w	11090 <hci_evt_encode+0x59c>
   10b1a:	e8df f01c 	tbh	[pc, ip, lsl #1]
   10b1e:	0021      	.short	0x0021
   10b20:	0083007c 	.word	0x0083007c
   10b24:	00c200ac 	.word	0x00c200ac
   10b28:	00f300d4 	.word	0x00f300d4
	switch (pdu_data->llctrl.opcode) {
   10b2c:	7fe3      	ldrb	r3, [r4, #31]
   10b2e:	3b03      	subs	r3, #3
   10b30:	2b12      	cmp	r3, #18
   10b32:	f200 8117 	bhi.w	10d64 <hci_evt_encode+0x270>
   10b36:	e8df f013 	tbh	[pc, r3, lsl #1]
   10b3a:	01e9      	.short	0x01e9
   10b3c:	01150115 	.word	0x01150115
   10b40:	01780218 	.word	0x01780218
   10b44:	018a0115 	.word	0x018a0115
   10b48:	01150115 	.word	0x01150115
   10b4c:	01a90115 	.word	0x01a90115
   10b50:	01c40115 	.word	0x01c40115
   10b54:	01150115 	.word	0x01150115
   10b58:	01150115 	.word	0x01150115
   10b5c:	01230123 	.word	0x01230123
	uint8_t status = cc->status;
   10b60:	7f27      	ldrb	r7, [r4, #28]
	if (!status) {
   10b62:	2f00      	cmp	r7, #0
   10b64:	f000 821a 	beq.w	10f9c <hci_evt_encode+0x4a8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10b68:	4bbd      	ldr	r3, [pc, #756]	; (10e60 <hci_evt_encode+0x36c>)
   10b6a:	685b      	ldr	r3, [r3, #4]
   10b6c:	009a      	lsls	r2, r3, #2
   10b6e:	d54f      	bpl.n	10c10 <hci_evt_encode+0x11c>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   10b70:	4bbc      	ldr	r3, [pc, #752]	; (10e64 <hci_evt_encode+0x370>)
   10b72:	681b      	ldr	r3, [r3, #0]
   10b74:	f240 2201 	movw	r2, #513	; 0x201
   10b78:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   10b7a:	f403 7800 	and.w	r8, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   10b7e:	d047      	beq.n	10c10 <hci_evt_encode+0x11c>
   10b80:	3508      	adds	r5, #8
	if (!status) {
   10b82:	2f00      	cmp	r7, #0
   10b84:	f040 821d 	bne.w	10fc2 <hci_evt_encode+0x4ce>
		conn_count++;
   10b88:	4ab7      	ldr	r2, [pc, #732]	; (10e68 <hci_evt_encode+0x374>)
   10b8a:	6813      	ldr	r3, [r2, #0]
   10b8c:	3301      	adds	r3, #1
		ll_rl_crpa_set(cc->peer_addr_type,
   10b8e:	f104 091f 	add.w	r9, r4, #31
		conn_count++;
   10b92:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   10b94:	f1b8 0f00 	cmp.w	r8, #0
   10b98:	f000 822f 	beq.w	10ffa <hci_evt_encode+0x506>
   10b9c:	2102      	movs	r1, #2
   10b9e:	4628      	mov	r0, r5
   10ba0:	f010 fd74 	bl	2168c <net_buf_simple_add>
	hdr->evt = evt;
   10ba4:	233e      	movs	r3, #62	; 0x3e
   10ba6:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   10ba8:	231f      	movs	r3, #31
   10baa:	7043      	strb	r3, [r0, #1]
   10bac:	2101      	movs	r1, #1
   10bae:	4628      	mov	r0, r5
   10bb0:	f010 fd6c 	bl	2168c <net_buf_simple_add>
   10bb4:	4603      	mov	r3, r0
	me->subevent = subevt;
   10bb6:	220a      	movs	r2, #10
   10bb8:	701a      	strb	r2, [r3, #0]
   10bba:	4628      	mov	r0, r5
   10bbc:	211e      	movs	r1, #30
   10bbe:	f010 fd65 	bl	2168c <net_buf_simple_add>
		leecc->status = 0x00;
   10bc2:	7007      	strb	r7, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   10bc4:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = cc->role;
   10bc8:	7f63      	ldrb	r3, [r4, #29]
   10bca:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
   10bcc:	7fa3      	ldrb	r3, [r4, #30]
   10bce:	7103      	strb	r3, [r0, #4]
   10bd0:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
   10bd2:	4649      	mov	r1, r9
   10bd4:	2206      	movs	r2, #6
   10bd6:	3005      	adds	r0, #5
   10bd8:	f00e fc7e 	bl	1f4d8 <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
   10bdc:	2206      	movs	r2, #6
   10bde:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   10be2:	f105 000b 	add.w	r0, r5, #11
   10be6:	f00e fc77 	bl	1f4d8 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
   10bea:	2206      	movs	r2, #6
   10bec:	f104 0125 	add.w	r1, r4, #37	; 0x25
   10bf0:	f105 0011 	add.w	r0, r5, #17
   10bf4:	f00e fc70 	bl	1f4d8 <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   10bf8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
   10bfa:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
   10bfc:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   10bfe:	f8a5 2019 	strh.w	r2, [r5, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
   10c02:	f8a5 1017 	strh.w	r1, [r5, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   10c06:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
   10c0a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   10c0e:	776b      	strb	r3, [r5, #29]
}
   10c10:	b009      	add	sp, #36	; 0x24
   10c12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   10c16:	460a      	mov	r2, r1
   10c18:	4631      	mov	r1, r6
}
   10c1a:	b009      	add	sp, #36	; 0x24
   10c1c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   10c20:	f7ff bf06 	b.w	10a30 <hci_disconn_complete_encode>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10c24:	4b8e      	ldr	r3, [pc, #568]	; (10e60 <hci_evt_encode+0x36c>)
   10c26:	685b      	ldr	r3, [r3, #4]
   10c28:	009b      	lsls	r3, r3, #2
   10c2a:	d5f1      	bpl.n	10c10 <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   10c2c:	4b8d      	ldr	r3, [pc, #564]	; (10e64 <hci_evt_encode+0x370>)
   10c2e:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10c30:	075f      	lsls	r7, r3, #29
   10c32:	d5ed      	bpl.n	10c10 <hci_evt_encode+0x11c>
   10c34:	3508      	adds	r5, #8
   10c36:	2102      	movs	r1, #2
   10c38:	4628      	mov	r0, r5
   10c3a:	f010 fd27 	bl	2168c <net_buf_simple_add>
	hdr->evt = evt;
   10c3e:	233e      	movs	r3, #62	; 0x3e
   10c40:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   10c42:	230a      	movs	r3, #10
   10c44:	7043      	strb	r3, [r0, #1]
   10c46:	2101      	movs	r1, #1
   10c48:	4628      	mov	r0, r5
   10c4a:	f010 fd1f 	bl	2168c <net_buf_simple_add>
	me->subevent = subevt;
   10c4e:	2303      	movs	r3, #3
   10c50:	7003      	strb	r3, [r0, #0]
   10c52:	2109      	movs	r1, #9
   10c54:	4628      	mov	r0, r5
   10c56:	f010 fd19 	bl	2168c <net_buf_simple_add>
	sep->status = cu->status;
   10c5a:	7f23      	ldrb	r3, [r4, #28]
   10c5c:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   10c5e:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   10c60:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   10c62:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   10c64:	f8a0 3007 	strh.w	r3, [r0, #7]
	sep->handle = sys_cpu_to_le16(handle);
   10c68:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   10c6c:	f8a0 1003 	strh.w	r1, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   10c70:	f8a0 2005 	strh.w	r2, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   10c74:	e7cc      	b.n	10c10 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   10c76:	4b7a      	ldr	r3, [pc, #488]	; (10e60 <hci_evt_encode+0x36c>)
   10c78:	685b      	ldr	r3, [r3, #4]
   10c7a:	0418      	lsls	r0, r3, #16
   10c7c:	f04f 0400 	mov.w	r4, #0
   10c80:	d5c6      	bpl.n	10c10 <hci_evt_encode+0x11c>
   10c82:	3508      	adds	r5, #8
   10c84:	2102      	movs	r1, #2
   10c86:	4628      	mov	r0, r5
   10c88:	f010 fd00 	bl	2168c <net_buf_simple_add>
	hdr->evt = evt;
   10c8c:	2330      	movs	r3, #48	; 0x30
	hdr->len = len;
   10c8e:	2103      	movs	r1, #3
	hdr->evt = evt;
   10c90:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   10c92:	7041      	strb	r1, [r0, #1]
   10c94:	4628      	mov	r0, r5
   10c96:	f010 fcf9 	bl	2168c <net_buf_simple_add>
	ep->status = 0x00;
   10c9a:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   10c9c:	f8a0 6001 	strh.w	r6, [r0, #1]
   10ca0:	e7b6      	b.n	10c10 <hci_evt_encode+0x11c>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   10ca2:	4b72      	ldr	r3, [pc, #456]	; (10e6c <hci_evt_encode+0x378>)
   10ca4:	681b      	ldr	r3, [r3, #0]
   10ca6:	0219      	lsls	r1, r3, #8
   10ca8:	d5b2      	bpl.n	10c10 <hci_evt_encode+0x11c>
   10caa:	3508      	adds	r5, #8
   10cac:	2102      	movs	r1, #2
   10cae:	4628      	mov	r0, r5
   10cb0:	f010 fcec 	bl	2168c <net_buf_simple_add>
	hdr->len = len;
   10cb4:	2102      	movs	r1, #2
	hdr->evt = evt;
   10cb6:	2357      	movs	r3, #87	; 0x57
   10cb8:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   10cba:	7041      	strb	r1, [r0, #1]
   10cbc:	4628      	mov	r0, r5
   10cbe:	f010 fce5 	bl	2168c <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   10cc2:	8006      	strh	r6, [r0, #0]
   10cc4:	e7a4      	b.n	10c10 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10cc6:	4b66      	ldr	r3, [pc, #408]	; (10e60 <hci_evt_encode+0x36c>)
   10cc8:	685b      	ldr	r3, [r3, #4]
   10cca:	009a      	lsls	r2, r3, #2
   10ccc:	d5a0      	bpl.n	10c10 <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   10cce:	4b65      	ldr	r3, [pc, #404]	; (10e64 <hci_evt_encode+0x370>)
   10cd0:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10cd2:	031b      	lsls	r3, r3, #12
   10cd4:	d59c      	bpl.n	10c10 <hci_evt_encode+0x11c>
   10cd6:	3508      	adds	r5, #8
   10cd8:	2102      	movs	r1, #2
   10cda:	4628      	mov	r0, r5
   10cdc:	f010 fcd6 	bl	2168c <net_buf_simple_add>
	hdr->evt = evt;
   10ce0:	233e      	movs	r3, #62	; 0x3e
   10ce2:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   10ce4:	2304      	movs	r3, #4
   10ce6:	7043      	strb	r3, [r0, #1]
   10ce8:	2101      	movs	r1, #1
   10cea:	4628      	mov	r0, r5
   10cec:	f010 fcce 	bl	2168c <net_buf_simple_add>
	me->subevent = subevt;
   10cf0:	2314      	movs	r3, #20
   10cf2:	7003      	strb	r3, [r0, #0]
   10cf4:	2103      	movs	r1, #3
   10cf6:	4628      	mov	r0, r5
   10cf8:	f010 fcc8 	bl	2168c <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   10cfc:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   10cfe:	7f23      	ldrb	r3, [r4, #28]
   10d00:	7083      	strb	r3, [r0, #2]
   10d02:	e785      	b.n	10c10 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10d04:	4b56      	ldr	r3, [pc, #344]	; (10e60 <hci_evt_encode+0x36c>)
   10d06:	685b      	ldr	r3, [r3, #4]
   10d08:	009f      	lsls	r7, r3, #2
   10d0a:	d503      	bpl.n	10d14 <hci_evt_encode+0x220>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   10d0c:	4b55      	ldr	r3, [pc, #340]	; (10e64 <hci_evt_encode+0x370>)
   10d0e:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10d10:	0518      	lsls	r0, r3, #20
   10d12:	d45c      	bmi.n	10dce <hci_evt_encode+0x2da>
   10d14:	7f62      	ldrb	r2, [r4, #29]
   10d16:	7fa0      	ldrb	r0, [r4, #30]
   10d18:	4955      	ldr	r1, [pc, #340]	; (10e70 <hci_evt_encode+0x37c>)
   10d1a:	4b56      	ldr	r3, [pc, #344]	; (10e74 <hci_evt_encode+0x380>)
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   10d1c:	7f24      	ldrb	r4, [r4, #28]
   10d1e:	2a00      	cmp	r2, #0
   10d20:	fa92 f2a2 	rbit	r2, r2
   10d24:	fab2 f282 	clz	r2, r2
   10d28:	eba3 0301 	sub.w	r3, r3, r1
   10d2c:	bf08      	it	eq
   10d2e:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   10d32:	2800      	cmp	r0, #0
   10d34:	fa90 f0a0 	rbit	r0, r0
   10d38:	fab0 f080 	clz	r0, r0
   10d3c:	ea4f 03d3 	mov.w	r3, r3, lsr #3
   10d40:	bf08      	it	eq
   10d42:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
   10d46:	1c51      	adds	r1, r2, #1
   10d48:	3001      	adds	r0, #1
   10d4a:	019b      	lsls	r3, r3, #6
   10d4c:	9007      	str	r0, [sp, #28]
   10d4e:	9106      	str	r1, [sp, #24]
   10d50:	4849      	ldr	r0, [pc, #292]	; (10e78 <hci_evt_encode+0x384>)
   10d52:	f043 0302 	orr.w	r3, r3, #2
   10d56:	2204      	movs	r2, #4
   10d58:	a904      	add	r1, sp, #16
   10d5a:	e9cd 6404 	strd	r6, r4, [sp, #16]
   10d5e:	f00c fe3f 	bl	1d9e0 <log_n>
		return;
   10d62:	e755      	b.n	10c10 <hci_evt_encode+0x11c>
		LL_ASSERT(0);
   10d64:	4a45      	ldr	r2, [pc, #276]	; (10e7c <hci_evt_encode+0x388>)
   10d66:	4946      	ldr	r1, [pc, #280]	; (10e80 <hci_evt_encode+0x38c>)
   10d68:	4846      	ldr	r0, [pc, #280]	; (10e84 <hci_evt_encode+0x390>)
   10d6a:	f241 73a8 	movw	r3, #6056	; 0x17a8
   10d6e:	f00c f961 	bl	1d034 <printk>
   10d72:	4040      	eors	r0, r0
   10d74:	f380 8811 	msr	BASEPRI, r0
   10d78:	f04f 0003 	mov.w	r0, #3
   10d7c:	df02      	svc	2
}
   10d7e:	e747      	b.n	10c10 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10d80:	4b37      	ldr	r3, [pc, #220]	; (10e60 <hci_evt_encode+0x36c>)
   10d82:	685b      	ldr	r3, [r3, #4]
   10d84:	009a      	lsls	r2, r3, #2
   10d86:	f57f af43 	bpl.w	10c10 <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   10d8a:	4b36      	ldr	r3, [pc, #216]	; (10e64 <hci_evt_encode+0x370>)
   10d8c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10d8e:	065b      	lsls	r3, r3, #25
   10d90:	f57f af3e 	bpl.w	10c10 <hci_evt_encode+0x11c>
   10d94:	3508      	adds	r5, #8
   10d96:	2102      	movs	r1, #2
   10d98:	4628      	mov	r0, r5
   10d9a:	f010 fc77 	bl	2168c <net_buf_simple_add>
	hdr->evt = evt;
   10d9e:	233e      	movs	r3, #62	; 0x3e
   10da0:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   10da2:	230b      	movs	r3, #11
   10da4:	7043      	strb	r3, [r0, #1]
   10da6:	2101      	movs	r1, #1
   10da8:	4628      	mov	r0, r5
   10daa:	f010 fc6f 	bl	2168c <net_buf_simple_add>
	me->subevent = subevt;
   10dae:	2307      	movs	r3, #7
   10db0:	7003      	strb	r3, [r0, #0]
   10db2:	210a      	movs	r1, #10
   10db4:	4628      	mov	r0, r5
   10db6:	f010 fc69 	bl	2168c <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   10dba:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   10dbc:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   10dbe:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   10dc0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   10dc2:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   10dc4:	8c23      	ldrh	r3, [r4, #32]
   10dc6:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   10dc8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   10dca:	8103      	strh	r3, [r0, #8]
   10dcc:	e720      	b.n	10c10 <hci_evt_encode+0x11c>
   10dce:	3508      	adds	r5, #8
   10dd0:	2102      	movs	r1, #2
   10dd2:	4628      	mov	r0, r5
   10dd4:	f010 fc5a 	bl	2168c <net_buf_simple_add>
	hdr->evt = evt;
   10dd8:	233e      	movs	r3, #62	; 0x3e
   10dda:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   10ddc:	2306      	movs	r3, #6
   10dde:	7043      	strb	r3, [r0, #1]
   10de0:	2101      	movs	r1, #1
   10de2:	4628      	mov	r0, r5
   10de4:	f010 fc52 	bl	2168c <net_buf_simple_add>
	me->subevent = subevt;
   10de8:	230c      	movs	r3, #12
   10dea:	7003      	strb	r3, [r0, #0]
   10dec:	2105      	movs	r1, #5
   10dee:	4628      	mov	r0, r5
   10df0:	f010 fc4c 	bl	2168c <net_buf_simple_add>
	sep->status = pu->status;
   10df4:	7f23      	ldrb	r3, [r4, #28]
   10df6:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   10df8:	f8a0 6001 	strh.w	r6, [r0, #1]
   10dfc:	7f62      	ldrb	r2, [r4, #29]
   10dfe:	2a00      	cmp	r2, #0
   10e00:	fa92 f3a2 	rbit	r3, r2
   10e04:	fab3 f383 	clz	r3, r3
   10e08:	bf08      	it	eq
   10e0a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   10e0e:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   10e10:	70c3      	strb	r3, [r0, #3]
   10e12:	7fa2      	ldrb	r2, [r4, #30]
   10e14:	fa92 f3a2 	rbit	r3, r2
   10e18:	2a00      	cmp	r2, #0
   10e1a:	fab3 f383 	clz	r3, r3
   10e1e:	bf08      	it	eq
   10e20:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   10e24:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   10e26:	7103      	strb	r3, [r0, #4]
   10e28:	e6f2      	b.n	10c10 <hci_evt_encode+0x11c>
		le_unknown_rsp(pdu_data, handle, buf);
   10e2a:	f894 1020 	ldrb.w	r1, [r4, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   10e2e:	290e      	cmp	r1, #14
   10e30:	f000 8112 	beq.w	11058 <hci_evt_encode+0x564>
   10e34:	4b0e      	ldr	r3, [pc, #56]	; (10e70 <hci_evt_encode+0x37c>)
   10e36:	4a0f      	ldr	r2, [pc, #60]	; (10e74 <hci_evt_encode+0x380>)
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   10e38:	4813      	ldr	r0, [pc, #76]	; (10e88 <hci_evt_encode+0x394>)
   10e3a:	1ad2      	subs	r2, r2, r3
   10e3c:	08d2      	lsrs	r2, r2, #3
   10e3e:	0192      	lsls	r2, r2, #6
   10e40:	f042 0202 	orr.w	r2, r2, #2
}
   10e44:	b009      	add	sp, #36	; 0x24
   10e46:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   10e4a:	f00c bd7a 	b.w	1d942 <log_1>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   10e4e:	460b      	mov	r3, r1
   10e50:	4632      	mov	r2, r6
   10e52:	4601      	mov	r1, r0
   10e54:	2000      	movs	r0, #0
}
   10e56:	b009      	add	sp, #36	; 0x24
   10e58:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   10e5c:	f7fe bf74 	b.w	fd48 <le_remote_feat_complete>
   10e60:	20000128 	.word	0x20000128
   10e64:	20000130 	.word	0x20000130
   10e68:	20001bbc 	.word	0x20001bbc
   10e6c:	20001210 	.word	0x20001210
   10e70:	000225d8 	.word	0x000225d8
   10e74:	00022628 	.word	0x00022628
   10e78:	000232b8 	.word	0x000232b8
   10e7c:	0002327c 	.word	0x0002327c
   10e80:	0002314c 	.word	0x0002314c
   10e84:	000230b4 	.word	0x000230b4
   10e88:	000232e4 	.word	0x000232e4
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   10e8c:	4b87      	ldr	r3, [pc, #540]	; (110ac <hci_evt_encode+0x5b8>)
   10e8e:	681b      	ldr	r3, [r3, #0]
   10e90:	061f      	lsls	r7, r3, #24
   10e92:	f57f aebd 	bpl.w	10c10 <hci_evt_encode+0x11c>
   10e96:	3508      	adds	r5, #8
   10e98:	2102      	movs	r1, #2
   10e9a:	4628      	mov	r0, r5
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   10e9c:	f894 4020 	ldrb.w	r4, [r4, #32]
   10ea0:	f010 fbf4 	bl	2168c <net_buf_simple_add>
	hdr->evt = evt;
   10ea4:	2308      	movs	r3, #8
	hdr->len = len;
   10ea6:	2104      	movs	r1, #4
	hdr->evt = evt;
   10ea8:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   10eaa:	7041      	strb	r1, [r0, #1]
   10eac:	4628      	mov	r0, r5
   10eae:	f010 fbed 	bl	2168c <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   10eb2:	fab4 f384 	clz	r3, r4
   10eb6:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   10eb8:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   10eba:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   10ebe:	70c3      	strb	r3, [r0, #3]
   10ec0:	e6a6      	b.n	10c10 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10ec2:	4b7a      	ldr	r3, [pc, #488]	; (110ac <hci_evt_encode+0x5b8>)
   10ec4:	685b      	ldr	r3, [r3, #4]
   10ec6:	0098      	lsls	r0, r3, #2
   10ec8:	d571      	bpl.n	10fae <hci_evt_encode+0x4ba>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   10eca:	4b79      	ldr	r3, [pc, #484]	; (110b0 <hci_evt_encode+0x5bc>)
   10ecc:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10ece:	0699      	lsls	r1, r3, #26
   10ed0:	d56d      	bpl.n	10fae <hci_evt_encode+0x4ba>
   10ed2:	3508      	adds	r5, #8
   10ed4:	2102      	movs	r1, #2
   10ed6:	4628      	mov	r0, r5
   10ed8:	f010 fbd8 	bl	2168c <net_buf_simple_add>
	hdr->evt = evt;
   10edc:	233e      	movs	r3, #62	; 0x3e
   10ede:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   10ee0:	230b      	movs	r3, #11
   10ee2:	7043      	strb	r3, [r0, #1]
   10ee4:	2101      	movs	r1, #1
   10ee6:	4628      	mov	r0, r5
   10ee8:	f010 fbd0 	bl	2168c <net_buf_simple_add>
	me->subevent = subevt;
   10eec:	2306      	movs	r3, #6
   10eee:	7003      	strb	r3, [r0, #0]
   10ef0:	210a      	movs	r1, #10
   10ef2:	4628      	mov	r0, r5
   10ef4:	f010 fbca 	bl	2168c <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   10ef8:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   10efa:	8c23      	ldrh	r3, [r4, #32]
   10efc:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   10efe:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   10f00:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   10f02:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   10f04:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   10f06:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   10f08:	8103      	strh	r3, [r0, #8]
   10f0a:	e681      	b.n	10c10 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10f0c:	4b67      	ldr	r3, [pc, #412]	; (110ac <hci_evt_encode+0x5b8>)
   10f0e:	685b      	ldr	r3, [r3, #4]
   10f10:	0099      	lsls	r1, r3, #2
   10f12:	f57f ae7d 	bpl.w	10c10 <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   10f16:	4b66      	ldr	r3, [pc, #408]	; (110b0 <hci_evt_encode+0x5bc>)
   10f18:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10f1a:	06da      	lsls	r2, r3, #27
   10f1c:	f57f ae78 	bpl.w	10c10 <hci_evt_encode+0x11c>
   10f20:	3508      	adds	r5, #8
   10f22:	2102      	movs	r1, #2
   10f24:	4628      	mov	r0, r5
   10f26:	f010 fbb1 	bl	2168c <net_buf_simple_add>
	hdr->evt = evt;
   10f2a:	233e      	movs	r3, #62	; 0x3e
   10f2c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   10f2e:	230d      	movs	r3, #13
   10f30:	7043      	strb	r3, [r0, #1]
   10f32:	2101      	movs	r1, #1
   10f34:	4628      	mov	r0, r5
   10f36:	f010 fba9 	bl	2168c <net_buf_simple_add>
	me->subevent = subevt;
   10f3a:	2305      	movs	r3, #5
   10f3c:	7003      	strb	r3, [r0, #0]
   10f3e:	210c      	movs	r1, #12
   10f40:	4628      	mov	r0, r5
   10f42:	f010 fba3 	bl	2168c <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   10f46:	f104 0120 	add.w	r1, r4, #32
   10f4a:	4605      	mov	r5, r0
   10f4c:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   10f4e:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   10f52:	f00e fac1 	bl	1f4d8 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   10f56:	2202      	movs	r2, #2
   10f58:	f104 0128 	add.w	r1, r4, #40	; 0x28
   10f5c:	f105 000a 	add.w	r0, r5, #10
}
   10f60:	b009      	add	sp, #36	; 0x24
   10f62:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   10f66:	f00e bab7 	b.w	1f4d8 <memcpy>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   10f6a:	4b50      	ldr	r3, [pc, #320]	; (110ac <hci_evt_encode+0x5b8>)
   10f6c:	681b      	ldr	r3, [r3, #0]
   10f6e:	061b      	lsls	r3, r3, #24
   10f70:	f04f 0400 	mov.w	r4, #0
   10f74:	f57f ae4c 	bpl.w	10c10 <hci_evt_encode+0x11c>
   10f78:	3508      	adds	r5, #8
   10f7a:	2102      	movs	r1, #2
   10f7c:	4628      	mov	r0, r5
   10f7e:	f010 fb85 	bl	2168c <net_buf_simple_add>
	hdr->evt = evt;
   10f82:	2308      	movs	r3, #8
	hdr->len = len;
   10f84:	2104      	movs	r1, #4
	hdr->evt = evt;
   10f86:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   10f88:	7041      	strb	r1, [r0, #1]
   10f8a:	4628      	mov	r0, r5
   10f8c:	f010 fb7e 	bl	2168c <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   10f90:	2301      	movs	r3, #1
	ep->status = err;
   10f92:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   10f94:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   10f98:	70c3      	strb	r3, [r0, #3]
   10f9a:	e639      	b.n	10c10 <hci_evt_encode+0x11c>
		ll_rl_crpa_set(cc->peer_addr_type,
   10f9c:	7fa0      	ldrb	r0, [r4, #30]
   10f9e:	f104 0325 	add.w	r3, r4, #37	; 0x25
   10fa2:	22ff      	movs	r2, #255	; 0xff
   10fa4:	f104 011f 	add.w	r1, r4, #31
   10fa8:	f005 fcd6 	bl	16958 <ll_rl_crpa_set>
   10fac:	e5dc      	b.n	10b68 <hci_evt_encode+0x74>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   10fae:	2300      	movs	r3, #0
   10fb0:	e9cd 3301 	strd	r3, r3, [sp, #4]
   10fb4:	9300      	str	r3, [sp, #0]
   10fb6:	221a      	movs	r2, #26
   10fb8:	2102      	movs	r1, #2
   10fba:	4630      	mov	r0, r6
   10fbc:	f002 fcba 	bl	13934 <ll_conn_update>
		return;
   10fc0:	e626      	b.n	10c10 <hci_evt_encode+0x11c>
   10fc2:	2102      	movs	r1, #2
   10fc4:	4628      	mov	r0, r5
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   10fc6:	f1b8 0f00 	cmp.w	r8, #0
   10fca:	d14a      	bne.n	11062 <hci_evt_encode+0x56e>
   10fcc:	f010 fb5e 	bl	2168c <net_buf_simple_add>
	hdr->evt = evt;
   10fd0:	233e      	movs	r3, #62	; 0x3e
   10fd2:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   10fd4:	2313      	movs	r3, #19
   10fd6:	7043      	strb	r3, [r0, #1]
   10fd8:	2101      	movs	r1, #1
   10fda:	4628      	mov	r0, r5
   10fdc:	f010 fb56 	bl	2168c <net_buf_simple_add>
	me->subevent = subevt;
   10fe0:	2301      	movs	r3, #1
   10fe2:	7003      	strb	r3, [r0, #0]
   10fe4:	2112      	movs	r1, #18
   10fe6:	4628      	mov	r0, r5
   10fe8:	f010 fb50 	bl	2168c <net_buf_simple_add>
   10fec:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   10fee:	2212      	movs	r2, #18
   10ff0:	4641      	mov	r1, r8
   10ff2:	f00e fa9c 	bl	1f52e <memset>
		lecc->status = status;
   10ff6:	7027      	strb	r7, [r4, #0]
		return;
   10ff8:	e60a      	b.n	10c10 <hci_evt_encode+0x11c>
   10ffa:	2102      	movs	r1, #2
   10ffc:	4628      	mov	r0, r5
   10ffe:	f010 fb45 	bl	2168c <net_buf_simple_add>
	hdr->evt = evt;
   11002:	233e      	movs	r3, #62	; 0x3e
   11004:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   11006:	2313      	movs	r3, #19
   11008:	7043      	strb	r3, [r0, #1]
   1100a:	2101      	movs	r1, #1
   1100c:	4628      	mov	r0, r5
   1100e:	f010 fb3d 	bl	2168c <net_buf_simple_add>
   11012:	4603      	mov	r3, r0
	me->subevent = subevt;
   11014:	2201      	movs	r2, #1
   11016:	701a      	strb	r2, [r3, #0]
   11018:	4628      	mov	r0, r5
   1101a:	2112      	movs	r1, #18
   1101c:	f010 fb36 	bl	2168c <net_buf_simple_add>
	lecc->status = 0x00;
   11020:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   11022:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
   11026:	7f63      	ldrb	r3, [r4, #29]
   11028:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   1102a:	7fa3      	ldrb	r3, [r4, #30]
   1102c:	f003 0301 	and.w	r3, r3, #1
   11030:	4605      	mov	r5, r0
   11032:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   11034:	4649      	mov	r1, r9
   11036:	2206      	movs	r2, #6
   11038:	3005      	adds	r0, #5
   1103a:	f00e fa4d 	bl	1f4d8 <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   1103e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
   11040:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
   11042:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   11044:	f8a5 200d 	strh.w	r2, [r5, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
   11048:	f8a5 100b 	strh.w	r1, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   1104c:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   11050:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   11054:	746b      	strb	r3, [r5, #17]
   11056:	e5db      	b.n	10c10 <hci_evt_encode+0x11c>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   11058:	462b      	mov	r3, r5
   1105a:	4632      	mov	r2, r6
   1105c:	2100      	movs	r1, #0
   1105e:	201a      	movs	r0, #26
   11060:	e6f9      	b.n	10e56 <hci_evt_encode+0x362>
   11062:	f010 fb13 	bl	2168c <net_buf_simple_add>
	hdr->evt = evt;
   11066:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   11068:	231f      	movs	r3, #31
	hdr->evt = evt;
   1106a:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   1106c:	7043      	strb	r3, [r0, #1]
   1106e:	2101      	movs	r1, #1
   11070:	4628      	mov	r0, r5
   11072:	f010 fb0b 	bl	2168c <net_buf_simple_add>
	me->subevent = subevt;
   11076:	230a      	movs	r3, #10
   11078:	7003      	strb	r3, [r0, #0]
   1107a:	211e      	movs	r1, #30
   1107c:	4628      	mov	r0, r5
   1107e:	f010 fb05 	bl	2168c <net_buf_simple_add>
   11082:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   11084:	221e      	movs	r2, #30
   11086:	2100      	movs	r1, #0
   11088:	f00e fa51 	bl	1f52e <memset>
			leecc->status = status;
   1108c:	7027      	strb	r7, [r4, #0]
			return;
   1108e:	e5bf      	b.n	10c10 <hci_evt_encode+0x11c>
		LL_ASSERT(0);
   11090:	4a08      	ldr	r2, [pc, #32]	; (110b4 <hci_evt_encode+0x5c0>)
   11092:	4909      	ldr	r1, [pc, #36]	; (110b8 <hci_evt_encode+0x5c4>)
   11094:	4809      	ldr	r0, [pc, #36]	; (110bc <hci_evt_encode+0x5c8>)
   11096:	f241 63df 	movw	r3, #5855	; 0x16df
   1109a:	f00b ffcb 	bl	1d034 <printk>
   1109e:	4040      	eors	r0, r0
   110a0:	f380 8811 	msr	BASEPRI, r0
   110a4:	f04f 0003 	mov.w	r0, #3
   110a8:	df02      	svc	2
		return;
   110aa:	e5b1      	b.n	10c10 <hci_evt_encode+0x11c>
   110ac:	20000128 	.word	0x20000128
   110b0:	20000130 	.word	0x20000130
   110b4:	0002327c 	.word	0x0002327c
   110b8:	0002314c 	.word	0x0002314c
   110bc:	000230b4 	.word	0x000230b4

000110c0 <hci_num_cmplt_encode>:
{
   110c0:	b570      	push	{r4, r5, r6, lr}
   110c2:	f100 0408 	add.w	r4, r0, #8
   110c6:	460e      	mov	r6, r1
   110c8:	4620      	mov	r0, r4
   110ca:	2102      	movs	r1, #2
   110cc:	4615      	mov	r5, r2
   110ce:	f010 fadd 	bl	2168c <net_buf_simple_add>
	hdr->evt = evt;
   110d2:	2313      	movs	r3, #19
	hdr->len = len;
   110d4:	2105      	movs	r1, #5
	hdr->evt = evt;
   110d6:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   110d8:	7041      	strb	r1, [r0, #1]
   110da:	4620      	mov	r0, r4
   110dc:	f010 fad6 	bl	2168c <net_buf_simple_add>
	ep->num_handles = num_handles;
   110e0:	2301      	movs	r3, #1
   110e2:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
   110e4:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   110e8:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   110ec:	bd70      	pop	{r4, r5, r6, pc}
   110ee:	bf00      	nop

000110f0 <hci_get_class>:
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   110f0:	7903      	ldrb	r3, [r0, #4]
   110f2:	2b03      	cmp	r3, #3
   110f4:	d009      	beq.n	1110a <hci_get_class+0x1a>
		switch (node_rx->hdr.type) {
   110f6:	2b14      	cmp	r3, #20
   110f8:	d005      	beq.n	11106 <hci_get_class+0x16>
   110fa:	3b15      	subs	r3, #21
			return HCI_CLASS_NONE;
   110fc:	2b05      	cmp	r3, #5
   110fe:	bf94      	ite	ls
   11100:	2003      	movls	r0, #3
   11102:	2000      	movhi	r0, #0
   11104:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
   11106:	2001      	movs	r0, #1
}
   11108:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   1110a:	7f03      	ldrb	r3, [r0, #28]
   1110c:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
   11110:	2b03      	cmp	r3, #3
   11112:	bf0c      	ite	eq
   11114:	2004      	moveq	r0, #4
   11116:	2005      	movne	r0, #5
   11118:	4770      	bx	lr
   1111a:	bf00      	nop

0001111c <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   1111c:	f006 badc 	b.w	176d8 <lll_csrand_get>

00011120 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   11120:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   11122:	2300      	movs	r3, #0
   11124:	f008 f820 	bl	19168 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   11128:	2000      	movs	r0, #0
   1112a:	bd08      	pop	{r3, pc}

0001112c <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   1112c:	b510      	push	{r4, lr}
   1112e:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   11130:	f006 fb08 	bl	17744 <lll_reset>
	LL_ASSERT(!err);
   11134:	b950      	cbnz	r0, 1114c <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   11136:	f006 fe67 	bl	17e08 <lll_adv_reset>
	LL_ASSERT(!err);
   1113a:	b9c0      	cbnz	r0, 1116e <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   1113c:	f007 faf6 	bl	1872c <lll_conn_reset>
	LL_ASSERT(!err);
   11140:	bb30      	cbnz	r0, 11190 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
   11142:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   11144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11148:	f00b b82a 	b.w	1c1a0 <z_impl_k_sem_give>
	LL_ASSERT(!err);
   1114c:	4a19      	ldr	r2, [pc, #100]	; (111b4 <perform_lll_reset+0x88>)
   1114e:	491a      	ldr	r1, [pc, #104]	; (111b8 <perform_lll_reset+0x8c>)
   11150:	481a      	ldr	r0, [pc, #104]	; (111bc <perform_lll_reset+0x90>)
   11152:	f240 731c 	movw	r3, #1820	; 0x71c
   11156:	f00b ff6d 	bl	1d034 <printk>
   1115a:	4040      	eors	r0, r0
   1115c:	f380 8811 	msr	BASEPRI, r0
   11160:	f04f 0003 	mov.w	r0, #3
   11164:	df02      	svc	2
	err = lll_adv_reset();
   11166:	f006 fe4f 	bl	17e08 <lll_adv_reset>
	LL_ASSERT(!err);
   1116a:	2800      	cmp	r0, #0
   1116c:	d0e6      	beq.n	1113c <perform_lll_reset+0x10>
   1116e:	4a11      	ldr	r2, [pc, #68]	; (111b4 <perform_lll_reset+0x88>)
   11170:	4911      	ldr	r1, [pc, #68]	; (111b8 <perform_lll_reset+0x8c>)
   11172:	4812      	ldr	r0, [pc, #72]	; (111bc <perform_lll_reset+0x90>)
   11174:	f240 7321 	movw	r3, #1825	; 0x721
   11178:	f00b ff5c 	bl	1d034 <printk>
   1117c:	4040      	eors	r0, r0
   1117e:	f380 8811 	msr	BASEPRI, r0
   11182:	f04f 0003 	mov.w	r0, #3
   11186:	df02      	svc	2
	err = lll_conn_reset();
   11188:	f007 fad0 	bl	1872c <lll_conn_reset>
	LL_ASSERT(!err);
   1118c:	2800      	cmp	r0, #0
   1118e:	d0d8      	beq.n	11142 <perform_lll_reset+0x16>
   11190:	4a08      	ldr	r2, [pc, #32]	; (111b4 <perform_lll_reset+0x88>)
   11192:	4909      	ldr	r1, [pc, #36]	; (111b8 <perform_lll_reset+0x8c>)
   11194:	4809      	ldr	r0, [pc, #36]	; (111bc <perform_lll_reset+0x90>)
   11196:	f240 732d 	movw	r3, #1837	; 0x72d
   1119a:	f00b ff4b 	bl	1d034 <printk>
   1119e:	4040      	eors	r0, r0
   111a0:	f380 8811 	msr	BASEPRI, r0
   111a4:	f04f 0003 	mov.w	r0, #3
   111a8:	df02      	svc	2
   111aa:	4620      	mov	r0, r4
}
   111ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   111b0:	f00a bff6 	b.w	1c1a0 <z_impl_k_sem_give>
   111b4:	00023310 	.word	0x00023310
   111b8:	0002334c 	.word	0x0002334c
   111bc:	000230b4 	.word	0x000230b4

000111c0 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   111c0:	6008      	str	r0, [r1, #0]
   111c2:	4801      	ldr	r0, [pc, #4]	; (111c8 <ull_ticker_status_give+0x8>)
   111c4:	f00a bfec 	b.w	1c1a0 <z_impl_k_sem_give>
   111c8:	20001fbc 	.word	0x20001fbc

000111cc <disabled_cb>:
   111cc:	f00a bfe8 	b.w	1c1a0 <z_impl_k_sem_give>

000111d0 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   111d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   111d4:	4e2f      	ldr	r6, [pc, #188]	; (11294 <tx_cmplt_get+0xc4>)
{
   111d6:	460c      	mov	r4, r1
   111d8:	4691      	mov	r9, r2
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   111da:	7823      	ldrb	r3, [r4, #0]
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   111dc:	7872      	ldrb	r2, [r6, #1]
   111de:	7831      	ldrb	r1, [r6, #0]
   111e0:	429a      	cmp	r2, r3
   111e2:	bf9c      	itt	ls
   111e4:	78b3      	ldrbls	r3, [r6, #2]
		*idx = first;
   111e6:	7023      	strbls	r3, [r4, #0]
	}

	if (*idx == last) {
   111e8:	4599      	cmp	r9, r3
{
   111ea:	4682      	mov	sl, r0
   111ec:	d048      	beq.n	11280 <tx_cmplt_get+0xb0>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   111ee:	fb13 f101 	smulbb	r1, r3, r1
   111f2:	4d29      	ldr	r5, [pc, #164]	; (11298 <tx_cmplt_get+0xc8>)
	i = *idx + 1;
   111f4:	3301      	adds	r3, #1
   111f6:	b2db      	uxtb	r3, r3
		i = 0U;
   111f8:	429a      	cmp	r2, r3
   111fa:	bf08      	it	eq
   111fc:	2300      	moveq	r3, #0
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
   111fe:	186a      	adds	r2, r5, r1

	*idx = i;
   11200:	7023      	strb	r3, [r4, #0]
   11202:	d03d      	beq.n	11280 <tx_cmplt_get+0xb0>
		return 0;
	}

	*handle = tx->handle;
   11204:	5a6b      	ldrh	r3, [r5, r1]
   11206:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
   11208:	2700      	movs	r7, #0
   1120a:	f04f 0b01 	mov.w	fp, #1
   1120e:	f04f 0802 	mov.w	r8, #2
   11212:	e026      	b.n	11262 <tx_cmplt_get+0x92>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
   11214:	b38b      	cbz	r3, 1127a <tx_cmplt_get+0xaa>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   11216:	7903      	ldrb	r3, [r0, #4]
   11218:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
   1121c:	3b01      	subs	r3, #1
   1121e:	2b01      	cmp	r3, #1
   11220:	d932      	bls.n	11288 <tx_cmplt_get+0xb8>
   11222:	f8c2 8004 	str.w	r8, [r2, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
   11226:	f002 fb33 	bl	13890 <ll_tx_mem_release>
	if (*idx >= count) {
   1122a:	7823      	ldrb	r3, [r4, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   1122c:	7872      	ldrb	r2, [r6, #1]
   1122e:	7831      	ldrb	r1, [r6, #0]
   11230:	429a      	cmp	r2, r3
   11232:	bf9c      	itt	ls
   11234:	78b3      	ldrbls	r3, [r6, #2]
		*idx = first;
   11236:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
   11238:	4599      	cmp	r9, r3
   1123a:	d022      	beq.n	11282 <tx_cmplt_get+0xb2>
	i = *idx + 1;
   1123c:	f103 0c01 	add.w	ip, r3, #1
   11240:	fa5f fc8c 	uxtb.w	ip, ip
	p = (void *)(fifo + (*idx) * size);
   11244:	fb13 f301 	smulbb	r3, r3, r1
		i = 0U;
   11248:	4562      	cmp	r2, ip
   1124a:	bf08      	it	eq
   1124c:	f04f 0c00 	moveq.w	ip, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   11250:	18ea      	adds	r2, r5, r3
	*idx = i;
   11252:	f884 c000 	strb.w	ip, [r4]
   11256:	d014      	beq.n	11282 <tx_cmplt_get+0xb2>
   11258:	5ae9      	ldrh	r1, [r5, r3]
   1125a:	f8ba 3000 	ldrh.w	r3, [sl]
   1125e:	4299      	cmp	r1, r3
   11260:	d10f      	bne.n	11282 <tx_cmplt_get+0xb2>
		node_tx = tx->node;
   11262:	6850      	ldr	r0, [r2, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   11264:	2801      	cmp	r0, #1
		    (((uint32_t)node_tx & ~3) &&
   11266:	f020 0303 	bic.w	r3, r0, #3
		if (!node_tx || (node_tx == (void *)1) ||
   1126a:	d8d3      	bhi.n	11214 <tx_cmplt_get+0x44>
			cmplt++;
   1126c:	3701      	adds	r7, #1
   1126e:	f8c2 b004 	str.w	fp, [r2, #4]
   11272:	b2ff      	uxtb	r7, r7
		if (((uint32_t)node_tx & ~3)) {
   11274:	2b00      	cmp	r3, #0
   11276:	d0d8      	beq.n	1122a <tx_cmplt_get+0x5a>
   11278:	e7d5      	b.n	11226 <tx_cmplt_get+0x56>
   1127a:	f8c2 8004 	str.w	r8, [r2, #4]
   1127e:	e7d4      	b.n	1122a <tx_cmplt_get+0x5a>
		return 0;
   11280:	2700      	movs	r7, #0

	return cmplt;
}
   11282:	4638      	mov	r0, r7
   11284:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   11288:	3701      	adds	r7, #1
   1128a:	f8c2 b004 	str.w	fp, [r2, #4]
   1128e:	b2ff      	uxtb	r7, r7
		if (((uint32_t)node_tx & ~3)) {
   11290:	e7c9      	b.n	11226 <tx_cmplt_get+0x56>
   11292:	bf00      	nop
   11294:	20000420 	.word	0x20000420
   11298:	20000424 	.word	0x20000424

0001129c <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
   1129c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   112a0:	4f3c      	ldr	r7, [pc, #240]	; (11394 <ull_done+0xf8>)
	case EVENT_DONE_EXTRA_TYPE_NONE:
		/* ignore */
		break;

	default:
		LL_ASSERT(0);
   112a2:	f8df 8104 	ldr.w	r8, [pc, #260]	; 113a8 <ull_done+0x10c>
   112a6:	f8df 9104 	ldr.w	r9, [pc, #260]	; 113ac <ull_done+0x110>
{
   112aa:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   112ac:	e9d7 0100 	ldrd	r0, r1, [r7]
   112b0:	aa01      	add	r2, sp, #4
   112b2:	f7fd f8e7 	bl	e484 <memq_peek>
		if (link) {
   112b6:	4604      	mov	r4, r0
   112b8:	2800      	cmp	r0, #0
   112ba:	d03d      	beq.n	11338 <ull_done+0x9c>
			memq_dequeue(memq_ull_done.tail, &memq_ull_done.head, NULL);
   112bc:	6878      	ldr	r0, [r7, #4]
   112be:	2200      	movs	r2, #0
   112c0:	4639      	mov	r1, r7
   112c2:	f7fd f8e7 	bl	e494 <memq_dequeue>
			rx_demux_event_done(link, done);
   112c6:	9d01      	ldr	r5, [sp, #4]
	switch (done->extra.type) {
   112c8:	f895 3020 	ldrb.w	r3, [r5, #32]
	ull_hdr = done->param;
   112cc:	69ee      	ldr	r6, [r5, #28]
	switch (done->extra.type) {
   112ce:	b123      	cbz	r3, 112da <ull_done+0x3e>
   112d0:	2b01      	cmp	r3, #1
   112d2:	d142      	bne.n	1135a <ull_done+0xbe>
		ull_conn_done(done);
   112d4:	4628      	mov	r0, r5
   112d6:	f004 fa69 	bl	157ac <ull_conn_done>
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   112da:	4a2f      	ldr	r2, [pc, #188]	; (11398 <ull_done+0xfc>)
	last = last + 1;
   112dc:	78d3      	ldrb	r3, [r2, #3]
	if (last == count) {
   112de:	f892 c001 	ldrb.w	ip, [r2, #1]
   112e2:	7891      	ldrb	r1, [r2, #2]
	last = last + 1;
   112e4:	3301      	adds	r3, #1
		break;
	}

	/* release done */
	done->extra.type = 0U;
   112e6:	2000      	movs	r0, #0
   112e8:	b2db      	uxtb	r3, r3
		last = 0U;
   112ea:	459c      	cmp	ip, r3
   112ec:	bf08      	it	eq
   112ee:	4603      	moveq	r3, r0
	if (last == first) {
   112f0:	4299      	cmp	r1, r3
   112f2:	f885 0020 	strb.w	r0, [r5, #32]
   112f6:	d022      	beq.n	1133e <ull_done+0xa2>
	done->hdr.link = link;
   112f8:	602c      	str	r4, [r5, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   112fa:	78d0      	ldrb	r0, [r2, #3]
   112fc:	7811      	ldrb	r1, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   112fe:	fb00 2101 	mla	r1, r0, r1, r2
   11302:	604d      	str	r5, [r1, #4]
	*last = idx; /* Commit: Update write index */
   11304:	70d3      	strb	r3, [r2, #3]
	/* LLL done synchronized */
	lll_done_sync();
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL_DONE */

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
   11306:	2e00      	cmp	r6, #0
   11308:	d0d0      	beq.n	112ac <ull_done+0x10>
	return hdr->ref;
   1130a:	7833      	ldrb	r3, [r6, #0]
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_ref_get(ull_hdr));
   1130c:	2b00      	cmp	r3, #0
   1130e:	d032      	beq.n	11376 <ull_done+0xda>
	return hdr->ref--;
   11310:	7833      	ldrb	r3, [r6, #0]
   11312:	3b01      	subs	r3, #1
   11314:	b2db      	uxtb	r3, r3
   11316:	7033      	strb	r3, [r6, #0]
	return hdr->ref;
   11318:	7833      	ldrb	r3, [r6, #0]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   1131a:	2b00      	cmp	r3, #0
   1131c:	d1c6      	bne.n	112ac <ull_done+0x10>
   1131e:	6873      	ldr	r3, [r6, #4]
   11320:	2b00      	cmp	r3, #0
   11322:	d0c3      	beq.n	112ac <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   11324:	68b0      	ldr	r0, [r6, #8]
   11326:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   11328:	e9d7 0100 	ldrd	r0, r1, [r7]
   1132c:	aa01      	add	r2, sp, #4
   1132e:	f7fd f8a9 	bl	e484 <memq_peek>
		if (link) {
   11332:	4604      	mov	r4, r0
   11334:	2800      	cmp	r0, #0
   11336:	d1c1      	bne.n	112bc <ull_done+0x20>
}
   11338:	b003      	add	sp, #12
   1133a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
   1133e:	4917      	ldr	r1, [pc, #92]	; (1139c <ull_done+0x100>)
   11340:	4817      	ldr	r0, [pc, #92]	; (113a0 <ull_done+0x104>)
   11342:	f640 1347 	movw	r3, #2375	; 0x947
   11346:	4642      	mov	r2, r8
   11348:	f00b fe74 	bl	1d034 <printk>
   1134c:	4040      	eors	r0, r0
   1134e:	f380 8811 	msr	BASEPRI, r0
   11352:	f04f 0003 	mov.w	r0, #3
   11356:	df02      	svc	2
   11358:	e7d5      	b.n	11306 <ull_done+0x6a>
		LL_ASSERT(0);
   1135a:	4811      	ldr	r0, [pc, #68]	; (113a0 <ull_done+0x104>)
   1135c:	f44f 6314 	mov.w	r3, #2368	; 0x940
   11360:	4642      	mov	r2, r8
   11362:	4649      	mov	r1, r9
   11364:	f00b fe66 	bl	1d034 <printk>
   11368:	4040      	eors	r0, r0
   1136a:	f380 8811 	msr	BASEPRI, r0
   1136e:	f04f 0003 	mov.w	r0, #3
   11372:	df02      	svc	2
		break;
   11374:	e7b1      	b.n	112da <ull_done+0x3e>
	LL_ASSERT(ull_ref_get(ull_hdr));
   11376:	490b      	ldr	r1, [pc, #44]	; (113a4 <ull_done+0x108>)
   11378:	4809      	ldr	r0, [pc, #36]	; (113a0 <ull_done+0x104>)
   1137a:	f640 1357 	movw	r3, #2391	; 0x957
   1137e:	4642      	mov	r2, r8
   11380:	f00b fe58 	bl	1d034 <printk>
   11384:	4040      	eors	r0, r0
   11386:	f380 8811 	msr	BASEPRI, r0
   1138a:	f04f 0003 	mov.w	r0, #3
   1138e:	df02      	svc	2
   11390:	e7be      	b.n	11310 <ull_done+0x74>
   11392:	bf00      	nop
   11394:	20001fa8 	.word	0x20001fa8
   11398:	200002bc 	.word	0x200002bc
   1139c:	00023354 	.word	0x00023354
   113a0:	000230b4 	.word	0x000230b4
   113a4:	00023364 	.word	0x00023364
   113a8:	00023310 	.word	0x00023310
   113ac:	0002314c 	.word	0x0002314c

000113b0 <rx_alloc>:
{
   113b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max > mem_link_rx.quota_pdu) {
   113b4:	4e37      	ldr	r6, [pc, #220]	; (11494 <rx_alloc+0xe4>)
   113b6:	7833      	ldrb	r3, [r6, #0]
   113b8:	4298      	cmp	r0, r3
   113ba:	bf28      	it	cs
   113bc:	4618      	movcs	r0, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   113be:	b380      	cbz	r0, 11422 <rx_alloc+0x72>
   113c0:	4d35      	ldr	r5, [pc, #212]	; (11498 <rx_alloc+0xe8>)
		rx = mem_acquire(&mem_pdu_rx.free);
   113c2:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 114a4 <rx_alloc+0xf4>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   113c6:	78ec      	ldrb	r4, [r5, #3]
   113c8:	f100 39ff 	add.w	r9, r0, #4294967295	; 0xffffffff
   113cc:	fa5f f989 	uxtb.w	r9, r9
		link = mem_acquire(&mem_link_rx.free);
   113d0:	1d37      	adds	r7, r6, #4
	if (last == count) {
   113d2:	786a      	ldrb	r2, [r5, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   113d4:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   113d6:	3401      	adds	r4, #1
   113d8:	b2e4      	uxtb	r4, r4
		last = 0U;
   113da:	42a2      	cmp	r2, r4
   113dc:	bf08      	it	eq
   113de:	2400      	moveq	r4, #0
	if (last == first) {
   113e0:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   113e2:	4638      	mov	r0, r7
   113e4:	d04b      	beq.n	1147e <rx_alloc+0xce>
   113e6:	f7fc ffdf 	bl	e3a8 <mem_acquire>
   113ea:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   113ec:	4640      	mov	r0, r8
		if (!link) {
   113ee:	f1ba 0f00 	cmp.w	sl, #0
   113f2:	d042      	beq.n	1147a <rx_alloc+0xca>
		rx = mem_acquire(&mem_pdu_rx.free);
   113f4:	f7fc ffd8 	bl	e3a8 <mem_acquire>
		if (!rx) {
   113f8:	2800      	cmp	r0, #0
   113fa:	d045      	beq.n	11488 <rx_alloc+0xd8>
		rx->link = link;
   113fc:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   11400:	78ea      	ldrb	r2, [r5, #3]
   11402:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   11404:	fb02 5303 	mla	r3, r2, r3, r5
   11408:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   1140a:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   1140c:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1140e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
	mem_link_rx.quota_pdu += delta;
   11412:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   11414:	fa5f f989 	uxtb.w	r9, r9
	mem_link_rx.quota_pdu += delta;
   11418:	b2db      	uxtb	r3, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1141a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   1141e:	7033      	strb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   11420:	d1d7      	bne.n	113d2 <rx_alloc+0x22>
	while (mem_link_rx.quota_pdu &&
   11422:	b353      	cbz	r3, 1147a <rx_alloc+0xca>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   11424:	4d1d      	ldr	r5, [pc, #116]	; (1149c <rx_alloc+0xec>)
		link = mem_acquire(&mem_link_rx.free);
   11426:	4f1e      	ldr	r7, [pc, #120]	; (114a0 <rx_alloc+0xf0>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   11428:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   1142a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 114a4 <rx_alloc+0xf4>
		link->mem = NULL;
   1142e:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   11432:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   11434:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   11436:	3401      	adds	r4, #1
   11438:	b2e4      	uxtb	r4, r4
		last = 0U;
   1143a:	42a2      	cmp	r2, r4
   1143c:	bf08      	it	eq
   1143e:	2400      	moveq	r4, #0
	if (last == first) {
   11440:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   11442:	4638      	mov	r0, r7
   11444:	d019      	beq.n	1147a <rx_alloc+0xca>
   11446:	f7fc ffaf 	bl	e3a8 <mem_acquire>
   1144a:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   1144c:	4640      	mov	r0, r8
		if (!link) {
   1144e:	f1ba 0f00 	cmp.w	sl, #0
   11452:	d012      	beq.n	1147a <rx_alloc+0xca>
		rx = mem_acquire(&mem_pdu_rx.free);
   11454:	f7fc ffa8 	bl	e3a8 <mem_acquire>
		if (!rx) {
   11458:	b1b0      	cbz	r0, 11488 <rx_alloc+0xd8>
		link->mem = NULL;
   1145a:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   1145e:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   11462:	78ea      	ldrb	r2, [r5, #3]
   11464:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   11466:	fb02 5303 	mla	r3, r2, r3, r5
   1146a:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   1146c:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   1146e:	70ec      	strb	r4, [r5, #3]
   11470:	3b01      	subs	r3, #1
   11472:	b2db      	uxtb	r3, r3
   11474:	7033      	strb	r3, [r6, #0]
	while (mem_link_rx.quota_pdu &&
   11476:	2b00      	cmp	r3, #0
   11478:	d1db      	bne.n	11432 <rx_alloc+0x82>
}
   1147a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!max) {
   1147e:	f1b9 0f00 	cmp.w	r9, #0
   11482:	d0fa      	beq.n	1147a <rx_alloc+0xca>
	while (mem_link_rx.quota_pdu &&
   11484:	7833      	ldrb	r3, [r6, #0]
   11486:	e7cc      	b.n	11422 <rx_alloc+0x72>
			mem_release(link, &mem_link_rx.free);
   11488:	4650      	mov	r0, sl
   1148a:	4905      	ldr	r1, [pc, #20]	; (114a0 <rx_alloc+0xf0>)
}
   1148c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			mem_release(link, &mem_link_rx.free);
   11490:	f7fc bfa4 	b.w	e3dc <mem_release>
   11494:	20001cb4 	.word	0x20001cb4
   11498:	200002e4 	.word	0x200002e4
   1149c:	200002d0 	.word	0x200002d0
   114a0:	20001cb8 	.word	0x20001cb8
   114a4:	20001d14 	.word	0x20001d14

000114a8 <init_reset>:
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   114a8:	4b46      	ldr	r3, [pc, #280]	; (115c4 <init_reset+0x11c>)
{
   114aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   114ae:	1d18      	adds	r0, r3, #4
   114b0:	2203      	movs	r2, #3
   114b2:	2134      	movs	r1, #52	; 0x34
   114b4:	f7fc ff48 	bl	e348 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX +
   114b8:	4b43      	ldr	r3, [pc, #268]	; (115c8 <init_reset+0x120>)
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   114ba:	4d44      	ldr	r5, [pc, #272]	; (115cc <init_reset+0x124>)
		link = mem_acquire(&mem_link_done.free);
   114bc:	4f42      	ldr	r7, [pc, #264]	; (115c8 <init_reset+0x120>)
		rx = mem_acquire(&mem_done.free);
   114be:	f8df 8104 	ldr.w	r8, [pc, #260]	; 115c4 <init_reset+0x11c>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX +
   114c2:	2204      	movs	r2, #4
   114c4:	2108      	movs	r1, #8
   114c6:	1898      	adds	r0, r3, r2
   114c8:	f7fc ff3e 	bl	e348 <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   114cc:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   114ce:	786a      	ldrb	r2, [r5, #1]
   114d0:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   114d2:	3401      	adds	r4, #1
   114d4:	b2e4      	uxtb	r4, r4
		last = 0U;
   114d6:	42a2      	cmp	r2, r4
   114d8:	bf08      	it	eq
   114da:	2400      	moveq	r4, #0
	if (last == first) {
   114dc:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   114de:	4638      	mov	r0, r7
   114e0:	d013      	beq.n	1150a <init_reset+0x62>
   114e2:	f7fc ff61 	bl	e3a8 <mem_acquire>
   114e6:	4606      	mov	r6, r0
		rx = mem_acquire(&mem_done.free);
   114e8:	4640      	mov	r0, r8
		if (!link) {
   114ea:	b176      	cbz	r6, 1150a <init_reset+0x62>
		rx = mem_acquire(&mem_done.free);
   114ec:	f7fc ff5c 	bl	e3a8 <mem_acquire>
		if (!rx) {
   114f0:	b138      	cbz	r0, 11502 <init_reset+0x5a>
		rx->link = link;
   114f2:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   114f4:	78ea      	ldrb	r2, [r5, #3]
   114f6:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   114f8:	fb02 5303 	mla	r3, r2, r3, r5
   114fc:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   114fe:	70ec      	strb	r4, [r5, #3]
}
   11500:	e7e5      	b.n	114ce <init_reset+0x26>
			mem_release(link, &mem_link_done.free);
   11502:	4931      	ldr	r1, [pc, #196]	; (115c8 <init_reset+0x120>)
   11504:	4630      	mov	r0, r6
   11506:	f7fc ff69 	bl	e3dc <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   1150a:	4b31      	ldr	r3, [pc, #196]	; (115d0 <init_reset+0x128>)
   1150c:	2209      	movs	r2, #9
   1150e:	1d18      	adds	r0, r3, #4
   11510:	2148      	movs	r1, #72	; 0x48
   11512:	f7fc ff19 	bl	e348 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   11516:	4b2f      	ldr	r3, [pc, #188]	; (115d4 <init_reset+0x12c>)
   11518:	220b      	movs	r2, #11
   1151a:	1d18      	adds	r0, r3, #4
   1151c:	2108      	movs	r1, #8
   1151e:	f7fc ff13 	bl	e348 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   11522:	482c      	ldr	r0, [pc, #176]	; (115d4 <init_reset+0x12c>)
   11524:	f7fc ff40 	bl	e3a8 <mem_acquire>
	LL_ASSERT(link);
   11528:	4604      	mov	r4, r0
   1152a:	b308      	cbz	r0, 11570 <init_reset+0xc8>
	MEMQ_INIT(ull_rx, link);
   1152c:	4a2a      	ldr	r2, [pc, #168]	; (115d8 <init_reset+0x130>)
   1152e:	4620      	mov	r0, r4
   11530:	1f11      	subs	r1, r2, #4
   11532:	f7fc ff8f 	bl	e454 <memq_init>
	link = mem_acquire(&mem_link_done.free);
   11536:	4824      	ldr	r0, [pc, #144]	; (115c8 <init_reset+0x120>)
   11538:	f7fc ff36 	bl	e3a8 <mem_acquire>
	LL_ASSERT(link);
   1153c:	4604      	mov	r4, r0
   1153e:	b328      	cbz	r0, 1158c <init_reset+0xe4>
	MEMQ_INIT(ull_done, link);
   11540:	4a26      	ldr	r2, [pc, #152]	; (115dc <init_reset+0x134>)
   11542:	4620      	mov	r0, r4
   11544:	1f11      	subs	r1, r2, #4
   11546:	f7fc ff85 	bl	e454 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   1154a:	4822      	ldr	r0, [pc, #136]	; (115d4 <init_reset+0x12c>)
   1154c:	f7fc ff2c 	bl	e3a8 <mem_acquire>
	LL_ASSERT(link);
   11550:	4604      	mov	r4, r0
   11552:	b348      	cbz	r0, 115a8 <init_reset+0x100>
	MEMQ_INIT(ll_rx, link);
   11554:	4a22      	ldr	r2, [pc, #136]	; (115e0 <init_reset+0x138>)
   11556:	4620      	mov	r0, r4
   11558:	1f11      	subs	r1, r2, #4
   1155a:	f7fc ff7b 	bl	e454 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   1155e:	4b21      	ldr	r3, [pc, #132]	; (115e4 <init_reset+0x13c>)
   11560:	2207      	movs	r2, #7
	rx_alloc(UINT8_MAX);
   11562:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   11564:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   11566:	f7ff ff23 	bl	113b0 <rx_alloc>
}
   1156a:	2000      	movs	r0, #0
   1156c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(link);
   11570:	4a1d      	ldr	r2, [pc, #116]	; (115e8 <init_reset+0x140>)
   11572:	491e      	ldr	r1, [pc, #120]	; (115ec <init_reset+0x144>)
   11574:	481e      	ldr	r0, [pc, #120]	; (115f0 <init_reset+0x148>)
   11576:	f240 63fa 	movw	r3, #1786	; 0x6fa
   1157a:	f00b fd5b 	bl	1d034 <printk>
   1157e:	4040      	eors	r0, r0
   11580:	f380 8811 	msr	BASEPRI, r0
   11584:	f04f 0003 	mov.w	r0, #3
   11588:	df02      	svc	2
   1158a:	e7cf      	b.n	1152c <init_reset+0x84>
	LL_ASSERT(link);
   1158c:	4a16      	ldr	r2, [pc, #88]	; (115e8 <init_reset+0x140>)
   1158e:	4917      	ldr	r1, [pc, #92]	; (115ec <init_reset+0x144>)
   11590:	4817      	ldr	r0, [pc, #92]	; (115f0 <init_reset+0x148>)
   11592:	f240 7302 	movw	r3, #1794	; 0x702
   11596:	f00b fd4d 	bl	1d034 <printk>
   1159a:	4040      	eors	r0, r0
   1159c:	f380 8811 	msr	BASEPRI, r0
   115a0:	f04f 0003 	mov.w	r0, #3
   115a4:	df02      	svc	2
   115a6:	e7cb      	b.n	11540 <init_reset+0x98>
	LL_ASSERT(link);
   115a8:	4a0f      	ldr	r2, [pc, #60]	; (115e8 <init_reset+0x140>)
   115aa:	4910      	ldr	r1, [pc, #64]	; (115ec <init_reset+0x144>)
   115ac:	4810      	ldr	r0, [pc, #64]	; (115f0 <init_reset+0x148>)
   115ae:	f240 730a 	movw	r3, #1802	; 0x70a
   115b2:	f00b fd3f 	bl	1d034 <printk>
   115b6:	4040      	eors	r0, r0
   115b8:	f380 8811 	msr	BASEPRI, r0
   115bc:	f04f 0003 	mov.w	r0, #3
   115c0:	df02      	svc	2
   115c2:	e7c7      	b.n	11554 <init_reset+0xac>
   115c4:	20001bf0 	.word	0x20001bf0
   115c8:	20001c90 	.word	0x20001c90
   115cc:	200002bc 	.word	0x200002bc
   115d0:	20001d14 	.word	0x20001d14
   115d4:	20001cb8 	.word	0x20001cb8
   115d8:	20001fb4 	.word	0x20001fb4
   115dc:	20001fac 	.word	0x20001fac
   115e0:	20001fa4 	.word	0x20001fa4
   115e4:	20001cb4 	.word	0x20001cb4
   115e8:	00023310 	.word	0x00023310
   115ec:	000235e0 	.word	0x000235e0
   115f0:	000230b4 	.word	0x000230b4

000115f4 <rx_demux>:
{
   115f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115f8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 117ac <rx_demux+0x1b8>
	k_sem_give(sem_recv);
   115fc:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 117bc <rx_demux+0x1c8>
		LL_ASSERT(0);
   11600:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 117c0 <rx_demux+0x1cc>
   11604:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 117c4 <rx_demux+0x1d0>
{
   11608:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   1160a:	e9d8 0100 	ldrd	r0, r1, [r8]
   1160e:	aa03      	add	r2, sp, #12
   11610:	f7fc ff38 	bl	e484 <memq_peek>
		if (link) {
   11614:	4605      	mov	r5, r0
   11616:	2800      	cmp	r0, #0
   11618:	d035      	beq.n	11686 <rx_demux+0x92>
			LL_ASSERT(rx);
   1161a:	9b03      	ldr	r3, [sp, #12]
   1161c:	2b00      	cmp	r3, #0
   1161e:	f000 80a5 	beq.w	1176c <rx_demux+0x178>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   11622:	7818      	ldrb	r0, [r3, #0]
   11624:	aa04      	add	r2, sp, #16
   11626:	a902      	add	r1, sp, #8
   11628:	f004 fb4a 	bl	15cc0 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   1162c:	4604      	mov	r4, r0
   1162e:	2800      	cmp	r0, #0
   11630:	d055      	beq.n	116de <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   11632:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   11636:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   1163a:	780f      	ldrb	r7, [r1, #0]
   1163c:	f8ad 200a 	strh.w	r2, [sp, #10]
   11640:	ae05      	add	r6, sp, #20
   11642:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   11644:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   11648:	f004 fb56 	bl	15cf8 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   1164c:	4621      	mov	r1, r4
   1164e:	9a05      	ldr	r2, [sp, #20]
   11650:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   11654:	f004 fb9a 	bl	15d8c <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   11658:	4620      	mov	r0, r4
   1165a:	f004 fb09 	bl	15c70 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   1165e:	4632      	mov	r2, r6
   11660:	4629      	mov	r1, r5
   11662:	4638      	mov	r0, r7
   11664:	f004 fb2c 	bl	15cc0 <ull_conn_ack_by_last_peek>
	} while (link);
   11668:	4604      	mov	r4, r0
   1166a:	2800      	cmp	r0, #0
   1166c:	d1ec      	bne.n	11648 <rx_demux+0x54>
	k_sem_give(sem_recv);
   1166e:	f8d9 0000 	ldr.w	r0, [r9]
   11672:	f00a fd95 	bl	1c1a0 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   11676:	e9d8 0100 	ldrd	r0, r1, [r8]
   1167a:	aa03      	add	r2, sp, #12
   1167c:	f7fc ff02 	bl	e484 <memq_peek>
		if (link) {
   11680:	4605      	mov	r5, r0
   11682:	2800      	cmp	r0, #0
   11684:	d1c9      	bne.n	1161a <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   11686:	aa04      	add	r2, sp, #16
   11688:	a902      	add	r1, sp, #8
   1168a:	f10d 0007 	add.w	r0, sp, #7
   1168e:	f004 fafb 	bl	15c88 <ull_conn_ack_peek>
			if (link) {
   11692:	4604      	mov	r4, r0
   11694:	2800      	cmp	r0, #0
   11696:	d066      	beq.n	11766 <rx_demux+0x172>
				rx_demux_conn_tx_ack(ack_last, handle,
   11698:	9b04      	ldr	r3, [sp, #16]
   1169a:	9305      	str	r3, [sp, #20]
   1169c:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   116a0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   116a4:	f8ad 300a 	strh.w	r3, [sp, #10]
   116a8:	ae05      	add	r6, sp, #20
   116aa:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   116ae:	f004 fb23 	bl	15cf8 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   116b2:	4621      	mov	r1, r4
   116b4:	9a05      	ldr	r2, [sp, #20]
   116b6:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   116ba:	f004 fb67 	bl	15d8c <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   116be:	4620      	mov	r0, r4
   116c0:	f004 fad6 	bl	15c70 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   116c4:	4632      	mov	r2, r6
   116c6:	4629      	mov	r1, r5
   116c8:	4638      	mov	r0, r7
   116ca:	f004 faf9 	bl	15cc0 <ull_conn_ack_by_last_peek>
	} while (link);
   116ce:	4604      	mov	r4, r0
   116d0:	2800      	cmp	r0, #0
   116d2:	d1ec      	bne.n	116ae <rx_demux+0xba>
	k_sem_give(sem_recv);
   116d4:	f8d9 0000 	ldr.w	r0, [r9]
   116d8:	f00a fd62 	bl	1c1a0 <z_impl_k_sem_give>
			if (nack) {
   116dc:	e7cb      	b.n	11676 <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
   116de:	9b03      	ldr	r3, [sp, #12]
   116e0:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   116e2:	791b      	ldrb	r3, [r3, #4]
   116e4:	3b01      	subs	r3, #1
   116e6:	2b14      	cmp	r3, #20
   116e8:	d80c      	bhi.n	11704 <rx_demux+0x110>
   116ea:	e8df f003 	tbb	[pc, r3]
   116ee:	0b19      	.short	0x0b19
   116f0:	0b0b0b37 	.word	0x0b0b0b37
   116f4:	0b0b0b0b 	.word	0x0b0b0b0b
   116f8:	0b0b0b0b 	.word	0x0b0b0b0b
   116fc:	0b0b0b0b 	.word	0x0b0b0b0b
   11700:	2c0b      	.short	0x2c0b
   11702:	19          	.byte	0x19
   11703:	00          	.byte	0x00
		LL_ASSERT(0);
   11704:	4828      	ldr	r0, [pc, #160]	; (117a8 <rx_demux+0x1b4>)
   11706:	f640 03fb 	movw	r3, #2299	; 0x8fb
   1170a:	4652      	mov	r2, sl
   1170c:	4659      	mov	r1, fp
   1170e:	f00b fc91 	bl	1d034 <printk>
   11712:	4040      	eors	r0, r0
   11714:	f380 8811 	msr	BASEPRI, r0
   11718:	f04f 0003 	mov.w	r0, #3
   1171c:	df02      	svc	2
			if (nack) {
   1171e:	e774      	b.n	1160a <rx_demux+0x16>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   11720:	4922      	ldr	r1, [pc, #136]	; (117ac <rx_demux+0x1b8>)
   11722:	f8d8 0004 	ldr.w	r0, [r8, #4]
   11726:	2200      	movs	r2, #0
   11728:	f7fc feb4 	bl	e494 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1172c:	4b20      	ldr	r3, [pc, #128]	; (117b0 <rx_demux+0x1bc>)
		ll_rx_put(link, rx);
   1172e:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   11730:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   11732:	4628      	mov	r0, r5
   11734:	4a1f      	ldr	r2, [pc, #124]	; (117b4 <rx_demux+0x1c0>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   11736:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   11738:	f7fc fe9a 	bl	e470 <memq_enqueue>
	k_sem_give(sem_recv);
   1173c:	f8d9 0000 	ldr.w	r0, [r9]
   11740:	f00a fd2e 	bl	1c1a0 <z_impl_k_sem_give>
			if (nack) {
   11744:	e797      	b.n	11676 <rx_demux+0x82>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   11746:	4919      	ldr	r1, [pc, #100]	; (117ac <rx_demux+0x1b8>)
   11748:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1174c:	2200      	movs	r2, #0
   1174e:	f7fc fea1 	bl	e494 <memq_dequeue>
		ull_conn_setup(link, rx);
   11752:	9905      	ldr	r1, [sp, #20]
   11754:	4628      	mov	r0, r5
   11756:	f002 fbb9 	bl	13ecc <ull_conn_setup>
			if (nack) {
   1175a:	e756      	b.n	1160a <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
   1175c:	a905      	add	r1, sp, #20
   1175e:	4628      	mov	r0, r5
   11760:	f002 fbd4 	bl	13f0c <ull_conn_rx>
		if (nack) {
   11764:	b188      	cbz	r0, 1178a <rx_demux+0x196>
}
   11766:	b007      	add	sp, #28
   11768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
   1176c:	4912      	ldr	r1, [pc, #72]	; (117b8 <rx_demux+0x1c4>)
   1176e:	480e      	ldr	r0, [pc, #56]	; (117a8 <rx_demux+0x1b4>)
   11770:	f240 73d3 	movw	r3, #2003	; 0x7d3
   11774:	4652      	mov	r2, sl
   11776:	f00b fc5d 	bl	1d034 <printk>
   1177a:	4040      	eors	r0, r0
   1177c:	f380 8811 	msr	BASEPRI, r0
   11780:	f04f 0003 	mov.w	r0, #3
   11784:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   11786:	9b03      	ldr	r3, [sp, #12]
   11788:	e74b      	b.n	11622 <rx_demux+0x2e>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1178a:	4908      	ldr	r1, [pc, #32]	; (117ac <rx_demux+0x1b8>)
   1178c:	4602      	mov	r2, r0
   1178e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   11792:	f7fc fe7f 	bl	e494 <memq_dequeue>
		if (rx) {
   11796:	9905      	ldr	r1, [sp, #20]
   11798:	2900      	cmp	r1, #0
   1179a:	f43f af36 	beq.w	1160a <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1179e:	4b04      	ldr	r3, [pc, #16]	; (117b0 <rx_demux+0x1bc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   117a0:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
   117a2:	78db      	ldrb	r3, [r3, #3]
   117a4:	e7c6      	b.n	11734 <rx_demux+0x140>
   117a6:	bf00      	nop
   117a8:	000230b4 	.word	0x000230b4
   117ac:	20001fb0 	.word	0x20001fb0
   117b0:	20000420 	.word	0x20000420
   117b4:	20001fa4 	.word	0x20001fa4
   117b8:	0002337c 	.word	0x0002337c
   117bc:	20001fb8 	.word	0x20001fb8
   117c0:	00023310 	.word	0x00023310
   117c4:	0002314c 	.word	0x0002314c

000117c8 <ll_init>:
{
   117c8:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
   117ca:	4b2b      	ldr	r3, [pc, #172]	; (11878 <ll_init+0xb0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   117cc:	4d2b      	ldr	r5, [pc, #172]	; (1187c <ll_init+0xb4>)
	sem_recv = sem_rx;
   117ce:	6018      	str	r0, [r3, #0]
{
   117d0:	b087      	sub	sp, #28
	cntr_init();
   117d2:	f007 fc4f 	bl	19074 <cntr_init>
	mayfly_init();
   117d6:	f7fc fe6d 	bl	e4b4 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   117da:	4a29      	ldr	r2, [pc, #164]	; (11880 <ll_init+0xb8>)
   117dc:	4929      	ldr	r1, [pc, #164]	; (11884 <ll_init+0xbc>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   117de:	482a      	ldr	r0, [pc, #168]	; (11888 <ll_init+0xc0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   117e0:	e9cd 2504 	strd	r2, r5, [sp, #16]
   117e4:	4a29      	ldr	r2, [pc, #164]	; (1188c <ll_init+0xc4>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   117e6:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   117e8:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   117ec:	2402      	movs	r4, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   117ee:	210c      	movs	r1, #12
   117f0:	e9cd 0100 	strd	r0, r1, [sp]
   117f4:	4a26      	ldr	r2, [pc, #152]	; (11890 <ll_init+0xc8>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   117f6:	7003      	strb	r3, [r0, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   117f8:	7203      	strb	r3, [r0, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   117fa:	7404      	strb	r4, [r0, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   117fc:	7604      	strb	r4, [r0, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   117fe:	4619      	mov	r1, r3
   11800:	2000      	movs	r0, #0
   11802:	f7fd ff39 	bl	f678 <ticker_init>
	LL_ASSERT(!err);
   11806:	bb40      	cbnz	r0, 1185a <ll_init+0x92>
	return z_impl_k_sem_init(sem, initial_count, limit);
   11808:	2201      	movs	r2, #1
   1180a:	2100      	movs	r1, #0
   1180c:	4821      	ldr	r0, [pc, #132]	; (11894 <ll_init+0xcc>)
   1180e:	f010 fb0e 	bl	21e2e <z_impl_k_sem_init>
	err = lll_init();
   11812:	f005 ff2d 	bl	17670 <lll_init>
	if (err) {
   11816:	4604      	mov	r4, r0
   11818:	b110      	cbz	r0, 11820 <ll_init+0x58>
}
   1181a:	4620      	mov	r0, r4
   1181c:	b007      	add	sp, #28
   1181e:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
   11820:	f7ff fe42 	bl	114a8 <init_reset>
	if (err) {
   11824:	4604      	mov	r4, r0
   11826:	2800      	cmp	r0, #0
   11828:	d1f7      	bne.n	1181a <ll_init+0x52>
	err = lll_adv_init();
   1182a:	f006 fad5 	bl	17dd8 <lll_adv_init>
	if (err) {
   1182e:	4604      	mov	r4, r0
   11830:	2800      	cmp	r0, #0
   11832:	d1f2      	bne.n	1181a <ll_init+0x52>
	err = ull_adv_init();
   11834:	f001 f9a6 	bl	12b84 <ull_adv_init>
	if (err) {
   11838:	4604      	mov	r4, r0
   1183a:	2800      	cmp	r0, #0
   1183c:	d1ed      	bne.n	1181a <ll_init+0x52>
	err = lll_conn_init();
   1183e:	f006 ff69 	bl	18714 <lll_conn_init>
	if (err) {
   11842:	4604      	mov	r4, r0
   11844:	2800      	cmp	r0, #0
   11846:	d1e8      	bne.n	1181a <ll_init+0x52>
	err = ull_conn_init();
   11848:	f002 faec 	bl	13e24 <ull_conn_init>
	if (err) {
   1184c:	4604      	mov	r4, r0
   1184e:	2800      	cmp	r0, #0
   11850:	d1e3      	bne.n	1181a <ll_init+0x52>
		ull_filter_reset(true);
   11852:	2001      	movs	r0, #1
   11854:	f7f2 ffc8 	bl	47e8 <ull_filter_reset>
	return  0;
   11858:	e7df      	b.n	1181a <ll_init+0x52>
	LL_ASSERT(!err);
   1185a:	4a0f      	ldr	r2, [pc, #60]	; (11898 <ll_init+0xd0>)
   1185c:	490f      	ldr	r1, [pc, #60]	; (1189c <ll_init+0xd4>)
   1185e:	4810      	ldr	r0, [pc, #64]	; (118a0 <ll_init+0xd8>)
   11860:	f240 13a5 	movw	r3, #421	; 0x1a5
   11864:	f00b fbe6 	bl	1d034 <printk>
   11868:	4040      	eors	r0, r0
   1186a:	f380 8811 	msr	BASEPRI, r0
   1186e:	f04f 0003 	mov.w	r0, #3
   11872:	df02      	svc	2
   11874:	e7c8      	b.n	11808 <ll_init+0x40>
   11876:	bf00      	nop
   11878:	20001fb8 	.word	0x20001fb8
   1187c:	00019d1d 	.word	0x00019d1d
   11880:	00019bcd 	.word	0x00019bcd
   11884:	00019b69 	.word	0x00019b69
   11888:	20002304 	.word	0x20002304
   1188c:	20002094 	.word	0x20002094
   11890:	20001fd4 	.word	0x20001fd4
   11894:	20001fbc 	.word	0x20001fbc
   11898:	00023310 	.word	0x00023310
   1189c:	0002334c 	.word	0x0002334c
   118a0:	000230b4 	.word	0x000230b4

000118a4 <ll_reset>:
{
   118a4:	b510      	push	{r4, lr}
   118a6:	b086      	sub	sp, #24
	err = ull_adv_reset();
   118a8:	f001 f97c 	bl	12ba4 <ull_adv_reset>
	LL_ASSERT(!err);
   118ac:	2800      	cmp	r0, #0
   118ae:	d130      	bne.n	11912 <ll_reset+0x6e>
	err = ull_conn_reset();
   118b0:	f002 faba 	bl	13e28 <ull_conn_reset>
	LL_ASSERT(!err);
   118b4:	2800      	cmp	r0, #0
   118b6:	d13d      	bne.n	11934 <ll_reset+0x90>
	MFIFO_INIT(tx_ack);
   118b8:	4b3b      	ldr	r3, [pc, #236]	; (119a8 <ll_reset+0x104>)
   118ba:	2400      	movs	r4, #0
		ull_filter_reset(false);
   118bc:	4620      	mov	r0, r4
	MFIFO_INIT(tx_ack);
   118be:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   118c0:	f7f2 ff92 	bl	47e8 <ull_filter_reset>
	MFIFO_INIT(prep);
   118c4:	4839      	ldr	r0, [pc, #228]	; (119ac <ll_reset+0x108>)
	MFIFO_INIT(done);
   118c6:	493a      	ldr	r1, [pc, #232]	; (119b0 <ll_reset+0x10c>)
	MFIFO_INIT(pdu_rx_free);
   118c8:	4a3a      	ldr	r2, [pc, #232]	; (119b4 <ll_reset+0x110>)
	MFIFO_INIT(ll_pdu_rx_free);
   118ca:	4b3b      	ldr	r3, [pc, #236]	; (119b8 <ll_reset+0x114>)
	MFIFO_INIT(prep);
   118cc:	8044      	strh	r4, [r0, #2]
	MFIFO_INIT(done);
   118ce:	804c      	strh	r4, [r1, #2]
	MFIFO_INIT(pdu_rx_free);
   118d0:	8054      	strh	r4, [r2, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   118d2:	805c      	strh	r4, [r3, #2]
   118d4:	2201      	movs	r2, #1
   118d6:	4621      	mov	r1, r4
   118d8:	4668      	mov	r0, sp
   118da:	f010 faa8 	bl	21e2e <z_impl_k_sem_init>
		mfy.param = &sem;
   118de:	4b37      	ldr	r3, [pc, #220]	; (119bc <ll_reset+0x118>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   118e0:	4622      	mov	r2, r4
   118e2:	4621      	mov	r1, r4
   118e4:	2003      	movs	r0, #3
		mfy.param = &sem;
   118e6:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   118ea:	f7fc fe39 	bl	e560 <mayfly_enqueue>
		LL_ASSERT(!retval);
   118ee:	2800      	cmp	r0, #0
   118f0:	d14b      	bne.n	1198a <ll_reset+0xe6>
	return z_impl_k_sem_take(sem, timeout);
   118f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   118f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   118fa:	4668      	mov	r0, sp
   118fc:	f00a fc76 	bl	1c1ec <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   11900:	f001 f95c 	bl	12bbc <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   11904:	2800      	cmp	r0, #0
   11906:	d132      	bne.n	1196e <ll_reset+0xca>
	err = init_reset();
   11908:	f7ff fdce 	bl	114a8 <init_reset>
	LL_ASSERT(!err);
   1190c:	bb00      	cbnz	r0, 11950 <ll_reset+0xac>
}
   1190e:	b006      	add	sp, #24
   11910:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   11912:	4a2b      	ldr	r2, [pc, #172]	; (119c0 <ll_reset+0x11c>)
   11914:	492b      	ldr	r1, [pc, #172]	; (119c4 <ll_reset+0x120>)
   11916:	482c      	ldr	r0, [pc, #176]	; (119c8 <ll_reset+0x124>)
   11918:	f240 2347 	movw	r3, #583	; 0x247
   1191c:	f00b fb8a 	bl	1d034 <printk>
   11920:	4040      	eors	r0, r0
   11922:	f380 8811 	msr	BASEPRI, r0
   11926:	f04f 0003 	mov.w	r0, #3
   1192a:	df02      	svc	2
	err = ull_conn_reset();
   1192c:	f002 fa7c 	bl	13e28 <ull_conn_reset>
	LL_ASSERT(!err);
   11930:	2800      	cmp	r0, #0
   11932:	d0c1      	beq.n	118b8 <ll_reset+0x14>
   11934:	4a22      	ldr	r2, [pc, #136]	; (119c0 <ll_reset+0x11c>)
   11936:	4923      	ldr	r1, [pc, #140]	; (119c4 <ll_reset+0x120>)
   11938:	4823      	ldr	r0, [pc, #140]	; (119c8 <ll_reset+0x124>)
   1193a:	f240 2397 	movw	r3, #663	; 0x297
   1193e:	f00b fb79 	bl	1d034 <printk>
   11942:	4040      	eors	r0, r0
   11944:	f380 8811 	msr	BASEPRI, r0
   11948:	f04f 0003 	mov.w	r0, #3
   1194c:	df02      	svc	2
   1194e:	e7b3      	b.n	118b8 <ll_reset+0x14>
	LL_ASSERT(!err);
   11950:	4a1b      	ldr	r2, [pc, #108]	; (119c0 <ll_reset+0x11c>)
   11952:	491c      	ldr	r1, [pc, #112]	; (119c4 <ll_reset+0x120>)
   11954:	481c      	ldr	r0, [pc, #112]	; (119c8 <ll_reset+0x124>)
   11956:	f240 23db 	movw	r3, #731	; 0x2db
   1195a:	f00b fb6b 	bl	1d034 <printk>
   1195e:	4040      	eors	r0, r0
   11960:	f380 8811 	msr	BASEPRI, r0
   11964:	f04f 0003 	mov.w	r0, #3
   11968:	df02      	svc	2
}
   1196a:	b006      	add	sp, #24
   1196c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   1196e:	4a14      	ldr	r2, [pc, #80]	; (119c0 <ll_reset+0x11c>)
   11970:	4914      	ldr	r1, [pc, #80]	; (119c4 <ll_reset+0x120>)
   11972:	4815      	ldr	r0, [pc, #84]	; (119c8 <ll_reset+0x124>)
   11974:	f240 23d6 	movw	r3, #726	; 0x2d6
   11978:	f00b fb5c 	bl	1d034 <printk>
   1197c:	4040      	eors	r0, r0
   1197e:	f380 8811 	msr	BASEPRI, r0
   11982:	f04f 0003 	mov.w	r0, #3
   11986:	df02      	svc	2
   11988:	e7be      	b.n	11908 <ll_reset+0x64>
		LL_ASSERT(!retval);
   1198a:	4a0d      	ldr	r2, [pc, #52]	; (119c0 <ll_reset+0x11c>)
   1198c:	490f      	ldr	r1, [pc, #60]	; (119cc <ll_reset+0x128>)
   1198e:	480e      	ldr	r0, [pc, #56]	; (119c8 <ll_reset+0x124>)
   11990:	f240 23c9 	movw	r3, #713	; 0x2c9
   11994:	f00b fb4e 	bl	1d034 <printk>
   11998:	4040      	eors	r0, r0
   1199a:	f380 8811 	msr	BASEPRI, r0
   1199e:	f04f 0003 	mov.w	r0, #3
   119a2:	df02      	svc	2
   119a4:	e7a5      	b.n	118f2 <ll_reset+0x4e>
   119a6:	bf00      	nop
   119a8:	20000420 	.word	0x20000420
   119ac:	200002fc 	.word	0x200002fc
   119b0:	200002bc 	.word	0x200002bc
   119b4:	200002e4 	.word	0x200002e4
   119b8:	200002d0 	.word	0x200002d0
   119bc:	20000454 	.word	0x20000454
   119c0:	00023310 	.word	0x00023310
   119c4:	0002334c 	.word	0x0002334c
   119c8:	000230b4 	.word	0x000230b4
   119cc:	00023380 	.word	0x00023380

000119d0 <ll_rx_get>:
{
   119d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119d4:	ed2d 8b02 	vpush	{d8}
   119d8:	b085      	sub	sp, #20
   119da:	4c69      	ldr	r4, [pc, #420]	; (11b80 <ll_rx_get+0x1b0>)
				mem_release(link, &mem_link_rx.free);
   119dc:	4d69      	ldr	r5, [pc, #420]	; (11b84 <ll_rx_get+0x1b4>)
   119de:	4e6a      	ldr	r6, [pc, #424]	; (11b88 <ll_rx_get+0x1b8>)
{
   119e0:	9001      	str	r0, [sp, #4]
   119e2:	ee08 1a10 	vmov	s16, r1
	*node_rx = NULL;
   119e6:	9a01      	ldr	r2, [sp, #4]
   119e8:	2300      	movs	r3, #0
   119ea:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   119ec:	e9d6 0100 	ldrd	r0, r1, [r6]
   119f0:	aa03      	add	r2, sp, #12
   119f2:	f7fc fd47 	bl	e484 <memq_peek>
	if (link) {
   119f6:	4680      	mov	r8, r0
   119f8:	2800      	cmp	r0, #0
   119fa:	f000 80a9 	beq.w	11b50 <ll_rx_get+0x180>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   119fe:	9b03      	ldr	r3, [sp, #12]
   11a00:	4962      	ldr	r1, [pc, #392]	; (11b8c <ll_rx_get+0x1bc>)
   11a02:	781a      	ldrb	r2, [r3, #0]
   11a04:	ee18 0a10 	vmov	r0, s16
   11a08:	f7ff fbe2 	bl	111d0 <tx_cmplt_get>
		if (!cmplt) {
   11a0c:	2800      	cmp	r0, #0
   11a0e:	f040 80a5 	bne.w	11b5c <ll_rx_get+0x18c>
			f = mfifo_tx_ack.f;
   11a12:	78a3      	ldrb	r3, [r4, #2]
   11a14:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   11a18:	78e2      	ldrb	r2, [r4, #3]
   11a1a:	4607      	mov	r7, r0
   11a1c:	f10d 0109 	add.w	r1, sp, #9
   11a20:	f10d 000a 	add.w	r0, sp, #10
   11a24:	f7ff fbd4 	bl	111d0 <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   11a28:	ea47 0200 	orr.w	r2, r7, r0
   11a2c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   11a30:	d1f2      	bne.n	11a18 <ll_rx_get+0x48>
			if (rx->type == NODE_RX_TYPE_RELEASE) {
   11a32:	9b03      	ldr	r3, [sp, #12]
   11a34:	7919      	ldrb	r1, [r3, #4]
   11a36:	2901      	cmp	r1, #1
   11a38:	f040 809a 	bne.w	11b70 <ll_rx_get+0x1a0>
				(void)memq_dequeue(memq_ll_rx.tail,
   11a3c:	4952      	ldr	r1, [pc, #328]	; (11b88 <ll_rx_get+0x1b8>)
   11a3e:	6870      	ldr	r0, [r6, #4]
   11a40:	f7fc fd28 	bl	e494 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   11a44:	4952      	ldr	r1, [pc, #328]	; (11b90 <ll_rx_get+0x1c0>)
   11a46:	4640      	mov	r0, r8
   11a48:	f7fc fcc8 	bl	e3dc <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   11a4c:	782b      	ldrb	r3, [r5, #0]
   11a4e:	2b06      	cmp	r3, #6
   11a50:	d86f      	bhi.n	11b32 <ll_rx_get+0x162>
	mem_link_rx.quota_pdu += delta;
   11a52:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   11a54:	494f      	ldr	r1, [pc, #316]	; (11b94 <ll_rx_get+0x1c4>)
   11a56:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   11a58:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   11a5a:	f7fc fcbf 	bl	e3dc <mem_release>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   11a5e:	782b      	ldrb	r3, [r5, #0]
   11a60:	2b00      	cmp	r3, #0
   11a62:	d0c0      	beq.n	119e6 <ll_rx_get+0x16>
   11a64:	f8df 813c 	ldr.w	r8, [pc, #316]	; 11ba4 <ll_rx_get+0x1d4>
	last = last + 1;
   11a68:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
   11a6c:	f898 2001 	ldrb.w	r2, [r8, #1]
   11a70:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   11a74:	3701      	adds	r7, #1
   11a76:	b2ff      	uxtb	r7, r7
		last = 0U;
   11a78:	42ba      	cmp	r2, r7
   11a7a:	bf08      	it	eq
   11a7c:	2700      	moveq	r7, #0
	if (last == first) {
   11a7e:	429f      	cmp	r7, r3
   11a80:	d0b1      	beq.n	119e6 <ll_rx_get+0x16>
		link = mem_acquire(&mem_link_rx.free);
   11a82:	4843      	ldr	r0, [pc, #268]	; (11b90 <ll_rx_get+0x1c0>)
   11a84:	f7fc fc90 	bl	e3a8 <mem_acquire>
		if (!link) {
   11a88:	4682      	mov	sl, r0
   11a8a:	2800      	cmp	r0, #0
   11a8c:	d0ab      	beq.n	119e6 <ll_rx_get+0x16>
		rx = mem_acquire(&mem_pdu_rx.free);
   11a8e:	4841      	ldr	r0, [pc, #260]	; (11b94 <ll_rx_get+0x1c4>)
   11a90:	f7fc fc8a 	bl	e3a8 <mem_acquire>
		if (!rx) {
   11a94:	2800      	cmp	r0, #0
   11a96:	d066      	beq.n	11b66 <ll_rx_get+0x196>
		rx->link = link;
   11a98:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   11a9c:	f898 2003 	ldrb.w	r2, [r8, #3]
   11aa0:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   11aa4:	fb02 8303 	mla	r3, r2, r3, r8
   11aa8:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   11aaa:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   11aac:	f888 7003 	strb.w	r7, [r8, #3]
   11ab0:	3b01      	subs	r3, #1
   11ab2:	b2db      	uxtb	r3, r3
   11ab4:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   11ab6:	2b00      	cmp	r3, #0
   11ab8:	d095      	beq.n	119e6 <ll_rx_get+0x16>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   11aba:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 11ba8 <ll_rx_get+0x1d8>
		link = mem_acquire(&mem_link_rx.free);
   11abe:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 11b90 <ll_rx_get+0x1c0>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   11ac2:	f89a 7003 	ldrb.w	r7, [sl, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   11ac6:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 11b94 <ll_rx_get+0x1c4>
   11aca:	e014      	b.n	11af6 <ll_rx_get+0x126>
		link->mem = NULL;
   11acc:	2300      	movs	r3, #0
   11ace:	f8c9 3004 	str.w	r3, [r9, #4]
		rx->link = link;
   11ad2:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   11ad6:	f89a 2003 	ldrb.w	r2, [sl, #3]
   11ada:	f89a 3000 	ldrb.w	r3, [sl]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   11ade:	fb02 a303 	mla	r3, r2, r3, sl
   11ae2:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   11ae4:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   11ae6:	f88a 7003 	strb.w	r7, [sl, #3]
   11aea:	3b01      	subs	r3, #1
   11aec:	b2db      	uxtb	r3, r3
   11aee:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   11af0:	2b00      	cmp	r3, #0
   11af2:	f43f af78 	beq.w	119e6 <ll_rx_get+0x16>
	if (last == count) {
   11af6:	f89a 2001 	ldrb.w	r2, [sl, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   11afa:	f89a 3002 	ldrb.w	r3, [sl, #2]
	last = last + 1;
   11afe:	3701      	adds	r7, #1
   11b00:	b2ff      	uxtb	r7, r7
		last = 0U;
   11b02:	42ba      	cmp	r2, r7
   11b04:	bf08      	it	eq
   11b06:	2700      	moveq	r7, #0
	if (last == first) {
   11b08:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
   11b0a:	4640      	mov	r0, r8
   11b0c:	f43f af6b 	beq.w	119e6 <ll_rx_get+0x16>
   11b10:	f7fc fc4a 	bl	e3a8 <mem_acquire>
   11b14:	4681      	mov	r9, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   11b16:	4658      	mov	r0, fp
		if (!link) {
   11b18:	f1b9 0f00 	cmp.w	r9, #0
   11b1c:	f43f af63 	beq.w	119e6 <ll_rx_get+0x16>
		rx = mem_acquire(&mem_pdu_rx.free);
   11b20:	f7fc fc42 	bl	e3a8 <mem_acquire>
		if (!rx) {
   11b24:	2800      	cmp	r0, #0
   11b26:	d1d1      	bne.n	11acc <ll_rx_get+0xfc>
			mem_release(link, &mem_link_rx.free);
   11b28:	4919      	ldr	r1, [pc, #100]	; (11b90 <ll_rx_get+0x1c0>)
   11b2a:	4648      	mov	r0, r9
   11b2c:	f7fc fc56 	bl	e3dc <mem_release>
			return;
   11b30:	e759      	b.n	119e6 <ll_rx_get+0x16>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   11b32:	4a19      	ldr	r2, [pc, #100]	; (11b98 <ll_rx_get+0x1c8>)
   11b34:	4919      	ldr	r1, [pc, #100]	; (11b9c <ll_rx_get+0x1cc>)
   11b36:	481a      	ldr	r0, [pc, #104]	; (11ba0 <ll_rx_get+0x1d0>)
   11b38:	f240 530e 	movw	r3, #1294	; 0x50e
   11b3c:	f00b fa7a 	bl	1d034 <printk>
   11b40:	4040      	eors	r0, r0
   11b42:	f380 8811 	msr	BASEPRI, r0
   11b46:	f04f 0003 	mov.w	r0, #3
   11b4a:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   11b4c:	782b      	ldrb	r3, [r5, #0]
   11b4e:	e780      	b.n	11a52 <ll_rx_get+0x82>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   11b50:	78e2      	ldrb	r2, [r4, #3]
   11b52:	490e      	ldr	r1, [pc, #56]	; (11b8c <ll_rx_get+0x1bc>)
   11b54:	ee18 0a10 	vmov	r0, s16
   11b58:	f7ff fb3a 	bl	111d0 <tx_cmplt_get>
}
   11b5c:	b005      	add	sp, #20
   11b5e:	ecbd 8b02 	vpop	{d8}
   11b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   11b66:	490a      	ldr	r1, [pc, #40]	; (11b90 <ll_rx_get+0x1c0>)
   11b68:	4650      	mov	r0, sl
   11b6a:	f7fc fc37 	bl	e3dc <mem_release>
			return;
   11b6e:	e73a      	b.n	119e6 <ll_rx_get+0x16>
			*node_rx = rx;
   11b70:	9901      	ldr	r1, [sp, #4]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   11b72:	4610      	mov	r0, r2
			*node_rx = rx;
   11b74:	600b      	str	r3, [r1, #0]
}
   11b76:	b005      	add	sp, #20
   11b78:	ecbd 8b02 	vpop	{d8}
   11b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b80:	20000420 	.word	0x20000420
   11b84:	20001cb4 	.word	0x20001cb4
   11b88:	20001fa0 	.word	0x20001fa0
   11b8c:	20000422 	.word	0x20000422
   11b90:	20001cb8 	.word	0x20001cb8
   11b94:	20001d14 	.word	0x20001d14
   11b98:	00023310 	.word	0x00023310
   11b9c:	00023388 	.word	0x00023388
   11ba0:	000230b4 	.word	0x000230b4
   11ba4:	200002e4 	.word	0x200002e4
   11ba8:	200002d0 	.word	0x200002d0

00011bac <ll_rx_dequeue>:
{
   11bac:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   11bae:	495d      	ldr	r1, [pc, #372]	; (11d24 <ll_rx_dequeue+0x178>)
{
   11bb0:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   11bb2:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   11bb4:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   11bb6:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   11bb8:	aa01      	add	r2, sp, #4
   11bba:	f7fc fc6b 	bl	e494 <memq_dequeue>
	LL_ASSERT(link);
   11bbe:	4604      	mov	r4, r0
   11bc0:	2800      	cmp	r0, #0
   11bc2:	d062      	beq.n	11c8a <ll_rx_dequeue+0xde>
	mem_release(link, &mem_link_rx.free);
   11bc4:	4958      	ldr	r1, [pc, #352]	; (11d28 <ll_rx_dequeue+0x17c>)
   11bc6:	4620      	mov	r0, r4
   11bc8:	f7fc fc08 	bl	e3dc <mem_release>
	switch (rx->type) {
   11bcc:	9a01      	ldr	r2, [sp, #4]
   11bce:	7913      	ldrb	r3, [r2, #4]
   11bd0:	2b1a      	cmp	r3, #26
   11bd2:	d80f      	bhi.n	11bf4 <ll_rx_dequeue+0x48>
   11bd4:	e8df f003 	tbb	[pc, r3]
   11bd8:	1d0e0e1d 	.word	0x1d0e0e1d
   11bdc:	0e0e0e0e 	.word	0x0e0e0e0e
   11be0:	0e0e0e0e 	.word	0x0e0e0e0e
   11be4:	0e0e0e0e 	.word	0x0e0e0e0e
   11be8:	0e0e0e0e 	.word	0x0e0e0e0e
   11bec:	1d1d1d2e 	.word	0x1d1d1d2e
   11bf0:	1d1d      	.short	0x1d1d
   11bf2:	1d          	.byte	0x1d
   11bf3:	00          	.byte	0x00
		LL_ASSERT(0);
   11bf4:	4a4d      	ldr	r2, [pc, #308]	; (11d2c <ll_rx_dequeue+0x180>)
   11bf6:	494e      	ldr	r1, [pc, #312]	; (11d30 <ll_rx_dequeue+0x184>)
   11bf8:	484e      	ldr	r0, [pc, #312]	; (11d34 <ll_rx_dequeue+0x188>)
   11bfa:	f240 4329 	movw	r3, #1065	; 0x429
   11bfe:	f00b fa19 	bl	1d034 <printk>
   11c02:	4040      	eors	r0, r0
   11c04:	f380 8811 	msr	BASEPRI, r0
   11c08:	f04f 0003 	mov.w	r0, #3
   11c0c:	df02      	svc	2
}
   11c0e:	b002      	add	sp, #8
   11c10:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   11c12:	2b00      	cmp	r3, #0
   11c14:	d1fb      	bne.n	11c0e <ll_rx_dequeue+0x62>
   11c16:	4a45      	ldr	r2, [pc, #276]	; (11d2c <ll_rx_dequeue+0x180>)
   11c18:	4947      	ldr	r1, [pc, #284]	; (11d38 <ll_rx_dequeue+0x18c>)
   11c1a:	4846      	ldr	r0, [pc, #280]	; (11d34 <ll_rx_dequeue+0x188>)
   11c1c:	f240 4325 	movw	r3, #1061	; 0x425
   11c20:	f00b fa08 	bl	1d034 <printk>
   11c24:	4040      	eors	r0, r0
   11c26:	f380 8811 	msr	BASEPRI, r0
   11c2a:	f04f 0003 	mov.w	r0, #3
   11c2e:	df02      	svc	2
}
   11c30:	b002      	add	sp, #8
   11c32:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   11c34:	7f13      	ldrb	r3, [r2, #28]
   11c36:	2b3c      	cmp	r3, #60	; 0x3c
   11c38:	d035      	beq.n	11ca6 <ll_rx_dequeue+0xfa>
   11c3a:	7f53      	ldrb	r3, [r2, #29]
   11c3c:	b1bb      	cbz	r3, 11c6e <ll_rx_dequeue+0xc2>
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   11c3e:	6893      	ldr	r3, [r2, #8]
   11c40:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
   11c42:	6c60      	ldr	r0, [r4, #68]	; 0x44
   11c44:	b120      	cbz	r0, 11c50 <ll_rx_dequeue+0xa4>
					adv->node_rx_cc_free = NULL;
   11c46:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   11c48:	493c      	ldr	r1, [pc, #240]	; (11d3c <ll_rx_dequeue+0x190>)
					adv->node_rx_cc_free = NULL;
   11c4a:	6463      	str	r3, [r4, #68]	; 0x44
					mem_release(rx_free, &mem_pdu_rx.free);
   11c4c:	f7fc fbc6 	bl	e3dc <mem_release>
			adv->is_enabled = 0U;
   11c50:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   11c54:	f36f 0300 	bfc	r3, #0, #1
   11c58:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
			      ull_adv_is_enabled(0));
   11c5c:	2000      	movs	r0, #0
   11c5e:	f000 ffef 	bl	12c40 <ull_adv_is_enabled>
			if (!bm) {
   11c62:	2800      	cmp	r0, #0
   11c64:	d1d3      	bne.n	11c0e <ll_rx_dequeue+0x62>
				ull_filter_adv_scan_state_cb(0);
   11c66:	f004 ff8f 	bl	16b88 <ull_filter_adv_scan_state_cb>
}
   11c6a:	b002      	add	sp, #8
   11c6c:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
   11c6e:	4a2f      	ldr	r2, [pc, #188]	; (11d2c <ll_rx_dequeue+0x180>)
   11c70:	492f      	ldr	r1, [pc, #188]	; (11d30 <ll_rx_dequeue+0x184>)
   11c72:	4830      	ldr	r0, [pc, #192]	; (11d34 <ll_rx_dequeue+0x188>)
   11c74:	f44f 7372 	mov.w	r3, #968	; 0x3c8
   11c78:	f00b f9dc 	bl	1d034 <printk>
   11c7c:	4040      	eors	r0, r0
   11c7e:	f380 8811 	msr	BASEPRI, r0
   11c82:	f04f 0003 	mov.w	r0, #3
   11c86:	df02      	svc	2
   11c88:	e7e8      	b.n	11c5c <ll_rx_dequeue+0xb0>
	LL_ASSERT(link);
   11c8a:	4a28      	ldr	r2, [pc, #160]	; (11d2c <ll_rx_dequeue+0x180>)
   11c8c:	492c      	ldr	r1, [pc, #176]	; (11d40 <ll_rx_dequeue+0x194>)
   11c8e:	4829      	ldr	r0, [pc, #164]	; (11d34 <ll_rx_dequeue+0x188>)
   11c90:	f240 332d 	movw	r3, #813	; 0x32d
   11c94:	f00b f9ce 	bl	1d034 <printk>
   11c98:	4040      	eors	r0, r0
   11c9a:	f380 8811 	msr	BASEPRI, r0
   11c9e:	f04f 0003 	mov.w	r0, #3
   11ca2:	df02      	svc	2
   11ca4:	e78e      	b.n	11bc4 <ll_rx_dequeue+0x18>
			struct lll_adv *lll = ftr->param;
   11ca6:	6896      	ldr	r6, [r2, #8]
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   11ca8:	e9d6 4500 	ldrd	r4, r5, [r6]
				LL_ASSERT(conn_lll);
   11cac:	b1ed      	cbz	r5, 11cea <ll_rx_dequeue+0x13e>
				LL_ASSERT(!conn_lll->link_tx_free);
   11cae:	6dab      	ldr	r3, [r5, #88]	; 0x58
				lll->conn = NULL;
   11cb0:	2200      	movs	r2, #0
   11cb2:	6072      	str	r2, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
   11cb4:	b163      	cbz	r3, 11cd0 <ll_rx_dequeue+0x124>
   11cb6:	4a1d      	ldr	r2, [pc, #116]	; (11d2c <ll_rx_dequeue+0x180>)
   11cb8:	4922      	ldr	r1, [pc, #136]	; (11d44 <ll_rx_dequeue+0x198>)
   11cba:	481e      	ldr	r0, [pc, #120]	; (11d34 <ll_rx_dequeue+0x188>)
   11cbc:	f44f 7368 	mov.w	r3, #928	; 0x3a0
   11cc0:	f00b f9b8 	bl	1d034 <printk>
   11cc4:	4040      	eors	r0, r0
   11cc6:	f380 8811 	msr	BASEPRI, r0
   11cca:	f04f 0003 	mov.w	r0, #3
   11cce:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   11cd0:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   11cd4:	f105 0048 	add.w	r0, r5, #72	; 0x48
   11cd8:	f7fc fbc0 	bl	e45c <memq_deinit>
				LL_ASSERT(link);
   11cdc:	4606      	mov	r6, r0
   11cde:	b190      	cbz	r0, 11d06 <ll_rx_dequeue+0x15a>
				ll_conn_release(conn);
   11ce0:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
   11ce2:	65ae      	str	r6, [r5, #88]	; 0x58
				ll_conn_release(conn);
   11ce4:	f001 fda6 	bl	13834 <ll_conn_release>
   11ce8:	e7b2      	b.n	11c50 <ll_rx_dequeue+0xa4>
				LL_ASSERT(conn_lll);
   11cea:	4a10      	ldr	r2, [pc, #64]	; (11d2c <ll_rx_dequeue+0x180>)
   11cec:	4916      	ldr	r1, [pc, #88]	; (11d48 <ll_rx_dequeue+0x19c>)
   11cee:	4811      	ldr	r0, [pc, #68]	; (11d34 <ll_rx_dequeue+0x188>)
   11cf0:	f240 339d 	movw	r3, #925	; 0x39d
   11cf4:	f00b f99e 	bl	1d034 <printk>
   11cf8:	4040      	eors	r0, r0
   11cfa:	f380 8811 	msr	BASEPRI, r0
   11cfe:	f04f 0003 	mov.w	r0, #3
   11d02:	df02      	svc	2
   11d04:	e7d3      	b.n	11cae <ll_rx_dequeue+0x102>
				LL_ASSERT(link);
   11d06:	4a09      	ldr	r2, [pc, #36]	; (11d2c <ll_rx_dequeue+0x180>)
   11d08:	490d      	ldr	r1, [pc, #52]	; (11d40 <ll_rx_dequeue+0x194>)
   11d0a:	480a      	ldr	r0, [pc, #40]	; (11d34 <ll_rx_dequeue+0x188>)
   11d0c:	f240 33a3 	movw	r3, #931	; 0x3a3
   11d10:	f00b f990 	bl	1d034 <printk>
   11d14:	4040      	eors	r0, r0
   11d16:	f380 8811 	msr	BASEPRI, r0
   11d1a:	f04f 0003 	mov.w	r0, #3
   11d1e:	df02      	svc	2
   11d20:	e7de      	b.n	11ce0 <ll_rx_dequeue+0x134>
   11d22:	bf00      	nop
   11d24:	20001fa0 	.word	0x20001fa0
   11d28:	20001cb8 	.word	0x20001cb8
   11d2c:	00023310 	.word	0x00023310
   11d30:	0002314c 	.word	0x0002314c
   11d34:	000230b4 	.word	0x000230b4
   11d38:	000233e0 	.word	0x000233e0
   11d3c:	20001d14 	.word	0x20001d14
   11d40:	000235e0 	.word	0x000235e0
   11d44:	000233c8 	.word	0x000233c8
   11d48:	000233bc 	.word	0x000233bc

00011d4c <ll_rx_mem_release>:
{
   11d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   11d50:	6804      	ldr	r4, [r0, #0]
{
   11d52:	4680      	mov	r8, r0
	while (rx) {
   11d54:	b33c      	cbz	r4, 11da6 <ll_rx_mem_release+0x5a>
			LL_ASSERT(0);
   11d56:	4f54      	ldr	r7, [pc, #336]	; (11ea8 <ll_rx_mem_release+0x15c>)
   11d58:	f8df 916c 	ldr.w	r9, [pc, #364]	; 11ec8 <ll_rx_mem_release+0x17c>
   11d5c:	4e53      	ldr	r6, [pc, #332]	; (11eac <ll_rx_mem_release+0x160>)
		rx = rx->next;
   11d5e:	4625      	mov	r5, r4
   11d60:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   11d62:	792b      	ldrb	r3, [r5, #4]
   11d64:	2b1a      	cmp	r3, #26
   11d66:	d80f      	bhi.n	11d88 <ll_rx_mem_release+0x3c>
   11d68:	e8df f003 	tbb	[pc, r3]
   11d6c:	370e0e37 	.word	0x370e0e37
   11d70:	0e0e0e0e 	.word	0x0e0e0e0e
   11d74:	0e0e0e0e 	.word	0x0e0e0e0e
   11d78:	0e0e0e0e 	.word	0x0e0e0e0e
   11d7c:	0e0e0e0e 	.word	0x0e0e0e0e
   11d80:	37375525 	.word	0x37375525
   11d84:	3737      	.short	0x3737
   11d86:	37          	.byte	0x37
   11d87:	00          	.byte	0x00
			LL_ASSERT(0);
   11d88:	f240 5302 	movw	r3, #1282	; 0x502
   11d8c:	463a      	mov	r2, r7
   11d8e:	4649      	mov	r1, r9
   11d90:	4630      	mov	r0, r6
   11d92:	f00b f94f 	bl	1d034 <printk>
   11d96:	4040      	eors	r0, r0
   11d98:	f380 8811 	msr	BASEPRI, r0
   11d9c:	f04f 0003 	mov.w	r0, #3
   11da0:	df02      	svc	2
	while (rx) {
   11da2:	2c00      	cmp	r4, #0
   11da4:	d1db      	bne.n	11d5e <ll_rx_mem_release+0x12>
	*node_rx = rx;
   11da6:	2300      	movs	r3, #0
   11da8:	f8c8 3000 	str.w	r3, [r8]
	rx_alloc(UINT8_MAX);
   11dac:	20ff      	movs	r0, #255	; 0xff
}
   11dae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   11db2:	f7ff bafd 	b.w	113b0 <rx_alloc>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   11db6:	7f2b      	ldrb	r3, [r5, #28]
   11db8:	2b3c      	cmp	r3, #60	; 0x3c
   11dba:	d05f      	beq.n	11e7c <ll_rx_mem_release+0x130>
				LL_ASSERT(!cc->status);
   11dbc:	b1db      	cbz	r3, 11df6 <ll_rx_mem_release+0xaa>
   11dbe:	493c      	ldr	r1, [pc, #240]	; (11eb0 <ll_rx_mem_release+0x164>)
   11dc0:	f240 437f 	movw	r3, #1151	; 0x47f
   11dc4:	463a      	mov	r2, r7
   11dc6:	4630      	mov	r0, r6
   11dc8:	f00b f934 	bl	1d034 <printk>
   11dcc:	4040      	eors	r0, r0
   11dce:	f380 8811 	msr	BASEPRI, r0
   11dd2:	f04f 0003 	mov.w	r0, #3
   11dd6:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   11dd8:	792b      	ldrb	r3, [r5, #4]
   11dda:	b963      	cbnz	r3, 11df6 <ll_rx_mem_release+0xaa>
   11ddc:	4935      	ldr	r1, [pc, #212]	; (11eb4 <ll_rx_mem_release+0x168>)
   11dde:	f240 43ce 	movw	r3, #1230	; 0x4ce
   11de2:	463a      	mov	r2, r7
   11de4:	4630      	mov	r0, r6
   11de6:	f00b f925 	bl	1d034 <printk>
   11dea:	4040      	eors	r0, r0
   11dec:	f380 8811 	msr	BASEPRI, r0
   11df0:	f04f 0003 	mov.w	r0, #3
   11df4:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   11df6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 11ecc <ll_rx_mem_release+0x180>
   11dfa:	f89a 3000 	ldrb.w	r3, [sl]
   11dfe:	2b06      	cmp	r3, #6
   11e00:	d82c      	bhi.n	11e5c <ll_rx_mem_release+0x110>
	mem_link_rx.quota_pdu += delta;
   11e02:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   11e04:	492c      	ldr	r1, [pc, #176]	; (11eb8 <ll_rx_mem_release+0x16c>)
	mem_link_rx.quota_pdu += delta;
   11e06:	f88a 3000 	strb.w	r3, [sl]
			mem_release(rx_free, &mem_pdu_rx.free);
   11e0a:	4628      	mov	r0, r5
   11e0c:	f7fc fae6 	bl	e3dc <mem_release>
	while (rx) {
   11e10:	2c00      	cmp	r4, #0
   11e12:	d1a4      	bne.n	11d5e <ll_rx_mem_release+0x12>
   11e14:	e7c7      	b.n	11da6 <ll_rx_mem_release+0x5a>
			conn = ll_conn_get(rx_free->handle);
   11e16:	88e8      	ldrh	r0, [r5, #6]
   11e18:	f001 fd1a 	bl	13850 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
   11e1c:	6f43      	ldr	r3, [r0, #116]	; 0x74
			conn = ll_conn_get(rx_free->handle);
   11e1e:	4605      	mov	r5, r0
			LL_ASSERT(!conn->lll.link_tx_free);
   11e20:	b163      	cbz	r3, 11e3c <ll_rx_mem_release+0xf0>
   11e22:	4926      	ldr	r1, [pc, #152]	; (11ebc <ll_rx_mem_release+0x170>)
   11e24:	f240 43f5 	movw	r3, #1269	; 0x4f5
   11e28:	463a      	mov	r2, r7
   11e2a:	4630      	mov	r0, r6
   11e2c:	f00b f902 	bl	1d034 <printk>
   11e30:	4040      	eors	r0, r0
   11e32:	f380 8811 	msr	BASEPRI, r0
   11e36:	f04f 0003 	mov.w	r0, #3
   11e3a:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
   11e3c:	f105 0168 	add.w	r1, r5, #104	; 0x68
   11e40:	f105 0064 	add.w	r0, r5, #100	; 0x64
   11e44:	f7fc fb0a 	bl	e45c <memq_deinit>
			LL_ASSERT(link);
   11e48:	4682      	mov	sl, r0
   11e4a:	b1f8      	cbz	r0, 11e8c <ll_rx_mem_release+0x140>
			conn->lll.link_tx_free = link;
   11e4c:	f8c5 a074 	str.w	sl, [r5, #116]	; 0x74
			ll_conn_release(conn);
   11e50:	4628      	mov	r0, r5
   11e52:	f001 fcef 	bl	13834 <ll_conn_release>
	while (rx) {
   11e56:	2c00      	cmp	r4, #0
   11e58:	d181      	bne.n	11d5e <ll_rx_mem_release+0x12>
   11e5a:	e7a4      	b.n	11da6 <ll_rx_mem_release+0x5a>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   11e5c:	4918      	ldr	r1, [pc, #96]	; (11ec0 <ll_rx_mem_release+0x174>)
   11e5e:	f240 530e 	movw	r3, #1294	; 0x50e
   11e62:	463a      	mov	r2, r7
   11e64:	4630      	mov	r0, r6
   11e66:	f00b f8e5 	bl	1d034 <printk>
   11e6a:	4040      	eors	r0, r0
   11e6c:	f380 8811 	msr	BASEPRI, r0
   11e70:	f04f 0003 	mov.w	r0, #3
   11e74:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   11e76:	f89a 3000 	ldrb.w	r3, [sl]
   11e7a:	e7c2      	b.n	11e02 <ll_rx_mem_release+0xb6>
				mem_release(rx_free, &mem_pdu_rx.free);
   11e7c:	490e      	ldr	r1, [pc, #56]	; (11eb8 <ll_rx_mem_release+0x16c>)
   11e7e:	4628      	mov	r0, r5
   11e80:	f7fc faac 	bl	e3dc <mem_release>
	while (rx) {
   11e84:	2c00      	cmp	r4, #0
   11e86:	f47f af6a 	bne.w	11d5e <ll_rx_mem_release+0x12>
   11e8a:	e78c      	b.n	11da6 <ll_rx_mem_release+0x5a>
			LL_ASSERT(link);
   11e8c:	490d      	ldr	r1, [pc, #52]	; (11ec4 <ll_rx_mem_release+0x178>)
   11e8e:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
   11e92:	463a      	mov	r2, r7
   11e94:	4630      	mov	r0, r6
   11e96:	f00b f8cd 	bl	1d034 <printk>
   11e9a:	4040      	eors	r0, r0
   11e9c:	f380 8811 	msr	BASEPRI, r0
   11ea0:	f04f 0003 	mov.w	r0, #3
   11ea4:	df02      	svc	2
   11ea6:	e7d1      	b.n	11e4c <ll_rx_mem_release+0x100>
   11ea8:	00023310 	.word	0x00023310
   11eac:	000230b4 	.word	0x000230b4
   11eb0:	00023400 	.word	0x00023400
   11eb4:	0002340c 	.word	0x0002340c
   11eb8:	20001d14 	.word	0x20001d14
   11ebc:	00023430 	.word	0x00023430
   11ec0:	00023388 	.word	0x00023388
   11ec4:	000235e0 	.word	0x000235e0
   11ec8:	0002314c 	.word	0x0002314c
   11ecc:	20001cb4 	.word	0x20001cb4

00011ed0 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   11ed0:	4801      	ldr	r0, [pc, #4]	; (11ed8 <ll_rx_link_alloc+0x8>)
   11ed2:	f7fc ba69 	b.w	e3a8 <mem_acquire>
   11ed6:	bf00      	nop
   11ed8:	20001cb8 	.word	0x20001cb8

00011edc <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   11edc:	4901      	ldr	r1, [pc, #4]	; (11ee4 <ll_rx_link_release+0x8>)
   11ede:	f7fc ba7d 	b.w	e3dc <mem_release>
   11ee2:	bf00      	nop
   11ee4:	20001cb8 	.word	0x20001cb8

00011ee8 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   11ee8:	4801      	ldr	r0, [pc, #4]	; (11ef0 <ll_rx_alloc+0x8>)
   11eea:	f7fc ba5d 	b.w	e3a8 <mem_acquire>
   11eee:	bf00      	nop
   11ef0:	20001d14 	.word	0x20001d14

00011ef4 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   11ef4:	4901      	ldr	r1, [pc, #4]	; (11efc <ll_rx_release+0x8>)
   11ef6:	f7fc ba71 	b.w	e3dc <mem_release>
   11efa:	bf00      	nop
   11efc:	20001d14 	.word	0x20001d14

00011f00 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   11f00:	4b02      	ldr	r3, [pc, #8]	; (11f0c <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   11f02:	4a03      	ldr	r2, [pc, #12]	; (11f10 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   11f04:	78db      	ldrb	r3, [r3, #3]
   11f06:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   11f08:	f7fc bab2 	b.w	e470 <memq_enqueue>
   11f0c:	20000420 	.word	0x20000420
   11f10:	20001fa4 	.word	0x20001fa4

00011f14 <ll_rx_sched>:
	k_sem_give(sem_recv);
   11f14:	4b01      	ldr	r3, [pc, #4]	; (11f1c <ll_rx_sched+0x8>)
   11f16:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   11f18:	f00a b942 	b.w	1c1a0 <z_impl_k_sem_give>
   11f1c:	20001fb8 	.word	0x20001fb8

00011f20 <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   11f20:	4b0d      	ldr	r3, [pc, #52]	; (11f58 <ll_pdu_rx_alloc_peek+0x38>)
   11f22:	789a      	ldrb	r2, [r3, #2]
   11f24:	f893 c003 	ldrb.w	ip, [r3, #3]
	if (last >= first) {
   11f28:	4562      	cmp	r2, ip
   11f2a:	d809      	bhi.n	11f40 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
   11f2c:	ebac 0102 	sub.w	r1, ip, r2
   11f30:	b2c9      	uxtb	r1, r1
   11f32:	4288      	cmp	r0, r1
   11f34:	d802      	bhi.n	11f3c <ll_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   11f36:	4562      	cmp	r2, ip
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   11f38:	7819      	ldrb	r1, [r3, #0]
   11f3a:	d108      	bne.n	11f4e <ll_pdu_rx_alloc_peek+0x2e>
		return NULL;
   11f3c:	2000      	movs	r0, #0
}
   11f3e:	4770      	bx	lr
		return count - first + last;
   11f40:	7859      	ldrb	r1, [r3, #1]
   11f42:	1a89      	subs	r1, r1, r2
   11f44:	4461      	add	r1, ip
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   11f46:	b2c9      	uxtb	r1, r1
   11f48:	4288      	cmp	r0, r1
   11f4a:	d8f7      	bhi.n	11f3c <ll_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   11f4c:	7819      	ldrb	r1, [r3, #0]
	return *((void **)(fifo + first * size));
   11f4e:	fb02 3301 	mla	r3, r2, r1, r3
   11f52:	6858      	ldr	r0, [r3, #4]
   11f54:	4770      	bx	lr
   11f56:	bf00      	nop
   11f58:	200002d0 	.word	0x200002d0

00011f5c <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   11f5c:	4b09      	ldr	r3, [pc, #36]	; (11f84 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   11f5e:	7899      	ldrb	r1, [r3, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   11f60:	78da      	ldrb	r2, [r3, #3]
   11f62:	7818      	ldrb	r0, [r3, #0]
   11f64:	f893 c001 	ldrb.w	ip, [r3, #1]
   11f68:	428a      	cmp	r2, r1
   11f6a:	d009      	beq.n	11f80 <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   11f6c:	1c4a      	adds	r2, r1, #1
   11f6e:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   11f70:	fb01 3100 	mla	r1, r1, r0, r3
	if (_first == count) {
		_first = 0U;
   11f74:	4594      	cmp	ip, r2
   11f76:	bf08      	it	eq
   11f78:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   11f7a:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
   11f7c:	709a      	strb	r2, [r3, #2]

	return mem;
   11f7e:	4770      	bx	lr
		return NULL;
   11f80:	2000      	movs	r0, #0
}
   11f82:	4770      	bx	lr
   11f84:	200002d0 	.word	0x200002d0

00011f88 <ll_tx_ack_put>:
{
   11f88:	b510      	push	{r4, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   11f8a:	4a15      	ldr	r2, [pc, #84]	; (11fe0 <ll_tx_ack_put+0x58>)
   11f8c:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   11f8e:	f892 e001 	ldrb.w	lr, [r2, #1]
   11f92:	f892 c002 	ldrb.w	ip, [r2, #2]
	last = last + 1;
   11f96:	1c63      	adds	r3, r4, #1
   11f98:	b2db      	uxtb	r3, r3
		last = 0U;
   11f9a:	459e      	cmp	lr, r3
   11f9c:	bf08      	it	eq
   11f9e:	2300      	moveq	r3, #0
	if (last == first) {
   11fa0:	459c      	cmp	ip, r3
   11fa2:	d00c      	beq.n	11fbe <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   11fa4:	4696      	mov	lr, r2
   11fa6:	f81e cb04 	ldrb.w	ip, [lr], #4
   11faa:	fb1c fc04 	smulbb	ip, ip, r4
	LL_ASSERT(tx);
   11fae:	eb1e 040c 	adds.w	r4, lr, ip
   11fb2:	d004      	beq.n	11fbe <ll_tx_ack_put+0x36>
	tx->handle = handle;
   11fb4:	f82e 000c 	strh.w	r0, [lr, ip]
	tx->node = node_tx;
   11fb8:	6061      	str	r1, [r4, #4]
	*last = idx; /* Commit: Update write index */
   11fba:	70d3      	strb	r3, [r2, #3]
}
   11fbc:	bd10      	pop	{r4, pc}
	LL_ASSERT(tx);
   11fbe:	4a09      	ldr	r2, [pc, #36]	; (11fe4 <ll_tx_ack_put+0x5c>)
   11fc0:	4909      	ldr	r1, [pc, #36]	; (11fe8 <ll_tx_ack_put+0x60>)
   11fc2:	480a      	ldr	r0, [pc, #40]	; (11fec <ll_tx_ack_put+0x64>)
   11fc4:	f240 5356 	movw	r3, #1366	; 0x556
   11fc8:	f00b f834 	bl	1d034 <printk>
   11fcc:	4040      	eors	r0, r0
   11fce:	f380 8811 	msr	BASEPRI, r0
   11fd2:	f04f 0003 	mov.w	r0, #3
   11fd6:	df02      	svc	2
	tx->handle = handle;
   11fd8:	2300      	movs	r3, #0
   11fda:	801b      	strh	r3, [r3, #0]
   11fdc:	deff      	udf	#255	; 0xff
   11fde:	bf00      	nop
   11fe0:	20000420 	.word	0x20000420
   11fe4:	00023310 	.word	0x00023310
   11fe8:	000235d4 	.word	0x000235d4
   11fec:	000230b4 	.word	0x000230b4

00011ff0 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   11ff0:	f030 0302 	bics.w	r3, r0, #2
{
   11ff4:	b510      	push	{r4, lr}
   11ff6:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   11ff8:	d002      	beq.n	12000 <ull_ticker_status_take+0x10>
   11ffa:	680b      	ldr	r3, [r1, #0]
   11ffc:	2b02      	cmp	r3, #2
   11ffe:	d008      	beq.n	12012 <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   12000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12008:	4809      	ldr	r0, [pc, #36]	; (12030 <ull_ticker_status_take+0x40>)
   1200a:	f00a f8ef 	bl	1c1ec <z_impl_k_sem_take>
	return *ret_cb;
   1200e:	6820      	ldr	r0, [r4, #0]
}
   12010:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   12012:	4a08      	ldr	r2, [pc, #32]	; (12034 <ull_ticker_status_take+0x44>)
   12014:	4908      	ldr	r1, [pc, #32]	; (12038 <ull_ticker_status_take+0x48>)
   12016:	4809      	ldr	r0, [pc, #36]	; (1203c <ull_ticker_status_take+0x4c>)
   12018:	f240 538a 	movw	r3, #1418	; 0x58a
   1201c:	f00b f80a 	bl	1d034 <printk>
   12020:	4040      	eors	r0, r0
   12022:	f380 8811 	msr	BASEPRI, r0
   12026:	f04f 0003 	mov.w	r0, #3
   1202a:	df02      	svc	2
   1202c:	e7e8      	b.n	12000 <ull_ticker_status_take+0x10>
   1202e:	bf00      	nop
   12030:	20001fbc 	.word	0x20001fbc
   12034:	00023310 	.word	0x00023310
   12038:	00023450 	.word	0x00023450
   1203c:	000230b4 	.word	0x000230b4

00012040 <ull_disable_mark>:
	if (!*m) {
   12040:	4904      	ldr	r1, [pc, #16]	; (12054 <ull_disable_mark+0x14>)
   12042:	680a      	ldr	r2, [r1, #0]
   12044:	b10a      	cbz	r2, 1204a <ull_disable_mark+0xa>
}
   12046:	4610      	mov	r0, r2
   12048:	4770      	bx	lr
		*m = param;
   1204a:	4602      	mov	r2, r0
   1204c:	6008      	str	r0, [r1, #0]
}
   1204e:	4610      	mov	r0, r2
   12050:	4770      	bx	lr
   12052:	bf00      	nop
   12054:	20001be8 	.word	0x20001be8

00012058 <ull_disable_unmark>:
	if (*m && *m == param) {
   12058:	4a04      	ldr	r2, [pc, #16]	; (1206c <ull_disable_unmark+0x14>)
   1205a:	6813      	ldr	r3, [r2, #0]
   1205c:	b123      	cbz	r3, 12068 <ull_disable_unmark+0x10>
   1205e:	4298      	cmp	r0, r3
		*m = NULL;
   12060:	bf06      	itte	eq
   12062:	2100      	moveq	r1, #0
   12064:	6011      	streq	r1, [r2, #0]
	return NULL;
   12066:	2300      	movne	r3, #0
}
   12068:	4618      	mov	r0, r3
   1206a:	4770      	bx	lr
   1206c:	20001be8 	.word	0x20001be8

00012070 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   12070:	4b01      	ldr	r3, [pc, #4]	; (12078 <ull_disable_mark_get+0x8>)
}
   12072:	6818      	ldr	r0, [r3, #0]
   12074:	4770      	bx	lr
   12076:	bf00      	nop
   12078:	20001be8 	.word	0x20001be8

0001207c <ull_update_mark>:
	if (!*m) {
   1207c:	4904      	ldr	r1, [pc, #16]	; (12090 <ull_update_mark+0x14>)
   1207e:	680a      	ldr	r2, [r1, #0]
   12080:	b10a      	cbz	r2, 12086 <ull_update_mark+0xa>
}
   12082:	4610      	mov	r0, r2
   12084:	4770      	bx	lr
		*m = param;
   12086:	4602      	mov	r2, r0
   12088:	6008      	str	r0, [r1, #0]
}
   1208a:	4610      	mov	r0, r2
   1208c:	4770      	bx	lr
   1208e:	bf00      	nop
   12090:	20001bec 	.word	0x20001bec

00012094 <ull_update_unmark>:
	if (*m && *m == param) {
   12094:	4a04      	ldr	r2, [pc, #16]	; (120a8 <ull_update_unmark+0x14>)
   12096:	6813      	ldr	r3, [r2, #0]
   12098:	b123      	cbz	r3, 120a4 <ull_update_unmark+0x10>
   1209a:	4298      	cmp	r0, r3
		*m = NULL;
   1209c:	bf06      	itte	eq
   1209e:	2100      	moveq	r1, #0
   120a0:	6011      	streq	r1, [r2, #0]
	return NULL;
   120a2:	2300      	movne	r3, #0
}
   120a4:	4618      	mov	r0, r3
   120a6:	4770      	bx	lr
   120a8:	20001bec 	.word	0x20001bec

000120ac <ull_update_mark_get>:
	return mark_get(mark_update);
   120ac:	4b01      	ldr	r3, [pc, #4]	; (120b4 <ull_update_mark_get+0x8>)
}
   120ae:	6818      	ldr	r0, [r3, #0]
   120b0:	4770      	bx	lr
   120b2:	bf00      	nop
   120b4:	20001bec 	.word	0x20001bec

000120b8 <ull_disable>:
{
   120b8:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
   120ba:	6805      	ldr	r5, [r0, #0]
	if (!hdr) {
   120bc:	f115 0f10 	cmn.w	r5, #16
{
   120c0:	b087      	sub	sp, #28
	if (!hdr) {
   120c2:	d00b      	beq.n	120dc <ull_disable+0x24>
	compiler_barrier();
   120c4:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   120c6:	2201      	movs	r2, #1
   120c8:	2100      	movs	r1, #0
   120ca:	4668      	mov	r0, sp
   120cc:	f00f feaf 	bl	21e2e <z_impl_k_sem_init>
   120d0:	7c2b      	ldrb	r3, [r5, #16]
	hdr->disabled_cb = disabled_cb;
   120d2:	4a13      	ldr	r2, [pc, #76]	; (12120 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   120d4:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   120d8:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   120da:	b913      	cbnz	r3, 120e2 <ull_disable+0x2a>
		return ULL_STATUS_SUCCESS;
   120dc:	2000      	movs	r0, #0
}
   120de:	b007      	add	sp, #28
   120e0:	bd30      	pop	{r4, r5, pc}
	mfy.param = lll;
   120e2:	4b10      	ldr	r3, [pc, #64]	; (12124 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   120e4:	2200      	movs	r2, #0
   120e6:	4611      	mov	r1, r2
   120e8:	2003      	movs	r0, #3
	mfy.param = lll;
   120ea:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   120ec:	f7fc fa38 	bl	e560 <mayfly_enqueue>
	LL_ASSERT(!ret);
   120f0:	b940      	cbnz	r0, 12104 <ull_disable+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   120f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   120f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   120fa:	4668      	mov	r0, sp
   120fc:	f00a f876 	bl	1c1ec <z_impl_k_sem_take>
}
   12100:	b007      	add	sp, #28
   12102:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   12104:	4a08      	ldr	r2, [pc, #32]	; (12128 <ull_disable+0x70>)
   12106:	4909      	ldr	r1, [pc, #36]	; (1212c <ull_disable+0x74>)
   12108:	4809      	ldr	r0, [pc, #36]	; (12130 <ull_disable+0x78>)
   1210a:	f240 53fc 	movw	r3, #1532	; 0x5fc
   1210e:	f00a ff91 	bl	1d034 <printk>
   12112:	4040      	eors	r0, r0
   12114:	f380 8811 	msr	BASEPRI, r0
   12118:	f04f 0003 	mov.w	r0, #3
   1211c:	df02      	svc	2
   1211e:	e7e8      	b.n	120f2 <ull_disable+0x3a>
   12120:	000111cd 	.word	0x000111cd
   12124:	20000484 	.word	0x20000484
   12128:	00023310 	.word	0x00023310
   1212c:	00023448 	.word	0x00023448
   12130:	000230b4 	.word	0x000230b4

00012134 <ull_ticker_stop_with_mark>:
{
   12134:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   12136:	4d1d      	ldr	r5, [pc, #116]	; (121ac <ull_ticker_stop_with_mark+0x78>)
   12138:	682b      	ldr	r3, [r5, #0]
{
   1213a:	b085      	sub	sp, #20
   1213c:	460c      	mov	r4, r1
   1213e:	4616      	mov	r6, r2
	if (!*m) {
   12140:	b323      	cbz	r3, 1218c <ull_ticker_stop_with_mark+0x58>
	if (mark != param) {
   12142:	4299      	cmp	r1, r3
   12144:	d112      	bne.n	1216c <ull_ticker_stop_with_mark+0x38>
	ret_cb = TICKER_STATUS_BUSY;
   12146:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   12148:	af03      	add	r7, sp, #12
   1214a:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   1214c:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1214e:	2103      	movs	r1, #3
   12150:	4b17      	ldr	r3, [pc, #92]	; (121b0 <ull_ticker_stop_with_mark+0x7c>)
   12152:	9700      	str	r7, [sp, #0]
   12154:	2000      	movs	r0, #0
   12156:	f7fd fbcd 	bl	f8f4 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   1215a:	4639      	mov	r1, r7
   1215c:	f7ff ff48 	bl	11ff0 <ull_ticker_status_take>
	if (ret) {
   12160:	b140      	cbz	r0, 12174 <ull_ticker_stop_with_mark+0x40>
	if (*m && *m == param) {
   12162:	682b      	ldr	r3, [r5, #0]
   12164:	b10b      	cbz	r3, 1216a <ull_ticker_stop_with_mark+0x36>
   12166:	429c      	cmp	r4, r3
   12168:	d012      	beq.n	12190 <ull_ticker_stop_with_mark+0x5c>
		if (mark != param) {
   1216a:	b1cc      	cbz	r4, 121a0 <ull_ticker_stop_with_mark+0x6c>
			return -ENOLCK;
   1216c:	f06f 0021 	mvn.w	r0, #33	; 0x21
}
   12170:	b005      	add	sp, #20
   12172:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = ull_disable(lll_disable);
   12174:	4630      	mov	r0, r6
   12176:	f7ff ff9f 	bl	120b8 <ull_disable>
	if (ret) {
   1217a:	b9a0      	cbnz	r0, 121a6 <ull_ticker_stop_with_mark+0x72>
	if (*m && *m == param) {
   1217c:	682b      	ldr	r3, [r5, #0]
   1217e:	b10b      	cbz	r3, 12184 <ull_ticker_stop_with_mark+0x50>
   12180:	429c      	cmp	r4, r3
   12182:	d00b      	beq.n	1219c <ull_ticker_stop_with_mark+0x68>
	if (mark != param) {
   12184:	2c00      	cmp	r4, #0
   12186:	d1f1      	bne.n	1216c <ull_ticker_stop_with_mark+0x38>
}
   12188:	b005      	add	sp, #20
   1218a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   1218c:	6029      	str	r1, [r5, #0]
	if (mark != param) {
   1218e:	e7da      	b.n	12146 <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   12190:	2300      	movs	r3, #0
		return -EALREADY;
   12192:	f06f 0044 	mvn.w	r0, #68	; 0x44
		*m = NULL;
   12196:	602b      	str	r3, [r5, #0]
}
   12198:	b005      	add	sp, #20
   1219a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   1219c:	6028      	str	r0, [r5, #0]
	if (mark != param) {
   1219e:	e7e7      	b.n	12170 <ull_ticker_stop_with_mark+0x3c>
		return -EALREADY;
   121a0:	f06f 0044 	mvn.w	r0, #68	; 0x44
   121a4:	e7e4      	b.n	12170 <ull_ticker_stop_with_mark+0x3c>
		return -EBUSY;
   121a6:	f06f 000f 	mvn.w	r0, #15
   121aa:	e7e1      	b.n	12170 <ull_ticker_stop_with_mark+0x3c>
   121ac:	20001be8 	.word	0x20001be8
   121b0:	000111c1 	.word	0x000111c1

000121b4 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   121b4:	4b0d      	ldr	r3, [pc, #52]	; (121ec <ull_pdu_rx_alloc_peek+0x38>)
   121b6:	789a      	ldrb	r2, [r3, #2]
   121b8:	f893 c003 	ldrb.w	ip, [r3, #3]
	if (last >= first) {
   121bc:	4562      	cmp	r2, ip
   121be:	d809      	bhi.n	121d4 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   121c0:	ebac 0102 	sub.w	r1, ip, r2
   121c4:	b2c9      	uxtb	r1, r1
   121c6:	4288      	cmp	r0, r1
   121c8:	d802      	bhi.n	121d0 <ull_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   121ca:	4562      	cmp	r2, ip
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   121cc:	7819      	ldrb	r1, [r3, #0]
   121ce:	d108      	bne.n	121e2 <ull_pdu_rx_alloc_peek+0x2e>
		return NULL;
   121d0:	2000      	movs	r0, #0
}
   121d2:	4770      	bx	lr
		return count - first + last;
   121d4:	7859      	ldrb	r1, [r3, #1]
   121d6:	1a89      	subs	r1, r1, r2
   121d8:	4461      	add	r1, ip
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   121da:	b2c9      	uxtb	r1, r1
   121dc:	4288      	cmp	r0, r1
   121de:	d8f7      	bhi.n	121d0 <ull_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   121e0:	7819      	ldrb	r1, [r3, #0]
	return *((void **)(fifo + first * size));
   121e2:	fb02 3301 	mla	r3, r2, r1, r3
   121e6:	6858      	ldr	r0, [r3, #4]
   121e8:	4770      	bx	lr
   121ea:	bf00      	nop
   121ec:	200002e4 	.word	0x200002e4

000121f0 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
   121f0:	4b09      	ldr	r3, [pc, #36]	; (12218 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   121f2:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   121f4:	78da      	ldrb	r2, [r3, #3]
   121f6:	7818      	ldrb	r0, [r3, #0]
   121f8:	f893 c001 	ldrb.w	ip, [r3, #1]
   121fc:	428a      	cmp	r2, r1
   121fe:	d009      	beq.n	12214 <ull_pdu_rx_alloc+0x24>
	_first += 1U;
   12200:	1c4a      	adds	r2, r1, #1
   12202:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   12204:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   12208:	4594      	cmp	ip, r2
   1220a:	bf08      	it	eq
   1220c:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   1220e:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   12210:	709a      	strb	r2, [r3, #2]
	return mem;
   12212:	4770      	bx	lr
		return NULL;
   12214:	2000      	movs	r0, #0
}
   12216:	4770      	bx	lr
   12218:	200002e4 	.word	0x200002e4

0001221c <ull_rx_put>:
{
   1221c:	b538      	push	{r3, r4, r5, lr}
   1221e:	460c      	mov	r4, r1
   12220:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   12222:	f003 fd2b 	bl	15c7c <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   12226:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   12228:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1222a:	4a03      	ldr	r2, [pc, #12]	; (12238 <ull_rx_put+0x1c>)
   1222c:	4628      	mov	r0, r5
}
   1222e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   12232:	f7fc b91d 	b.w	e470 <memq_enqueue>
   12236:	bf00      	nop
   12238:	20001fb4 	.word	0x20001fb4

0001223c <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   1223c:	2201      	movs	r2, #1
   1223e:	4b02      	ldr	r3, [pc, #8]	; (12248 <ull_rx_sched+0xc>)
   12240:	4611      	mov	r1, r2
   12242:	2000      	movs	r0, #0
   12244:	f7fc b98c 	b.w	e560 <mayfly_enqueue>
   12248:	20000474 	.word	0x20000474

0001224c <ull_prepare_enqueue>:
{
   1224c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   12250:	4e18      	ldr	r6, [pc, #96]	; (122b4 <ull_prepare_enqueue+0x68>)
{
   12252:	f89d a024 	ldrb.w	sl, [sp, #36]	; 0x24
   12256:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   12258:	78f3      	ldrb	r3, [r6, #3]
{
   1225a:	4680      	mov	r8, r0
	last = last + 1;
   1225c:	1c5d      	adds	r5, r3, #1
	if (last == count) {
   1225e:	7870      	ldrb	r0, [r6, #1]
	last = last + 1;
   12260:	b2ed      	uxtb	r5, r5
		last = 0U;
   12262:	42a8      	cmp	r0, r5
   12264:	bf08      	it	eq
   12266:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   12268:	78b0      	ldrb	r0, [r6, #2]
	if (last == first) {
   1226a:	42a8      	cmp	r0, r5
   1226c:	d01e      	beq.n	122ac <ull_prepare_enqueue+0x60>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1226e:	4634      	mov	r4, r6
   12270:	460f      	mov	r7, r1
   12272:	4611      	mov	r1, r2
   12274:	f814 2b04 	ldrb.w	r2, [r4], #4
   12278:	fb02 4403 	mla	r4, r2, r3, r4
	if (!e) {
   1227c:	b1b4      	cbz	r4, 122ac <ull_prepare_enqueue+0x60>
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   1227e:	2210      	movs	r2, #16
   12280:	4620      	mov	r0, r4
   12282:	f00d f929 	bl	1f4d8 <memcpy>
	e->is_resume = is_resume;
   12286:	f894 3020 	ldrb.w	r3, [r4, #32]
	e->prio = prio;
   1228a:	9a08      	ldr	r2, [sp, #32]
	e->abort_cb = abort_cb;
   1228c:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   1228e:	f00a 0a01 	and.w	sl, sl, #1
   12292:	f023 0303 	bic.w	r3, r3, #3
   12296:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
   1229a:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->prio = prio;
   1229e:	61e2      	str	r2, [r4, #28]
	e->is_resume = is_resume;
   122a0:	f884 3020 	strb.w	r3, [r4, #32]
	return 0;
   122a4:	2000      	movs	r0, #0
	*last = idx; /* Commit: Update write index */
   122a6:	70f5      	strb	r5, [r6, #3]
}
   122a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
   122ac:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   122b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   122b4:	200002fc 	.word	0x200002fc

000122b8 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   122b8:	4b05      	ldr	r3, [pc, #20]	; (122d0 <ull_prepare_dequeue_get+0x18>)
   122ba:	7898      	ldrb	r0, [r3, #2]
	if (first == last) {
   122bc:	78da      	ldrb	r2, [r3, #3]
   122be:	7819      	ldrb	r1, [r3, #0]
   122c0:	4282      	cmp	r2, r0
	return (void *)(fifo + first * size);
   122c2:	bf1a      	itte	ne
   122c4:	3304      	addne	r3, #4
   122c6:	fb00 3001 	mlane	r0, r0, r1, r3
		return NULL;
   122ca:	2000      	moveq	r0, #0
}
   122cc:	4770      	bx	lr
   122ce:	bf00      	nop
   122d0:	200002fc 	.word	0x200002fc

000122d4 <ull_prepare_dequeue_iter>:
{
   122d4:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   122d6:	4b0d      	ldr	r3, [pc, #52]	; (1230c <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
   122d8:	7802      	ldrb	r2, [r0, #0]
   122da:	7859      	ldrb	r1, [r3, #1]
   122dc:	f893 c003 	ldrb.w	ip, [r3, #3]
   122e0:	f893 e000 	ldrb.w	lr, [r3]
   122e4:	4291      	cmp	r1, r2
   122e6:	bf9c      	itt	ls
   122e8:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   122ea:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   122ec:	4594      	cmp	ip, r2
   122ee:	d00a      	beq.n	12306 <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
   122f0:	1c53      	adds	r3, r2, #1
   122f2:	b2db      	uxtb	r3, r3
		i = 0U;
   122f4:	4299      	cmp	r1, r3
   122f6:	bf08      	it	eq
   122f8:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   122fa:	4905      	ldr	r1, [pc, #20]	; (12310 <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
   122fc:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   122fe:	fb02 100e 	mla	r0, r2, lr, r1
}
   12302:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   12306:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   12308:	e7fb      	b.n	12302 <ull_prepare_dequeue_iter+0x2e>
   1230a:	bf00      	nop
   1230c:	200002fc 	.word	0x200002fc
   12310:	20000300 	.word	0x20000300

00012314 <ull_prepare_dequeue>:
{
   12314:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
   12318:	4c27      	ldr	r4, [pc, #156]	; (123b8 <ull_prepare_dequeue+0xa4>)
   1231a:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   1231c:	78e1      	ldrb	r1, [r4, #3]
   1231e:	7823      	ldrb	r3, [r4, #0]
   12320:	4291      	cmp	r1, r2
   12322:	d029      	beq.n	12378 <ull_prepare_dequeue+0x64>
	return (void *)(fifo + first * size);
   12324:	1d27      	adds	r7, r4, #4
   12326:	fb02 7203 	mla	r2, r2, r3, r7
	while (next) {
   1232a:	b32a      	cbz	r2, 12378 <ull_prepare_dequeue+0x64>
			mfy.param = next;
   1232c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 123bc <ull_prepare_dequeue+0xa8>
			LL_ASSERT(!ret);
   12330:	f8df b094 	ldr.w	fp, [pc, #148]	; 123c8 <ull_prepare_dequeue+0xb4>
   12334:	f8df a094 	ldr.w	sl, [pc, #148]	; 123cc <ull_prepare_dequeue+0xb8>
   12338:	4680      	mov	r8, r0
		uint8_t is_aborted = next->is_aborted;
   1233a:	f892 3020 	ldrb.w	r3, [r2, #32]
		if (!is_aborted) {
   1233e:	0799      	lsls	r1, r3, #30
		uint8_t is_aborted = next->is_aborted;
   12340:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   12344:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
   12348:	d518      	bpl.n	1237c <ull_prepare_dequeue+0x68>
		MFIFO_DEQUEUE(prep);
   1234a:	78e1      	ldrb	r1, [r4, #3]
	uint8_t _first = *first; /* Copy read-index */
   1234c:	78a3      	ldrb	r3, [r4, #2]
   1234e:	7822      	ldrb	r2, [r4, #0]
   12350:	7860      	ldrb	r0, [r4, #1]
	if (_first == last) {
   12352:	4299      	cmp	r1, r3
   12354:	d010      	beq.n	12378 <ull_prepare_dequeue+0x64>
	_first += 1U;
   12356:	3301      	adds	r3, #1
   12358:	b2db      	uxtb	r3, r3
	if (_first == count) {
   1235a:	4298      	cmp	r0, r3
   1235c:	d026      	beq.n	123ac <ull_prepare_dequeue+0x98>
	if (first == last) {
   1235e:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
   12360:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
   12362:	d009      	beq.n	12378 <ull_prepare_dequeue+0x64>
	return (void *)(fifo + first * size);
   12364:	fb03 7202 	mla	r2, r3, r2, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   12368:	b132      	cbz	r2, 12378 <ull_prepare_dequeue+0x64>
   1236a:	2d00      	cmp	r5, #0
   1236c:	d1e5      	bne.n	1233a <ull_prepare_dequeue+0x26>
   1236e:	b11e      	cbz	r6, 12378 <ull_prepare_dequeue+0x64>
   12370:	f892 3020 	ldrb.w	r3, [r2, #32]
   12374:	07db      	lsls	r3, r3, #31
   12376:	d5e0      	bpl.n	1233a <ull_prepare_dequeue+0x26>
}
   12378:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
   1237c:	f8c9 2008 	str.w	r2, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   12380:	4b0e      	ldr	r3, [pc, #56]	; (123bc <ull_prepare_dequeue+0xa8>)
   12382:	462a      	mov	r2, r5
   12384:	4629      	mov	r1, r5
   12386:	4640      	mov	r0, r8
   12388:	f7fc f8ea 	bl	e560 <mayfly_enqueue>
			LL_ASSERT(!ret);
   1238c:	2800      	cmp	r0, #0
   1238e:	d0dc      	beq.n	1234a <ull_prepare_dequeue+0x36>
   12390:	480b      	ldr	r0, [pc, #44]	; (123c0 <ull_prepare_dequeue+0xac>)
   12392:	f240 6374 	movw	r3, #1652	; 0x674
   12396:	465a      	mov	r2, fp
   12398:	4651      	mov	r1, sl
   1239a:	f00a fe4b 	bl	1d034 <printk>
   1239e:	4040      	eors	r0, r0
   123a0:	f380 8811 	msr	BASEPRI, r0
   123a4:	f04f 0003 	mov.w	r0, #3
   123a8:	df02      	svc	2
   123aa:	e7ce      	b.n	1234a <ull_prepare_dequeue+0x36>
	*first = _first; /* Write back read-index */
   123ac:	2300      	movs	r3, #0
   123ae:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
   123b0:	2900      	cmp	r1, #0
   123b2:	d0e1      	beq.n	12378 <ull_prepare_dequeue+0x64>
	return (void *)(fifo + first * size);
   123b4:	4a03      	ldr	r2, [pc, #12]	; (123c4 <ull_prepare_dequeue+0xb0>)
   123b6:	e7d8      	b.n	1236a <ull_prepare_dequeue+0x56>
   123b8:	200002fc 	.word	0x200002fc
   123bc:	20000444 	.word	0x20000444
   123c0:	000230b4 	.word	0x000230b4
   123c4:	20000300 	.word	0x20000300
   123c8:	00023310 	.word	0x00023310
   123cc:	00023448 	.word	0x00023448

000123d0 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   123d0:	4b06      	ldr	r3, [pc, #24]	; (123ec <ull_event_done_extra_get+0x1c>)
   123d2:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   123d4:	78d9      	ldrb	r1, [r3, #3]
   123d6:	7818      	ldrb	r0, [r3, #0]
   123d8:	4291      	cmp	r1, r2
   123da:	d005      	beq.n	123e8 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   123dc:	fb02 3300 	mla	r3, r2, r0, r3
   123e0:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   123e2:	b110      	cbz	r0, 123ea <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   123e4:	3020      	adds	r0, #32
   123e6:	4770      	bx	lr
		return NULL;
   123e8:	2000      	movs	r0, #0
}
   123ea:	4770      	bx	lr
   123ec:	200002bc 	.word	0x200002bc

000123f0 <ull_event_done>:
{
   123f0:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
   123f2:	4a13      	ldr	r2, [pc, #76]	; (12440 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
   123f4:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   123f6:	78d4      	ldrb	r4, [r2, #3]
   123f8:	7811      	ldrb	r1, [r2, #0]
   123fa:	429c      	cmp	r4, r3
{
   123fc:	4606      	mov	r6, r0
	evdone = MFIFO_DEQUEUE(done);
   123fe:	7850      	ldrb	r0, [r2, #1]
   12400:	d01b      	beq.n	1243a <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
   12402:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   12406:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   12408:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   1240a:	b2db      	uxtb	r3, r3
		_first = 0U;
   1240c:	4298      	cmp	r0, r3
   1240e:	bf08      	it	eq
   12410:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   12412:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   12414:	b17c      	cbz	r4, 12436 <ull_event_done+0x46>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   12416:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   12418:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   1241a:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   1241c:	4a09      	ldr	r2, [pc, #36]	; (12444 <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   1241e:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
   12420:	4621      	mov	r1, r4
	evdone->hdr.link = NULL;
   12422:	6025      	str	r5, [r4, #0]
	evdone->param = param;
   12424:	61e6      	str	r6, [r4, #28]
	memq_enqueue(link, done, &memq_ull_done.tail);
   12426:	f7fc f823 	bl	e470 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   1242a:	2201      	movs	r2, #1
   1242c:	4b06      	ldr	r3, [pc, #24]	; (12448 <ull_event_done+0x58>)
   1242e:	4611      	mov	r1, r2
   12430:	4628      	mov	r0, r5
   12432:	f7fc f895 	bl	e560 <mayfly_enqueue>
}
   12436:	4620      	mov	r0, r4
   12438:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1243a:	2400      	movs	r4, #0
   1243c:	e7fb      	b.n	12436 <ull_event_done+0x46>
   1243e:	bf00      	nop
   12440:	200002bc 	.word	0x200002bc
   12444:	20001fac 	.word	0x20001fac
   12448:	20000464 	.word	0x20000464

0001244c <ticker_stop_cb>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1244c:	491a      	ldr	r1, [pc, #104]	; (124b8 <ticker_stop_cb+0x6c>)
}

#if defined(CONFIG_BT_PERIPHERAL)
static void ticker_stop_cb(uint32_t ticks_at_expire, uint32_t remainder,
			   uint16_t lazy, void *param)
{
   1244e:	b530      	push	{r4, r5, lr}
   12450:	461c      	mov	r4, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   12452:	1a61      	subs	r1, r4, r1
   12454:	4b19      	ldr	r3, [pc, #100]	; (124bc <ticker_stop_cb+0x70>)
   12456:	0889      	lsrs	r1, r1, #2
   12458:	fba3 3101 	umull	r3, r1, r3, r1
	struct ll_adv_set *adv = param;
	uint8_t handle;
	uint32_t ret;

	handle = ull_adv_handle_get(adv);
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   1245c:	f411 7f7f 	tst.w	r1, #1020	; 0x3fc
{
   12460:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   12462:	ea4f 0591 	mov.w	r5, r1, lsr #2
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   12466:	d119      	bne.n	1249c <ticker_stop_cb+0x50>

	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
			  TICKER_ID_ADV_BASE + handle,
   12468:	1caa      	adds	r2, r5, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   1246a:	4b15      	ldr	r3, [pc, #84]	; (124c0 <ticker_stop_cb+0x74>)
   1246c:	9400      	str	r4, [sp, #0]
   1246e:	b2d2      	uxtb	r2, r2
   12470:	2101      	movs	r1, #1
   12472:	2000      	movs	r0, #0
   12474:	f7fd fa3e 	bl	f8f4 <ticker_stop>
			  ticker_op_stop_cb, adv);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   12478:	f030 0302 	bics.w	r3, r0, #2
   1247c:	d00c      	beq.n	12498 <ticker_stop_cb+0x4c>
   1247e:	4a11      	ldr	r2, [pc, #68]	; (124c4 <ticker_stop_cb+0x78>)
   12480:	4911      	ldr	r1, [pc, #68]	; (124c8 <ticker_stop_cb+0x7c>)
   12482:	4812      	ldr	r0, [pc, #72]	; (124cc <ticker_stop_cb+0x80>)
   12484:	f240 7315 	movw	r3, #1813	; 0x715
   12488:	f00a fdd4 	bl	1d034 <printk>
   1248c:	4040      	eors	r0, r0
   1248e:	f380 8811 	msr	BASEPRI, r0
   12492:	f04f 0003 	mov.w	r0, #3
   12496:	df02      	svc	2
		  (ret == TICKER_STATUS_BUSY));
}
   12498:	b003      	add	sp, #12
   1249a:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   1249c:	4a09      	ldr	r2, [pc, #36]	; (124c4 <ticker_stop_cb+0x78>)
   1249e:	490c      	ldr	r1, [pc, #48]	; (124d0 <ticker_stop_cb+0x84>)
   124a0:	480a      	ldr	r0, [pc, #40]	; (124cc <ticker_stop_cb+0x80>)
   124a2:	f44f 63e2 	mov.w	r3, #1808	; 0x710
   124a6:	f00a fdc5 	bl	1d034 <printk>
   124aa:	4040      	eors	r0, r0
   124ac:	f380 8811 	msr	BASEPRI, r0
   124b0:	f04f 0003 	mov.w	r0, #3
   124b4:	df02      	svc	2
   124b6:	e7d7      	b.n	12468 <ticker_stop_cb+0x1c>
   124b8:	20002334 	.word	0x20002334
   124bc:	30c30c31 	.word	0x30c30c31
   124c0:	00012699 	.word	0x00012699
   124c4:	0002347c 	.word	0x0002347c
   124c8:	000234c8 	.word	0x000234c8
   124cc:	000230b4 	.word	0x000230b4
   124d0:	000234bc 	.word	0x000234bc

000124d4 <disabled_cb>:
		LL_ASSERT(!ret);
	}
}

static void disabled_cb(void *param)
{
   124d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct ll_adv_set *adv;
	struct node_rx_pdu *rx;
	struct node_rx_cc *cc;
	memq_link_t *link;

	adv = ((struct lll_hdr *)param)->parent;
   124d6:	6805      	ldr	r5, [r0, #0]

	LL_ASSERT(adv->link_cc_free);
   124d8:	6c2f      	ldr	r7, [r5, #64]	; 0x40
{
   124da:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   124dc:	b1d7      	cbz	r7, 12514 <disabled_cb+0x40>
	link = adv->link_cc_free;
	adv->link_cc_free = NULL;

	LL_ASSERT(adv->node_rx_cc_free);
   124de:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	adv->link_cc_free = NULL;
   124e0:	2300      	movs	r3, #0
   124e2:	642b      	str	r3, [r5, #64]	; 0x40
	LL_ASSERT(adv->node_rx_cc_free);
   124e4:	b34c      	cbz	r4, 1253a <disabled_cb+0x66>
	rx = adv->node_rx_cc_free;
	adv->node_rx_cc_free = NULL;
   124e6:	2100      	movs	r1, #0

	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   124e8:	2314      	movs	r3, #20
	adv->node_rx_cc_free = NULL;
   124ea:	6469      	str	r1, [r5, #68]	; 0x44
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   124ec:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   124ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
   124f2:	80e3      	strh	r3, [r4, #6]

	cc = (void *)rx->pdu;
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   124f4:	221e      	movs	r2, #30
   124f6:	f104 001c 	add.w	r0, r4, #28
   124fa:	f00d f818 	bl	1f52e <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   124fe:	233c      	movs	r3, #60	; 0x3c
   12500:	7723      	strb	r3, [r4, #28]

	rx->hdr.rx_ftr.param = param;
   12502:	60a6      	str	r6, [r4, #8]

		link = rx->hdr.link;
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	ll_rx_put(link, rx);
   12504:	4621      	mov	r1, r4
   12506:	4638      	mov	r0, r7
   12508:	f7ff fcfa 	bl	11f00 <ll_rx_put>
	ll_rx_sched();
}
   1250c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   12510:	f7ff bd00 	b.w	11f14 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   12514:	4a10      	ldr	r2, [pc, #64]	; (12558 <disabled_cb+0x84>)
   12516:	4911      	ldr	r1, [pc, #68]	; (1255c <disabled_cb+0x88>)
   12518:	4811      	ldr	r0, [pc, #68]	; (12560 <disabled_cb+0x8c>)
   1251a:	f240 734c 	movw	r3, #1868	; 0x74c
   1251e:	f00a fd89 	bl	1d034 <printk>
   12522:	4040      	eors	r0, r0
   12524:	f380 8811 	msr	BASEPRI, r0
   12528:	f04f 0003 	mov.w	r0, #3
   1252c:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   1252e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	link = adv->link_cc_free;
   12530:	6c2f      	ldr	r7, [r5, #64]	; 0x40
	adv->link_cc_free = NULL;
   12532:	2300      	movs	r3, #0
   12534:	642b      	str	r3, [r5, #64]	; 0x40
	LL_ASSERT(adv->node_rx_cc_free);
   12536:	2c00      	cmp	r4, #0
   12538:	d1d5      	bne.n	124e6 <disabled_cb+0x12>
   1253a:	4a07      	ldr	r2, [pc, #28]	; (12558 <disabled_cb+0x84>)
   1253c:	4909      	ldr	r1, [pc, #36]	; (12564 <disabled_cb+0x90>)
   1253e:	4808      	ldr	r0, [pc, #32]	; (12560 <disabled_cb+0x8c>)
   12540:	f44f 63ea 	mov.w	r3, #1872	; 0x750
   12544:	f00a fd76 	bl	1d034 <printk>
   12548:	4040      	eors	r0, r0
   1254a:	f380 8811 	msr	BASEPRI, r0
   1254e:	f04f 0003 	mov.w	r0, #3
   12552:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   12554:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   12556:	e7c6      	b.n	124e6 <disabled_cb+0x12>
   12558:	0002347c 	.word	0x0002347c
   1255c:	000234e4 	.word	0x000234e4
   12560:	000230b4 	.word	0x000230b4
   12564:	000234f8 	.word	0x000234f8

00012568 <ticker_cb>:
{
   12568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1256c:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   1256e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12572:	4295      	cmp	r5, r2
{
   12574:	b08a      	sub	sp, #40	; 0x28
   12576:	461c      	mov	r4, r3
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   12578:	d017      	beq.n	125aa <ticker_cb+0x42>
	return ++hdr->ref;
   1257a:	7c1b      	ldrb	r3, [r3, #16]
   1257c:	3301      	adds	r3, #1
   1257e:	b2db      	uxtb	r3, r3
   12580:	4680      	mov	r8, r0
   12582:	460f      	mov	r7, r1
   12584:	7423      	strb	r3, [r4, #16]
		LL_ASSERT(ref);
   12586:	2b00      	cmp	r3, #0
   12588:	d061      	beq.n	1264e <ticker_cb+0xe6>
		p.ticks_at_expire = ticks_at_expire;
   1258a:	4e38      	ldr	r6, [pc, #224]	; (1266c <ticker_cb+0x104>)
		mfy.param = &p;
   1258c:	4b38      	ldr	r3, [pc, #224]	; (12670 <ticker_cb+0x108>)
		p.ticks_at_expire = ticks_at_expire;
   1258e:	f8c6 8000 	str.w	r8, [r6]
	lll = &adv->lll;
   12592:	f104 021c 	add.w	r2, r4, #28
		p.param = lll;
   12596:	60f2      	str	r2, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   12598:	2200      	movs	r2, #0
   1259a:	4611      	mov	r1, r2
   1259c:	2001      	movs	r0, #1
		p.remainder = remainder;
   1259e:	6077      	str	r7, [r6, #4]
		p.lazy = lazy;
   125a0:	8135      	strh	r5, [r6, #8]
		mfy.param = &p;
   125a2:	609e      	str	r6, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   125a4:	f7fb ffdc 	bl	e560 <mayfly_enqueue>
		LL_ASSERT(!ret);
   125a8:	b938      	cbnz	r0, 125ba <ticker_cb+0x52>
	if (!lll->is_hdcd)
   125aa:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   125ae:	f010 0501 	ands.w	r5, r0, #1
   125b2:	d014      	beq.n	125de <ticker_cb+0x76>
}
   125b4:	b00a      	add	sp, #40	; 0x28
   125b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   125ba:	4a2e      	ldr	r2, [pc, #184]	; (12674 <ticker_cb+0x10c>)
   125bc:	492e      	ldr	r1, [pc, #184]	; (12678 <ticker_cb+0x110>)
   125be:	482f      	ldr	r0, [pc, #188]	; (1267c <ticker_cb+0x114>)
   125c0:	f240 63cc 	movw	r3, #1740	; 0x6cc
   125c4:	f00a fd36 	bl	1d034 <printk>
   125c8:	4040      	eors	r0, r0
   125ca:	f380 8811 	msr	BASEPRI, r0
   125ce:	f04f 0003 	mov.w	r0, #3
   125d2:	df02      	svc	2
	if (!lll->is_hdcd)
   125d4:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   125d8:	f010 0501 	ands.w	r5, r0, #1
   125dc:	d1ea      	bne.n	125b4 <ticker_cb+0x4c>
		lll_rand_isr_get(&random_delay, sizeof(random_delay));
   125de:	2104      	movs	r1, #4
   125e0:	a809      	add	r0, sp, #36	; 0x24
   125e2:	f005 f89b 	bl	1771c <lll_rand_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
   125e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   125e8:	4a25      	ldr	r2, [pc, #148]	; (12680 <ticker_cb+0x118>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   125ea:	9406      	str	r4, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   125ec:	fba2 1203 	umull	r1, r2, r2, r3
   125f0:	1a99      	subs	r1, r3, r2
   125f2:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   125f6:	0a12      	lsrs	r2, r2, #8
   125f8:	f240 1147 	movw	r1, #327	; 0x147
   125fc:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   12600:	4a20      	ldr	r2, [pc, #128]	; (12684 <ticker_cb+0x11c>)
   12602:	4921      	ldr	r1, [pc, #132]	; (12688 <ticker_cb+0x120>)
   12604:	1aa2      	subs	r2, r4, r2
   12606:	0892      	lsrs	r2, r2, #2
   12608:	fba1 1202 	umull	r1, r2, r1, r2
   1260c:	0892      	lsrs	r2, r2, #2
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1260e:	491f      	ldr	r1, [pc, #124]	; (1268c <ticker_cb+0x124>)
				    (TICKER_ID_ADV_BASE +
   12610:	3202      	adds	r2, #2
		random_delay += 1;
   12612:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   12614:	e9cd 5104 	strd	r5, r1, [sp, #16]
   12618:	e9cd 5502 	strd	r5, r5, [sp, #8]
   1261c:	e9cd 5500 	strd	r5, r5, [sp]
   12620:	b2d2      	uxtb	r2, r2
   12622:	2101      	movs	r1, #1
   12624:	4628      	mov	r0, r5
		random_delay += 1;
   12626:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   12628:	f7fd f94c 	bl	f8c4 <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1262c:	f030 0302 	bics.w	r3, r0, #2
   12630:	d0c0      	beq.n	125b4 <ticker_cb+0x4c>
   12632:	4a10      	ldr	r2, [pc, #64]	; (12674 <ticker_cb+0x10c>)
   12634:	4916      	ldr	r1, [pc, #88]	; (12690 <ticker_cb+0x128>)
   12636:	4811      	ldr	r0, [pc, #68]	; (1267c <ticker_cb+0x114>)
   12638:	f240 63e2 	movw	r3, #1762	; 0x6e2
   1263c:	f00a fcfa 	bl	1d034 <printk>
   12640:	4040      	eors	r0, r0
   12642:	f380 8811 	msr	BASEPRI, r0
   12646:	f04f 0003 	mov.w	r0, #3
   1264a:	df02      	svc	2
}
   1264c:	e7b2      	b.n	125b4 <ticker_cb+0x4c>
		LL_ASSERT(ref);
   1264e:	4a09      	ldr	r2, [pc, #36]	; (12674 <ticker_cb+0x10c>)
   12650:	4910      	ldr	r1, [pc, #64]	; (12694 <ticker_cb+0x12c>)
   12652:	480a      	ldr	r0, [pc, #40]	; (1267c <ticker_cb+0x114>)
   12654:	f44f 63d8 	mov.w	r3, #1728	; 0x6c0
   12658:	f00a fcec 	bl	1d034 <printk>
   1265c:	4040      	eors	r0, r0
   1265e:	f380 8811 	msr	BASEPRI, r0
   12662:	f04f 0003 	mov.w	r0, #3
   12666:	df02      	svc	2
   12668:	e78f      	b.n	1258a <ticker_cb+0x22>
   1266a:	bf00      	nop
   1266c:	20002394 	.word	0x20002394
   12670:	20000494 	.word	0x20000494
   12674:	0002347c 	.word	0x0002347c
   12678:	00023448 	.word	0x00023448
   1267c:	000230b4 	.word	0x000230b4
   12680:	90d4f121 	.word	0x90d4f121
   12684:	20002334 	.word	0x20002334
   12688:	30c30c31 	.word	0x30c30c31
   1268c:	00012755 	.word	0x00012755
   12690:	000234c8 	.word	0x000234c8
   12694:	00023510 	.word	0x00023510

00012698 <ticker_op_stop_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   12698:	2800      	cmp	r0, #0
   1269a:	d13d      	bne.n	12718 <ticker_op_stop_cb+0x80>
{
   1269c:	b538      	push	{r3, r4, r5, lr}
   1269e:	460c      	mov	r4, r1
	mfy.param = &adv->lll;
   126a0:	4d25      	ldr	r5, [pc, #148]	; (12738 <ticker_op_stop_cb+0xa0>)
	return hdr->ref;
   126a2:	7c09      	ldrb	r1, [r1, #16]
   126a4:	f104 031c 	add.w	r3, r4, #28
   126a8:	60ab      	str	r3, [r5, #8]
	if (ull_ref_get(hdr)) {
   126aa:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   126ae:	b1e1      	cbz	r1, 126ea <ticker_op_stop_cb+0x52>
		LL_ASSERT(!hdr->disabled_cb);
   126b0:	6962      	ldr	r2, [r4, #20]
   126b2:	b16a      	cbz	r2, 126d0 <ticker_op_stop_cb+0x38>
   126b4:	4a21      	ldr	r2, [pc, #132]	; (1273c <ticker_op_stop_cb+0xa4>)
   126b6:	4922      	ldr	r1, [pc, #136]	; (12740 <ticker_op_stop_cb+0xa8>)
   126b8:	4822      	ldr	r0, [pc, #136]	; (12744 <ticker_op_stop_cb+0xac>)
   126ba:	f240 7333 	movw	r3, #1843	; 0x733
   126be:	f00a fcb9 	bl	1d034 <printk>
   126c2:	4040      	eors	r0, r0
   126c4:	f380 8811 	msr	BASEPRI, r0
   126c8:	f04f 0003 	mov.w	r0, #3
   126cc:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   126ce:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   126d0:	491d      	ldr	r1, [pc, #116]	; (12748 <ticker_op_stop_cb+0xb0>)
		mfy.fp = lll_disable;
   126d2:	481e      	ldr	r0, [pc, #120]	; (1274c <ticker_op_stop_cb+0xb4>)
		hdr->disabled_param = mfy.param;
   126d4:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   126d6:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   126d8:	6161      	str	r1, [r4, #20]
		mfy.fp = lll_disable;
   126da:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   126dc:	4b16      	ldr	r3, [pc, #88]	; (12738 <ticker_op_stop_cb+0xa0>)
   126de:	4611      	mov	r1, r2
   126e0:	2002      	movs	r0, #2
   126e2:	f7fb ff3d 	bl	e560 <mayfly_enqueue>
		LL_ASSERT(!ret);
   126e6:	b9c0      	cbnz	r0, 1271a <ticker_op_stop_cb+0x82>
}
   126e8:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = disabled_cb;
   126ea:	4817      	ldr	r0, [pc, #92]	; (12748 <ticker_op_stop_cb+0xb0>)
   126ec:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   126ee:	462b      	mov	r3, r5
   126f0:	2101      	movs	r1, #1
   126f2:	2002      	movs	r0, #2
   126f4:	f7fb ff34 	bl	e560 <mayfly_enqueue>
		LL_ASSERT(!ret);
   126f8:	2800      	cmp	r0, #0
   126fa:	d0f5      	beq.n	126e8 <ticker_op_stop_cb+0x50>
   126fc:	4a0f      	ldr	r2, [pc, #60]	; (1273c <ticker_op_stop_cb+0xa4>)
   126fe:	4914      	ldr	r1, [pc, #80]	; (12750 <ticker_op_stop_cb+0xb8>)
   12700:	4810      	ldr	r0, [pc, #64]	; (12744 <ticker_op_stop_cb+0xac>)
   12702:	f240 733f 	movw	r3, #1855	; 0x73f
   12706:	f00a fc95 	bl	1d034 <printk>
   1270a:	4040      	eors	r0, r0
   1270c:	f380 8811 	msr	BASEPRI, r0
   12710:	f04f 0003 	mov.w	r0, #3
   12714:	df02      	svc	2
}
   12716:	bd38      	pop	{r3, r4, r5, pc}
   12718:	4770      	bx	lr
		LL_ASSERT(!ret);
   1271a:	4a08      	ldr	r2, [pc, #32]	; (1273c <ticker_op_stop_cb+0xa4>)
   1271c:	490c      	ldr	r1, [pc, #48]	; (12750 <ticker_op_stop_cb+0xb8>)
   1271e:	4809      	ldr	r0, [pc, #36]	; (12744 <ticker_op_stop_cb+0xac>)
   12720:	f240 733a 	movw	r3, #1850	; 0x73a
   12724:	f00a fc86 	bl	1d034 <printk>
   12728:	4040      	eors	r0, r0
   1272a:	f380 8811 	msr	BASEPRI, r0
   1272e:	f04f 0003 	mov.w	r0, #3
   12732:	df02      	svc	2
}
   12734:	bd38      	pop	{r3, r4, r5, pc}
   12736:	bf00      	nop
   12738:	200004a4 	.word	0x200004a4
   1273c:	0002347c 	.word	0x0002347c
   12740:	00023514 	.word	0x00023514
   12744:	000230b4 	.word	0x000230b4
   12748:	000124d5 	.word	0x000124d5
   1274c:	000177ad 	.word	0x000177ad
   12750:	00023448 	.word	0x00023448

00012754 <ticker_op_update_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   12754:	b900      	cbnz	r0, 12758 <ticker_op_update_cb+0x4>
   12756:	4770      	bx	lr
{
   12758:	b510      	push	{r4, lr}
   1275a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1275c:	f7ff fc88 	bl	12070 <ull_disable_mark_get>
   12760:	4284      	cmp	r4, r0
   12762:	d00c      	beq.n	1277e <ticker_op_update_cb+0x2a>
   12764:	4a06      	ldr	r2, [pc, #24]	; (12780 <ticker_op_update_cb+0x2c>)
   12766:	4907      	ldr	r1, [pc, #28]	; (12784 <ticker_op_update_cb+0x30>)
   12768:	4807      	ldr	r0, [pc, #28]	; (12788 <ticker_op_update_cb+0x34>)
   1276a:	f240 7303 	movw	r3, #1795	; 0x703
   1276e:	f00a fc61 	bl	1d034 <printk>
   12772:	4040      	eors	r0, r0
   12774:	f380 8811 	msr	BASEPRI, r0
   12778:	f04f 0003 	mov.w	r0, #3
   1277c:	df02      	svc	2
}
   1277e:	bd10      	pop	{r4, pc}
   12780:	0002347c 	.word	0x0002347c
   12784:	00023528 	.word	0x00023528
   12788:	000230b4 	.word	0x000230b4

0001278c <init_set.constprop.0>:
	pdu->tx_addr = 0;
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
   1278c:	b500      	push	{lr}
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   1278e:	4b13      	ldr	r3, [pc, #76]	; (127dc <init_set.constprop.0+0x50>)
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   12790:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   12792:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   12796:	f893 c04a 	ldrb.w	ip, [r3, #74]	; 0x4a
   1279a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   1279e:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
   127a2:	f022 0202 	bic.w	r2, r2, #2
   127a6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   127a8:	f042 020e 	orr.w	r2, r2, #14
   127ac:	849a      	strh	r2, [r3, #36]	; 0x24
	pdu->len = BDADDR_SIZE;
   127ae:	2006      	movs	r0, #6
	pdu->type = pdu_type;
   127b0:	2200      	movs	r2, #0
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   127b2:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   127b6:	f36f 0c42 	bfc	ip, #1, #2
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   127ba:	f8a3 e048 	strh.w	lr, [r3, #72]	; 0x48
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   127be:	f883 c04a 	strb.w	ip, [r3, #74]	; 0x4a
	pdu->len = BDADDR_SIZE;
   127c2:	7048      	strb	r0, [r1, #1]
	pdu->type = pdu_type;
   127c4:	700a      	strb	r2, [r1, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   127c6:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
   127ca:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   127ce:	2204      	movs	r2, #4
   127d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
   127d2:	7058      	strb	r0, [r3, #1]
	pdu->type = pdu_type;
   127d4:	701a      	strb	r2, [r3, #0]
	adv->lll.filter_policy = BT_LE_ADV_FP_NO_WHITELIST;

	init_pdu(lll_adv_data_peek(&ll_adv[0].lll), PDU_ADV_TYPE_ADV_IND);
	init_pdu(lll_adv_scan_rsp_peek(&ll_adv[0].lll), PDU_ADV_TYPE_SCAN_RSP);
}
   127d6:	f85d fb04 	ldr.w	pc, [sp], #4
   127da:	bf00      	nop
   127dc:	20002334 	.word	0x20002334

000127e0 <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
   127e0:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   127e2:	4c1b      	ldr	r4, [pc, #108]	; (12850 <conn_release.constprop.0+0x70>)
   127e4:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
   127e6:	6dab      	ldr	r3, [r5, #88]	; 0x58
   127e8:	b163      	cbz	r3, 12804 <conn_release.constprop.0+0x24>
   127ea:	4a1a      	ldr	r2, [pc, #104]	; (12854 <conn_release.constprop.0+0x74>)
   127ec:	491a      	ldr	r1, [pc, #104]	; (12858 <conn_release.constprop.0+0x78>)
   127ee:	481b      	ldr	r0, [pc, #108]	; (1285c <conn_release.constprop.0+0x7c>)
   127f0:	f240 737a 	movw	r3, #1914	; 0x77a
   127f4:	f00a fc1e 	bl	1d034 <printk>
   127f8:	4040      	eors	r0, r0
   127fa:	f380 8811 	msr	BASEPRI, r0
   127fe:	f04f 0003 	mov.w	r0, #3
   12802:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   12804:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   12808:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1280c:	f7fb fe26 	bl	e45c <memq_deinit>
	LL_ASSERT(link);
   12810:	4606      	mov	r6, r0
   12812:	b170      	cbz	r0, 12832 <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
   12814:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   12816:	65ae      	str	r6, [r5, #88]	; 0x58
	ll_conn_release(lll->hdr.parent);
   12818:	f001 f80c 	bl	13834 <ll_conn_release>
	adv->lll.conn = NULL;
   1281c:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
   1281e:	6c60      	ldr	r0, [r4, #68]	; 0x44
	adv->lll.conn = NULL;
   12820:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
   12822:	f7ff fb67 	bl	11ef4 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   12826:	6c20      	ldr	r0, [r4, #64]	; 0x40
	adv->node_rx_cc_free = NULL;
   12828:	6465      	str	r5, [r4, #68]	; 0x44
	ll_rx_link_release(adv->link_cc_free);
   1282a:	f7ff fb57 	bl	11edc <ll_rx_link_release>
	adv->link_cc_free = NULL;
   1282e:	6425      	str	r5, [r4, #64]	; 0x40
}
   12830:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   12832:	4a08      	ldr	r2, [pc, #32]	; (12854 <conn_release.constprop.0+0x74>)
   12834:	490a      	ldr	r1, [pc, #40]	; (12860 <conn_release.constprop.0+0x80>)
   12836:	4809      	ldr	r0, [pc, #36]	; (1285c <conn_release.constprop.0+0x7c>)
   12838:	f240 737c 	movw	r3, #1916	; 0x77c
   1283c:	f00a fbfa 	bl	1d034 <printk>
   12840:	4040      	eors	r0, r0
   12842:	f380 8811 	msr	BASEPRI, r0
   12846:	f04f 0003 	mov.w	r0, #3
   1284a:	df02      	svc	2
   1284c:	e7e2      	b.n	12814 <conn_release.constprop.0+0x34>
   1284e:	bf00      	nop
   12850:	20002334 	.word	0x20002334
   12854:	0002347c 	.word	0x0002347c
   12858:	00023558 	.word	0x00023558
   1285c:	000230b4 	.word	0x000230b4
   12860:	000235e0 	.word	0x000235e0

00012864 <disable.part.0>:
static inline uint8_t disable(uint8_t handle)
   12864:	b530      	push	{r4, r5, lr}
	mark = ull_disable_mark(adv);
   12866:	4c4a      	ldr	r4, [pc, #296]	; (12990 <disable.part.0+0x12c>)
static inline uint8_t disable(uint8_t handle)
   12868:	b085      	sub	sp, #20
	mark = ull_disable_mark(adv);
   1286a:	4620      	mov	r0, r4
   1286c:	f7ff fbe8 	bl	12040 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   12870:	4284      	cmp	r4, r0
   12872:	d00c      	beq.n	1288e <disable.part.0+0x2a>
   12874:	4a47      	ldr	r2, [pc, #284]	; (12994 <disable.part.0+0x130>)
   12876:	4948      	ldr	r1, [pc, #288]	; (12998 <disable.part.0+0x134>)
   12878:	4848      	ldr	r0, [pc, #288]	; (1299c <disable.part.0+0x138>)
   1287a:	f240 73ce 	movw	r3, #1998	; 0x7ce
   1287e:	f00a fbd9 	bl	1d034 <printk>
   12882:	4040      	eors	r0, r0
   12884:	f380 8811 	msr	BASEPRI, r0
   12888:	f04f 0003 	mov.w	r0, #3
   1288c:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   1288e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   12892:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   12894:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   12896:	d50d      	bpl.n	128b4 <disable.part.0+0x50>
		ret_cb = TICKER_STATUS_BUSY;
   12898:	2102      	movs	r1, #2
   1289a:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1289c:	4b40      	ldr	r3, [pc, #256]	; (129a0 <disable.part.0+0x13c>)
   1289e:	9500      	str	r5, [sp, #0]
   128a0:	2103      	movs	r1, #3
   128a2:	2201      	movs	r2, #1
   128a4:	2000      	movs	r0, #0
   128a6:	f7fd f825 	bl	f8f4 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   128aa:	4629      	mov	r1, r5
   128ac:	f7ff fba0 	bl	11ff0 <ull_ticker_status_take>
		if (ret) {
   128b0:	2800      	cmp	r0, #0
   128b2:	d157      	bne.n	12964 <disable.part.0+0x100>
	ret_cb = TICKER_STATUS_BUSY;
   128b4:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   128b6:	2103      	movs	r1, #3
   128b8:	4b39      	ldr	r3, [pc, #228]	; (129a0 <disable.part.0+0x13c>)
   128ba:	9500      	str	r5, [sp, #0]
   128bc:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   128be:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   128c0:	f7fd f818 	bl	f8f4 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   128c4:	4629      	mov	r1, r5
   128c6:	f7ff fb93 	bl	11ff0 <ull_ticker_status_take>
	if (ret) {
   128ca:	2800      	cmp	r0, #0
   128cc:	d135      	bne.n	1293a <disable.part.0+0xd6>
	ret = ull_disable(&adv->lll);
   128ce:	4835      	ldr	r0, [pc, #212]	; (129a4 <disable.part.0+0x140>)
   128d0:	f7ff fbf2 	bl	120b8 <ull_disable>
	LL_ASSERT(!ret);
   128d4:	b9f0      	cbnz	r0, 12914 <disable.part.0+0xb0>
	mark = ull_disable_unmark(adv);
   128d6:	482e      	ldr	r0, [pc, #184]	; (12990 <disable.part.0+0x12c>)
   128d8:	f7ff fbbe 	bl	12058 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   128dc:	4284      	cmp	r4, r0
   128de:	d00c      	beq.n	128fa <disable.part.0+0x96>
   128e0:	4a2c      	ldr	r2, [pc, #176]	; (12994 <disable.part.0+0x130>)
   128e2:	492d      	ldr	r1, [pc, #180]	; (12998 <disable.part.0+0x134>)
   128e4:	482d      	ldr	r0, [pc, #180]	; (1299c <disable.part.0+0x138>)
   128e6:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
   128ea:	f00a fba3 	bl	1d034 <printk>
   128ee:	4040      	eors	r0, r0
   128f0:	f380 8811 	msr	BASEPRI, r0
   128f4:	f04f 0003 	mov.w	r0, #3
   128f8:	df02      	svc	2
	if (adv->lll.conn) {
   128fa:	6a23      	ldr	r3, [r4, #32]
   128fc:	b10b      	cbz	r3, 12902 <disable.part.0+0x9e>
		conn_release(adv);
   128fe:	f7ff ff6f 	bl	127e0 <conn_release.constprop.0>
	adv->is_enabled = 0U;
   12902:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
	return 0;
   12906:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
   12908:	f36f 0300 	bfc	r3, #0, #1
   1290c:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
   12910:	b005      	add	sp, #20
   12912:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   12914:	4a1f      	ldr	r2, [pc, #124]	; (12994 <disable.part.0+0x130>)
   12916:	4924      	ldr	r1, [pc, #144]	; (129a8 <disable.part.0+0x144>)
   12918:	4820      	ldr	r0, [pc, #128]	; (1299c <disable.part.0+0x138>)
   1291a:	f240 73ed 	movw	r3, #2029	; 0x7ed
   1291e:	f00a fb89 	bl	1d034 <printk>
   12922:	4040      	eors	r0, r0
   12924:	f380 8811 	msr	BASEPRI, r0
   12928:	f04f 0003 	mov.w	r0, #3
   1292c:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   1292e:	4818      	ldr	r0, [pc, #96]	; (12990 <disable.part.0+0x12c>)
   12930:	f7ff fb92 	bl	12058 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   12934:	4284      	cmp	r4, r0
   12936:	d1d3      	bne.n	128e0 <disable.part.0+0x7c>
   12938:	e7df      	b.n	128fa <disable.part.0+0x96>
		mark = ull_disable_unmark(adv);
   1293a:	4815      	ldr	r0, [pc, #84]	; (12990 <disable.part.0+0x12c>)
   1293c:	f7ff fb8c 	bl	12058 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   12940:	4284      	cmp	r4, r0
   12942:	d021      	beq.n	12988 <disable.part.0+0x124>
   12944:	4a13      	ldr	r2, [pc, #76]	; (12994 <disable.part.0+0x130>)
   12946:	4914      	ldr	r1, [pc, #80]	; (12998 <disable.part.0+0x134>)
   12948:	4814      	ldr	r0, [pc, #80]	; (1299c <disable.part.0+0x138>)
   1294a:	f240 73e7 	movw	r3, #2023	; 0x7e7
   1294e:	f00a fb71 	bl	1d034 <printk>
   12952:	4040      	eors	r0, r0
   12954:	f380 8811 	msr	BASEPRI, r0
   12958:	f04f 0003 	mov.w	r0, #3
   1295c:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   1295e:	200c      	movs	r0, #12
}
   12960:	b005      	add	sp, #20
   12962:	bd30      	pop	{r4, r5, pc}
			mark = ull_disable_unmark(adv);
   12964:	480a      	ldr	r0, [pc, #40]	; (12990 <disable.part.0+0x12c>)
   12966:	f7ff fb77 	bl	12058 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   1296a:	4284      	cmp	r4, r0
   1296c:	d00c      	beq.n	12988 <disable.part.0+0x124>
   1296e:	4a09      	ldr	r2, [pc, #36]	; (12994 <disable.part.0+0x130>)
   12970:	4909      	ldr	r1, [pc, #36]	; (12998 <disable.part.0+0x134>)
   12972:	480a      	ldr	r0, [pc, #40]	; (1299c <disable.part.0+0x138>)
   12974:	f240 73d9 	movw	r3, #2009	; 0x7d9
   12978:	f00a fb5c 	bl	1d034 <printk>
   1297c:	4040      	eors	r0, r0
   1297e:	f380 8811 	msr	BASEPRI, r0
   12982:	f04f 0003 	mov.w	r0, #3
   12986:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
   12988:	200c      	movs	r0, #12
}
   1298a:	b005      	add	sp, #20
   1298c:	bd30      	pop	{r4, r5, pc}
   1298e:	bf00      	nop
   12990:	20002334 	.word	0x20002334
   12994:	0002347c 	.word	0x0002347c
   12998:	0002356c 	.word	0x0002356c
   1299c:	000230b4 	.word	0x000230b4
   129a0:	000111c1 	.word	0x000111c1
   129a4:	20002350 	.word	0x20002350
   129a8:	00023448 	.word	0x00023448

000129ac <ll_adv_params_set>:
{
   129ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!adv || adv->is_enabled) {
   129b0:	4c4d      	ldr	r4, [pc, #308]	; (12ae8 <ll_adv_params_set+0x13c>)
{
   129b2:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   129b4:	4b4d      	ldr	r3, [pc, #308]	; (12aec <ll_adv_params_set+0x140>)
	if (!adv || adv->is_enabled) {
   129b6:	f894 604a 	ldrb.w	r6, [r4, #74]	; 0x4a
{
   129ba:	4680      	mov	r8, r0
   129bc:	468e      	mov	lr, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   129be:	e893 0003 	ldmia.w	r3, {r0, r1}
{
   129c2:	b082      	sub	sp, #8
	if (!adv || adv->is_enabled) {
   129c4:	f016 0601 	ands.w	r6, r6, #1
{
   129c8:	4615      	mov	r5, r2
   129ca:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   129ce:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   129d2:	9000      	str	r0, [sp, #0]
   129d4:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   129d8:	d172      	bne.n	12ac0 <ll_adv_params_set+0x114>
	adv->lll.chan_map = chan_map;
   129da:	f00c 0c07 	and.w	ip, ip, #7
   129de:	f002 0203 	and.w	r2, r2, #3
   129e2:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   129e6:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   129ea:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
		adv->interval = 0;
   129ee:	f1be 0f01 	cmp.w	lr, #1
   129f2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   129f6:	bf08      	it	eq
   129f8:	f04f 0800 	moveq.w	r8, #0
   129fc:	f8a4 8048 	strh.w	r8, [r4, #72]	; 0x48
   12a00:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	adv->lll.chan_map = chan_map;
   12a04:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
	pdu->type = pdu_adv_type[adv_type];
   12a06:	ab02      	add	r3, sp, #8
   12a08:	449e      	add	lr, r3
	adv->lll.chan_map = chan_map;
   12a0a:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
   12a0e:	f022 0202 	bic.w	r2, r2, #2
	pdu->type = pdu_adv_type[adv_type];
   12a12:	f81e 3c08 	ldrb.w	r3, [lr, #-8]
	adv->lll.chan_map = chan_map;
   12a16:	ea4c 0c02 	orr.w	ip, ip, r2
	pdu->type = pdu_adv_type[adv_type];
   12a1a:	f898 2000 	ldrb.w	r2, [r8]
	adv->lll.chan_map = chan_map;
   12a1e:	f8a4 c024 	strh.w	ip, [r4, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   12a22:	f013 0f0e 	tst.w	r3, #14
	pdu->type = pdu_adv_type[adv_type];
   12a26:	f022 021f 	bic.w	r2, r2, #31
   12a2a:	f003 030f 	and.w	r3, r3, #15
   12a2e:	ea43 0302 	orr.w	r3, r3, r2
	adv->own_addr_type = own_addr_type;
   12a32:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   12a36:	bf0c      	ite	eq
   12a38:	2101      	moveq	r1, #1
   12a3a:	2100      	movne	r1, #0
	adv->own_addr_type = own_addr_type;
   12a3c:	f365 0242 	bfi	r2, r5, #1, #2
   12a40:	f361 1345 	bfi	r3, r1, #5, #1
   12a44:	f888 3000 	strb.w	r3, [r8]
   12a48:	f884 204a 	strb.w	r2, [r4, #74]	; 0x4a
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   12a4c:	b2d3      	uxtb	r3, r2
   12a4e:	0752      	lsls	r2, r2, #29
   12a50:	d509      	bpl.n	12a66 <ll_adv_params_set+0xba>
		adv->peer_addr_type = direct_addr_type;
   12a52:	f367 03c3 	bfi	r3, r7, #3, #1
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
   12a56:	9908      	ldr	r1, [sp, #32]
		adv->peer_addr_type = direct_addr_type;
   12a58:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
   12a5c:	2206      	movs	r2, #6
   12a5e:	f104 004b 	add.w	r0, r4, #75	; 0x4b
   12a62:	f00c fd39 	bl	1f4d8 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   12a66:	f898 3000 	ldrb.w	r3, [r8]
   12a6a:	f003 020f 	and.w	r2, r3, #15
   12a6e:	2a01      	cmp	r2, #1
		pdu->tx_addr = own_addr_type & 0x1;
   12a70:	f005 0101 	and.w	r1, r5, #1
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   12a74:	d029      	beq.n	12aca <ll_adv_params_set+0x11e>
	} else if (pdu->len == 0) {
   12a76:	f898 2001 	ldrb.w	r2, [r8, #1]
		pdu->tx_addr = own_addr_type & 0x1;
   12a7a:	f361 1386 	bfi	r3, r1, #6, #1
	} else if (pdu->len == 0) {
   12a7e:	b1ba      	cbz	r2, 12ab0 <ll_adv_params_set+0x104>
		pdu->rx_addr = 0;
   12a80:	f36f 13c7 	bfc	r3, #7, #1
   12a84:	f888 3000 	strb.w	r3, [r8]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   12a88:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   12a8c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   12a90:	01ad      	lsls	r5, r5, #6
   12a92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12a94:	f005 0540 	and.w	r5, r5, #64	; 0x40
		if (pdu->len == 0) {
   12a98:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   12a9a:	f045 0504 	orr.w	r5, r5, #4
   12a9e:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
   12aa0:	b912      	cbnz	r2, 12aa8 <ll_adv_params_set+0xfc>
			pdu->len = BDADDR_SIZE;
   12aa2:	2106      	movs	r1, #6
   12aa4:	7059      	strb	r1, [r3, #1]
	return 0;
   12aa6:	4616      	mov	r6, r2
}
   12aa8:	4630      	mov	r0, r6
   12aaa:	b002      	add	sp, #8
   12aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu->rx_addr = 0;
   12ab0:	f362 13c7 	bfi	r3, r2, #7, #1
   12ab4:	f888 3000 	strb.w	r3, [r8]
		pdu->len = BDADDR_SIZE;
   12ab8:	2306      	movs	r3, #6
   12aba:	f888 3001 	strb.w	r3, [r8, #1]
   12abe:	e7e3      	b.n	12a88 <ll_adv_params_set+0xdc>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12ac0:	260c      	movs	r6, #12
}
   12ac2:	4630      	mov	r0, r6
   12ac4:	b002      	add	sp, #8
   12ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   12aca:	f361 1386 	bfi	r3, r1, #6, #1
		pdu->rx_addr = direct_addr_type;
   12ace:	4640      	mov	r0, r8
   12ad0:	f367 13c7 	bfi	r3, r7, #7, #1
   12ad4:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   12ad8:	9908      	ldr	r1, [sp, #32]
   12ada:	2206      	movs	r2, #6
   12adc:	f00c fcfc 	bl	1f4d8 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   12ae0:	230c      	movs	r3, #12
   12ae2:	f888 3001 	strb.w	r3, [r8, #1]
   12ae6:	e7cf      	b.n	12a88 <ll_adv_params_set+0xdc>
   12ae8:	20002334 	.word	0x20002334
   12aec:	00022808 	.word	0x00022808

00012af0 <ll_adv_data_set>:
{
   12af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   12af4:	4e22      	ldr	r6, [pc, #136]	; (12b80 <ll_adv_data_set+0x90>)
   12af6:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
   12afa:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   12afe:	b082      	sub	sp, #8
   12b00:	6add      	ldr	r5, [r3, #44]	; 0x2c
	if (prev->type == PDU_ADV_TYPE_DIRECT_IND) {
   12b02:	782b      	ldrb	r3, [r5, #0]
   12b04:	f003 030f 	and.w	r3, r3, #15
   12b08:	2b01      	cmp	r3, #1
   12b0a:	d035      	beq.n	12b78 <ll_adv_data_set+0x88>
	if (len > PDU_AC_DATA_SIZE_MAX) {
   12b0c:	281f      	cmp	r0, #31
   12b0e:	4604      	mov	r4, r0
   12b10:	d82e      	bhi.n	12b70 <ll_adv_data_set+0x80>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   12b12:	460f      	mov	r7, r1
   12b14:	f106 0028 	add.w	r0, r6, #40	; 0x28
   12b18:	f10d 0107 	add.w	r1, sp, #7
   12b1c:	f005 f9a2 	bl	17e64 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
   12b20:	4629      	mov	r1, r5
   12b22:	4680      	mov	r8, r0
   12b24:	f811 2b02 	ldrb.w	r2, [r1], #2
   12b28:	f3c2 1040 	ubfx	r0, r2, #5, #1
	pdu->type = prev->type;
   12b2c:	f3c2 0303 	ubfx	r3, r2, #0, #4
   12b30:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
   12b34:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
   12b38:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
   12b3c:	f002 0280 	and.w	r2, r2, #128	; 0x80
   12b40:	4640      	mov	r0, r8
   12b42:	4313      	orrs	r3, r2
   12b44:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   12b48:	2206      	movs	r2, #6
   12b4a:	f00c fcc5 	bl	1f4d8 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   12b4e:	4622      	mov	r2, r4
   12b50:	4639      	mov	r1, r7
   12b52:	f108 0008 	add.w	r0, r8, #8
   12b56:	f00c fcbf 	bl	1f4d8 <memcpy>
	pdu->last = idx;
   12b5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	pdu->len = BDADDR_SIZE + len;
   12b5e:	3406      	adds	r4, #6
	return 0;
   12b60:	2000      	movs	r0, #0
	pdu->len = BDADDR_SIZE + len;
   12b62:	f888 4001 	strb.w	r4, [r8, #1]
   12b66:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
}
   12b6a:	b002      	add	sp, #8
   12b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   12b70:	2012      	movs	r0, #18
}
   12b72:	b002      	add	sp, #8
   12b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
   12b78:	2000      	movs	r0, #0
}
   12b7a:	b002      	add	sp, #8
   12b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12b80:	20002334 	.word	0x20002334

00012b84 <ull_adv_init>:
{
   12b84:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   12b86:	4c06      	ldr	r4, [pc, #24]	; (12ba0 <ull_adv_init+0x1c>)
   12b88:	f104 0028 	add.w	r0, r4, #40	; 0x28
   12b8c:	f005 f954 	bl	17e38 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   12b90:	f104 0034 	add.w	r0, r4, #52	; 0x34
   12b94:	f005 f950 	bl	17e38 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   12b98:	f7ff fdf8 	bl	1278c <init_set.constprop.0>
}
   12b9c:	2000      	movs	r0, #0
   12b9e:	bd10      	pop	{r4, pc}
   12ba0:	20002334 	.word	0x20002334

00012ba4 <ull_adv_reset>:
{
   12ba4:	b508      	push	{r3, lr}
	if (!adv || !adv->is_enabled) {
   12ba6:	4b04      	ldr	r3, [pc, #16]	; (12bb8 <ull_adv_reset+0x14>)
   12ba8:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
   12bac:	07db      	lsls	r3, r3, #31
   12bae:	d501      	bpl.n	12bb4 <ull_adv_reset+0x10>
   12bb0:	f7ff fe58 	bl	12864 <disable.part.0>
}
   12bb4:	2000      	movs	r0, #0
   12bb6:	bd08      	pop	{r3, pc}
   12bb8:	20002334 	.word	0x20002334

00012bbc <ull_adv_reset_finalize>:
{
   12bbc:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&lll->adv_data);
   12bbe:	4c0a      	ldr	r4, [pc, #40]	; (12be8 <ull_adv_reset_finalize+0x2c>)
   12bc0:	f104 0528 	add.w	r5, r4, #40	; 0x28
   12bc4:	4628      	mov	r0, r5
		lll_adv_data_reset(&lll->scan_rsp);
   12bc6:	3434      	adds	r4, #52	; 0x34
		lll_adv_data_reset(&lll->adv_data);
   12bc8:	f005 f946 	bl	17e58 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
   12bcc:	4620      	mov	r0, r4
   12bce:	f005 f943 	bl	17e58 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   12bd2:	4628      	mov	r0, r5
   12bd4:	f005 f930 	bl	17e38 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   12bd8:	4620      	mov	r0, r4
   12bda:	f005 f92d 	bl	17e38 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   12bde:	f7ff fdd5 	bl	1278c <init_set.constprop.0>
}
   12be2:	2000      	movs	r0, #0
   12be4:	bd38      	pop	{r3, r4, r5, pc}
   12be6:	bf00      	nop
   12be8:	20002334 	.word	0x20002334

00012bec <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   12bec:	4a04      	ldr	r2, [pc, #16]	; (12c00 <ull_adv_handle_get+0x14>)
   12bee:	4b05      	ldr	r3, [pc, #20]	; (12c04 <ull_adv_handle_get+0x18>)
   12bf0:	1a80      	subs	r0, r0, r2
   12bf2:	0880      	lsrs	r0, r0, #2
   12bf4:	fba3 3000 	umull	r3, r0, r3, r0
}
   12bf8:	f3c0 008f 	ubfx	r0, r0, #2, #16
   12bfc:	4770      	bx	lr
   12bfe:	bf00      	nop
   12c00:	20002334 	.word	0x20002334
   12c04:	30c30c31 	.word	0x30c30c31

00012c08 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   12c08:	4a04      	ldr	r2, [pc, #16]	; (12c1c <ull_adv_lll_handle_get+0x14>)
   12c0a:	6800      	ldr	r0, [r0, #0]
   12c0c:	4b04      	ldr	r3, [pc, #16]	; (12c20 <ull_adv_lll_handle_get+0x18>)
   12c0e:	1a80      	subs	r0, r0, r2
   12c10:	0880      	lsrs	r0, r0, #2
   12c12:	fba3 3000 	umull	r3, r0, r3, r0
}
   12c16:	f3c0 008f 	ubfx	r0, r0, #2, #16
   12c1a:	4770      	bx	lr
   12c1c:	20002334 	.word	0x20002334
   12c20:	30c30c31 	.word	0x30c30c31

00012c24 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   12c24:	b938      	cbnz	r0, 12c36 <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   12c26:	4805      	ldr	r0, [pc, #20]	; (12c3c <ull_adv_is_enabled_get+0x18>)
   12c28:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
	return &ll_adv[handle];
   12c2c:	f013 0f01 	tst.w	r3, #1
   12c30:	bf08      	it	eq
   12c32:	2000      	moveq	r0, #0
   12c34:	4770      	bx	lr
		return NULL;
   12c36:	2000      	movs	r0, #0
}
   12c38:	4770      	bx	lr
   12c3a:	bf00      	nop
   12c3c:	20002334 	.word	0x20002334

00012c40 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   12c40:	b928      	cbnz	r0, 12c4e <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   12c42:	4b04      	ldr	r3, [pc, #16]	; (12c54 <ull_adv_is_enabled+0x14>)
   12c44:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
   12c48:	f000 0001 	and.w	r0, r0, #1
   12c4c:	4770      	bx	lr
   12c4e:	2000      	movs	r0, #0
}
   12c50:	4770      	bx	lr
   12c52:	bf00      	nop
   12c54:	20002334 	.word	0x20002334

00012c58 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   12c58:	b950      	cbnz	r0, 12c70 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   12c5a:	4b06      	ldr	r3, [pc, #24]	; (12c74 <ull_adv_filter_pol_get+0x1c>)
   12c5c:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
   12c60:	f010 0001 	ands.w	r0, r0, #1
   12c64:	d005      	beq.n	12c72 <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   12c66:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   12c6a:	f000 0003 	and.w	r0, r0, #3
   12c6e:	4770      	bx	lr
		return 0;
   12c70:	2000      	movs	r0, #0
}
   12c72:	4770      	bx	lr
   12c74:	20002334 	.word	0x20002334

00012c78 <ull_scan_rsp_set>:
{
   12c78:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   12c7a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   12c7e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   12c82:	b083      	sub	sp, #12
   12c84:	6b9d      	ldr	r5, [r3, #56]	; 0x38
   12c86:	460e      	mov	r6, r1
   12c88:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   12c8a:	f10d 0107 	add.w	r1, sp, #7
   12c8e:	3034      	adds	r0, #52	; 0x34
   12c90:	4617      	mov	r7, r2
   12c92:	f005 f8e7 	bl	17e64 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   12c96:	4629      	mov	r1, r5
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   12c98:	2206      	movs	r2, #6
	pdu->tx_addr = prev->tx_addr;
   12c9a:	f811 3b02 	ldrb.w	r3, [r1], #2
   12c9e:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   12ca2:	019b      	lsls	r3, r3, #6
   12ca4:	f043 0304 	orr.w	r3, r3, #4
   12ca8:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   12caa:	1db3      	adds	r3, r6, #6
   12cac:	7043      	strb	r3, [r0, #1]
   12cae:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   12cb0:	3002      	adds	r0, #2
   12cb2:	f00c fc11 	bl	1f4d8 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   12cb6:	4632      	mov	r2, r6
   12cb8:	4639      	mov	r1, r7
   12cba:	f105 0008 	add.w	r0, r5, #8
   12cbe:	f00c fc0b 	bl	1f4d8 <memcpy>
	pdu->last = idx;
   12cc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12cc6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
   12cca:	2000      	movs	r0, #0
   12ccc:	b003      	add	sp, #12
   12cce:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012cd0 <ll_adv_scan_rsp_set>:
{
   12cd0:	4603      	mov	r3, r0
   12cd2:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
   12cd4:	4801      	ldr	r0, [pc, #4]	; (12cdc <ll_adv_scan_rsp_set+0xc>)
   12cd6:	4619      	mov	r1, r3
   12cd8:	f7ff bfce 	b.w	12c78 <ull_scan_rsp_set>
   12cdc:	20002334 	.word	0x20002334

00012ce0 <ull_adv_pdu_update_addrs>:
{
   12ce0:	b570      	push	{r4, r5, r6, lr}
   12ce2:	460c      	mov	r4, r1
   12ce4:	4605      	mov	r5, r0
	const uint8_t *rpa = ull_filter_adva_get(adv);
   12ce6:	f004 f89d 	bl	16e24 <ull_filter_adva_get>
	if (!rpa || IS_ENABLED(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)) {
   12cea:	4601      	mov	r1, r0
   12cec:	b300      	cbz	r0, 12d30 <ull_adv_pdu_update_addrs+0x50>
		pdu->tx_addr = 1;
   12cee:	7823      	ldrb	r3, [r4, #0]
   12cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12cf4:	7023      	strb	r3, [r4, #0]
	return pdu->adv_ind.addr;
   12cf6:	1ca6      	adds	r6, r4, #2
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   12cf8:	2206      	movs	r2, #6
   12cfa:	4630      	mov	r0, r6
   12cfc:	f00c fbec 	bl	1f4d8 <memcpy>
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   12d00:	7823      	ldrb	r3, [r4, #0]
   12d02:	f003 030f 	and.w	r3, r3, #15
   12d06:	2b01      	cmp	r3, #1
   12d08:	d001      	beq.n	12d0e <ull_adv_pdu_update_addrs+0x2e>
}
   12d0a:	4630      	mov	r0, r6
   12d0c:	bd70      	pop	{r4, r5, r6, pc}
	rx_addr = ull_filter_tgta_get(adv);
   12d0e:	4628      	mov	r0, r5
   12d10:	f004 f8b6 	bl	16e80 <ull_filter_tgta_get>
	if (rx_addr) {
   12d14:	4601      	mov	r1, r0
   12d16:	2800      	cmp	r0, #0
   12d18:	d0f7      	beq.n	12d0a <ull_adv_pdu_update_addrs+0x2a>
		pdu->rx_addr = 1;
   12d1a:	7823      	ldrb	r3, [r4, #0]
   12d1c:	4620      	mov	r0, r4
   12d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12d22:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(tgt_addr, rx_addr, BDADDR_SIZE);
   12d26:	2206      	movs	r2, #6
   12d28:	f00c fbd6 	bl	1f4d8 <memcpy>
}
   12d2c:	4630      	mov	r0, r6
   12d2e:	bd70      	pop	{r4, r5, r6, pc}
			own_addr = ll_addr_get(pdu->tx_addr, NULL);
   12d30:	7820      	ldrb	r0, [r4, #0]
   12d32:	f3c0 1080 	ubfx	r0, r0, #6, #1
   12d36:	f7fc fe21 	bl	f97c <ll_addr_get>
   12d3a:	4601      	mov	r1, r0
	if (rpa) {
   12d3c:	e7db      	b.n	12cf6 <ull_adv_pdu_update_addrs+0x16>
   12d3e:	bf00      	nop

00012d40 <init_reset>:
{
   12d40:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   12d42:	4b15      	ldr	r3, [pc, #84]	; (12d98 <init_reset+0x58>)
   12d44:	4815      	ldr	r0, [pc, #84]	; (12d9c <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   12d46:	4c16      	ldr	r4, [pc, #88]	; (12da0 <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
   12d48:	2201      	movs	r2, #1
   12d4a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   12d4e:	f7fb fafb 	bl	e348 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
   12d52:	4b14      	ldr	r3, [pc, #80]	; (12da4 <init_reset+0x64>)
   12d54:	2203      	movs	r2, #3
   12d56:	1d18      	adds	r0, r3, #4
   12d58:	2124      	movs	r1, #36	; 0x24
   12d5a:	f7fb faf5 	bl	e348 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   12d5e:	4b12      	ldr	r3, [pc, #72]	; (12da8 <init_reset+0x68>)
   12d60:	2204      	movs	r2, #4
   12d62:	1898      	adds	r0, r3, r2
   12d64:	212c      	movs	r1, #44	; 0x2c
   12d66:	f7fb faef 	bl	e348 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   12d6a:	4b10      	ldr	r3, [pc, #64]	; (12dac <init_reset+0x6c>)
   12d6c:	2207      	movs	r2, #7
   12d6e:	1d18      	adds	r0, r3, #4
   12d70:	2108      	movs	r1, #8
   12d72:	f7fb fae9 	bl	e348 <mem_init>
	default_phy_tx |= PHY_2M;
   12d76:	490e      	ldr	r1, [pc, #56]	; (12db0 <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
   12d78:	4a0e      	ldr	r2, [pc, #56]	; (12db4 <init_reset+0x74>)
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   12d7a:	480f      	ldr	r0, [pc, #60]	; (12db8 <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
   12d7c:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   12d7e:	f04f 0c1b 	mov.w	ip, #27
   12d82:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
   12d86:	700b      	strb	r3, [r1, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   12d88:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
   12d8c:	7013      	strb	r3, [r2, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   12d8e:	f8a0 c000 	strh.w	ip, [r0]
}
   12d92:	2000      	movs	r0, #0
   12d94:	bd10      	pop	{r4, pc}
   12d96:	bf00      	nop
   12d98:	200023a4 	.word	0x200023a4
   12d9c:	20001218 	.word	0x20001218
   12da0:	20002dac 	.word	0x20002dac
   12da4:	200023bc 	.word	0x200023bc
   12da8:	2000242c 	.word	0x2000242c
   12dac:	200024e0 	.word	0x200024e0
   12db0:	20003560 	.word	0x20003560
   12db4:	2000355f 	.word	0x2000355f
   12db8:	20002dae 	.word	0x20002dae

00012dbc <ctrl_tx_pause_enqueue>:
{
   12dbc:	b538      	push	{r3, r4, r5, lr}
   12dbe:	4604      	mov	r4, r0
		if (!conn->tx_ctrl) {
   12dc0:	e9d0 3071 	ldrd	r3, r0, [r0, #452]	; 0x1c4
{
   12dc4:	460d      	mov	r5, r1
	if (
   12dc6:	b11b      	cbz	r3, 12dd0 <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   12dc8:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   12dcc:	0789      	lsls	r1, r1, #30
   12dce:	d50c      	bpl.n	12dea <ctrl_tx_pause_enqueue+0x2e>
		if (!conn->tx_ctrl) {
   12dd0:	b340      	cbz	r0, 12e24 <ctrl_tx_pause_enqueue+0x68>
			LL_ASSERT(!pause);
   12dd2:	2a00      	cmp	r2, #0
   12dd4:	d130      	bne.n	12e38 <ctrl_tx_pause_enqueue+0x7c>
	tx->next = conn->tx_ctrl_last->next;
   12dd6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   12dda:	681a      	ldr	r2, [r3, #0]
   12ddc:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   12dde:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   12de0:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   12de2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   12de6:	b1d3      	cbz	r3, 12e1e <ctrl_tx_pause_enqueue+0x62>
}
   12de8:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   12dea:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   12dee:	07c9      	lsls	r1, r1, #31
   12df0:	d4ee      	bmi.n	12dd0 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   12df2:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   12df6:	428b      	cmp	r3, r1
   12df8:	d02c      	beq.n	12e54 <ctrl_tx_pause_enqueue+0x98>
		} else if (!conn->tx_ctrl) {
   12dfa:	2800      	cmp	r0, #0
   12dfc:	d036      	beq.n	12e6c <ctrl_tx_pause_enqueue+0xb0>
			LL_ASSERT(!pause);
   12dfe:	2a00      	cmp	r2, #0
   12e00:	d0e9      	beq.n	12dd6 <ctrl_tx_pause_enqueue+0x1a>
   12e02:	4a22      	ldr	r2, [pc, #136]	; (12e8c <ctrl_tx_pause_enqueue+0xd0>)
   12e04:	4922      	ldr	r1, [pc, #136]	; (12e90 <ctrl_tx_pause_enqueue+0xd4>)
   12e06:	4823      	ldr	r0, [pc, #140]	; (12e94 <ctrl_tx_pause_enqueue+0xd8>)
   12e08:	f640 0359 	movw	r3, #2137	; 0x859
   12e0c:	f00a f912 	bl	1d034 <printk>
   12e10:	4040      	eors	r0, r0
   12e12:	f380 8811 	msr	BASEPRI, r0
   12e16:	f04f 0003 	mov.w	r0, #3
   12e1a:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
   12e1c:	e7db      	b.n	12dd6 <ctrl_tx_pause_enqueue+0x1a>
		conn->tx_data_last = tx;
   12e1e:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
}
   12e22:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   12e24:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   12e26:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
			if (!pause) {
   12e2a:	2a00      	cmp	r2, #0
   12e2c:	d1db      	bne.n	12de6 <ctrl_tx_pause_enqueue+0x2a>
				conn->tx_ctrl_last = tx;
   12e2e:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
	if (!tx->next) {
   12e32:	2b00      	cmp	r3, #0
   12e34:	d1d8      	bne.n	12de8 <ctrl_tx_pause_enqueue+0x2c>
   12e36:	e7f2      	b.n	12e1e <ctrl_tx_pause_enqueue+0x62>
			LL_ASSERT(!pause);
   12e38:	4a14      	ldr	r2, [pc, #80]	; (12e8c <ctrl_tx_pause_enqueue+0xd0>)
   12e3a:	4915      	ldr	r1, [pc, #84]	; (12e90 <ctrl_tx_pause_enqueue+0xd4>)
   12e3c:	4815      	ldr	r0, [pc, #84]	; (12e94 <ctrl_tx_pause_enqueue+0xd8>)
   12e3e:	f640 036b 	movw	r3, #2155	; 0x86b
   12e42:	f00a f8f7 	bl	1d034 <printk>
   12e46:	4040      	eors	r0, r0
   12e48:	f380 8811 	msr	BASEPRI, r0
   12e4c:	f04f 0003 	mov.w	r0, #3
   12e50:	df02      	svc	2
   12e52:	e7c0      	b.n	12dd6 <ctrl_tx_pause_enqueue+0x1a>
			conn->tx_data = conn->tx_data->next;
   12e54:	6819      	ldr	r1, [r3, #0]
   12e56:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   12e5a:	2800      	cmp	r0, #0
   12e5c:	d1cf      	bne.n	12dfe <ctrl_tx_pause_enqueue+0x42>
			tx->next = conn->tx_head->next;
   12e5e:	6819      	ldr	r1, [r3, #0]
   12e60:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   12e62:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   12e64:	682b      	ldr	r3, [r5, #0]
			if (!pause) {
   12e66:	2a00      	cmp	r2, #0
   12e68:	d0e1      	beq.n	12e2e <ctrl_tx_pause_enqueue+0x72>
   12e6a:	e7bc      	b.n	12de6 <ctrl_tx_pause_enqueue+0x2a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   12e6c:	7919      	ldrb	r1, [r3, #4]
   12e6e:	f001 0103 	and.w	r1, r1, #3
   12e72:	2903      	cmp	r1, #3
   12e74:	d004      	beq.n	12e80 <ctrl_tx_pause_enqueue+0xc4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   12e76:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
			LL_ASSERT(!pause);
   12e7a:	2a00      	cmp	r2, #0
   12e7c:	d0ab      	beq.n	12dd6 <ctrl_tx_pause_enqueue+0x1a>
   12e7e:	e7c0      	b.n	12e02 <ctrl_tx_pause_enqueue+0x46>
	    ((pdu_data_tx->llctrl.opcode !=
   12e80:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   12e82:	2903      	cmp	r1, #3
   12e84:	d0eb      	beq.n	12e5e <ctrl_tx_pause_enqueue+0xa2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   12e86:	290a      	cmp	r1, #10
   12e88:	d1f5      	bne.n	12e76 <ctrl_tx_pause_enqueue+0xba>
   12e8a:	e7e8      	b.n	12e5e <ctrl_tx_pause_enqueue+0xa2>
   12e8c:	00023588 	.word	0x00023588
   12e90:	000235c8 	.word	0x000235c8
   12e94:	000230b4 	.word	0x000230b4

00012e98 <tx_lll_flush>:
{
   12e98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
   12e9c:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   12ea0:	4934      	ldr	r1, [pc, #208]	; (12f74 <tx_lll_flush+0xdc>)
{
   12ea2:	b083      	sub	sp, #12
   12ea4:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   12ea6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   12eaa:	4640      	mov	r0, r8
   12eac:	f7fb fab2 	bl	e414 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   12eb0:	f105 0648 	add.w	r6, r5, #72	; 0x48
	lll_conn_flush(handle, lll);
   12eb4:	4629      	mov	r1, r5
   12eb6:	f005 fc3b 	bl	18730 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   12eba:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   12ebc:	aa01      	add	r2, sp, #4
   12ebe:	4631      	mov	r1, r6
   12ec0:	f7fb fae8 	bl	e494 <memq_dequeue>
	while (link) {
   12ec4:	b328      	cbz	r0, 12f12 <tx_lll_flush+0x7a>
   12ec6:	4c2c      	ldr	r4, [pc, #176]	; (12f78 <tx_lll_flush+0xe0>)
		lll_tx->handle = 0xFFFF;
   12ec8:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   12ecc:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   12ed0:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   12ed2:	f894 c001 	ldrb.w	ip, [r4, #1]
   12ed6:	78a2      	ldrb	r2, [r4, #2]
	last = last + 1;
   12ed8:	1c4b      	adds	r3, r1, #1
   12eda:	b2db      	uxtb	r3, r3
		last = 0U;
   12edc:	459c      	cmp	ip, r3
   12ede:	bf08      	it	eq
   12ee0:	2300      	moveq	r3, #0
	if (last == first) {
   12ee2:	429a      	cmp	r2, r3
   12ee4:	d035      	beq.n	12f52 <tx_lll_flush+0xba>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   12ee6:	7822      	ldrb	r2, [r4, #0]
   12ee8:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   12eec:	eb19 0c02 	adds.w	ip, r9, r2
   12ef0:	d02f      	beq.n	12f52 <tx_lll_flush+0xba>
		lll_tx->node = tx;
   12ef2:	9901      	ldr	r1, [sp, #4]
		lll_tx->handle = 0xFFFF;
   12ef4:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   12ef8:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   12efa:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   12efe:	6002      	str	r2, [r0, #0]
		tx->next = link;
   12f00:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   12f02:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
	*last = idx; /* Commit: Update write index */
   12f04:	70e3      	strb	r3, [r4, #3]
   12f06:	aa01      	add	r2, sp, #4
   12f08:	4631      	mov	r1, r6
   12f0a:	f7fb fac3 	bl	e494 <memq_dequeue>
	while (link) {
   12f0e:	2800      	cmp	r0, #0
   12f10:	d1de      	bne.n	12ed0 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   12f12:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
	rx = (void *)&conn->llcp_terminate.node_rx;
   12f16:	f508 74a2 	add.w	r4, r8, #324	; 0x144
	LL_ASSERT(rx->hdr.link);
   12f1a:	b150      	cbz	r0, 12f32 <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   12f1c:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   12f1e:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   12f20:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
	ull_rx_put(link, rx);
   12f24:	f7ff f97a 	bl	1221c <ull_rx_put>
	ull_rx_sched();
   12f28:	f7ff f988 	bl	1223c <ull_rx_sched>
}
   12f2c:	b003      	add	sp, #12
   12f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   12f32:	4a12      	ldr	r2, [pc, #72]	; (12f7c <tx_lll_flush+0xe4>)
   12f34:	4912      	ldr	r1, [pc, #72]	; (12f80 <tx_lll_flush+0xe8>)
   12f36:	4813      	ldr	r0, [pc, #76]	; (12f84 <tx_lll_flush+0xec>)
   12f38:	f240 73c6 	movw	r3, #1990	; 0x7c6
   12f3c:	f00a f87a 	bl	1d034 <printk>
   12f40:	4040      	eors	r0, r0
   12f42:	f380 8811 	msr	BASEPRI, r0
   12f46:	f04f 0003 	mov.w	r0, #3
   12f4a:	df02      	svc	2
	link = rx->hdr.link;
   12f4c:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
   12f50:	e7e4      	b.n	12f1c <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   12f52:	4a0a      	ldr	r2, [pc, #40]	; (12f7c <tx_lll_flush+0xe4>)
   12f54:	490c      	ldr	r1, [pc, #48]	; (12f88 <tx_lll_flush+0xf0>)
   12f56:	480b      	ldr	r0, [pc, #44]	; (12f84 <tx_lll_flush+0xec>)
   12f58:	f240 73b2 	movw	r3, #1970	; 0x7b2
   12f5c:	f00a f86a 	bl	1d034 <printk>
   12f60:	4040      	eors	r0, r0
   12f62:	f380 8811 	msr	BASEPRI, r0
   12f66:	f04f 0003 	mov.w	r0, #3
   12f6a:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   12f6c:	2300      	movs	r3, #0
   12f6e:	801b      	strh	r3, [r3, #0]
   12f70:	deff      	udf	#255	; 0xff
   12f72:	bf00      	nop
   12f74:	20001218 	.word	0x20001218
   12f78:	200004b4 	.word	0x200004b4
   12f7c:	00023588 	.word	0x00023588
   12f80:	000235d8 	.word	0x000235d8
   12f84:	000230b4 	.word	0x000230b4
   12f88:	000235d0 	.word	0x000235d0

00012f8c <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   12f8c:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   12f90:	f012 0202 	ands.w	r2, r2, #2
   12f94:	d00a      	beq.n	12fac <ctrl_tx_sec_enqueue+0x20>
		if (!conn->tx_ctrl) {
   12f96:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
   12f9a:	b1d3      	cbz	r3, 12fd2 <ctrl_tx_sec_enqueue+0x46>
			tx->next = conn->tx_ctrl_last->next;
   12f9c:	f8d0 31cc 	ldr.w	r3, [r0, #460]	; 0x1cc
   12fa0:	681a      	ldr	r2, [r3, #0]
   12fa2:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   12fa4:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   12fa6:	680b      	ldr	r3, [r1, #0]
   12fa8:	b1d3      	cbz	r3, 12fe0 <ctrl_tx_sec_enqueue+0x54>
   12faa:	4770      	bx	lr
		if (conn->tx_head) {
   12fac:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   12fb0:	b1cb      	cbz	r3, 12fe6 <ctrl_tx_sec_enqueue+0x5a>
{
   12fb2:	b500      	push	{lr}
			if ((conn->llcp_req != conn->llcp_ack) &&
   12fb4:	f890 c0e5 	ldrb.w	ip, [r0, #229]	; 0xe5
   12fb8:	f890 e0e4 	ldrb.w	lr, [r0, #228]	; 0xe4
   12fbc:	45e6      	cmp	lr, ip
   12fbe:	d004      	beq.n	12fca <ctrl_tx_sec_enqueue+0x3e>
   12fc0:	f890 c0e6 	ldrb.w	ip, [r0, #230]	; 0xe6
   12fc4:	f1bc 0f03 	cmp.w	ip, #3
   12fc8:	d010      	beq.n	12fec <ctrl_tx_sec_enqueue+0x60>
}
   12fca:	f85d eb04 	ldr.w	lr, [sp], #4
		ctrl_tx_pause_enqueue(conn, tx, pause);
   12fce:	f7ff bef5 	b.w	12dbc <ctrl_tx_pause_enqueue>
			tx->next = conn->tx_head;
   12fd2:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   12fd6:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   12fd8:	f8c0 11c4 	str.w	r1, [r0, #452]	; 0x1c4
		if (!tx->next) {
   12fdc:	2b00      	cmp	r3, #0
   12fde:	d1e4      	bne.n	12faa <ctrl_tx_sec_enqueue+0x1e>
			conn->tx_data_last = tx;
   12fe0:	f8c0 11d4 	str.w	r1, [r0, #468]	; 0x1d4
   12fe4:	4770      	bx	lr
	bool pause = false;
   12fe6:	461a      	mov	r2, r3
		ctrl_tx_pause_enqueue(conn, tx, pause);
   12fe8:	f7ff bee8 	b.w	12dbc <ctrl_tx_pause_enqueue>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   12fec:	f893 c004 	ldrb.w	ip, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   12ff0:	f00c 0c03 	and.w	ip, ip, #3
   12ff4:	f1bc 0f03 	cmp.w	ip, #3
   12ff8:	d1e7      	bne.n	12fca <ctrl_tx_sec_enqueue+0x3e>
			    ((pdu_data_tx->llctrl.opcode ==
   12ffa:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   12ffc:	2a03      	cmp	r2, #3
   12ffe:	d005      	beq.n	1300c <ctrl_tx_sec_enqueue+0x80>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   13000:	f1a2 020a 	sub.w	r2, r2, #10
   13004:	fab2 f282 	clz	r2, r2
   13008:	0952      	lsrs	r2, r2, #5
   1300a:	e7de      	b.n	12fca <ctrl_tx_sec_enqueue+0x3e>
				pause = true;
   1300c:	2201      	movs	r2, #1
   1300e:	e7dc      	b.n	12fca <ctrl_tx_sec_enqueue+0x3e>

00013010 <ticker_op_stop_cb>:
{
   13010:	b510      	push	{r4, lr}
   13012:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   13014:	b9b0      	cbnz	r0, 13044 <ticker_op_stop_cb+0x34>
	mfy.param = param;
   13016:	4b12      	ldr	r3, [pc, #72]	; (13060 <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   13018:	2200      	movs	r2, #0
   1301a:	4611      	mov	r1, r2
   1301c:	2002      	movs	r0, #2
	mfy.param = param;
   1301e:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   13020:	f7fb fa9e 	bl	e560 <mayfly_enqueue>
	LL_ASSERT(!retval);
   13024:	b900      	cbnz	r0, 13028 <ticker_op_stop_cb+0x18>
}
   13026:	bd10      	pop	{r4, pc}
	LL_ASSERT(!retval);
   13028:	4a0e      	ldr	r2, [pc, #56]	; (13064 <ticker_op_stop_cb+0x54>)
   1302a:	490f      	ldr	r1, [pc, #60]	; (13068 <ticker_op_stop_cb+0x58>)
   1302c:	480f      	ldr	r0, [pc, #60]	; (1306c <ticker_op_stop_cb+0x5c>)
   1302e:	f240 7321 	movw	r3, #1825	; 0x721
   13032:	f009 ffff 	bl	1d034 <printk>
   13036:	4040      	eors	r0, r0
   13038:	f380 8811 	msr	BASEPRI, r0
   1303c:	f04f 0003 	mov.w	r0, #3
   13040:	df02      	svc	2
}
   13042:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   13044:	4a07      	ldr	r2, [pc, #28]	; (13064 <ticker_op_stop_cb+0x54>)
   13046:	490a      	ldr	r1, [pc, #40]	; (13070 <ticker_op_stop_cb+0x60>)
   13048:	4808      	ldr	r0, [pc, #32]	; (1306c <ticker_op_stop_cb+0x5c>)
   1304a:	f240 731a 	movw	r3, #1818	; 0x71a
   1304e:	f009 fff1 	bl	1d034 <printk>
   13052:	4040      	eors	r0, r0
   13054:	f380 8811 	msr	BASEPRI, r0
   13058:	f04f 0003 	mov.w	r0, #3
   1305c:	df02      	svc	2
   1305e:	e7da      	b.n	13016 <ticker_op_stop_cb+0x6>
   13060:	2000051c 	.word	0x2000051c
   13064:	00023588 	.word	0x00023588
   13068:	00023380 	.word	0x00023380
   1306c:	000230b4 	.word	0x000230b4
   13070:	000235e8 	.word	0x000235e8

00013074 <ticker_start_conn_op_cb>:
{
   13074:	b510      	push	{r4, lr}
   13076:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   13078:	b990      	cbnz	r0, 130a0 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   1307a:	4620      	mov	r0, r4
   1307c:	f7ff f80a 	bl	12094 <ull_update_unmark>
	LL_ASSERT(p == param);
   13080:	4284      	cmp	r4, r0
   13082:	d00c      	beq.n	1309e <ticker_start_conn_op_cb+0x2a>
   13084:	4a0d      	ldr	r2, [pc, #52]	; (130bc <ticker_start_conn_op_cb+0x48>)
   13086:	490e      	ldr	r1, [pc, #56]	; (130c0 <ticker_start_conn_op_cb+0x4c>)
   13088:	480e      	ldr	r0, [pc, #56]	; (130c4 <ticker_start_conn_op_cb+0x50>)
   1308a:	f240 7311 	movw	r3, #1809	; 0x711
   1308e:	f009 ffd1 	bl	1d034 <printk>
   13092:	4040      	eors	r0, r0
   13094:	f380 8811 	msr	BASEPRI, r0
   13098:	f04f 0003 	mov.w	r0, #3
   1309c:	df02      	svc	2
}
   1309e:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   130a0:	4a06      	ldr	r2, [pc, #24]	; (130bc <ticker_start_conn_op_cb+0x48>)
   130a2:	4909      	ldr	r1, [pc, #36]	; (130c8 <ticker_start_conn_op_cb+0x54>)
   130a4:	4807      	ldr	r0, [pc, #28]	; (130c4 <ticker_start_conn_op_cb+0x50>)
   130a6:	f240 730e 	movw	r3, #1806	; 0x70e
   130aa:	f009 ffc3 	bl	1d034 <printk>
   130ae:	4040      	eors	r0, r0
   130b0:	f380 8811 	msr	BASEPRI, r0
   130b4:	f04f 0003 	mov.w	r0, #3
   130b8:	df02      	svc	2
   130ba:	e7de      	b.n	1307a <ticker_start_conn_op_cb+0x6>
   130bc:	00023588 	.word	0x00023588
   130c0:	000235f4 	.word	0x000235f4
   130c4:	000230b4 	.word	0x000230b4
   130c8:	000235e8 	.word	0x000235e8

000130cc <ticker_stop_conn_op_cb>:
{
   130cc:	b510      	push	{r4, lr}
   130ce:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   130d0:	b990      	cbnz	r0, 130f8 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   130d2:	4620      	mov	r0, r4
   130d4:	f7fe ffd2 	bl	1207c <ull_update_mark>
	LL_ASSERT(p == param);
   130d8:	4284      	cmp	r4, r0
   130da:	d00c      	beq.n	130f6 <ticker_stop_conn_op_cb+0x2a>
   130dc:	4a0d      	ldr	r2, [pc, #52]	; (13114 <ticker_stop_conn_op_cb+0x48>)
   130de:	490e      	ldr	r1, [pc, #56]	; (13118 <ticker_stop_conn_op_cb+0x4c>)
   130e0:	480e      	ldr	r0, [pc, #56]	; (1311c <ticker_stop_conn_op_cb+0x50>)
   130e2:	f240 7307 	movw	r3, #1799	; 0x707
   130e6:	f009 ffa5 	bl	1d034 <printk>
   130ea:	4040      	eors	r0, r0
   130ec:	f380 8811 	msr	BASEPRI, r0
   130f0:	f04f 0003 	mov.w	r0, #3
   130f4:	df02      	svc	2
}
   130f6:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   130f8:	4a06      	ldr	r2, [pc, #24]	; (13114 <ticker_stop_conn_op_cb+0x48>)
   130fa:	4909      	ldr	r1, [pc, #36]	; (13120 <ticker_stop_conn_op_cb+0x54>)
   130fc:	4807      	ldr	r0, [pc, #28]	; (1311c <ticker_stop_conn_op_cb+0x50>)
   130fe:	f240 7304 	movw	r3, #1796	; 0x704
   13102:	f009 ff97 	bl	1d034 <printk>
   13106:	4040      	eors	r0, r0
   13108:	f380 8811 	msr	BASEPRI, r0
   1310c:	f04f 0003 	mov.w	r0, #3
   13110:	df02      	svc	2
   13112:	e7de      	b.n	130d2 <ticker_stop_conn_op_cb+0x6>
   13114:	00023588 	.word	0x00023588
   13118:	000235f4 	.word	0x000235f4
   1311c:	000230b4 	.word	0x000230b4
   13120:	000235e8 	.word	0x000235e8

00013124 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   13124:	b900      	cbnz	r0, 13128 <ticker_update_conn_op_cb+0x4>
   13126:	4770      	bx	lr
{
   13128:	b510      	push	{r4, lr}
   1312a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1312c:	f7fe ffbe 	bl	120ac <ull_update_mark_get>
   13130:	4284      	cmp	r4, r0
   13132:	d010      	beq.n	13156 <ticker_update_conn_op_cb+0x32>
   13134:	f7fe ff9c 	bl	12070 <ull_disable_mark_get>
   13138:	4284      	cmp	r4, r0
   1313a:	d00c      	beq.n	13156 <ticker_update_conn_op_cb+0x32>
   1313c:	4a06      	ldr	r2, [pc, #24]	; (13158 <ticker_update_conn_op_cb+0x34>)
   1313e:	4907      	ldr	r1, [pc, #28]	; (1315c <ticker_update_conn_op_cb+0x38>)
   13140:	4807      	ldr	r0, [pc, #28]	; (13160 <ticker_update_conn_op_cb+0x3c>)
   13142:	f240 63fb 	movw	r3, #1787	; 0x6fb
   13146:	f009 ff75 	bl	1d034 <printk>
   1314a:	4040      	eors	r0, r0
   1314c:	f380 8811 	msr	BASEPRI, r0
   13150:	f04f 0003 	mov.w	r0, #3
   13154:	df02      	svc	2
}
   13156:	bd10      	pop	{r4, pc}
   13158:	00023588 	.word	0x00023588
   1315c:	00023600 	.word	0x00023600
   13160:	000230b4 	.word	0x000230b4

00013164 <tx_ull_dequeue>:
{
   13164:	4603      	mov	r3, r0
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   13166:	f8d0 01c8 	ldr.w	r0, [r0, #456]	; 0x1c8
   1316a:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
{
   1316e:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   13170:	b170      	cbz	r0, 13190 <tx_ull_dequeue+0x2c>
	if (conn->tx_head == conn->tx_ctrl) {
   13172:	4290      	cmp	r0, r2
   13174:	d027      	beq.n	131c6 <tx_ull_dequeue+0x62>
		if (conn->tx_head == conn->tx_data) {
   13176:	f8d3 01d0 	ldr.w	r0, [r3, #464]	; 0x1d0
   1317a:	4290      	cmp	r0, r2
   1317c:	d021      	beq.n	131c2 <tx_ull_dequeue+0x5e>
		conn->tx_head = conn->tx_head->next;
   1317e:	6810      	ldr	r0, [r2, #0]
   13180:	f8c3 01c4 	str.w	r0, [r3, #452]	; 0x1c4
		tx->next = NULL;
   13184:	2200      	movs	r2, #0
}
   13186:	4608      	mov	r0, r1
   13188:	f85d 4b04 	ldr.w	r4, [sp], #4
		tx->next = NULL;
   1318c:	600a      	str	r2, [r1, #0]
}
   1318e:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   13190:	f8d3 41d0 	ldr.w	r4, [r3, #464]	; 0x1d0
   13194:	4294      	cmp	r4, r2
   13196:	d00f      	beq.n	131b8 <tx_ull_dequeue+0x54>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13198:	7910      	ldrb	r0, [r2, #4]
   1319a:	f000 0003 	and.w	r0, r0, #3
   1319e:	2803      	cmp	r0, #3
   131a0:	d01c      	beq.n	131dc <tx_ull_dequeue+0x78>
		conn->tx_head = conn->tx_head->next;
   131a2:	6812      	ldr	r2, [r2, #0]
   131a4:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
			conn->tx_ctrl = NULL;
   131a8:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   131aa:	e9c3 2272 	strd	r2, r2, [r3, #456]	; 0x1c8
}
   131ae:	4608      	mov	r0, r1
   131b0:	f85d 4b04 	ldr.w	r4, [sp], #4
		tx->next = tx;
   131b4:	6009      	str	r1, [r1, #0]
}
   131b6:	4770      	bx	lr
	if (conn->tx_head == conn->tx_ctrl) {
   131b8:	b12a      	cbz	r2, 131c6 <tx_ull_dequeue+0x62>
			conn->tx_data = conn->tx_data->next;
   131ba:	6820      	ldr	r0, [r4, #0]
   131bc:	f8c3 01d0 	str.w	r0, [r3, #464]	; 0x1d0
   131c0:	e7dd      	b.n	1317e <tx_ull_dequeue+0x1a>
   131c2:	4614      	mov	r4, r2
   131c4:	e7f9      	b.n	131ba <tx_ull_dequeue+0x56>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   131c6:	f8d3 41cc 	ldr.w	r4, [r3, #460]	; 0x1cc
		conn->tx_head = conn->tx_head->next;
   131ca:	6812      	ldr	r2, [r2, #0]
   131cc:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   131d0:	4284      	cmp	r4, r0
			conn->tx_ctrl = conn->tx_head;
   131d2:	bf18      	it	ne
   131d4:	f8c3 21c8 	strne.w	r2, [r3, #456]	; 0x1c8
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   131d8:	d1e9      	bne.n	131ae <tx_ull_dequeue+0x4a>
   131da:	e7e5      	b.n	131a8 <tx_ull_dequeue+0x44>
	    ((pdu_data_tx->llctrl.opcode !=
   131dc:	79d0      	ldrb	r0, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   131de:	2803      	cmp	r0, #3
   131e0:	d0cd      	beq.n	1317e <tx_ull_dequeue+0x1a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   131e2:	280a      	cmp	r0, #10
   131e4:	d1dd      	bne.n	131a2 <tx_ull_dequeue+0x3e>
   131e6:	e7ca      	b.n	1317e <tx_ull_dequeue+0x1a>

000131e8 <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   131e8:	e92d 41e8 	stmdb	sp!, {r3, r5, r6, r7, r8, lr}
   131ec:	4605      	mov	r5, r0
	if (conn->common.txn_lock) {
   131ee:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
{
   131f2:	460e      	mov	r6, r1
	if (conn->common.txn_lock) {
   131f4:	0781      	lsls	r1, r0, #30
   131f6:	d434      	bmi.n	13262 <reject_ext_ind_send+0x7a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   131f8:	482f      	ldr	r0, [pc, #188]	; (132b8 <reject_ext_ind_send+0xd0>)
   131fa:	4690      	mov	r8, r2
   131fc:	461f      	mov	r7, r3
   131fe:	f7fb f8d3 	bl	e3a8 <mem_acquire>
	if (!tx) {
   13202:	2800      	cmp	r0, #0
   13204:	d03a      	beq.n	1327c <reject_ext_ind_send+0x94>
	conn->common.txn_lock = 1U;
   13206:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   1320a:	f043 0302 	orr.w	r3, r3, #2
   1320e:	f885 30d8 	strb.w	r3, [r5, #216]	; 0xd8
		return err;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   13212:	2303      	movs	r3, #3
   13214:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   13216:	2211      	movs	r2, #17
	    conn->tx_head &&
   13218:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1321c:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1321e:	7902      	ldrb	r2, [r0, #4]
		if (!conn->tx_ctrl) {
   13220:	f8d5 11c8 	ldr.w	r1, [r5, #456]	; 0x1c8
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   13224:	f880 8008 	strb.w	r8, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13228:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   1322c:	7247      	strb	r7, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1322e:	7102      	strb	r2, [r0, #4]
	if (
   13230:	b1e3      	cbz	r3, 1326c <reject_ext_ind_send+0x84>
	    !conn->llcp_enc.pause_tx &&
   13232:	f895 2166 	ldrb.w	r2, [r5, #358]	; 0x166
	    conn->tx_head &&
   13236:	0797      	lsls	r7, r2, #30
   13238:	d418      	bmi.n	1326c <reject_ext_ind_send+0x84>
	    !conn->llcp_phy.pause_tx &&
   1323a:	f895 21bf 	ldrb.w	r2, [r5, #447]	; 0x1bf
   1323e:	07d2      	lsls	r2, r2, #31
   13240:	d414      	bmi.n	1326c <reject_ext_ind_send+0x84>
		if (conn->tx_head == conn->tx_data) {
   13242:	f8d5 21d0 	ldr.w	r2, [r5, #464]	; 0x1d0
   13246:	4293      	cmp	r3, r2
   13248:	d023      	beq.n	13292 <reject_ext_ind_send+0xaa>
		} else if (!conn->tx_ctrl) {
   1324a:	b1d1      	cbz	r1, 13282 <reject_ext_ind_send+0x9a>
	tx->next = conn->tx_ctrl_last->next;
   1324c:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
   13250:	681a      	ldr	r2, [r3, #0]
   13252:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   13254:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   13256:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   13258:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
	if (!tx->next) {
   1325c:	b90b      	cbnz	r3, 13262 <reject_ext_ind_send+0x7a>
		conn->tx_data_last = tx;
   1325e:	f8c5 01d4 	str.w	r0, [r5, #468]	; 0x1d4
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   13262:	2301      	movs	r3, #1
   13264:	7133      	strb	r3, [r6, #4]
		*err = 0U;
   13266:	2000      	movs	r0, #0

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;

	return 0;
}
   13268:	e8bd 81e8 	ldmia.w	sp!, {r3, r5, r6, r7, r8, pc}
		if (!conn->tx_ctrl) {
   1326c:	2900      	cmp	r1, #0
   1326e:	d1ed      	bne.n	1324c <reject_ext_ind_send+0x64>
			tx->next = conn->tx_head;
   13270:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   13272:	e9c5 0071 	strd	r0, r0, [r5, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13276:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
   1327a:	e7ef      	b.n	1325c <reject_ext_ind_send+0x74>
		*err = -ENOBUFS;
   1327c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13280:	e7f2      	b.n	13268 <reject_ext_ind_send+0x80>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13282:	791a      	ldrb	r2, [r3, #4]
   13284:	f002 0203 	and.w	r2, r2, #3
   13288:	2a03      	cmp	r2, #3
   1328a:	d00e      	beq.n	132aa <reject_ext_ind_send+0xc2>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1328c:	f8c5 31c8 	str.w	r3, [r5, #456]	; 0x1c8
   13290:	e7de      	b.n	13250 <reject_ext_ind_send+0x68>
			conn->tx_data = conn->tx_data->next;
   13292:	681a      	ldr	r2, [r3, #0]
   13294:	f8c5 21d0 	str.w	r2, [r5, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13298:	2900      	cmp	r1, #0
   1329a:	d1d7      	bne.n	1324c <reject_ext_ind_send+0x64>
			tx->next = conn->tx_head->next;
   1329c:	681a      	ldr	r2, [r3, #0]
   1329e:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   132a0:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   132a2:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   132a4:	e9c5 0072 	strd	r0, r0, [r5, #456]	; 0x1c8
   132a8:	e7d8      	b.n	1325c <reject_ext_ind_send+0x74>
	    ((pdu_data_tx->llctrl.opcode !=
   132aa:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   132ac:	2a03      	cmp	r2, #3
   132ae:	d0f5      	beq.n	1329c <reject_ext_ind_send+0xb4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   132b0:	2a0a      	cmp	r2, #10
   132b2:	d1eb      	bne.n	1328c <reject_ext_ind_send+0xa4>
   132b4:	e7f2      	b.n	1329c <reject_ext_ind_send+0xb4>
   132b6:	bf00      	nop
   132b8:	2000242c 	.word	0x2000242c

000132bc <event_len_prep>:
{
   132bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
   132be:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   132c2:	f003 0207 	and.w	r2, r3, #7
{
   132c6:	4604      	mov	r4, r0
   132c8:	2a06      	cmp	r2, #6
   132ca:	f200 80d4 	bhi.w	13476 <event_len_prep+0x1ba>
   132ce:	e8df f002 	tbb	[pc, r2]
   132d2:	4704      	.short	0x4704
   132d4:	48484747 	.word	0x48484747
   132d8:	47          	.byte	0x47
   132d9:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   132da:	486e      	ldr	r0, [pc, #440]	; (13494 <event_len_prep+0x1d8>)
   132dc:	f7fb f864 	bl	e3a8 <mem_acquire>
		if (!tx) {
   132e0:	2800      	cmp	r0, #0
   132e2:	d03d      	beq.n	13360 <event_len_prep+0xa4>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   132e4:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   132e8:	f8b4 21b2 	ldrh.w	r2, [r4, #434]	; 0x1b2
		conn->default_tx_time = conn->llcp_length.tx_time;
   132ec:	f8b4 51b6 	ldrh.w	r5, [r4, #438]	; 0x1b6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   132f0:	f8a4 20d2 	strh.w	r2, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   132f4:	2301      	movs	r3, #1
   132f6:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
   132fa:	f8a4 50d4 	strh.w	r5, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   132fe:	f884 11ae 	strb.w	r1, [r4, #430]	; 0x1ae
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   13302:	8182      	strh	r2, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   13304:	72c3      	strb	r3, [r0, #11]
   13306:	2248      	movs	r2, #72	; 0x48
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   13308:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
   1330a:	2309      	movs	r3, #9
   1330c:	7143      	strb	r3, [r0, #5]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   1330e:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   13310:	7382      	strb	r2, [r0, #14]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   13312:	2214      	movs	r2, #20
	    conn->tx_head &&
   13314:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   13318:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   1331a:	2100      	movs	r1, #0
   1331c:	221b      	movs	r2, #27
   1331e:	7241      	strb	r1, [r0, #9]
		if (!conn->tx_ctrl) {
   13320:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   13324:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13326:	7902      	ldrb	r2, [r0, #4]
   13328:	f042 0203 	orr.w	r2, r2, #3
   1332c:	7102      	strb	r2, [r0, #4]
	if (
   1332e:	b13b      	cbz	r3, 13340 <event_len_prep+0x84>
	    !conn->llcp_enc.pause_tx &&
   13330:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   13334:	0795      	lsls	r5, r2, #30
   13336:	d403      	bmi.n	13340 <event_len_prep+0x84>
	    !conn->llcp_phy.pause_tx &&
   13338:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1333c:	07d2      	lsls	r2, r2, #31
   1333e:	d573      	bpl.n	13428 <event_len_prep+0x16c>
		if (!conn->tx_ctrl) {
   13340:	2900      	cmp	r1, #0
   13342:	d07f      	beq.n	13444 <event_len_prep+0x188>
	tx->next = conn->tx_ctrl_last->next;
   13344:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   13348:	681a      	ldr	r2, [r3, #0]
   1334a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1334c:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1334e:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   13350:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   13354:	2b00      	cmp	r3, #0
   13356:	d056      	beq.n	13406 <event_len_prep+0x14a>
		conn->procedure_expire = conn->procedure_reload;
   13358:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   1335c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
}
   13360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   13362:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   13366:	f8b0 c1b0 	ldrh.w	ip, [r0, #432]	; 0x1b0
		lll->max_rx_time = conn->llcp_length.rx_time;
   1336a:	f8b0 11b4 	ldrh.w	r1, [r0, #436]	; 0x1b4
		tx_octets = conn->llcp_length.tx_octets;
   1336e:	f8b0 71b2 	ldrh.w	r7, [r0, #434]	; 0x1b2
		uint16_t tx_time = conn->llcp_length.tx_time;
   13372:	f8b0 61b6 	ldrh.w	r6, [r0, #438]	; 0x1b6
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   13376:	f8a0 c05a 	strh.w	ip, [r0, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   1337a:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   1337c:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   13380:	d024      	beq.n	133cc <event_len_prep+0x110>
			conn->llcp_length.state =
   13382:	2206      	movs	r2, #6
   13384:	f362 0302 	bfi	r3, r2, #0, #3
   13388:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
		rx = conn->llcp_rx;
   1338c:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   13390:	b335      	cbz	r5, 133e0 <event_len_prep+0x124>
   13392:	6828      	ldr	r0, [r5, #0]
   13394:	b320      	cbz	r0, 133e0 <event_len_prep+0x124>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   13396:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   13398:	6842      	ldr	r2, [r0, #4]
   1339a:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   1339e:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
   133a2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   133a4:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
   133a6:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
   133a8:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
   133aa:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   133ac:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   133ae:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   133b0:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   133b2:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   133b6:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   133b8:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   133ba:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   133bc:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   133be:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   133c0:	f7fe fd9e 	bl	11f00 <ll_rx_put>
}
   133c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
   133c8:	f7fe bda4 	b.w	11f14 <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
   133cc:	f8b0 21b8 	ldrh.w	r2, [r0, #440]	; 0x1b8
   133d0:	b9e2      	cbnz	r2, 1340c <event_len_prep+0x150>
				conn->llcp_length.ack = conn->llcp_length.req;
   133d2:	f890 31ac 	ldrb.w	r3, [r0, #428]	; 0x1ac
				conn->procedure_expire = 0U;
   133d6:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
				conn->llcp_length.ack = conn->llcp_length.req;
   133da:	f880 31ad 	strb.w	r3, [r0, #429]	; 0x1ad
				conn->procedure_expire = 0U;
   133de:	e7d5      	b.n	1338c <event_len_prep+0xd0>
		LL_ASSERT(rx && rx->hdr.link);
   133e0:	4a2d      	ldr	r2, [pc, #180]	; (13498 <event_len_prep+0x1dc>)
   133e2:	492e      	ldr	r1, [pc, #184]	; (1349c <event_len_prep+0x1e0>)
   133e4:	482e      	ldr	r0, [pc, #184]	; (134a0 <event_len_prep+0x1e4>)
   133e6:	f640 635d 	movw	r3, #3677	; 0xe5d
   133ea:	f009 fe23 	bl	1d034 <printk>
   133ee:	4040      	eors	r0, r0
   133f0:	f380 8811 	msr	BASEPRI, r0
   133f4:	f04f 0003 	mov.w	r0, #3
   133f8:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   133fa:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   133fc:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	; 0x5a
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   13400:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   13404:	e7c7      	b.n	13396 <event_len_prep+0xda>
		conn->tx_data_last = tx;
   13406:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   1340a:	e7a5      	b.n	13358 <event_len_prep+0x9c>
				conn->llcp_length.tx_octets =
   1340c:	f8a0 21b2 	strh.w	r2, [r0, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   13410:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   13412:	f362 0302 	bfi	r3, r2, #0, #3
   13416:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   1341a:	f8b0 31ba 	ldrh.w	r3, [r0, #442]	; 0x1ba
				conn->llcp_length.cache.tx_octets = 0;
   1341e:	f8a0 21b8 	strh.w	r2, [r0, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   13422:	f8a0 31b6 	strh.w	r3, [r0, #438]	; 0x1b6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   13426:	e7b1      	b.n	1338c <event_len_prep+0xd0>
		if (conn->tx_head == conn->tx_data) {
   13428:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1342c:	4293      	cmp	r3, r2
   1342e:	d00f      	beq.n	13450 <event_len_prep+0x194>
		} else if (!conn->tx_ctrl) {
   13430:	2900      	cmp	r1, #0
   13432:	d187      	bne.n	13344 <event_len_prep+0x88>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13434:	791a      	ldrb	r2, [r3, #4]
   13436:	f002 0203 	and.w	r2, r2, #3
   1343a:	2a03      	cmp	r2, #3
   1343c:	d015      	beq.n	1346a <event_len_prep+0x1ae>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1343e:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   13442:	e781      	b.n	13348 <event_len_prep+0x8c>
			tx->next = conn->tx_head;
   13444:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   13446:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1344a:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1344e:	e781      	b.n	13354 <event_len_prep+0x98>
			conn->tx_data = conn->tx_data->next;
   13450:	681a      	ldr	r2, [r3, #0]
   13452:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13456:	2900      	cmp	r1, #0
   13458:	f47f af74 	bne.w	13344 <event_len_prep+0x88>
			tx->next = conn->tx_head->next;
   1345c:	681a      	ldr	r2, [r3, #0]
   1345e:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   13460:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   13462:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   13464:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   13468:	e774      	b.n	13354 <event_len_prep+0x98>
	    ((pdu_data_tx->llctrl.opcode !=
   1346a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1346c:	2a03      	cmp	r2, #3
   1346e:	d0f5      	beq.n	1345c <event_len_prep+0x1a0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13470:	2a0a      	cmp	r2, #10
   13472:	d1e4      	bne.n	1343e <event_len_prep+0x182>
   13474:	e7f2      	b.n	1345c <event_len_prep+0x1a0>
		LL_ASSERT(0);
   13476:	4a08      	ldr	r2, [pc, #32]	; (13498 <event_len_prep+0x1dc>)
   13478:	490a      	ldr	r1, [pc, #40]	; (134a4 <event_len_prep+0x1e8>)
   1347a:	4809      	ldr	r0, [pc, #36]	; (134a0 <event_len_prep+0x1e4>)
   1347c:	f640 6385 	movw	r3, #3717	; 0xe85
   13480:	f009 fdd8 	bl	1d034 <printk>
   13484:	4040      	eors	r0, r0
   13486:	f380 8811 	msr	BASEPRI, r0
   1348a:	f04f 0003 	mov.w	r0, #3
   1348e:	df02      	svc	2
}
   13490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13492:	bf00      	nop
   13494:	2000242c 	.word	0x2000242c
   13498:	00023588 	.word	0x00023588
   1349c:	00023654 	.word	0x00023654
   134a0:	000230b4 	.word	0x000230b4
   134a4:	0002314c 	.word	0x0002314c

000134a8 <event_phy_upd_ind_prep>:
{
   134a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
   134ac:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
   134b0:	f013 0201 	ands.w	r2, r3, #1
{
   134b4:	4604      	mov	r4, r0
   134b6:	460e      	mov	r6, r1
	if (conn->llcp.phy_upd_ind.initiate) {
   134b8:	f040 8092 	bne.w	135e0 <event_phy_upd_ind_prep+0x138>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   134bc:	f8b0 10ea 	ldrh.w	r1, [r0, #234]	; 0xea
   134c0:	1a71      	subs	r1, r6, r1
   134c2:	0409      	lsls	r1, r1, #16
   134c4:	f100 80d7 	bmi.w	13676 <event_phy_upd_ind_prep+0x1ce>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   134c8:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
   134cc:	2900      	cmp	r1, #0
   134ce:	469c      	mov	ip, r3
   134d0:	f2c0 80fc 	blt.w	136cc <event_phy_upd_ind_prep+0x224>
			conn->llcp_ack = conn->llcp_req;
   134d4:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   134d8:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
		old_tx = lll->phy_tx;
   134dc:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
		old_rx = lll->phy_rx;
   134e0:	f894 8061 	ldrb.w	r8, [r4, #97]	; 0x61
		uint16_t eff_rx_time = lll->max_rx_time;
   134e4:	f8b4 705e 	ldrh.w	r7, [r4, #94]	; 0x5e
		if (conn->llcp.phy_upd_ind.tx) {
   134e8:	f013 0f1c 	tst.w	r3, #28
		old_tx = lll->phy_tx;
   134ec:	f002 0907 	and.w	r9, r2, #7
		old_rx = lll->phy_rx;
   134f0:	f008 0807 	and.w	r8, r8, #7
		if (conn->llcp.phy_upd_ind.tx) {
   134f4:	f040 80c1 	bne.w	1367a <event_phy_upd_ind_prep+0x1d2>
		uint16_t eff_tx_time = lll->max_tx_time;
   134f8:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
		if (conn->llcp.phy_upd_ind.rx) {
   134fc:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   13500:	d008      	beq.n	13514 <event_phy_upd_ind_prep+0x6c>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   13502:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
   13506:	095b      	lsrs	r3, r3, #5
   13508:	f363 0202 	bfi	r2, r3, #0, #3
   1350c:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   13510:	f44f 77a4 	mov.w	r7, #328	; 0x148
		rx = conn->llcp_rx;
   13514:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   13518:	2d00      	cmp	r5, #0
   1351a:	f000 80b7 	beq.w	1368c <event_phy_upd_ind_prep+0x1e4>
   1351e:	6828      	ldr	r0, [r5, #0]
   13520:	2800      	cmp	r0, #0
   13522:	f000 80b3 	beq.w	1368c <event_phy_upd_ind_prep+0x1e4>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   13526:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		    (lll->phy_rx == old_rx)) {
   1352a:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
		conn->llcp_rx = rx->hdr.link->mem;
   1352e:	6841      	ldr	r1, [r0, #4]
   13530:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   13534:	f01c 0f02 	tst.w	ip, #2
   13538:	f3c3 0102 	ubfx	r1, r3, #0, #3
		    (lll->phy_rx == old_rx)) {
   1353c:	f3c2 0e02 	ubfx	lr, r2, #0, #3
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   13540:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
   13544:	f002 0207 	and.w	r2, r2, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   13548:	d102      	bne.n	13550 <event_phy_upd_ind_prep+0xa8>
   1354a:	4599      	cmp	r9, r3
   1354c:	f000 80c6 	beq.w	136dc <event_phy_upd_ind_prep+0x234>
		rx->hdr.handle = lll->handle;
   13550:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   13552:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   13554:	231a      	movs	r3, #26
   13556:	712b      	strb	r3, [r5, #4]
		upd->status = 0U;
   13558:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
   1355a:	7769      	strb	r1, [r5, #29]
		upd->rx = lll->phy_rx;
   1355c:	f885 e01e 	strb.w	lr, [r5, #30]
		upd->status = 0U;
   13560:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
   13562:	4629      	mov	r1, r5
   13564:	f7fe fccc 	bl	11f00 <ll_rx_put>
		rx = conn->llcp_rx;
   13568:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   1356c:	2d00      	cmp	r5, #0
   1356e:	f000 809e 	beq.w	136ae <event_phy_upd_ind_prep+0x206>
   13572:	6828      	ldr	r0, [r5, #0]
   13574:	2800      	cmp	r0, #0
   13576:	f000 809a 	beq.w	136ae <event_phy_upd_ind_prep+0x206>
		if ((eff_tx_time <= lll->max_tx_time) &&
   1357a:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
		conn->llcp_rx = rx->hdr.link->mem;
   1357e:	6842      	ldr	r2, [r0, #4]
   13580:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((eff_tx_time <= lll->max_tx_time) &&
   13584:	42b3      	cmp	r3, r6
   13586:	d30a      	bcc.n	1359e <event_phy_upd_ind_prep+0xf6>
   13588:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   1358c:	d807      	bhi.n	1359e <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
   1358e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		    (lll->max_tx_time <= max_tx_time) &&
   13592:	42bb      	cmp	r3, r7
   13594:	d303      	bcc.n	1359e <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
   13596:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   1359a:	f240 8111 	bls.w	137c0 <event_phy_upd_ind_prep+0x318>
		lll->max_tx_time = eff_tx_time;
   1359e:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
		lll->max_rx_time = eff_rx_time;
   135a2:	f8a4 705e 	strh.w	r7, [r4, #94]	; 0x5e
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   135a6:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   135a8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   135aa:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   135ac:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   135b0:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   135b4:	2109      	movs	r1, #9
   135b6:	7769      	strb	r1, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   135b8:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   135bc:	772b      	strb	r3, [r5, #28]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   135be:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   135c2:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   135c4:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   135c8:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   135ca:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   135cc:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
   135ce:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   135d0:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   135d2:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   135d4:	f7fe fc94 	bl	11f00 <ll_rx_put>
}
   135d8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
   135dc:	f7fe bc9a 	b.w	11f14 <ll_rx_sched>
		rx = ll_pdu_rx_alloc_peek(2);
   135e0:	2002      	movs	r0, #2
   135e2:	f7fe fc9d 	bl	11f20 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   135e6:	4680      	mov	r8, r0
   135e8:	2800      	cmp	r0, #0
   135ea:	d044      	beq.n	13676 <event_phy_upd_ind_prep+0x1ce>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   135ec:	488a      	ldr	r0, [pc, #552]	; (13818 <event_phy_upd_ind_prep+0x370>)
   135ee:	f7fa fedb 	bl	e3a8 <mem_acquire>
		if (!tx) {
   135f2:	4605      	mov	r5, r0
   135f4:	2800      	cmp	r0, #0
   135f6:	d03e      	beq.n	13676 <event_phy_upd_ind_prep+0x1ce>
		conn->llcp.phy_upd_ind.initiate = 0U;
   135f8:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   135fc:	f36f 0300 	bfc	r3, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
   13600:	f3c3 1742 	ubfx	r7, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
   13604:	ea47 0793 	orr.w	r7, r7, r3, lsr #2
   13608:	f017 0707 	ands.w	r7, r7, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
   1360c:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		if (!((conn->llcp.phy_upd_ind.tx |
   13610:	b2db      	uxtb	r3, r3
   13612:	d17e      	bne.n	13712 <event_phy_upd_ind_prep+0x26a>
			conn->llcp_ack = conn->llcp_req;
   13614:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
			conn->llcp.phy_upd_ind.instant = 0U;
   13618:	f8a4 70ea 	strh.w	r7, [r4, #234]	; 0xea
			if (conn->llcp.phy_upd_ind.cmd) {
   1361c:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
   1361e:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			if (conn->llcp.phy_upd_ind.cmd) {
   13622:	f100 80a8 	bmi.w	13776 <event_phy_upd_ind_prep+0x2ce>
   13626:	463b      	mov	r3, r7
   13628:	463a      	mov	r2, r7
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   1362a:	726b      	strb	r3, [r5, #9]
		pdu_ctrl_tx->len =
   1362c:	2305      	movs	r3, #5
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   1362e:	722f      	strb	r7, [r5, #8]
		pdu_ctrl_tx->len =
   13630:	716b      	strb	r3, [r5, #5]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   13632:	816a      	strh	r2, [r5, #10]
		pdu_ctrl_tx->llctrl.opcode =
   13634:	2218      	movs	r2, #24
	    conn->tx_head &&
   13636:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		if (!conn->tx_ctrl) {
   1363a:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		pdu_ctrl_tx->llctrl.opcode =
   1363e:	71ea      	strb	r2, [r5, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13640:	792a      	ldrb	r2, [r5, #4]
   13642:	f042 0203 	orr.w	r2, r2, #3
   13646:	712a      	strb	r2, [r5, #4]
	if (
   13648:	b13b      	cbz	r3, 1365a <event_phy_upd_ind_prep+0x1b2>
	    !conn->llcp_enc.pause_tx &&
   1364a:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1364e:	0796      	lsls	r6, r2, #30
   13650:	d403      	bmi.n	1365a <event_phy_upd_ind_prep+0x1b2>
	    !conn->llcp_phy.pause_tx &&
   13652:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   13656:	07d0      	lsls	r0, r2, #31
   13658:	d579      	bpl.n	1374e <event_phy_upd_ind_prep+0x2a6>
		if (!conn->tx_ctrl) {
   1365a:	2900      	cmp	r1, #0
   1365c:	f000 8085 	beq.w	1376a <event_phy_upd_ind_prep+0x2c2>
	tx->next = conn->tx_ctrl_last->next;
   13660:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   13664:	681a      	ldr	r2, [r3, #0]
   13666:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   13668:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   1366a:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   1366c:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   13670:	b90b      	cbnz	r3, 13676 <event_phy_upd_ind_prep+0x1ce>
		conn->tx_data_last = tx;
   13672:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
}
   13676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   1367a:	f3c3 0182 	ubfx	r1, r3, #2, #3
   1367e:	f361 0202 	bfi	r2, r1, #0, #3
   13682:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   13686:	f44f 76a4 	mov.w	r6, #328	; 0x148
   1368a:	e737      	b.n	134fc <event_phy_upd_ind_prep+0x54>
		LL_ASSERT(rx && rx->hdr.link);
   1368c:	4a63      	ldr	r2, [pc, #396]	; (1381c <event_phy_upd_ind_prep+0x374>)
   1368e:	4964      	ldr	r1, [pc, #400]	; (13820 <event_phy_upd_ind_prep+0x378>)
   13690:	4864      	ldr	r0, [pc, #400]	; (13824 <event_phy_upd_ind_prep+0x37c>)
   13692:	f640 7396 	movw	r3, #3990	; 0xf96
   13696:	f009 fccd 	bl	1d034 <printk>
   1369a:	4040      	eors	r0, r0
   1369c:	f380 8811 	msr	BASEPRI, r0
   136a0:	f04f 0003 	mov.w	r0, #3
   136a4:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   136a6:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   136a8:	f894 c0e8 	ldrb.w	ip, [r4, #232]	; 0xe8
   136ac:	e73b      	b.n	13526 <event_phy_upd_ind_prep+0x7e>
		LL_ASSERT(rx && rx->hdr.link);
   136ae:	4a5b      	ldr	r2, [pc, #364]	; (1381c <event_phy_upd_ind_prep+0x374>)
   136b0:	495b      	ldr	r1, [pc, #364]	; (13820 <event_phy_upd_ind_prep+0x378>)
   136b2:	485c      	ldr	r0, [pc, #368]	; (13824 <event_phy_upd_ind_prep+0x37c>)
   136b4:	f640 73c2 	movw	r3, #4034	; 0xfc2
   136b8:	f009 fcbc 	bl	1d034 <printk>
   136bc:	4040      	eors	r0, r0
   136be:	f380 8811 	msr	BASEPRI, r0
   136c2:	f04f 0003 	mov.w	r0, #3
   136c6:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   136c8:	6828      	ldr	r0, [r5, #0]
   136ca:	e756      	b.n	1357a <event_phy_upd_ind_prep+0xd2>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   136cc:	f890 10d9 	ldrb.w	r1, [r0, #217]	; 0xd9
   136d0:	2900      	cmp	r1, #0
   136d2:	f43f aeff 	beq.w	134d4 <event_phy_upd_ind_prep+0x2c>
			conn->slave.llcp_type = LLCP_NONE;
   136d6:	f880 20d9 	strb.w	r2, [r0, #217]	; 0xd9
   136da:	e6ff      	b.n	134dc <event_phy_upd_ind_prep+0x34>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   136dc:	4590      	cmp	r8, r2
   136de:	f47f af37 	bne.w	13550 <event_phy_upd_ind_prep+0xa8>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   136e2:	2301      	movs	r3, #1
   136e4:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   136e6:	4629      	mov	r1, r5
   136e8:	f7fe fc0a 	bl	11f00 <ll_rx_put>
				rx = conn->llcp_rx;
   136ec:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
				LL_ASSERT(rx && rx->hdr.link);
   136f0:	2d00      	cmp	r5, #0
   136f2:	d07b      	beq.n	137ec <event_phy_upd_ind_prep+0x344>
   136f4:	6828      	ldr	r0, [r5, #0]
   136f6:	2800      	cmp	r0, #0
   136f8:	d078      	beq.n	137ec <event_phy_upd_ind_prep+0x344>
				conn->llcp_rx = rx->hdr.link->mem;
   136fa:	6842      	ldr	r2, [r0, #4]
   136fc:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   13700:	2301      	movs	r3, #1
				ll_rx_put(rx->hdr.link, rx);
   13702:	4629      	mov	r1, r5
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   13704:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
   13706:	f7fe fbfb 	bl	11f00 <ll_rx_put>
}
   1370a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   1370e:	f7fe bc01 	b.w	11f14 <ll_rx_sched>
			conn->llcp.phy_upd_ind.instant = event_counter +
   13712:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   13714:	4431      	add	r1, r6
							 lll->latency +
   13716:	3106      	adds	r1, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
   13718:	f8a4 10ea 	strh.w	r1, [r4, #234]	; 0xea
			(void)ll_pdu_rx_alloc();
   1371c:	f7fe fc1e 	bl	11f5c <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   13720:	f8d8 3000 	ldr.w	r3, [r8]
   13724:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   13728:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   1372a:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
			rx = ll_pdu_rx_alloc();
   1372e:	f7fe fc15 	bl	11f5c <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   13732:	6803      	ldr	r3, [r0, #0]
   13734:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   13738:	605a      	str	r2, [r3, #4]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   1373a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   1373e:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
			conn->llcp_rx = rx;
   13742:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   13746:	f3c3 0782 	ubfx	r7, r3, #2, #3
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   1374a:	095b      	lsrs	r3, r3, #5
   1374c:	e76d      	b.n	1362a <event_phy_upd_ind_prep+0x182>
		if (conn->tx_head == conn->tx_data) {
   1374e:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   13752:	4293      	cmp	r3, r2
   13754:	d03d      	beq.n	137d2 <event_phy_upd_ind_prep+0x32a>
		} else if (!conn->tx_ctrl) {
   13756:	2900      	cmp	r1, #0
   13758:	d182      	bne.n	13660 <event_phy_upd_ind_prep+0x1b8>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1375a:	791a      	ldrb	r2, [r3, #4]
   1375c:	f002 0203 	and.w	r2, r2, #3
   13760:	2a03      	cmp	r2, #3
   13762:	d052      	beq.n	1380a <event_phy_upd_ind_prep+0x362>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13764:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   13768:	e77c      	b.n	13664 <event_phy_upd_ind_prep+0x1bc>
			tx->next = conn->tx_head;
   1376a:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
   1376c:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13770:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   13774:	e77c      	b.n	13670 <event_phy_upd_ind_prep+0x1c8>
				(void)ll_pdu_rx_alloc();
   13776:	f7fe fbf1 	bl	11f5c <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
   1377a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   1377c:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   13780:	231a      	movs	r3, #26
				upd->status = 0U;
   13782:	f888 701c 	strb.w	r7, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   13786:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
   1378a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
				ll_rx_put(rx->hdr.link, rx);
   1378e:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
   13792:	f3c3 0302 	ubfx	r3, r3, #0, #3
   13796:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
   1379a:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   1379e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   137a2:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
   137a6:	4641      	mov	r1, r8
   137a8:	f7fe fbaa 	bl	11f00 <ll_rx_put>
				ll_rx_sched();
   137ac:	f7fe fbb2 	bl	11f14 <ll_rx_sched>
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   137b0:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   137b4:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   137b8:	f3c3 0782 	ubfx	r7, r3, #2, #3
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   137bc:	095b      	lsrs	r3, r3, #5
   137be:	e734      	b.n	1362a <event_phy_upd_ind_prep+0x182>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   137c0:	2301      	movs	r3, #1
   137c2:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   137c4:	4629      	mov	r1, r5
   137c6:	f7fe fb9b 	bl	11f00 <ll_rx_put>
}
   137ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   137ce:	f7fe bba1 	b.w	11f14 <ll_rx_sched>
			conn->tx_data = conn->tx_data->next;
   137d2:	681a      	ldr	r2, [r3, #0]
   137d4:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   137d8:	2900      	cmp	r1, #0
   137da:	f47f af41 	bne.w	13660 <event_phy_upd_ind_prep+0x1b8>
			tx->next = conn->tx_head->next;
   137de:	681a      	ldr	r2, [r3, #0]
   137e0:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
   137e2:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   137e4:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   137e6:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
   137ea:	e741      	b.n	13670 <event_phy_upd_ind_prep+0x1c8>
				LL_ASSERT(rx && rx->hdr.link);
   137ec:	4a0b      	ldr	r2, [pc, #44]	; (1381c <event_phy_upd_ind_prep+0x374>)
   137ee:	490c      	ldr	r1, [pc, #48]	; (13820 <event_phy_upd_ind_prep+0x378>)
   137f0:	480c      	ldr	r0, [pc, #48]	; (13824 <event_phy_upd_ind_prep+0x37c>)
   137f2:	f640 73a5 	movw	r3, #4005	; 0xfa5
   137f6:	f009 fc1d 	bl	1d034 <printk>
   137fa:	4040      	eors	r0, r0
   137fc:	f380 8811 	msr	BASEPRI, r0
   13800:	f04f 0003 	mov.w	r0, #3
   13804:	df02      	svc	2
				conn->llcp_rx = rx->hdr.link->mem;
   13806:	6828      	ldr	r0, [r5, #0]
   13808:	e777      	b.n	136fa <event_phy_upd_ind_prep+0x252>
	    ((pdu_data_tx->llctrl.opcode !=
   1380a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1380c:	2a03      	cmp	r2, #3
   1380e:	d0e6      	beq.n	137de <event_phy_upd_ind_prep+0x336>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13810:	2a0a      	cmp	r2, #10
   13812:	d1a7      	bne.n	13764 <event_phy_upd_ind_prep+0x2bc>
   13814:	e7e3      	b.n	137de <event_phy_upd_ind_prep+0x336>
   13816:	bf00      	nop
   13818:	2000242c 	.word	0x2000242c
   1381c:	00023588 	.word	0x00023588
   13820:	00023654 	.word	0x00023654
   13824:	000230b4 	.word	0x000230b4

00013828 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   13828:	4801      	ldr	r0, [pc, #4]	; (13830 <ll_conn_acquire+0x8>)
   1382a:	f7fa bdbd 	b.w	e3a8 <mem_acquire>
   1382e:	bf00      	nop
   13830:	200023a4 	.word	0x200023a4

00013834 <ll_conn_release>:
	mem_release(conn, &conn_free);
   13834:	4901      	ldr	r1, [pc, #4]	; (1383c <ll_conn_release+0x8>)
   13836:	f7fa bdd1 	b.w	e3dc <mem_release>
   1383a:	bf00      	nop
   1383c:	200023a4 	.word	0x200023a4

00013840 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   13840:	4902      	ldr	r1, [pc, #8]	; (1384c <ll_conn_handle_get+0xc>)
   13842:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   13846:	f7fa bde5 	b.w	e414 <mem_index_get>
   1384a:	bf00      	nop
   1384c:	20001218 	.word	0x20001218

00013850 <ll_conn_get>:
{
   13850:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13852:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   13856:	4801      	ldr	r0, [pc, #4]	; (1385c <ll_conn_get+0xc>)
   13858:	f7fa bdd8 	b.w	e40c <mem_get>
   1385c:	20001218 	.word	0x20001218

00013860 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13860:	b958      	cbnz	r0, 1387a <ll_connected_get+0x1a>
{
   13862:	b508      	push	{r3, lr}
   13864:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13866:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1386a:	4805      	ldr	r0, [pc, #20]	; (13880 <ll_connected_get+0x20>)
   1386c:	f7fa fdce 	bl	e40c <mem_get>
	if (conn->lll.handle != handle) {
   13870:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   13872:	b903      	cbnz	r3, 13876 <ll_connected_get+0x16>
}
   13874:	bd08      	pop	{r3, pc}
		return NULL;
   13876:	2000      	movs	r0, #0
}
   13878:	bd08      	pop	{r3, pc}
		return NULL;
   1387a:	2000      	movs	r0, #0
}
   1387c:	4770      	bx	lr
   1387e:	bf00      	nop
   13880:	20001218 	.word	0x20001218

00013884 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   13884:	4801      	ldr	r0, [pc, #4]	; (1388c <ll_tx_mem_acquire+0x8>)
   13886:	f7fa bd8f 	b.w	e3a8 <mem_acquire>
   1388a:	bf00      	nop
   1388c:	200023bc 	.word	0x200023bc

00013890 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   13890:	4901      	ldr	r1, [pc, #4]	; (13898 <ll_tx_mem_release+0x8>)
   13892:	f7fa bda3 	b.w	e3dc <mem_release>
   13896:	bf00      	nop
   13898:	200023bc 	.word	0x200023bc

0001389c <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1389c:	2800      	cmp	r0, #0
   1389e:	d140      	bne.n	13922 <ll_tx_mem_enqueue+0x86>
{
   138a0:	b570      	push	{r4, r5, r6, lr}
   138a2:	4602      	mov	r2, r0
   138a4:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   138a6:	4820      	ldr	r0, [pc, #128]	; (13928 <ll_tx_mem_enqueue+0x8c>)
   138a8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   138ac:	f7fa fdae 	bl	e40c <mem_get>
	if (conn->lll.handle != handle) {
   138b0:	8d02      	ldrh	r2, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   138b2:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   138b4:	bb7a      	cbnz	r2, 13916 <ll_tx_mem_enqueue+0x7a>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   138b6:	4c1d      	ldr	r4, [pc, #116]	; (1392c <ll_tx_mem_enqueue+0x90>)
   138b8:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   138ba:	f894 c001 	ldrb.w	ip, [r4, #1]
   138be:	78a0      	ldrb	r0, [r4, #2]
	last = last + 1;
   138c0:	1c4b      	adds	r3, r1, #1
   138c2:	b2db      	uxtb	r3, r3
		last = 0U;
   138c4:	459c      	cmp	ip, r3
   138c6:	bf08      	it	eq
   138c8:	2300      	moveq	r3, #0
	if (last == first) {
   138ca:	4298      	cmp	r0, r3
   138cc:	d026      	beq.n	1391c <ll_tx_mem_enqueue+0x80>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   138ce:	46a4      	mov	ip, r4
   138d0:	f81c 0b04 	ldrb.w	r0, [ip], #4
   138d4:	fb10 f001 	smulbb	r0, r0, r1
	if (!lll_tx) {
   138d8:	eb1c 0100 	adds.w	r1, ip, r0
   138dc:	d01e      	beq.n	1391c <ll_tx_mem_enqueue+0x80>
	lll_tx->handle = handle;
   138de:	f82c 2000 	strh.w	r2, [ip, r0]
	lll_tx->node = tx;
   138e2:	604e      	str	r6, [r1, #4]
   138e4:	7c29      	ldrb	r1, [r5, #16]
	*last = idx; /* Commit: Update write index */
   138e6:	70e3      	strb	r3, [r4, #3]
	if (ull_ref_get(&conn->ull)) {
   138e8:	b929      	cbnz	r1, 138f6 <ll_tx_mem_enqueue+0x5a>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   138ea:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   138ee:	2b00      	cmp	r3, #0
   138f0:	db0b      	blt.n	1390a <ll_tx_mem_enqueue+0x6e>
	return 0;
   138f2:	2000      	movs	r0, #0
}
   138f4:	bd70      	pop	{r4, r5, r6, pc}
		mfy.param = conn;
   138f6:	4b0e      	ldr	r3, [pc, #56]	; (13930 <ll_tx_mem_enqueue+0x94>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   138f8:	2101      	movs	r1, #1
   138fa:	2003      	movs	r0, #3
		mfy.param = conn;
   138fc:	609d      	str	r5, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   138fe:	f7fa fe2f 	bl	e560 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   13902:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   13906:	2b00      	cmp	r3, #0
   13908:	daf3      	bge.n	138f2 <ll_tx_mem_enqueue+0x56>
		ull_slave_latency_cancel(conn, handle);
   1390a:	4628      	mov	r0, r5
   1390c:	2100      	movs	r1, #0
   1390e:	f002 fc21 	bl	16154 <ull_slave_latency_cancel>
	return 0;
   13912:	2000      	movs	r0, #0
}
   13914:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   13916:	f06f 0015 	mvn.w	r0, #21
}
   1391a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   1391c:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   13920:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   13922:	f06f 0015 	mvn.w	r0, #21
}
   13926:	4770      	bx	lr
   13928:	20001218 	.word	0x20001218
   1392c:	200004f8 	.word	0x200004f8
   13930:	2000052c 	.word	0x2000052c

00013934 <ll_conn_update>:
{
   13934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13938:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1393c:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   13940:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   13944:	2800      	cmp	r0, #0
   13946:	d155      	bne.n	139f4 <ll_conn_update+0xc0>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13948:	460c      	mov	r4, r1
   1394a:	4615      	mov	r5, r2
   1394c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   13950:	4602      	mov	r2, r0
   13952:	4841      	ldr	r0, [pc, #260]	; (13a58 <ll_conn_update+0x124>)
   13954:	461e      	mov	r6, r3
   13956:	f7fa fd59 	bl	e40c <mem_get>
   1395a:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
   1395c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1395e:	2800      	cmp	r0, #0
   13960:	d148      	bne.n	139f4 <ll_conn_update+0xc0>
	if (!cmd) {
   13962:	bb3c      	cbnz	r4, 139b4 <ll_conn_update+0x80>
		if (!conn->llcp_conn_param.disabled &&
   13964:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
   13968:	06d9      	lsls	r1, r3, #27
   1396a:	d44a      	bmi.n	13a02 <ll_conn_update+0xce>
		    (!conn->common.fex_valid ||
   1396c:	f89c 30d8 	ldrb.w	r3, [ip, #216]	; 0xd8
		if (!conn->llcp_conn_param.disabled &&
   13970:	07da      	lsls	r2, r3, #31
   13972:	d442      	bmi.n	139fa <ll_conn_update+0xc6>
			if ((conn->llcp_conn_param.req ==
   13974:	f89c 3184 	ldrb.w	r3, [ip, #388]	; 0x184
			     conn->llcp_conn_param.ack) ||
   13978:	f89c 2185 	ldrb.w	r2, [ip, #389]	; 0x185
			if (conn->llcp_conn_param.req !=
   1397c:	4293      	cmp	r3, r2
   1397e:	d136      	bne.n	139ee <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   13980:	f8bc 2186 	ldrh.w	r2, [ip, #390]	; 0x186
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13984:	f99c 1039 	ldrsb.w	r1, [ip, #57]	; 0x39
			conn->llcp_conn_param.interval_min = interval_min;
   13988:	f8ac 6188 	strh.w	r6, [ip, #392]	; 0x188
			conn->llcp_conn_param.state = cmd;
   1398c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
			conn->llcp_conn_param.req++;
   13990:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   13992:	f042 0208 	orr.w	r2, r2, #8
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13996:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
   13998:	f8ac 918a 	strh.w	r9, [ip, #394]	; 0x18a
			conn->llcp_conn_param.latency = latency;
   1399c:	f8ac 818c 	strh.w	r8, [ip, #396]	; 0x18c
			conn->llcp_conn_param.timeout = timeout;
   139a0:	f8ac 718e 	strh.w	r7, [ip, #398]	; 0x18e
			conn->llcp_conn_param.state = cmd;
   139a4:	f8ac 2186 	strh.w	r2, [ip, #390]	; 0x186
			conn->llcp_conn_param.req++;
   139a8:	f88c 3184 	strb.w	r3, [ip, #388]	; 0x184
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   139ac:	db4e      	blt.n	13a4c <ll_conn_update+0x118>
	return 0;
   139ae:	2000      	movs	r0, #0
}
   139b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cmd--;
   139b4:	3c01      	subs	r4, #1
		if (cmd) {
   139b6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
			if ((conn->llcp_conn_param.req ==
   139ba:	f89c 3184 	ldrb.w	r3, [ip, #388]	; 0x184
			     conn->llcp_conn_param.ack) ||
   139be:	f89c 2185 	ldrb.w	r2, [ip, #389]	; 0x185
		if (cmd) {
   139c2:	d0db      	beq.n	1397c <ll_conn_update+0x48>
			if ((conn->llcp_conn_param.req ==
   139c4:	429a      	cmp	r2, r3
   139c6:	d012      	beq.n	139ee <ll_conn_update+0xba>
			    (conn->llcp_conn_param.state !=
   139c8:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
			     conn->llcp_conn_param.ack) ||
   139cc:	f003 0207 	and.w	r2, r3, #7
   139d0:	2a03      	cmp	r2, #3
   139d2:	d10c      	bne.n	139ee <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   139d4:	f004 0407 	and.w	r4, r4, #7
   139d8:	f023 030f 	bic.w	r3, r3, #15
   139dc:	f044 0408 	orr.w	r4, r4, #8
   139e0:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
   139e2:	f88c 5187 	strb.w	r5, [ip, #391]	; 0x187
			conn->llcp_conn_param.state = cmd;
   139e6:	f88c 4186 	strb.w	r4, [ip, #390]	; 0x186
}
   139ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   139ee:	200c      	movs	r0, #12
}
   139f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   139f4:	2002      	movs	r0, #2
}
   139f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		     (conn->llcp_feature.features_conn &
   139fa:	f8dc 3128 	ldr.w	r3, [ip, #296]	; 0x128
		    (!conn->common.fex_valid ||
   139fe:	079b      	lsls	r3, r3, #30
   13a00:	d4b8      	bmi.n	13974 <ll_conn_update+0x40>
		} else if (conn->lll.role) {
   13a02:	f99c 3039 	ldrsb.w	r3, [ip, #57]	; 0x39
   13a06:	2b00      	cmp	r3, #0
   13a08:	db1e      	blt.n	13a48 <ll_conn_update+0x114>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   13a0a:	f89c 210c 	ldrb.w	r2, [ip, #268]	; 0x10c
   13a0e:	f89c 310d 	ldrb.w	r3, [ip, #269]	; 0x10d
   13a12:	4293      	cmp	r3, r2
   13a14:	d1eb      	bne.n	139ee <ll_conn_update+0xba>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   13a16:	f89c 210e 	ldrb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.interval = interval_max;
   13a1a:	f8ac 9110 	strh.w	r9, [ip, #272]	; 0x110
		conn->llcp_cu.req++;
   13a1e:	3301      	adds	r3, #1
   13a20:	f88c 310c 	strb.w	r3, [ip, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   13a24:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.win_size = 1U;
   13a28:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   13a2a:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   13a2e:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
   13a30:	f88c 311c 	strb.w	r3, [ip, #284]	; 0x11c
		conn->llcp_cu.latency = latency;
   13a34:	f8ac 8112 	strh.w	r8, [ip, #274]	; 0x112
		conn->llcp_cu.timeout = timeout;
   13a38:	f8ac 7114 	strh.w	r7, [ip, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   13a3c:	f88c 210e 	strb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   13a40:	f8cc 0118 	str.w	r0, [ip, #280]	; 0x118
}
   13a44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   13a48:	201a      	movs	r0, #26
   13a4a:	e7d1      	b.n	139f0 <ll_conn_update+0xbc>
				ull_slave_latency_cancel(conn, handle);
   13a4c:	4660      	mov	r0, ip
   13a4e:	2100      	movs	r1, #0
   13a50:	f002 fb80 	bl	16154 <ull_slave_latency_cancel>
	return 0;
   13a54:	2000      	movs	r0, #0
   13a56:	e7cb      	b.n	139f0 <ll_conn_update+0xbc>
   13a58:	20001218 	.word	0x20001218

00013a5c <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13a5c:	b9d0      	cbnz	r0, 13a94 <ll_chm_get+0x38>
{
   13a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13a60:	4602      	mov	r2, r0
   13a62:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13a64:	480c      	ldr	r0, [pc, #48]	; (13a98 <ll_chm_get+0x3c>)
   13a66:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   13a6a:	f7fa fccf 	bl	e40c <mem_get>
	if (conn->lll.handle != handle) {
   13a6e:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13a70:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   13a72:	b96e      	cbnz	r6, 13a90 <ll_chm_get+0x34>
		memcpy(chm, conn->lll.data_chan_map,
   13a74:	f100 0734 	add.w	r7, r0, #52	; 0x34
		conn->chm_updated = 0U;
   13a78:	f884 61d8 	strb.w	r6, [r4, #472]	; 0x1d8
		memcpy(chm, conn->lll.data_chan_map,
   13a7c:	2205      	movs	r2, #5
   13a7e:	4639      	mov	r1, r7
   13a80:	4628      	mov	r0, r5
   13a82:	f00b fd29 	bl	1f4d8 <memcpy>
	} while (conn->chm_updated);
   13a86:	f894 01d8 	ldrb.w	r0, [r4, #472]	; 0x1d8
   13a8a:	2800      	cmp	r0, #0
   13a8c:	d1f4      	bne.n	13a78 <ll_chm_get+0x1c>
}
   13a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13a90:	2002      	movs	r0, #2
}
   13a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13a94:	2002      	movs	r0, #2
}
   13a96:	4770      	bx	lr
   13a98:	20001218 	.word	0x20001218

00013a9c <ll_terminate_ind_send>:
	switch (reason) {
   13a9c:	2929      	cmp	r1, #41	; 0x29
{
   13a9e:	b538      	push	{r3, r4, r5, lr}
   13aa0:	460d      	mov	r5, r1
   13aa2:	4604      	mov	r4, r0
	switch (reason) {
   13aa4:	d819      	bhi.n	13ada <ll_terminate_ind_send+0x3e>
   13aa6:	2904      	cmp	r1, #4
   13aa8:	d919      	bls.n	13ade <ll_terminate_ind_send+0x42>
   13aaa:	1f4b      	subs	r3, r1, #5
   13aac:	2b24      	cmp	r3, #36	; 0x24
   13aae:	d816      	bhi.n	13ade <ll_terminate_ind_send+0x42>
   13ab0:	e8df f003 	tbb	[pc, r3]
   13ab4:	15151517 	.word	0x15151517
   13ab8:	15151515 	.word	0x15151515
   13abc:	15151515 	.word	0x15151515
   13ac0:	17171515 	.word	0x17171515
   13ac4:	15151517 	.word	0x15151517
   13ac8:	15151715 	.word	0x15151715
   13acc:	15151515 	.word	0x15151515
   13ad0:	15151515 	.word	0x15151515
   13ad4:	15151515 	.word	0x15151515
   13ad8:	17          	.byte	0x17
   13ad9:	00          	.byte	0x00
   13ada:	293b      	cmp	r1, #59	; 0x3b
   13adc:	d001      	beq.n	13ae2 <ll_terminate_ind_send+0x46>
   13ade:	2012      	movs	r0, #18
}
   13ae0:	bd38      	pop	{r3, r4, r5, pc}
	if (handle >= CONFIG_BT_MAX_CONN) {
   13ae2:	b9a4      	cbnz	r4, 13b0e <ll_terminate_ind_send+0x72>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13ae4:	4622      	mov	r2, r4
   13ae6:	480d      	ldr	r0, [pc, #52]	; (13b1c <ll_terminate_ind_send+0x80>)
   13ae8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   13aec:	f7fa fc8e 	bl	e40c <mem_get>
	if (conn->lll.handle != handle) {
   13af0:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   13af2:	b962      	cbnz	r2, 13b0e <ll_terminate_ind_send+0x72>
	conn->llcp_terminate.req++;
   13af4:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   13af8:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
   13afc:	f880 5142 	strb.w	r5, [r0, #322]	; 0x142
	conn->llcp_terminate.req++;
   13b00:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   13b02:	2b00      	cmp	r3, #0
	conn->llcp_terminate.req++;
   13b04:	f880 2140 	strb.w	r2, [r0, #320]	; 0x140
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   13b08:	db03      	blt.n	13b12 <ll_terminate_ind_send+0x76>
	return 0;
   13b0a:	4620      	mov	r0, r4
}
   13b0c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13b0e:	2002      	movs	r0, #2
}
   13b10:	bd38      	pop	{r3, r4, r5, pc}
		ull_slave_latency_cancel(conn, handle);
   13b12:	4621      	mov	r1, r4
   13b14:	f002 fb1e 	bl	16154 <ull_slave_latency_cancel>
	return 0;
   13b18:	4620      	mov	r0, r4
}
   13b1a:	bd38      	pop	{r3, r4, r5, pc}
   13b1c:	20001218 	.word	0x20001218

00013b20 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13b20:	bb00      	cbnz	r0, 13b64 <ll_feature_req_send+0x44>
{
   13b22:	b510      	push	{r4, lr}
   13b24:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13b26:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   13b2a:	480f      	ldr	r0, [pc, #60]	; (13b68 <ll_feature_req_send+0x48>)
   13b2c:	f7fa fc6e 	bl	e40c <mem_get>
	if (conn->lll.handle != handle) {
   13b30:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   13b32:	b984      	cbnz	r4, 13b56 <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   13b34:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
   13b38:	f890 2121 	ldrb.w	r2, [r0, #289]	; 0x121
   13b3c:	428a      	cmp	r2, r1
   13b3e:	d108      	bne.n	13b52 <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13b40:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
   13b44:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13b46:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
   13b48:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13b4c:	db05      	blt.n	13b5a <ll_feature_req_send+0x3a>
	return 0;
   13b4e:	4620      	mov	r0, r4
}
   13b50:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13b52:	200c      	movs	r0, #12
}
   13b54:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13b56:	2002      	movs	r0, #2
}
   13b58:	bd10      	pop	{r4, pc}
		ull_slave_latency_cancel(conn, handle);
   13b5a:	4621      	mov	r1, r4
   13b5c:	f002 fafa 	bl	16154 <ull_slave_latency_cancel>
	return 0;
   13b60:	4620      	mov	r0, r4
}
   13b62:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13b64:	2002      	movs	r0, #2
}
   13b66:	4770      	bx	lr
   13b68:	20001218 	.word	0x20001218

00013b6c <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13b6c:	bb00      	cbnz	r0, 13bb0 <ll_version_ind_send+0x44>
{
   13b6e:	b510      	push	{r4, lr}
   13b70:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13b72:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   13b76:	480f      	ldr	r0, [pc, #60]	; (13bb4 <ll_version_ind_send+0x48>)
   13b78:	f7fa fc48 	bl	e40c <mem_get>
	if (conn->lll.handle != handle) {
   13b7c:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   13b7e:	b984      	cbnz	r4, 13ba2 <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   13b80:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
   13b84:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
   13b88:	428a      	cmp	r2, r1
   13b8a:	d108      	bne.n	13b9e <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   13b8c:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_version.req++;
   13b90:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   13b92:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
   13b94:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   13b98:	db05      	blt.n	13ba6 <ll_version_ind_send+0x3a>
	return 0;
   13b9a:	4620      	mov	r0, r4
}
   13b9c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13b9e:	200c      	movs	r0, #12
}
   13ba0:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13ba2:	2002      	movs	r0, #2
}
   13ba4:	bd10      	pop	{r4, pc}
		ull_slave_latency_cancel(conn, handle);
   13ba6:	4621      	mov	r1, r4
   13ba8:	f002 fad4 	bl	16154 <ull_slave_latency_cancel>
	return 0;
   13bac:	4620      	mov	r0, r4
}
   13bae:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13bb0:	2002      	movs	r0, #2
}
   13bb2:	4770      	bx	lr
   13bb4:	20001218 	.word	0x20001218

00013bb8 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13bb8:	2800      	cmp	r0, #0
   13bba:	d14c      	bne.n	13c56 <ll_length_req_send+0x9e>
{
   13bbc:	b538      	push	{r3, r4, r5, lr}
   13bbe:	460d      	mov	r5, r1
   13bc0:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13bc2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   13bc6:	4602      	mov	r2, r0
   13bc8:	4824      	ldr	r0, [pc, #144]	; (13c5c <ll_length_req_send+0xa4>)
   13bca:	f7fa fc1f 	bl	e40c <mem_get>
	if (conn->lll.handle != handle) {
   13bce:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   13bd0:	bbc3      	cbnz	r3, 13c44 <ll_length_req_send+0x8c>
	if (conn->llcp_length.disabled ||
   13bd2:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   13bd6:	071a      	lsls	r2, r3, #28
   13bd8:	d432      	bmi.n	13c40 <ll_length_req_send+0x88>
	    (conn->common.fex_valid &&
   13bda:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
	if (conn->llcp_length.disabled ||
   13bde:	07d1      	lsls	r1, r2, #31
   13be0:	d503      	bpl.n	13bea <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
   13be2:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
	    (conn->common.fex_valid &&
   13be6:	0692      	lsls	r2, r2, #26
   13be8:	d52a      	bpl.n	13c40 <ll_length_req_send+0x88>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   13bea:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
   13bee:	f890 21ad 	ldrb.w	r2, [r0, #429]	; 0x1ad
   13bf2:	428a      	cmp	r2, r1
   13bf4:	d011      	beq.n	13c1a <ll_length_req_send+0x62>
		switch (conn->llcp_length.state) {
   13bf6:	f003 0307 	and.w	r3, r3, #7
   13bfa:	2b03      	cmp	r3, #3
   13bfc:	d004      	beq.n	13c08 <ll_length_req_send+0x50>
   13bfe:	3303      	adds	r3, #3
   13c00:	f003 0307 	and.w	r3, r3, #7
   13c04:	2b01      	cmp	r3, #1
   13c06:	d824      	bhi.n	13c52 <ll_length_req_send+0x9a>
			if (!conn->llcp_length.cache.tx_octets) {
   13c08:	f8b0 31b8 	ldrh.w	r3, [r0, #440]	; 0x1b8
   13c0c:	bb0b      	cbnz	r3, 13c52 <ll_length_req_send+0x9a>
				conn->llcp_length.cache.tx_octets = tx_octets;
   13c0e:	f8a0 51b8 	strh.w	r5, [r0, #440]	; 0x1b8
				conn->llcp_length.cache.tx_time = tx_time;
   13c12:	f8a0 41ba 	strh.w	r4, [r0, #442]	; 0x1ba
				return 0;
   13c16:	4618      	mov	r0, r3
}
   13c18:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   13c1a:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
	conn->llcp_length.tx_octets = tx_octets;
   13c1e:	f8a0 51b2 	strh.w	r5, [r0, #434]	; 0x1b2
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   13c22:	f36f 0302 	bfc	r3, #0, #3
   13c26:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   13c2a:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_length.tx_time = tx_time;
   13c2e:	f8a0 41b6 	strh.w	r4, [r0, #438]	; 0x1b6
	conn->llcp_length.req++;
   13c32:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   13c34:	2b00      	cmp	r3, #0
	conn->llcp_length.req++;
   13c36:	f880 21ac 	strb.w	r2, [r0, #428]	; 0x1ac
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   13c3a:	db05      	blt.n	13c48 <ll_length_req_send+0x90>
	return 0;
   13c3c:	2000      	movs	r0, #0
}
   13c3e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   13c40:	201a      	movs	r0, #26
}
   13c42:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13c44:	2002      	movs	r0, #2
}
   13c46:	bd38      	pop	{r3, r4, r5, pc}
		ull_slave_latency_cancel(conn, handle);
   13c48:	2100      	movs	r1, #0
   13c4a:	f002 fa83 	bl	16154 <ull_slave_latency_cancel>
	return 0;
   13c4e:	2000      	movs	r0, #0
}
   13c50:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   13c52:	200c      	movs	r0, #12
}
   13c54:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13c56:	2002      	movs	r0, #2
}
   13c58:	4770      	bx	lr
   13c5a:	bf00      	nop
   13c5c:	20001218 	.word	0x20001218

00013c60 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   13c60:	4a03      	ldr	r2, [pc, #12]	; (13c70 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   13c62:	4b04      	ldr	r3, [pc, #16]	; (13c74 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   13c64:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   13c66:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   13c68:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   13c6a:	800b      	strh	r3, [r1, #0]
}
   13c6c:	4770      	bx	lr
   13c6e:	bf00      	nop
   13c70:	20002dac 	.word	0x20002dac
   13c74:	20002dae 	.word	0x20002dae

00013c78 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   13c78:	4a02      	ldr	r2, [pc, #8]	; (13c84 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   13c7a:	4b03      	ldr	r3, [pc, #12]	; (13c88 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   13c7c:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   13c7e:	8019      	strh	r1, [r3, #0]
}
   13c80:	2000      	movs	r0, #0
   13c82:	4770      	bx	lr
   13c84:	20002dac 	.word	0x20002dac
   13c88:	20002dae 	.word	0x20002dae

00013c8c <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   13c8c:	f04f 0c1b 	mov.w	ip, #27
   13c90:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   13c94:	f44f 70a0 	mov.w	r0, #320	; 0x140
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   13c98:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   13c9c:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   13c9e:	8018      	strh	r0, [r3, #0]
}
   13ca0:	4770      	bx	lr
   13ca2:	bf00      	nop

00013ca4 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13ca4:	b9c0      	cbnz	r0, 13cd8 <ll_phy_get+0x34>
{
   13ca6:	b538      	push	{r3, r4, r5, lr}
   13ca8:	460d      	mov	r5, r1
   13caa:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13cac:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   13cb0:	4602      	mov	r2, r0
   13cb2:	480a      	ldr	r0, [pc, #40]	; (13cdc <ll_phy_get+0x38>)
   13cb4:	f7fa fbaa 	bl	e40c <mem_get>
   13cb8:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
   13cba:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   13cbc:	b950      	cbnz	r0, 13cd4 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   13cbe:	f89c 2060 	ldrb.w	r2, [ip, #96]	; 0x60
   13cc2:	f3c2 0302 	ubfx	r3, r2, #0, #3
   13cc6:	702b      	strb	r3, [r5, #0]
	*rx = conn->lll.phy_rx;
   13cc8:	f89c 3061 	ldrb.w	r3, [ip, #97]	; 0x61
   13ccc:	f3c3 0302 	ubfx	r3, r3, #0, #3
   13cd0:	7023      	strb	r3, [r4, #0]
}
   13cd2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13cd4:	2002      	movs	r0, #2
}
   13cd6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13cd8:	2002      	movs	r0, #2
}
   13cda:	4770      	bx	lr
   13cdc:	20001218 	.word	0x20001218

00013ce0 <ll_phy_default_set>:
	default_phy_tx = tx;
   13ce0:	4a02      	ldr	r2, [pc, #8]	; (13cec <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   13ce2:	4b03      	ldr	r3, [pc, #12]	; (13cf0 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   13ce4:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   13ce6:	7019      	strb	r1, [r3, #0]
}
   13ce8:	2000      	movs	r0, #0
   13cea:	4770      	bx	lr
   13cec:	20003560 	.word	0x20003560
   13cf0:	2000355f 	.word	0x2000355f

00013cf4 <ll_phy_req_send>:
{
   13cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   13cf6:	2800      	cmp	r0, #0
   13cf8:	d144      	bne.n	13d84 <ll_phy_req_send+0x90>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13cfa:	460c      	mov	r4, r1
   13cfc:	4616      	mov	r6, r2
   13cfe:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   13d02:	4602      	mov	r2, r0
   13d04:	4823      	ldr	r0, [pc, #140]	; (13d94 <ll_phy_req_send+0xa0>)
   13d06:	461f      	mov	r7, r3
   13d08:	f7fa fb80 	bl	e40c <mem_get>
	if (conn->lll.handle != handle) {
   13d0c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   13d0e:	bbcb      	cbnz	r3, 13d84 <ll_phy_req_send+0x90>
	if (conn->llcp_phy.disabled ||
   13d10:	f890 51bf 	ldrb.w	r5, [r0, #447]	; 0x1bf
   13d14:	f015 0508 	ands.w	r5, r5, #8
   13d18:	d131      	bne.n	13d7e <ll_phy_req_send+0x8a>
	    (conn->common.fex_valid &&
   13d1a:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
	if (conn->llcp_phy.disabled ||
   13d1e:	07db      	lsls	r3, r3, #31
   13d20:	d504      	bpl.n	13d2c <ll_phy_req_send+0x38>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
   13d22:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   13d26:	f413 6f10 	tst.w	r3, #2304	; 0x900
   13d2a:	d028      	beq.n	13d7e <ll_phy_req_send+0x8a>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   13d2c:	f890 31bc 	ldrb.w	r3, [r0, #444]	; 0x1bc
   13d30:	f890 c1bd 	ldrb.w	ip, [r0, #445]	; 0x1bd
   13d34:	459c      	cmp	ip, r3
   13d36:	d11f      	bne.n	13d78 <ll_phy_req_send+0x84>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   13d38:	f004 0107 	and.w	r1, r4, #7
   13d3c:	f8b0 21be 	ldrh.w	r2, [r0, #446]	; 0x1be
   13d40:	0089      	lsls	r1, r1, #2
   13d42:	f007 0307 	and.w	r3, r7, #7
   13d46:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
   13d4a:	ea41 1443 	orr.w	r4, r1, r3, lsl #5
   13d4e:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
   13d52:	f006 0301 	and.w	r3, r6, #1
   13d56:	f022 0207 	bic.w	r2, r2, #7
   13d5a:	ea44 2343 	orr.w	r3, r4, r3, lsl #9
   13d5e:	4313      	orrs	r3, r2
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   13d60:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   13d64:	f8a0 31be 	strh.w	r3, [r0, #446]	; 0x1be
	conn->llcp_phy.req++;
   13d68:	f10c 0c01 	add.w	ip, ip, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   13d6c:	2a00      	cmp	r2, #0
	conn->llcp_phy.req++;
   13d6e:	f880 c1bc 	strb.w	ip, [r0, #444]	; 0x1bc
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   13d72:	db0a      	blt.n	13d8a <ll_phy_req_send+0x96>
}
   13d74:	4628      	mov	r0, r5
   13d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13d78:	250c      	movs	r5, #12
}
   13d7a:	4628      	mov	r0, r5
   13d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   13d7e:	251a      	movs	r5, #26
}
   13d80:	4628      	mov	r0, r5
   13d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13d84:	2502      	movs	r5, #2
}
   13d86:	4628      	mov	r0, r5
   13d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ull_slave_latency_cancel(conn, handle);
   13d8a:	2100      	movs	r1, #0
   13d8c:	f002 f9e2 	bl	16154 <ull_slave_latency_cancel>
}
   13d90:	4628      	mov	r0, r5
   13d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13d94:	20001218 	.word	0x20001218

00013d98 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13d98:	b9d8      	cbnz	r0, 13dd2 <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13d9a:	4602      	mov	r2, r0
{
   13d9c:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13d9e:	480e      	ldr	r0, [pc, #56]	; (13dd8 <ll_apto_get+0x40>)
   13da0:	460c      	mov	r4, r1
   13da2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   13da6:	f7fa fb31 	bl	e40c <mem_get>
	if (conn->lll.handle != handle) {
   13daa:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   13dac:	b97a      	cbnz	r2, 13dce <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   13dae:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   13db0:	f8b0 30ce 	ldrh.w	r3, [r0, #206]	; 0xce
   13db4:	fb01 f303 	mul.w	r3, r1, r3
	return 0;
   13db8:	4610      	mov	r0, r2
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   13dba:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   13dbe:	4a07      	ldr	r2, [pc, #28]	; (13ddc <ll_apto_get+0x44>)
   13dc0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   13dc4:	fba2 2303 	umull	r2, r3, r2, r3
   13dc8:	099b      	lsrs	r3, r3, #6
   13dca:	8023      	strh	r3, [r4, #0]
}
   13dcc:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13dce:	2002      	movs	r0, #2
}
   13dd0:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13dd2:	2002      	movs	r0, #2
}
   13dd4:	4770      	bx	lr
   13dd6:	bf00      	nop
   13dd8:	20001218 	.word	0x20001218
   13ddc:	10624dd3 	.word	0x10624dd3

00013de0 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13de0:	b9e0      	cbnz	r0, 13e1c <ll_apto_set+0x3c>
{
   13de2:	b510      	push	{r4, lr}
   13de4:	4602      	mov	r2, r0
   13de6:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13de8:	480d      	ldr	r0, [pc, #52]	; (13e20 <ll_apto_set+0x40>)
   13dea:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   13dee:	f7fa fb0d 	bl	e40c <mem_get>
   13df2:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
   13df4:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   13df6:	b978      	cbnz	r0, 13e18 <ll_apto_set+0x38>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   13df8:	f8bc e02a 	ldrh.w	lr, [ip, #42]	; 0x2a
   13dfc:	f240 43e2 	movw	r3, #1250	; 0x4e2
   13e00:	fb03 fe0e 	mul.w	lr, r3, lr
   13e04:	f242 7310 	movw	r3, #10000	; 0x2710
   13e08:	fb03 e104 	mla	r1, r3, r4, lr
   13e0c:	1e4b      	subs	r3, r1, #1
   13e0e:	fbb3 f3fe 	udiv	r3, r3, lr
   13e12:	f8ac 30ce 	strh.w	r3, [ip, #206]	; 0xce
}
   13e16:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13e18:	2002      	movs	r0, #2
}
   13e1a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13e1c:	2002      	movs	r0, #2
}
   13e1e:	4770      	bx	lr
   13e20:	20001218 	.word	0x20001218

00013e24 <ull_conn_init>:
	err = init_reset();
   13e24:	f7fe bf8c 	b.w	12d40 <init_reset>

00013e28 <ull_conn_reset>:
{
   13e28:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13e2a:	2200      	movs	r2, #0
   13e2c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   13e30:	4813      	ldr	r0, [pc, #76]	; (13e80 <ull_conn_reset+0x58>)
   13e32:	f7fa faeb 	bl	e40c <mem_get>
   13e36:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   13e38:	f100 021c 	add.w	r2, r0, #28
   13e3c:	4601      	mov	r1, r0
   13e3e:	2003      	movs	r0, #3
   13e40:	f7fe f978 	bl	12134 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   13e44:	b108      	cbz	r0, 13e4a <ull_conn_reset+0x22>
   13e46:	3045      	adds	r0, #69	; 0x45
   13e48:	d10b      	bne.n	13e62 <ull_conn_reset+0x3a>
	MFIFO_INIT(conn_tx);
   13e4a:	480e      	ldr	r0, [pc, #56]	; (13e84 <ull_conn_reset+0x5c>)
	MFIFO_INIT(conn_ack);
   13e4c:	490e      	ldr	r1, [pc, #56]	; (13e88 <ull_conn_reset+0x60>)
	conn_upd_curr = NULL;
   13e4e:	4a0f      	ldr	r2, [pc, #60]	; (13e8c <ull_conn_reset+0x64>)
	conn->lll.link_tx_free = NULL;
   13e50:	2300      	movs	r3, #0
	MFIFO_INIT(conn_tx);
   13e52:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   13e54:	804b      	strh	r3, [r1, #2]
	conn->lll.link_tx_free = NULL;
   13e56:	6763      	str	r3, [r4, #116]	; 0x74
}
   13e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   13e5c:	6013      	str	r3, [r2, #0]
	err = init_reset();
   13e5e:	f7fe bf6f 	b.w	12d40 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   13e62:	4a0b      	ldr	r2, [pc, #44]	; (13e90 <ull_conn_reset+0x68>)
   13e64:	490b      	ldr	r1, [pc, #44]	; (13e94 <ull_conn_reset+0x6c>)
   13e66:	480c      	ldr	r0, [pc, #48]	; (13e98 <ull_conn_reset+0x70>)
   13e68:	f240 732d 	movw	r3, #1837	; 0x72d
   13e6c:	f009 f8e2 	bl	1d034 <printk>
   13e70:	4040      	eors	r0, r0
   13e72:	f380 8811 	msr	BASEPRI, r0
   13e76:	f04f 0003 	mov.w	r0, #3
   13e7a:	df02      	svc	2
   13e7c:	e7e5      	b.n	13e4a <ull_conn_reset+0x22>
   13e7e:	bf00      	nop
   13e80:	20001218 	.word	0x20001218
   13e84:	200004f8 	.word	0x200004f8
   13e88:	200004b4 	.word	0x200004b4
   13e8c:	200023a8 	.word	0x200023a8
   13e90:	00023588 	.word	0x00023588
   13e94:	00023698 	.word	0x00023698
   13e98:	000230b4 	.word	0x000230b4

00013e9c <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   13e9c:	4b01      	ldr	r3, [pc, #4]	; (13ea4 <ull_conn_default_tx_octets_get+0x8>)
}
   13e9e:	8818      	ldrh	r0, [r3, #0]
   13ea0:	4770      	bx	lr
   13ea2:	bf00      	nop
   13ea4:	20002dac 	.word	0x20002dac

00013ea8 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   13ea8:	4b01      	ldr	r3, [pc, #4]	; (13eb0 <ull_conn_default_tx_time_get+0x8>)
}
   13eaa:	8818      	ldrh	r0, [r3, #0]
   13eac:	4770      	bx	lr
   13eae:	bf00      	nop
   13eb0:	20002dae 	.word	0x20002dae

00013eb4 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   13eb4:	4b01      	ldr	r3, [pc, #4]	; (13ebc <ull_conn_default_phy_tx_get+0x8>)
}
   13eb6:	7818      	ldrb	r0, [r3, #0]
   13eb8:	4770      	bx	lr
   13eba:	bf00      	nop
   13ebc:	20003560 	.word	0x20003560

00013ec0 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   13ec0:	4b01      	ldr	r3, [pc, #4]	; (13ec8 <ull_conn_default_phy_rx_get+0x8>)
}
   13ec2:	7818      	ldrb	r0, [r3, #0]
   13ec4:	4770      	bx	lr
   13ec6:	bf00      	nop
   13ec8:	2000355f 	.word	0x2000355f

00013ecc <ull_conn_setup>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   13ecc:	688b      	ldr	r3, [r1, #8]
   13ece:	685b      	ldr	r3, [r3, #4]
	switch (lll->role) {
   13ed0:	f893 c01d 	ldrb.w	ip, [r3, #29]
   13ed4:	ea5f 1cdc 	movs.w	ip, ip, lsr #7
   13ed8:	d10e      	bne.n	13ef8 <ull_conn_setup+0x2c>
{
   13eda:	b510      	push	{r4, lr}
		LL_ASSERT(0);
   13edc:	4a08      	ldr	r2, [pc, #32]	; (13f00 <ull_conn_setup+0x34>)
   13ede:	4909      	ldr	r1, [pc, #36]	; (13f04 <ull_conn_setup+0x38>)
   13ee0:	4809      	ldr	r0, [pc, #36]	; (13f08 <ull_conn_setup+0x3c>)
   13ee2:	f240 3341 	movw	r3, #833	; 0x341
   13ee6:	f009 f8a5 	bl	1d034 <printk>
   13eea:	4040      	eors	r0, r0
   13eec:	f380 8811 	msr	BASEPRI, r0
   13ef0:	f04f 0003 	mov.w	r0, #3
   13ef4:	df02      	svc	2
}
   13ef6:	bd10      	pop	{r4, pc}
		ull_slave_setup(link, rx, ftr, lll);
   13ef8:	460a      	mov	r2, r1
   13efa:	3208      	adds	r2, #8
   13efc:	f7f0 ba4c 	b.w	4398 <ull_slave_setup>
   13f00:	00023588 	.word	0x00023588
   13f04:	0002314c 	.word	0x0002314c
   13f08:	000230b4 	.word	0x000230b4

00013f0c <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   13f0c:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   13f0e:	88da      	ldrh	r2, [r3, #6]
   13f10:	2a00      	cmp	r2, #0
   13f12:	f040 80cf 	bne.w	140b4 <ull_conn_rx+0x1a8>
{
   13f16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f1a:	460f      	mov	r7, r1
   13f1c:	b083      	sub	sp, #12
   13f1e:	4606      	mov	r6, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13f20:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   13f24:	48ac      	ldr	r0, [pc, #688]	; (141d8 <ull_conn_rx+0x2cc>)
   13f26:	f7fa fa71 	bl	e40c <mem_get>
	if (conn->lll.handle != handle) {
   13f2a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13f2c:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   13f2e:	2b00      	cmp	r3, #0
   13f30:	f040 80b9 	bne.w	140a6 <ull_conn_rx+0x19a>
	pdu_rx = (void *)(*rx)->pdu;
   13f34:	683d      	ldr	r5, [r7, #0]

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   13f36:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
	switch (pdu_rx->ll_id) {
   13f3a:	7f29      	ldrb	r1, [r5, #28]
   13f3c:	f001 0103 	and.w	r1, r1, #3
   13f40:	2903      	cmp	r1, #3
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   13f42:	f002 0001 	and.w	r0, r2, #1
	switch (pdu_rx->ll_id) {
   13f46:	d126      	bne.n	13f96 <ull_conn_rx+0x8a>
	opcode = pdu_rx->llctrl.opcode;
   13f48:	f895 801f 	ldrb.w	r8, [r5, #31]
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   13f4c:	b3c8      	cbz	r0, 13fc2 <ull_conn_rx+0xb6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   13f4e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   13f52:	2b00      	cmp	r3, #0
		((!conn->llcp_enc.refresh &&
   13f54:	f002 0104 	and.w	r1, r2, #4
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   13f58:	f2c0 80b0 	blt.w	140bc <ull_conn_rx+0x1b0>
	return (!conn->lll.role &&
   13f5c:	2900      	cmp	r1, #0
   13f5e:	f040 80db 	bne.w	14118 <ull_conn_rx+0x20c>
		((!conn->llcp_enc.refresh &&
   13f62:	f1b8 0f02 	cmp.w	r8, #2
   13f66:	f000 83dd 	beq.w	14724 <ull_conn_rx+0x818>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   13f6a:	f1b8 0f05 	cmp.w	r8, #5
   13f6e:	d04b      	beq.n	14008 <ull_conn_rx+0xfc>
   13f70:	f1b8 0f06 	cmp.w	r8, #6
   13f74:	f000 8553 	beq.w	14a1e <ull_conn_rx+0xb12>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   13f78:	f1b8 0f0d 	cmp.w	r8, #13
   13f7c:	f000 81f0 	beq.w	14360 <ull_conn_rx+0x454>
   13f80:	f1b8 0f11 	cmp.w	r8, #17
   13f84:	f000 8398 	beq.w	146b8 <ull_conn_rx+0x7ac>
		conn->llcp_terminate.reason_peer =
   13f88:	223d      	movs	r2, #61	; 0x3d
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   13f8a:	2301      	movs	r3, #1
		conn->llcp_terminate.reason_peer =
   13f8c:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143

		return 0;
   13f90:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   13f92:	712b      	strb	r3, [r5, #4]
		return 0;
   13f94:	e007      	b.n	13fa6 <ull_conn_rx+0x9a>
	switch (pdu_rx->ll_id) {
   13f96:	b949      	cbnz	r1, 13fac <ull_conn_rx+0xa0>
		if (conn->llcp_enc.pause_rx) {
   13f98:	b110      	cbz	r0, 13fa0 <ull_conn_rx+0x94>
			conn->llcp_terminate.reason_peer =
   13f9a:	233d      	movs	r3, #61	; 0x3d
   13f9c:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   13fa0:	2301      	movs	r3, #1
   13fa2:	712b      	strb	r3, [r5, #4]
	return 0;
   13fa4:	2000      	movs	r0, #0
}
   13fa6:	b003      	add	sp, #12
   13fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   13fac:	2800      	cmp	r0, #0
   13fae:	d0f9      	beq.n	13fa4 <ull_conn_rx+0x98>
			conn->llcp_terminate.reason_peer =
   13fb0:	213d      	movs	r1, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   13fb2:	2201      	movs	r2, #1
	return 0;
   13fb4:	4618      	mov	r0, r3
			conn->llcp_terminate.reason_peer =
   13fb6:	f884 1143 	strb.w	r1, [r4, #323]	; 0x143
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   13fba:	712a      	strb	r2, [r5, #4]
}
   13fbc:	b003      	add	sp, #12
   13fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   13fc2:	f1b8 0f18 	cmp.w	r8, #24
   13fc6:	d81f      	bhi.n	14008 <ull_conn_rx+0xfc>
   13fc8:	e8df f018 	tbh	[pc, r8, lsl #1]
   13fcc:	03b8020d 	.word	0x03b8020d
   13fd0:	001903ac 	.word	0x001903ac
   13fd4:	001e001e 	.word	0x001e001e
   13fd8:	032b046b 	.word	0x032b046b
   13fdc:	041e02c8 	.word	0x041e02c8
   13fe0:	044c027a 	.word	0x044c027a
   13fe4:	01ca03ee 	.word	0x01ca03ee
   13fe8:	01bb001e 	.word	0x01bb001e
   13fec:	0376001e 	.word	0x0376001e
   13ff0:	01430351 	.word	0x01430351
   13ff4:	010a010a 	.word	0x010a010a
   13ff8:	001e018a 	.word	0x001e018a
   13ffc:	014d      	.short	0x014d
		break;

#if defined(CONFIG_BT_CTLR_LE_ENC)
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		if (!conn->lll.role ||
   13ffe:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   14002:	2b00      	cmp	r3, #0
   14004:	f2c0 80a0 	blt.w	14148 <ull_conn_rx+0x23c>
	if (conn->common.txn_lock) {
   14008:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   1400c:	f000 0602 	and.w	r6, r0, #2
   14010:	2e00      	cmp	r6, #0
   14012:	d1c5      	bne.n	13fa0 <ull_conn_rx+0x94>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14014:	4871      	ldr	r0, [pc, #452]	; (141dc <ull_conn_rx+0x2d0>)
   14016:	f7fa f9c7 	bl	e3a8 <mem_acquire>
	if (!tx) {
   1401a:	2800      	cmp	r0, #0
   1401c:	f000 84fb 	beq.w	14a16 <ull_conn_rx+0xb0a>
	conn->common.txn_lock = 1U;
   14020:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   14024:	f043 0302 	orr.w	r3, r3, #2
   14028:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1402c:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   1402e:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   14032:	f043 0303 	orr.w	r3, r3, #3
   14036:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   14038:	2302      	movs	r3, #2
   1403a:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   1403c:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   14040:	2307      	movs	r3, #7
   14042:	71c3      	strb	r3, [r0, #7]
	if (
   14044:	b1f2      	cbz	r2, 14084 <ull_conn_rx+0x178>
	    !conn->llcp_enc.pause_tx &&
   14046:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   1404a:	0799      	lsls	r1, r3, #30
   1404c:	d41a      	bmi.n	14084 <ull_conn_rx+0x178>
	    !conn->llcp_phy.pause_tx &&
   1404e:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   14052:	07db      	lsls	r3, r3, #31
   14054:	d416      	bmi.n	14084 <ull_conn_rx+0x178>
		if (conn->tx_head == conn->tx_data) {
   14056:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   1405a:	429a      	cmp	r2, r3
   1405c:	f000 84e9 	beq.w	14a32 <ull_conn_rx+0xb26>
		} else if (!conn->tx_ctrl) {
   14060:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   14064:	2b00      	cmp	r3, #0
   14066:	f000 8537 	beq.w	14ad8 <ull_conn_rx+0xbcc>
	tx->next = conn->tx_ctrl_last->next;
   1406a:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   1406e:	6813      	ldr	r3, [r2, #0]
   14070:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   14072:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   14074:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   14076:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1407a:	2a00      	cmp	r2, #0
   1407c:	d190      	bne.n	13fa0 <ull_conn_rx+0x94>
		conn->tx_data_last = tx;
   1407e:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   14082:	e78d      	b.n	13fa0 <ull_conn_rx+0x94>
		if (!conn->tx_ctrl) {
   14084:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   14088:	2b00      	cmp	r3, #0
   1408a:	f000 84ba 	beq.w	14a02 <ull_conn_rx+0xaf6>
	tx->next = conn->tx_ctrl_last->next;
   1408e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   14092:	681a      	ldr	r2, [r3, #0]
   14094:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   14096:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   14098:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   1409a:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1409e:	2a00      	cmp	r2, #0
   140a0:	f47f af7e 	bne.w	13fa0 <ull_conn_rx+0x94>
   140a4:	e7eb      	b.n	1407e <ull_conn_rx+0x172>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   140a6:	683b      	ldr	r3, [r7, #0]
   140a8:	2201      	movs	r2, #1
		return 0;
   140aa:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   140ac:	711a      	strb	r2, [r3, #4]
}
   140ae:	b003      	add	sp, #12
   140b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   140b4:	2201      	movs	r2, #1
   140b6:	711a      	strb	r2, [r3, #4]
		return 0;
   140b8:	2000      	movs	r0, #0
}
   140ba:	4770      	bx	lr
	       (conn->lll.role &&
   140bc:	bbc9      	cbnz	r1, 14132 <ull_conn_rx+0x226>
		((!conn->llcp_enc.refresh &&
   140be:	f1b8 0f07 	cmp.w	r8, #7
   140c2:	f000 82ae 	beq.w	14622 <ull_conn_rx+0x716>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   140c6:	f1b8 0f02 	cmp.w	r8, #2
   140ca:	f000 832b 	beq.w	14724 <ull_conn_rx+0x818>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   140ce:	f1b8 0f06 	cmp.w	r8, #6
   140d2:	f47f af51 	bne.w	13f78 <ull_conn_rx+0x6c>

		break;
#endif /* CONFIG_BT_CENTRAL */

	case PDU_DATA_LLCTRL_TYPE_START_ENC_RSP:
		if (PDU_DATA_LLCTRL_LEN(start_enc_rsp) != pdu_rx->len) {
   140d6:	7f6b      	ldrb	r3, [r5, #29]
   140d8:	2b01      	cmp	r3, #1
   140da:	d195      	bne.n	14008 <ull_conn_rx+0xfc>
			goto ull_conn_rx_unknown_rsp_send;
		}

		if (conn->lll.role) {
#if !defined(CONFIG_BT_CTLR_FAST_ENC)
			if ((conn->llcp_req != conn->llcp_ack) &&
   140dc:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   140e0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   140e4:	428b      	cmp	r3, r1
   140e6:	f001 80b9 	beq.w	1525c <ull_conn_rx+0x1350>
   140ea:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   140ee:	2b03      	cmp	r3, #3
   140f0:	d18a      	bne.n	14008 <ull_conn_rx+0xfc>
			    (conn->llcp_type != LLCP_ENCRYPTION)) {
				goto ull_conn_rx_unknown_rsp_send;
			}

			/* start enc rsp to be scheduled in slave  prepare */
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   140f2:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   140f6:	f36f 0301 	bfc	r3, #0, #2
   140fa:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_enc.pause_rx = 0U;
			conn->llcp_enc.pause_tx = 0U;
		}

		/* enqueue the start enc resp (encryption change/refresh) */
		if (conn->llcp_enc.refresh) {
   140fe:	0750      	lsls	r0, r2, #29
   14100:	d505      	bpl.n	1410e <ull_conn_rx+0x202>
			conn->llcp_enc.refresh = 0U;
   14102:	f36f 0282 	bfc	r2, #2, #1

			/* key refresh event */
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   14106:	2317      	movs	r3, #23
			conn->llcp_enc.refresh = 0U;
   14108:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   1410c:	712b      	strb	r3, [r5, #4]
				break;
			}
		}

		/* Procedure complete */
		conn->procedure_expire = 0U;
   1410e:	2300      	movs	r3, #0
   14110:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   14114:	4618      	mov	r0, r3
		break;
   14116:	e746      	b.n	13fa6 <ull_conn_rx+0x9a>
		 (conn->llcp_enc.refresh &&
   14118:	f1b8 0f02 	cmp.w	r8, #2
   1411c:	f000 8302 	beq.w	14724 <ull_conn_rx+0x818>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   14120:	f1b8 0f0b 	cmp.w	r8, #11
   14124:	f000 8480 	beq.w	14a28 <ull_conn_rx+0xb1c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   14128:	f1b8 0f04 	cmp.w	r8, #4
   1412c:	f47f af1d 	bne.w	13f6a <ull_conn_rx+0x5e>
   14130:	e76a      	b.n	14008 <ull_conn_rx+0xfc>
		 (conn->llcp_enc.refresh &&
   14132:	f1b8 0f02 	cmp.w	r8, #2
   14136:	f000 82f5 	beq.w	14724 <ull_conn_rx+0x818>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1413a:	f1b8 0f0b 	cmp.w	r8, #11
   1413e:	f000 848b 	beq.w	14a58 <ull_conn_rx+0xb4c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   14142:	f1b8 0f03 	cmp.w	r8, #3
   14146:	d1c2      	bne.n	140ce <ull_conn_rx+0x1c2>
		if (!conn->lll.role ||
   14148:	7f6b      	ldrb	r3, [r5, #29]
   1414a:	2b17      	cmp	r3, #23
   1414c:	f47f af5c 	bne.w	14008 <ull_conn_rx+0xfc>
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   14150:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   14154:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   14158:	1a9b      	subs	r3, r3, r2
   1415a:	f003 0303 	and.w	r3, r3, #3
   1415e:	2b02      	cmp	r3, #2
   14160:	f001 812e 	beq.w	153c0 <ull_conn_rx+0x14b4>
		memcpy(&conn->llcp_enc.rand[0],
   14164:	2208      	movs	r2, #8
   14166:	f105 0120 	add.w	r1, r5, #32
   1416a:	f204 1069 	addw	r0, r4, #361	; 0x169
   1416e:	f00b f9b3 	bl	1f4d8 <memcpy>
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   14172:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   14176:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   1417a:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1417e:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   14182:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   14186:	6839      	ldr	r1, [r7, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   14188:	2301      	movs	r3, #1
   1418a:	f363 0201 	bfi	r2, r3, #0, #2
   1418e:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   14192:	710b      	strb	r3, [r1, #4]
		conn->llcp_ack -= 2U;
   14194:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_type = LLCP_ENCRYPTION;
   14198:	2103      	movs	r1, #3
		conn->llcp_ack -= 2U;
   1419a:	3b02      	subs	r3, #2
   1419c:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		memcpy(&conn->llcp.encryption.skd[0],
   141a0:	2208      	movs	r2, #8
		conn->llcp_type = LLCP_ENCRYPTION;
   141a2:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
		memcpy(&conn->llcp.encryption.skd[0],
   141a6:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
   141aa:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   141ae:	f00b f993 	bl	1f4d8 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   141b2:	2204      	movs	r2, #4
   141b4:	f105 0132 	add.w	r1, r5, #50	; 0x32
   141b8:	f104 0094 	add.w	r0, r4, #148	; 0x94
   141bc:	f00b f98c 	bl	1f4d8 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   141c0:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
		conn->procedure_expire = conn->procedure_reload;
   141c4:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   141c8:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->llcp_enc.pause_rx = 1U;
   141cc:	f043 0301 	orr.w	r3, r3, #1
   141d0:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	int nack = 0;
   141d4:	2000      	movs	r0, #0
		break;
   141d6:	e6e6      	b.n	13fa6 <ull_conn_rx+0x9a>
   141d8:	20001218 	.word	0x20001218
   141dc:	2000242c 	.word	0x2000242c

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
   141e0:	7f6b      	ldrb	r3, [r5, #29]
   141e2:	2b09      	cmp	r3, #9
   141e4:	f47f af10 	bne.w	14008 <ull_conn_rx+0xfc>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   141e8:	f1b8 0f14 	cmp.w	r8, #20
   141ec:	f000 847e 	beq.w	14aec <ull_conn_rx+0xbe0>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   141f0:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   141f4:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   141f8:	4293      	cmp	r3, r2
   141fa:	f001 803d 	beq.w	15278 <ull_conn_rx+0x136c>
	eff_rx_octets = conn->lll.max_rx_octets;
   141fe:	f8b4 805a 	ldrh.w	r8, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   14202:	f8b4 9058 	ldrh.w	r9, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   14206:	f8b4 a05e 	ldrh.w	sl, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   1420a:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   1420e:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	struct node_tx *tx = NULL;
   14212:	2300      	movs	r3, #0
	       tx) ||
   14214:	f001 0107 	and.w	r1, r1, #7
   14218:	2902      	cmp	r1, #2
   1421a:	f000 8487 	beq.w	14b2c <ull_conn_rx+0xc20>
   1421e:	f895 801f 	ldrb.w	r8, [r5, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   14222:	f1b8 0f15 	cmp.w	r8, #21
   14226:	f43f aebd 	beq.w	13fa4 <ull_conn_rx+0x98>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1422a:	4618      	mov	r0, r3
   1422c:	49c9      	ldr	r1, [pc, #804]	; (14554 <ull_conn_rx+0x648>)
   1422e:	f7fa f8d5 	bl	e3dc <mem_release>
			if (conn->llcp_length.state ==
   14232:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->common.txn_lock = 0U;
   14236:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   1423a:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
   1423e:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
   14242:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
   14244:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   14248:	f47f aeac 	bne.w	13fa4 <ull_conn_rx+0x98>
				return -EBUSY;
   1424c:	f06f 000f 	mvn.w	r0, #15
   14250:	e6a9      	b.n	13fa6 <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
   14252:	7f6a      	ldrb	r2, [r5, #29]
   14254:	2a01      	cmp	r2, #1
   14256:	f47f aed7 	bne.w	14008 <ull_conn_rx+0xfc>
		conn->procedure_expire = 0U;
   1425a:	2300      	movs	r3, #0
   1425c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   14260:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   14262:	712a      	strb	r2, [r5, #4]
		break;
   14264:	e69f      	b.n	13fa6 <ull_conn_rx+0x9a>
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
   14266:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1426a:	2b00      	cmp	r3, #0
   1426c:	f6bf aecc 	bge.w	14008 <ull_conn_rx+0xfc>
   14270:	7f6b      	ldrb	r3, [r5, #29]
   14272:	2b05      	cmp	r3, #5
   14274:	f47f aec8 	bne.w	14008 <ull_conn_rx+0xfc>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   14278:	f895 1020 	ldrb.w	r1, [r5, #32]
   1427c:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   14280:	ea41 0003 	orr.w	r0, r1, r3
   14284:	f010 0007 	ands.w	r0, r0, #7
   14288:	f040 8676 	bne.w	14f78 <ull_conn_rx+0x106c>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   1428c:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   14290:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   14294:	4293      	cmp	r3, r2
   14296:	f43f ae83 	beq.w	13fa0 <ull_conn_rx+0x94>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   1429a:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   1429e:	f003 0303 	and.w	r3, r3, #3
   142a2:	2b02      	cmp	r3, #2
   142a4:	f47f ae7c 	bne.w	13fa0 <ull_conn_rx+0x94>
		conn->llcp_phy.pause_tx = 0U;
   142a8:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   142ac:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   142b0:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
		conn->procedure_expire = 0U;
   142b4:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
		conn->llcp_phy.pause_tx = 0U;
   142b8:	f360 0300 	bfi	r3, r0, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   142bc:	4611      	mov	r1, r2
   142be:	f362 1106 	bfi	r1, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   142c2:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		if (!conn->llcp_phy.cmd) {
   142c6:	f013 0304 	ands.w	r3, r3, #4
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   142ca:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
   142ce:	f3c2 0202 	ubfx	r2, r2, #0, #3
		if (!conn->llcp_phy.cmd) {
   142d2:	f041 80a9 	bne.w	15428 <ull_conn_rx+0x151c>
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   142d6:	683a      	ldr	r2, [r7, #0]
   142d8:	2101      	movs	r1, #1
   142da:	7111      	strb	r1, [r2, #4]
	int nack = 0;
   142dc:	4618      	mov	r0, r3
   142de:	e662      	b.n	13fa6 <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
   142e0:	7f6b      	ldrb	r3, [r5, #29]
   142e2:	2b03      	cmp	r3, #3
   142e4:	f47f ae90 	bne.w	14008 <ull_conn_rx+0xfc>
		if (!conn->lll.role) {
   142e8:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   142ec:	2b00      	cmp	r3, #0
   142ee:	f2c0 853d 	blt.w	14d6c <ull_conn_rx+0xe60>
			if ((conn->llcp_phy.ack !=
   142f2:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
			     conn->llcp_phy.req) &&
   142f6:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
			if ((conn->llcp_phy.ack !=
   142fa:	4281      	cmp	r1, r0
   142fc:	d007      	beq.n	1430e <ull_conn_rx+0x402>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   142fe:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
   14302:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
   14306:	3a01      	subs	r2, #1
   14308:	2a02      	cmp	r2, #2
   1430a:	f240 86b3 	bls.w	15074 <ull_conn_rx+0x1168>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   1430e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   14312:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   14316:	1a9b      	subs	r3, r3, r2
   14318:	f003 0303 	and.w	r3, r3, #3
   1431c:	2b02      	cmp	r3, #2
   1431e:	f000 8624 	beq.w	14f6a <ull_conn_rx+0x105e>
				     LLCP_ENCRYPTION)) ||
   14322:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   14326:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   1432a:	429a      	cmp	r2, r3
   1432c:	f000 86af 	beq.w	1508e <ull_conn_rx+0x1182>
				nack = reject_ext_ind_send(conn, *rx,
   14330:	232a      	movs	r3, #42	; 0x2a
   14332:	2216      	movs	r2, #22
   14334:	4629      	mov	r1, r5
   14336:	4620      	mov	r0, r4
}
   14338:	b003      	add	sp, #12
   1433a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   1433e:	f7fe bf53 	b.w	131e8 <reject_ext_ind_send>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   14342:	7f6b      	ldrb	r3, [r5, #29]
   14344:	2b18      	cmp	r3, #24
   14346:	f47f ae5f 	bne.w	14008 <ull_conn_rx+0xfc>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   1434a:	4e83      	ldr	r6, [pc, #524]	; (14558 <ull_conn_rx+0x64c>)
   1434c:	6833      	ldr	r3, [r6, #0]
   1434e:	2b00      	cmp	r3, #0
   14350:	f000 8399 	beq.w	14a86 <ull_conn_rx+0xb7a>
   14354:	429c      	cmp	r4, r3
   14356:	f000 8396 	beq.w	14a86 <ull_conn_rx+0xb7a>
			nack = reject_ext_ind_send(conn, *rx,
   1435a:	2320      	movs	r3, #32
   1435c:	220f      	movs	r2, #15
   1435e:	e7e9      	b.n	14334 <ull_conn_rx+0x428>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
   14360:	7f6b      	ldrb	r3, [r5, #29]
   14362:	2b02      	cmp	r3, #2
   14364:	f47f ae50 	bne.w	14008 <ull_conn_rx+0xfc>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   14368:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   1436c:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   14370:	4293      	cmp	r3, r2
   14372:	d004      	beq.n	1437e <ull_conn_rx+0x472>
   14374:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   14378:	2b03      	cmp	r3, #3
   1437a:	f000 86f7 	beq.w	1516c <ull_conn_rx+0x1260>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   1437e:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   14382:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   14386:	4293      	cmp	r3, r2
   14388:	f000 84ba 	beq.w	14d00 <ull_conn_rx+0xdf4>
		rej_ext_ind->error_code = rej_ind->error_code;
   1438c:	f895 1020 	ldrb.w	r1, [r5, #32]
   14390:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   14394:	2923      	cmp	r1, #35	; 0x23
   14396:	d012      	beq.n	143be <ull_conn_rx+0x4b2>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   14398:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   1439c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   143a0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   143a4:	f36f 0200 	bfc	r2, #0, #1
   143a8:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   143ac:	2200      	movs	r2, #0
   143ae:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   143b2:	f3c3 0202 	ubfx	r2, r3, #0, #3
   143b6:	f362 1306 	bfi	r3, r2, #4, #3
   143ba:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   143be:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   143c2:	075e      	lsls	r6, r3, #29
   143c4:	f57f adec 	bpl.w	13fa0 <ull_conn_rx+0x94>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   143c8:	231a      	movs	r3, #26
   143ca:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   143cc:	7729      	strb	r1, [r5, #28]
	p->tx = conn->lll.phy_tx;
   143ce:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   143d2:	f3c3 0302 	ubfx	r3, r3, #0, #3
   143d6:	776b      	strb	r3, [r5, #29]
	p->rx = conn->lll.phy_rx;
   143d8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   143dc:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
   143e0:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
   143e2:	77ab      	strb	r3, [r5, #30]
	if (err) {
   143e4:	e5df      	b.n	13fa6 <ull_conn_rx+0x9a>
		if (!conn->lll.role ||
   143e6:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   143ea:	2b00      	cmp	r3, #0
   143ec:	f6bf ae0c 	bge.w	14008 <ull_conn_rx+0xfc>
   143f0:	7f6b      	ldrb	r3, [r5, #29]
   143f2:	2b0c      	cmp	r3, #12
   143f4:	f47f ae08 	bne.w	14008 <ull_conn_rx+0xfc>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   143f8:	f8b5 2029 	ldrh.w	r2, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   143fc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   143fe:	1ad3      	subs	r3, r2, r3
   14400:	041b      	lsls	r3, r3, #16
   14402:	f100 863c 	bmi.w	1507e <ull_conn_rx+0x1172>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   14406:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1440a:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   1440e:	1a5b      	subs	r3, r3, r1
   14410:	f003 0303 	and.w	r3, r3, #3
   14414:	2b02      	cmp	r3, #2
   14416:	f000 86b7 	beq.w	15188 <ull_conn_rx+0x127c>
	if (!conn_upd_curr) {
   1441a:	4b4f      	ldr	r3, [pc, #316]	; (14558 <ull_conn_rx+0x64c>)
   1441c:	6819      	ldr	r1, [r3, #0]
   1441e:	2900      	cmp	r1, #0
   14420:	f000 8719 	beq.w	15256 <ull_conn_rx+0x134a>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   14424:	f895 3020 	ldrb.w	r3, [r5, #32]
   14428:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   1442c:	f8b5 3021 	ldrh.w	r3, [r5, #33]	; 0x21
   14430:	f240 41e2 	movw	r1, #1250	; 0x4e2
   14434:	fb01 f303 	mul.w	r3, r1, r3
	conn->llcp_cu.win_offset_us =
   14438:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   1443c:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
   14440:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   14444:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.interval =
   14448:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   1444c:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
   14450:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   14454:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.latency =
   14458:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   1445c:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   14460:	f895 1027 	ldrb.w	r1, [r5, #39]	; 0x27
   14464:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   14468:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   1446c:	f023 030f 	bic.w	r3, r3, #15
   14470:	f043 0308 	orr.w	r3, r3, #8
   14474:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
	conn->llcp_cu.ack--;
   14478:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1447c:	ea41 2200 	orr.w	r2, r1, r0, lsl #8
	conn->llcp_cu.timeout =
   14480:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
	conn->llcp_cu.ack--;
   14484:	3b01      	subs	r3, #1
	link->mem = conn->llcp_rx;
   14486:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	conn->llcp_cu.ack--;
   1448a:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
	link->mem = conn->llcp_rx;
   1448e:	6072      	str	r2, [r6, #4]
	(*rx)->hdr.link = link;
   14490:	683a      	ldr	r2, [r7, #0]
   14492:	6016      	str	r6, [r2, #0]
	conn->llcp_rx = *rx;
   14494:	683a      	ldr	r2, [r7, #0]
   14496:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
   1449a:	2300      	movs	r3, #0
   1449c:	603b      	str	r3, [r7, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   1449e:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   144a2:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   144a6:	4293      	cmp	r3, r2
   144a8:	f43f ae31 	beq.w	1410e <ull_conn_rx+0x202>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   144ac:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   144b0:	f003 0307 	and.w	r3, r3, #7
   144b4:	2b04      	cmp	r3, #4
   144b6:	f47f ae2a 	bne.w	1410e <ull_conn_rx+0x202>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   144ba:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
		if (err) {
   144be:	e626      	b.n	1410e <ull_conn_rx+0x202>
		if (!conn->lll.role ||
   144c0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   144c4:	2b00      	cmp	r3, #0
   144c6:	f6bf ad9f 	bge.w	14008 <ull_conn_rx+0xfc>
   144ca:	7f6e      	ldrb	r6, [r5, #29]
   144cc:	2e01      	cmp	r6, #1
   144ce:	f47f ad9b 	bne.w	14008 <ull_conn_rx+0xfc>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   144d2:	4820      	ldr	r0, [pc, #128]	; (14554 <ull_conn_rx+0x648>)
   144d4:	f7f9 ff68 	bl	e3a8 <mem_acquire>
		if (!tx) {
   144d8:	2800      	cmp	r0, #0
   144da:	f000 829c 	beq.w	14a16 <ull_conn_rx+0xb0a>
	conn->llcp_enc.pause_rx = 1U;
   144de:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   144e2:	f023 0305 	bic.w	r3, r3, #5
   144e6:	f043 0305 	orr.w	r3, r3, #5
   144ea:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   144ee:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   144f2:	f36f 03c3 	bfc	r3, #3, #1
   144f6:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   144fa:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   144fc:	7146      	strb	r6, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   144fe:	f043 0303 	orr.w	r3, r3, #3
   14502:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   14504:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   14508:	220b      	movs	r2, #11
   1450a:	71c2      	strb	r2, [r0, #7]
	if (
   1450c:	2b00      	cmp	r3, #0
   1450e:	f000 82af 	beq.w	14a70 <ull_conn_rx+0xb64>
	    !conn->llcp_enc.pause_tx &&
   14512:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   14516:	0791      	lsls	r1, r2, #30
   14518:	f100 82aa 	bmi.w	14a70 <ull_conn_rx+0xb64>
	    !conn->llcp_phy.pause_tx &&
   1451c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   14520:	07d2      	lsls	r2, r2, #31
   14522:	f100 82a5 	bmi.w	14a70 <ull_conn_rx+0xb64>
		if (conn->tx_head == conn->tx_data) {
   14526:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1452a:	4293      	cmp	r3, r2
   1452c:	f000 875d 	beq.w	153ea <ull_conn_rx+0x14de>
		} else if (!conn->tx_ctrl) {
   14530:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   14534:	2a00      	cmp	r2, #0
   14536:	f000 848c 	beq.w	14e52 <ull_conn_rx+0xf46>
	tx->next = conn->tx_ctrl_last->next;
   1453a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1453e:	681a      	ldr	r2, [r3, #0]
   14540:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   14542:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   14544:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   14548:	6803      	ldr	r3, [r0, #0]
   1454a:	2b00      	cmp	r3, #0
   1454c:	f47f ad28 	bne.w	13fa0 <ull_conn_rx+0x94>
   14550:	e595      	b.n	1407e <ull_conn_rx+0x172>
   14552:	bf00      	nop
   14554:	2000242c 	.word	0x2000242c
   14558:	200023a8 	.word	0x200023a8
		if (!conn->lll.role ||
   1455c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
	if (conn->common.txn_lock) {
   14560:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
		if (!conn->lll.role ||
   14564:	2b00      	cmp	r3, #0
	if (conn->common.txn_lock) {
   14566:	f000 0602 	and.w	r6, r0, #2
		if (!conn->lll.role ||
   1456a:	f6bf ad51 	bge.w	14010 <ull_conn_rx+0x104>
   1456e:	f895 901d 	ldrb.w	r9, [r5, #29]
   14572:	f1b9 0f09 	cmp.w	r9, #9
   14576:	f47f ad4b 	bne.w	14010 <ull_conn_rx+0x104>
	if (conn->common.txn_lock) {
   1457a:	2e00      	cmp	r6, #0
   1457c:	f47f ad10 	bne.w	13fa0 <ull_conn_rx+0x94>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14580:	48d0      	ldr	r0, [pc, #832]	; (148c4 <ull_conn_rx+0x9b8>)
   14582:	f7f9 ff11 	bl	e3a8 <mem_acquire>
	if (!tx) {
   14586:	4607      	mov	r7, r0
   14588:	2800      	cmp	r0, #0
   1458a:	f000 8244 	beq.w	14a16 <ull_conn_rx+0xb0a>
	conn->common.txn_lock = 1U;
   1458e:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
   14592:	49cd      	ldr	r1, [pc, #820]	; (148c8 <ull_conn_rx+0x9bc>)
	conn->common.txn_lock = 1U;
   14594:	f043 0302 	orr.w	r3, r3, #2
   14598:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
   1459c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1459e:	6a28      	ldr	r0, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
   145a0:	f003 020f 	and.w	r2, r3, #15
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   145a4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   145a8:	4301      	orrs	r1, r0
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   145aa:	400b      	ands	r3, r1
   145ac:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   145b0:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   145b4:	4013      	ands	r3, r2
   145b6:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   145ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   145bc:	6a29      	ldr	r1, [r5, #32]
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   145be:	4ac3      	ldr	r2, [pc, #780]	; (148cc <ull_conn_rx+0x9c0>)
   145c0:	f003 030f 	and.w	r3, r3, #15
	conn->llcp_feature.features_peer =
   145c4:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	conn->common.fex_valid = 1U;
   145c8:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   145cc:	f043 0301 	orr.w	r3, r3, #1
   145d0:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   145d4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   145d8:	793b      	ldrb	r3, [r7, #4]
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   145da:	430a      	orrs	r2, r1
	conn->llcp_feature.features_peer =
   145dc:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   145e0:	f043 0303 	orr.w	r3, r3, #3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   145e4:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   145e6:	713b      	strb	r3, [r7, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   145e8:	4631      	mov	r1, r6
   145ea:	18b8      	adds	r0, r7, r2
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   145ec:	f887 9005 	strb.w	r9, [r7, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   145f0:	f887 9007 	strb.w	r9, [r7, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   145f4:	f00a ff9b 	bl	1f52e <memset>
	feat_result &= 0xFF;
   145f8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	dst[1] = val >> 8;
   145fc:	72fe      	strb	r6, [r7, #11]
   145fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	ctrl_tx_sec_enqueue(conn, tx);
   14602:	4620      	mov	r0, r4
	dst[0] = val;
   14604:	723b      	strb	r3, [r7, #8]
   14606:	2401      	movs	r4, #1
	dst[1] = val >> 8;
   14608:	2341      	movs	r3, #65	; 0x41
   1460a:	727b      	strb	r3, [r7, #9]
	dst[0] = val;
   1460c:	72bc      	strb	r4, [r7, #10]
   1460e:	733e      	strb	r6, [r7, #12]
	dst[1] = val >> 8;
   14610:	737e      	strb	r6, [r7, #13]
	dst[0] = val;
   14612:	73be      	strb	r6, [r7, #14]
	dst[1] = val >> 8;
   14614:	73fe      	strb	r6, [r7, #15]
   14616:	4639      	mov	r1, r7
   14618:	f7fe fcb8 	bl	12f8c <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1461c:	712c      	strb	r4, [r5, #4]
	return 0;
   1461e:	4630      	mov	r0, r6
   14620:	e4c1      	b.n	13fa6 <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   14622:	7f6b      	ldrb	r3, [r5, #29]
   14624:	2b02      	cmp	r3, #2
   14626:	f47f acef 	bne.w	14008 <ull_conn_rx+0xfc>
		} else if ((conn->llcp_conn_param.ack !=
   1462a:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
   1462e:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   14632:	f895 3020 	ldrb.w	r3, [r5, #32]
		} else if ((conn->llcp_conn_param.ack !=
   14636:	4291      	cmp	r1, r2
   14638:	d002      	beq.n	14640 <ull_conn_rx+0x734>
			    conn->llcp_conn_param.req) &&
   1463a:	2b0f      	cmp	r3, #15
   1463c:	f000 8422 	beq.w	14e84 <ull_conn_rx+0xf78>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   14640:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   14644:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   14648:	4291      	cmp	r1, r2
   1464a:	d002      	beq.n	14652 <ull_conn_rx+0x746>
   1464c:	2b14      	cmp	r3, #20
   1464e:	f000 8503 	beq.w	15058 <ull_conn_rx+0x114c>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   14652:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   14656:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
   1465a:	4291      	cmp	r1, r2
   1465c:	d002      	beq.n	14664 <ull_conn_rx+0x758>
   1465e:	2b16      	cmp	r3, #22
   14660:	f000 8558 	beq.w	15114 <ull_conn_rx+0x1208>
			switch (llctrl->unknown_rsp.type) {
   14664:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   14666:	bf04      	itt	eq
   14668:	2301      	moveq	r3, #1
   1466a:	712b      	strbeq	r3, [r5, #4]
				break;
   1466c:	e54f      	b.n	1410e <ull_conn_rx+0x202>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   1466e:	7f6f      	ldrb	r7, [r5, #29]
	if (conn->common.txn_lock) {
   14670:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   14674:	2f01      	cmp	r7, #1
	if (conn->common.txn_lock) {
   14676:	f000 0602 	and.w	r6, r0, #2
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   1467a:	f47f acc9 	bne.w	14010 <ull_conn_rx+0x104>
	if (conn->common.txn_lock) {
   1467e:	2e00      	cmp	r6, #0
   14680:	f040 846f 	bne.w	14f62 <ull_conn_rx+0x1056>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14684:	488f      	ldr	r0, [pc, #572]	; (148c4 <ull_conn_rx+0x9b8>)
   14686:	f7f9 fe8f 	bl	e3a8 <mem_acquire>
	if (!tx) {
   1468a:	4601      	mov	r1, r0
   1468c:	2800      	cmp	r0, #0
   1468e:	f000 81c2 	beq.w	14a16 <ull_conn_rx+0xb0a>
	conn->common.txn_lock = 1U;
   14692:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   14696:	f043 0302 	orr.w	r3, r3, #2
   1469a:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1469e:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   146a0:	714f      	strb	r7, [r1, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   146a2:	f043 0303 	orr.w	r3, r3, #3
   146a6:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   146a8:	2313      	movs	r3, #19
	ctrl_tx_sec_enqueue(conn, tx);
   146aa:	4620      	mov	r0, r4
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   146ac:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   146ae:	f7fe fc6d 	bl	12f8c <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   146b2:	712f      	strb	r7, [r5, #4]
	return 0;
   146b4:	4630      	mov	r0, r6
   146b6:	e476      	b.n	13fa6 <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   146b8:	7f6b      	ldrb	r3, [r5, #29]
   146ba:	2b03      	cmp	r3, #3
   146bc:	f47f aca4 	bne.w	14008 <ull_conn_rx+0xfc>
	switch (rej_ext_ind->reject_opcode) {
   146c0:	f895 3020 	ldrb.w	r3, [r5, #32]
   146c4:	3b03      	subs	r3, #3
   146c6:	2b13      	cmp	r3, #19
   146c8:	f63f ac6a 	bhi.w	13fa0 <ull_conn_rx+0x94>
   146cc:	a201      	add	r2, pc, #4	; (adr r2, 146d4 <ull_conn_rx+0x7c8>)
   146ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   146d2:	bf00      	nop
   146d4:	000149c3 	.word	0x000149c3
   146d8:	00013fa1 	.word	0x00013fa1
   146dc:	00013fa1 	.word	0x00013fa1
   146e0:	00013fa1 	.word	0x00013fa1
   146e4:	00013fa1 	.word	0x00013fa1
   146e8:	00013fa1 	.word	0x00013fa1
   146ec:	00013fa1 	.word	0x00013fa1
   146f0:	00013fa1 	.word	0x00013fa1
   146f4:	00013fa1 	.word	0x00013fa1
   146f8:	00013fa1 	.word	0x00013fa1
   146fc:	00013fa1 	.word	0x00013fa1
   14700:	00013fa1 	.word	0x00013fa1
   14704:	0001495d 	.word	0x0001495d
   14708:	00013fa1 	.word	0x00013fa1
   1470c:	00013fa1 	.word	0x00013fa1
   14710:	00013fa1 	.word	0x00013fa1
   14714:	00013fa1 	.word	0x00013fa1
   14718:	000148d1 	.word	0x000148d1
   1471c:	00013fa1 	.word	0x00013fa1
   14720:	0001490f 	.word	0x0001490f
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   14724:	7f6b      	ldrb	r3, [r5, #29]
   14726:	2b02      	cmp	r3, #2
   14728:	f47f ac6e 	bne.w	14008 <ull_conn_rx+0xfc>
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   1472c:	f895 2020 	ldrb.w	r2, [r5, #32]
   14730:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   14734:	2301      	movs	r3, #1
	int nack = 0;
   14736:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   14738:	712b      	strb	r3, [r5, #4]
}
   1473a:	e434      	b.n	13fa6 <ull_conn_rx+0x9a>
		if (!conn->lll.role ||
   1473c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   14740:	2b00      	cmp	r3, #0
   14742:	f6bf ac61 	bge.w	14008 <ull_conn_rx+0xfc>
   14746:	7f6b      	ldrb	r3, [r5, #29]
   14748:	2b08      	cmp	r3, #8
   1474a:	f47f ac5d 	bne.w	14008 <ull_conn_rx+0xfc>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   1474e:	f8b5 6025 	ldrh.w	r6, [r5, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   14752:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   14754:	1af3      	subs	r3, r6, r3
   14756:	041f      	lsls	r7, r3, #16
   14758:	f100 8491 	bmi.w	1507e <ull_conn_rx+0x1172>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1475c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   14760:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   14764:	1a9b      	subs	r3, r3, r2
   14766:	f003 0303 	and.w	r3, r3, #3
   1476a:	2b02      	cmp	r3, #2
   1476c:	f000 850c 	beq.w	15188 <ull_conn_rx+0x127c>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   14770:	2205      	movs	r2, #5
   14772:	f105 0120 	add.w	r1, r5, #32
   14776:	f104 00e9 	add.w	r0, r4, #233	; 0xe9
   1477a:	f00a fead 	bl	1f4d8 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   1477e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_ack -= 2U;
   14782:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
	conn->llcp.chan_map.instant = instant;
   14786:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
	conn->llcp.chan_map.initiate = 0U;
   1478a:	f36f 0200 	bfc	r2, #0, #1
   1478e:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_CHAN_MAP;
   14792:	2102      	movs	r1, #2
	conn->llcp_ack -= 2U;
   14794:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   14796:	2201      	movs	r2, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   14798:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	conn->llcp_ack -= 2U;
   1479c:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	int nack = 0;
   147a0:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   147a2:	712a      	strb	r2, [r5, #4]
		if (err) {
   147a4:	f7ff bbff 	b.w	13fa6 <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   147a8:	7f6e      	ldrb	r6, [r5, #29]
   147aa:	2e06      	cmp	r6, #6
   147ac:	f47f ac2c 	bne.w	14008 <ull_conn_rx+0xfc>
	if (!conn->llcp_version.tx) {
   147b0:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   147b4:	07df      	lsls	r7, r3, #31
   147b6:	f140 83af 	bpl.w	14f18 <ull_conn_rx+0x100c>
	} else if (!conn->llcp_version.rx) {
   147ba:	f013 0302 	ands.w	r3, r3, #2
   147be:	f47f abef 	bne.w	13fa0 <ull_conn_rx+0x94>
		conn->llcp_version.ack = conn->llcp_version.req;
   147c2:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
   147c6:	f884 2139 	strb.w	r2, [r4, #313]	; 0x139
		conn->procedure_expire = 0U;
   147ca:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_version.version_number = v->version_number;
   147ce:	f895 3020 	ldrb.w	r3, [r5, #32]
   147d2:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   147d6:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
   147da:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   147de:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   147e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   147e6:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
		sys_le16_to_cpu(v->sub_version_number);
   147ea:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
   147ee:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   147f2:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   147f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   147fa:	f8a4 213e 	strh.w	r2, [r4, #318]	; 0x13e
	conn->llcp_version.rx = 1U;
   147fe:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	return 0;
   14802:	2000      	movs	r0, #0
   14804:	f7ff bbcf 	b.w	13fa6 <ull_conn_rx+0x9a>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   14808:	7f6b      	ldrb	r3, [r5, #29]
   1480a:	2b09      	cmp	r3, #9
   1480c:	f47f abfc 	bne.w	14008 <ull_conn_rx+0xfc>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   14810:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   14812:	6a28      	ldr	r0, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
   14814:	492c      	ldr	r1, [pc, #176]	; (148c8 <ull_conn_rx+0x9bc>)
   14816:	f003 020f 	and.w	r2, r3, #15
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1481a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   1481e:	4301      	orrs	r1, r0
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   14820:	400b      	ands	r3, r1
   14822:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   14826:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
	conn->common.fex_valid = 1U;
   1482a:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1482e:	4927      	ldr	r1, [pc, #156]	; (148cc <ull_conn_rx+0x9c0>)
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   14830:	4013      	ands	r3, r2
   14832:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   14836:	6a2b      	ldr	r3, [r5, #32]
   14838:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	conn->common.fex_valid = 1U;
   1483a:	f040 0001 	orr.w	r0, r0, #1
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1483e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   14842:	4319      	orrs	r1, r3
	conn->common.fex_valid = 1U;
   14844:	f884 00d8 	strb.w	r0, [r4, #216]	; 0xd8
	conn->procedure_expire = 0U;
   14848:	2300      	movs	r3, #0
	conn->llcp_feature.ack = conn->llcp_feature.req;
   1484a:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
   1484e:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   14852:	f002 020f 	and.w	r2, r2, #15
	conn->llcp_feature.features_peer =
   14856:	e9c4 124c 	strd	r1, r2, [r4, #304]	; 0x130
	conn->procedure_expire = 0U;
   1485a:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   1485e:	4618      	mov	r0, r3
}
   14860:	f7ff bba1 	b.w	13fa6 <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   14864:	7f6b      	ldrb	r3, [r5, #29]
   14866:	2b01      	cmp	r3, #1
   14868:	f47f abce 	bne.w	14008 <ull_conn_rx+0xfc>
	} else if (!conn->lll.role) {
   1486c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   14870:	2b00      	cmp	r3, #0
   14872:	f2c0 80f5 	blt.w	14a60 <ull_conn_rx+0xb54>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14876:	4813      	ldr	r0, [pc, #76]	; (148c4 <ull_conn_rx+0x9b8>)
   14878:	f7f9 fd96 	bl	e3a8 <mem_acquire>
		if (!tx) {
   1487c:	2800      	cmp	r0, #0
   1487e:	f000 80ca 	beq.w	14a16 <ull_conn_rx+0xb0a>
	conn->llcp_enc.pause_rx = 1U;
   14882:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   14886:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
	conn->llcp_enc.pause_rx = 1U;
   1488a:	f042 0201 	orr.w	r2, r2, #1
	conn->lll.enc_rx = 0;
   1488e:	f023 0318 	bic.w	r3, r3, #24
	conn->llcp_enc.pause_rx = 1U;
   14892:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   14896:	2201      	movs	r2, #1
	conn->lll.enc_rx = 0;
   14898:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1489c:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1489e:	7142      	strb	r2, [r0, #5]
   148a0:	e62d      	b.n	144fe <ull_conn_rx+0x5f2>
		if (PDU_DATA_LLCTRL_LEN(start_enc_rsp) != pdu_rx->len) {
   148a2:	7f6b      	ldrb	r3, [r5, #29]
   148a4:	2b01      	cmp	r3, #1
   148a6:	f47f abaf 	bne.w	14008 <ull_conn_rx+0xfc>
		if (conn->lll.role) {
   148aa:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   148ae:	2b00      	cmp	r3, #0
   148b0:	f6ff ac14 	blt.w	140dc <ull_conn_rx+0x1d0>
			conn->llcp_enc.pause_rx = 0U;
   148b4:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
   148b8:	f022 0203 	bic.w	r2, r2, #3
   148bc:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
   148c0:	e41d      	b.n	140fe <ull_conn_rx+0x1f2>
   148c2:	bf00      	nop
   148c4:	2000242c 	.word	0x2000242c
   148c8:	087830d0 	.word	0x087830d0
   148cc:	08783050 	.word	0x08783050
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   148d0:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   148d4:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   148d8:	4293      	cmp	r3, r2
   148da:	f43f ab61 	beq.w	13fa0 <ull_conn_rx+0x94>
	conn->procedure_expire = 0U;
   148de:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   148e0:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   148e2:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
	conn->procedure_expire = 0U;
   148e6:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   148ea:	7769      	strb	r1, [r5, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   148ec:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   148f0:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   148f4:	842a      	strh	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   148f6:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   148f8:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   148fc:	77e9      	strb	r1, [r5, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   148fe:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   14902:	8469      	strh	r1, [r5, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   14904:	84a8      	strh	r0, [r5, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   14906:	84ea      	strh	r2, [r5, #38]	; 0x26
	int nack = 0;
   14908:	4618      	mov	r0, r3
   1490a:	f7ff bb4c 	b.w	13fa6 <ull_conn_rx+0x9a>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   1490e:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   14912:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   14916:	428b      	cmp	r3, r1
   14918:	f43f ab42 	beq.w	13fa0 <ull_conn_rx+0x94>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1491c:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   14920:	2a23      	cmp	r2, #35	; 0x23
   14922:	d012      	beq.n	1494a <ull_conn_rx+0xa3e>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   14924:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   14928:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1492c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   14930:	f36f 0100 	bfc	r1, #0, #1
   14934:	f884 11bf 	strb.w	r1, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   14938:	2100      	movs	r1, #0
   1493a:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1493e:	f3c3 0102 	ubfx	r1, r3, #0, #3
   14942:	f361 1306 	bfi	r3, r1, #4, #3
   14946:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   1494a:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   1494e:	0759      	lsls	r1, r3, #29
   14950:	f57f ab26 	bpl.w	13fa0 <ull_conn_rx+0x94>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   14954:	231a      	movs	r3, #26
   14956:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   14958:	772a      	strb	r2, [r5, #28]
   1495a:	e538      	b.n	143ce <ull_conn_rx+0x4c2>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   1495c:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   14960:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   14964:	4293      	cmp	r3, r2
   14966:	f43f ab1b 	beq.w	13fa0 <ull_conn_rx+0x94>
	if (!lll->role && (rej_ext_ind->error_code ==
   1496a:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
	return ((uint16_t)src[1] << 8) | src[0];
   1496e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   14972:	2900      	cmp	r1, #0
   14974:	f2c0 8588 	blt.w	15488 <ull_conn_rx+0x157c>
   14978:	2b1a      	cmp	r3, #26
   1497a:	f000 85e7 	beq.w	1554c <ull_conn_rx+0x1640>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   1497e:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   14982:	f003 0107 	and.w	r1, r3, #7
   14986:	2904      	cmp	r1, #4
   14988:	f000 855a 	beq.w	15440 <ull_conn_rx+0x1534>
	if (!conn->llcp_conn_param.cmd) {
   1498c:	071a      	lsls	r2, r3, #28
   1498e:	f57f ab07 	bpl.w	13fa0 <ull_conn_rx+0x94>
	cu->status = rej_ext_ind->error_code;
   14992:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   14996:	772b      	strb	r3, [r5, #28]
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   14998:	2216      	movs	r2, #22
   1499a:	712a      	strb	r2, [r5, #4]
	cu->interval = lll->interval;
   1499c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
   1499e:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
	cu->latency = lll->latency;
   149a2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   149a4:	8429      	strh	r1, [r5, #32]
		      lll->interval * 125U / 1000;
   149a6:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
   149a8:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
   149ac:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
   149b0:	83ea      	strh	r2, [r5, #30]
		      lll->interval * 125U / 1000;
   149b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   149b6:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
   149ba:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
   149bc:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   149be:	f7ff baf2 	b.w	13fa6 <ull_conn_rx+0x9a>
		if ((conn->llcp_ack != conn->llcp_req) &&
   149c2:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   149c6:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   149ca:	428b      	cmp	r3, r1
   149cc:	f43f aae8 	beq.w	13fa0 <ull_conn_rx+0x94>
   149d0:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   149d4:	2b03      	cmp	r3, #3
   149d6:	f47f aae3 	bne.w	13fa0 <ull_conn_rx+0x94>
	conn->llcp_enc.pause_rx = 0U;
   149da:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   149de:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
   149e2:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   149e4:	f022 0203 	bic.w	r2, r2, #3
   149e8:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   149ec:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   149f0:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   149f4:	f885 2020 	strb.w	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   149f8:	210d      	movs	r1, #13
   149fa:	77e9      	strb	r1, [r5, #31]
	int nack = 0;
   149fc:	4618      	mov	r0, r3
   149fe:	f7ff bad2 	b.w	13fa6 <ull_conn_rx+0x9a>
			tx->next = conn->tx_head;
   14a02:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   14a04:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   14a08:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   14a0c:	2a00      	cmp	r2, #0
   14a0e:	f47f aac7 	bne.w	13fa0 <ull_conn_rx+0x94>
   14a12:	f7ff bb34 	b.w	1407e <ull_conn_rx+0x172>
		*err = -ENOBUFS;
   14a16:	f06f 0036 	mvn.w	r0, #54	; 0x36
   14a1a:	f7ff bac4 	b.w	13fa6 <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(start_enc_rsp) != pdu_rx->len) {
   14a1e:	7f6b      	ldrb	r3, [r5, #29]
   14a20:	2b01      	cmp	r3, #1
   14a22:	f47f aaf1 	bne.w	14008 <ull_conn_rx+0xfc>
   14a26:	e745      	b.n	148b4 <ull_conn_rx+0x9a8>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   14a28:	7f6b      	ldrb	r3, [r5, #29]
   14a2a:	2b01      	cmp	r3, #1
   14a2c:	f47f aaec 	bne.w	14008 <ull_conn_rx+0xfc>
   14a30:	e721      	b.n	14876 <ull_conn_rx+0x96a>
			conn->tx_data = conn->tx_data->next;
   14a32:	6813      	ldr	r3, [r2, #0]
   14a34:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   14a38:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   14a3c:	2b00      	cmp	r3, #0
   14a3e:	f47f ab14 	bne.w	1406a <ull_conn_rx+0x15e>
			tx->next = conn->tx_head->next;
   14a42:	6813      	ldr	r3, [r2, #0]
   14a44:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   14a46:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   14a48:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   14a4a:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   14a4e:	2a00      	cmp	r2, #0
   14a50:	f47f aaa6 	bne.w	13fa0 <ull_conn_rx+0x94>
   14a54:	f7ff bb13 	b.w	1407e <ull_conn_rx+0x172>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   14a58:	7f6b      	ldrb	r3, [r5, #29]
   14a5a:	2b01      	cmp	r3, #1
   14a5c:	f47f aad4 	bne.w	14008 <ull_conn_rx+0xfc>
		conn->lll.enc_tx = 0;
   14a60:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   14a64:	f36f 1304 	bfc	r3, #4, #1
   14a68:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		goto pause_enc_rsp_send_exit;
   14a6c:	f7ff ba98 	b.w	13fa0 <ull_conn_rx+0x94>
		if (!conn->tx_ctrl) {
   14a70:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   14a74:	2a00      	cmp	r2, #0
   14a76:	f47f ad60 	bne.w	1453a <ull_conn_rx+0x62e>
			tx->next = conn->tx_head;
   14a7a:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   14a7c:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   14a80:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   14a84:	e560      	b.n	14548 <ull_conn_rx+0x63c>
		if (!conn->lll.role) {
   14a86:	f994 7039 	ldrsb.w	r7, [r4, #57]	; 0x39
			if ((conn->llcp_conn_param.req !=
   14a8a:	f894 0184 	ldrb.w	r0, [r4, #388]	; 0x184
					conn->llcp_conn_param.ack) &&
   14a8e:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
		if (!conn->lll.role) {
   14a92:	2f00      	cmp	r7, #0
   14a94:	f2c0 80a2 	blt.w	14bdc <ull_conn_rx+0xcd0>
			if ((conn->llcp_conn_param.req !=
   14a98:	4281      	cmp	r1, r0
   14a9a:	d009      	beq.n	14ab0 <ull_conn_rx+0xba4>
			    ((conn->llcp_conn_param.state ==
   14a9c:	f894 0186 	ldrb.w	r0, [r4, #390]	; 0x186
					conn->llcp_conn_param.ack) &&
   14aa0:	f010 0007 	ands.w	r0, r0, #7
   14aa4:	f000 82e2 	beq.w	1506c <ull_conn_rx+0x1160>
			      LLCP_CPR_STATE_REQ) ||
   14aa8:	3804      	subs	r0, #4
   14aaa:	2801      	cmp	r0, #1
   14aac:	f240 82de 	bls.w	1506c <ull_conn_rx+0x1160>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   14ab0:	f894 00e4 	ldrb.w	r0, [r4, #228]	; 0xe4
   14ab4:	f894 70e5 	ldrb.w	r7, [r4, #229]	; 0xe5
   14ab8:	1bc0      	subs	r0, r0, r7
   14aba:	f000 0003 	and.w	r0, r0, #3
   14abe:	2802      	cmp	r0, #2
   14ac0:	f000 83ed 	beq.w	1529e <ull_conn_rx+0x1392>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   14ac4:	f894 71bc 	ldrb.w	r7, [r4, #444]	; 0x1bc
   14ac8:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
   14acc:	4287      	cmp	r7, r0
   14ace:	f000 83ec 	beq.w	152aa <ull_conn_rx+0x139e>
				nack = reject_ext_ind_send(conn, *rx,
   14ad2:	232a      	movs	r3, #42	; 0x2a
   14ad4:	220f      	movs	r2, #15
   14ad6:	e42d      	b.n	14334 <ull_conn_rx+0x428>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14ad8:	7913      	ldrb	r3, [r2, #4]
   14ada:	f003 0303 	and.w	r3, r3, #3
   14ade:	2b03      	cmp	r3, #3
   14ae0:	f000 833c 	beq.w	1515c <ull_conn_rx+0x1250>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   14ae4:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
   14ae8:	f7ff bac1 	b.w	1406e <ull_conn_rx+0x162>
	if (conn->common.txn_lock) {
   14aec:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   14af0:	079b      	lsls	r3, r3, #30
   14af2:	f53f aa55 	bmi.w	13fa0 <ull_conn_rx+0x94>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14af6:	48dc      	ldr	r0, [pc, #880]	; (14e68 <ull_conn_rx+0xf5c>)
   14af8:	f7f9 fc56 	bl	e3a8 <mem_acquire>
	if (!tx) {
   14afc:	4603      	mov	r3, r0
   14afe:	2800      	cmp	r0, #0
   14b00:	d089      	beq.n	14a16 <ull_conn_rx+0xb0a>
	conn->common.txn_lock = 1U;
   14b02:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   14b06:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
	eff_rx_octets = conn->lll.max_rx_octets;
   14b0a:	f8b4 805a 	ldrh.w	r8, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   14b0e:	f8b4 9058 	ldrh.w	r9, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   14b12:	f8b4 a05e 	ldrh.w	sl, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   14b16:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	conn->common.txn_lock = 1U;
   14b1a:	f042 0202 	orr.w	r2, r2, #2
   14b1e:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   14b22:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   14b26:	428a      	cmp	r2, r1
   14b28:	f040 84d3 	bne.w	154d2 <ull_conn_rx+0x15c6>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   14b2c:	8c29      	ldrh	r1, [r5, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   14b2e:	291a      	cmp	r1, #26
   14b30:	f240 82a3 	bls.w	1507a <ull_conn_rx+0x116e>
			eff_tx_octets = MIN(max_rx_octets,
   14b34:	f8b4 00d2 	ldrh.w	r0, [r4, #210]	; 0xd2
   14b38:	4281      	cmp	r1, r0
   14b3a:	bf28      	it	cs
   14b3c:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   14b3e:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   14b40:	f8b5 c026 	ldrh.w	ip, [r5, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   14b44:	281b      	cmp	r0, #27
		if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   14b46:	8c68      	ldrh	r0, [r5, #34]	; 0x22
			eff_rx_octets = MIN(max_tx_octets,
   14b48:	bf34      	ite	cc
   14b4a:	46c6      	movcc	lr, r8
   14b4c:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   14b50:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   14b54:	bf34      	ite	cc
   14b56:	4658      	movcc	r0, fp
   14b58:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   14b5c:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   14b60:	bf34      	ite	cc
   14b62:	46d4      	movcc	ip, sl
   14b64:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   14b68:	45c6      	cmp	lr, r8
   14b6a:	f000 8311 	beq.w	15190 <ull_conn_rx+0x1284>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   14b6e:	3a01      	subs	r2, #1
   14b70:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.rx_octets = eff_rx_octets;
   14b74:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
			conn->llcp_length.tx_octets = eff_tx_octets;
   14b78:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
			conn->llcp_length.rx_time = eff_rx_time;
   14b7c:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
			conn->llcp_length.tx_time = eff_tx_time;
   14b80:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
			if (tx) {
   14b84:	2b00      	cmp	r3, #0
   14b86:	f000 837a 	beq.w	1527e <ull_conn_rx+0x1372>
				conn->llcp_length.state =
   14b8a:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
   14b8e:	2505      	movs	r5, #5
   14b90:	f365 0202 	bfi	r2, r5, #0, #3
   14b94:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			link->mem = conn->llcp_rx;
   14b98:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   14b9c:	6072      	str	r2, [r6, #4]
			(*rx)->hdr.link = link;
   14b9e:	683a      	ldr	r2, [r7, #0]
   14ba0:	6016      	str	r6, [r2, #0]
			conn->llcp_rx = *rx;
   14ba2:	683a      	ldr	r2, [r7, #0]
   14ba4:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
			*rx = NULL;
   14ba8:	2200      	movs	r2, #0
   14baa:	603a      	str	r2, [r7, #0]
	if (tx) {
   14bac:	2b00      	cmp	r3, #0
   14bae:	f43f a9f9 	beq.w	13fa4 <ull_conn_rx+0x98>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   14bb2:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   14bb4:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   14bb6:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
   14bba:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   14bbc:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   14bbe:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   14bc0:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   14bc2:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   14bc4:	f8a3 e008 	strh.w	lr, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   14bc8:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   14bcc:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   14bce:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   14bd0:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   14bd2:	f7fe f9db 	bl	12f8c <ctrl_tx_sec_enqueue>
	return 0;
   14bd6:	2000      	movs	r0, #0
}
   14bd8:	f7ff b9e5 	b.w	13fa6 <ull_conn_rx+0x9a>
		} else if ((conn->llcp_conn_param.req ==
   14bdc:	4281      	cmp	r1, r0
   14bde:	d004      	beq.n	14bea <ull_conn_rx+0xcde>
			    conn->llcp_conn_param.ack) ||
   14be0:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   14be4:	0790      	lsls	r0, r2, #30
   14be6:	f47f a9db 	bne.w	13fa0 <ull_conn_rx+0x94>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   14bea:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   14bee:	fa1f f28a 	uxth.w	r2, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   14bf2:	2a05      	cmp	r2, #5
   14bf4:	f240 8142 	bls.w	14e7c <ull_conn_rx+0xf70>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   14bf8:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   14bfc:	fa1f f089 	uxth.w	r0, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   14c00:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   14c04:	f200 813a 	bhi.w	14e7c <ull_conn_rx+0xf70>
			    (interval_max > 3200) ||
   14c08:	4282      	cmp	r2, r0
   14c0a:	f200 8137 	bhi.w	14e7c <ull_conn_rx+0xf70>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   14c0e:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   14c12:	fa1f fc88 	uxth.w	ip, r8
			    (interval_min > interval_max) ||
   14c16:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   14c1a:	f080 812f 	bcs.w	14e7c <ull_conn_rx+0xf70>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   14c1e:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   14c22:	fa1f f28e 	uxth.w	r2, lr
			    (latency > 499) ||
   14c26:	f1a2 070a 	sub.w	r7, r2, #10
   14c2a:	f640 4b76 	movw	fp, #3190	; 0xc76
   14c2e:	b2bf      	uxth	r7, r7
   14c30:	455f      	cmp	r7, fp
   14c32:	f200 8123 	bhi.w	14e7c <ull_conn_rx+0xf70>
			     ((latency + 1) * interval_max)) ||
   14c36:	f10c 0701 	add.w	r7, ip, #1
   14c3a:	b2bf      	uxth	r7, r7
   14c3c:	fb00 f707 	mul.w	r7, r0, r7
			    (timeout < 10) || (timeout > 3200) ||
   14c40:	ebb7 0f82 	cmp.w	r7, r2, lsl #2
   14c44:	f080 811a 	bcs.w	14e7c <ull_conn_rx+0xf70>
			     ((latency + 1) * interval_max)) ||
   14c48:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   14c4c:	4558      	cmp	r0, fp
   14c4e:	f0c0 8115 	bcc.w	14e7c <ull_conn_rx+0xf70>
			conn->llcp_conn_param.interval_min = interval_min;
   14c52:	f8a4 a188 	strh.w	sl, [r4, #392]	; 0x188
			conn->llcp_conn_param.interval_max = interval_max;
   14c56:	f8a4 918a 	strh.w	r9, [r4, #394]	; 0x18a
			conn->llcp_conn_param.latency =	latency;
   14c5a:	f8a4 818c 	strh.w	r8, [r4, #396]	; 0x18c
			conn->llcp_conn_param.timeout =	timeout;
   14c5e:	f8a4 e18e 	strh.w	lr, [r4, #398]	; 0x18e
			conn->llcp_conn_param.preferred_periodicity =
   14c62:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   14c66:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   14c6a:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   14c6e:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   14c72:	f8a4 7192 	strh.w	r7, [r4, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset0);
   14c76:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   14c7a:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   14c7e:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   14c82:	f8a4 7194 	strh.w	r7, [r4, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset1);
   14c86:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   14c8a:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   14c8e:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   14c92:	f8a4 7196 	strh.w	r7, [r4, #406]	; 0x196
				sys_le16_to_cpu(cpr->offset2);
   14c96:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   14c9a:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   14c9e:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   14ca2:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
				sys_le16_to_cpu(cpr->offset3);
   14ca6:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   14caa:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   14cae:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   14cb2:	f8a4 719a 	strh.w	r7, [r4, #410]	; 0x19a
				sys_le16_to_cpu(cpr->offset4);
   14cb6:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   14cba:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   14cbe:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   14cc2:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
				sys_le16_to_cpu(cpr->offset5);
   14cc6:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   14cca:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
   14cce:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset5 =
   14cd2:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
			     lll->interval) ||
   14cd6:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
   14cd8:	42b8      	cmp	r0, r7
   14cda:	f000 8402 	beq.w	154e2 <ull_conn_rx+0x15d6>
				conn->llcp_conn_param.state =
   14cde:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   14ce2:	2003      	movs	r0, #3
   14ce4:	f360 0202 	bfi	r2, r0, #0, #3
   14ce8:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			conn->llcp_conn_param.ack--;
   14cec:	3901      	subs	r1, #1
   14cee:	f884 1185 	strb.w	r1, [r4, #389]	; 0x185
			if (!conn_upd_curr) {
   14cf2:	2b00      	cmp	r3, #0
   14cf4:	f47f a956 	bne.w	13fa4 <ull_conn_rx+0x98>
				conn_upd_curr = conn;
   14cf8:	6034      	str	r4, [r6, #0]
	int nack = 0;
   14cfa:	4618      	mov	r0, r3
   14cfc:	f7ff b953 	b.w	13fa6 <ull_conn_rx+0x9a>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   14d00:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
   14d04:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   14d08:	429a      	cmp	r2, r3
   14d0a:	f43f ade1 	beq.w	148d0 <ull_conn_rx+0x9c4>
		rej_ext_ind->error_code = rej_ind->error_code;
   14d0e:	f895 3020 	ldrb.w	r3, [r5, #32]
   14d12:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   14d16:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   14d1a:	2a00      	cmp	r2, #0
   14d1c:	f2c0 835d 	blt.w	153da <ull_conn_rx+0x14ce>
   14d20:	2b1a      	cmp	r3, #26
   14d22:	f000 8413 	beq.w	1554c <ull_conn_rx+0x1640>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   14d26:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   14d2a:	f003 0207 	and.w	r2, r3, #7
   14d2e:	2a04      	cmp	r2, #4
   14d30:	f47f ae2c 	bne.w	1498c <ull_conn_rx+0xa80>
		LL_ASSERT(conn_upd_curr == conn);
   14d34:	4e4d      	ldr	r6, [pc, #308]	; (14e6c <ull_conn_rx+0xf60>)
   14d36:	6832      	ldr	r2, [r6, #0]
   14d38:	4294      	cmp	r4, r2
   14d3a:	d00e      	beq.n	14d5a <ull_conn_rx+0xe4e>
   14d3c:	4a4c      	ldr	r2, [pc, #304]	; (14e70 <ull_conn_rx+0xf64>)
   14d3e:	494d      	ldr	r1, [pc, #308]	; (14e74 <ull_conn_rx+0xf68>)
   14d40:	484d      	ldr	r0, [pc, #308]	; (14e78 <ull_conn_rx+0xf6c>)
   14d42:	f241 2329 	movw	r3, #4649	; 0x1229
   14d46:	f008 f975 	bl	1d034 <printk>
   14d4a:	4040      	eors	r0, r0
   14d4c:	f380 8811 	msr	BASEPRI, r0
   14d50:	f04f 0003 	mov.w	r0, #3
   14d54:	df02      	svc	2
   14d56:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   14d5a:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   14d5e:	f884 1185 	strb.w	r1, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   14d62:	2200      	movs	r2, #0
   14d64:	6032      	str	r2, [r6, #0]
		conn->procedure_expire = 0U;
   14d66:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
   14d6a:	e60f      	b.n	1498c <ull_conn_rx+0xa80>
	if (conn->common.txn_lock) {
   14d6c:	f894 70d8 	ldrb.w	r7, [r4, #216]	; 0xd8
   14d70:	f017 0702 	ands.w	r7, r7, #2
   14d74:	f47f a914 	bne.w	13fa0 <ull_conn_rx+0x94>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14d78:	483b      	ldr	r0, [pc, #236]	; (14e68 <ull_conn_rx+0xf5c>)
   14d7a:	f7f9 fb15 	bl	e3a8 <mem_acquire>
	if (!tx) {
   14d7e:	2800      	cmp	r0, #0
   14d80:	f43f ae49 	beq.w	14a16 <ull_conn_rx+0xb0a>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   14d84:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
	conn->common.txn_lock = 1U;
   14d88:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	if (conn->llcp_phy.ack ==
   14d8c:	f894 e1bd 	ldrb.w	lr, [r4, #445]	; 0x1bd
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   14d90:	2102      	movs	r1, #2
   14d92:	f361 0201 	bfi	r2, r1, #0, #2
	conn->common.txn_lock = 1U;
   14d96:	f043 0302 	orr.w	r3, r3, #2
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   14d9a:	f884 21be 	strb.w	r2, [r4, #446]	; 0x1be
	if (conn->llcp_phy.ack ==
   14d9e:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
	conn->common.txn_lock = 1U;
   14da2:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
			conn->phy_pref_tx;
   14da6:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
	if (conn->llcp_phy.ack ==
   14daa:	4572      	cmp	r2, lr
			conn->phy_pref_tx;
   14dac:	f3c3 0602 	ubfx	r6, r3, #0, #3
   14db0:	f003 0c07 	and.w	ip, r3, #7
			conn->phy_pref_rx;
   14db4:	f3c3 01c2 	ubfx	r1, r3, #3, #3
	if (conn->llcp_phy.ack ==
   14db8:	d114      	bne.n	14de4 <ull_conn_rx+0xed8>
		conn->llcp_phy.ack--;
   14dba:	3a01      	subs	r2, #1
		conn->llcp_phy.cmd = 0U;
   14dbc:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack--;
   14dc0:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
		conn->llcp_phy.tx =
   14dc4:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
		conn->llcp_phy.cmd = 0U;
   14dc8:	f367 0382 	bfi	r3, r7, #2, #1
		conn->llcp_phy.tx =
   14dcc:	f36c 0284 	bfi	r2, ip, #2, #3
		conn->llcp_phy.rx =
   14dd0:	f361 1247 	bfi	r2, r1, #5, #3
		conn->llcp_phy.cmd = 0U;
   14dd4:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		conn->procedure_expire =
   14dd8:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
		conn->llcp_phy.rx =
   14ddc:	f884 21be 	strb.w	r2, [r4, #446]	; 0x1be
		conn->procedure_expire =
   14de0:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_phy.rx &= p->tx_phys;
   14de4:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
	conn->llcp_phy.tx &= p->rx_phys;
   14de8:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   14dec:	f895 7020 	ldrb.w	r7, [r5, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   14df0:	f3c2 0c82 	ubfx	ip, r2, #2, #3
   14df4:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
   14df8:	ea07 1752 	and.w	r7, r7, r2, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   14dfc:	009b      	lsls	r3, r3, #2
   14dfe:	f002 0203 	and.w	r2, r2, #3
   14e02:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   14e06:	4313      	orrs	r3, r2
   14e08:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   14e0c:	2303      	movs	r3, #3
   14e0e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   14e10:	7241      	strb	r1, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14e12:	7901      	ldrb	r1, [r0, #4]
	    conn->tx_head &&
   14e14:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   14e18:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   14e1a:	2217      	movs	r2, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14e1c:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   14e20:	71c2      	strb	r2, [r0, #7]
		if (!conn->tx_ctrl) {
   14e22:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14e26:	7101      	strb	r1, [r0, #4]
	if (
   14e28:	2b00      	cmp	r3, #0
   14e2a:	f000 8111 	beq.w	15050 <ull_conn_rx+0x1144>
	    !conn->llcp_enc.pause_tx &&
   14e2e:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   14e32:	078e      	lsls	r6, r1, #30
   14e34:	f100 810c 	bmi.w	15050 <ull_conn_rx+0x1144>
	    !conn->llcp_phy.pause_tx &&
   14e38:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   14e3c:	07c9      	lsls	r1, r1, #31
   14e3e:	f100 8107 	bmi.w	15050 <ull_conn_rx+0x1144>
		if (conn->tx_head == conn->tx_data) {
   14e42:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   14e46:	428b      	cmp	r3, r1
   14e48:	f000 8317 	beq.w	1547a <ull_conn_rx+0x156e>
		} else if (!conn->tx_ctrl) {
   14e4c:	2a00      	cmp	r2, #0
   14e4e:	f47f ab74 	bne.w	1453a <ull_conn_rx+0x62e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14e52:	791a      	ldrb	r2, [r3, #4]
   14e54:	f002 0203 	and.w	r2, r2, #3
   14e58:	2a03      	cmp	r2, #3
   14e5a:	f000 836f 	beq.w	1553c <ull_conn_rx+0x1630>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   14e5e:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   14e62:	f7ff bb6a 	b.w	1453a <ull_conn_rx+0x62e>
   14e66:	bf00      	nop
   14e68:	2000242c 	.word	0x2000242c
   14e6c:	200023a8 	.word	0x200023a8
   14e70:	00023588 	.word	0x00023588
   14e74:	000236fc 	.word	0x000236fc
   14e78:	000230b4 	.word	0x000230b4
				nack = reject_ext_ind_send(conn, *rx,
   14e7c:	231e      	movs	r3, #30
   14e7e:	220f      	movs	r2, #15
   14e80:	f7ff ba58 	b.w	14334 <ull_conn_rx+0x428>
			conn->llcp_conn_param.disabled = 1U;
   14e84:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   14e88:	f043 0310 	orr.w	r3, r3, #16
   14e8c:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
			if (!conn->lll.role) {
   14e90:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   14e94:	2b00      	cmp	r3, #0
   14e96:	f2c0 81a9 	blt.w	151ec <ull_conn_rx+0x12e0>
				LL_ASSERT(conn->llcp_cu.req ==
   14e9a:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   14e9e:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   14ea2:	429a      	cmp	r2, r3
   14ea4:	d00e      	beq.n	14ec4 <ull_conn_rx+0xfb8>
   14ea6:	4acd      	ldr	r2, [pc, #820]	; (151dc <ull_conn_rx+0x12d0>)
   14ea8:	49cd      	ldr	r1, [pc, #820]	; (151e0 <ull_conn_rx+0x12d4>)
   14eaa:	48ce      	ldr	r0, [pc, #824]	; (151e4 <ull_conn_rx+0x12d8>)
   14eac:	f641 1315 	movw	r3, #6421	; 0x1915
   14eb0:	f008 f8c0 	bl	1d034 <printk>
   14eb4:	4040      	eors	r0, r0
   14eb6:	f380 8811 	msr	BASEPRI, r0
   14eba:	f04f 0003 	mov.w	r0, #3
   14ebe:	df02      	svc	2
   14ec0:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_conn_param.state =
   14ec4:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   14ec8:	2105      	movs	r1, #5
   14eca:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp_cu.ack--;
   14ece:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
   14ed0:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
   14ed2:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_cu.win_size = 1U;
   14ed6:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   14eda:	683d      	ldr	r5, [r7, #0]
				conn->llcp_conn_param.state =
   14edc:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   14ee0:	f002 0308 	and.w	r3, r2, #8
   14ee4:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
   14ee8:	430b      	orrs	r3, r1
   14eea:	f022 020f 	bic.w	r2, r2, #15
   14eee:	4313      	orrs	r3, r2
   14ef0:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
				conn->llcp_cu.latency =
   14ef4:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
				conn->llcp_cu.interval =
   14ef8:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
				conn->llcp_cu.latency =
   14efc:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
				conn->llcp_cu.win_offset_us = 0U;
   14f00:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   14f02:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
				conn->llcp_cu.interval =
   14f06:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
				conn->llcp_cu.timeout =
   14f0a:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
				conn->llcp_cu.win_offset_us = 0U;
   14f0e:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   14f12:	7129      	strb	r1, [r5, #4]
				break;
   14f14:	f7ff b847 	b.w	13fa6 <ull_conn_rx+0x9a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14f18:	48b3      	ldr	r0, [pc, #716]	; (151e8 <ull_conn_rx+0x12dc>)
   14f1a:	f7f9 fa45 	bl	e3a8 <mem_acquire>
		if (!tx) {
   14f1e:	4601      	mov	r1, r0
   14f20:	2800      	cmp	r0, #0
   14f22:	f43f ad78 	beq.w	14a16 <ull_conn_rx+0xb0a>
		conn->llcp_version.tx = 1U;
   14f26:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   14f2a:	f043 0301 	orr.w	r3, r3, #1
   14f2e:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   14f32:	220c      	movs	r2, #12
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   14f34:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   14f36:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   14f38:	220b      	movs	r2, #11
   14f3a:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   14f3c:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   14f40:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   14f44:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   14f46:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
   14f48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   14f4c:	2205      	movs	r2, #5
		v->sub_version_number =
   14f4e:	72c3      	strb	r3, [r0, #11]
   14f50:	7303      	strb	r3, [r0, #12]
		pdu_tx->len =
   14f52:	7146      	strb	r6, [r0, #5]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   14f54:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   14f56:	4620      	mov	r0, r4
   14f58:	f7fe f818 	bl	12f8c <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   14f5c:	2301      	movs	r3, #1
   14f5e:	712b      	strb	r3, [r5, #4]
   14f60:	e435      	b.n	147ce <ull_conn_rx+0x8c2>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   14f62:	712f      	strb	r7, [r5, #4]
		*err = 0U;
   14f64:	2000      	movs	r0, #0
   14f66:	f7ff b81e 	b.w	13fa6 <ull_conn_rx+0x9a>
				      0x03) == 0x02) &&
   14f6a:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   14f6e:	2b03      	cmp	r3, #3
   14f70:	f47f a9de 	bne.w	14330 <ull_conn_rx+0x424>
   14f74:	f7ff b9d5 	b.w	14322 <ull_conn_rx+0x416>
	instant = sys_le16_to_cpu(ind->instant);
   14f78:	8c68      	ldrh	r0, [r5, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   14f7a:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   14f7c:	1a82      	subs	r2, r0, r2
   14f7e:	0412      	lsls	r2, r2, #16
   14f80:	d47d      	bmi.n	1507e <ull_conn_rx+0x1172>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   14f82:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   14f86:	f894 c0e5 	ldrb.w	ip, [r4, #229]	; 0xe5
   14f8a:	eba2 020c 	sub.w	r2, r2, ip
   14f8e:	f002 0203 	and.w	r2, r2, #3
   14f92:	2a02      	cmp	r2, #2
   14f94:	f000 80f8 	beq.w	15188 <ull_conn_rx+0x127c>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   14f98:	f894 51bc 	ldrb.w	r5, [r4, #444]	; 0x1bc
   14f9c:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   14fa0:	42aa      	cmp	r2, r5
   14fa2:	d018      	beq.n	14fd6 <ull_conn_rx+0x10ca>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   14fa4:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   14fa8:	f002 0203 	and.w	r2, r2, #3
   14fac:	2a02      	cmp	r2, #2
   14fae:	d112      	bne.n	14fd6 <ull_conn_rx+0x10ca>
		conn->llcp_phy.pause_tx = 0U;
   14fb0:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   14fb4:	f884 51bd 	strb.w	r5, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   14fb8:	f36f 0200 	bfc	r2, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   14fbc:	f894 50e8 	ldrb.w	r5, [r4, #232]	; 0xe8
		conn->llcp_phy.pause_tx = 0U;
   14fc0:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   14fc4:	f3c2 0280 	ubfx	r2, r2, #2, #1
   14fc8:	f362 0541 	bfi	r5, r2, #1, #1
		conn->procedure_expire = 0U;
   14fcc:	2200      	movs	r2, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   14fce:	f884 50e8 	strb.w	r5, [r4, #232]	; 0xe8
		conn->procedure_expire = 0U;
   14fd2:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	conn->llcp.phy_upd_ind.initiate = 0U;
   14fd6:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp.phy_upd_ind.instant = instant;
   14fda:	f8a4 00ea 	strh.w	r0, [r4, #234]	; 0xea
	conn->llcp.phy_upd_ind.initiate = 0U;
   14fde:	009b      	lsls	r3, r3, #2
   14fe0:	f003 031c 	and.w	r3, r3, #28
   14fe4:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   14fe8:	f002 0202 	and.w	r2, r2, #2
   14fec:	4313      	orrs	r3, r2
	link->mem = conn->llcp_rx;
   14fee:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	conn->llcp.phy_upd_ind.initiate = 0U;
   14ff2:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	link->mem = conn->llcp_rx;
   14ff6:	6072      	str	r2, [r6, #4]
	(*rx)->hdr.link = link;
   14ff8:	683a      	ldr	r2, [r7, #0]
   14ffa:	6016      	str	r6, [r2, #0]
	conn->llcp_rx = *rx;
   14ffc:	683a      	ldr	r2, [r7, #0]
   14ffe:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
   15002:	2300      	movs	r3, #0
   15004:	603b      	str	r3, [r7, #0]
	struct node_rx_pdu *rx_dle = ll_pdu_rx_alloc();
   15006:	f7fc ffa9 	bl	11f5c <ll_pdu_rx_alloc>
	LL_ASSERT(rx_dle);
   1500a:	4605      	mov	r5, r0
   1500c:	2800      	cmp	r0, #0
   1500e:	f000 8244 	beq.w	1549a <ull_conn_rx+0x158e>
	rx_dle->hdr.link->mem = conn->llcp_rx;
   15012:	682b      	ldr	r3, [r5, #0]
   15014:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   15018:	605a      	str	r2, [r3, #4]
	conn->llcp_ack -= 2U;
   1501a:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
	if (conn->llcp.phy_upd_ind.tx) {
   1501e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
	conn->llcp_rx = rx_dle;
   15022:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	conn->llcp_type = LLCP_PHY_UPD;
   15026:	2106      	movs	r1, #6
	conn->llcp_ack -= 2U;
   15028:	3a02      	subs	r2, #2
	if (conn->llcp.phy_upd_ind.tx) {
   1502a:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
   1502e:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	conn->llcp_ack -= 2U;
   15032:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	if (conn->llcp.phy_upd_ind.tx) {
   15036:	f43e afb5 	beq.w	13fa4 <ull_conn_rx+0x98>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1503a:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
   1503e:	f3c3 0382 	ubfx	r3, r3, #2, #3
   15042:	f363 1206 	bfi	r2, r3, #4, #3
   15046:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
	int nack = 0;
   1504a:	2000      	movs	r0, #0
   1504c:	f7fe bfab 	b.w	13fa6 <ull_conn_rx+0x9a>
		if (!conn->tx_ctrl) {
   15050:	2a00      	cmp	r2, #0
   15052:	f47f aa72 	bne.w	1453a <ull_conn_rx+0x62e>
   15056:	e510      	b.n	14a7a <ull_conn_rx+0xb6e>
			conn->llcp_length.disabled = 1U;
   15058:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   1505c:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.disabled = 1U;
   15060:	f043 0308 	orr.w	r3, r3, #8
   15064:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   15068:	f7ff b851 	b.w	1410e <ull_conn_rx+0x202>
				nack = reject_ext_ind_send(conn, *rx,
   1506c:	2323      	movs	r3, #35	; 0x23
   1506e:	220f      	movs	r2, #15
   15070:	f7ff b960 	b.w	14334 <ull_conn_rx+0x428>
				nack = reject_ext_ind_send(conn, *rx,
   15074:	2323      	movs	r3, #35	; 0x23
   15076:	f7ff b95c 	b.w	14332 <ull_conn_rx+0x426>
   1507a:	4649      	mov	r1, r9
   1507c:	e55f      	b.n	14b3e <ull_conn_rx+0xc32>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1507e:	2301      	movs	r3, #1
   15080:	712b      	strb	r3, [r5, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   15082:	2328      	movs	r3, #40	; 0x28
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = phy_upd_ind_recv(conn, link, rx, pdu_rx);
		if (err) {
			conn->llcp_terminate.reason_peer = err;
   15084:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
	int nack = 0;
   15088:	2000      	movs	r0, #0
   1508a:	f7fe bf8c 	b.w	13fa6 <ull_conn_rx+0x9a>
				conn->llcp_phy.state =
   1508e:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   15092:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
   15094:	f043 0303 	orr.w	r3, r3, #3
   15098:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   1509c:	d111      	bne.n	150c2 <ull_conn_rx+0x11b6>
					conn->llcp_phy.tx =
   1509e:	f8b4 21be 	ldrh.w	r2, [r4, #446]	; 0x1be
						conn->phy_pref_rx;
   150a2:	f894 01c0 	ldrb.w	r0, [r4, #448]	; 0x1c0
					conn->llcp_phy.ack--;
   150a6:	1e4b      	subs	r3, r1, #1
					conn->llcp_phy.tx =
   150a8:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
   150ac:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
					conn->llcp_phy.tx =
   150b0:	f240 43fc 	movw	r3, #1276	; 0x4fc
   150b4:	f022 0204 	bic.w	r2, r2, #4
   150b8:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   150bc:	4313      	orrs	r3, r2
   150be:	f8a4 31be 	strh.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.rx &= p->tx_phys;
   150c2:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   150c6:	f895 1020 	ldrb.w	r1, [r5, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   150ca:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
   150ce:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   150d2:	f003 0203 	and.w	r2, r3, #3
   150d6:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   150da:	4003      	ands	r3, r0
   150dc:	009b      	lsls	r3, r3, #2
   150de:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   150e2:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   150e4:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   150e8:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   150ec:	d002      	beq.n	150f4 <ull_conn_rx+0x11e8>
   150ee:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   150f2:	d105      	bne.n	15100 <ull_conn_rx+0x11f4>
					conn->llcp_phy.tx = 0;
   150f4:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   150f8:	f003 0303 	and.w	r3, r3, #3
   150fc:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.pause_tx = 1U;
   15100:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   15104:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
   15106:	4313      	orrs	r3, r2
   15108:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
	int nack = 0;
   1510c:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1510e:	712a      	strb	r2, [r5, #4]
   15110:	f7fe bf49 	b.w	13fa6 <ull_conn_rx+0x9a>
			lll->phy_tx_time = lll->phy_tx;
   15114:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
			conn->llcp_phy.pause_tx = 0U;
   15118:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
			conn->llcp_phy.ack = conn->llcp_phy.req;
   1511c:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
			conn->llcp_phy.pause_tx = 0U;
   15120:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   15124:	460a      	mov	r2, r1
			conn->llcp_phy.pause_tx = 0U;
   15126:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   1512a:	f361 1206 	bfi	r2, r1, #4, #3
   1512e:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			if (conn->llcp_phy.cmd) {
   15132:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
   15136:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
			lll->phy_tx_time = lll->phy_tx;
   1513a:	f3c1 0102 	ubfx	r1, r1, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1513e:	683b      	ldr	r3, [r7, #0]
			if (conn->llcp_phy.cmd) {
   15140:	f000 80a9 	beq.w	15296 <ull_conn_rx+0x138a>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   15144:	221a      	movs	r2, #26
   15146:	711a      	strb	r2, [r3, #4]
				p->status = 0U;
   15148:	2300      	movs	r3, #0
   1514a:	772b      	strb	r3, [r5, #28]
				p->tx = lll->phy_tx;
   1514c:	7769      	strb	r1, [r5, #29]
				p->rx = lll->phy_rx;
   1514e:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   15152:	f3c3 0302 	ubfx	r3, r3, #0, #3
   15156:	77ab      	strb	r3, [r5, #30]
   15158:	f7fe bfd9 	b.w	1410e <ull_conn_rx+0x202>
	    ((pdu_data_tx->llctrl.opcode !=
   1515c:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1515e:	2b03      	cmp	r3, #3
   15160:	f43f ac6f 	beq.w	14a42 <ull_conn_rx+0xb36>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   15164:	2b0a      	cmp	r3, #10
   15166:	f47f acbd 	bne.w	14ae4 <ull_conn_rx+0xbd8>
   1516a:	e46a      	b.n	14a42 <ull_conn_rx+0xb36>
	conn->llcp_enc.pause_rx = 0U;
   1516c:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   15170:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
   15174:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   15176:	f021 0103 	bic.w	r1, r1, #3
   1517a:	f884 1166 	strb.w	r1, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   1517e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   15182:	4618      	mov	r0, r3
   15184:	f7fe bf0f 	b.w	13fa6 <ull_conn_rx+0x9a>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   15188:	2301      	movs	r3, #1
   1518a:	712b      	strb	r3, [r5, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   1518c:	232a      	movs	r3, #42	; 0x2a
   1518e:	e779      	b.n	15084 <ull_conn_rx+0x1178>
			conn->procedure_expire = 0U;
   15190:	2600      	movs	r6, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   15192:	4549      	cmp	r1, r9
			conn->llcp_length.ack = conn->llcp_length.req;
   15194:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->procedure_expire = 0U;
   15198:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   1519c:	f000 8139 	beq.w	15412 <ull_conn_rx+0x1506>
			conn->lll.max_rx_time = eff_rx_time;
   151a0:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
			if (tx) {
   151a4:	2b00      	cmp	r3, #0
   151a6:	f000 812f 	beq.w	15408 <ull_conn_rx+0x14fc>
					(conn->llcp_length.req - 1);
   151aa:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
   151ac:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
				conn->llcp_length.state =
   151b0:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->llcp_length.rx_octets = eff_rx_octets;
   151b4:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
				conn->llcp_length.state =
   151b8:	2603      	movs	r6, #3
   151ba:	f366 0202 	bfi	r2, r6, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   151be:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
				conn->llcp_length.rx_time = eff_rx_time;
   151c2:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
				conn->llcp_length.tx_time = eff_tx_time;
   151c6:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
				conn->llcp_length.state =
   151ca:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   151ce:	f8a5 e020 	strh.w	lr, [r5, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   151d2:	84a9      	strh	r1, [r5, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   151d4:	f8a5 c022 	strh.w	ip, [r5, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   151d8:	84e8      	strh	r0, [r5, #38]	; 0x26
   151da:	e4e7      	b.n	14bac <ull_conn_rx+0xca0>
   151dc:	00023588 	.word	0x00023588
   151e0:	000236d4 	.word	0x000236d4
   151e4:	000230b4 	.word	0x000230b4
   151e8:	2000242c 	.word	0x2000242c
			LL_ASSERT(conn_upd_curr == conn);
   151ec:	4ecd      	ldr	r6, [pc, #820]	; (15524 <ull_conn_rx+0x1618>)
   151ee:	6833      	ldr	r3, [r6, #0]
   151f0:	429c      	cmp	r4, r3
   151f2:	d00e      	beq.n	15212 <ull_conn_rx+0x1306>
   151f4:	4acc      	ldr	r2, [pc, #816]	; (15528 <ull_conn_rx+0x161c>)
   151f6:	49cd      	ldr	r1, [pc, #820]	; (1552c <ull_conn_rx+0x1620>)
   151f8:	48cd      	ldr	r0, [pc, #820]	; (15530 <ull_conn_rx+0x1624>)
   151fa:	f641 132d 	movw	r3, #6445	; 0x192d
   151fe:	f007 ff19 	bl	1d034 <printk>
   15202:	4040      	eors	r0, r0
   15204:	f380 8811 	msr	BASEPRI, r0
   15208:	f04f 0003 	mov.w	r0, #3
   1520c:	df02      	svc	2
   1520e:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
			if (!conn->llcp_conn_param.cmd) {
   15212:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   15216:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			if (!conn->llcp_conn_param.cmd) {
   1521a:	f013 0308 	ands.w	r3, r3, #8
	conn_upd_curr = NULL;
   1521e:	f04f 0200 	mov.w	r2, #0
   15222:	6032      	str	r2, [r6, #0]
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   15224:	683a      	ldr	r2, [r7, #0]
			if (!conn->llcp_conn_param.cmd) {
   15226:	f43f a857 	beq.w	142d8 <ull_conn_rx+0x3cc>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1522a:	2116      	movs	r1, #22
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1522c:	231a      	movs	r3, #26
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1522e:	7111      	strb	r1, [r2, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   15230:	772b      	strb	r3, [r5, #28]
			cu->interval = lll->interval;
   15232:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
   15234:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			cu->latency = lll->latency;
   15238:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
   1523a:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
   1523c:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   15240:	227d      	movs	r2, #125	; 0x7d
   15242:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
   15246:	8429      	strh	r1, [r5, #32]
				      lll->interval * 125U / 1000;
   15248:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1524c:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   15250:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   15252:	f7fe bf5c 	b.w	1410e <ull_conn_rx+0x202>
		conn_upd_curr = conn;
   15256:	601c      	str	r4, [r3, #0]
   15258:	f7ff b8e4 	b.w	14424 <ull_conn_rx+0x518>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1525c:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
   15260:	f36f 0101 	bfc	r1, #0, #2
				conn->llcp_ack -= 2U;
   15264:	3b02      	subs	r3, #2
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   15266:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
				conn->llcp_type = LLCP_ENCRYPTION;
   1526a:	2103      	movs	r1, #3
   1526c:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
				conn->llcp_ack -= 2U;
   15270:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
   15274:	f7fe bf43 	b.w	140fe <ull_conn_rx+0x1f2>
	struct node_tx *tx = NULL;
   15278:	2300      	movs	r3, #0
   1527a:	f7fe bfd2 	b.w	14222 <ull_conn_rx+0x316>
				conn->llcp_length.state =
   1527e:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->lll.max_tx_octets = eff_tx_octets;
   15282:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->llcp_length.state =
   15286:	2504      	movs	r5, #4
   15288:	f365 0202 	bfi	r2, r5, #0, #3
				conn->lll.max_tx_time = eff_tx_time;
   1528c:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
				conn->llcp_length.state =
   15290:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
   15294:	e480      	b.n	14b98 <ull_conn_rx+0xc8c>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   15296:	2201      	movs	r2, #1
   15298:	711a      	strb	r2, [r3, #4]
   1529a:	f7fe bf38 	b.w	1410e <ull_conn_rx+0x202>
				      0x03) == 0x02) &&
   1529e:	f894 00e6 	ldrb.w	r0, [r4, #230]	; 0xe6
   152a2:	2803      	cmp	r0, #3
   152a4:	f47f ac15 	bne.w	14ad2 <ull_conn_rx+0xbc6>
   152a8:	e40c      	b.n	14ac4 <ull_conn_rx+0xbb8>
				uint16_t interval_min =
   152aa:	f8b5 9020 	ldrh.w	r9, [r5, #32]
   152ae:	fa1f f089 	uxth.w	r0, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   152b2:	2805      	cmp	r0, #5
   152b4:	f67f ade2 	bls.w	14e7c <ull_conn_rx+0xf70>
				uint16_t interval_max =
   152b8:	f8b5 8022 	ldrh.w	r8, [r5, #34]	; 0x22
   152bc:	fa1f fc88 	uxth.w	ip, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   152c0:	f5bc 6f48 	cmp.w	ip, #3200	; 0xc80
   152c4:	f63f adda 	bhi.w	14e7c <ull_conn_rx+0xf70>
				    (interval_max > 3200) ||
   152c8:	4560      	cmp	r0, ip
   152ca:	f63f add7 	bhi.w	14e7c <ull_conn_rx+0xf70>
				uint16_t latency =
   152ce:	8caf      	ldrh	r7, [r5, #36]	; 0x24
   152d0:	fa1f fe87 	uxth.w	lr, r7
				    (interval_min > interval_max) ||
   152d4:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
   152d8:	f4bf add0 	bcs.w	14e7c <ull_conn_rx+0xf70>
				uint16_t timeout =
   152dc:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
   152de:	f8ad 0006 	strh.w	r0, [sp, #6]
   152e2:	b280      	uxth	r0, r0
				    (latency > 499) ||
   152e4:	f1a0 0a0a 	sub.w	sl, r0, #10
   152e8:	f640 4b76 	movw	fp, #3190	; 0xc76
   152ec:	fa1f fa8a 	uxth.w	sl, sl
   152f0:	45da      	cmp	sl, fp
   152f2:	f63f adc3 	bhi.w	14e7c <ull_conn_rx+0xf70>
				     ((latency + 1) * interval_max)) ||
   152f6:	f10e 0a01 	add.w	sl, lr, #1
   152fa:	fa1f fa8a 	uxth.w	sl, sl
   152fe:	fb0c fa0a 	mul.w	sl, ip, sl
				    (timeout > 3200) ||
   15302:	ebba 0f80 	cmp.w	sl, r0, lsl #2
   15306:	f4bf adb9 	bcs.w	14e7c <ull_conn_rx+0xf70>
				     ((latency + 1) * interval_max)) ||
   1530a:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   1530e:	45dc      	cmp	ip, fp
   15310:	f4ff adb4 	bcc.w	14e7c <ull_conn_rx+0xf70>
				conn->llcp_conn_param.latency =	latency;
   15314:	f8a4 718c 	strh.w	r7, [r4, #396]	; 0x18c
				conn->llcp_conn_param.timeout =	timeout;
   15318:	f8bd 7006 	ldrh.w	r7, [sp, #6]
				conn->llcp_conn_param.interval_min =
   1531c:	f8a4 9188 	strh.w	r9, [r4, #392]	; 0x188
				conn->llcp_conn_param.interval_max =
   15320:	f8a4 818a 	strh.w	r8, [r4, #394]	; 0x18a
				conn->llcp_conn_param.timeout =	timeout;
   15324:	f8a4 718e 	strh.w	r7, [r4, #398]	; 0x18e
				conn->llcp_conn_param.preferred_periodicity =
   15328:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   1532c:	f895 802a 	ldrb.w	r8, [r5, #42]	; 0x2a
   15330:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   15334:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   15338:	f8a4 7192 	strh.w	r7, [r4, #402]	; 0x192
					sys_le16_to_cpu(cpr->offset0);
   1533c:	f895 802c 	ldrb.w	r8, [r5, #44]	; 0x2c
   15340:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   15344:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset0 =
   15348:	f8a4 7194 	strh.w	r7, [r4, #404]	; 0x194
					sys_le16_to_cpu(cpr->offset1);
   1534c:	f895 802e 	ldrb.w	r8, [r5, #46]	; 0x2e
   15350:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   15354:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset1 =
   15358:	f8a4 7196 	strh.w	r7, [r4, #406]	; 0x196
					sys_le16_to_cpu(cpr->offset2);
   1535c:	f895 8030 	ldrb.w	r8, [r5, #48]	; 0x30
   15360:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   15364:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset2 =
   15368:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
					sys_le16_to_cpu(cpr->offset3);
   1536c:	f895 8032 	ldrb.w	r8, [r5, #50]	; 0x32
   15370:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   15374:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset3 =
   15378:	f8a4 719a 	strh.w	r7, [r4, #410]	; 0x19a
					sys_le16_to_cpu(cpr->offset4);
   1537c:	f895 8034 	ldrb.w	r8, [r5, #52]	; 0x34
   15380:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   15384:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset4 =
   15388:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
					sys_le16_to_cpu(cpr->offset5);
   1538c:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   15390:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
   15394:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset5 =
   15398:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
				     lll->interval) ||
   1539c:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
   1539e:	45bc      	cmp	ip, r7
   153a0:	f000 8111 	beq.w	155c6 <ull_conn_rx+0x16ba>
					if (conn->llcp_enc.pause_tx) {
   153a4:	f012 0f02 	tst.w	r2, #2
						conn->llcp_conn_param.state =
   153a8:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
					if (conn->llcp_enc.pause_tx) {
   153ac:	f43f ac99 	beq.w	14ce2 <ull_conn_rx+0xdd6>
						conn->llcp_conn_param.state =
   153b0:	2002      	movs	r0, #2
   153b2:	f360 0202 	bfi	r2, r0, #0, #3
   153b6:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
						(*rx)->hdr.type =
   153ba:	2201      	movs	r2, #1
   153bc:	712a      	strb	r2, [r5, #4]
   153be:	e495      	b.n	14cec <ull_conn_rx+0xde0>
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   153c0:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
			conn->llcp_ack += 2U;
   153c4:	3202      	adds	r2, #2
   153c6:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   153ca:	2b00      	cmp	r3, #0
   153cc:	d173      	bne.n	154b6 <ull_conn_rx+0x15aa>
			conn->slave.llcp_type = conn->llcp_type;
   153ce:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   153d2:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
   153d6:	f7fe bec5 	b.w	14164 <ull_conn_rx+0x258>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   153da:	2b23      	cmp	r3, #35	; 0x23
   153dc:	f43f aca3 	beq.w	14d26 <ull_conn_rx+0xe1a>
			conn->slave.ticks_to_offset =
   153e0:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
   153e4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   153e8:	e49d      	b.n	14d26 <ull_conn_rx+0xe1a>
			conn->tx_data = conn->tx_data->next;
   153ea:	681a      	ldr	r2, [r3, #0]
   153ec:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   153f0:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   153f4:	2a00      	cmp	r2, #0
   153f6:	f47f a8a0 	bne.w	1453a <ull_conn_rx+0x62e>
			tx->next = conn->tx_head->next;
   153fa:	681a      	ldr	r2, [r3, #0]
   153fc:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   153fe:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   15400:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   15404:	f7ff b8a0 	b.w	14548 <ull_conn_rx+0x63c>
				conn->lll.max_tx_octets = eff_tx_octets;
   15408:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   1540c:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
   15410:	e6dd      	b.n	151ce <ull_conn_rx+0x12c2>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   15412:	4558      	cmp	r0, fp
   15414:	f47f aec4 	bne.w	151a0 <ull_conn_rx+0x1294>
			    eff_rx_time == conn->lll.max_rx_time &&
   15418:	45d4      	cmp	ip, sl
   1541a:	f47f aec1 	bne.w	151a0 <ull_conn_rx+0x1294>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1541e:	683a      	ldr	r2, [r7, #0]
   15420:	2501      	movs	r5, #1
   15422:	7115      	strb	r5, [r2, #4]
				goto send_length_resp;
   15424:	f7ff bbc2 	b.w	14bac <ull_conn_rx+0xca0>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   15428:	683b      	ldr	r3, [r7, #0]
   1542a:	211a      	movs	r1, #26
   1542c:	7119      	strb	r1, [r3, #4]
		p->status = 0U;
   1542e:	7728      	strb	r0, [r5, #28]
		p->tx = conn->lll.phy_tx;
   15430:	776a      	strb	r2, [r5, #29]
		p->rx = conn->lll.phy_rx;
   15432:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   15436:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1543a:	77ab      	strb	r3, [r5, #30]
		if (err) {
   1543c:	f7fe bdb3 	b.w	13fa6 <ull_conn_rx+0x9a>
		LL_ASSERT(conn_upd_curr == conn);
   15440:	4e38      	ldr	r6, [pc, #224]	; (15524 <ull_conn_rx+0x1618>)
   15442:	6831      	ldr	r1, [r6, #0]
   15444:	428c      	cmp	r4, r1
   15446:	d010      	beq.n	1546a <ull_conn_rx+0x155e>
   15448:	4a37      	ldr	r2, [pc, #220]	; (15528 <ull_conn_rx+0x161c>)
   1544a:	4938      	ldr	r1, [pc, #224]	; (1552c <ull_conn_rx+0x1620>)
   1544c:	4838      	ldr	r0, [pc, #224]	; (15530 <ull_conn_rx+0x1624>)
   1544e:	f241 2329 	movw	r3, #4649	; 0x1229
   15452:	f007 fdef 	bl	1d034 <printk>
   15456:	4040      	eors	r0, r0
   15458:	f380 8811 	msr	BASEPRI, r0
   1545c:	f04f 0003 	mov.w	r0, #3
   15460:	df02      	svc	2
   15462:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   15466:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1546a:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   1546e:	2200      	movs	r2, #0
   15470:	6032      	str	r2, [r6, #0]
		conn->procedure_expire = 0U;
   15472:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
   15476:	f7ff ba89 	b.w	1498c <ull_conn_rx+0xa80>
			conn->tx_data = conn->tx_data->next;
   1547a:	6819      	ldr	r1, [r3, #0]
   1547c:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   15480:	2a00      	cmp	r2, #0
   15482:	d0ba      	beq.n	153fa <ull_conn_rx+0x14ee>
   15484:	f7ff b859 	b.w	1453a <ull_conn_rx+0x62e>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   15488:	2b23      	cmp	r3, #35	; 0x23
   1548a:	f43f aa78 	beq.w	1497e <ull_conn_rx+0xa72>
			conn->slave.ticks_to_offset =
   1548e:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
   15492:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   15496:	f7ff ba72 	b.w	1497e <ull_conn_rx+0xa72>
	LL_ASSERT(rx_dle);
   1549a:	4a23      	ldr	r2, [pc, #140]	; (15528 <ull_conn_rx+0x161c>)
   1549c:	4925      	ldr	r1, [pc, #148]	; (15534 <ull_conn_rx+0x1628>)
   1549e:	4824      	ldr	r0, [pc, #144]	; (15530 <ull_conn_rx+0x1624>)
   154a0:	f241 43eb 	movw	r3, #5355	; 0x14eb
   154a4:	f007 fdc6 	bl	1d034 <printk>
   154a8:	4040      	eors	r0, r0
   154aa:	f380 8811 	msr	BASEPRI, r0
   154ae:	f04f 0003 	mov.w	r0, #3
   154b2:	df02      	svc	2
   154b4:	e5ad      	b.n	15012 <ull_conn_rx+0x1106>
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   154b6:	4a1c      	ldr	r2, [pc, #112]	; (15528 <ull_conn_rx+0x161c>)
   154b8:	491f      	ldr	r1, [pc, #124]	; (15538 <ull_conn_rx+0x162c>)
   154ba:	481d      	ldr	r0, [pc, #116]	; (15530 <ull_conn_rx+0x1624>)
   154bc:	f241 63c1 	movw	r3, #5825	; 0x16c1
   154c0:	f007 fdb8 	bl	1d034 <printk>
   154c4:	4040      	eors	r0, r0
   154c6:	f380 8811 	msr	BASEPRI, r0
   154ca:	f04f 0003 	mov.w	r0, #3
   154ce:	df02      	svc	2
   154d0:	e77d      	b.n	153ce <ull_conn_rx+0x14c2>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   154d2:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   154d6:	f011 0f06 	tst.w	r1, #6
   154da:	f43f ab27 	beq.w	14b2c <ull_conn_rx+0xc20>
   154de:	f7fe be99 	b.w	14214 <ull_conn_rx+0x308>
			     lll->interval) ||
   154e2:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
   154e4:	4567      	cmp	r7, ip
   154e6:	f47f abfa 	bne.w	14cde <ull_conn_rx+0xdd2>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   154ea:	f240 47e2 	movw	r7, #1250	; 0x4e2
   154ee:	fb07 f000 	mul.w	r0, r7, r0
   154f2:	f242 7710 	movw	r7, #10000	; 0x2710
   154f6:	fb07 0202 	mla	r2, r7, r2, r0
   154fa:	3a01      	subs	r2, #1
   154fc:	fbb2 f2f0 	udiv	r2, r2, r0
			    (conn->llcp_conn_param.latency != lll->latency) ||
   15500:	f8b4 00c2 	ldrh.w	r0, [r4, #194]	; 0xc2
   15504:	b292      	uxth	r2, r2
   15506:	4290      	cmp	r0, r2
   15508:	f47f abe9 	bne.w	14cde <ull_conn_rx+0xdd2>
				conn->llcp_conn_param.state =
   1550c:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   15510:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   15514:	f042 0201 	orr.w	r2, r2, #1
   15518:	f8a4 2186 	strh.w	r2, [r4, #390]	; 0x186
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1551c:	2201      	movs	r2, #1
   1551e:	712a      	strb	r2, [r5, #4]
   15520:	f7ff bbe4 	b.w	14cec <ull_conn_rx+0xde0>
   15524:	200023a8 	.word	0x200023a8
   15528:	00023588 	.word	0x00023588
   1552c:	000236fc 	.word	0x000236fc
   15530:	000230b4 	.word	0x000230b4
   15534:	00023714 	.word	0x00023714
   15538:	000236b0 	.word	0x000236b0
	    ((pdu_data_tx->llctrl.opcode !=
   1553c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1553e:	2a03      	cmp	r2, #3
   15540:	f43f af5b 	beq.w	153fa <ull_conn_rx+0x14ee>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   15544:	2a0a      	cmp	r2, #10
   15546:	f47f ac8a 	bne.w	14e5e <ull_conn_rx+0xf52>
   1554a:	e756      	b.n	153fa <ull_conn_rx+0x14ee>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   1554c:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   15550:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   15554:	429a      	cmp	r2, r3
   15556:	d00e      	beq.n	15576 <ull_conn_rx+0x166a>
   15558:	4a26      	ldr	r2, [pc, #152]	; (155f4 <ull_conn_rx+0x16e8>)
   1555a:	4927      	ldr	r1, [pc, #156]	; (155f8 <ull_conn_rx+0x16ec>)
   1555c:	4827      	ldr	r0, [pc, #156]	; (155fc <ull_conn_rx+0x16f0>)
   1555e:	f241 230e 	movw	r3, #4622	; 0x120e
   15562:	f007 fd67 	bl	1d034 <printk>
   15566:	4040      	eors	r0, r0
   15568:	f380 8811 	msr	BASEPRI, r0
   1556c:	f04f 0003 	mov.w	r0, #3
   15570:	df02      	svc	2
   15572:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   15576:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   1557a:	2105      	movs	r1, #5
   1557c:	f361 0202 	bfi	r2, r1, #0, #3
		conn->llcp_cu.ack--;
   15580:	3b01      	subs	r3, #1
   15582:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   15586:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1558a:	f002 0308 	and.w	r3, r2, #8
   1558e:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.win_size = 1U;
   15592:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15594:	430b      	orrs	r3, r1
   15596:	f022 020f 	bic.w	r2, r2, #15
   1559a:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   1559c:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   155a0:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   155a4:	f8b4 118a 	ldrh.w	r1, [r4, #394]	; 0x18a
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   155a8:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   155ac:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   155ae:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
		conn->llcp_cu.win_offset_us = 0U;
   155b2:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   155b6:	f8a4 1110 	strh.w	r1, [r4, #272]	; 0x110
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   155ba:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   155be:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
	if (err) {
   155c2:	f7fe bced 	b.w	13fa0 <ull_conn_rx+0x94>
				     lll->interval) ||
   155c6:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
   155ca:	45f4      	cmp	ip, lr
   155cc:	f47f aeea 	bne.w	153a4 <ull_conn_rx+0x1498>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   155d0:	f240 4ce2 	movw	ip, #1250	; 0x4e2
   155d4:	fb0c f707 	mul.w	r7, ip, r7
   155d8:	f242 7c10 	movw	ip, #10000	; 0x2710
   155dc:	fb0c 7000 	mla	r0, ip, r0, r7
   155e0:	3801      	subs	r0, #1
   155e2:	fbb0 f0f7 	udiv	r0, r0, r7
				     lll->latency) ||
   155e6:	f8b4 70c2 	ldrh.w	r7, [r4, #194]	; 0xc2
   155ea:	b280      	uxth	r0, r0
   155ec:	4287      	cmp	r7, r0
   155ee:	f47f aed9 	bne.w	153a4 <ull_conn_rx+0x1498>
   155f2:	e78b      	b.n	1550c <ull_conn_rx+0x1600>
   155f4:	00023588 	.word	0x00023588
   155f8:	000236d4 	.word	0x000236d4
   155fc:	000230b4 	.word	0x000230b4

00015600 <ull_conn_tx_demux>:
{
   15600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   15604:	4f24      	ldr	r7, [pc, #144]	; (15698 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15606:	4e25      	ldr	r6, [pc, #148]	; (1569c <ull_conn_tx_demux+0x9c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   15608:	78fa      	ldrb	r2, [r7, #3]
{
   1560a:	4604      	mov	r4, r0
	return (void *)(fifo + first * size);
   1560c:	1d3d      	adds	r5, r7, #4
   1560e:	e021      	b.n	15654 <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15610:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   15614:	4630      	mov	r0, r6
   15616:	f7f8 fef9 	bl	e40c <mem_get>
	if (conn->lll.handle != handle) {
   1561a:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   1561c:	bb32      	cbnz	r2, 1566c <ull_conn_tx_demux+0x6c>
			struct node_tx *tx = lll_tx->node;
   1561e:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   15622:	f8d0 11d0 	ldr.w	r1, [r0, #464]	; 0x1d0
			tx->next = NULL;
   15626:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   15628:	b359      	cbz	r1, 15682 <ull_conn_tx_demux+0x82>
			if (conn->tx_data_last) {
   1562a:	f8d0 21d4 	ldr.w	r2, [r0, #468]	; 0x1d4
   1562e:	b102      	cbz	r2, 15632 <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   15630:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   15632:	f8c0 31d4 	str.w	r3, [r0, #468]	; 0x1d4
		MFIFO_DEQUEUE(conn_tx);
   15636:	78fa      	ldrb	r2, [r7, #3]
	uint8_t _first = *first; /* Copy read-index */
   15638:	78bb      	ldrb	r3, [r7, #2]
   1563a:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
   1563c:	429a      	cmp	r2, r3
   1563e:	d005      	beq.n	1564c <ull_conn_tx_demux+0x4c>
	_first += 1U;
   15640:	3301      	adds	r3, #1
   15642:	b2db      	uxtb	r3, r3
		_first = 0U;
   15644:	4299      	cmp	r1, r3
   15646:	bf08      	it	eq
   15648:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1564a:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   1564c:	3c01      	subs	r4, #1
   1564e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   15652:	d01f      	beq.n	15694 <ull_conn_tx_demux+0x94>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   15654:	78bb      	ldrb	r3, [r7, #2]
   15656:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
   15658:	4293      	cmp	r3, r2
   1565a:	d01b      	beq.n	15694 <ull_conn_tx_demux+0x94>
	return (void *)(fifo + first * size);
   1565c:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
   15660:	eb15 0803 	adds.w	r8, r5, r3
   15664:	d016      	beq.n	15694 <ull_conn_tx_demux+0x94>
	if (handle >= CONFIG_BT_MAX_CONN) {
   15666:	5aea      	ldrh	r2, [r5, r3]
   15668:	2a00      	cmp	r2, #0
   1566a:	d0d1      	beq.n	15610 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   1566c:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   15670:	790b      	ldrb	r3, [r1, #4]
   15672:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(0xFFFF, tx);
   15676:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   1567a:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   1567c:	f7fc fc84 	bl	11f88 <ll_tx_ack_put>
   15680:	e7d9      	b.n	15636 <ull_conn_tx_demux+0x36>
				if (!conn->tx_head) {
   15682:	f8d0 21c4 	ldr.w	r2, [r0, #452]	; 0x1c4
				conn->tx_data = tx;
   15686:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
				if (!conn->tx_head) {
   1568a:	2a00      	cmp	r2, #0
   1568c:	d1cd      	bne.n	1562a <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   1568e:	f8c0 31c4 	str.w	r3, [r0, #452]	; 0x1c4
			if (conn->tx_data_last) {
   15692:	e7ce      	b.n	15632 <ull_conn_tx_demux+0x32>
}
   15694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15698:	200004f8 	.word	0x200004f8
   1569c:	20001218 	.word	0x20001218

000156a0 <conn_cleanup>:
	if (conn == conn_upd_curr) {
   156a0:	4b3b      	ldr	r3, [pc, #236]	; (15790 <conn_cleanup+0xf0>)
   156a2:	681a      	ldr	r2, [r3, #0]
{
   156a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (conn == conn_upd_curr) {
   156a8:	4282      	cmp	r2, r0
	conn_upd_curr = NULL;
   156aa:	bf04      	itt	eq
   156ac:	2200      	moveq	r2, #0
   156ae:	601a      	streq	r2, [r3, #0]
	rx = conn->llcp_rx;
   156b0:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
	rx->hdr.handle = conn->lll.handle;
   156b4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   156b6:	f8a0 314a 	strh.w	r3, [r0, #330]	; 0x14a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   156ba:	2315      	movs	r3, #21
{
   156bc:	b083      	sub	sp, #12
   156be:	4606      	mov	r6, r0
	struct lll_conn *lll = &conn->lll;
   156c0:	f100 0b1c 	add.w	fp, r0, #28
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   156c4:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
	*((uint8_t *)rx->pdu) = reason;
   156c8:	f880 1160 	strb.w	r1, [r0, #352]	; 0x160
	while (rx) {
   156cc:	b144      	cbz	r4, 156e0 <conn_cleanup+0x40>
		hdr->type = NODE_RX_TYPE_RELEASE;
   156ce:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   156d0:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   156d2:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   156d4:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   156d6:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   156d8:	f7fc fc12 	bl	11f00 <ll_rx_put>
	while (rx) {
   156dc:	2c00      	cmp	r4, #0
   156de:	d1f7      	bne.n	156d0 <conn_cleanup+0x30>
	while (conn->tx_head) {
   156e0:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   156e4:	b381      	cbz	r1, 15748 <conn_cleanup+0xa8>
		link = mem_acquire(&mem_link_tx.free);
   156e6:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 157a4 <conn_cleanup+0x104>
		LL_ASSERT(link);
   156ea:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1579c <conn_cleanup+0xfc>
   156ee:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 157a8 <conn_cleanup+0x108>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   156f2:	f106 0768 	add.w	r7, r6, #104	; 0x68
   156f6:	e007      	b.n	15708 <conn_cleanup+0x68>
   156f8:	4629      	mov	r1, r5
   156fa:	463a      	mov	r2, r7
   156fc:	4620      	mov	r0, r4
   156fe:	f7f8 feb7 	bl	e470 <memq_enqueue>
	while (conn->tx_head) {
   15702:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   15706:	b1f9      	cbz	r1, 15748 <conn_cleanup+0xa8>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   15708:	4630      	mov	r0, r6
   1570a:	f7fd fd2b 	bl	13164 <tx_ull_dequeue>
   1570e:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   15710:	4640      	mov	r0, r8
   15712:	f7f8 fe49 	bl	e3a8 <mem_acquire>
		LL_ASSERT(link);
   15716:	4604      	mov	r4, r0
   15718:	2800      	cmp	r0, #0
   1571a:	d1ed      	bne.n	156f8 <conn_cleanup+0x58>
   1571c:	481d      	ldr	r0, [pc, #116]	; (15794 <conn_cleanup+0xf4>)
   1571e:	f240 739a 	movw	r3, #1946	; 0x79a
   15722:	4652      	mov	r2, sl
   15724:	4649      	mov	r1, r9
   15726:	f007 fc85 	bl	1d034 <printk>
   1572a:	4040      	eors	r0, r0
   1572c:	f380 8811 	msr	BASEPRI, r0
   15730:	f04f 0003 	mov.w	r0, #3
   15734:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   15736:	4629      	mov	r1, r5
   15738:	463a      	mov	r2, r7
   1573a:	4620      	mov	r0, r4
   1573c:	f7f8 fe98 	bl	e470 <memq_enqueue>
	while (conn->tx_head) {
   15740:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   15744:	2900      	cmp	r1, #0
   15746:	d1df      	bne.n	15708 <conn_cleanup+0x68>
				    TICKER_ID_CONN_BASE + lll->handle,
   15748:	8d32      	ldrh	r2, [r6, #40]	; 0x28
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1574a:	4b13      	ldr	r3, [pc, #76]	; (15798 <conn_cleanup+0xf8>)
   1574c:	f8cd b000 	str.w	fp, [sp]
				    TICKER_ID_CONN_BASE + lll->handle,
   15750:	3203      	adds	r2, #3
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   15752:	b2d2      	uxtb	r2, r2
   15754:	2101      	movs	r1, #1
   15756:	2000      	movs	r0, #0
   15758:	f7fa f8cc 	bl	f8f4 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1575c:	f030 0302 	bics.w	r3, r0, #2
   15760:	d00c      	beq.n	1577c <conn_cleanup+0xdc>
   15762:	4a0e      	ldr	r2, [pc, #56]	; (1579c <conn_cleanup+0xfc>)
   15764:	490e      	ldr	r1, [pc, #56]	; (157a0 <conn_cleanup+0x100>)
   15766:	480b      	ldr	r0, [pc, #44]	; (15794 <conn_cleanup+0xf4>)
   15768:	f44f 63ec 	mov.w	r3, #1888	; 0x760
   1576c:	f007 fc62 	bl	1d034 <printk>
   15770:	4040      	eors	r0, r0
   15772:	f380 8811 	msr	BASEPRI, r0
   15776:	f04f 0003 	mov.w	r0, #3
   1577a:	df02      	svc	2
	lll->handle = 0xFFFF;
   1577c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   15780:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   15782:	8533      	strh	r3, [r6, #40]	; 0x28
}
   15784:	b003      	add	sp, #12
   15786:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
   1578a:	f7ff bf39 	b.w	15600 <ull_conn_tx_demux>
   1578e:	bf00      	nop
   15790:	200023a8 	.word	0x200023a8
   15794:	000230b4 	.word	0x000230b4
   15798:	00013011 	.word	0x00013011
   1579c:	00023588 	.word	0x00023588
   157a0:	00023668 	.word	0x00023668
   157a4:	200024e0 	.word	0x200024e0
   157a8:	000235e0 	.word	0x000235e0

000157ac <ull_conn_done>:
{
   157ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
   157b0:	69c5      	ldr	r5, [r0, #28]
	if (unlikely(lll->handle == 0xFFFF)) {
   157b2:	8b2a      	ldrh	r2, [r5, #24]
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
   157b4:	68ec      	ldr	r4, [r5, #12]
	if (unlikely(lll->handle == 0xFFFF)) {
   157b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   157ba:	429a      	cmp	r2, r3
{
   157bc:	b08b      	sub	sp, #44	; 0x2c
	if (unlikely(lll->handle == 0xFFFF)) {
   157be:	f000 8092 	beq.w	158e6 <ull_conn_done+0x13a>
	switch (done->extra.mic_state) {
   157c2:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   157c6:	2b01      	cmp	r3, #1
   157c8:	4606      	mov	r6, r0
   157ca:	f000 80dd 	beq.w	15988 <ull_conn_done+0x1dc>
   157ce:	2b02      	cmp	r3, #2
   157d0:	f000 80d0 	beq.w	15974 <ull_conn_done+0x1c8>
   157d4:	2b00      	cmp	r3, #0
   157d6:	f000 80b3 	beq.w	15940 <ull_conn_done+0x194>
	reason_peer = conn->llcp_terminate.reason_peer;
   157da:	f894 7143 	ldrb.w	r7, [r4, #323]	; 0x143
	if (reason_peer && (
   157de:	2f00      	cmp	r7, #0
   157e0:	f040 80cb 	bne.w	1597a <ull_conn_done+0x1ce>
	latency_event = lll->latency_event;
   157e4:	f8b5 9020 	ldrh.w	r9, [r5, #32]
	if (done->extra.trx_cnt) {
   157e8:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	elapsed_event = latency_event + 1;
   157ea:	f109 0801 	add.w	r8, r9, #1
	ticks_drift_minus = 0U;
   157ee:	e9cd 7708 	strd	r7, r7, [sp, #32]
	elapsed_event = latency_event + 1;
   157f2:	fa1f f888 	uxth.w	r8, r8
	if (done->extra.trx_cnt) {
   157f6:	2b00      	cmp	r3, #0
   157f8:	d078      	beq.n	158ec <ull_conn_done+0x140>
		} else if (lll->role) {
   157fa:	f995 3029 	ldrsb.w	r3, [r5, #41]	; 0x29
   157fe:	2b00      	cmp	r3, #0
   15800:	f2c0 8108 	blt.w	15a14 <ull_conn_done+0x268>
	if (done->extra.crc_valid) {
   15804:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		conn->connect_expire = 0U;
   15808:	2200      	movs	r2, #0
   1580a:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (done->extra.crc_valid) {
   1580e:	2b00      	cmp	r3, #0
   15810:	f000 80c0 	beq.w	15994 <ull_conn_done+0x1e8>
		conn->supervision_expire = 0U;
   15814:	2300      	movs	r3, #0
   15816:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	if (conn->procedure_expire != 0U) {
   1581a:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   1581e:	b133      	cbz	r3, 1582e <ull_conn_done+0x82>
		if (conn->procedure_expire > elapsed_event) {
   15820:	4543      	cmp	r3, r8
   15822:	f240 810d 	bls.w	15a40 <ull_conn_done+0x294>
			conn->procedure_expire -= elapsed_event;
   15826:	eba3 0308 	sub.w	r3, r3, r8
   1582a:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->apto_expire != 0U) {
   1582e:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   15832:	b133      	cbz	r3, 15842 <ull_conn_done+0x96>
		if (conn->apto_expire > elapsed_event) {
   15834:	4543      	cmp	r3, r8
   15836:	f240 80da 	bls.w	159ee <ull_conn_done+0x242>
			conn->apto_expire -= elapsed_event;
   1583a:	eba3 0308 	sub.w	r3, r3, r8
   1583e:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	if (conn->appto_expire != 0U) {
   15842:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
			    (conn->llcp_req == conn->llcp_ack)) {
   15846:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1584a:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
	if (conn->appto_expire != 0U) {
   1584e:	b15a      	cbz	r2, 15868 <ull_conn_done+0xbc>
		if (conn->appto_expire > elapsed_event) {
   15850:	4542      	cmp	r2, r8
   15852:	f200 80af 	bhi.w	159b4 <ull_conn_done+0x208>
			if ((conn->procedure_expire == 0U) &&
   15856:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
			conn->appto_expire = 0U;
   1585a:	2000      	movs	r0, #0
   1585c:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
			if ((conn->procedure_expire == 0U) &&
   15860:	b912      	cbnz	r2, 15868 <ull_conn_done+0xbc>
   15862:	428b      	cmp	r3, r1
   15864:	f000 8103 	beq.w	15a6e <ull_conn_done+0x2c2>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   15868:	1a5b      	subs	r3, r3, r1
   1586a:	f003 0303 	and.w	r3, r3, #3
   1586e:	2b02      	cmp	r3, #2
   15870:	f000 80aa 	beq.w	159c8 <ull_conn_done+0x21c>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   15874:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   15878:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   1587c:	429a      	cmp	r2, r3
   1587e:	f000 80c7 	beq.w	15a10 <ull_conn_done+0x264>
		lll->latency_event = 0U;
   15882:	2200      	movs	r2, #0
   15884:	842a      	strh	r2, [r5, #32]
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   15886:	e9dd 4308 	ldrd	r4, r3, [sp, #32]
	if ((force) || (latency_event != lll->latency_event)) {
   1588a:	b917      	cbnz	r7, 15892 <ull_conn_done+0xe6>
   1588c:	4591      	cmp	r9, r2
   1588e:	f000 80a8 	beq.w	159e2 <ull_conn_done+0x236>
		lazy = lll->latency_event + 1U;
   15892:	3201      	adds	r2, #1
   15894:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   15896:	b913      	cbnz	r3, 1589e <ull_conn_done+0xf2>
   15898:	2c00      	cmp	r4, #0
   1589a:	f000 8084 	beq.w	159a6 <ull_conn_done+0x1fa>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1589e:	8b2a      	ldrh	r2, [r5, #24]
		struct ll_conn *conn = lll->hdr.parent;
   158a0:	68ed      	ldr	r5, [r5, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   158a2:	9400      	str	r4, [sp, #0]
   158a4:	2000      	movs	r0, #0
   158a6:	4c82      	ldr	r4, [pc, #520]	; (15ab0 <ull_conn_done+0x304>)
   158a8:	9103      	str	r1, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   158aa:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   158ac:	e9cd 0001 	strd	r0, r0, [sp, #4]
   158b0:	9704      	str	r7, [sp, #16]
   158b2:	9506      	str	r5, [sp, #24]
   158b4:	b2d2      	uxtb	r2, r2
   158b6:	2101      	movs	r1, #1
   158b8:	9405      	str	r4, [sp, #20]
   158ba:	f7fa f803 	bl	f8c4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   158be:	f030 0302 	bics.w	r3, r0, #2
   158c2:	d010      	beq.n	158e6 <ull_conn_done+0x13a>
   158c4:	f7fc fbd4 	bl	12070 <ull_disable_mark_get>
   158c8:	4285      	cmp	r5, r0
   158ca:	d00c      	beq.n	158e6 <ull_conn_done+0x13a>
   158cc:	4a79      	ldr	r2, [pc, #484]	; (15ab4 <ull_conn_done+0x308>)
   158ce:	497a      	ldr	r1, [pc, #488]	; (15ab8 <ull_conn_done+0x30c>)
   158d0:	487a      	ldr	r0, [pc, #488]	; (15abc <ull_conn_done+0x310>)
   158d2:	f240 53af 	movw	r3, #1455	; 0x5af
   158d6:	f007 fbad 	bl	1d034 <printk>
   158da:	4040      	eors	r0, r0
   158dc:	f380 8811 	msr	BASEPRI, r0
   158e0:	f04f 0003 	mov.w	r0, #3
   158e4:	df02      	svc	2
}
   158e6:	b00b      	add	sp, #44	; 0x2c
   158e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (done->extra.crc_valid) {
   158ec:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
   158f0:	2b00      	cmp	r3, #0
   158f2:	d18f      	bne.n	15814 <ull_conn_done+0x68>
	else if (conn->connect_expire) {
   158f4:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	; 0xc0
   158f8:	2b00      	cmp	r3, #0
   158fa:	d04b      	beq.n	15994 <ull_conn_done+0x1e8>
		if (conn->connect_expire > elapsed_event) {
   158fc:	4543      	cmp	r3, r8
   158fe:	f240 80bd 	bls.w	15a7c <ull_conn_done+0x2d0>
			conn->connect_expire -= elapsed_event;
   15902:	eba3 0308 	sub.w	r3, r3, r8
   15906:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
	if (conn->supervision_expire) {
   1590a:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   1590e:	2b00      	cmp	r3, #0
   15910:	d083      	beq.n	1581a <ull_conn_done+0x6e>
		if (conn->supervision_expire > elapsed_event) {
   15912:	4598      	cmp	r8, r3
   15914:	f080 808f 	bcs.w	15a36 <ull_conn_done+0x28a>
			conn->supervision_expire -= elapsed_event;
   15918:	eba3 0308 	sub.w	r3, r3, r8
   1591c:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   1591e:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   15920:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   15922:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
			lll->latency_event = 0U;
   15926:	842a      	strh	r2, [r5, #32]
			if (conn->supervision_expire <= 6U) {
   15928:	d908      	bls.n	1593c <ull_conn_done+0x190>
			else if (lll->role) {
   1592a:	f995 3029 	ldrsb.w	r3, [r5, #41]	; 0x29
   1592e:	4293      	cmp	r3, r2
   15930:	f6bf af73 	bge.w	1581a <ull_conn_done+0x6e>
				if (latency_event) {
   15934:	f1b9 0f00 	cmp.w	r9, #0
   15938:	f000 808b 	beq.w	15a52 <ull_conn_done+0x2a6>
				force = 1U;
   1593c:	2701      	movs	r7, #1
   1593e:	e76c      	b.n	1581a <ull_conn_done+0x6e>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   15940:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
   15944:	0719      	lsls	r1, r3, #28
   15946:	d546      	bpl.n	159d6 <ull_conn_done+0x22a>
					    (lll->latency + 6)) ?
   15948:	8bab      	ldrh	r3, [r5, #28]
			appto_reload_new = (conn->apto_reload >
   1594a:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
					    (lll->latency + 6)) ?
   1594e:	1d99      	adds	r1, r3, #6
			appto_reload_new = (conn->apto_reload >
   15950:	428a      	cmp	r2, r1
					   (conn->apto_reload -
   15952:	bfc4      	itt	gt
   15954:	1ad3      	subgt	r3, r2, r3
   15956:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
   15958:	f8b4 10ca 	ldrh.w	r1, [r4, #202]	; 0xca
			appto_reload_new = (conn->apto_reload >
   1595c:	bfcc      	ite	gt
   1595e:	b29b      	uxthgt	r3, r3
   15960:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   15962:	4299      	cmp	r1, r3
   15964:	d061      	beq.n	15a2a <ull_conn_done+0x27e>
				conn->appto_reload = appto_reload_new;
   15966:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				conn->appto_expire = conn->appto_reload;
   1596a:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				conn->apto_expire = conn->apto_reload;
   1596e:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
   15972:	e732      	b.n	157da <ull_conn_done+0x2e>
		conn->llcp_terminate.reason_peer =
   15974:	273d      	movs	r7, #61	; 0x3d
   15976:	f884 7143 	strb.w	r7, [r4, #323]	; 0x143
		conn_cleanup(conn, reason_peer);
   1597a:	4639      	mov	r1, r7
   1597c:	4620      	mov	r0, r4
}
   1597e:	b00b      	add	sp, #44	; 0x2c
   15980:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		conn_cleanup(conn, reason_peer);
   15984:	f7ff be8c 	b.w	156a0 <conn_cleanup>
		conn->appto_expire = conn->apto_expire = 0U;
   15988:	2300      	movs	r3, #0
   1598a:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   1598e:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		break;
   15992:	e722      	b.n	157da <ull_conn_done+0x2e>
		if (!conn->supervision_expire) {
   15994:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   15998:	2b00      	cmp	r3, #0
   1599a:	d1ba      	bne.n	15912 <ull_conn_done+0x166>
			conn->supervision_expire = conn->supervision_reload;
   1599c:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
   159a0:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
   159a4:	e7b3      	b.n	1590e <ull_conn_done+0x162>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   159a6:	2900      	cmp	r1, #0
   159a8:	f47f af79 	bne.w	1589e <ull_conn_done+0xf2>
   159ac:	2f00      	cmp	r7, #0
   159ae:	f47f af76 	bne.w	1589e <ull_conn_done+0xf2>
   159b2:	e798      	b.n	158e6 <ull_conn_done+0x13a>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   159b4:	1a5b      	subs	r3, r3, r1
   159b6:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   159ba:	eba2 0208 	sub.w	r2, r2, r8
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   159be:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   159c0:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   159c4:	f47f af56 	bne.w	15874 <ull_conn_done+0xc8>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   159c8:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   159cc:	3b01      	subs	r3, #1
   159ce:	2b01      	cmp	r3, #1
   159d0:	f63f af50 	bhi.w	15874 <ull_conn_done+0xc8>
   159d4:	e755      	b.n	15882 <ull_conn_done+0xd6>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   159d6:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   159da:	07da      	lsls	r2, r3, #31
   159dc:	f57f aefd 	bpl.w	157da <ull_conn_done+0x2e>
   159e0:	e7b2      	b.n	15948 <ull_conn_done+0x19c>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   159e2:	b913      	cbnz	r3, 159ea <ull_conn_done+0x23e>
   159e4:	2c00      	cmp	r4, #0
   159e6:	f43f af7e 	beq.w	158e6 <ull_conn_done+0x13a>
	lazy = 0U;
   159ea:	4639      	mov	r1, r7
   159ec:	e757      	b.n	1589e <ull_conn_done+0xf2>
			rx = ll_pdu_rx_alloc();
   159ee:	f7fc fab5 	bl	11f5c <ll_pdu_rx_alloc>
			if (rx) {
   159f2:	4601      	mov	r1, r0
   159f4:	b348      	cbz	r0, 15a4a <ull_conn_done+0x29e>
				rx->handle = lll->handle;
   159f6:	8b2b      	ldrh	r3, [r5, #24]
				conn->apto_expire = 0U;
   159f8:	2200      	movs	r2, #0
   159fa:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
				rx->handle = lll->handle;
   159fe:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   15a00:	2318      	movs	r3, #24
   15a02:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   15a04:	6800      	ldr	r0, [r0, #0]
   15a06:	f7fc fa7b 	bl	11f00 <ll_rx_put>
				ll_rx_sched();
   15a0a:	f7fc fa83 	bl	11f14 <ll_rx_sched>
   15a0e:	e718      	b.n	15842 <ull_conn_done+0x96>
	if ((force) || (latency_event != lll->latency_event)) {
   15a10:	8c2a      	ldrh	r2, [r5, #32]
   15a12:	e738      	b.n	15886 <ull_conn_done+0xda>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   15a14:	aa08      	add	r2, sp, #32
   15a16:	a909      	add	r1, sp, #36	; 0x24
   15a18:	4630      	mov	r0, r6
   15a1a:	f7ec fc4d 	bl	22b8 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   15a1e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   15a22:	b383      	cbz	r3, 15a86 <ull_conn_done+0x2da>
				lll->latency_event = 0;
   15a24:	2300      	movs	r3, #0
   15a26:	842b      	strh	r3, [r5, #32]
   15a28:	e6ec      	b.n	15804 <ull_conn_done+0x58>
			if (conn->apto_expire == 0U) {
   15a2a:	f8b4 10d0 	ldrh.w	r1, [r4, #208]	; 0xd0
   15a2e:	2900      	cmp	r1, #0
   15a30:	f47f aed3 	bne.w	157da <ull_conn_done+0x2e>
   15a34:	e799      	b.n	1596a <ull_conn_done+0x1be>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   15a36:	2108      	movs	r1, #8
   15a38:	4620      	mov	r0, r4
   15a3a:	f7ff fe31 	bl	156a0 <conn_cleanup>
			return;
   15a3e:	e752      	b.n	158e6 <ull_conn_done+0x13a>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   15a40:	2122      	movs	r1, #34	; 0x22
   15a42:	4620      	mov	r0, r4
   15a44:	f7ff fe2c 	bl	156a0 <conn_cleanup>
			return;
   15a48:	e74d      	b.n	158e6 <ull_conn_done+0x13a>
				conn->apto_expire = 1U;
   15a4a:	2301      	movs	r3, #1
   15a4c:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   15a50:	e6f7      	b.n	15842 <ull_conn_done+0x96>
					force = conn->slave.force & 0x01;
   15a52:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
					conn->slave.force >>= 1U;
   15a56:	085a      	lsrs	r2, r3, #1
					if (force) {
   15a58:	f013 0301 	ands.w	r3, r3, #1
						conn->slave.force |= BIT(31);
   15a5c:	bf17      	itett	ne
   15a5e:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->slave.force >>= 1U;
   15a62:	f8c4 20dc 	streq.w	r2, [r4, #220]	; 0xdc
						conn->slave.force |= BIT(31);
   15a66:	f8c4 20dc 	strne.w	r2, [r4, #220]	; 0xdc
					force = conn->slave.force & 0x01;
   15a6a:	461f      	movne	r7, r3
   15a6c:	e6d5      	b.n	1581a <ull_conn_done+0x6e>
				conn->llcp_ack -= 2U;
   15a6e:	3b02      	subs	r3, #2
   15a70:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
				conn->llcp_type = LLCP_PING;
   15a74:	2305      	movs	r3, #5
   15a76:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   15a7a:	e6fb      	b.n	15874 <ull_conn_done+0xc8>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   15a7c:	213e      	movs	r1, #62	; 0x3e
   15a7e:	4620      	mov	r0, r4
   15a80:	f7ff fe0e 	bl	156a0 <conn_cleanup>
			return;
   15a84:	e72f      	b.n	158e6 <ull_conn_done+0x13a>
				ull_conn_tx_demux(UINT8_MAX);
   15a86:	20ff      	movs	r0, #255	; 0xff
   15a88:	f7ff fdba 	bl	15600 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   15a8c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   15a90:	2b00      	cmp	r3, #0
   15a92:	d1c7      	bne.n	15a24 <ull_conn_done+0x278>
   15a94:	e9d5 0115 	ldrd	r0, r1, [r5, #84]	; 0x54
   15a98:	463a      	mov	r2, r7
   15a9a:	f7f8 fcf3 	bl	e484 <memq_peek>
   15a9e:	2800      	cmp	r0, #0
   15aa0:	d1c0      	bne.n	15a24 <ull_conn_done+0x278>
			} else if (lll->slave.latency_enabled) {
   15aa2:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   15aa6:	079b      	lsls	r3, r3, #30
				lll->latency_event = lll->latency;
   15aa8:	bf44      	itt	mi
   15aaa:	8bab      	ldrhmi	r3, [r5, #28]
   15aac:	842b      	strhmi	r3, [r5, #32]
   15aae:	e6a9      	b.n	15804 <ull_conn_done+0x58>
   15ab0:	00013125 	.word	0x00013125
   15ab4:	00023588 	.word	0x00023588
   15ab8:	0002371c 	.word	0x0002371c
   15abc:	000230b4 	.word	0x000230b4

00015ac0 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   15ac0:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   15ac4:	2b00      	cmp	r3, #0
   15ac6:	f000 80be 	beq.w	15c46 <ull_conn_tx_lll_enqueue+0x186>
   15aca:	3901      	subs	r1, #1
{
   15acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   15ad0:	f8df 8178 	ldr.w	r8, [pc, #376]	; 15c4c <ull_conn_tx_lll_enqueue+0x18c>
		LL_ASSERT(link);
   15ad4:	f8df a178 	ldr.w	sl, [pc, #376]	; 15c50 <ull_conn_tx_lll_enqueue+0x190>
   15ad8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 15c54 <ull_conn_tx_lll_enqueue+0x194>
   15adc:	4604      	mov	r4, r0
   15ade:	b2cd      	uxtb	r5, r1
   15ae0:	e010      	b.n	15b04 <ull_conn_tx_lll_enqueue+0x44>
		link = mem_acquire(&mem_link_tx.free);
   15ae2:	4640      	mov	r0, r8
   15ae4:	f7f8 fc60 	bl	e3a8 <mem_acquire>
		LL_ASSERT(link);
   15ae8:	4607      	mov	r7, r0
   15aea:	b3b0      	cbz	r0, 15b5a <ull_conn_tx_lll_enqueue+0x9a>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   15aec:	f104 0268 	add.w	r2, r4, #104	; 0x68
   15af0:	4631      	mov	r1, r6
   15af2:	4638      	mov	r0, r7
   15af4:	f7f8 fcbc 	bl	e470 <memq_enqueue>
	while (conn->tx_head &&
   15af8:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   15afc:	3d01      	subs	r5, #1
   15afe:	b2ed      	uxtb	r5, r5
   15b00:	2b00      	cmp	r3, #0
   15b02:	d05c      	beq.n	15bbe <ull_conn_tx_lll_enqueue+0xfe>
		 !conn->llcp_phy.pause_tx &&
   15b04:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
	while (conn->tx_head &&
   15b08:	07d1      	lsls	r1, r2, #31
   15b0a:	d403      	bmi.n	15b14 <ull_conn_tx_lll_enqueue+0x54>
		 !conn->llcp_enc.pause_tx &&
   15b0c:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
		 !conn->llcp_phy.pause_tx &&
   15b10:	0792      	lsls	r2, r2, #30
   15b12:	d53a      	bpl.n	15b8a <ull_conn_tx_lll_enqueue+0xca>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   15b14:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   15b18:	4293      	cmp	r3, r2
   15b1a:	d150      	bne.n	15bbe <ull_conn_tx_lll_enqueue+0xfe>
   15b1c:	2dff      	cmp	r5, #255	; 0xff
   15b1e:	d04e      	beq.n	15bbe <ull_conn_tx_lll_enqueue+0xfe>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   15b20:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
   15b24:	4620      	mov	r0, r4
   15b26:	f7fd fb1d 	bl	13164 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   15b2a:	7903      	ldrb	r3, [r0, #4]
   15b2c:	f003 0303 	and.w	r3, r3, #3
   15b30:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   15b32:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   15b34:	d1d5      	bne.n	15ae2 <ull_conn_tx_lll_enqueue+0x22>
			ctrl_tx_pre_ack(conn, pdu_tx);
   15b36:	79c3      	ldrb	r3, [r0, #7]
	switch (pdu_tx->llctrl.opcode) {
   15b38:	2b0b      	cmp	r3, #11
   15b3a:	d042      	beq.n	15bc2 <ull_conn_tx_lll_enqueue+0x102>
   15b3c:	d81b      	bhi.n	15b76 <ull_conn_tx_lll_enqueue+0xb6>
   15b3e:	2b04      	cmp	r3, #4
   15b40:	d1cf      	bne.n	15ae2 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   15b42:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   15b46:	f043 0302 	orr.w	r3, r3, #2
   15b4a:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		link = mem_acquire(&mem_link_tx.free);
   15b4e:	4640      	mov	r0, r8
   15b50:	f7f8 fc2a 	bl	e3a8 <mem_acquire>
		LL_ASSERT(link);
   15b54:	4607      	mov	r7, r0
   15b56:	2800      	cmp	r0, #0
   15b58:	d1c8      	bne.n	15aec <ull_conn_tx_lll_enqueue+0x2c>
   15b5a:	483b      	ldr	r0, [pc, #236]	; (15c48 <ull_conn_tx_lll_enqueue+0x188>)
   15b5c:	f240 6303 	movw	r3, #1539	; 0x603
   15b60:	4652      	mov	r2, sl
   15b62:	4649      	mov	r1, r9
   15b64:	f007 fa66 	bl	1d034 <printk>
   15b68:	4040      	eors	r0, r0
   15b6a:	f380 8811 	msr	BASEPRI, r0
   15b6e:	f04f 0003 	mov.w	r0, #3
   15b72:	df02      	svc	2
   15b74:	e7ba      	b.n	15aec <ull_conn_tx_lll_enqueue+0x2c>
	switch (pdu_tx->llctrl.opcode) {
   15b76:	3b16      	subs	r3, #22
   15b78:	2b01      	cmp	r3, #1
   15b7a:	d8b2      	bhi.n	15ae2 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_phy.pause_tx = 1U;
   15b7c:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   15b80:	f043 0301 	orr.w	r3, r3, #1
   15b84:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		break;
   15b88:	e7ab      	b.n	15ae2 <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   15b8a:	791a      	ldrb	r2, [r3, #4]
   15b8c:	f002 0203 	and.w	r2, r2, #3
   15b90:	2a03      	cmp	r2, #3
   15b92:	d1c3      	bne.n	15b1c <ull_conn_tx_lll_enqueue+0x5c>
	    ((pdu_data_tx->llctrl.opcode ==
   15b94:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   15b96:	2a03      	cmp	r2, #3
   15b98:	d001      	beq.n	15b9e <ull_conn_tx_lll_enqueue+0xde>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   15b9a:	2a0a      	cmp	r2, #10
   15b9c:	d1be      	bne.n	15b1c <ull_conn_tx_lll_enqueue+0x5c>
		if (((conn->llcp_req != conn->llcp_ack) &&
   15b9e:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   15ba2:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   15ba6:	428a      	cmp	r2, r1
   15ba8:	d010      	beq.n	15bcc <ull_conn_tx_lll_enqueue+0x10c>
   15baa:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   15bae:	2a03      	cmp	r2, #3
   15bb0:	d0b4      	beq.n	15b1c <ull_conn_tx_lll_enqueue+0x5c>
			if ((tx->next != NULL) &&
   15bb2:	681a      	ldr	r2, [r3, #0]
   15bb4:	b11a      	cbz	r2, 15bbe <ull_conn_tx_lll_enqueue+0xfe>
   15bb6:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   15bba:	428a      	cmp	r2, r1
   15bbc:	d032      	beq.n	15c24 <ull_conn_tx_lll_enqueue+0x164>
}
   15bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->lll.role) {
   15bc2:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   15bc6:	2b00      	cmp	r3, #0
   15bc8:	da8b      	bge.n	15ae2 <ull_conn_tx_lll_enqueue+0x22>
   15bca:	e7ba      	b.n	15b42 <ull_conn_tx_lll_enqueue+0x82>
		    ((conn->llcp_req == conn->llcp_ack) &&
   15bcc:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
   15bd0:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
   15bd4:	4288      	cmp	r0, r1
   15bd6:	d1ec      	bne.n	15bb2 <ull_conn_tx_lll_enqueue+0xf2>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   15bd8:	f894 0139 	ldrb.w	r0, [r4, #313]	; 0x139
   15bdc:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
   15be0:	4288      	cmp	r0, r1
   15be2:	d1e6      	bne.n	15bb2 <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   15be4:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
   15be8:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   15bec:	4288      	cmp	r0, r1
   15bee:	d1e0      	bne.n	15bb2 <ull_conn_tx_lll_enqueue+0xf2>
		       conn->llcp_conn_param.req) ||
   15bf0:	f894 01ad 	ldrb.w	r0, [r4, #429]	; 0x1ad
   15bf4:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
   15bf8:	4288      	cmp	r0, r1
   15bfa:	d1da      	bne.n	15bb2 <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   15bfc:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
   15c00:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   15c04:	4288      	cmp	r0, r1
   15c06:	d1d4      	bne.n	15bb2 <ull_conn_tx_lll_enqueue+0xf2>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   15c08:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_ack -= 2U;
   15c0c:	3a02      	subs	r2, #2
   15c0e:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   15c12:	2201      	movs	r2, #1
   15c14:	f362 0301 	bfi	r3, r2, #0, #2
   15c18:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_type = LLCP_ENCRYPTION;
   15c1c:	2303      	movs	r3, #3
   15c1e:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   15c22:	e77b      	b.n	15b1c <ull_conn_tx_lll_enqueue+0x5c>
				conn->tx_head = tx->next;
   15c24:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
				tx->next = conn->tx_ctrl_last->next;
   15c28:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
				if (!conn->tx_data_last) {
   15c2c:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
				tx->next = conn->tx_ctrl_last->next;
   15c30:	6810      	ldr	r0, [r2, #0]
   15c32:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   15c34:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   15c36:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
				if (!conn->tx_data_last) {
   15c3a:	2900      	cmp	r1, #0
   15c3c:	f47f af6e 	bne.w	15b1c <ull_conn_tx_lll_enqueue+0x5c>
					conn->tx_data_last = tx;
   15c40:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
   15c44:	e76a      	b.n	15b1c <ull_conn_tx_lll_enqueue+0x5c>
   15c46:	4770      	bx	lr
   15c48:	000230b4 	.word	0x000230b4
   15c4c:	200024e0 	.word	0x200024e0
   15c50:	00023588 	.word	0x00023588
   15c54:	000235e0 	.word	0x000235e0

00015c58 <tx_demux>:
{
   15c58:	b510      	push	{r4, lr}
   15c5a:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   15c5c:	2001      	movs	r0, #1
   15c5e:	f7ff fccf 	bl	15600 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   15c62:	4620      	mov	r0, r4
   15c64:	2101      	movs	r1, #1
}
   15c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   15c6a:	f7ff bf29 	b.w	15ac0 <ull_conn_tx_lll_enqueue>
   15c6e:	bf00      	nop

00015c70 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   15c70:	4901      	ldr	r1, [pc, #4]	; (15c78 <ull_conn_link_tx_release+0x8>)
   15c72:	f7f8 bbb3 	b.w	e3dc <mem_release>
   15c76:	bf00      	nop
   15c78:	200024e0 	.word	0x200024e0

00015c7c <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   15c7c:	4b01      	ldr	r3, [pc, #4]	; (15c84 <ull_conn_ack_last_idx_get+0x8>)
}
   15c7e:	78d8      	ldrb	r0, [r3, #3]
   15c80:	4770      	bx	lr
   15c82:	bf00      	nop
   15c84:	200004b4 	.word	0x200004b4

00015c88 <ull_conn_ack_peek>:
{
   15c88:	b530      	push	{r4, r5, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   15c8a:	4b0c      	ldr	r3, [pc, #48]	; (15cbc <ull_conn_ack_peek+0x34>)
   15c8c:	f893 c002 	ldrb.w	ip, [r3, #2]
   15c90:	78dc      	ldrb	r4, [r3, #3]
   15c92:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   15c94:	45a4      	cmp	ip, r4
   15c96:	d00f      	beq.n	15cb8 <ull_conn_ack_peek+0x30>
	return (void *)(fifo + first * size);
   15c98:	fb1c fc05 	smulbb	ip, ip, r5
   15c9c:	3304      	adds	r3, #4
	if (!lll_tx) {
   15c9e:	4686      	mov	lr, r0
   15ca0:	eb13 000c 	adds.w	r0, r3, ip
   15ca4:	d007      	beq.n	15cb6 <ull_conn_ack_peek+0x2e>
	*ack_last = mfifo_conn_ack.l;
   15ca6:	f88e 4000 	strb.w	r4, [lr]
	*handle = lll_tx->handle;
   15caa:	f833 400c 	ldrh.w	r4, [r3, ip]
	*tx = lll_tx->node;
   15cae:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   15cb0:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   15cb2:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   15cb4:	6818      	ldr	r0, [r3, #0]
}
   15cb6:	bd30      	pop	{r4, r5, pc}
		return NULL;
   15cb8:	2000      	movs	r0, #0
}
   15cba:	bd30      	pop	{r4, r5, pc}
   15cbc:	200004b4 	.word	0x200004b4

00015cc0 <ull_conn_ack_by_last_peek>:
{
   15cc0:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   15cc2:	4b0c      	ldr	r3, [pc, #48]	; (15cf4 <ull_conn_ack_by_last_peek+0x34>)
   15cc4:	f893 c002 	ldrb.w	ip, [r3, #2]
   15cc8:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   15ccc:	4584      	cmp	ip, r0
   15cce:	d00e      	beq.n	15cee <ull_conn_ack_by_last_peek+0x2e>
	return (void *)(fifo + first * size);
   15cd0:	3304      	adds	r3, #4
   15cd2:	fb1c fc0e 	smulbb	ip, ip, lr
	if (!lll_tx) {
   15cd6:	eb13 000c 	adds.w	r0, r3, ip
   15cda:	d006      	beq.n	15cea <ull_conn_ack_by_last_peek+0x2a>
	*handle = lll_tx->handle;
   15cdc:	f833 c00c 	ldrh.w	ip, [r3, ip]
	*tx = lll_tx->node;
   15ce0:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   15ce2:	f8a1 c000 	strh.w	ip, [r1]
	*tx = lll_tx->node;
   15ce6:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   15ce8:	6818      	ldr	r0, [r3, #0]
}
   15cea:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   15cee:	2000      	movs	r0, #0
   15cf0:	e7fb      	b.n	15cea <ull_conn_ack_by_last_peek+0x2a>
   15cf2:	bf00      	nop
   15cf4:	200004b4 	.word	0x200004b4

00015cf8 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   15cf8:	4b09      	ldr	r3, [pc, #36]	; (15d20 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   15cfa:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   15cfc:	78da      	ldrb	r2, [r3, #3]
   15cfe:	7818      	ldrb	r0, [r3, #0]
   15d00:	f893 c001 	ldrb.w	ip, [r3, #1]
   15d04:	428a      	cmp	r2, r1
   15d06:	d009      	beq.n	15d1c <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   15d08:	1c4a      	adds	r2, r1, #1
   15d0a:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   15d0c:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   15d10:	4594      	cmp	ip, r2
   15d12:	bf08      	it	eq
   15d14:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   15d16:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   15d18:	709a      	strb	r2, [r3, #2]
	return mem;
   15d1a:	4770      	bx	lr
		return NULL;
   15d1c:	2000      	movs	r0, #0
}
   15d1e:	4770      	bx	lr
   15d20:	200004b4 	.word	0x200004b4

00015d24 <ull_conn_lll_ack_enqueue>:
{
   15d24:	b510      	push	{r4, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   15d26:	4a15      	ldr	r2, [pc, #84]	; (15d7c <ull_conn_lll_ack_enqueue+0x58>)
   15d28:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   15d2a:	f892 e001 	ldrb.w	lr, [r2, #1]
   15d2e:	f892 c002 	ldrb.w	ip, [r2, #2]
	last = last + 1;
   15d32:	1c63      	adds	r3, r4, #1
   15d34:	b2db      	uxtb	r3, r3
		last = 0U;
   15d36:	459e      	cmp	lr, r3
   15d38:	bf08      	it	eq
   15d3a:	2300      	moveq	r3, #0
	if (last == first) {
   15d3c:	459c      	cmp	ip, r3
   15d3e:	d00c      	beq.n	15d5a <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   15d40:	4696      	mov	lr, r2
   15d42:	f81e cb04 	ldrb.w	ip, [lr], #4
   15d46:	fb1c fc04 	smulbb	ip, ip, r4
	LL_ASSERT(lll_tx);
   15d4a:	eb1e 040c 	adds.w	r4, lr, ip
   15d4e:	d004      	beq.n	15d5a <ull_conn_lll_ack_enqueue+0x36>
	lll_tx->handle = handle;
   15d50:	f82e 000c 	strh.w	r0, [lr, ip]
	lll_tx->node = tx;
   15d54:	6061      	str	r1, [r4, #4]
	*last = idx; /* Commit: Update write index */
   15d56:	70d3      	strb	r3, [r2, #3]
}
   15d58:	bd10      	pop	{r4, pc}
	LL_ASSERT(lll_tx);
   15d5a:	4a09      	ldr	r2, [pc, #36]	; (15d80 <ull_conn_lll_ack_enqueue+0x5c>)
   15d5c:	4909      	ldr	r1, [pc, #36]	; (15d84 <ull_conn_lll_ack_enqueue+0x60>)
   15d5e:	480a      	ldr	r0, [pc, #40]	; (15d88 <ull_conn_lll_ack_enqueue+0x64>)
   15d60:	f240 6341 	movw	r3, #1601	; 0x641
   15d64:	f007 f966 	bl	1d034 <printk>
   15d68:	4040      	eors	r0, r0
   15d6a:	f380 8811 	msr	BASEPRI, r0
   15d6e:	f04f 0003 	mov.w	r0, #3
   15d72:	df02      	svc	2
	lll_tx->handle = handle;
   15d74:	2300      	movs	r3, #0
   15d76:	801b      	strh	r3, [r3, #0]
   15d78:	deff      	udf	#255	; 0xff
   15d7a:	bf00      	nop
   15d7c:	200004b4 	.word	0x200004b4
   15d80:	00023588 	.word	0x00023588
   15d84:	000235d0 	.word	0x000235d0
   15d88:	000230b4 	.word	0x000230b4

00015d8c <ull_conn_tx_ack>:
{
   15d8c:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
   15d8e:	7953      	ldrb	r3, [r2, #5]
{
   15d90:	b082      	sub	sp, #8
   15d92:	4614      	mov	r4, r2
   15d94:	4605      	mov	r5, r0
   15d96:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   15d98:	b37b      	cbz	r3, 15dfa <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   15d9a:	7923      	ldrb	r3, [r4, #4]
   15d9c:	f003 0203 	and.w	r2, r3, #3
   15da0:	2a03      	cmp	r2, #3
   15da2:	d00d      	beq.n	15dc0 <ull_conn_tx_ack+0x34>
	} else if (handle == 0xFFFF) {
   15da4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15da8:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   15daa:	bf04      	itt	eq
   15dac:	f36f 0301 	bfceq	r3, #0, #2
   15db0:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   15db2:	4621      	mov	r1, r4
   15db4:	4628      	mov	r0, r5
}
   15db6:	b002      	add	sp, #8
   15db8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   15dbc:	f7fc b8e4 	b.w	11f88 <ll_tx_ack_put>
		if (handle != 0xFFFF) {
   15dc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15dc4:	429d      	cmp	r5, r3
   15dc6:	d126      	bne.n	15e16 <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   15dc8:	6833      	ldr	r3, [r6, #0]
   15dca:	429c      	cmp	r4, r3
   15dcc:	d03e      	beq.n	15e4c <ull_conn_tx_ack+0xc0>
			LL_ASSERT(!link->next);
   15dce:	2b00      	cmp	r3, #0
   15dd0:	d0ef      	beq.n	15db2 <ull_conn_tx_ack+0x26>
   15dd2:	4a74      	ldr	r2, [pc, #464]	; (15fa4 <ull_conn_tx_ack+0x218>)
   15dd4:	4974      	ldr	r1, [pc, #464]	; (15fa8 <ull_conn_tx_ack+0x21c>)
   15dd6:	4875      	ldr	r0, [pc, #468]	; (15fac <ull_conn_tx_ack+0x220>)
   15dd8:	f240 6361 	movw	r3, #1633	; 0x661
   15ddc:	f007 f92a 	bl	1d034 <printk>
   15de0:	4040      	eors	r0, r0
   15de2:	f380 8811 	msr	BASEPRI, r0
   15de6:	f04f 0003 	mov.w	r0, #3
   15dea:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   15dec:	4621      	mov	r1, r4
   15dee:	4628      	mov	r0, r5
}
   15df0:	b002      	add	sp, #8
   15df2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   15df6:	f7fc b8c7 	b.w	11f88 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   15dfa:	4a6a      	ldr	r2, [pc, #424]	; (15fa4 <ull_conn_tx_ack+0x218>)
   15dfc:	496c      	ldr	r1, [pc, #432]	; (15fb0 <ull_conn_tx_ack+0x224>)
   15dfe:	486b      	ldr	r0, [pc, #428]	; (15fac <ull_conn_tx_ack+0x220>)
   15e00:	f240 634e 	movw	r3, #1614	; 0x64e
   15e04:	f007 f916 	bl	1d034 <printk>
   15e08:	4040      	eors	r0, r0
   15e0a:	f380 8811 	msr	BASEPRI, r0
   15e0e:	f04f 0003 	mov.w	r0, #3
   15e12:	df02      	svc	2
   15e14:	e7c1      	b.n	15d9a <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15e16:	462a      	mov	r2, r5
   15e18:	4866      	ldr	r0, [pc, #408]	; (15fb4 <ull_conn_tx_ack+0x228>)
   15e1a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   15e1e:	f7f8 faf5 	bl	e40c <mem_get>
   15e22:	79e2      	ldrb	r2, [r4, #7]
   15e24:	3a02      	subs	r2, #2
   15e26:	4603      	mov	r3, r0
	switch (pdu_tx->llctrl.opcode) {
   15e28:	2a15      	cmp	r2, #21
   15e2a:	d80c      	bhi.n	15e46 <ull_conn_tx_ack+0xba>
   15e2c:	e8df f002 	tbb	[pc, r2]
   15e30:	0b1f0b30 	.word	0x0b1f0b30
   15e34:	180b180b 	.word	0x180b180b
   15e38:	260b1f0b 	.word	0x260b1f0b
   15e3c:	150b0b0b 	.word	0x150b0b0b
   15e40:	6c64180b 	.word	0x6c64180b
   15e44:	3742      	.short	0x3742
		if (link->next == (void *)tx) {
   15e46:	6833      	ldr	r3, [r6, #0]
   15e48:	42a3      	cmp	r3, r4
   15e4a:	d1c0      	bne.n	15dce <ull_conn_tx_ack+0x42>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   15e4c:	495a      	ldr	r1, [pc, #360]	; (15fb8 <ull_conn_tx_ack+0x22c>)
   15e4e:	4620      	mov	r0, r4
}
   15e50:	b002      	add	sp, #8
   15e52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   15e56:	f7f8 bac1 	b.w	e3dc <mem_release>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   15e5a:	7a22      	ldrb	r2, [r4, #8]
   15e5c:	2a03      	cmp	r2, #3
   15e5e:	d00d      	beq.n	15e7c <ull_conn_tx_ack+0xf0>
			conn->common.txn_lock = 0U;
   15e60:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
   15e64:	f36f 0241 	bfc	r2, #1, #1
   15e68:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
			break;
   15e6c:	e7ac      	b.n	15dc8 <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
   15e6e:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   15e72:	f042 0202 	orr.w	r2, r2, #2
   15e76:	f880 2166 	strb.w	r2, [r0, #358]	; 0x166
		break;
   15e7a:	e7a5      	b.n	15dc8 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   15e7c:	f893 2166 	ldrb.w	r2, [r3, #358]	; 0x166
   15e80:	f022 0203 	bic.w	r2, r2, #3
   15e84:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
		conn->procedure_expire = 0U;
   15e88:	2200      	movs	r2, #0
   15e8a:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		break;
   15e8e:	e79b      	b.n	15dc8 <ull_conn_tx_ack+0x3c>
		uint8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   15e90:	7a21      	ldrb	r1, [r4, #8]
   15e92:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
   15e94:	bf08      	it	eq
   15e96:	2116      	moveq	r1, #22
   15e98:	f7ff fc02 	bl	156a0 <conn_cleanup>
	break;
   15e9c:	e794      	b.n	15dc8 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   15e9e:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   15ea2:	2a00      	cmp	r2, #0
   15ea4:	db5c      	blt.n	15f60 <ull_conn_tx_ack+0x1d4>
		conn->llcp_phy.pause_tx = 0U;
   15ea6:	f893 21bf 	ldrb.w	r2, [r3, #447]	; 0x1bf
   15eaa:	f36f 0200 	bfc	r2, #0, #1
   15eae:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
		break;
   15eb2:	e789      	b.n	15dc8 <ull_conn_tx_ack+0x3c>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   15eb4:	f890 21be 	ldrb.w	r2, [r0, #446]	; 0x1be
   15eb8:	2102      	movs	r1, #2
   15eba:	f361 0201 	bfi	r2, r1, #0, #2
   15ebe:	f880 21be 	strb.w	r2, [r0, #446]	; 0x1be
		if (conn->lll.role) {
   15ec2:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   15ec6:	2a00      	cmp	r2, #0
   15ec8:	daed      	bge.n	15ea6 <ull_conn_tx_ack+0x11a>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   15eca:	4a3c      	ldr	r2, [pc, #240]	; (15fbc <ull_conn_tx_ack+0x230>)
   15ecc:	e892 0003 	ldmia.w	r2, {r0, r1}
   15ed0:	aa02      	add	r2, sp, #8
   15ed2:	e902 0003 	stmdb	r2, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   15ed6:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
   15eda:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
   15ede:	ea41 0292 	orr.w	r2, r1, r2, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   15ee2:	f002 0207 	and.w	r2, r2, #7
   15ee6:	a802      	add	r0, sp, #8
   15ee8:	4402      	add	r2, r0
   15eea:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   15eee:	f362 1106 	bfi	r1, r2, #4, #3
   15ef2:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
   15ef6:	e7d6      	b.n	15ea6 <ull_conn_tx_ack+0x11a>
		conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   15ef8:	f890 21ae 	ldrb.w	r2, [r0, #430]	; 0x1ae
   15efc:	2102      	movs	r1, #2
   15efe:	f361 0202 	bfi	r2, r1, #0, #3
   15f02:	f880 21ae 	strb.w	r2, [r0, #430]	; 0x1ae
		break;
   15f06:	e75f      	b.n	15dc8 <ull_conn_tx_ack+0x3c>
		conn->common.txn_lock = 0U;
   15f08:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   15f0c:	f36f 0241 	bfc	r2, #1, #1
   15f10:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   15f14:	f893 21ad 	ldrb.w	r2, [r3, #429]	; 0x1ad
   15f18:	f890 01ac 	ldrb.w	r0, [r0, #428]	; 0x1ac
   15f1c:	4282      	cmp	r2, r0
   15f1e:	f43f af53 	beq.w	15dc8 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   15f22:	f893 11ae 	ldrb.w	r1, [r3, #430]	; 0x1ae
   15f26:	f001 0207 	and.w	r2, r1, #7
   15f2a:	2a03      	cmp	r2, #3
   15f2c:	d004      	beq.n	15f38 <ull_conn_tx_ack+0x1ac>
   15f2e:	3203      	adds	r2, #3
   15f30:	f002 0207 	and.w	r2, r2, #7
   15f34:	2a01      	cmp	r2, #1
   15f36:	d886      	bhi.n	15e46 <ull_conn_tx_ack+0xba>
				conn->lll.max_tx_octets =
   15f38:	f8b3 21b2 	ldrh.w	r2, [r3, #434]	; 0x1b2
   15f3c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
				conn->lll.max_tx_time =
   15f40:	f8b3 21b6 	ldrh.w	r2, [r3, #438]	; 0x1b6
   15f44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
				if (conn->llcp_length.state ==
   15f48:	f001 0207 	and.w	r2, r1, #7
   15f4c:	2a05      	cmp	r2, #5
   15f4e:	d014      	beq.n	15f7a <ull_conn_tx_ack+0x1ee>
				if (!conn->llcp_length.cache.tx_octets) {
   15f50:	f8b3 21b8 	ldrh.w	r2, [r3, #440]	; 0x1b8
   15f54:	b9ba      	cbnz	r2, 15f86 <ull_conn_tx_ack+0x1fa>
					conn->llcp_length.ack =
   15f56:	f883 01ad 	strb.w	r0, [r3, #429]	; 0x1ad
					conn->procedure_expire = 0U;
   15f5a:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
					break;
   15f5e:	e733      	b.n	15dc8 <ull_conn_tx_ack+0x3c>
				conn->common.txn_lock = 0U;
   15f60:	f890 10d8 	ldrb.w	r1, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   15f64:	4a15      	ldr	r2, [pc, #84]	; (15fbc <ull_conn_tx_ack+0x230>)
				conn->common.txn_lock = 0U;
   15f66:	f36f 0141 	bfc	r1, #1, #1
   15f6a:	f880 10d8 	strb.w	r1, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   15f6e:	e892 0003 	ldmia.w	r2, {r0, r1}
   15f72:	aa02      	add	r2, sp, #8
   15f74:	e902 0003 	stmdb	r2, {r0, r1}
				conn->common.txn_lock = 0U;
   15f78:	e7ad      	b.n	15ed6 <ull_conn_tx_ack+0x14a>
					conn->llcp_length.state =
   15f7a:	2204      	movs	r2, #4
   15f7c:	f362 0102 	bfi	r1, r2, #0, #3
   15f80:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
					break;
   15f84:	e720      	b.n	15dc8 <ull_conn_tx_ack+0x3c>
				conn->llcp_length.tx_octets =
   15f86:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   15f8a:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15f8c:	f362 0102 	bfi	r1, r2, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   15f90:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   15f94:	f8b3 21ba 	ldrh.w	r2, [r3, #442]	; 0x1ba
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15f98:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   15f9c:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
				break;
   15fa0:	e712      	b.n	15dc8 <ull_conn_tx_ack+0x3c>
   15fa2:	bf00      	nop
   15fa4:	00023588 	.word	0x00023588
   15fa8:	00023784 	.word	0x00023784
   15fac:	000230b4 	.word	0x000230b4
   15fb0:	00023778 	.word	0x00023778
   15fb4:	20001218 	.word	0x20001218
   15fb8:	2000242c 	.word	0x2000242c
   15fbc:	00023790 	.word	0x00023790

00015fc0 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   15fc0:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   15fc4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
	switch (lll->phy_tx_time) {
   15fc8:	f3c2 1202 	ubfx	r2, r2, #4, #3
   15fcc:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   15fce:	bf14      	ite	ne
   15fd0:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   15fd2:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   15fd4:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	return max_tx_octets;
   15fd8:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   15fda:	bf14      	ite	ne
   15fdc:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   15fde:	3b0b      	subeq	r3, #11
   15fe0:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   15fe2:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   15fe4:	bf44      	itt	mi
   15fe6:	3b04      	submi	r3, #4
   15fe8:	b29b      	uxthmi	r3, r3
}
   15fea:	4298      	cmp	r0, r3
   15fec:	bf28      	it	cs
   15fee:	4618      	movcs	r0, r3
   15ff0:	4770      	bx	lr
   15ff2:	bf00      	nop

00015ff4 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params)
{
   15ff4:	b510      	push	{r4, lr}
   15ff6:	460c      	mov	r4, r1
	struct ll_conn *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   15ff8:	b930      	cbnz	r0, 16008 <ticker_update_latency_cancel_op_cb+0x14>

	conn->slave.latency_cancel = 0U;
   15ffa:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   15ffe:	f36f 0382 	bfc	r3, #2, #1
   16002:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   16006:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   16008:	4a09      	ldr	r2, [pc, #36]	; (16030 <ticker_update_latency_cancel_op_cb+0x3c>)
   1600a:	490a      	ldr	r1, [pc, #40]	; (16034 <ticker_update_latency_cancel_op_cb+0x40>)
   1600c:	480a      	ldr	r0, [pc, #40]	; (16038 <ticker_update_latency_cancel_op_cb+0x44>)
   1600e:	f240 2342 	movw	r3, #578	; 0x242
   16012:	f007 f80f 	bl	1d034 <printk>
   16016:	4040      	eors	r0, r0
   16018:	f380 8811 	msr	BASEPRI, r0
   1601c:	f04f 0003 	mov.w	r0, #3
   16020:	df02      	svc	2
	conn->slave.latency_cancel = 0U;
   16022:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   16026:	f36f 0382 	bfc	r3, #2, #1
   1602a:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   1602e:	bd10      	pop	{r4, pc}
   16030:	000237b0 	.word	0x000237b0
   16034:	000237f4 	.word	0x000237f4
   16038:	000230b4 	.word	0x000230b4

0001603c <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1603c:	b900      	cbnz	r0, 16040 <ticker_op_cb+0x4>
   1603e:	4770      	bx	lr
{
   16040:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   16042:	4a07      	ldr	r2, [pc, #28]	; (16060 <ticker_op_cb+0x24>)
   16044:	4907      	ldr	r1, [pc, #28]	; (16064 <ticker_op_cb+0x28>)
   16046:	4808      	ldr	r0, [pc, #32]	; (16068 <ticker_op_cb+0x2c>)
   16048:	f240 233a 	movw	r3, #570	; 0x23a
   1604c:	f006 fff2 	bl	1d034 <printk>
   16050:	4040      	eors	r0, r0
   16052:	f380 8811 	msr	BASEPRI, r0
   16056:	f04f 0003 	mov.w	r0, #3
   1605a:	df02      	svc	2
}
   1605c:	bd08      	pop	{r3, pc}
   1605e:	bf00      	nop
   16060:	000237b0 	.word	0x000237b0
   16064:	000235e8 	.word	0x000235e8
   16068:	000230b4 	.word	0x000230b4

0001606c <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1606c:	2801      	cmp	r0, #1
   1606e:	d000      	beq.n	16072 <ticker_op_stop_adv_cb+0x6>
   16070:	4770      	bx	lr
{
   16072:	b510      	push	{r4, lr}
   16074:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   16076:	f7fb fffb 	bl	12070 <ull_disable_mark_get>
   1607a:	4284      	cmp	r4, r0
   1607c:	d00c      	beq.n	16098 <ticker_op_stop_adv_cb+0x2c>
   1607e:	4a07      	ldr	r2, [pc, #28]	; (1609c <ticker_op_stop_adv_cb+0x30>)
   16080:	4907      	ldr	r1, [pc, #28]	; (160a0 <ticker_op_stop_adv_cb+0x34>)
   16082:	4808      	ldr	r0, [pc, #32]	; (160a4 <ticker_op_stop_adv_cb+0x38>)
   16084:	f240 2332 	movw	r3, #562	; 0x232
   16088:	f006 ffd4 	bl	1d034 <printk>
   1608c:	4040      	eors	r0, r0
   1608e:	f380 8811 	msr	BASEPRI, r0
   16092:	f04f 0003 	mov.w	r0, #3
   16096:	df02      	svc	2
}
   16098:	bd10      	pop	{r4, pc}
   1609a:	bf00      	nop
   1609c:	000237b0 	.word	0x000237b0
   160a0:	00023808 	.word	0x00023808
   160a4:	000230b4 	.word	0x000230b4

000160a8 <ull_slave_ticker_cb>:
{
   160a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   160aa:	460f      	mov	r7, r1
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   160ac:	8d19      	ldrh	r1, [r3, #40]	; 0x28
{
   160ae:	461c      	mov	r4, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   160b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   160b4:	4299      	cmp	r1, r3
   160b6:	d023      	beq.n	16100 <ull_slave_ticker_cb+0x58>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   160b8:	4605      	mov	r5, r0
   160ba:	4601      	mov	r1, r0
   160bc:	4620      	mov	r0, r4
   160be:	4616      	mov	r6, r2
   160c0:	f7ec fe32 	bl	2d28 <ull_conn_llcp>
		if (ret) {
   160c4:	b9e0      	cbnz	r0, 16100 <ull_slave_ticker_cb+0x58>
	return ++hdr->ref;
   160c6:	7c23      	ldrb	r3, [r4, #16]
   160c8:	3301      	adds	r3, #1
   160ca:	b2db      	uxtb	r3, r3
   160cc:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   160ce:	b333      	cbz	r3, 1611e <ull_slave_ticker_cb+0x76>
	p.ticks_at_expire = ticks_at_expire;
   160d0:	491a      	ldr	r1, [pc, #104]	; (1613c <ull_slave_ticker_cb+0x94>)
	mfy.param = &p;
   160d2:	4b1b      	ldr	r3, [pc, #108]	; (16140 <ull_slave_ticker_cb+0x98>)
	p.ticks_at_expire = ticks_at_expire;
   160d4:	600d      	str	r5, [r1, #0]
	p.param = &conn->lll;
   160d6:	f104 021c 	add.w	r2, r4, #28
   160da:	60ca      	str	r2, [r1, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   160dc:	2200      	movs	r2, #0
	p.remainder = remainder;
   160de:	604f      	str	r7, [r1, #4]
	p.lazy = lazy;
   160e0:	810e      	strh	r6, [r1, #8]
	mfy.param = &p;
   160e2:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   160e4:	2001      	movs	r0, #1
   160e6:	4611      	mov	r1, r2
   160e8:	f7f8 fa3a 	bl	e560 <mayfly_enqueue>
	LL_ASSERT(!err);
   160ec:	b948      	cbnz	r0, 16102 <ull_slave_ticker_cb+0x5a>
	ull_conn_tx_demux(UINT8_MAX);
   160ee:	20ff      	movs	r0, #255	; 0xff
   160f0:	f7ff fa86 	bl	15600 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   160f4:	4620      	mov	r0, r4
   160f6:	21ff      	movs	r1, #255	; 0xff
}
   160f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   160fc:	f7ff bce0 	b.w	15ac0 <ull_conn_tx_lll_enqueue>
}
   16100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(!err);
   16102:	4a10      	ldr	r2, [pc, #64]	; (16144 <ull_slave_ticker_cb+0x9c>)
   16104:	4910      	ldr	r1, [pc, #64]	; (16148 <ull_slave_ticker_cb+0xa0>)
   16106:	4811      	ldr	r0, [pc, #68]	; (1614c <ull_slave_ticker_cb+0xa4>)
   16108:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   1610c:	f006 ff92 	bl	1d034 <printk>
   16110:	4040      	eors	r0, r0
   16112:	f380 8811 	msr	BASEPRI, r0
   16116:	f04f 0003 	mov.w	r0, #3
   1611a:	df02      	svc	2
   1611c:	e7e7      	b.n	160ee <ull_slave_ticker_cb+0x46>
	LL_ASSERT(ref);
   1611e:	4a09      	ldr	r2, [pc, #36]	; (16144 <ull_slave_ticker_cb+0x9c>)
   16120:	490b      	ldr	r1, [pc, #44]	; (16150 <ull_slave_ticker_cb+0xa8>)
   16122:	480a      	ldr	r0, [pc, #40]	; (1614c <ull_slave_ticker_cb+0xa4>)
   16124:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
   16128:	f006 ff84 	bl	1d034 <printk>
   1612c:	4040      	eors	r0, r0
   1612e:	f380 8811 	msr	BASEPRI, r0
   16132:	f04f 0003 	mov.w	r0, #3
   16136:	df02      	svc	2
   16138:	e7ca      	b.n	160d0 <ull_slave_ticker_cb+0x28>
   1613a:	bf00      	nop
   1613c:	20002524 	.word	0x20002524
   16140:	2000053c 	.word	0x2000053c
   16144:	000237b0 	.word	0x000237b0
   16148:	0002334c 	.word	0x0002334c
   1614c:	000230b4 	.word	0x000230b4
   16150:	00023510 	.word	0x00023510

00016154 <ull_slave_latency_cancel>:
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   16154:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   16156:	b123      	cbz	r3, 16162 <ull_slave_latency_cancel+0xe>
   16158:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   1615c:	f012 0304 	ands.w	r3, r2, #4
   16160:	d000      	beq.n	16164 <ull_slave_latency_cancel+0x10>
   16162:	4770      	bx	lr
{
   16164:	b510      	push	{r4, lr}
		conn->slave.latency_cancel = 1U;
   16166:	f042 0204 	orr.w	r2, r2, #4
{
   1616a:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   1616c:	4c11      	ldr	r4, [pc, #68]	; (161b4 <ull_slave_latency_cancel+0x60>)
		conn->slave.latency_cancel = 1U;
   1616e:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
				      (TICKER_ID_CONN_BASE + handle),
   16172:	3103      	adds	r1, #3
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   16174:	2201      	movs	r2, #1
   16176:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1617a:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1617e:	e9cd 3300 	strd	r3, r3, [sp]
   16182:	9006      	str	r0, [sp, #24]
   16184:	b2ca      	uxtb	r2, r1
   16186:	4618      	mov	r0, r3
   16188:	2103      	movs	r1, #3
   1618a:	f7f9 fb9b 	bl	f8c4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1618e:	f030 0302 	bics.w	r3, r0, #2
   16192:	d00c      	beq.n	161ae <ull_slave_latency_cancel+0x5a>
   16194:	4a08      	ldr	r2, [pc, #32]	; (161b8 <ull_slave_latency_cancel+0x64>)
   16196:	4909      	ldr	r1, [pc, #36]	; (161bc <ull_slave_latency_cancel+0x68>)
   16198:	4809      	ldr	r0, [pc, #36]	; (161c0 <ull_slave_latency_cancel+0x6c>)
   1619a:	f44f 73de 	mov.w	r3, #444	; 0x1bc
   1619e:	f006 ff49 	bl	1d034 <printk>
   161a2:	4040      	eors	r0, r0
   161a4:	f380 8811 	msr	BASEPRI, r0
   161a8:	f04f 0003 	mov.w	r0, #3
   161ac:	df02      	svc	2
}
   161ae:	b008      	add	sp, #32
   161b0:	bd10      	pop	{r4, pc}
   161b2:	bf00      	nop
   161b4:	00015ff5 	.word	0x00015ff5
   161b8:	000237b0 	.word	0x000237b0
   161bc:	00023668 	.word	0x00023668
   161c0:	000230b4 	.word	0x000230b4

000161c4 <ll_start_enc_req_send>:
{
   161c4:	b570      	push	{r4, r5, r6, lr}
   161c6:	460e      	mov	r6, r1
   161c8:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   161ca:	f7fd fb49 	bl	13860 <ll_connected_get>
	if (!conn) {
   161ce:	2800      	cmp	r0, #0
   161d0:	d040      	beq.n	16254 <ll_start_enc_req_send+0x90>
	if (error_code) {
   161d2:	4604      	mov	r4, r0
   161d4:	b95e      	cbnz	r6, 161ee <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   161d6:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   161da:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
   161de:	429a      	cmp	r2, r3
   161e0:	d003      	beq.n	161ea <ll_start_enc_req_send+0x26>
   161e2:	f890 30e6 	ldrb.w	r3, [r0, #230]	; 0xe6
   161e6:	2b03      	cmp	r3, #3
   161e8:	d026      	beq.n	16238 <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
   161ea:	200c      	movs	r0, #12
}
   161ec:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   161ee:	f890 0166 	ldrb.w	r0, [r0, #358]	; 0x166
   161f2:	f010 0004 	ands.w	r0, r0, #4
   161f6:	d112      	bne.n	1621e <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   161f8:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   161fc:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   16200:	429a      	cmp	r2, r3
   16202:	d0f2      	beq.n	161ea <ll_start_enc_req_send+0x26>
   16204:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   16208:	2b03      	cmp	r3, #3
   1620a:	d1ee      	bne.n	161ea <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1620c:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp.encryption.error_code = error_code;
   16210:	f884 60f5 	strb.w	r6, [r4, #245]	; 0xf5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16214:	f360 0301 	bfi	r3, r0, #0, #2
   16218:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
}
   1621c:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   1621e:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
			if (conn->llcp_terminate.ack !=
   16222:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
   16226:	4293      	cmp	r3, r2
   16228:	d1df      	bne.n	161ea <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
   1622a:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   1622c:	f884 6142 	strb.w	r6, [r4, #322]	; 0x142
			conn->llcp_terminate.req++;
   16230:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
	return 0;
   16234:	2000      	movs	r0, #0
}
   16236:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   16238:	2210      	movs	r2, #16
   1623a:	4629      	mov	r1, r5
   1623c:	f200 1071 	addw	r0, r0, #369	; 0x171
   16240:	f009 f94a 	bl	1f4d8 <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16244:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
   16248:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   1624c:	f8a4 30f4 	strh.w	r3, [r4, #244]	; 0xf4
	return 0;
   16250:	4630      	mov	r0, r6
}
   16252:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16254:	2002      	movs	r0, #2
}
   16256:	bd70      	pop	{r4, r5, r6, pc}

00016258 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   16258:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1625a:	f890 c000 	ldrb.w	ip, [r0]
{
   1625e:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   16262:	fb02 1201 	mla	r2, r2, r1, r1
   16266:	491c      	ldr	r1, [pc, #112]	; (162d8 <lll_chan_sel_1+0x80>)
   16268:	4494      	add	ip, r2
   1626a:	fb81 210c 	smull	r2, r1, r1, ip
   1626e:	4461      	add	r1, ip
   16270:	1149      	asrs	r1, r1, #5
   16272:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
   16276:	eb01 018e 	add.w	r1, r1, lr, lsl #2
{
   1627a:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1627c:	ebac 0101 	sub.w	r1, ip, r1
   16280:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
   16282:	7020      	strb	r0, [r4, #0]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   16284:	08c4      	lsrs	r4, r0, #3
   16286:	f001 0107 	and.w	r1, r1, #7
   1628a:	f813 c004 	ldrb.w	ip, [r3, r4]
   1628e:	fa4c f101 	asr.w	r1, ip, r1
   16292:	f011 0101 	ands.w	r1, r1, #1
   16296:	d11d      	bne.n	162d4 <lll_chan_sel_1+0x7c>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   16298:	fbb0 f2f5 	udiv	r2, r0, r5
   1629c:	fb05 0212 	mls	r2, r5, r2, r0
   162a0:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   162a2:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
   162a6:	1d1c      	adds	r4, r3, #4
	chan_next = 0U;
   162a8:	4608      	mov	r0, r1
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   162aa:	f100 0c08 	add.w	ip, r0, #8
   162ae:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		bit_count = 8U;
		while (bit_count--) {
   162b2:	fa5f fc8c 	uxtb.w	ip, ip
			if (bite & 0x01) {
   162b6:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   162ba:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   162be:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   162c2:	d002      	beq.n	162ca <lll_chan_sel_1+0x72>
				if (chan_index == 0U) {
   162c4:	b132      	cbz	r2, 162d4 <lll_chan_sel_1+0x7c>
				chan_index--;
   162c6:	3a01      	subs	r2, #1
   162c8:	b2d2      	uxtb	r2, r2
			chan_next++;
   162ca:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   162cc:	4584      	cmp	ip, r0
   162ce:	d1f2      	bne.n	162b6 <lll_chan_sel_1+0x5e>
	while (byte_count--) {
   162d0:	45a6      	cmp	lr, r4
   162d2:	d1ea      	bne.n	162aa <lll_chan_sel_1+0x52>
}
   162d4:	bd30      	pop	{r4, r5, pc}
   162d6:	bf00      	nop
   162d8:	dd67c8a7 	.word	0xdd67c8a7

000162dc <lll_chan_id>:
	return aa_ms ^ aa_ls;
   162dc:	8842      	ldrh	r2, [r0, #2]
   162de:	8800      	ldrh	r0, [r0, #0]
}
   162e0:	4050      	eors	r0, r2
   162e2:	4770      	bx	lr

000162e4 <lll_chan_sel_2>:
{
   162e4:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   162e6:	4d2f      	ldr	r5, [pc, #188]	; (163a4 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   162e8:	4c2f      	ldr	r4, [pc, #188]	; (163a8 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_e;

	prn_e = counter ^ chan_id;
   162ea:	4048      	eors	r0, r1
   162ec:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   162f0:	0a07      	lsrs	r7, r0, #8
   162f2:	b2c0      	uxtb	r0, r0
   162f4:	eb07 2787 	add.w	r7, r7, r7, lsl #10
   162f8:	eb00 2e80 	add.w	lr, r0, r0, lsl #10
   162fc:	ea05 0647 	and.w	r6, r5, r7, lsl #1
   16300:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   16304:	ea04 1747 	and.w	r7, r4, r7, lsl #5
   16308:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1630c:	433e      	orrs	r6, r7
   1630e:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   16312:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   16316:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   1631a:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   1631e:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   16322:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   16324:	f3c0 4007 	ubfx	r0, r0, #16, #8
   16328:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1632c:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   16330:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   16334:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   16336:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1633a:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   1633c:	d1d8      	bne.n	162f0 <lll_chan_sel_2+0xc>
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
   1633e:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   16340:	481a      	ldr	r0, [pc, #104]	; (163ac <lll_chan_sel_2+0xc8>)
   16342:	fba0 4001 	umull	r4, r0, r0, r1
   16346:	1a0c      	subs	r4, r1, r0
   16348:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   1634c:	0940      	lsrs	r0, r0, #5
   1634e:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   16352:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   16356:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   16358:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   1635c:	f000 0507 	and.w	r5, r0, #7
   16360:	5d14      	ldrb	r4, [r2, r4]
   16362:	412c      	asrs	r4, r5
   16364:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   16366:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   16368:	d41a      	bmi.n	163a0 <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   1636a:	fb01 f303 	mul.w	r3, r1, r3
   1636e:	1e56      	subs	r6, r2, #1
   16370:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   16374:	3204      	adds	r2, #4
	chan_next = 0U;
   16376:	4660      	mov	r0, ip
		bite = *chan_map;
   16378:	f100 0508 	add.w	r5, r0, #8
   1637c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   16380:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   16382:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   16386:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
   1638a:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   1638e:	d002      	beq.n	16396 <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   16390:	b133      	cbz	r3, 163a0 <lll_chan_sel_2+0xbc>
				chan_index--;
   16392:	3b01      	subs	r3, #1
   16394:	b2db      	uxtb	r3, r3
			chan_next++;
   16396:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
   16398:	42a8      	cmp	r0, r5
   1639a:	d1f2      	bne.n	16382 <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   1639c:	42b2      	cmp	r2, r6
   1639e:	d1eb      	bne.n	16378 <lll_chan_sel_2+0x94>
}
   163a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   163a2:	bf00      	nop
   163a4:	00022110 	.word	0x00022110
   163a8:	00088440 	.word	0x00088440
   163ac:	bacf914d 	.word	0xbacf914d

000163b0 <rl_update>:
{
   163b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   163b4:	4d18      	ldr	r5, [pc, #96]	; (16418 <rl_update+0x68>)
   163b6:	4e19      	ldr	r6, [pc, #100]	; (1641c <rl_update+0x6c>)
   163b8:	2400      	movs	r4, #0
   163ba:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, uint8_t addr_type,
			   uint8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   163be:	1eaf      	subs	r7, r5, #2
   163c0:	f04f 0801 	mov.w	r8, #1
   163c4:	e006      	b.n	163d4 <rl_update+0x24>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   163c6:	3401      	adds	r4, #1
   163c8:	2c08      	cmp	r4, #8
   163ca:	f105 0506 	add.w	r5, r5, #6
   163ce:	f106 0628 	add.w	r6, r6, #40	; 0x28
   163d2:	d01e      	beq.n	16412 <rl_update+0x62>
		if (rl[i].taken) {
   163d4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   163d8:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
   163dc:	07da      	lsls	r2, r3, #31
   163de:	d5f2      	bpl.n	163c6 <rl_update+0x16>
	filter->enable_bitmask |= BIT(index);
   163e0:	7839      	ldrb	r1, [r7, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   163e2:	787a      	ldrb	r2, [r7, #1]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   163e4:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   163e8:	fa08 fc04 	lsl.w	ip, r8, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   163ec:	40a3      	lsls	r3, r4
	filter->enable_bitmask |= BIT(index);
   163ee:	ea41 0c0c 	orr.w	ip, r1, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   163f2:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   163f4:	4631      	mov	r1, r6
   163f6:	4628      	mov	r0, r5
   163f8:	2206      	movs	r2, #6
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   163fa:	3401      	adds	r4, #1
	filter->enable_bitmask |= BIT(index);
   163fc:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   16400:	707b      	strb	r3, [r7, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   16402:	f009 f869 	bl	1f4d8 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16406:	2c08      	cmp	r4, #8
   16408:	f105 0506 	add.w	r5, r5, #6
   1640c:	f106 0628 	add.w	r6, r6, #40	; 0x28
   16410:	d1e0      	bne.n	163d4 <rl_update+0x24>
}
   16412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16416:	bf00      	nop
   16418:	2000272e 	.word	0x2000272e
   1641c:	200025ed 	.word	0x200025ed

00016420 <wl_update>:
{
   16420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16424:	4e20      	ldr	r6, [pc, #128]	; (164a8 <wl_update+0x88>)
   16426:	4d21      	ldr	r5, [pc, #132]	; (164ac <wl_update+0x8c>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   16428:	f8df 8084 	ldr.w	r8, [pc, #132]	; 164b0 <wl_update+0x90>
   1642c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 164b4 <wl_update+0x94>
{
   16430:	2400      	movs	r4, #0
   16432:	f1a5 0a02 	sub.w	sl, r5, #2
	filter->enable_bitmask |= BIT(index);
   16436:	1eb7      	subs	r7, r6, #2
		if (!wl[i].taken) {
   16438:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   1643c:	f04f 0c01 	mov.w	ip, #1
		if (!wl[i].taken) {
   16440:	f013 0f01 	tst.w	r3, #1
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   16444:	4630      	mov	r0, r6
	filter->enable_bitmask |= BIT(index);
   16446:	fa0c fc04 	lsl.w	ip, ip, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1644a:	4629      	mov	r1, r5
	for (i = 0U; i < WL_SIZE; i++) {
   1644c:	f106 0606 	add.w	r6, r6, #6
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   16450:	f04f 0206 	mov.w	r2, #6
		if (!wl[i].taken) {
   16454:	d021      	beq.n	1649a <wl_update+0x7a>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   16456:	f898 3000 	ldrb.w	r3, [r8]
   1645a:	b163      	cbz	r3, 16476 <wl_update+0x56>
		j = wl[i].rl_idx;
   1645c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   16460:	2b07      	cmp	r3, #7
   16462:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   16466:	d806      	bhi.n	16476 <wl_update+0x56>
   16468:	f819 303e 	ldrb.w	r3, [r9, lr, lsl #3]
   1646c:	f013 0f04 	tst.w	r3, #4
   16470:	d001      	beq.n	16476 <wl_update+0x56>
   16472:	06db      	lsls	r3, r3, #27
   16474:	d511      	bpl.n	1649a <wl_update+0x7a>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   16476:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   1647a:	f897 e000 	ldrb.w	lr, [r7]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1647e:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   16482:	ea4e 0c0c 	orr.w	ip, lr, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   16486:	f897 e001 	ldrb.w	lr, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   1648a:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1648e:	40a3      	lsls	r3, r4
   16490:	ea4e 0303 	orr.w	r3, lr, r3
   16494:	707b      	strb	r3, [r7, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   16496:	f009 f81f 	bl	1f4d8 <memcpy>
	for (i = 0U; i < WL_SIZE; i++) {
   1649a:	3401      	adds	r4, #1
   1649c:	2c08      	cmp	r4, #8
   1649e:	f105 0508 	add.w	r5, r5, #8
   164a2:	d1c9      	bne.n	16438 <wl_update+0x18>
}
   164a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   164a8:	200027a6 	.word	0x200027a6
   164ac:	20002766 	.word	0x20002766
   164b0:	20003562 	.word	0x20003562
   164b4:	200025ec 	.word	0x200025ec

000164b8 <ll_wl_size_get>:
}
   164b8:	2008      	movs	r0, #8
   164ba:	4770      	bx	lr

000164bc <ll_wl_clear>:
{
   164bc:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   164be:	2000      	movs	r0, #0
   164c0:	f7fc fbca 	bl	12c58 <ull_adv_filter_pol_get>
   164c4:	b9d8      	cbnz	r0, 164fe <ll_wl_clear+0x42>
   164c6:	4a0f      	ldr	r2, [pc, #60]	; (16504 <ll_wl_clear+0x48>)
			rl[j].wl = 0U;
   164c8:	4c0f      	ldr	r4, [pc, #60]	; (16508 <ll_wl_clear+0x4c>)
		uint8_t j = wl[i].rl_idx;
   164ca:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   164ce:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   164d0:	2b07      	cmp	r3, #7
			rl[j].wl = 0U;
   164d2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   164d6:	d805      	bhi.n	164e4 <ll_wl_clear+0x28>
			rl[j].wl = 0U;
   164d8:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   164dc:	f36f 1345 	bfc	r3, #5, #1
   164e0:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		wl[i].taken = 0U;
   164e4:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   164e8:	f36f 0300 	bfc	r3, #0, #1
   164ec:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   164f0:	3001      	adds	r0, #1
   164f2:	2808      	cmp	r0, #8
   164f4:	d1e9      	bne.n	164ca <ll_wl_clear+0xe>
	wl_anon = 0U;
   164f6:	4b05      	ldr	r3, [pc, #20]	; (1650c <ll_wl_clear+0x50>)
   164f8:	2000      	movs	r0, #0
   164fa:	7018      	strb	r0, [r3, #0]
}
   164fc:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   164fe:	200c      	movs	r0, #12
}
   16500:	bd10      	pop	{r4, pc}
   16502:	bf00      	nop
   16504:	20002764 	.word	0x20002764
   16508:	200025ec 	.word	0x200025ec
   1650c:	20003563 	.word	0x20003563

00016510 <ll_wl_add>:
{
   16510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16514:	4681      	mov	r9, r0
   16516:	b083      	sub	sp, #12
	if (ull_adv_filter_pol_get(0)) {
   16518:	2000      	movs	r0, #0
   1651a:	f7fc fb9d 	bl	12c58 <ull_adv_filter_pol_get>
   1651e:	2800      	cmp	r0, #0
   16520:	d173      	bne.n	1660a <ll_wl_add+0xfa>
	if (addr->type == ADDR_TYPE_ANON) {
   16522:	f899 a000 	ldrb.w	sl, [r9]
   16526:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   1652a:	4605      	mov	r5, r0
   1652c:	d067      	beq.n	165fe <ll_wl_add+0xee>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   1652e:	4e45      	ldr	r6, [pc, #276]	; (16644 <ll_wl_add+0x134>)
   16530:	f109 0b01 	add.w	fp, r9, #1
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   16534:	f00a 0a01 	and.w	sl, sl, #1
		*free = FILTER_IDX_NONE;
   16538:	f04f 08ff 	mov.w	r8, #255	; 0xff
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   1653c:	4604      	mov	r4, r0
   1653e:	1eb7      	subs	r7, r6, #2
   16540:	e009      	b.n	16556 <ll_wl_add+0x46>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   16542:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   16546:	d101      	bne.n	1654c <ll_wl_add+0x3c>
			*free = i;
   16548:	fa5f f884 	uxtb.w	r8, r4
	for (i = 0; i < WL_SIZE; i++) {
   1654c:	3401      	adds	r4, #1
   1654e:	2c08      	cmp	r4, #8
   16550:	f106 0608 	add.w	r6, r6, #8
   16554:	d017      	beq.n	16586 <ll_wl_add+0x76>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   16556:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   1655a:	07d8      	lsls	r0, r3, #31
   1655c:	f3c3 0240 	ubfx	r2, r3, #1, #1
   16560:	d5ef      	bpl.n	16542 <ll_wl_add+0x32>
   16562:	4552      	cmp	r2, sl
   16564:	d1f2      	bne.n	1654c <ll_wl_add+0x3c>
   16566:	2206      	movs	r2, #6
   16568:	4630      	mov	r0, r6
   1656a:	4659      	mov	r1, fp
   1656c:	f008 ffa3 	bl	1f4b6 <memcmp>
   16570:	2800      	cmp	r0, #0
   16572:	d041      	beq.n	165f8 <ll_wl_add+0xe8>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   16574:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   16578:	07d9      	lsls	r1, r3, #31
   1657a:	d5e2      	bpl.n	16542 <ll_wl_add+0x32>
	for (i = 0; i < WL_SIZE; i++) {
   1657c:	3401      	adds	r4, #1
   1657e:	2c08      	cmp	r4, #8
   16580:	f106 0608 	add.w	r6, r6, #8
   16584:	d1e7      	bne.n	16556 <ll_wl_add+0x46>
	} else if (j >= ARRAY_SIZE(wl)) {
   16586:	f1b8 0f07 	cmp.w	r8, #7
   1658a:	d856      	bhi.n	1663a <ll_wl_add+0x12a>
	wl[i].id_addr_type = id_addr->type & 0x1;
   1658c:	f899 2000 	ldrb.w	r2, [r9]
   16590:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   16594:	4e2c      	ldr	r6, [pc, #176]	; (16648 <ll_wl_add+0x138>)
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   16596:	2002      	movs	r0, #2
	wl[i].id_addr_type = id_addr->type & 0x1;
   16598:	f362 0341 	bfi	r3, r2, #1, #1
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   1659c:	fb14 0008 	smlabb	r0, r4, r8, r0
	wl[i].id_addr_type = id_addr->type & 0x1;
   165a0:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	memcpy(dst, src, sizeof(*dst));
   165a4:	4438      	add	r0, r7
   165a6:	2206      	movs	r2, #6
   165a8:	4659      	mov	r1, fp
   165aa:	f008 ff95 	bl	1f4d8 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   165ae:	f899 3000 	ldrb.w	r3, [r9]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   165b2:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   165b6:	f003 0301 	and.w	r3, r3, #1
   165ba:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   165be:	fa5f fa85 	uxtb.w	sl, r5
   165c2:	f819 2034 	ldrb.w	r2, [r9, r4, lsl #3]
   165c6:	f3c2 1180 	ubfx	r1, r2, #6, #1
   165ca:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   165cc:	f105 0501 	add.w	r5, r5, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   165d0:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   165d4:	d501      	bpl.n	165da <ll_wl_add+0xca>
   165d6:	4299      	cmp	r1, r3
   165d8:	d01b      	beq.n	16612 <ll_wl_add+0x102>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   165da:	2d08      	cmp	r5, #8
   165dc:	f106 0628 	add.w	r6, r6, #40	; 0x28
   165e0:	d1eb      	bne.n	165ba <ll_wl_add+0xaa>
		wl[i].rl_idx = FILTER_IDX_NONE;
   165e2:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   165e6:	22ff      	movs	r2, #255	; 0xff
   165e8:	705a      	strb	r2, [r3, #1]
	wl[i].taken = 1U;
   165ea:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   165ee:	f043 0301 	orr.w	r3, r3, #1
   165f2:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	return 0;
   165f6:	2000      	movs	r0, #0
}
   165f8:	b003      	add	sp, #12
   165fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		wl_anon = 1U;
   165fe:	4b13      	ldr	r3, [pc, #76]	; (1664c <ll_wl_add+0x13c>)
   16600:	2201      	movs	r2, #1
   16602:	701a      	strb	r2, [r3, #0]
}
   16604:	b003      	add	sp, #12
   16606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1660a:	200c      	movs	r0, #12
}
   1660c:	b003      	add	sp, #12
   1660e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   16612:	4630      	mov	r0, r6
   16614:	2206      	movs	r2, #6
   16616:	4659      	mov	r1, fp
   16618:	9301      	str	r3, [sp, #4]
   1661a:	f008 ff4c 	bl	1f4b6 <memcmp>
   1661e:	9b01      	ldr	r3, [sp, #4]
   16620:	2800      	cmp	r0, #0
   16622:	d1da      	bne.n	165da <ll_wl_add+0xca>
		rl[j].wl = 1U;
   16624:	f819 3004 	ldrb.w	r3, [r9, r4]
   16628:	f043 0320 	orr.w	r3, r3, #32
   1662c:	f809 3004 	strb.w	r3, [r9, r4]
		wl[i].rl_idx = j;
   16630:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   16634:	f883 a001 	strb.w	sl, [r3, #1]
		rl[j].wl = 1U;
   16638:	e7d7      	b.n	165ea <ll_wl_add+0xda>
   1663a:	2007      	movs	r0, #7
}
   1663c:	b003      	add	sp, #12
   1663e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16642:	bf00      	nop
   16644:	20002766 	.word	0x20002766
   16648:	200025ed 	.word	0x200025ed
   1664c:	20003563 	.word	0x20003563

00016650 <ll_wl_remove>:
{
   16650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16654:	4607      	mov	r7, r0
	if (ull_adv_filter_pol_get(0)) {
   16656:	2000      	movs	r0, #0
   16658:	f7fc fafe 	bl	12c58 <ull_adv_filter_pol_get>
   1665c:	2800      	cmp	r0, #0
   1665e:	d13b      	bne.n	166d8 <ll_wl_remove+0x88>
	if (addr->type == ADDR_TYPE_ANON) {
   16660:	783e      	ldrb	r6, [r7, #0]
   16662:	2eff      	cmp	r6, #255	; 0xff
   16664:	4604      	mov	r4, r0
   16666:	d033      	beq.n	166d0 <ll_wl_remove+0x80>
	uint8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   16668:	4d1d      	ldr	r5, [pc, #116]	; (166e0 <ll_wl_remove+0x90>)
   1666a:	3701      	adds	r7, #1
	for (i = 0; i < WL_SIZE; i++) {
   1666c:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   16670:	f006 0601 	and.w	r6, r6, #1
   16674:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   16678:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1667c:	07db      	lsls	r3, r3, #31
   1667e:	d501      	bpl.n	16684 <ll_wl_remove+0x34>
   16680:	42b2      	cmp	r2, r6
   16682:	d007      	beq.n	16694 <ll_wl_remove+0x44>
	for (i = 0; i < WL_SIZE; i++) {
   16684:	3401      	adds	r4, #1
   16686:	2c08      	cmp	r4, #8
   16688:	f105 0508 	add.w	r5, r5, #8
   1668c:	d1f2      	bne.n	16674 <ll_wl_remove+0x24>
   1668e:	2002      	movs	r0, #2
}
   16690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   16694:	2206      	movs	r2, #6
   16696:	4628      	mov	r0, r5
   16698:	4639      	mov	r1, r7
   1669a:	f008 ff0c 	bl	1f4b6 <memcmp>
   1669e:	2800      	cmp	r0, #0
   166a0:	d1f0      	bne.n	16684 <ll_wl_remove+0x34>
		uint8_t j = wl[i].rl_idx;
   166a2:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   166a6:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   166a8:	2b07      	cmp	r3, #7
   166aa:	d808      	bhi.n	166be <ll_wl_remove+0x6e>
			rl[j].wl = 0U;
   166ac:	4a0d      	ldr	r2, [pc, #52]	; (166e4 <ll_wl_remove+0x94>)
   166ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   166b2:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   166b6:	f360 1145 	bfi	r1, r0, #5, #1
   166ba:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		wl[i].taken = 0U;
   166be:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   166c2:	f36f 0300 	bfc	r3, #0, #1
   166c6:	f808 3034 	strb.w	r3, [r8, r4, lsl #3]
		return 0;
   166ca:	2000      	movs	r0, #0
}
   166cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wl_anon = 0U;
   166d0:	4b05      	ldr	r3, [pc, #20]	; (166e8 <ll_wl_remove+0x98>)
   166d2:	7018      	strb	r0, [r3, #0]
}
   166d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   166d8:	200c      	movs	r0, #12
}
   166da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   166de:	bf00      	nop
   166e0:	20002766 	.word	0x20002766
   166e4:	200025ec 	.word	0x200025ec
   166e8:	20003563 	.word	0x20003563

000166ec <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   166ec:	2807      	cmp	r0, #7
{
   166ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   166f2:	4604      	mov	r4, r0
   166f4:	460e      	mov	r6, r1
   166f6:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   166f8:	d817      	bhi.n	1672a <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   166fa:	4d19      	ldr	r5, [pc, #100]	; (16760 <ll_rl_id_addr_get+0x74>)
   166fc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   16700:	00a7      	lsls	r7, r4, #2
   16702:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   16706:	07db      	lsls	r3, r3, #31
   16708:	d51c      	bpl.n	16744 <ll_rl_id_addr_get+0x58>
	*id_addr_type = rl[rl_idx].id_addr_type;
   1670a:	4427      	add	r7, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1670c:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   1670e:	f815 3037 	ldrb.w	r3, [r5, r7, lsl #3]
   16712:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   16716:	fb01 5104 	mla	r1, r1, r4, r5
	*id_addr_type = rl[rl_idx].id_addr_type;
   1671a:	7033      	strb	r3, [r6, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1671c:	4640      	mov	r0, r8
   1671e:	2206      	movs	r2, #6
}
   16720:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   16724:	3101      	adds	r1, #1
   16726:	f008 bed7 	b.w	1f4d8 <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1672a:	4a0e      	ldr	r2, [pc, #56]	; (16764 <ll_rl_id_addr_get+0x78>)
   1672c:	490e      	ldr	r1, [pc, #56]	; (16768 <ll_rl_id_addr_get+0x7c>)
   1672e:	480f      	ldr	r0, [pc, #60]	; (1676c <ll_rl_id_addr_get+0x80>)
   16730:	23f3      	movs	r3, #243	; 0xf3
   16732:	f006 fc7f 	bl	1d034 <printk>
   16736:	4040      	eors	r0, r0
   16738:	f380 8811 	msr	BASEPRI, r0
   1673c:	f04f 0003 	mov.w	r0, #3
   16740:	df02      	svc	2
   16742:	e7da      	b.n	166fa <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   16744:	4a07      	ldr	r2, [pc, #28]	; (16764 <ll_rl_id_addr_get+0x78>)
   16746:	490a      	ldr	r1, [pc, #40]	; (16770 <ll_rl_id_addr_get+0x84>)
   16748:	4808      	ldr	r0, [pc, #32]	; (1676c <ll_rl_id_addr_get+0x80>)
   1674a:	23f4      	movs	r3, #244	; 0xf4
   1674c:	f006 fc72 	bl	1d034 <printk>
   16750:	4040      	eors	r0, r0
   16752:	f380 8811 	msr	BASEPRI, r0
   16756:	f04f 0003 	mov.w	r0, #3
   1675a:	df02      	svc	2
   1675c:	e7d5      	b.n	1670a <ll_rl_id_addr_get+0x1e>
   1675e:	bf00      	nop
   16760:	200025ec 	.word	0x200025ec
   16764:	00023860 	.word	0x00023860
   16768:	000238a4 	.word	0x000238a4
   1676c:	000230b4 	.word	0x000230b4
   16770:	000238b0 	.word	0x000238b0

00016774 <ll_rl_size_get>:
   16774:	2008      	movs	r0, #8
   16776:	4770      	bx	lr

00016778 <ll_rl_clear>:
{
   16778:	b510      	push	{r4, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1677a:	2000      	movs	r0, #0
   1677c:	f7fc fa60 	bl	12c40 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   16780:	bb88      	cbnz	r0, 167e6 <ll_rl_clear+0x6e>
		rl[i].taken = 0U;
   16782:	4b1a      	ldr	r3, [pc, #104]	; (167ec <ll_rl_clear+0x74>)
	peer_irk_count = 0U;
   16784:	4c1a      	ldr	r4, [pc, #104]	; (167f0 <ll_rl_clear+0x78>)
		rl[i].taken = 0U;
   16786:	7819      	ldrb	r1, [r3, #0]
   16788:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   1678c:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
   1678e:	f360 0100 	bfi	r1, r0, #0, #1
   16792:	f360 0200 	bfi	r2, r0, #0, #1
   16796:	7019      	strb	r1, [r3, #0]
   16798:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   1679c:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   167a0:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   167a4:	f360 0100 	bfi	r1, r0, #0, #1
   167a8:	f360 0200 	bfi	r2, r0, #0, #1
   167ac:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   167b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   167b4:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   167b8:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   167bc:	f360 0100 	bfi	r1, r0, #0, #1
   167c0:	f360 0200 	bfi	r2, r0, #0, #1
   167c4:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   167c8:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   167cc:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   167d0:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   167d4:	f360 0100 	bfi	r1, r0, #0, #1
   167d8:	f360 0200 	bfi	r2, r0, #0, #1
   167dc:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   167e0:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   167e4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   167e6:	200c      	movs	r0, #12
}
   167e8:	bd10      	pop	{r4, pc}
   167ea:	bf00      	nop
   167ec:	200025ec 	.word	0x200025ec
   167f0:	20003561 	.word	0x20003561

000167f4 <ll_rl_remove>:
{
   167f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167f8:	4681      	mov	r9, r0
   167fa:	b083      	sub	sp, #12
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   167fc:	2000      	movs	r0, #0
   167fe:	f7fc fa1f 	bl	12c40 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   16802:	2800      	cmp	r0, #0
   16804:	d149      	bne.n	1689a <ll_rl_remove+0xa6>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   16806:	46ca      	mov	sl, r9
   16808:	4e4d      	ldr	r6, [pc, #308]	; (16940 <ll_rl_remove+0x14c>)
   1680a:	f81a 8b01 	ldrb.w	r8, [sl], #1
   1680e:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   16810:	f008 0801 	and.w	r8, r8, #1
   16814:	1e75      	subs	r5, r6, #1
   16816:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1681a:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
   1681e:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   16822:	f3c2 1380 	ubfx	r3, r2, #6, #1
   16826:	07d2      	lsls	r2, r2, #31
   16828:	ea4f 0784 	mov.w	r7, r4, lsl #2
   1682c:	d501      	bpl.n	16832 <ll_rl_remove+0x3e>
   1682e:	4543      	cmp	r3, r8
   16830:	d008      	beq.n	16844 <ll_rl_remove+0x50>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16832:	3401      	adds	r4, #1
   16834:	2c08      	cmp	r4, #8
   16836:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1683a:	d1ec      	bne.n	16816 <ll_rl_remove+0x22>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1683c:	2002      	movs	r0, #2
}
   1683e:	b003      	add	sp, #12
   16840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   16844:	4630      	mov	r0, r6
   16846:	2206      	movs	r2, #6
   16848:	4651      	mov	r1, sl
   1684a:	f008 fe34 	bl	1f4b6 <memcmp>
   1684e:	4603      	mov	r3, r0
   16850:	2800      	cmp	r0, #0
   16852:	d1ee      	bne.n	16832 <ll_rl_remove+0x3e>
		if (rl[i].pirk) {
   16854:	f89b 2000 	ldrb.w	r2, [fp]
   16858:	0752      	lsls	r2, r2, #29
   1685a:	d430      	bmi.n	168be <ll_rl_remove+0xca>
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1685c:	f899 9000 	ldrb.w	r9, [r9]
	for (i = 0; i < WL_SIZE; i++) {
   16860:	4e38      	ldr	r6, [pc, #224]	; (16944 <ll_rl_remove+0x150>)
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   16862:	f009 0901 	and.w	r9, r9, #1
   16866:	f1a6 0802 	sub.w	r8, r6, #2
   1686a:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   1686e:	07d0      	lsls	r0, r2, #31
   16870:	f3c2 0140 	ubfx	r1, r2, #1, #1
   16874:	d501      	bpl.n	1687a <ll_rl_remove+0x86>
   16876:	4549      	cmp	r1, r9
   16878:	d013      	beq.n	168a2 <ll_rl_remove+0xae>
	for (i = 0; i < WL_SIZE; i++) {
   1687a:	3301      	adds	r3, #1
   1687c:	2b08      	cmp	r3, #8
   1687e:	f106 0608 	add.w	r6, r6, #8
   16882:	d1f2      	bne.n	1686a <ll_rl_remove+0x76>
		rl[i].taken = 0U;
   16884:	443c      	add	r4, r7
		return 0;
   16886:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   16888:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   1688c:	f36f 0300 	bfc	r3, #0, #1
   16890:	f805 3034 	strb.w	r3, [r5, r4, lsl #3]
}
   16894:	b003      	add	sp, #12
   16896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1689a:	200c      	movs	r0, #12
}
   1689c:	b003      	add	sp, #12
   1689e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   168a2:	2206      	movs	r2, #6
   168a4:	4630      	mov	r0, r6
   168a6:	4651      	mov	r1, sl
   168a8:	9301      	str	r3, [sp, #4]
   168aa:	f008 fe04 	bl	1f4b6 <memcmp>
   168ae:	9b01      	ldr	r3, [sp, #4]
   168b0:	2800      	cmp	r0, #0
   168b2:	d1e2      	bne.n	1687a <ll_rl_remove+0x86>
			wl[j].rl_idx = FILTER_IDX_NONE;
   168b4:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   168b8:	22ff      	movs	r2, #255	; 0xff
   168ba:	705a      	strb	r2, [r3, #1]
   168bc:	e7e2      	b.n	16884 <ll_rl_remove+0x90>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   168be:	4e22      	ldr	r6, [pc, #136]	; (16948 <ll_rl_remove+0x154>)
   168c0:	7832      	ldrb	r2, [r6, #0]
   168c2:	3a01      	subs	r2, #1
			if (pj && pi != pj) {
   168c4:	f012 08ff 	ands.w	r8, r2, #255	; 0xff
   168c8:	d005      	beq.n	168d6 <ll_rl_remove+0xe2>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   168ca:	f89b b017 	ldrb.w	fp, [fp, #23]
			if (pj && pi != pj) {
   168ce:	45c3      	cmp	fp, r8
   168d0:	d104      	bne.n	168dc <ll_rl_remove+0xe8>
			peer_irk_count--;
   168d2:	7032      	strb	r2, [r6, #0]
   168d4:	e7c2      	b.n	1685c <ll_rl_remove+0x68>
   168d6:	461a      	mov	r2, r3
   168d8:	7032      	strb	r2, [r6, #0]
   168da:	e7bf      	b.n	1685c <ll_rl_remove+0x68>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   168dc:	481b      	ldr	r0, [pc, #108]	; (1694c <ll_rl_remove+0x158>)
   168de:	9301      	str	r3, [sp, #4]
   168e0:	2210      	movs	r2, #16
   168e2:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   168e6:	eb00 100b 	add.w	r0, r0, fp, lsl #4
   168ea:	f008 fdf5 	bl	1f4d8 <memcpy>
   168ee:	9b01      	ldr	r3, [sp, #4]
   168f0:	f8df c060 	ldr.w	ip, [pc, #96]	; 16954 <ll_rl_remove+0x160>
   168f4:	461a      	mov	r2, r3
					if (rl[k].taken && rl[k].pirk &&
   168f6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   168fa:	fa5f fe82 	uxtb.w	lr, r2
   168fe:	f815 0031 	ldrb.w	r0, [r5, r1, lsl #3]
   16902:	f010 0f01 	tst.w	r0, #1
   16906:	f102 0201 	add.w	r2, r2, #1
   1690a:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
   1690e:	d005      	beq.n	1691c <ll_rl_remove+0x128>
   16910:	0740      	lsls	r0, r0, #29
   16912:	d503      	bpl.n	1691c <ll_rl_remove+0x128>
   16914:	f89c 0017 	ldrb.w	r0, [ip, #23]
   16918:	4540      	cmp	r0, r8
   1691a:	d007      	beq.n	1692c <ll_rl_remove+0x138>
				for (k = 0U;
   1691c:	2a08      	cmp	r2, #8
   1691e:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
   16922:	d1e8      	bne.n	168f6 <ll_rl_remove+0x102>
			peer_irk_count--;
   16924:	7832      	ldrb	r2, [r6, #0]
   16926:	3a01      	subs	r2, #1
   16928:	7032      	strb	r2, [r6, #0]
   1692a:	e797      	b.n	1685c <ll_rl_remove+0x68>
						peer_irk_rl_ids[pi] = k;
   1692c:	4a08      	ldr	r2, [pc, #32]	; (16950 <ll_rl_remove+0x15c>)
						rl[k].pirk_idx = pi;
   1692e:	f881 b017 	strb.w	fp, [r1, #23]
						peer_irk_rl_ids[pi] = k;
   16932:	f802 e00b 	strb.w	lr, [r2, fp]
			peer_irk_count--;
   16936:	7832      	ldrb	r2, [r6, #0]
   16938:	3a01      	subs	r2, #1
   1693a:	7032      	strb	r2, [r6, #0]
   1693c:	e78e      	b.n	1685c <ll_rl_remove+0x68>
   1693e:	bf00      	nop
   16940:	200025ed 	.word	0x200025ed
   16944:	20002766 	.word	0x20002766
   16948:	20003561 	.word	0x20003561
   1694c:	2000256c 	.word	0x2000256c
   16950:	20002564 	.word	0x20002564
   16954:	200025ec 	.word	0x200025ec

00016958 <ll_rl_crpa_set>:
{
   16958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   1695c:	795c      	ldrb	r4, [r3, #5]
   1695e:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   16962:	2c40      	cmp	r4, #64	; 0x40
{
   16964:	b083      	sub	sp, #12
	if ((crpa[5] & 0xc0) == 0x40) {
   16966:	d002      	beq.n	1696e <ll_rl_crpa_set+0x16>
}
   16968:	b003      	add	sp, #12
   1696a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (id_addr) {
   1696e:	4699      	mov	r9, r3
   16970:	b1f9      	cbz	r1, 169b2 <ll_rl_crpa_set+0x5a>
   16972:	4f1a      	ldr	r7, [pc, #104]	; (169dc <ll_rl_crpa_set+0x84>)
   16974:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   16976:	f000 0801 	and.w	r8, r0, #1
   1697a:	1e7e      	subs	r6, r7, #1
   1697c:	e003      	b.n	16986 <ll_rl_crpa_set+0x2e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1697e:	2c08      	cmp	r4, #8
   16980:	f107 0728 	add.w	r7, r7, #40	; 0x28
   16984:	d0f0      	beq.n	16968 <ll_rl_crpa_set+0x10>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   16986:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1698a:	4625      	mov	r5, r4
   1698c:	f816 2032 	ldrb.w	r2, [r6, r2, lsl #3]
   16990:	f3c2 1080 	ubfx	r0, r2, #6, #1
   16994:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16996:	f104 0401 	add.w	r4, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1699a:	d5f0      	bpl.n	1697e <ll_rl_crpa_set+0x26>
   1699c:	4540      	cmp	r0, r8
   1699e:	d1ee      	bne.n	1697e <ll_rl_crpa_set+0x26>
   169a0:	4638      	mov	r0, r7
   169a2:	2206      	movs	r2, #6
   169a4:	9101      	str	r1, [sp, #4]
   169a6:	f008 fd86 	bl	1f4b6 <memcmp>
   169aa:	9901      	ldr	r1, [sp, #4]
   169ac:	2800      	cmp	r0, #0
   169ae:	d1e6      	bne.n	1697e <ll_rl_crpa_set+0x26>
   169b0:	e003      	b.n	169ba <ll_rl_crpa_set+0x62>
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   169b2:	2a07      	cmp	r2, #7
   169b4:	d8d8      	bhi.n	16968 <ll_rl_crpa_set+0x10>
   169b6:	4e0a      	ldr	r6, [pc, #40]	; (169e0 <ll_rl_crpa_set+0x88>)
   169b8:	4615      	mov	r5, r2
   169ba:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   169be:	00e8      	lsls	r0, r5, #3
   169c0:	f816 2035 	ldrb.w	r2, [r6, r5, lsl #3]
   169c4:	07d3      	lsls	r3, r2, #31
   169c6:	d5cf      	bpl.n	16968 <ll_rl_crpa_set+0x10>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   169c8:	3018      	adds	r0, #24
   169ca:	2206      	movs	r2, #6
   169cc:	4649      	mov	r1, r9
   169ce:	4430      	add	r0, r6
}
   169d0:	b003      	add	sp, #12
   169d2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   169d6:	f008 bd7f 	b.w	1f4d8 <memcpy>
   169da:	bf00      	nop
   169dc:	200025ed 	.word	0x200025ed
   169e0:	200025ec 	.word	0x200025ec

000169e4 <ll_rl_crpa_get>:
{
   169e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   169e8:	4682      	mov	sl, r0
   169ea:	4e1a      	ldr	r6, [pc, #104]	; (16a54 <ll_rl_crpa_get+0x70>)
   169ec:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   169f0:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   169f2:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   169f4:	f008 0801 	and.w	r8, r8, #1
   169f8:	1e77      	subs	r7, r6, #1
   169fa:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   169fe:	00d5      	lsls	r5, r2, #3
   16a00:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   16a04:	f3c3 1280 	ubfx	r2, r3, #6, #1
   16a08:	07db      	lsls	r3, r3, #31
   16a0a:	f104 0401 	add.w	r4, r4, #1
   16a0e:	d501      	bpl.n	16a14 <ll_rl_crpa_get+0x30>
   16a10:	4542      	cmp	r2, r8
   16a12:	d006      	beq.n	16a22 <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16a14:	2c08      	cmp	r4, #8
   16a16:	f106 0628 	add.w	r6, r6, #40	; 0x28
   16a1a:	d1ee      	bne.n	169fa <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16a1c:	2002      	movs	r0, #2
}
   16a1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   16a22:	4630      	mov	r0, r6
   16a24:	2206      	movs	r2, #6
   16a26:	4651      	mov	r1, sl
   16a28:	f008 fd45 	bl	1f4b6 <memcmp>
   16a2c:	4683      	mov	fp, r0
   16a2e:	2800      	cmp	r0, #0
   16a30:	d1f0      	bne.n	16a14 <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   16a32:	f105 0218 	add.w	r2, r5, #24
   16a36:	4417      	add	r7, r2
   16a38:	2106      	movs	r1, #6
   16a3a:	4638      	mov	r0, r7
   16a3c:	f7f7 fcfe 	bl	e43c <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   16a40:	2800      	cmp	r0, #0
   16a42:	d0eb      	beq.n	16a1c <ll_rl_crpa_get+0x38>
   16a44:	2206      	movs	r2, #6
   16a46:	4639      	mov	r1, r7
   16a48:	4648      	mov	r0, r9
   16a4a:	f008 fd45 	bl	1f4d8 <memcpy>
		return 0;
   16a4e:	4658      	mov	r0, fp
}
   16a50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a54:	200025ed 	.word	0x200025ed

00016a58 <ll_rl_lrpa_get>:
{
   16a58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   16a5c:	4681      	mov	r9, r0
   16a5e:	4e16      	ldr	r6, [pc, #88]	; (16ab8 <ll_rl_lrpa_get+0x60>)
   16a60:	f819 8b01 	ldrb.w	r8, [r9], #1
{
   16a64:	468a      	mov	sl, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   16a66:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   16a68:	f008 0801 	and.w	r8, r8, #1
   16a6c:	1e77      	subs	r7, r6, #1
   16a6e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   16a72:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   16a76:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   16a7a:	f3c3 1280 	ubfx	r2, r3, #6, #1
   16a7e:	07db      	lsls	r3, r3, #31
   16a80:	f104 0401 	add.w	r4, r4, #1
   16a84:	d501      	bpl.n	16a8a <ll_rl_lrpa_get+0x32>
   16a86:	4542      	cmp	r2, r8
   16a88:	d006      	beq.n	16a98 <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16a8a:	2c08      	cmp	r4, #8
   16a8c:	f106 0628 	add.w	r6, r6, #40	; 0x28
   16a90:	d1ed      	bne.n	16a6e <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16a92:	2002      	movs	r0, #2
}
   16a94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   16a98:	4630      	mov	r0, r6
   16a9a:	2206      	movs	r2, #6
   16a9c:	4649      	mov	r1, r9
   16a9e:	f008 fd0a 	bl	1f4b6 <memcmp>
   16aa2:	4683      	mov	fp, r0
   16aa4:	2800      	cmp	r0, #0
   16aa6:	d1f0      	bne.n	16a8a <ll_rl_lrpa_get+0x32>
   16aa8:	6a69      	ldr	r1, [r5, #36]	; 0x24
   16aaa:	2206      	movs	r2, #6
   16aac:	4650      	mov	r0, sl
   16aae:	f008 fd13 	bl	1f4d8 <memcpy>
		return 0;
   16ab2:	4658      	mov	r0, fp
}
   16ab4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ab8:	200025ed 	.word	0x200025ed

00016abc <ll_rl_enable>:
{
   16abc:	b510      	push	{r4, lr}
   16abe:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   16ac0:	2000      	movs	r0, #0
   16ac2:	f7fc f8bd 	bl	12c40 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   16ac6:	b958      	cbnz	r0, 16ae0 <ll_rl_enable+0x24>
	switch (enable) {
   16ac8:	b134      	cbz	r4, 16ad8 <ll_rl_enable+0x1c>
   16aca:	2c01      	cmp	r4, #1
   16acc:	d001      	beq.n	16ad2 <ll_rl_enable+0x16>
   16ace:	2012      	movs	r0, #18
}
   16ad0:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   16ad2:	4b04      	ldr	r3, [pc, #16]	; (16ae4 <ll_rl_enable+0x28>)
   16ad4:	701c      	strb	r4, [r3, #0]
}
   16ad6:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   16ad8:	4b02      	ldr	r3, [pc, #8]	; (16ae4 <ll_rl_enable+0x28>)
   16ada:	701c      	strb	r4, [r3, #0]
	return 0;
   16adc:	4620      	mov	r0, r4
}
   16ade:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16ae0:	200c      	movs	r0, #12
}
   16ae2:	bd10      	pop	{r4, pc}
   16ae4:	20003562 	.word	0x20003562

00016ae8 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   16ae8:	4b03      	ldr	r3, [pc, #12]	; (16af8 <ll_rl_timeout_set+0x10>)
   16aea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16aee:	fb02 f000 	mul.w	r0, r2, r0
   16af2:	6018      	str	r0, [r3, #0]
}
   16af4:	4770      	bx	lr
   16af6:	bf00      	nop
   16af8:	20002760 	.word	0x20002760

00016afc <ll_priv_mode_set>:
{
   16afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b00:	4682      	mov	sl, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   16b02:	2000      	movs	r0, #0
{
   16b04:	4688      	mov	r8, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   16b06:	f7fc f89b 	bl	12c40 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   16b0a:	bb68      	cbnz	r0, 16b68 <ll_priv_mode_set+0x6c>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   16b0c:	4e1d      	ldr	r6, [pc, #116]	; (16b84 <ll_priv_mode_set+0x88>)
   16b0e:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16b12:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   16b14:	f009 0901 	and.w	r9, r9, #1
   16b18:	1e77      	subs	r7, r6, #1
   16b1a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   16b1e:	00d5      	lsls	r5, r2, #3
   16b20:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   16b24:	f3c3 1280 	ubfx	r2, r3, #6, #1
   16b28:	07db      	lsls	r3, r3, #31
   16b2a:	f104 0401 	add.w	r4, r4, #1
   16b2e:	d501      	bpl.n	16b34 <ll_priv_mode_set+0x38>
   16b30:	454a      	cmp	r2, r9
   16b32:	d006      	beq.n	16b42 <ll_priv_mode_set+0x46>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16b34:	2c08      	cmp	r4, #8
   16b36:	f106 0628 	add.w	r6, r6, #40	; 0x28
   16b3a:	d1ee      	bne.n	16b1a <ll_priv_mode_set+0x1e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16b3c:	2002      	movs	r0, #2
}
   16b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   16b42:	4630      	mov	r0, r6
   16b44:	2206      	movs	r2, #6
   16b46:	4651      	mov	r1, sl
   16b48:	f008 fcb5 	bl	1f4b6 <memcmp>
   16b4c:	2800      	cmp	r0, #0
   16b4e:	d1f1      	bne.n	16b34 <ll_priv_mode_set+0x38>
		switch (mode) {
   16b50:	f1b8 0f00 	cmp.w	r8, #0
   16b54:	d00e      	beq.n	16b74 <ll_priv_mode_set+0x78>
   16b56:	f1b8 0f01 	cmp.w	r8, #1
   16b5a:	d108      	bne.n	16b6e <ll_priv_mode_set+0x72>
			rl[i].dev = 1U;
   16b5c:	5d7b      	ldrb	r3, [r7, r5]
   16b5e:	f043 0310 	orr.w	r3, r3, #16
   16b62:	557b      	strb	r3, [r7, r5]
}
   16b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16b68:	200c      	movs	r0, #12
}
   16b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   16b6e:	2012      	movs	r0, #18
}
   16b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   16b74:	5d7b      	ldrb	r3, [r7, r5]
   16b76:	f368 1304 	bfi	r3, r8, #4, #1
   16b7a:	557b      	strb	r3, [r7, r5]
	return 0;
   16b7c:	4640      	mov	r0, r8
}
   16b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16b82:	bf00      	nop
   16b84:	200025ed 	.word	0x200025ed

00016b88 <ull_filter_adv_scan_state_cb>:
{
   16b88:	b510      	push	{r4, lr}
	if (bm) {
   16b8a:	b1a8      	cbz	r0, 16bb8 <ull_filter_adv_scan_state_cb+0x30>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   16b8c:	4a0e      	ldr	r2, [pc, #56]	; (16bc8 <ull_filter_adv_scan_state_cb+0x40>)
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   16b8e:	6812      	ldr	r2, [r2, #0]
   16b90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   16b94:	f240 30e7 	movw	r0, #999	; 0x3e7
   16b98:	2100      	movs	r1, #0
   16b9a:	fbe2 0103 	umlal	r0, r1, r2, r3
   16b9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16ba2:	2300      	movs	r3, #0
   16ba4:	f7e9 ff6a 	bl	a7c <__aeabi_uldivmod>
}
   16ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16bac:	4602      	mov	r2, r0
   16bae:	460b      	mov	r3, r1
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   16bb0:	4806      	ldr	r0, [pc, #24]	; (16bcc <ull_filter_adv_scan_state_cb+0x44>)
   16bb2:	4907      	ldr	r1, [pc, #28]	; (16bd0 <ull_filter_adv_scan_state_cb+0x48>)
   16bb4:	f005 bcca 	b.w	1c54c <k_work_reschedule_for_queue>
	return k_work_delayable_busy_get(dwork) != 0;
   16bb8:	4805      	ldr	r0, [pc, #20]	; (16bd0 <ull_filter_adv_scan_state_cb+0x48>)
   16bba:	f00b f9fb 	bl	21fb4 <k_work_delayable_busy_get>
   16bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	int rc = k_work_cancel_delayable(&work->work);
   16bc2:	4803      	ldr	r0, [pc, #12]	; (16bd0 <ull_filter_adv_scan_state_cb+0x48>)
   16bc4:	f00b ba0a 	b.w	21fdc <k_work_cancel_delayable>
   16bc8:	20002760 	.word	0x20002760
   16bcc:	200015c0 	.word	0x200015c0
   16bd0:	20001400 	.word	0x20001400

00016bd4 <ull_filter_adv_update>:
{
   16bd4:	b508      	push	{r3, lr}
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   16bd6:	4b09      	ldr	r3, [pc, #36]	; (16bfc <ull_filter_adv_update+0x28>)
   16bd8:	2200      	movs	r2, #0
   16bda:	801a      	strh	r2, [r3, #0]
	if (adv_fp &&
   16bdc:	b930      	cbnz	r0, 16bec <ull_filter_adv_update+0x18>
	if (rl_enable &&
   16bde:	4b08      	ldr	r3, [pc, #32]	; (16c00 <ull_filter_adv_update+0x2c>)
	filter->enable_bitmask = 0;
   16be0:	4a08      	ldr	r2, [pc, #32]	; (16c04 <ull_filter_adv_update+0x30>)
	if (rl_enable &&
   16be2:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   16be4:	2100      	movs	r1, #0
   16be6:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   16be8:	b91b      	cbnz	r3, 16bf2 <ull_filter_adv_update+0x1e>
}
   16bea:	bd08      	pop	{r3, pc}
		wl_update();
   16bec:	f7ff fc18 	bl	16420 <wl_update>
   16bf0:	e7f5      	b.n	16bde <ull_filter_adv_update+0xa>
}
   16bf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   16bf6:	f7ff bbdb 	b.w	163b0 <rl_update>
   16bfa:	bf00      	nop
   16bfc:	200027a4 	.word	0x200027a4
   16c00:	20003562 	.word	0x20003562
   16c04:	2000272c 	.word	0x2000272c

00016c08 <ull_filter_rpa_update>:
{
   16c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c0c:	4683      	mov	fp, r0
   16c0e:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   16c10:	f00b fa3d 	bl	2208e <z_impl_k_uptime_ticks>
   16c14:	014b      	lsls	r3, r1, #5
   16c16:	0144      	lsls	r4, r0, #5
   16c18:	1a24      	subs	r4, r4, r0
   16c1a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   16c1e:	eb63 0301 	sbc.w	r3, r3, r1
   16c22:	009b      	lsls	r3, r3, #2
   16c24:	00a2      	lsls	r2, r4, #2
   16c26:	eb12 0900 	adds.w	r9, r2, r0
   16c2a:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
   16c2e:	eb41 0103 	adc.w	r1, r1, r3
   16c32:	00cb      	lsls	r3, r1, #3
   16c34:	ea43 7359 	orr.w	r3, r3, r9, lsr #29
   16c38:	0bd9      	lsrs	r1, r3, #15
   16c3a:	f3c9 3910 	ubfx	r9, r9, #12, #17
   16c3e:	ea49 4943 	orr.w	r9, r9, r3, lsl #17
   16c42:	9101      	str	r1, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   16c44:	f1bb 0f00 	cmp.w	fp, #0
   16c48:	d117      	bne.n	16c7a <ull_filter_rpa_update+0x72>
   16c4a:	4a5e      	ldr	r2, [pc, #376]	; (16dc4 <ull_filter_rpa_update+0x1bc>)
   16c4c:	e9d2 3200 	ldrd	r3, r2, [r2]
   16c50:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   16c54:	bf08      	it	eq
   16c56:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   16c5a:	d00e      	beq.n	16c7a <ull_filter_rpa_update+0x72>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   16c5c:	ebb9 0303 	subs.w	r3, r9, r3
   16c60:	eb61 0202 	sbc.w	r2, r1, r2
   16c64:	4958      	ldr	r1, [pc, #352]	; (16dc8 <ull_filter_rpa_update+0x1c0>)
   16c66:	6809      	ldr	r1, [r1, #0]
	bool all = timeout || (rpa_last_ms == -1) ||
   16c68:	428b      	cmp	r3, r1
   16c6a:	f172 0300 	sbcs.w	r3, r2, #0
   16c6e:	bfac      	ite	ge
   16c70:	f04f 0a01 	movge.w	sl, #1
   16c74:	f04f 0a00 	movlt.w	sl, #0
   16c78:	e001      	b.n	16c7e <ull_filter_rpa_update+0x76>
   16c7a:	f04f 0a01 	mov.w	sl, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16c7e:	4e53      	ldr	r6, [pc, #332]	; (16dcc <ull_filter_rpa_update+0x1c4>)
   16c80:	f8df 815c 	ldr.w	r8, [pc, #348]	; 16de0 <ull_filter_rpa_update+0x1d8>
	bool all = timeout || (rpa_last_ms == -1) ||
   16c84:	2400      	movs	r4, #0
   16c86:	f1a6 071e 	sub.w	r7, r6, #30
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   16c8a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   16c8e:	00a5      	lsls	r5, r4, #2
   16c90:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   16c94:	07da      	lsls	r2, r3, #31
   16c96:	d515      	bpl.n	16cc4 <ull_filter_rpa_update+0xbc>
   16c98:	f1ba 0f00 	cmp.w	sl, #0
   16c9c:	d101      	bne.n	16ca2 <ull_filter_rpa_update+0x9a>
   16c9e:	0798      	lsls	r0, r3, #30
   16ca0:	d410      	bmi.n	16cc4 <ull_filter_rpa_update+0xbc>
			if (rl[i].pirk) {
   16ca2:	192b      	adds	r3, r5, r4
   16ca4:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   16ca8:	0759      	lsls	r1, r3, #29
   16caa:	d432      	bmi.n	16d12 <ull_filter_rpa_update+0x10a>
			if (rl[i].lirk) {
   16cac:	192b      	adds	r3, r5, r4
   16cae:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   16cb2:	071a      	lsls	r2, r3, #28
   16cb4:	d41b      	bmi.n	16cee <ull_filter_rpa_update+0xe6>
			rl[i].rpas_ready = 1U;
   16cb6:	4425      	add	r5, r4
   16cb8:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   16cbc:	f043 0302 	orr.w	r3, r3, #2
   16cc0:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16cc4:	3401      	adds	r4, #1
   16cc6:	2c08      	cmp	r4, #8
   16cc8:	f108 0806 	add.w	r8, r8, #6
   16ccc:	f106 0628 	add.w	r6, r6, #40	; 0x28
   16cd0:	d1db      	bne.n	16c8a <ull_filter_rpa_update+0x82>
	if (all) {
   16cd2:	f1ba 0f00 	cmp.w	sl, #0
   16cd6:	d004      	beq.n	16ce2 <ull_filter_rpa_update+0xda>
		rpa_last_ms = now;
   16cd8:	4b3a      	ldr	r3, [pc, #232]	; (16dc4 <ull_filter_rpa_update+0x1bc>)
   16cda:	9a01      	ldr	r2, [sp, #4]
   16cdc:	f8c3 9000 	str.w	r9, [r3]
   16ce0:	605a      	str	r2, [r3, #4]
	if (timeout) {
   16ce2:	f1bb 0f00 	cmp.w	fp, #0
   16ce6:	d138      	bne.n	16d5a <ull_filter_rpa_update+0x152>
}
   16ce8:	b007      	add	sp, #28
   16cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   16cee:	a902      	add	r1, sp, #8
   16cf0:	f1a6 0017 	sub.w	r0, r6, #23
   16cf4:	f008 fc91 	bl	1f61a <bt_rpa_create>
				LL_ASSERT(!err);
   16cf8:	2800      	cmp	r0, #0
   16cfa:	d154      	bne.n	16da6 <ull_filter_rpa_update+0x19e>
				rl[i].local_rpa = &rpa;
   16cfc:	ab02      	add	r3, sp, #8
   16cfe:	f8c6 3006 	str.w	r3, [r6, #6]
   16d02:	4619      	mov	r1, r3
   16d04:	2206      	movs	r2, #6
   16d06:	4640      	mov	r0, r8
   16d08:	f008 fbe6 	bl	1f4d8 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   16d0c:	f8c6 8006 	str.w	r8, [r6, #6]
   16d10:	e7d1      	b.n	16cb6 <ull_filter_rpa_update+0xae>
	psrc += length - 1;
   16d12:	f816 3c07 	ldrb.w	r3, [r6, #-7]
   16d16:	4a2e      	ldr	r2, [pc, #184]	; (16dd0 <ull_filter_rpa_update+0x1c8>)
   16d18:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   16d1c:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   16d1e:	f10d 0307 	add.w	r3, sp, #7
   16d22:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   16d26:	f812 1901 	ldrb.w	r1, [r2], #-1
   16d2a:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   16d2e:	4283      	cmp	r3, r0
   16d30:	d1f9      	bne.n	16d26 <ull_filter_rpa_update+0x11e>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   16d32:	4631      	mov	r1, r6
   16d34:	a802      	add	r0, sp, #8
   16d36:	f008 fc70 	bl	1f61a <bt_rpa_create>
				LL_ASSERT(!err);
   16d3a:	2800      	cmp	r0, #0
   16d3c:	d0b6      	beq.n	16cac <ull_filter_rpa_update+0xa4>
   16d3e:	4a25      	ldr	r2, [pc, #148]	; (16dd4 <ull_filter_rpa_update+0x1cc>)
   16d40:	4925      	ldr	r1, [pc, #148]	; (16dd8 <ull_filter_rpa_update+0x1d0>)
   16d42:	4826      	ldr	r0, [pc, #152]	; (16ddc <ull_filter_rpa_update+0x1d4>)
   16d44:	f240 2323 	movw	r3, #547	; 0x223
   16d48:	f006 f974 	bl	1d034 <printk>
   16d4c:	4040      	eors	r0, r0
   16d4e:	f380 8811 	msr	BASEPRI, r0
   16d52:	f04f 0003 	mov.w	r0, #3
   16d56:	df02      	svc	2
   16d58:	e7a8      	b.n	16cac <ull_filter_rpa_update+0xa4>
		adv = ull_adv_is_enabled_get(0);
   16d5a:	2000      	movs	r0, #0
   16d5c:	f7fb ff62 	bl	12c24 <ull_adv_is_enabled_get>
		if (adv) {
   16d60:	4604      	mov	r4, r0
   16d62:	2800      	cmp	r0, #0
   16d64:	d0c0      	beq.n	16ce8 <ull_filter_rpa_update+0xe0>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   16d66:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
   16d6a:	075b      	lsls	r3, r3, #29
   16d6c:	d5bc      	bpl.n	16ce8 <ull_filter_rpa_update+0xe0>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   16d6e:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   16d72:	2b07      	cmp	r3, #7
   16d74:	d8b8      	bhi.n	16ce8 <ull_filter_rpa_update+0xe0>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   16d76:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   16d7a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   16d7e:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   16d80:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   16d82:	3028      	adds	r0, #40	; 0x28
   16d84:	f001 f86e 	bl	17e64 <lll_adv_pdu_alloc>
	memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   16d88:	7872      	ldrb	r2, [r6, #1]
   16d8a:	4605      	mov	r5, r0
   16d8c:	3202      	adds	r2, #2
   16d8e:	4631      	mov	r1, r6
   16d90:	f008 fba2 	bl	1f4d8 <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   16d94:	4629      	mov	r1, r5
   16d96:	4620      	mov	r0, r4
   16d98:	f7fb ffa2 	bl	12ce0 <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   16d9c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   16da0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   16da4:	e7a0      	b.n	16ce8 <ull_filter_rpa_update+0xe0>
				LL_ASSERT(!err);
   16da6:	4a0b      	ldr	r2, [pc, #44]	; (16dd4 <ull_filter_rpa_update+0x1cc>)
   16da8:	490b      	ldr	r1, [pc, #44]	; (16dd8 <ull_filter_rpa_update+0x1d0>)
   16daa:	480c      	ldr	r0, [pc, #48]	; (16ddc <ull_filter_rpa_update+0x1d4>)
   16dac:	f44f 730c 	mov.w	r3, #560	; 0x230
   16db0:	f006 f940 	bl	1d034 <printk>
   16db4:	4040      	eors	r0, r0
   16db6:	f380 8811 	msr	BASEPRI, r0
   16dba:	f04f 0003 	mov.w	r0, #3
   16dbe:	df02      	svc	2
   16dc0:	e79c      	b.n	16cfc <ull_filter_rpa_update+0xf4>
   16dc2:	bf00      	nop
   16dc4:	200013f8 	.word	0x200013f8
   16dc8:	20002760 	.word	0x20002760
   16dcc:	2000260a 	.word	0x2000260a
   16dd0:	2000256c 	.word	0x2000256c
   16dd4:	00023860 	.word	0x00023860
   16dd8:	0002334c 	.word	0x0002334c
   16ddc:	000230b4 	.word	0x000230b4
   16de0:	20002534 	.word	0x20002534

00016de4 <rpa_timeout>:
{
   16de4:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   16de6:	2001      	movs	r0, #1
   16de8:	f7ff ff0e 	bl	16c08 <ull_filter_rpa_update>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   16dec:	4a0a      	ldr	r2, [pc, #40]	; (16e18 <rpa_timeout+0x34>)
   16dee:	6812      	ldr	r2, [r2, #0]
   16df0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   16df4:	f240 30e7 	movw	r0, #999	; 0x3e7
   16df8:	2100      	movs	r1, #0
   16dfa:	fbe2 0103 	umlal	r0, r1, r2, r3
   16dfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16e02:	2300      	movs	r3, #0
   16e04:	f7e9 fe3a 	bl	a7c <__aeabi_uldivmod>
}
   16e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16e0c:	4602      	mov	r2, r0
   16e0e:	460b      	mov	r3, r1
	return k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   16e10:	4802      	ldr	r0, [pc, #8]	; (16e1c <rpa_timeout+0x38>)
   16e12:	4903      	ldr	r1, [pc, #12]	; (16e20 <rpa_timeout+0x3c>)
   16e14:	f005 bb9a 	b.w	1c54c <k_work_reschedule_for_queue>
   16e18:	20002760 	.word	0x20002760
   16e1c:	200015c0 	.word	0x200015c0
   16e20:	20001400 	.word	0x20001400

00016e24 <ull_filter_adva_get>:
{
   16e24:	b570      	push	{r4, r5, r6, lr}
	uint8_t idx = adv->lll.rl_idx;
   16e26:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   16e2a:	2c07      	cmp	r4, #7
   16e2c:	d810      	bhi.n	16e50 <ull_filter_adva_get+0x2c>
   16e2e:	4d10      	ldr	r5, [pc, #64]	; (16e70 <ull_filter_adva_get+0x4c>)
   16e30:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   16e34:	00a6      	lsls	r6, r4, #2
   16e36:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   16e3a:	071a      	lsls	r2, r3, #28
   16e3c:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   16e40:	d505      	bpl.n	16e4e <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[idx].rpas_ready);
   16e42:	079b      	lsls	r3, r3, #30
   16e44:	d506      	bpl.n	16e54 <ull_filter_adva_get+0x30>
		return rl[idx].local_rpa->val;
   16e46:	4434      	add	r4, r6
   16e48:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   16e4c:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   16e4e:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   16e50:	2000      	movs	r0, #0
}
   16e52:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rl[idx].rpas_ready);
   16e54:	4a07      	ldr	r2, [pc, #28]	; (16e74 <ull_filter_adva_get+0x50>)
   16e56:	4908      	ldr	r1, [pc, #32]	; (16e78 <ull_filter_adva_get+0x54>)
   16e58:	4808      	ldr	r0, [pc, #32]	; (16e7c <ull_filter_adva_get+0x58>)
   16e5a:	f240 2356 	movw	r3, #598	; 0x256
   16e5e:	f006 f8e9 	bl	1d034 <printk>
   16e62:	4040      	eors	r0, r0
   16e64:	f380 8811 	msr	BASEPRI, r0
   16e68:	f04f 0003 	mov.w	r0, #3
   16e6c:	df02      	svc	2
   16e6e:	e7ea      	b.n	16e46 <ull_filter_adva_get+0x22>
   16e70:	200025ec 	.word	0x200025ec
   16e74:	00023860 	.word	0x00023860
   16e78:	000238c4 	.word	0x000238c4
   16e7c:	000230b4 	.word	0x000230b4

00016e80 <ull_filter_tgta_get>:
	uint8_t idx = adv->lll.rl_idx;
   16e80:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
	if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   16e84:	2b07      	cmp	r3, #7
   16e86:	d80d      	bhi.n	16ea4 <ull_filter_tgta_get+0x24>
   16e88:	4a07      	ldr	r2, [pc, #28]	; (16ea8 <ull_filter_tgta_get+0x28>)
   16e8a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   16e8e:	f812 1031 	ldrb.w	r1, [r2, r1, lsl #3]
   16e92:	f3c1 0080 	ubfx	r0, r1, #2, #1
   16e96:	0749      	lsls	r1, r1, #29
   16e98:	d505      	bpl.n	16ea6 <ull_filter_tgta_get+0x26>
		return rl[idx].peer_rpa.val;
   16e9a:	2028      	movs	r0, #40	; 0x28
   16e9c:	fb00 2003 	mla	r0, r0, r3, r2
   16ea0:	301e      	adds	r0, #30
   16ea2:	4770      	bx	lr
	return NULL;
   16ea4:	2000      	movs	r0, #0
}
   16ea6:	4770      	bx	lr
   16ea8:	200025ec 	.word	0x200025ec

00016eac <ull_filter_rl_find>:
{
   16eac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16eb0:	468b      	mov	fp, r1
	if (free) {
   16eb2:	4617      	mov	r7, r2
   16eb4:	b10a      	cbz	r2, 16eba <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   16eb6:	23ff      	movs	r3, #255	; 0xff
   16eb8:	7013      	strb	r3, [r2, #0]
   16eba:	4d1b      	ldr	r5, [pc, #108]	; (16f28 <ull_filter_rl_find+0x7c>)
{
   16ebc:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   16ebe:	f000 0a01 	and.w	sl, r0, #1
   16ec2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   16ec6:	e006      	b.n	16ed6 <ull_filter_rl_find+0x2a>
   16ec8:	4552      	cmp	r2, sl
   16eca:	d01f      	beq.n	16f0c <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16ecc:	3401      	adds	r4, #1
   16ece:	2c08      	cmp	r4, #8
   16ed0:	f105 0528 	add.w	r5, r5, #40	; 0x28
   16ed4:	d015      	beq.n	16f02 <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   16ed6:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   16eda:	fa5f f884 	uxtb.w	r8, r4
   16ede:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   16ee2:	07d9      	lsls	r1, r3, #31
   16ee4:	f3c3 1280 	ubfx	r2, r3, #6, #1
   16ee8:	d4ee      	bmi.n	16ec8 <ull_filter_rl_find+0x1c>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   16eea:	2f00      	cmp	r7, #0
   16eec:	d0ee      	beq.n	16ecc <ull_filter_rl_find+0x20>
   16eee:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16ef0:	3401      	adds	r4, #1
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   16ef2:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   16ef4:	bf08      	it	eq
   16ef6:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16efa:	2c08      	cmp	r4, #8
   16efc:	f105 0528 	add.w	r5, r5, #40	; 0x28
   16f00:	d1e9      	bne.n	16ed6 <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   16f02:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   16f06:	4640      	mov	r0, r8
   16f08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   16f0c:	4628      	mov	r0, r5
   16f0e:	2206      	movs	r2, #6
   16f10:	4659      	mov	r1, fp
   16f12:	f008 fad0 	bl	1f4b6 <memcmp>
   16f16:	2800      	cmp	r0, #0
   16f18:	d0f5      	beq.n	16f06 <ull_filter_rl_find+0x5a>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   16f1a:	2f00      	cmp	r7, #0
   16f1c:	d0d6      	beq.n	16ecc <ull_filter_rl_find+0x20>
   16f1e:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   16f22:	07db      	lsls	r3, r3, #31
   16f24:	d4d2      	bmi.n	16ecc <ull_filter_rl_find+0x20>
   16f26:	e7e2      	b.n	16eee <ull_filter_rl_find+0x42>
   16f28:	200025ed 	.word	0x200025ed

00016f2c <ll_rl_add>:
{
   16f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f30:	4680      	mov	r8, r0
   16f32:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   16f34:	2000      	movs	r0, #0
{
   16f36:	460e      	mov	r6, r1
   16f38:	4691      	mov	r9, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   16f3a:	f7fb fe81 	bl	12c40 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   16f3e:	2800      	cmp	r0, #0
   16f40:	d17d      	bne.n	1703e <ll_rl_add+0x112>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   16f42:	46c2      	mov	sl, r8
   16f44:	4604      	mov	r4, r0
   16f46:	f81a 0b01 	ldrb.w	r0, [sl], #1
   16f4a:	f10d 020f 	add.w	r2, sp, #15
   16f4e:	4651      	mov	r1, sl
   16f50:	f7ff ffac 	bl	16eac <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   16f54:	2807      	cmp	r0, #7
   16f56:	f240 80b5 	bls.w	170c4 <ll_rl_add+0x198>
	} else if (j >= ARRAY_SIZE(rl)) {
   16f5a:	f89d 700f 	ldrb.w	r7, [sp, #15]
   16f5e:	2f07      	cmp	r7, #7
   16f60:	f200 8084 	bhi.w	1706c <ll_rl_add+0x140>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   16f64:	eb07 0b87 	add.w	fp, r7, r7, lsl #2
   16f68:	4d58      	ldr	r5, [pc, #352]	; (170cc <ll_rl_add+0x1a0>)
   16f6a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   16f6e:	1c58      	adds	r0, r3, #1
   16f70:	2206      	movs	r2, #6
   16f72:	4651      	mov	r1, sl
   16f74:	4428      	add	r0, r5
   16f76:	9300      	str	r3, [sp, #0]
   16f78:	f008 faae 	bl	1f4d8 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   16f7c:	f898 3000 	ldrb.w	r3, [r8]
   16f80:	f815 103b 	ldrb.w	r1, [r5, fp, lsl #3]
   16f84:	465a      	mov	r2, fp
   16f86:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   16f8a:	f363 1186 	bfi	r1, r3, #6, #1
   16f8e:	f805 100b 	strb.w	r1, [r5, fp]
   16f92:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   16f96:	2110      	movs	r1, #16
   16f98:	4630      	mov	r0, r6
	rl[i].id_addr_type = id_addr->type & 0x1;
   16f9a:	9301      	str	r3, [sp, #4]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   16f9c:	f7f7 fa4e 	bl	e43c <mem_nz>
   16fa0:	f815 200b 	ldrb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   16fa4:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   16fa6:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   16faa:	4648      	mov	r0, r9
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   16fac:	f805 200b 	strb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   16fb0:	f7f7 fa44 	bl	e43c <mem_nz>
   16fb4:	f815 200b 	ldrb.w	r2, [r5, fp]
   16fb8:	f000 0001 	and.w	r0, r0, #1
   16fbc:	f360 02c3 	bfi	r2, r0, #3, #1
   16fc0:	f805 200b 	strb.w	r2, [r5, fp]
	if (rl[i].pirk) {
   16fc4:	0752      	lsls	r2, r2, #29
	rl[i].id_addr_type = id_addr->type & 0x1;
   16fc6:	ea4f 0b87 	mov.w	fp, r7, lsl #2
	if (rl[i].pirk) {
   16fca:	d453      	bmi.n	17074 <ll_rl_add+0x148>
	if (rl[i].lirk) {
   16fcc:	2800      	cmp	r0, #0
   16fce:	d16b      	bne.n	170a8 <ll_rl_add+0x17c>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   16fd0:	9800      	ldr	r0, [sp, #0]
   16fd2:	4e3f      	ldr	r6, [pc, #252]	; (170d0 <ll_rl_add+0x1a4>)
   16fd4:	3018      	adds	r0, #24
   16fd6:	2206      	movs	r2, #6
   16fd8:	2100      	movs	r1, #0
   16fda:	4428      	add	r0, r5
   16fdc:	f008 faa7 	bl	1f52e <memset>
	rl[i].dev = 0U;
   16fe0:	eb0b 0207 	add.w	r2, fp, r7
	rl[i].rpas_ready = 0U;
   16fe4:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   16fe8:	f021 0112 	bic.w	r1, r1, #18
   16fec:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   16ff0:	f898 9000 	ldrb.w	r9, [r8]
	for (i = 0; i < WL_SIZE; i++) {
   16ff4:	f1a6 0802 	sub.w	r8, r6, #2
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   16ff8:	f009 0901 	and.w	r9, r9, #1
   16ffc:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
   17000:	07d3      	lsls	r3, r2, #31
   17002:	f3c2 0140 	ubfx	r1, r2, #1, #1
   17006:	d501      	bpl.n	1700c <ll_rl_add+0xe0>
   17008:	4549      	cmp	r1, r9
   1700a:	d01c      	beq.n	17046 <ll_rl_add+0x11a>
	for (i = 0; i < WL_SIZE; i++) {
   1700c:	3401      	adds	r4, #1
   1700e:	2c08      	cmp	r4, #8
   17010:	f106 0608 	add.w	r6, r6, #8
   17014:	d1f2      	bne.n	16ffc <ll_rl_add+0xd0>
		rl[i].wl = 0U;
   17016:	eb0b 0207 	add.w	r2, fp, r7
   1701a:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   1701e:	f36f 1145 	bfc	r1, #5, #1
   17022:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	rl[i].taken = 1U;
   17026:	eb0b 0307 	add.w	r3, fp, r7
	return 0;
   1702a:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   1702c:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   17030:	f042 0201 	orr.w	r2, r2, #1
   17034:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]
}
   17038:	b005      	add	sp, #20
   1703a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1703e:	200c      	movs	r0, #12
}
   17040:	b005      	add	sp, #20
   17042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   17046:	2206      	movs	r2, #6
   17048:	4630      	mov	r0, r6
   1704a:	4651      	mov	r1, sl
   1704c:	f008 fa33 	bl	1f4b6 <memcmp>
   17050:	2800      	cmp	r0, #0
   17052:	d1db      	bne.n	1700c <ll_rl_add+0xe0>
		rl[i].wl = 1U;
   17054:	eb0b 0207 	add.w	r2, fp, r7
		wl[j].rl_idx = i;
   17058:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
		rl[i].wl = 1U;
   1705c:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
		wl[j].rl_idx = i;
   17060:	7067      	strb	r7, [r4, #1]
		rl[i].wl = 1U;
   17062:	f041 0120 	orr.w	r1, r1, #32
   17066:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
   1706a:	e7dc      	b.n	17026 <ll_rl_add+0xfa>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1706c:	2007      	movs	r0, #7
}
   1706e:	b005      	add	sp, #20
   17070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   17074:	4b17      	ldr	r3, [pc, #92]	; (170d4 <ll_rl_add+0x1a8>)
   17076:	9a01      	ldr	r2, [sp, #4]
   17078:	7819      	ldrb	r1, [r3, #0]
		peer_irk_rl_ids[peer_irk_count] = i;
   1707a:	f8df c060 	ldr.w	ip, [pc, #96]	; 170dc <ll_rl_add+0x1b0>
		rl[i].pirk_idx = peer_irk_count;
   1707e:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   17080:	4a15      	ldr	r2, [pc, #84]	; (170d8 <ll_rl_add+0x1ac>)
   17082:	f80c 7001 	strb.w	r7, [ip, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   17086:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   1708a:	3101      	adds	r1, #1
	psrc += length - 1;
   1708c:	f106 020f 	add.w	r2, r6, #15
   17090:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   17092:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   17096:	3e01      	subs	r6, #1
		*pdst++ = *psrc--;
   17098:	f812 1901 	ldrb.w	r1, [r2], #-1
   1709c:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   170a0:	42b2      	cmp	r2, r6
   170a2:	d1f9      	bne.n	17098 <ll_rl_add+0x16c>
	if (rl[i].lirk) {
   170a4:	2800      	cmp	r0, #0
   170a6:	d093      	beq.n	16fd0 <ll_rl_add+0xa4>
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   170a8:	9b00      	ldr	r3, [sp, #0]
   170aa:	1dd8      	adds	r0, r3, #7
   170ac:	4649      	mov	r1, r9
   170ae:	2210      	movs	r2, #16
   170b0:	4428      	add	r0, r5
   170b2:	f008 fa11 	bl	1f4d8 <memcpy>
		rl[i].local_rpa = NULL;
   170b6:	eb0b 0207 	add.w	r2, fp, r7
   170ba:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   170be:	2100      	movs	r1, #0
   170c0:	6251      	str	r1, [r2, #36]	; 0x24
   170c2:	e785      	b.n	16fd0 <ll_rl_add+0xa4>
		return BT_HCI_ERR_INVALID_PARAM;
   170c4:	2012      	movs	r0, #18
}
   170c6:	b005      	add	sp, #20
   170c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170cc:	200025ec 	.word	0x200025ec
   170d0:	20002766 	.word	0x20002766
   170d4:	20003561 	.word	0x20003561
   170d8:	2000256c 	.word	0x2000256c
   170dc:	20002564 	.word	0x20002564

000170e0 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   170e0:	2807      	cmp	r0, #7
   170e2:	d807      	bhi.n	170f4 <ull_filter_lll_lrpa_used+0x14>
   170e4:	4b04      	ldr	r3, [pc, #16]	; (170f8 <ull_filter_lll_lrpa_used+0x18>)
   170e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   170ea:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   170ee:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   170f2:	4770      	bx	lr
   170f4:	2000      	movs	r0, #0
}
   170f6:	4770      	bx	lr
   170f8:	200025ec 	.word	0x200025ec

000170fc <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   170fc:	4b02      	ldr	r3, [pc, #8]	; (17108 <ull_filter_lll_irks_get+0xc>)
   170fe:	781b      	ldrb	r3, [r3, #0]
   17100:	7003      	strb	r3, [r0, #0]
}
   17102:	4802      	ldr	r0, [pc, #8]	; (1710c <ull_filter_lll_irks_get+0x10>)
   17104:	4770      	bx	lr
   17106:	bf00      	nop
   17108:	20003561 	.word	0x20003561
   1710c:	2000256c 	.word	0x2000256c

00017110 <ull_filter_lll_rl_irk_idx>:
{
   17110:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   17112:	4b20      	ldr	r3, [pc, #128]	; (17194 <ull_filter_lll_rl_irk_idx+0x84>)
   17114:	781b      	ldrb	r3, [r3, #0]
   17116:	4283      	cmp	r3, r0
{
   17118:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1711a:	d90c      	bls.n	17136 <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   1711c:	4b1e      	ldr	r3, [pc, #120]	; (17198 <ull_filter_lll_rl_irk_idx+0x88>)
   1711e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   17120:	2c07      	cmp	r4, #7
   17122:	d819      	bhi.n	17158 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   17124:	4b1d      	ldr	r3, [pc, #116]	; (1719c <ull_filter_lll_rl_irk_idx+0x8c>)
   17126:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1712a:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1712e:	07db      	lsls	r3, r3, #31
   17130:	d520      	bpl.n	17174 <ull_filter_lll_rl_irk_idx+0x64>
}
   17132:	4620      	mov	r0, r4
   17134:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   17136:	4a1a      	ldr	r2, [pc, #104]	; (171a0 <ull_filter_lll_rl_irk_idx+0x90>)
   17138:	491a      	ldr	r1, [pc, #104]	; (171a4 <ull_filter_lll_rl_irk_idx+0x94>)
   1713a:	481b      	ldr	r0, [pc, #108]	; (171a8 <ull_filter_lll_rl_irk_idx+0x98>)
   1713c:	f240 23c6 	movw	r3, #710	; 0x2c6
   17140:	f005 ff78 	bl	1d034 <printk>
   17144:	4040      	eors	r0, r0
   17146:	f380 8811 	msr	BASEPRI, r0
   1714a:	f04f 0003 	mov.w	r0, #3
   1714e:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   17150:	4b11      	ldr	r3, [pc, #68]	; (17198 <ull_filter_lll_rl_irk_idx+0x88>)
   17152:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   17154:	2c07      	cmp	r4, #7
   17156:	d9e5      	bls.n	17124 <ull_filter_lll_rl_irk_idx+0x14>
   17158:	4a11      	ldr	r2, [pc, #68]	; (171a0 <ull_filter_lll_rl_irk_idx+0x90>)
   1715a:	4914      	ldr	r1, [pc, #80]	; (171ac <ull_filter_lll_rl_irk_idx+0x9c>)
   1715c:	4812      	ldr	r0, [pc, #72]	; (171a8 <ull_filter_lll_rl_irk_idx+0x98>)
   1715e:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   17162:	f005 ff67 	bl	1d034 <printk>
   17166:	4040      	eors	r0, r0
   17168:	f380 8811 	msr	BASEPRI, r0
   1716c:	f04f 0003 	mov.w	r0, #3
   17170:	df02      	svc	2
   17172:	e7d7      	b.n	17124 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   17174:	4a0a      	ldr	r2, [pc, #40]	; (171a0 <ull_filter_lll_rl_irk_idx+0x90>)
   17176:	490e      	ldr	r1, [pc, #56]	; (171b0 <ull_filter_lll_rl_irk_idx+0xa0>)
   17178:	480b      	ldr	r0, [pc, #44]	; (171a8 <ull_filter_lll_rl_irk_idx+0x98>)
   1717a:	f240 23c9 	movw	r3, #713	; 0x2c9
   1717e:	f005 ff59 	bl	1d034 <printk>
   17182:	4040      	eors	r0, r0
   17184:	f380 8811 	msr	BASEPRI, r0
   17188:	f04f 0003 	mov.w	r0, #3
   1718c:	df02      	svc	2
}
   1718e:	4620      	mov	r0, r4
   17190:	bd10      	pop	{r4, pc}
   17192:	bf00      	nop
   17194:	20003561 	.word	0x20003561
   17198:	20002564 	.word	0x20002564
   1719c:	200025ec 	.word	0x200025ec
   171a0:	00023860 	.word	0x00023860
   171a4:	00023a44 	.word	0x00023a44
   171a8:	000230b4 	.word	0x000230b4
   171ac:	00023a64 	.word	0x00023a64
   171b0:	00023a38 	.word	0x00023a38

000171b4 <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   171b4:	2807      	cmp	r0, #7
   171b6:	d823      	bhi.n	17200 <ull_filter_lll_irk_whitelisted+0x4c>
{
   171b8:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   171ba:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   171be:	4e11      	ldr	r6, [pc, #68]	; (17204 <ull_filter_lll_irk_whitelisted+0x50>)
   171c0:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   171c4:	07db      	lsls	r3, r3, #31
   171c6:	4604      	mov	r4, r0
   171c8:	ea4f 0580 	mov.w	r5, r0, lsl #2
   171cc:	d505      	bpl.n	171da <ull_filter_lll_irk_whitelisted+0x26>
	return rl[rl_idx].wl;
   171ce:	442c      	add	r4, r5
   171d0:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   171d4:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   171d8:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   171da:	4a0b      	ldr	r2, [pc, #44]	; (17208 <ull_filter_lll_irk_whitelisted+0x54>)
   171dc:	490b      	ldr	r1, [pc, #44]	; (1720c <ull_filter_lll_irk_whitelisted+0x58>)
   171de:	480c      	ldr	r0, [pc, #48]	; (17210 <ull_filter_lll_irk_whitelisted+0x5c>)
   171e0:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   171e4:	f005 ff26 	bl	1d034 <printk>
   171e8:	4040      	eors	r0, r0
   171ea:	f380 8811 	msr	BASEPRI, r0
   171ee:	f04f 0003 	mov.w	r0, #3
   171f2:	df02      	svc	2
	return rl[rl_idx].wl;
   171f4:	442c      	add	r4, r5
   171f6:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   171fa:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   171fe:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   17200:	2000      	movs	r0, #0
}
   17202:	4770      	bx	lr
   17204:	200025ec 	.word	0x200025ec
   17208:	00023860 	.word	0x00023860
   1720c:	000238b0 	.word	0x000238b0
   17210:	000230b4 	.word	0x000230b4

00017214 <ull_filter_lll_get>:
		return &wl_filter;
   17214:	4a03      	ldr	r2, [pc, #12]	; (17224 <ull_filter_lll_get+0x10>)
   17216:	4b04      	ldr	r3, [pc, #16]	; (17228 <ull_filter_lll_get+0x14>)
}
   17218:	2800      	cmp	r0, #0
   1721a:	bf0c      	ite	eq
   1721c:	4610      	moveq	r0, r2
   1721e:	4618      	movne	r0, r3
   17220:	4770      	bx	lr
   17222:	bf00      	nop
   17224:	2000272c 	.word	0x2000272c
   17228:	200027a4 	.word	0x200027a4

0001722c <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   1722c:	7813      	ldrb	r3, [r2, #0]
   1722e:	2bff      	cmp	r3, #255	; 0xff
   17230:	d11b      	bne.n	1726a <ull_filter_lll_rl_addr_allowed+0x3e>
{
   17232:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17236:	4d19      	ldr	r5, [pc, #100]	; (1729c <ull_filter_lll_rl_addr_allowed+0x70>)
   17238:	4604      	mov	r4, r0
   1723a:	46ae      	mov	lr, r5
	if (*rl_idx != FILTER_IDX_NONE) {
   1723c:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1723e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   17242:	b2df      	uxtb	r7, r3
   17244:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   17248:	f01c 0001 	ands.w	r0, ip, #1
   1724c:	ea4f 0683 	mov.w	r6, r3, lsl #2
   17250:	d003      	beq.n	1725a <ull_filter_lll_rl_addr_allowed+0x2e>
   17252:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   17256:	45a4      	cmp	ip, r4
   17258:	d009      	beq.n	1726e <ull_filter_lll_rl_addr_allowed+0x42>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1725a:	3301      	adds	r3, #1
   1725c:	2b08      	cmp	r3, #8
   1725e:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   17262:	d1ec      	bne.n	1723e <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   17264:	2001      	movs	r0, #1
}
   17266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
   1726a:	2001      	movs	r0, #1
}
   1726c:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1726e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   17272:	46f4      	mov	ip, lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   17274:	f10e 0b06 	add.w	fp, lr, #6
				if (addr[j] != id_addr[j]) {
   17278:	f81c af01 	ldrb.w	sl, [ip, #1]!
   1727c:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   17280:	45ca      	cmp	sl, r9
   17282:	d1ea      	bne.n	1725a <ull_filter_lll_rl_addr_allowed+0x2e>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   17284:	45dc      	cmp	ip, fp
   17286:	d1f7      	bne.n	17278 <ull_filter_lll_rl_addr_allowed+0x4c>
				return !rl[i].pirk || rl[i].dev;
   17288:	4433      	add	r3, r6
				*rl_idx = i;
   1728a:	7017      	strb	r7, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   1728c:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   17290:	075a      	lsls	r2, r3, #29
   17292:	d5e8      	bpl.n	17266 <ull_filter_lll_rl_addr_allowed+0x3a>
   17294:	f3c3 1000 	ubfx	r0, r3, #4, #1
   17298:	e7e5      	b.n	17266 <ull_filter_lll_rl_addr_allowed+0x3a>
   1729a:	bf00      	nop
   1729c:	200025ec 	.word	0x200025ec

000172a0 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   172a0:	4b02      	ldr	r3, [pc, #8]	; (172ac <ull_filter_lll_rl_enabled+0xc>)
   172a2:	7818      	ldrb	r0, [r3, #0]
}
   172a4:	3800      	subs	r0, #0
   172a6:	bf18      	it	ne
   172a8:	2001      	movne	r0, #1
   172aa:	4770      	bx	lr
   172ac:	20003562 	.word	0x20003562

000172b0 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   172b0:	4668      	mov	r0, sp
   172b2:	f020 0107 	bic.w	r1, r0, #7
   172b6:	468d      	mov	sp, r1
   172b8:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   172ba:	f001 ff77 	bl	191ac <isr_radio>

	ISR_DIRECT_PM();
   172be:	f7ef fd67 	bl	6d90 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   172c2:	f7f0 f8bd 	bl	7440 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   172c6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   172ca:	4685      	mov	sp, r0
   172cc:	4770      	bx	lr
   172ce:	bf00      	nop

000172d0 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   172d0:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   172d2:	4b09      	ldr	r3, [pc, #36]	; (172f8 <rtc0_nrf5_isr+0x28>)
   172d4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   172d8:	b93a      	cbnz	r2, 172ea <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   172da:	2001      	movs	r0, #1
   172dc:	f7f7 f99a 	bl	e614 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   172e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   172e4:	2002      	movs	r0, #2
   172e6:	f7f7 b995 	b.w	e614 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   172ea:	2000      	movs	r0, #0
   172ec:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   172f0:	f7f8 fa06 	bl	f700 <ticker_trigger>
   172f4:	e7f1      	b.n	172da <rtc0_nrf5_isr+0xa>
   172f6:	bf00      	nop
   172f8:	4000b000 	.word	0x4000b000

000172fc <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   172fc:	2000      	movs	r0, #0
   172fe:	f7f7 b989 	b.w	e614 <mayfly_run>
   17302:	bf00      	nop

00017304 <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   17304:	f002 b86e 	b.w	193e4 <radio_status_reset>

00017308 <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   17308:	2801      	cmp	r0, #1
   1730a:	d800      	bhi.n	1730e <ticker_stop_op_cb+0x6>
   1730c:	4770      	bx	lr
{
   1730e:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   17310:	4a06      	ldr	r2, [pc, #24]	; (1732c <ticker_stop_op_cb+0x24>)
   17312:	4907      	ldr	r1, [pc, #28]	; (17330 <ticker_stop_op_cb+0x28>)
   17314:	4807      	ldr	r0, [pc, #28]	; (17334 <ticker_stop_op_cb+0x2c>)
   17316:	f240 23ea 	movw	r3, #746	; 0x2ea
   1731a:	f005 fe8b 	bl	1d034 <printk>
   1731e:	4040      	eors	r0, r0
   17320:	f380 8811 	msr	BASEPRI, r0
   17324:	f04f 0003 	mov.w	r0, #3
   17328:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1732a:	bd08      	pop	{r3, pc}
   1732c:	00023a80 	.word	0x00023a80
   17330:	00023ac8 	.word	0x00023ac8
   17334:	000230b4 	.word	0x000230b4

00017338 <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   17338:	2801      	cmp	r0, #1
   1733a:	d800      	bhi.n	1733e <ticker_start_op_cb+0x6>
   1733c:	4770      	bx	lr
{
   1733e:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   17340:	4a06      	ldr	r2, [pc, #24]	; (1735c <ticker_start_op_cb+0x24>)
   17342:	4907      	ldr	r1, [pc, #28]	; (17360 <ticker_start_op_cb+0x28>)
   17344:	4807      	ldr	r0, [pc, #28]	; (17364 <ticker_start_op_cb+0x2c>)
   17346:	f240 23f5 	movw	r3, #757	; 0x2f5
   1734a:	f005 fe73 	bl	1d034 <printk>
   1734e:	4040      	eors	r0, r0
   17350:	f380 8811 	msr	BASEPRI, r0
   17354:	f04f 0003 	mov.w	r0, #3
   17358:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1735a:	bd08      	pop	{r3, pc}
   1735c:	00023a80 	.word	0x00023a80
   17360:	00023ac8 	.word	0x00023ac8
   17364:	000230b4 	.word	0x000230b4

00017368 <preempt_ticker_cb>:
{
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17368:	2200      	movs	r2, #0
{
   1736a:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1736c:	4611      	mov	r1, r2
   1736e:	4b0a      	ldr	r3, [pc, #40]	; (17398 <preempt_ticker_cb+0x30>)
   17370:	2001      	movs	r0, #1
   17372:	f7f7 f8f5 	bl	e560 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   17376:	b900      	cbnz	r0, 1737a <preempt_ticker_cb+0x12>
}
   17378:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   1737a:	4a08      	ldr	r2, [pc, #32]	; (1739c <preempt_ticker_cb+0x34>)
   1737c:	4908      	ldr	r1, [pc, #32]	; (173a0 <preempt_ticker_cb+0x38>)
   1737e:	4809      	ldr	r0, [pc, #36]	; (173a4 <preempt_ticker_cb+0x3c>)
   17380:	f240 3321 	movw	r3, #801	; 0x321
   17384:	f005 fe56 	bl	1d034 <printk>
   17388:	4040      	eors	r0, r0
   1738a:	f380 8811 	msr	BASEPRI, r0
   1738e:	f04f 0003 	mov.w	r0, #3
   17392:	df02      	svc	2
}
   17394:	bd08      	pop	{r3, pc}
   17396:	bf00      	nop
   17398:	2000054c 	.word	0x2000054c
   1739c:	00023a80 	.word	0x00023a80
   173a0:	00023448 	.word	0x00023448
   173a4:	000230b4 	.word	0x000230b4

000173a8 <preempt_ticker_start.isra.0>:
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   173a8:	b530      	push	{r4, r5, lr}
	evt = HDR_LLL2EVT(prepare_param->param);
   173aa:	680b      	ldr	r3, [r1, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   173ac:	4c16      	ldr	r4, [pc, #88]	; (17408 <preempt_ticker_start.isra.0+0x60>)
   173ae:	4917      	ldr	r1, [pc, #92]	; (1740c <preempt_ticker_start.isra.0+0x64>)
   173b0:	2200      	movs	r2, #0
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   173b2:	b08b      	sub	sp, #44	; 0x2c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   173b4:	e9cd 4207 	strd	r4, r2, [sp, #28]
   173b8:	e9cd 1205 	strd	r1, r2, [sp, #20]
   173bc:	e9cd 2203 	strd	r2, r2, [sp, #12]
   173c0:	e9cd 2201 	strd	r2, r2, [sp, #4]
	preempt_to = MAX(evt->ticks_active_to_start,
   173c4:	e9d3 5400 	ldrd	r5, r4, [r3]
   173c8:	6899      	ldr	r1, [r3, #8]
   173ca:	42a5      	cmp	r5, r4
   173cc:	bf2c      	ite	cs
   173ce:	ebc1 0105 	rsbcs	r1, r1, r5
   173d2:	ebc1 0104 	rsbcc	r1, r1, r4
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   173d6:	4603      	mov	r3, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   173d8:	9100      	str	r1, [sp, #0]
   173da:	4610      	mov	r0, r2
   173dc:	4611      	mov	r1, r2
   173de:	f7f8 f9ff 	bl	f7e0 <ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   173e2:	2802      	cmp	r0, #2
   173e4:	d801      	bhi.n	173ea <preempt_ticker_start.isra.0+0x42>
}
   173e6:	b00b      	add	sp, #44	; 0x2c
   173e8:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   173ea:	4a09      	ldr	r2, [pc, #36]	; (17410 <preempt_ticker_start.isra.0+0x68>)
   173ec:	4909      	ldr	r1, [pc, #36]	; (17414 <preempt_ticker_start.isra.0+0x6c>)
   173ee:	480a      	ldr	r0, [pc, #40]	; (17418 <preempt_ticker_start.isra.0+0x70>)
   173f0:	f240 3313 	movw	r3, #787	; 0x313
   173f4:	f005 fe1e 	bl	1d034 <printk>
   173f8:	4040      	eors	r0, r0
   173fa:	f380 8811 	msr	BASEPRI, r0
   173fe:	f04f 0003 	mov.w	r0, #3
   17402:	df02      	svc	2
}
   17404:	b00b      	add	sp, #44	; 0x2c
   17406:	bd30      	pop	{r4, r5, pc}
   17408:	00017339 	.word	0x00017339
   1740c:	00017369 	.word	0x00017369
   17410:	00023a80 	.word	0x00023a80
   17414:	00023ae8 	.word	0x00023ae8
   17418:	000230b4 	.word	0x000230b4

0001741c <prepare.constprop.0>:
static int prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
   1741c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17420:	b085      	sub	sp, #20
   17422:	4604      	mov	r4, r0
   17424:	461f      	mov	r7, r3
	p = ull_prepare_dequeue_iter(&idx);
   17426:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   1742a:	23ff      	movs	r3, #255	; 0xff
static int prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
   1742c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   17430:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
	idx = UINT8_MAX;
   17434:	f88d 300f 	strb.w	r3, [sp, #15]
static int prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
   17438:	460d      	mov	r5, r1
   1743a:	4616      	mov	r6, r2
	p = ull_prepare_dequeue_iter(&idx);
   1743c:	f7fa ff4a 	bl	122d4 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   17440:	b918      	cbnz	r0, 1744a <prepare.constprop.0+0x2e>
   17442:	e01e      	b.n	17482 <prepare.constprop.0+0x66>
		p = ull_prepare_dequeue_iter(&idx);
   17444:	f7fa ff46 	bl	122d4 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   17448:	b1d8      	cbz	r0, 17482 <prepare.constprop.0+0x66>
   1744a:	f890 3020 	ldrb.w	r3, [r0, #32]
   1744e:	079b      	lsls	r3, r3, #30
		p = ull_prepare_dequeue_iter(&idx);
   17450:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   17454:	d1f6      	bne.n	17444 <prepare.constprop.0+0x28>
	    event.curr.abort_cb ||
   17456:	4b2e      	ldr	r3, [pc, #184]	; (17510 <prepare.constprop.0+0xf4>)
	if ((!is_dequeue && !is_done_sync()) ||
   17458:	689a      	ldr	r2, [r3, #8]
   1745a:	b9aa      	cbnz	r2, 17488 <prepare.constprop.0+0x6c>
	    (p && is_resume)) {
   1745c:	f1b9 0f00 	cmp.w	r9, #0
   17460:	d036      	beq.n	174d0 <prepare.constprop.0+0xb4>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   17462:	2201      	movs	r2, #1
   17464:	9201      	str	r2, [sp, #4]
   17466:	9700      	str	r7, [sp, #0]
   17468:	4633      	mov	r3, r6
   1746a:	4629      	mov	r1, r5
   1746c:	4620      	mov	r0, r4
   1746e:	4642      	mov	r2, r8
   17470:	f7fa feec 	bl	1224c <ull_prepare_enqueue>
		LL_ASSERT(!err);
   17474:	b9d8      	cbnz	r0, 174ae <prepare.constprop.0+0x92>
		return -EINPROGRESS;
   17476:	f06f 0443 	mvn.w	r4, #67	; 0x43
}
   1747a:	4620      	mov	r0, r4
   1747c:	b005      	add	sp, #20
   1747e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    event.curr.abort_cb ||
   17482:	4b23      	ldr	r3, [pc, #140]	; (17510 <prepare.constprop.0+0xf4>)
	if ((!is_dequeue && !is_done_sync()) ||
   17484:	689a      	ldr	r2, [r3, #8]
   17486:	b31a      	cbz	r2, 174d0 <prepare.constprop.0+0xb4>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   17488:	e9cd 7900 	strd	r7, r9, [sp]
   1748c:	4633      	mov	r3, r6
   1748e:	4629      	mov	r1, r5
   17490:	4620      	mov	r0, r4
   17492:	4642      	mov	r2, r8
   17494:	f7fa feda 	bl	1224c <ull_prepare_enqueue>
		LL_ASSERT(!err);
   17498:	b948      	cbnz	r0, 174ae <prepare.constprop.0+0x92>
		if (is_resume) {
   1749a:	f1b9 0f00 	cmp.w	r9, #0
   1749e:	d1ea      	bne.n	17476 <prepare.constprop.0+0x5a>
		preempt_ticker_start(prepare_param);
   174a0:	f8d8 100c 	ldr.w	r1, [r8, #12]
   174a4:	f8d8 0000 	ldr.w	r0, [r8]
   174a8:	f7ff ff7e 	bl	173a8 <preempt_ticker_start.isra.0>
   174ac:	e7e3      	b.n	17476 <prepare.constprop.0+0x5a>
		LL_ASSERT(!err);
   174ae:	4a19      	ldr	r2, [pc, #100]	; (17514 <prepare.constprop.0+0xf8>)
   174b0:	4919      	ldr	r1, [pc, #100]	; (17518 <prepare.constprop.0+0xfc>)
   174b2:	481a      	ldr	r0, [pc, #104]	; (1751c <prepare.constprop.0+0x100>)
   174b4:	f240 238f 	movw	r3, #655	; 0x28f
   174b8:	f005 fdbc 	bl	1d034 <printk>
   174bc:	4040      	eors	r0, r0
   174be:	f380 8811 	msr	BASEPRI, r0
   174c2:	f04f 0003 	mov.w	r0, #3
   174c6:	df02      	svc	2
		if (is_resume) {
   174c8:	f1b9 0f00 	cmp.w	r9, #0
   174cc:	d1d3      	bne.n	17476 <prepare.constprop.0+0x5a>
   174ce:	e7e7      	b.n	174a0 <prepare.constprop.0+0x84>
	event.curr.param = prepare_param->param;
   174d0:	f8d8 200c 	ldr.w	r2, [r8, #12]
   174d4:	601a      	str	r2, [r3, #0]
	event.curr.abort_cb = abort_cb;
   174d6:	e9c3 4501 	strd	r4, r5, [r3, #4]
	err = prepare_cb(prepare_param);
   174da:	4640      	mov	r0, r8
   174dc:	47b0      	blx	r6
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   174de:	2200      	movs	r2, #0
   174e0:	4b0f      	ldr	r3, [pc, #60]	; (17520 <prepare.constprop.0+0x104>)
   174e2:	9200      	str	r2, [sp, #0]
	err = prepare_cb(prepare_param);
   174e4:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   174e6:	4611      	mov	r1, r2
   174e8:	4610      	mov	r0, r2
   174ea:	f7f8 fa03 	bl	f8f4 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   174ee:	2802      	cmp	r0, #2
   174f0:	d9c3      	bls.n	1747a <prepare.constprop.0+0x5e>
   174f2:	4a08      	ldr	r2, [pc, #32]	; (17514 <prepare.constprop.0+0xf8>)
   174f4:	490b      	ldr	r1, [pc, #44]	; (17524 <prepare.constprop.0+0x108>)
   174f6:	4809      	ldr	r0, [pc, #36]	; (1751c <prepare.constprop.0+0x100>)
   174f8:	f240 23c9 	movw	r3, #713	; 0x2c9
   174fc:	f005 fd9a 	bl	1d034 <printk>
   17500:	4040      	eors	r0, r0
   17502:	f380 8811 	msr	BASEPRI, r0
   17506:	f04f 0003 	mov.w	r0, #3
   1750a:	df02      	svc	2
   1750c:	e7b5      	b.n	1747a <prepare.constprop.0+0x5e>
   1750e:	bf00      	nop
   17510:	200027dc 	.word	0x200027dc
   17514:	00023a80 	.word	0x00023a80
   17518:	0002334c 	.word	0x0002334c
   1751c:	000230b4 	.word	0x000230b4
   17520:	00017309 	.word	0x00017309
   17524:	00023ae8 	.word	0x00023ae8

00017528 <preempt>:

static void preempt(void *param)
{
   17528:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	int resume_prio;
	uint8_t idx;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
   1752a:	4e4c      	ldr	r6, [pc, #304]	; (1765c <preempt+0x134>)
   1752c:	68b3      	ldr	r3, [r6, #8]
{
   1752e:	b08b      	sub	sp, #44	; 0x2c
	if (!event.curr.abort_cb || !event.curr.param) {
   17530:	b1b3      	cbz	r3, 17560 <preempt+0x38>
   17532:	6833      	ldr	r3, [r6, #0]
   17534:	b1a3      	cbz	r3, 17560 <preempt+0x38>
		return;
	}

	idx = UINT8_MAX;
   17536:	23ff      	movs	r3, #255	; 0xff
	next = ull_prepare_dequeue_iter(&idx);
   17538:	f10d 000e 	add.w	r0, sp, #14
	idx = UINT8_MAX;
   1753c:	f88d 300e 	strb.w	r3, [sp, #14]
	next = ull_prepare_dequeue_iter(&idx);
   17540:	f7fa fec8 	bl	122d4 <ull_prepare_dequeue_iter>
	if (!next) {
   17544:	4604      	mov	r4, r0
   17546:	b158      	cbz	r0, 17560 <preempt+0x38>
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
   17548:	f894 3020 	ldrb.w	r3, [r4, #32]
   1754c:	f013 0503 	ands.w	r5, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   17550:	f10d 000e 	add.w	r0, sp, #14
	while (next && (next->is_aborted || next->is_resume)) {
   17554:	d006      	beq.n	17564 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   17556:	f7fa febd 	bl	122d4 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1755a:	4604      	mov	r4, r0
   1755c:	2800      	cmp	r0, #0
   1755e:	d1f3      	bne.n	17548 <preempt+0x20>
			return;
		}
	} while (next->is_aborted || next->is_resume);

	preempt_ticker_start(&next->prepare_param);
}
   17560:	b00b      	add	sp, #44	; 0x2c
   17562:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
   17564:	ab05      	add	r3, sp, #20
   17566:	e9d6 2700 	ldrd	r2, r7, [r6]
   1756a:	69e1      	ldr	r1, [r4, #28]
   1756c:	68e0      	ldr	r0, [r4, #12]
   1756e:	9300      	str	r3, [sp, #0]
   17570:	ab04      	add	r3, sp, #16
   17572:	47b8      	blx	r7
	if (!ret) {
   17574:	4607      	mov	r7, r0
   17576:	2800      	cmp	r0, #0
   17578:	d065      	beq.n	17646 <preempt+0x11e>
	event.curr.abort_cb(NULL, event.curr.param);
   1757a:	68b3      	ldr	r3, [r6, #8]
   1757c:	6831      	ldr	r1, [r6, #0]
   1757e:	4628      	mov	r0, r5
   17580:	4798      	blx	r3
	if (ret == -EAGAIN) {
   17582:	f117 0f0b 	cmn.w	r7, #11
   17586:	d01a      	beq.n	175be <preempt+0x96>
		LL_ASSERT(ret == -ECANCELED);
   17588:	3748      	adds	r7, #72	; 0x48
   1758a:	d011      	beq.n	175b0 <preempt+0x88>
   1758c:	4a34      	ldr	r2, [pc, #208]	; (17660 <preempt+0x138>)
   1758e:	4935      	ldr	r1, [pc, #212]	; (17664 <preempt+0x13c>)
   17590:	4835      	ldr	r0, [pc, #212]	; (17668 <preempt+0x140>)
   17592:	f240 3367 	movw	r3, #871	; 0x367
   17596:	f005 fd4d 	bl	1d034 <printk>
   1759a:	4040      	eors	r0, r0
   1759c:	f380 8811 	msr	BASEPRI, r0
   175a0:	f04f 0003 	mov.w	r0, #3
   175a4:	df02      	svc	2
   175a6:	e003      	b.n	175b0 <preempt+0x88>
	} while (next->is_aborted || next->is_resume);
   175a8:	f890 3020 	ldrb.w	r3, [r0, #32]
   175ac:	079b      	lsls	r3, r3, #30
   175ae:	d044      	beq.n	1763a <preempt+0x112>
		next = ull_prepare_dequeue_iter(&idx);
   175b0:	f10d 000e 	add.w	r0, sp, #14
   175b4:	f7fa fe8e 	bl	122d4 <ull_prepare_dequeue_iter>
		if (!next) {
   175b8:	2800      	cmp	r0, #0
   175ba:	d1f5      	bne.n	175a8 <preempt+0x80>
   175bc:	e7d0      	b.n	17560 <preempt+0x38>
		iter_idx = UINT8_MAX;
   175be:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   175c0:	f10d 000f 	add.w	r0, sp, #15
		iter_idx = UINT8_MAX;
   175c4:	f88d 400f 	strb.w	r4, [sp, #15]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   175c8:	f7fa fe84 	bl	122d4 <ull_prepare_dequeue_iter>
		while (iter) {
   175cc:	2800      	cmp	r0, #0
   175ce:	d12b      	bne.n	17628 <preempt+0x100>
	prepare_param.param = event.curr.param;
   175d0:	6832      	ldr	r2, [r6, #0]
		ret = resume_enqueue(resume_cb, resume_prio);
   175d2:	9905      	ldr	r1, [sp, #20]
	prepare_param.param = event.curr.param;
   175d4:	9209      	str	r2, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   175d6:	2301      	movs	r3, #1
	event.curr.param = NULL;
   175d8:	2200      	movs	r2, #0
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   175da:	9301      	str	r3, [sp, #4]
   175dc:	9100      	str	r1, [sp, #0]
	event.curr.param = NULL;
   175de:	6032      	str	r2, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   175e0:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   175e4:	9b04      	ldr	r3, [sp, #16]
   175e6:	aa06      	add	r2, sp, #24
   175e8:	f7fa fe30 	bl	1224c <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   175ec:	2800      	cmp	r0, #0
   175ee:	d0df      	beq.n	175b0 <preempt+0x88>
   175f0:	4a1b      	ldr	r2, [pc, #108]	; (17660 <preempt+0x138>)
   175f2:	491e      	ldr	r1, [pc, #120]	; (1766c <preempt+0x144>)
   175f4:	481c      	ldr	r0, [pc, #112]	; (17668 <preempt+0x140>)
   175f6:	f240 3365 	movw	r3, #869	; 0x365
   175fa:	f005 fd1b 	bl	1d034 <printk>
   175fe:	4040      	eors	r0, r0
   17600:	f380 8811 	msr	BASEPRI, r0
   17604:	f04f 0003 	mov.w	r0, #3
   17608:	df02      	svc	2
   1760a:	e7d1      	b.n	175b0 <preempt+0x88>
				iter->is_aborted = 1;
   1760c:	f043 0302 	orr.w	r3, r3, #2
   17610:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
   17614:	6983      	ldr	r3, [r0, #24]
   17616:	4798      	blx	r3
				idx = UINT8_MAX;
   17618:	f88d 400e 	strb.w	r4, [sp, #14]
			iter = ull_prepare_dequeue_iter(&iter_idx);
   1761c:	f10d 000f 	add.w	r0, sp, #15
   17620:	f7fa fe58 	bl	122d4 <ull_prepare_dequeue_iter>
		while (iter) {
   17624:	2800      	cmp	r0, #0
   17626:	d0d3      	beq.n	175d0 <preempt+0xa8>
			if (!iter->is_aborted &&
   17628:	f890 3020 	ldrb.w	r3, [r0, #32]
   1762c:	079a      	lsls	r2, r3, #30
   1762e:	d4f5      	bmi.n	1761c <preempt+0xf4>
			    event.curr.param == iter->prepare_param.param) {
   17630:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   17632:	6831      	ldr	r1, [r6, #0]
   17634:	4291      	cmp	r1, r2
   17636:	d1f1      	bne.n	1761c <preempt+0xf4>
   17638:	e7e8      	b.n	1760c <preempt+0xe4>
	preempt_ticker_start(&next->prepare_param);
   1763a:	68c1      	ldr	r1, [r0, #12]
   1763c:	6800      	ldr	r0, [r0, #0]
   1763e:	f7ff feb3 	bl	173a8 <preempt_ticker_start.isra.0>
}
   17642:	b00b      	add	sp, #44	; 0x2c
   17644:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next->is_aborted = 1;
   17646:	f894 3020 	ldrb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1764a:	69a2      	ldr	r2, [r4, #24]
   1764c:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
   1764e:	f043 0302 	orr.w	r3, r3, #2
   17652:	f884 3020 	strb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   17656:	4620      	mov	r0, r4
   17658:	4790      	blx	r2
		goto preempt_next;
   1765a:	e7a9      	b.n	175b0 <preempt+0x88>
   1765c:	200027dc 	.word	0x200027dc
   17660:	00023a80 	.word	0x00023a80
   17664:	00023b10 	.word	0x00023b10
   17668:	000230b4 	.word	0x000230b4
   1766c:	00023448 	.word	0x00023448

00017670 <lll_init>:
{
   17670:	b510      	push	{r4, lr}
   17672:	4816      	ldr	r0, [pc, #88]	; (176cc <lll_init+0x5c>)
   17674:	f003 ff52 	bl	1b51c <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   17678:	4b15      	ldr	r3, [pc, #84]	; (176d0 <lll_init+0x60>)
   1767a:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   1767c:	b310      	cbz	r0, 176c4 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   1767e:	4b15      	ldr	r3, [pc, #84]	; (176d4 <lll_init+0x64>)
   17680:	2400      	movs	r4, #0
   17682:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   17684:	f000 fa6e 	bl	17b64 <lll_clock_init>
	if (err < 0) {
   17688:	2800      	cmp	r0, #0
   1768a:	db1a      	blt.n	176c2 <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   1768c:	4621      	mov	r1, r4
   1768e:	2001      	movs	r0, #1
   17690:	4622      	mov	r2, r4
   17692:	f7ef fb65 	bl	6d60 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   17696:	4622      	mov	r2, r4
   17698:	200b      	movs	r0, #11
   1769a:	2101      	movs	r1, #1
   1769c:	f7ef fb60 	bl	6d60 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   176a0:	4622      	mov	r2, r4
   176a2:	4621      	mov	r1, r4
   176a4:	2018      	movs	r0, #24
   176a6:	f7ef fb5b 	bl	6d60 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   176aa:	2001      	movs	r0, #1
   176ac:	f7ef fb26 	bl	6cfc <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   176b0:	200b      	movs	r0, #11
   176b2:	f7ef fb23 	bl	6cfc <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   176b6:	2018      	movs	r0, #24
   176b8:	f7ef fb20 	bl	6cfc <arch_irq_enable>
	radio_setup();
   176bc:	f001 fda6 	bl	1920c <radio_setup>
	return 0;
   176c0:	4620      	mov	r0, r4
}
   176c2:	bd10      	pop	{r4, pc}
		return -ENODEV;
   176c4:	f06f 0012 	mvn.w	r0, #18
}
   176c8:	bd10      	pop	{r4, pc}
   176ca:	bf00      	nop
   176cc:	00023b1c 	.word	0x00023b1c
   176d0:	200027d8 	.word	0x200027d8
   176d4:	200027dc 	.word	0x200027dc

000176d8 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   176d8:	4b05      	ldr	r3, [pc, #20]	; (176f0 <lll_csrand_get+0x18>)
{
   176da:	b410      	push	{r4}
	return entropy_get_entropy(dev_entropy, buf, len);
   176dc:	681b      	ldr	r3, [r3, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   176de:	689c      	ldr	r4, [r3, #8]
   176e0:	6824      	ldr	r4, [r4, #0]
   176e2:	b28a      	uxth	r2, r1
   176e4:	4601      	mov	r1, r0
   176e6:	4618      	mov	r0, r3
   176e8:	4623      	mov	r3, r4
}
   176ea:	f85d 4b04 	ldr.w	r4, [sp], #4
   176ee:	4718      	bx	r3
   176f0:	200027d8 	.word	0x200027d8

000176f4 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   176f4:	4b08      	ldr	r3, [pc, #32]	; (17718 <lll_csrand_isr_get+0x24>)
{
   176f6:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   176f8:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   176fa:	68ab      	ldr	r3, [r5, #8]
   176fc:	685c      	ldr	r4, [r3, #4]
   176fe:	b134      	cbz	r4, 1770e <lll_csrand_isr_get+0x1a>
   17700:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   17702:	46a4      	mov	ip, r4
   17704:	4601      	mov	r1, r0
   17706:	2300      	movs	r3, #0
   17708:	4628      	mov	r0, r5
}
   1770a:	bc30      	pop	{r4, r5}
   1770c:	4760      	bx	ip
   1770e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   17712:	bc30      	pop	{r4, r5}
   17714:	4770      	bx	lr
   17716:	bf00      	nop
   17718:	200027d8 	.word	0x200027d8

0001771c <lll_rand_isr_get>:
   1771c:	4b08      	ldr	r3, [pc, #32]	; (17740 <lll_rand_isr_get+0x24>)
   1771e:	b430      	push	{r4, r5}
   17720:	681d      	ldr	r5, [r3, #0]
   17722:	68ab      	ldr	r3, [r5, #8]
   17724:	685c      	ldr	r4, [r3, #4]
   17726:	b134      	cbz	r4, 17736 <lll_rand_isr_get+0x1a>
   17728:	b28a      	uxth	r2, r1
   1772a:	46a4      	mov	ip, r4
   1772c:	4601      	mov	r1, r0
   1772e:	2300      	movs	r3, #0
   17730:	4628      	mov	r0, r5
   17732:	bc30      	pop	{r4, r5}
   17734:	4760      	bx	ip
   17736:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1773a:	bc30      	pop	{r4, r5}
   1773c:	4770      	bx	lr
   1773e:	bf00      	nop
   17740:	200027d8 	.word	0x200027d8

00017744 <lll_reset>:
}
   17744:	2000      	movs	r0, #0
   17746:	4770      	bx	lr

00017748 <lll_prepare>:
{
   17748:	b510      	push	{r4, lr}
   1774a:	b082      	sub	sp, #8
   1774c:	9c04      	ldr	r4, [sp, #16]
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
   1774e:	9400      	str	r4, [sp, #0]
   17750:	2400      	movs	r4, #0
   17752:	9401      	str	r4, [sp, #4]
   17754:	f7ff fe62 	bl	1741c <prepare.constprop.0>
}
   17758:	b002      	add	sp, #8
   1775a:	bd10      	pop	{r4, pc}

0001775c <lll_resume>:
{
   1775c:	b510      	push	{r4, lr}
   1775e:	b082      	sub	sp, #8
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   17760:	9000      	str	r0, [sp, #0]
		      next->prio, &next->prepare_param, next->is_resume, 1);
   17762:	f890 4020 	ldrb.w	r4, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   17766:	69c3      	ldr	r3, [r0, #28]
   17768:	6902      	ldr	r2, [r0, #16]
   1776a:	f004 0401 	and.w	r4, r4, #1
   1776e:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   17772:	9401      	str	r4, [sp, #4]
   17774:	f7ff fe52 	bl	1741c <prepare.constprop.0>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   17778:	b108      	cbz	r0, 1777e <lll_resume+0x22>
   1777a:	3044      	adds	r0, #68	; 0x44
   1777c:	d101      	bne.n	17782 <lll_resume+0x26>
}
   1777e:	b002      	add	sp, #8
   17780:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   17782:	4a07      	ldr	r2, [pc, #28]	; (177a0 <lll_resume+0x44>)
   17784:	4907      	ldr	r1, [pc, #28]	; (177a4 <lll_resume+0x48>)
   17786:	4808      	ldr	r0, [pc, #32]	; (177a8 <lll_resume+0x4c>)
   17788:	f240 1309 	movw	r3, #265	; 0x109
   1778c:	f005 fc52 	bl	1d034 <printk>
   17790:	4040      	eors	r0, r0
   17792:	f380 8811 	msr	BASEPRI, r0
   17796:	f04f 0003 	mov.w	r0, #3
   1779a:	df02      	svc	2
}
   1779c:	b002      	add	sp, #8
   1779e:	bd10      	pop	{r4, pc}
   177a0:	00023a80 	.word	0x00023a80
   177a4:	00023b20 	.word	0x00023b20
   177a8:	000230b4 	.word	0x000230b4

000177ac <lll_disable>:
{
   177ac:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   177ae:	4604      	mov	r4, r0
{
   177b0:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   177b2:	b390      	cbz	r0, 1781a <lll_disable+0x6e>
   177b4:	4b25      	ldr	r3, [pc, #148]	; (1784c <lll_disable+0xa0>)
   177b6:	681a      	ldr	r2, [r3, #0]
   177b8:	4282      	cmp	r2, r0
   177ba:	d028      	beq.n	1780e <lll_disable+0x62>
		idx = UINT8_MAX;
   177bc:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   177be:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   177c2:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   177c6:	f7fa fd85 	bl	122d4 <ull_prepare_dequeue_iter>
		while (next) {
   177ca:	b938      	cbnz	r0, 177dc <lll_disable+0x30>
   177cc:	e01d      	b.n	1780a <lll_disable+0x5e>
			    (!param || (param == next->prepare_param.param))) {
   177ce:	428c      	cmp	r4, r1
   177d0:	d00b      	beq.n	177ea <lll_disable+0x3e>
			next = ull_prepare_dequeue_iter(&idx);
   177d2:	f10d 0007 	add.w	r0, sp, #7
   177d6:	f7fa fd7d 	bl	122d4 <ull_prepare_dequeue_iter>
		while (next) {
   177da:	b1b0      	cbz	r0, 1780a <lll_disable+0x5e>
			if (!next->is_aborted &&
   177dc:	f890 3020 	ldrb.w	r3, [r0, #32]
   177e0:	079b      	lsls	r3, r3, #30
   177e2:	d4f6      	bmi.n	177d2 <lll_disable+0x26>
			    (!param || (param == next->prepare_param.param))) {
   177e4:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   177e6:	2c00      	cmp	r4, #0
   177e8:	d1f1      	bne.n	177ce <lll_disable+0x22>
				next->is_aborted = 1;
   177ea:	f890 3020 	ldrb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
   177ee:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   177f0:	f043 0302 	orr.w	r3, r3, #2
   177f4:	f880 3020 	strb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
   177f8:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   177fa:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   177fe:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   17802:	f7fa fd67 	bl	122d4 <ull_prepare_dequeue_iter>
		while (next) {
   17806:	2800      	cmp	r0, #0
   17808:	d1e8      	bne.n	177dc <lll_disable+0x30>
}
   1780a:	b003      	add	sp, #12
   1780c:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   1780e:	689b      	ldr	r3, [r3, #8]
   17810:	b16b      	cbz	r3, 1782e <lll_disable+0x82>
   17812:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   17814:	2000      	movs	r0, #0
   17816:	4798      	blx	r3
   17818:	e7d0      	b.n	177bc <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   1781a:	4a0c      	ldr	r2, [pc, #48]	; (1784c <lll_disable+0xa0>)
   1781c:	6893      	ldr	r3, [r2, #8]
   1781e:	2b00      	cmp	r3, #0
   17820:	d0cc      	beq.n	177bc <lll_disable+0x10>
   17822:	6811      	ldr	r1, [r2, #0]
   17824:	2900      	cmp	r1, #0
   17826:	d0c9      	beq.n	177bc <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   17828:	2000      	movs	r0, #0
   1782a:	4798      	blx	r3
   1782c:	e7c6      	b.n	177bc <lll_disable+0x10>
			LL_ASSERT(!param);
   1782e:	4a08      	ldr	r2, [pc, #32]	; (17850 <lll_disable+0xa4>)
   17830:	4908      	ldr	r1, [pc, #32]	; (17854 <lll_disable+0xa8>)
   17832:	4809      	ldr	r0, [pc, #36]	; (17858 <lll_disable+0xac>)
   17834:	f240 1313 	movw	r3, #275	; 0x113
   17838:	f005 fbfc 	bl	1d034 <printk>
   1783c:	4040      	eors	r0, r0
   1783e:	f380 8811 	msr	BASEPRI, r0
   17842:	f04f 0003 	mov.w	r0, #3
   17846:	df02      	svc	2
   17848:	e7b8      	b.n	177bc <lll_disable+0x10>
   1784a:	bf00      	nop
   1784c:	200027dc 	.word	0x200027dc
   17850:	00023a80 	.word	0x00023a80
   17854:	00023b34 	.word	0x00023b34
   17858:	000230b4 	.word	0x000230b4

0001785c <lll_prepare_done>:
}
   1785c:	2000      	movs	r0, #0
   1785e:	4770      	bx	lr

00017860 <lll_done>:
{
   17860:	b538      	push	{r3, r4, r5, lr}
   17862:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   17864:	f7fa fd28 	bl	122b8 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   17868:	b15c      	cbz	r4, 17882 <lll_done+0x22>
   1786a:	b318      	cbz	r0, 178b4 <lll_done+0x54>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   1786c:	6824      	ldr	r4, [r4, #0]
   1786e:	3410      	adds	r4, #16
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   17870:	2000      	movs	r0, #0
   17872:	f7fa fd4f 	bl	12314 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   17876:	4620      	mov	r0, r4
   17878:	f7fa fdba 	bl	123f0 <ull_event_done>
	LL_ASSERT(evdone);
   1787c:	b158      	cbz	r0, 17896 <lll_done+0x36>
}
   1787e:	2000      	movs	r0, #0
   17880:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   17882:	4d1a      	ldr	r5, [pc, #104]	; (178ec <lll_done+0x8c>)
   17884:	68ab      	ldr	r3, [r5, #8]
   17886:	b31b      	cbz	r3, 178d0 <lll_done+0x70>
		param = event.curr.param;
   17888:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   1788a:	2300      	movs	r3, #0
   1788c:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   1788e:	602b      	str	r3, [r5, #0]
		if (param) {
   17890:	2c00      	cmp	r4, #0
   17892:	d1eb      	bne.n	1786c <lll_done+0xc>
   17894:	e7ec      	b.n	17870 <lll_done+0x10>
	LL_ASSERT(evdone);
   17896:	4a16      	ldr	r2, [pc, #88]	; (178f0 <lll_done+0x90>)
   17898:	4916      	ldr	r1, [pc, #88]	; (178f4 <lll_done+0x94>)
   1789a:	4817      	ldr	r0, [pc, #92]	; (178f8 <lll_done+0x98>)
   1789c:	f44f 73ba 	mov.w	r3, #372	; 0x174
   178a0:	f005 fbc8 	bl	1d034 <printk>
   178a4:	4040      	eors	r0, r0
   178a6:	f380 8811 	msr	BASEPRI, r0
   178aa:	f04f 0003 	mov.w	r0, #3
   178ae:	df02      	svc	2
}
   178b0:	2000      	movs	r0, #0
   178b2:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   178b4:	4a0e      	ldr	r2, [pc, #56]	; (178f0 <lll_done+0x90>)
   178b6:	4911      	ldr	r1, [pc, #68]	; (178fc <lll_done+0x9c>)
   178b8:	480f      	ldr	r0, [pc, #60]	; (178f8 <lll_done+0x98>)
   178ba:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   178be:	f005 fbb9 	bl	1d034 <printk>
   178c2:	4040      	eors	r0, r0
   178c4:	f380 8811 	msr	BASEPRI, r0
   178c8:	f04f 0003 	mov.w	r0, #3
   178cc:	df02      	svc	2
   178ce:	e7cd      	b.n	1786c <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   178d0:	4a07      	ldr	r2, [pc, #28]	; (178f0 <lll_done+0x90>)
   178d2:	490b      	ldr	r1, [pc, #44]	; (17900 <lll_done+0xa0>)
   178d4:	4808      	ldr	r0, [pc, #32]	; (178f8 <lll_done+0x98>)
   178d6:	f44f 73aa 	mov.w	r3, #340	; 0x154
   178da:	f005 fbab 	bl	1d034 <printk>
   178de:	4040      	eors	r0, r0
   178e0:	f380 8811 	msr	BASEPRI, r0
   178e4:	f04f 0003 	mov.w	r0, #3
   178e8:	df02      	svc	2
   178ea:	e7cd      	b.n	17888 <lll_done+0x28>
   178ec:	200027dc 	.word	0x200027dc
   178f0:	00023a80 	.word	0x00023a80
   178f4:	00023b60 	.word	0x00023b60
   178f8:	000230b4 	.word	0x000230b4
   178fc:	00023b3c 	.word	0x00023b3c
   17900:	00023b4c 	.word	0x00023b4c

00017904 <lll_is_abort_cb>:
}
   17904:	f06f 0047 	mvn.w	r0, #71	; 0x47
   17908:	4770      	bx	lr
   1790a:	bf00      	nop

0001790c <lll_evt_offset_get>:
{
   1790c:	4603      	mov	r3, r0
		return MAX(evt->ticks_active_to_start,
   1790e:	e9d0 2000 	ldrd	r2, r0, [r0]
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   17912:	2a00      	cmp	r2, #0
   17914:	db03      	blt.n	1791e <lll_evt_offset_get+0x12>
		return MAX(evt->ticks_active_to_start,
   17916:	4290      	cmp	r0, r2
   17918:	bf38      	it	cc
   1791a:	4610      	movcc	r0, r2
}
   1791c:	4770      	bx	lr
		return MAX(evt->ticks_active_to_start,
   1791e:	689b      	ldr	r3, [r3, #8]
   17920:	4298      	cmp	r0, r3
   17922:	bf38      	it	cc
   17924:	4618      	movcc	r0, r3
   17926:	4770      	bx	lr

00017928 <lll_preempt_calc>:
{
   17928:	b510      	push	{r4, lr}
   1792a:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   1792c:	f7f8 f824 	bl	f978 <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   17930:	1b00      	subs	r0, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   17932:	0203      	lsls	r3, r0, #8
   17934:	d405      	bmi.n	17942 <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   17936:	3003      	adds	r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   17938:	2809      	cmp	r0, #9
   1793a:	bf94      	ite	ls
   1793c:	2000      	movls	r0, #0
   1793e:	2001      	movhi	r0, #1
}
   17940:	bd10      	pop	{r4, pc}
		return 0;
   17942:	2000      	movs	r0, #0
}
   17944:	bd10      	pop	{r4, pc}
   17946:	bf00      	nop

00017948 <lll_chan_set>:
	switch (chan) {
   17948:	2826      	cmp	r0, #38	; 0x26
{
   1794a:	b510      	push	{r4, lr}
   1794c:	4604      	mov	r4, r0
	switch (chan) {
   1794e:	d01c      	beq.n	1798a <lll_chan_set+0x42>
   17950:	2827      	cmp	r0, #39	; 0x27
   17952:	d012      	beq.n	1797a <lll_chan_set+0x32>
   17954:	2825      	cmp	r0, #37	; 0x25
   17956:	d008      	beq.n	1796a <lll_chan_set+0x22>
		if (chan < 11) {
   17958:	280a      	cmp	r0, #10
   1795a:	d91e      	bls.n	1799a <lll_chan_set+0x52>
		} else if (chan < 40) {
   1795c:	2827      	cmp	r0, #39	; 0x27
   1795e:	d821      	bhi.n	179a4 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   17960:	3003      	adds	r0, #3
   17962:	0040      	lsls	r0, r0, #1
   17964:	f001 fcae 	bl	192c4 <radio_freq_chan_set>
   17968:	e002      	b.n	17970 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1796a:	2002      	movs	r0, #2
   1796c:	f001 fcaa 	bl	192c4 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   17970:	4620      	mov	r0, r4
}
   17972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   17976:	f001 bcab 	b.w	192d0 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   1797a:	2050      	movs	r0, #80	; 0x50
   1797c:	f001 fca2 	bl	192c4 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   17980:	4620      	mov	r0, r4
}
   17982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   17986:	f001 bca3 	b.w	192d0 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1798a:	201a      	movs	r0, #26
   1798c:	f001 fc9a 	bl	192c4 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   17990:	4620      	mov	r0, r4
}
   17992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   17996:	f001 bc9b 	b.w	192d0 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   1799a:	3002      	adds	r0, #2
   1799c:	0040      	lsls	r0, r0, #1
   1799e:	f001 fc91 	bl	192c4 <radio_freq_chan_set>
   179a2:	e7e5      	b.n	17970 <lll_chan_set+0x28>
			LL_ASSERT(0);
   179a4:	4a06      	ldr	r2, [pc, #24]	; (179c0 <lll_chan_set+0x78>)
   179a6:	4907      	ldr	r1, [pc, #28]	; (179c4 <lll_chan_set+0x7c>)
   179a8:	4807      	ldr	r0, [pc, #28]	; (179c8 <lll_chan_set+0x80>)
   179aa:	f240 13e1 	movw	r3, #481	; 0x1e1
   179ae:	f005 fb41 	bl	1d034 <printk>
   179b2:	4040      	eors	r0, r0
   179b4:	f380 8811 	msr	BASEPRI, r0
   179b8:	f04f 0003 	mov.w	r0, #3
   179bc:	df02      	svc	2
   179be:	e7d7      	b.n	17970 <lll_chan_set+0x28>
   179c0:	00023a80 	.word	0x00023a80
   179c4:	0002314c 	.word	0x0002314c
   179c8:	000230b4 	.word	0x000230b4

000179cc <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   179cc:	f001 bce6 	b.w	1939c <radio_rx_ready_delay_get>

000179d0 <lll_isr_tx_status_reset>:
{
   179d0:	b508      	push	{r3, lr}
	radio_status_reset();
   179d2:	f001 fd07 	bl	193e4 <radio_status_reset>
}
   179d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   179da:	f001 be59 	b.w	19690 <radio_tmr_status_reset>
   179de:	bf00      	nop

000179e0 <lll_isr_rx_status_reset>:
{
   179e0:	b508      	push	{r3, lr}
	radio_status_reset();
   179e2:	f001 fcff 	bl	193e4 <radio_status_reset>
	radio_tmr_status_reset();
   179e6:	f001 fe53 	bl	19690 <radio_tmr_status_reset>
}
   179ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   179ee:	f001 bdfb 	b.w	195e8 <radio_rssi_status_reset>
   179f2:	bf00      	nop

000179f4 <lll_isr_status_reset>:
{
   179f4:	b508      	push	{r3, lr}
	radio_status_reset();
   179f6:	f001 fcf5 	bl	193e4 <radio_status_reset>
	radio_tmr_status_reset();
   179fa:	f001 fe49 	bl	19690 <radio_tmr_status_reset>
	radio_filter_status_reset();
   179fe:	f001 fe2f 	bl	19660 <radio_filter_status_reset>
	radio_ar_status_reset();
   17a02:	f002 f809 	bl	19a18 <radio_ar_status_reset>
}
   17a06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   17a0a:	f001 bded 	b.w	195e8 <radio_rssi_status_reset>
   17a0e:	bf00      	nop

00017a10 <lll_isr_cleanup>:
{
   17a10:	b508      	push	{r3, lr}
   17a12:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   17a14:	4815      	ldr	r0, [pc, #84]	; (17a6c <lll_isr_cleanup+0x5c>)
   17a16:	f001 fbd9 	bl	191cc <radio_isr_set>
	if (!radio_is_idle()) {
   17a1a:	f001 fd03 	bl	19424 <radio_is_idle>
   17a1e:	b150      	cbz	r0, 17a36 <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   17a20:	f001 feda 	bl	197d8 <radio_tmr_stop>
	err = lll_hfclock_off();
   17a24:	f000 f8e2 	bl	17bec <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   17a28:	2800      	cmp	r0, #0
   17a2a:	db0c      	blt.n	17a46 <lll_isr_cleanup+0x36>
}
   17a2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   17a30:	2000      	movs	r0, #0
   17a32:	f7ff bf15 	b.w	17860 <lll_done>
		radio_disable();
   17a36:	f001 fcbf 	bl	193b8 <radio_disable>
	radio_tmr_stop();
   17a3a:	f001 fecd 	bl	197d8 <radio_tmr_stop>
	err = lll_hfclock_off();
   17a3e:	f000 f8d5 	bl	17bec <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   17a42:	2800      	cmp	r0, #0
   17a44:	daf2      	bge.n	17a2c <lll_isr_cleanup+0x1c>
   17a46:	4a0a      	ldr	r2, [pc, #40]	; (17a70 <lll_isr_cleanup+0x60>)
   17a48:	490a      	ldr	r1, [pc, #40]	; (17a74 <lll_isr_cleanup+0x64>)
   17a4a:	480b      	ldr	r0, [pc, #44]	; (17a78 <lll_isr_cleanup+0x68>)
   17a4c:	f44f 7311 	mov.w	r3, #580	; 0x244
   17a50:	f005 faf0 	bl	1d034 <printk>
   17a54:	4040      	eors	r0, r0
   17a56:	f380 8811 	msr	BASEPRI, r0
   17a5a:	f04f 0003 	mov.w	r0, #3
   17a5e:	df02      	svc	2
	lll_done(NULL);
   17a60:	2000      	movs	r0, #0
}
   17a62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   17a66:	f7ff befb 	b.w	17860 <lll_done>
   17a6a:	bf00      	nop
   17a6c:	00017305 	.word	0x00017305
   17a70:	00023a80 	.word	0x00023a80
   17a74:	00023b68 	.word	0x00023b68
   17a78:	000230b4 	.word	0x000230b4

00017a7c <lll_isr_abort>:
{
   17a7c:	b500      	push	{lr}
   17a7e:	b083      	sub	sp, #12
   17a80:	9001      	str	r0, [sp, #4]
	radio_status_reset();
   17a82:	f001 fcaf 	bl	193e4 <radio_status_reset>
	radio_tmr_status_reset();
   17a86:	f001 fe03 	bl	19690 <radio_tmr_status_reset>
	radio_filter_status_reset();
   17a8a:	f001 fde9 	bl	19660 <radio_filter_status_reset>
	radio_ar_status_reset();
   17a8e:	f001 ffc3 	bl	19a18 <radio_ar_status_reset>
	radio_rssi_status_reset();
   17a92:	f001 fda9 	bl	195e8 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   17a96:	9801      	ldr	r0, [sp, #4]
}
   17a98:	b003      	add	sp, #12
   17a9a:	f85d eb04 	ldr.w	lr, [sp], #4
	lll_isr_cleanup(param);
   17a9e:	f7ff bfb7 	b.w	17a10 <lll_isr_cleanup>
   17aa2:	bf00      	nop

00017aa4 <lll_isr_early_abort>:
{
   17aa4:	b508      	push	{r3, lr}
   17aa6:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   17aa8:	4813      	ldr	r0, [pc, #76]	; (17af8 <lll_isr_early_abort+0x54>)
   17aaa:	f001 fb8f 	bl	191cc <radio_isr_set>
	if (!radio_is_idle()) {
   17aae:	f001 fcb9 	bl	19424 <radio_is_idle>
   17ab2:	b140      	cbz	r0, 17ac6 <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   17ab4:	f000 f89a 	bl	17bec <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   17ab8:	2800      	cmp	r0, #0
   17aba:	db0a      	blt.n	17ad2 <lll_isr_early_abort+0x2e>
}
   17abc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   17ac0:	2000      	movs	r0, #0
   17ac2:	f7ff becd 	b.w	17860 <lll_done>
		radio_disable();
   17ac6:	f001 fc77 	bl	193b8 <radio_disable>
	err = lll_hfclock_off();
   17aca:	f000 f88f 	bl	17bec <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   17ace:	2800      	cmp	r0, #0
   17ad0:	daf4      	bge.n	17abc <lll_isr_early_abort+0x18>
   17ad2:	4a0a      	ldr	r2, [pc, #40]	; (17afc <lll_isr_early_abort+0x58>)
   17ad4:	490a      	ldr	r1, [pc, #40]	; (17b00 <lll_isr_early_abort+0x5c>)
   17ad6:	480b      	ldr	r0, [pc, #44]	; (17b04 <lll_isr_early_abort+0x60>)
   17ad8:	f240 2353 	movw	r3, #595	; 0x253
   17adc:	f005 faaa 	bl	1d034 <printk>
   17ae0:	4040      	eors	r0, r0
   17ae2:	f380 8811 	msr	BASEPRI, r0
   17ae6:	f04f 0003 	mov.w	r0, #3
   17aea:	df02      	svc	2
	lll_done(NULL);
   17aec:	2000      	movs	r0, #0
}
   17aee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   17af2:	f7ff beb5 	b.w	17860 <lll_done>
   17af6:	bf00      	nop
   17af8:	00017305 	.word	0x00017305
   17afc:	00023a80 	.word	0x00023a80
   17b00:	00023b68 	.word	0x00023b68
   17b04:	000230b4 	.word	0x000230b4

00017b08 <clock_ready>:
	z_impl_k_sem_give(sem);
   17b08:	f101 0010 	add.w	r0, r1, #16
   17b0c:	f004 bb48 	b.w	1c1a0 <z_impl_k_sem_give>

00017b10 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   17b10:	b570      	push	{r4, r5, r6, lr}
   17b12:	4605      	mov	r5, r0
   17b14:	b08a      	sub	sp, #40	; 0x28
   17b16:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   17b18:	2201      	movs	r2, #1
   17b1a:	2100      	movs	r1, #0
   17b1c:	a804      	add	r0, sp, #16
   17b1e:	f00a f986 	bl	21e2e <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   17b22:	4b0f      	ldr	r3, [pc, #60]	; (17b60 <blocking_on+0x50>)
   17b24:	9301      	str	r3, [sp, #4]
   17b26:	2600      	movs	r6, #0
   17b28:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   17b2a:	4669      	mov	r1, sp
   17b2c:	4628      	mov	r0, r5
   17b2e:	9603      	str	r6, [sp, #12]
   17b30:	9302      	str	r3, [sp, #8]
   17b32:	f005 fafc 	bl	1d12e <onoff_request>
	if (err < 0) {
   17b36:	2800      	cmp	r0, #0
   17b38:	db10      	blt.n	17b5c <blocking_on+0x4c>
   17b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   17b3e:	4631      	mov	r1, r6
   17b40:	f240 30e7 	movw	r0, #999	; 0x3e7
   17b44:	fbe4 0103 	umlal	r0, r1, r4, r3
   17b48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17b4c:	2300      	movs	r3, #0
   17b4e:	f7e8 ff95 	bl	a7c <__aeabi_uldivmod>
   17b52:	4602      	mov	r2, r0
   17b54:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   17b56:	a804      	add	r0, sp, #16
   17b58:	f004 fb48 	bl	1c1ec <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   17b5c:	b00a      	add	sp, #40	; 0x28
   17b5e:	bd70      	pop	{r4, r5, r6, pc}
   17b60:	00017b09 	.word	0x00017b09

00017b64 <lll_clock_init>:

int lll_clock_init(void)
{
   17b64:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   17b66:	2001      	movs	r0, #1
   17b68:	f7ee fcb2 	bl	64d0 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   17b6c:	4904      	ldr	r1, [pc, #16]	; (17b80 <lll_clock_init+0x1c>)
   17b6e:	2300      	movs	r3, #0
   17b70:	2401      	movs	r4, #1
   17b72:	608c      	str	r4, [r1, #8]
   17b74:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   17b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17b7a:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   17b7c:	f005 bad7 	b.w	1d12e <onoff_request>
   17b80:	200027f4 	.word	0x200027f4

00017b84 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   17b84:	4b0c      	ldr	r3, [pc, #48]	; (17bb8 <lll_clock_wait+0x34>)
   17b86:	781a      	ldrb	r2, [r3, #0]
   17b88:	b10a      	cbz	r2, 17b8e <lll_clock_wait+0xa>
		return 0;
   17b8a:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   17b8c:	4770      	bx	lr
{
   17b8e:	b510      	push	{r4, lr}
	done = true;
   17b90:	2001      	movs	r0, #1
   17b92:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   17b94:	f7ee fc9c 	bl	64d0 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   17b98:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   17b9c:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   17b9e:	f7ff ffb7 	bl	17b10 <blocking_on>
	if (err) {
   17ba2:	b938      	cbnz	r0, 17bb4 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   17ba4:	4620      	mov	r0, r4
   17ba6:	f005 fb0b 	bl	1d1c0 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   17baa:	2802      	cmp	r0, #2
		return 0;
   17bac:	bf0c      	ite	eq
   17bae:	2000      	moveq	r0, #0
		return -EIO;
   17bb0:	f06f 0004 	mvnne.w	r0, #4
}
   17bb4:	bd10      	pop	{r4, pc}
   17bb6:	bf00      	nop
   17bb8:	20003564 	.word	0x20003564

00017bbc <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   17bbc:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   17bbe:	4b0a      	ldr	r3, [pc, #40]	; (17be8 <lll_hfclock_on+0x2c>)
   17bc0:	f3bf 8f5b 	dmb	ish
   17bc4:	e853 2f00 	ldrex	r2, [r3]
   17bc8:	1c51      	adds	r1, r2, #1
   17bca:	e843 1000 	strex	r0, r1, [r3]
   17bce:	2800      	cmp	r0, #0
   17bd0:	d1f8      	bne.n	17bc4 <lll_hfclock_on+0x8>
   17bd2:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   17bd6:	2a00      	cmp	r2, #0
   17bd8:	dd01      	ble.n	17bde <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   17bda:	2000      	movs	r0, #0
   17bdc:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   17bde:	f7ee fc7f 	bl	64e0 <z_nrf_clock_bt_ctlr_hf_request>
}
   17be2:	2000      	movs	r0, #0
   17be4:	bd08      	pop	{r3, pc}
   17be6:	bf00      	nop
   17be8:	200027f0 	.word	0x200027f0

00017bec <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   17bec:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   17bee:	4b0d      	ldr	r3, [pc, #52]	; (17c24 <lll_hfclock_off+0x38>)
   17bf0:	681a      	ldr	r2, [r3, #0]
   17bf2:	2a00      	cmp	r2, #0
   17bf4:	dd12      	ble.n	17c1c <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   17bf6:	f3bf 8f5b 	dmb	ish
   17bfa:	e853 2f00 	ldrex	r2, [r3]
   17bfe:	1e51      	subs	r1, r2, #1
   17c00:	e843 1000 	strex	r0, r1, [r3]
   17c04:	2800      	cmp	r0, #0
   17c06:	d1f8      	bne.n	17bfa <lll_hfclock_off+0xe>
   17c08:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   17c0c:	2a01      	cmp	r2, #1
   17c0e:	dd01      	ble.n	17c14 <lll_hfclock_off+0x28>
		return 0;
   17c10:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   17c12:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   17c14:	f7ee fc7a 	bl	650c <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   17c18:	2000      	movs	r0, #0
}
   17c1a:	bd08      	pop	{r3, pc}
		return -EALREADY;
   17c1c:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   17c20:	bd08      	pop	{r3, pc}
   17c22:	bf00      	nop
   17c24:	200027f0 	.word	0x200027f0

00017c28 <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   17c28:	2014      	movs	r0, #20
   17c2a:	4770      	bx	lr

00017c2c <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   17c2c:	4b01      	ldr	r3, [pc, #4]	; (17c34 <lll_clock_ppm_get+0x8>)
}
   17c2e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   17c32:	4770      	bx	lr
   17c34:	00023b94 	.word	0x00023b94

00017c38 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   17c38:	b500      	push	{lr}
   17c3a:	b083      	sub	sp, #12
   17c3c:	9001      	str	r0, [sp, #4]
	/* Clear radio status and events */
	lll_isr_status_reset();
   17c3e:	f7ff fed9 	bl	179f4 <lll_isr_status_reset>

	radio_filter_disable();
   17c42:	f001 fd03 	bl	1964c <radio_filter_disable>

	lll_isr_cleanup(param);
   17c46:	9801      	ldr	r0, [sp, #4]
}
   17c48:	b003      	add	sp, #12
   17c4a:	f85d eb04 	ldr.w	lr, [sp], #4
	lll_isr_cleanup(param);
   17c4e:	f7ff bedf 	b.w	17a10 <lll_isr_cleanup>
   17c52:	bf00      	nop

00017c54 <isr_tx>:
{
   17c54:	b530      	push	{r4, r5, lr}
   17c56:	b083      	sub	sp, #12
   17c58:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   17c5a:	f7ff feb9 	bl	179d0 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   17c5e:	2096      	movs	r0, #150	; 0x96
   17c60:	f001 fd26 	bl	196b0 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, 0);
   17c64:	2300      	movs	r3, #0
   17c66:	461a      	mov	r2, r3
   17c68:	4619      	mov	r1, r3
   17c6a:	4618      	mov	r0, r3
   17c6c:	f001 fc4e 	bl	1950c <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
   17c70:	f001 fbfc 	bl	1946c <radio_pkt_scratch_get>
   17c74:	f001 fb84 	bl	19380 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   17c78:	f001 fbc0 	bl	193fc <radio_is_ready>
   17c7c:	b9e0      	cbnz	r0, 17cb8 <isr_tx+0x64>
	radio_isr_set(isr_rx, param);
   17c7e:	481e      	ldr	r0, [pc, #120]	; (17cf8 <isr_tx+0xa4>)
   17c80:	4621      	mov	r1, r4
   17c82:	f001 faa3 	bl	191cc <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   17c86:	f7ff fb0b 	bl	172a0 <ull_filter_lll_rl_enabled>
   17c8a:	bb50      	cbnz	r0, 17ce2 <isr_tx+0x8e>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   17c8c:	f001 fdf8 	bl	19880 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   17c90:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   17c92:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   17c94:	4608      	mov	r0, r1
   17c96:	f001 fb83 	bl	193a0 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   17c9a:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   17c9c:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   17c9e:	4608      	mov	r0, r1
   17ca0:	f001 fb7a 	bl	19398 <radio_tx_chain_delay_get>
   17ca4:	442c      	add	r4, r5
   17ca6:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   17ca8:	1a20      	subs	r0, r4, r0
   17caa:	f001 fda1 	bl	197f0 <radio_tmr_hcto_configure>
}
   17cae:	b003      	add	sp, #12
   17cb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_tmr_end_capture();
   17cb4:	f001 bdd6 	b.w	19864 <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   17cb8:	4a10      	ldr	r2, [pc, #64]	; (17cfc <isr_tx+0xa8>)
   17cba:	4911      	ldr	r1, [pc, #68]	; (17d00 <isr_tx+0xac>)
   17cbc:	4811      	ldr	r0, [pc, #68]	; (17d04 <isr_tx+0xb0>)
   17cbe:	f240 33b7 	movw	r3, #951	; 0x3b7
   17cc2:	f005 f9b7 	bl	1d034 <printk>
   17cc6:	4040      	eors	r0, r0
   17cc8:	f380 8811 	msr	BASEPRI, r0
   17ccc:	f04f 0003 	mov.w	r0, #3
   17cd0:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   17cd2:	4809      	ldr	r0, [pc, #36]	; (17cf8 <isr_tx+0xa4>)
   17cd4:	4621      	mov	r1, r4
   17cd6:	f001 fa79 	bl	191cc <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   17cda:	f7ff fae1 	bl	172a0 <ull_filter_lll_rl_enabled>
   17cde:	2800      	cmp	r0, #0
   17ce0:	d0d4      	beq.n	17c8c <isr_tx+0x38>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   17ce2:	f10d 0007 	add.w	r0, sp, #7
   17ce6:	f7ff fa09 	bl	170fc <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   17cea:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   17cec:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   17cee:	f89d 0007 	ldrb.w	r0, [sp, #7]
   17cf2:	f001 fe57 	bl	199a4 <radio_ar_configure>
   17cf6:	e7c9      	b.n	17c8c <isr_tx+0x38>
   17cf8:	00018471 	.word	0x00018471
   17cfc:	00023ba4 	.word	0x00023ba4
   17d00:	00023bf0 	.word	0x00023bf0
   17d04:	000230b4 	.word	0x000230b4

00017d08 <is_abort_cb>:
	if (next != curr) {
   17d08:	4282      	cmp	r2, r0
{
   17d0a:	b508      	push	{r3, lr}
	if (next != curr) {
   17d0c:	d011      	beq.n	17d32 <is_abort_cb+0x2a>
		} else if (lll->is_hdcd) {
   17d0e:	7a12      	ldrb	r2, [r2, #8]
   17d10:	07d2      	lsls	r2, r2, #31
   17d12:	d402      	bmi.n	17d1a <is_abort_cb+0x12>
			return -ECANCELED;
   17d14:	f06f 0047 	mvn.w	r0, #71	; 0x47
}
   17d18:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   17d1a:	4914      	ldr	r1, [pc, #80]	; (17d6c <is_abort_cb+0x64>)
   17d1c:	6019      	str	r1, [r3, #0]
			*resume_prio = 0; /* TODO: */
   17d1e:	9b02      	ldr	r3, [sp, #8]
   17d20:	2200      	movs	r2, #0
   17d22:	601a      	str	r2, [r3, #0]
			err = lll_hfclock_on();
   17d24:	f7ff ff4a 	bl	17bbc <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   17d28:	2800      	cmp	r0, #0
   17d2a:	db0f      	blt.n	17d4c <is_abort_cb+0x44>
   17d2c:	f06f 000a 	mvn.w	r0, #10
}
   17d30:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   17d32:	7b13      	ldrb	r3, [r2, #12]
   17d34:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   17d38:	6913      	ldr	r3, [r2, #16]
   17d3a:	781b      	ldrb	r3, [r3, #0]
   17d3c:	f003 030f 	and.w	r3, r3, #15
		return 0;
   17d40:	2b01      	cmp	r3, #1
   17d42:	bf14      	ite	ne
   17d44:	f06f 0047 	mvnne.w	r0, #71	; 0x47
   17d48:	2000      	moveq	r0, #0
}
   17d4a:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   17d4c:	4a08      	ldr	r2, [pc, #32]	; (17d70 <is_abort_cb+0x68>)
   17d4e:	4909      	ldr	r1, [pc, #36]	; (17d74 <is_abort_cb+0x6c>)
   17d50:	4809      	ldr	r0, [pc, #36]	; (17d78 <is_abort_cb+0x70>)
   17d52:	f240 3375 	movw	r3, #885	; 0x375
   17d56:	f005 f96d 	bl	1d034 <printk>
   17d5a:	4040      	eors	r0, r0
   17d5c:	f380 8811 	msr	BASEPRI, r0
   17d60:	f04f 0003 	mov.w	r0, #3
   17d64:	df02      	svc	2
   17d66:	f06f 000a 	mvn.w	r0, #10
}
   17d6a:	bd08      	pop	{r3, pc}
   17d6c:	0001828d 	.word	0x0001828d
   17d70:	00023ba4 	.word	0x00023ba4
   17d74:	00023b68 	.word	0x00023b68
   17d78:	000230b4 	.word	0x000230b4

00017d7c <abort_cb>:
{
   17d7c:	b510      	push	{r4, lr}
	if (!prepare_param) {
   17d7e:	b1d8      	cbz	r0, 17db8 <abort_cb+0x3c>
	err = lll_hfclock_off();
   17d80:	460c      	mov	r4, r1
   17d82:	f7ff ff33 	bl	17bec <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   17d86:	2800      	cmp	r0, #0
   17d88:	db04      	blt.n	17d94 <abort_cb+0x18>
	lll_done(param);
   17d8a:	4620      	mov	r0, r4
}
   17d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   17d90:	f7ff bd66 	b.w	17860 <lll_done>
	LL_ASSERT(err >= 0);
   17d94:	4a0c      	ldr	r2, [pc, #48]	; (17dc8 <abort_cb+0x4c>)
   17d96:	490d      	ldr	r1, [pc, #52]	; (17dcc <abort_cb+0x50>)
   17d98:	480d      	ldr	r0, [pc, #52]	; (17dd0 <abort_cb+0x54>)
   17d9a:	f240 339b 	movw	r3, #923	; 0x39b
   17d9e:	f005 f949 	bl	1d034 <printk>
   17da2:	4040      	eors	r0, r0
   17da4:	f380 8811 	msr	BASEPRI, r0
   17da8:	f04f 0003 	mov.w	r0, #3
   17dac:	df02      	svc	2
	lll_done(param);
   17dae:	4620      	mov	r0, r4
}
   17db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   17db4:	f7ff bd54 	b.w	17860 <lll_done>
		radio_isr_set(isr_abort, param);
   17db8:	4806      	ldr	r0, [pc, #24]	; (17dd4 <abort_cb+0x58>)
   17dba:	f001 fa07 	bl	191cc <radio_isr_set>
}
   17dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   17dc2:	f001 baf9 	b.w	193b8 <radio_disable>
   17dc6:	bf00      	nop
   17dc8:	00023ba4 	.word	0x00023ba4
   17dcc:	00023b68 	.word	0x00023b68
   17dd0:	000230b4 	.word	0x000230b4
   17dd4:	00017c39 	.word	0x00017c39

00017dd8 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   17dd8:	4b08      	ldr	r3, [pc, #32]	; (17dfc <lll_adv_init+0x24>)
{
   17dda:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   17ddc:	1d18      	adds	r0, r3, #4
   17dde:	2205      	movs	r2, #5
   17de0:	2128      	movs	r1, #40	; 0x28
   17de2:	f7f6 fab1 	bl	e348 <mem_init>
	MFIFO_INIT(pdu_free);
   17de6:	4b06      	ldr	r3, [pc, #24]	; (17e00 <lll_adv_init+0x28>)
   17de8:	2400      	movs	r4, #0
   17dea:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   17dec:	2203      	movs	r2, #3
   17dee:	4621      	mov	r1, r4
   17df0:	4804      	ldr	r0, [pc, #16]	; (17e04 <lll_adv_init+0x2c>)
   17df2:	f00a f81c 	bl	21e2e <z_impl_k_sem_init>
}
   17df6:	4620      	mov	r0, r4
   17df8:	bd10      	pop	{r4, pc}
   17dfa:	bf00      	nop
   17dfc:	20002804 	.word	0x20002804
   17e00:	2000055c 	.word	0x2000055c
   17e04:	200028d0 	.word	0x200028d0

00017e08 <lll_adv_reset>:
   17e08:	4b08      	ldr	r3, [pc, #32]	; (17e2c <lll_adv_reset+0x24>)
   17e0a:	b510      	push	{r4, lr}
   17e0c:	1d18      	adds	r0, r3, #4
   17e0e:	2205      	movs	r2, #5
   17e10:	2128      	movs	r1, #40	; 0x28
   17e12:	f7f6 fa99 	bl	e348 <mem_init>
   17e16:	4b06      	ldr	r3, [pc, #24]	; (17e30 <lll_adv_reset+0x28>)
   17e18:	2400      	movs	r4, #0
   17e1a:	805c      	strh	r4, [r3, #2]
   17e1c:	2203      	movs	r2, #3
   17e1e:	4621      	mov	r1, r4
   17e20:	4804      	ldr	r0, [pc, #16]	; (17e34 <lll_adv_reset+0x2c>)
   17e22:	f00a f804 	bl	21e2e <z_impl_k_sem_init>
   17e26:	4620      	mov	r0, r4
   17e28:	bd10      	pop	{r4, pc}
   17e2a:	bf00      	nop
   17e2c:	20002804 	.word	0x20002804
   17e30:	2000055c 	.word	0x2000055c
   17e34:	200028d0 	.word	0x200028d0

00017e38 <lll_adv_data_init>:
{
   17e38:	b510      	push	{r4, lr}
   17e3a:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   17e3c:	4805      	ldr	r0, [pc, #20]	; (17e54 <lll_adv_data_init+0x1c>)
   17e3e:	f7f6 fab3 	bl	e3a8 <mem_acquire>
	if (!p) {
   17e42:	b120      	cbz	r0, 17e4e <lll_adv_data_init+0x16>
   17e44:	4603      	mov	r3, r0
	p->len = 0U;
   17e46:	2000      	movs	r0, #0
   17e48:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   17e4a:	6063      	str	r3, [r4, #4]
}
   17e4c:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   17e4e:	f06f 000b 	mvn.w	r0, #11
}
   17e52:	bd10      	pop	{r4, pc}
   17e54:	20002804 	.word	0x20002804

00017e58 <lll_adv_data_reset>:
	pdu->first = 0U;
   17e58:	2300      	movs	r3, #0
   17e5a:	7003      	strb	r3, [r0, #0]
	pdu->last = 0U;
   17e5c:	7043      	strb	r3, [r0, #1]
	pdu->pdu[1] = NULL;
   17e5e:	6083      	str	r3, [r0, #8]
}
   17e60:	4618      	mov	r0, r3
   17e62:	4770      	bx	lr

00017e64 <lll_adv_pdu_alloc>:
{
   17e64:	b570      	push	{r4, r5, r6, lr}
	first = pdu->first;
   17e66:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   17e68:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   17e6a:	429a      	cmp	r2, r3
   17e6c:	d004      	beq.n	17e78 <lll_adv_pdu_alloc+0x14>
		pdu->last = first;
   17e6e:	b2d4      	uxtb	r4, r2
   17e70:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   17e72:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   17e74:	4294      	cmp	r4, r2
   17e76:	d003      	beq.n	17e80 <lll_adv_pdu_alloc+0x1c>
		last++;
   17e78:	3301      	adds	r3, #1
   17e7a:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   17e7c:	2b02      	cmp	r3, #2
   17e7e:	d007      	beq.n	17e90 <lll_adv_pdu_alloc+0x2c>
	p = (void *)pdu->pdu[last];
   17e80:	461c      	mov	r4, r3
   17e82:	eb00 0484 	add.w	r4, r0, r4, lsl #2
	*idx = last;
   17e86:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   17e88:	6865      	ldr	r5, [r4, #4]
	if (p) {
   17e8a:	b14d      	cbz	r5, 17ea0 <lll_adv_pdu_alloc+0x3c>
}
   17e8c:	4628      	mov	r0, r5
   17e8e:	bd70      	pop	{r4, r5, r6, pc}
{
   17e90:	2400      	movs	r4, #0
			last = 0U;
   17e92:	4623      	mov	r3, r4
	*idx = last;
   17e94:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   17e98:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   17e9a:	6865      	ldr	r5, [r4, #4]
	if (p) {
   17e9c:	2d00      	cmp	r5, #0
   17e9e:	d1f5      	bne.n	17e8c <lll_adv_pdu_alloc+0x28>
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   17ea0:	4e34      	ldr	r6, [pc, #208]	; (17f74 <lll_adv_pdu_alloc+0x110>)
   17ea2:	78b2      	ldrb	r2, [r6, #2]
	if (first == last) {
   17ea4:	78f1      	ldrb	r1, [r6, #3]
   17ea6:	7833      	ldrb	r3, [r6, #0]
   17ea8:	4291      	cmp	r1, r2
   17eaa:	d003      	beq.n	17eb4 <lll_adv_pdu_alloc+0x50>
	return *((void **)(fifo + first * size));
   17eac:	fb02 6303 	mla	r3, r2, r3, r6
   17eb0:	685d      	ldr	r5, [r3, #4]
	if (p) {
   17eb2:	b93d      	cbnz	r5, 17ec4 <lll_adv_pdu_alloc+0x60>
	p = mem_acquire(&mem_pdu.free);
   17eb4:	4830      	ldr	r0, [pc, #192]	; (17f78 <lll_adv_pdu_alloc+0x114>)
   17eb6:	f7f6 fa77 	bl	e3a8 <mem_acquire>
	if (p) {
   17eba:	4605      	mov	r5, r0
   17ebc:	b1a8      	cbz	r0, 17eea <lll_adv_pdu_alloc+0x86>
	pdu->pdu[last] = (void *)p;
   17ebe:	6065      	str	r5, [r4, #4]
}
   17ec0:	4628      	mov	r0, r5
   17ec2:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sem_take(sem, timeout);
   17ec4:	482d      	ldr	r0, [pc, #180]	; (17f7c <lll_adv_pdu_alloc+0x118>)
   17ec6:	2200      	movs	r2, #0
   17ec8:	2300      	movs	r3, #0
   17eca:	f004 f98f 	bl	1c1ec <z_impl_k_sem_take>
		LL_ASSERT(!err);
   17ece:	2800      	cmp	r0, #0
   17ed0:	d134      	bne.n	17f3c <lll_adv_pdu_alloc+0xd8>
	uint8_t _first = *first; /* Copy read-index */
   17ed2:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   17ed4:	78f2      	ldrb	r2, [r6, #3]
		MFIFO_DEQUEUE(pdu_free);
   17ed6:	7871      	ldrb	r1, [r6, #1]
   17ed8:	429a      	cmp	r2, r3
   17eda:	d0f0      	beq.n	17ebe <lll_adv_pdu_alloc+0x5a>
	_first += 1U;
   17edc:	3301      	adds	r3, #1
   17ede:	b2db      	uxtb	r3, r3
		_first = 0U;
   17ee0:	4299      	cmp	r1, r3
   17ee2:	bf08      	it	eq
   17ee4:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   17ee6:	70b3      	strb	r3, [r6, #2]
	return mem;
   17ee8:	e7e9      	b.n	17ebe <lll_adv_pdu_alloc+0x5a>
   17eea:	4824      	ldr	r0, [pc, #144]	; (17f7c <lll_adv_pdu_alloc+0x118>)
   17eec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17ef4:	f004 f97a 	bl	1c1ec <z_impl_k_sem_take>
	LL_ASSERT(!err);
   17ef8:	2800      	cmp	r0, #0
   17efa:	d12d      	bne.n	17f58 <lll_adv_pdu_alloc+0xf4>
	uint8_t _first = *first; /* Copy read-index */
   17efc:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   17efe:	78f1      	ldrb	r1, [r6, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   17f00:	7832      	ldrb	r2, [r6, #0]
   17f02:	7870      	ldrb	r0, [r6, #1]
   17f04:	4299      	cmp	r1, r3
   17f06:	d00a      	beq.n	17f1e <lll_adv_pdu_alloc+0xba>
	mem = *((void **)(fifo + _first * size));
   17f08:	fb03 6202 	mla	r2, r3, r2, r6
	_first += 1U;
   17f0c:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   17f0e:	6855      	ldr	r5, [r2, #4]
	_first += 1U;
   17f10:	b2db      	uxtb	r3, r3
		_first = 0U;
   17f12:	4298      	cmp	r0, r3
   17f14:	bf08      	it	eq
   17f16:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   17f18:	70b3      	strb	r3, [r6, #2]
	LL_ASSERT(p);
   17f1a:	2d00      	cmp	r5, #0
   17f1c:	d1cf      	bne.n	17ebe <lll_adv_pdu_alloc+0x5a>
   17f1e:	4a18      	ldr	r2, [pc, #96]	; (17f80 <lll_adv_pdu_alloc+0x11c>)
   17f20:	4918      	ldr	r1, [pc, #96]	; (17f84 <lll_adv_pdu_alloc+0x120>)
   17f22:	4819      	ldr	r0, [pc, #100]	; (17f88 <lll_adv_pdu_alloc+0x124>)
   17f24:	f240 2382 	movw	r3, #642	; 0x282
   17f28:	f005 f884 	bl	1d034 <printk>
   17f2c:	4040      	eors	r0, r0
   17f2e:	f380 8811 	msr	BASEPRI, r0
   17f32:	f04f 0003 	mov.w	r0, #3
   17f36:	df02      	svc	2
   17f38:	2500      	movs	r5, #0
   17f3a:	e7c0      	b.n	17ebe <lll_adv_pdu_alloc+0x5a>
		LL_ASSERT(!err);
   17f3c:	4a10      	ldr	r2, [pc, #64]	; (17f80 <lll_adv_pdu_alloc+0x11c>)
   17f3e:	4913      	ldr	r1, [pc, #76]	; (17f8c <lll_adv_pdu_alloc+0x128>)
   17f40:	4811      	ldr	r0, [pc, #68]	; (17f88 <lll_adv_pdu_alloc+0x124>)
   17f42:	f240 236f 	movw	r3, #623	; 0x26f
   17f46:	f005 f875 	bl	1d034 <printk>
   17f4a:	4040      	eors	r0, r0
   17f4c:	f380 8811 	msr	BASEPRI, r0
   17f50:	f04f 0003 	mov.w	r0, #3
   17f54:	df02      	svc	2
   17f56:	e7bc      	b.n	17ed2 <lll_adv_pdu_alloc+0x6e>
	LL_ASSERT(!err);
   17f58:	4a09      	ldr	r2, [pc, #36]	; (17f80 <lll_adv_pdu_alloc+0x11c>)
   17f5a:	490c      	ldr	r1, [pc, #48]	; (17f8c <lll_adv_pdu_alloc+0x128>)
   17f5c:	480a      	ldr	r0, [pc, #40]	; (17f88 <lll_adv_pdu_alloc+0x124>)
   17f5e:	f240 237f 	movw	r3, #639	; 0x27f
   17f62:	f005 f867 	bl	1d034 <printk>
   17f66:	4040      	eors	r0, r0
   17f68:	f380 8811 	msr	BASEPRI, r0
   17f6c:	f04f 0003 	mov.w	r0, #3
   17f70:	df02      	svc	2
   17f72:	e7c3      	b.n	17efc <lll_adv_pdu_alloc+0x98>
   17f74:	2000055c 	.word	0x2000055c
   17f78:	20002804 	.word	0x20002804
   17f7c:	200028d0 	.word	0x200028d0
   17f80:	00023ba4 	.word	0x00023ba4
   17f84:	00023c04 	.word	0x00023c04
   17f88:	000230b4 	.word	0x000230b4
   17f8c:	0002334c 	.word	0x0002334c

00017f90 <lll_adv_pdu_latest_get>:
{
   17f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f92:	4604      	mov	r4, r0
	first = pdu->first;
   17f94:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   17f96:	7840      	ldrb	r0, [r0, #1]
   17f98:	4298      	cmp	r0, r3
   17f9a:	d028      	beq.n	17fee <lll_adv_pdu_latest_get+0x5e>
		if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   17f9c:	4d16      	ldr	r5, [pc, #88]	; (17ff8 <lll_adv_pdu_latest_get+0x68>)
   17f9e:	b2da      	uxtb	r2, r3
	last = last + 1;
   17fa0:	78eb      	ldrb	r3, [r5, #3]
	if (last == count) {
   17fa2:	786e      	ldrb	r6, [r5, #1]
   17fa4:	78a8      	ldrb	r0, [r5, #2]
	last = last + 1;
   17fa6:	3301      	adds	r3, #1
   17fa8:	b2db      	uxtb	r3, r3
		last = 0U;
   17faa:	429e      	cmp	r6, r3
   17fac:	bf08      	it	eq
   17fae:	2300      	moveq	r3, #0
	if (last == first) {
   17fb0:	4298      	cmp	r0, r3
   17fb2:	d01e      	beq.n	17ff2 <lll_adv_pdu_latest_get+0x62>
		first += 1U;
   17fb4:	1c50      	adds	r0, r2, #1
   17fb6:	b2c0      	uxtb	r0, r0
		if (first == DOUBLE_BUFFER_SIZE) {
   17fb8:	2802      	cmp	r0, #2
   17fba:	bf04      	itt	eq
   17fbc:	2600      	moveq	r6, #0
			first = 0U;
   17fbe:	4630      	moveq	r0, r6
		pdu->first = first;
   17fc0:	7020      	strb	r0, [r4, #0]
	return (void *)pdu->pdu[first];
   17fc2:	bf18      	it	ne
   17fc4:	4606      	movne	r6, r0
		*is_modified = 1U;
   17fc6:	2001      	movs	r0, #1
   17fc8:	7008      	strb	r0, [r1, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   17fca:	78e8      	ldrb	r0, [r5, #3]
   17fcc:	7829      	ldrb	r1, [r5, #0]
   17fce:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   17fd2:	fb00 5101 	mla	r1, r0, r1, r5
		pdu->pdu[pdu_idx] = NULL;
   17fd6:	2700      	movs	r7, #0
		p = pdu->pdu[pdu_idx];
   17fd8:	6850      	ldr	r0, [r2, #4]
		pdu->pdu[pdu_idx] = NULL;
   17fda:	6057      	str	r7, [r2, #4]
   17fdc:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   17fde:	70eb      	strb	r3, [r5, #3]
	z_impl_k_sem_give(sem);
   17fe0:	4806      	ldr	r0, [pc, #24]	; (17ffc <lll_adv_pdu_latest_get+0x6c>)
   17fe2:	f004 f8dd 	bl	1c1a0 <z_impl_k_sem_give>
	return (void *)pdu->pdu[first];
   17fe6:	eb04 0486 	add.w	r4, r4, r6, lsl #2
   17fea:	6860      	ldr	r0, [r4, #4]
}
   17fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (void *)pdu->pdu[first];
   17fee:	4606      	mov	r6, r0
   17ff0:	e7f9      	b.n	17fe6 <lll_adv_pdu_latest_get+0x56>
			return NULL;
   17ff2:	2000      	movs	r0, #0
}
   17ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17ff6:	bf00      	nop
   17ff8:	2000055c 	.word	0x2000055c
   17ffc:	200028d0 	.word	0x200028d0

00018000 <chan_prepare.isra.0>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   18000:	7a03      	ldrb	r3, [r0, #8]
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   18002:	b570      	push	{r4, r5, r6, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   18004:	f3c3 1302 	ubfx	r3, r3, #4, #3
   18008:	2b00      	cmp	r3, #0
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1800a:	4604      	mov	r4, r0
   1800c:	fa93 f0a3 	rbit	r0, r3
   18010:	fab0 f080 	clz	r0, r0
   18014:	bf08      	it	eq
   18016:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   1801a:	1c45      	adds	r5, r0, #1
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1801c:	b082      	sub	sp, #8
	LL_ASSERT(chan);
   1801e:	d043      	beq.n	180a8 <chan_prepare.isra.0+0xa8>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   18020:	7a22      	ldrb	r2, [r4, #8]
   18022:	1e59      	subs	r1, r3, #1
   18024:	400b      	ands	r3, r1
   18026:	f363 1206 	bfi	r2, r3, #4, #3

	lll_chan_set(36 + chan);
   1802a:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1802e:	7222      	strb	r2, [r4, #8]
	lll_chan_set(36 + chan);
   18030:	f7ff fc8a 	bl	17948 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   18034:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   18036:	f10d 0107 	add.w	r1, sp, #7
   1803a:	f104 000c 	add.w	r0, r4, #12
   1803e:	f88d 3007 	strb.w	r3, [sp, #7]
   18042:	f7ff ffa5 	bl	17f90 <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   18046:	4605      	mov	r5, r0
   18048:	2800      	cmp	r0, #0
   1804a:	d03e      	beq.n	180ca <chan_prepare.isra.0+0xca>

	radio_pkt_tx_set(pdu);
   1804c:	4628      	mov	r0, r5
   1804e:	f001 f99d 	bl	1938c <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   18052:	782b      	ldrb	r3, [r5, #0]
   18054:	f003 030f 	and.w	r3, r3, #15
   18058:	2b02      	cmp	r3, #2
   1805a:	d01d      	beq.n	18098 <chan_prepare.isra.0+0x98>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   1805c:	f10d 0107 	add.w	r1, sp, #7
   18060:	f104 0018 	add.w	r0, r4, #24
   18064:	f7ff ff94 	bl	17f90 <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   18068:	4606      	mov	r6, r0
   1806a:	2800      	cmp	r0, #0
   1806c:	d03b      	beq.n	180e6 <chan_prepare.isra.0+0xe6>

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   1806e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18072:	b95b      	cbnz	r3, 1808c <chan_prepare.isra.0+0x8c>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   18074:	4621      	mov	r1, r4
   18076:	4823      	ldr	r0, [pc, #140]	; (18104 <chan_prepare.isra.0+0x104>)
   18078:	f001 f8a8 	bl	191cc <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1807c:	2096      	movs	r0, #150	; 0x96
   1807e:	f001 fb17 	bl	196b0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   18082:	2000      	movs	r0, #0
   18084:	f001 f9fa 	bl	1947c <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   18088:	b002      	add	sp, #8
   1808a:	bd70      	pop	{r4, r5, r6, pc}
			memcpy(&scan_pdu->scan_rsp.addr[0],
   1808c:	2206      	movs	r2, #6
   1808e:	1ca9      	adds	r1, r5, #2
   18090:	1cb0      	adds	r0, r6, #2
   18092:	f007 fa21 	bl	1f4d8 <memcpy>
   18096:	e7ed      	b.n	18074 <chan_prepare.isra.0+0x74>
		radio_isr_set(isr_done, lll);
   18098:	481b      	ldr	r0, [pc, #108]	; (18108 <chan_prepare.isra.0+0x108>)
   1809a:	4621      	mov	r1, r4
   1809c:	f001 f896 	bl	191cc <radio_isr_set>
		radio_switch_complete_and_disable();
   180a0:	f001 fa94 	bl	195cc <radio_switch_complete_and_disable>
}
   180a4:	b002      	add	sp, #8
   180a6:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(chan);
   180a8:	4a18      	ldr	r2, [pc, #96]	; (1810c <chan_prepare.isra.0+0x10c>)
   180aa:	4919      	ldr	r1, [pc, #100]	; (18110 <chan_prepare.isra.0+0x110>)
   180ac:	4819      	ldr	r0, [pc, #100]	; (18114 <chan_prepare.isra.0+0x114>)
   180ae:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   180b2:	f004 ffbf 	bl	1d034 <printk>
   180b6:	4040      	eors	r0, r0
   180b8:	f380 8811 	msr	BASEPRI, r0
   180bc:	f04f 0003 	mov.w	r0, #3
   180c0:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   180c2:	7a23      	ldrb	r3, [r4, #8]
   180c4:	f3c3 1302 	ubfx	r3, r3, #4, #3
   180c8:	e7aa      	b.n	18020 <chan_prepare.isra.0+0x20>
	LL_ASSERT(pdu);
   180ca:	4a10      	ldr	r2, [pc, #64]	; (1810c <chan_prepare.isra.0+0x10c>)
   180cc:	4912      	ldr	r1, [pc, #72]	; (18118 <chan_prepare.isra.0+0x118>)
   180ce:	4811      	ldr	r0, [pc, #68]	; (18114 <chan_prepare.isra.0+0x114>)
   180d0:	f240 43b9 	movw	r3, #1209	; 0x4b9
   180d4:	f004 ffae 	bl	1d034 <printk>
   180d8:	4040      	eors	r0, r0
   180da:	f380 8811 	msr	BASEPRI, r0
   180de:	f04f 0003 	mov.w	r0, #3
   180e2:	df02      	svc	2
   180e4:	e7b2      	b.n	1804c <chan_prepare.isra.0+0x4c>
		LL_ASSERT(scan_pdu);
   180e6:	4a09      	ldr	r2, [pc, #36]	; (1810c <chan_prepare.isra.0+0x10c>)
   180e8:	490c      	ldr	r1, [pc, #48]	; (1811c <chan_prepare.isra.0+0x11c>)
   180ea:	480a      	ldr	r0, [pc, #40]	; (18114 <chan_prepare.isra.0+0x114>)
   180ec:	f240 43c3 	movw	r3, #1219	; 0x4c3
   180f0:	f004 ffa0 	bl	1d034 <printk>
   180f4:	4040      	eors	r0, r0
   180f6:	f380 8811 	msr	BASEPRI, r0
   180fa:	f04f 0003 	mov.w	r0, #3
   180fe:	df02      	svc	2
   18100:	e7b5      	b.n	1806e <chan_prepare.isra.0+0x6e>
   18102:	bf00      	nop
   18104:	00017c55 	.word	0x00017c55
   18108:	00018121 	.word	0x00018121
   1810c:	00023ba4 	.word	0x00023ba4
   18110:	00023858 	.word	0x00023858
   18114:	000230b4 	.word	0x000230b4
   18118:	00023c08 	.word	0x00023c08
   1811c:	00023c0c 	.word	0x00023c0c

00018120 <isr_done>:
{
   18120:	b510      	push	{r4, lr}
   18122:	4604      	mov	r4, r0
	lll_isr_status_reset();
   18124:	f7ff fc66 	bl	179f4 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   18128:	7a23      	ldrb	r3, [r4, #8]
   1812a:	f003 0271 	and.w	r2, r3, #113	; 0x71
   1812e:	2a01      	cmp	r2, #1
   18130:	d105      	bne.n	1813e <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   18132:	f3c3 0242 	ubfx	r2, r3, #1, #3
   18136:	f362 1306 	bfi	r3, r2, #4, #3
   1813a:	7223      	strb	r3, [r4, #8]
	if (lll->chan_map_curr) {
   1813c:	b2db      	uxtb	r3, r3
   1813e:	f013 0f70 	tst.w	r3, #112	; 0x70
   18142:	d106      	bne.n	18152 <isr_done+0x32>
	radio_filter_disable();
   18144:	f001 fa82 	bl	1964c <radio_filter_disable>
	lll_isr_cleanup(param);
   18148:	4620      	mov	r0, r4
}
   1814a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1814e:	f7ff bc5f 	b.w	17a10 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   18152:	4620      	mov	r0, r4
   18154:	f7ff ff54 	bl	18000 <chan_prepare.isra.0>
		radio_tx_enable();
   18158:	f001 f928 	bl	193ac <radio_tx_enable>
}
   1815c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   18160:	f001 bb80 	b.w	19864 <radio_tmr_end_capture>

00018164 <prepare_cb>:
{
   18164:	e92d 41b0 	stmdb	sp!, {r4, r5, r7, r8, lr}
	lll = p->param;
   18168:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn && lll->conn->slave.initiated)) {
   1816a:	6863      	ldr	r3, [r4, #4]
{
   1816c:	b083      	sub	sp, #12
   1816e:	4605      	mov	r5, r0
	if (unlikely(lll->conn && lll->conn->slave.initiated)) {
   18170:	2b00      	cmp	r3, #0
   18172:	d172      	bne.n	1825a <prepare_cb+0xf6>
	radio_reset();
   18174:	f001 f86c 	bl	19250 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   18178:	2000      	movs	r0, #0
   1817a:	f001 f89d 	bl	192b8 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1817e:	2100      	movs	r1, #0
   18180:	4608      	mov	r0, r1
   18182:	f001 f889 	bl	19298 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   18186:	2200      	movs	r2, #0
   18188:	2125      	movs	r1, #37	; 0x25
   1818a:	2008      	movs	r0, #8
   1818c:	f001 f8ca 	bl	19324 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   18190:	4b37      	ldr	r3, [pc, #220]	; (18270 <prepare_cb+0x10c>)
   18192:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   18194:	a801      	add	r0, sp, #4
   18196:	f001 f8ad 	bl	192f4 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1819a:	4936      	ldr	r1, [pc, #216]	; (18274 <prepare_cb+0x110>)
   1819c:	f240 605b 	movw	r0, #1627	; 0x65b
   181a0:	f001 f94a 	bl	19438 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   181a4:	7a23      	ldrb	r3, [r4, #8]
   181a6:	f3c3 0242 	ubfx	r2, r3, #1, #3
   181aa:	f362 1306 	bfi	r3, r2, #4, #3
	pdu = chan_prepare(lll);
   181ae:	4620      	mov	r0, r4
	lll->chan_map_curr = lll->chan_map;
   181b0:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   181b2:	f7ff ff25 	bl	18000 <chan_prepare.isra.0>
	if (ull_filter_lll_rl_enabled()) {
   181b6:	f7ff f873 	bl	172a0 <ull_filter_lll_rl_enabled>
   181ba:	2800      	cmp	r0, #0
   181bc:	d136      	bne.n	1822c <prepare_cb+0xc8>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   181be:	7a63      	ldrb	r3, [r4, #9]
   181c0:	079b      	lsls	r3, r3, #30
   181c2:	d12a      	bne.n	1821a <prepare_cb+0xb6>
	evt = HDR_LLL2EVT(lll);
   181c4:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   181c8:	682f      	ldr	r7, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   181ca:	4640      	mov	r0, r8
   181cc:	f7ff fb9e 	bl	1790c <lll_evt_offset_get>
   181d0:	4407      	add	r7, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   181d2:	686a      	ldr	r2, [r5, #4]
   181d4:	f107 0109 	add.w	r1, r7, #9
   181d8:	2001      	movs	r0, #1
   181da:	f001 fa75 	bl	196c8 <radio_tmr_start>
	radio_tmr_end_capture();
   181de:	f001 fb41 	bl	19864 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   181e2:	4620      	mov	r0, r4
   181e4:	f7fa fd10 	bl	12c08 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
   181e8:	3002      	adds	r0, #2
   181ea:	b2c1      	uxtb	r1, r0
   181ec:	463a      	mov	r2, r7
   181ee:	4640      	mov	r0, r8
   181f0:	f7ff fb9a 	bl	17928 <lll_preempt_calc>
   181f4:	b938      	cbnz	r0, 18206 <prepare_cb+0xa2>
		ret = lll_prepare_done(lll);
   181f6:	4620      	mov	r0, r4
   181f8:	f7ff fb30 	bl	1785c <lll_prepare_done>
		LL_ASSERT(!ret);
   181fc:	b9e0      	cbnz	r0, 18238 <prepare_cb+0xd4>
}
   181fe:	2000      	movs	r0, #0
   18200:	b003      	add	sp, #12
   18202:	e8bd 81b0 	ldmia.w	sp!, {r4, r5, r7, r8, pc}
		radio_isr_set(isr_abort, lll);
   18206:	481c      	ldr	r0, [pc, #112]	; (18278 <prepare_cb+0x114>)
   18208:	4621      	mov	r1, r4
   1820a:	f000 ffdf 	bl	191cc <radio_isr_set>
		radio_disable();
   1820e:	f001 f8d3 	bl	193b8 <radio_disable>
}
   18212:	2000      	movs	r0, #0
   18214:	b003      	add	sp, #12
   18216:	e8bd 81b0 	ldmia.w	sp!, {r4, r5, r7, r8, pc}
		struct lll_filter *wl = ull_filter_lll_get(true);
   1821a:	2001      	movs	r0, #1
   1821c:	f7fe fffa 	bl	17214 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   18220:	7841      	ldrb	r1, [r0, #1]
   18222:	1c82      	adds	r2, r0, #2
   18224:	7800      	ldrb	r0, [r0, #0]
   18226:	f001 f9f1 	bl	1960c <radio_filter_configure>
   1822a:	e7cb      	b.n	181c4 <prepare_cb+0x60>
			ull_filter_lll_get(!!(lll->filter_policy));
   1822c:	7a60      	ldrb	r0, [r4, #9]
   1822e:	f010 0003 	ands.w	r0, r0, #3
   18232:	bf18      	it	ne
   18234:	2001      	movne	r0, #1
   18236:	e7f1      	b.n	1821c <prepare_cb+0xb8>
		LL_ASSERT(!ret);
   18238:	4a10      	ldr	r2, [pc, #64]	; (1827c <prepare_cb+0x118>)
   1823a:	4911      	ldr	r1, [pc, #68]	; (18280 <prepare_cb+0x11c>)
   1823c:	4811      	ldr	r0, [pc, #68]	; (18284 <prepare_cb+0x120>)
   1823e:	f240 334a 	movw	r3, #842	; 0x34a
   18242:	f004 fef7 	bl	1d034 <printk>
   18246:	4040      	eors	r0, r0
   18248:	f380 8811 	msr	BASEPRI, r0
   1824c:	f04f 0003 	mov.w	r0, #3
   18250:	df02      	svc	2
}
   18252:	2000      	movs	r0, #0
   18254:	b003      	add	sp, #12
   18256:	e8bd 81b0 	ldmia.w	sp!, {r4, r5, r7, r8, pc}
	if (unlikely(lll->conn && lll->conn->slave.initiated)) {
   1825a:	f893 3020 	ldrb.w	r3, [r3, #32]
   1825e:	07da      	lsls	r2, r3, #31
   18260:	d588      	bpl.n	18174 <prepare_cb+0x10>
		radio_isr_set(lll_isr_early_abort, lll);
   18262:	4809      	ldr	r0, [pc, #36]	; (18288 <prepare_cb+0x124>)
   18264:	4621      	mov	r1, r4
   18266:	f000 ffb1 	bl	191cc <radio_isr_set>
		radio_disable();
   1826a:	f001 f8a5 	bl	193b8 <radio_disable>
		return 0;
   1826e:	e7c6      	b.n	181fe <prepare_cb+0x9a>
   18270:	8e89bed6 	.word	0x8e89bed6
   18274:	00555555 	.word	0x00555555
   18278:	00017c39 	.word	0x00017c39
   1827c:	00023ba4 	.word	0x00023ba4
   18280:	00023448 	.word	0x00023448
   18284:	000230b4 	.word	0x000230b4
   18288:	00017aa5 	.word	0x00017aa5

0001828c <resume_prepare_cb>:
	evt = HDR_LLL2EVT(p->param);
   1828c:	68c3      	ldr	r3, [r0, #12]
{
   1828e:	b570      	push	{r4, r5, r6, lr}
	evt = HDR_LLL2EVT(p->param);
   18290:	681e      	ldr	r6, [r3, #0]
{
   18292:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   18294:	f7f7 fb70 	bl	f978 <ticker_ticks_now_get>
   18298:	4605      	mov	r5, r0
   1829a:	4630      	mov	r0, r6
   1829c:	f7ff fb36 	bl	1790c <lll_evt_offset_get>
	p->remainder = 0;
   182a0:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   182a2:	1a28      	subs	r0, r5, r0
	p->remainder = 0;
   182a4:	e9c4 0300 	strd	r0, r3, [r4]
	p->lazy = 0;
   182a8:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   182aa:	4620      	mov	r0, r4
}
   182ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   182b0:	f7ff bf58 	b.w	18164 <prepare_cb>

000182b4 <lll_adv_prepare>:
{
   182b4:	b510      	push	{r4, lr}
   182b6:	b082      	sub	sp, #8
   182b8:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   182ba:	f7ff fc7f 	bl	17bbc <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   182be:	2800      	cmp	r0, #0
   182c0:	db1a      	blt.n	182f8 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   182c2:	4a14      	ldr	r2, [pc, #80]	; (18314 <lll_adv_prepare+0x60>)
   182c4:	4914      	ldr	r1, [pc, #80]	; (18318 <lll_adv_prepare+0x64>)
   182c6:	4815      	ldr	r0, [pc, #84]	; (1831c <lll_adv_prepare+0x68>)
   182c8:	9400      	str	r4, [sp, #0]
   182ca:	2300      	movs	r3, #0
   182cc:	f7ff fa3c 	bl	17748 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   182d0:	b108      	cbz	r0, 182d6 <lll_adv_prepare+0x22>
   182d2:	3044      	adds	r0, #68	; 0x44
   182d4:	d101      	bne.n	182da <lll_adv_prepare+0x26>
}
   182d6:	b002      	add	sp, #8
   182d8:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   182da:	4a11      	ldr	r2, [pc, #68]	; (18320 <lll_adv_prepare+0x6c>)
   182dc:	4911      	ldr	r1, [pc, #68]	; (18324 <lll_adv_prepare+0x70>)
   182de:	4812      	ldr	r0, [pc, #72]	; (18328 <lll_adv_prepare+0x74>)
   182e0:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
   182e4:	f004 fea6 	bl	1d034 <printk>
   182e8:	4040      	eors	r0, r0
   182ea:	f380 8811 	msr	BASEPRI, r0
   182ee:	f04f 0003 	mov.w	r0, #3
   182f2:	df02      	svc	2
}
   182f4:	b002      	add	sp, #8
   182f6:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   182f8:	4a09      	ldr	r2, [pc, #36]	; (18320 <lll_adv_prepare+0x6c>)
   182fa:	490c      	ldr	r1, [pc, #48]	; (1832c <lll_adv_prepare+0x78>)
   182fc:	480a      	ldr	r0, [pc, #40]	; (18328 <lll_adv_prepare+0x74>)
   182fe:	f240 13e5 	movw	r3, #485	; 0x1e5
   18302:	f004 fe97 	bl	1d034 <printk>
   18306:	4040      	eors	r0, r0
   18308:	f380 8811 	msr	BASEPRI, r0
   1830c:	f04f 0003 	mov.w	r0, #3
   18310:	df02      	svc	2
   18312:	e7d6      	b.n	182c2 <lll_adv_prepare+0xe>
   18314:	00018165 	.word	0x00018165
   18318:	00017d7d 	.word	0x00017d7d
   1831c:	00017d09 	.word	0x00017d09
   18320:	00023ba4 	.word	0x00023ba4
   18324:	00023c18 	.word	0x00023c18
   18328:	000230b4 	.word	0x000230b4
   1832c:	00023b68 	.word	0x00023b68

00018330 <lll_adv_scan_req_check>:
{
   18330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((((lll->filter_policy & 0x01) == 0) &&
   18334:	f890 c009 	ldrb.w	ip, [r0, #9]
{
   18338:	f89d 8018 	ldrb.w	r8, [sp, #24]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1833c:	f01c 0f01 	tst.w	ip, #1
{
   18340:	460f      	mov	r7, r1
   18342:	4616      	mov	r6, r2
   18344:	461d      	mov	r5, r3
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   18346:	d009      	beq.n	1835c <lll_adv_scan_req_check+0x2c>
		(((lll->filter_policy & 0x01) != 0) &&
   18348:	f1b8 0f00 	cmp.w	r8, #0
   1834c:	d016      	beq.n	1837c <lll_adv_scan_req_check+0x4c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   1834e:	783b      	ldrb	r3, [r7, #0]
   18350:	ebb6 1fd3 	cmp.w	r6, r3, lsr #7
   18354:	d019      	beq.n	1838a <lll_adv_scan_req_check+0x5a>
{
   18356:	2000      	movs	r0, #0
}
   18358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1835c:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   1835e:	f811 0b02 	ldrb.w	r0, [r1], #2
   18362:	9a07      	ldr	r2, [sp, #28]
   18364:	f3c0 1080 	ubfx	r0, r0, #6, #1
   18368:	f7fe ff60 	bl	1722c <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x01) == 0) &&
   1836c:	2800      	cmp	r0, #0
   1836e:	d1ee      	bne.n	1834e <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & 0x01) != 0) &&
   18370:	7a63      	ldrb	r3, [r4, #9]
						rl_idx)) ||
   18372:	07db      	lsls	r3, r3, #31
   18374:	d5ef      	bpl.n	18356 <lll_adv_scan_req_check+0x26>
		(((lll->filter_policy & 0x01) != 0) &&
   18376:	f1b8 0f00 	cmp.w	r8, #0
   1837a:	d1e8      	bne.n	1834e <lll_adv_scan_req_check+0x1e>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1837c:	9b07      	ldr	r3, [sp, #28]
   1837e:	7818      	ldrb	r0, [r3, #0]
   18380:	f7fe ff18 	bl	171b4 <ull_filter_lll_irk_whitelisted>
   18384:	2800      	cmp	r0, #0
   18386:	d1e2      	bne.n	1834e <lll_adv_scan_req_check+0x1e>
   18388:	e7e5      	b.n	18356 <lll_adv_scan_req_check+0x26>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   1838a:	2206      	movs	r2, #6
   1838c:	f107 0108 	add.w	r1, r7, #8
   18390:	4628      	mov	r0, r5
   18392:	f007 f890 	bl	1f4b6 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   18396:	fab0 f080 	clz	r0, r0
   1839a:	0940      	lsrs	r0, r0, #5
}
   1839c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000183a0 <lll_adv_connect_ind_check>:
{
   183a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   183a4:	461f      	mov	r7, r3
	if (tgt_addr) {
   183a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   183a8:	f89d 9020 	ldrb.w	r9, [sp, #32]
   183ac:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   183b0:	4605      	mov	r5, r0
   183b2:	460c      	mov	r4, r1
   183b4:	4690      	mov	r8, r2
	if (tgt_addr) {
   183b6:	b9fb      	cbnz	r3, 183f8 <lll_adv_connect_ind_check+0x58>
	return ((((lll->filter_policy & 0x02) == 0) &&
   183b8:	7a43      	ldrb	r3, [r0, #9]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   183ba:	079a      	lsls	r2, r3, #30
   183bc:	d507      	bpl.n	183ce <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & 0x02) != 0) &&
   183be:	b1a6      	cbz	r6, 183ea <lll_adv_connect_ind_check+0x4a>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   183c0:	7823      	ldrb	r3, [r4, #0]
   183c2:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   183c6:	d03a      	beq.n	1843e <lll_adv_connect_ind_check+0x9e>
   183c8:	2000      	movs	r0, #0
}
   183ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   183ce:	f811 0b02 	ldrb.w	r0, [r1], #2
   183d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   183d4:	f3c0 1080 	ubfx	r0, r0, #6, #1
   183d8:	f7fe ff28 	bl	1722c <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x02) == 0) &&
   183dc:	2800      	cmp	r0, #0
   183de:	d1ef      	bne.n	183c0 <lll_adv_connect_ind_check+0x20>
		(((lll->filter_policy & 0x02) != 0) &&
   183e0:	7a6b      	ldrb	r3, [r5, #9]
						rl_idx)) ||
   183e2:	079b      	lsls	r3, r3, #30
   183e4:	d5f0      	bpl.n	183c8 <lll_adv_connect_ind_check+0x28>
		(((lll->filter_policy & 0x02) != 0) &&
   183e6:	2e00      	cmp	r6, #0
   183e8:	d1ea      	bne.n	183c0 <lll_adv_connect_ind_check+0x20>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   183ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   183ec:	7818      	ldrb	r0, [r3, #0]
   183ee:	f7fe fee1 	bl	171b4 <ull_filter_lll_irk_whitelisted>
   183f2:	2800      	cmp	r0, #0
   183f4:	d1e4      	bne.n	183c0 <lll_adv_connect_ind_check+0x20>
   183f6:	e7e7      	b.n	183c8 <lll_adv_connect_ind_check+0x28>
						      ci->connect_ind.init_addr,
   183f8:	468a      	mov	sl, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   183fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   183fc:	f81a 0b02 	ldrb.w	r0, [sl], #2
   18400:	f3c0 1080 	ubfx	r0, r0, #6, #1
   18404:	4651      	mov	r1, sl
   18406:	f7fe ff11 	bl	1722c <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   1840a:	2800      	cmp	r0, #0
   1840c:	d0dc      	beq.n	183c8 <lll_adv_connect_ind_check+0x28>
	return (tx_addr == ci->rx_addr) &&
   1840e:	7823      	ldrb	r3, [r4, #0]
   18410:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   18414:	d1d8      	bne.n	183c8 <lll_adv_connect_ind_check+0x28>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   18416:	4638      	mov	r0, r7
   18418:	2206      	movs	r2, #6
   1841a:	f104 0108 	add.w	r1, r4, #8
   1841e:	f007 f84a 	bl	1f4b6 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   18422:	2800      	cmp	r0, #0
   18424:	d1d0      	bne.n	183c8 <lll_adv_connect_ind_check+0x28>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   18426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18428:	7818      	ldrb	r0, [r3, #0]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   1842a:	28ff      	cmp	r0, #255	; 0xff
   1842c:	d011      	beq.n	18452 <lll_adv_connect_ind_check+0xb2>
   1842e:	7aab      	ldrb	r3, [r5, #10]
   18430:	2bff      	cmp	r3, #255	; 0xff
   18432:	d00e      	beq.n	18452 <lll_adv_connect_ind_check+0xb2>
		return rl_idx == lll->rl_idx;
   18434:	1ac0      	subs	r0, r0, r3
   18436:	fab0 f080 	clz	r0, r0
   1843a:	0940      	lsrs	r0, r0, #5
   1843c:	e7c5      	b.n	183ca <lll_adv_connect_ind_check+0x2a>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1843e:	2206      	movs	r2, #6
   18440:	f104 0108 	add.w	r1, r4, #8
   18444:	4638      	mov	r0, r7
   18446:	f007 f836 	bl	1f4b6 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   1844a:	fab0 f080 	clz	r0, r0
   1844e:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   18450:	e7bb      	b.n	183ca <lll_adv_connect_ind_check+0x2a>
	return (rx_addr == ci->tx_addr) &&
   18452:	7823      	ldrb	r3, [r4, #0]
   18454:	f3c3 1380 	ubfx	r3, r3, #6, #1
   18458:	454b      	cmp	r3, r9
   1845a:	d1b5      	bne.n	183c8 <lll_adv_connect_ind_check+0x28>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   1845c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1845e:	2206      	movs	r2, #6
   18460:	4651      	mov	r1, sl
   18462:	f007 f828 	bl	1f4b6 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   18466:	fab0 f080 	clz	r0, r0
   1846a:	0940      	lsrs	r0, r0, #5
   1846c:	e7ad      	b.n	183ca <lll_adv_connect_ind_check+0x2a>
   1846e:	bf00      	nop

00018470 <isr_rx>:
{
   18470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18474:	b089      	sub	sp, #36	; 0x24
   18476:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   18478:	f000 ffca 	bl	19410 <radio_is_done>
	if (trx_done) {
   1847c:	b2c0      	uxtb	r0, r0
   1847e:	b950      	cbnz	r0, 18496 <isr_rx+0x26>
	lll_isr_status_reset();
   18480:	f7ff fab8 	bl	179f4 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   18484:	4872      	ldr	r0, [pc, #456]	; (18650 <isr_rx+0x1e0>)
   18486:	4621      	mov	r1, r4
   18488:	f000 fea0 	bl	191cc <radio_isr_set>
}
   1848c:	b009      	add	sp, #36	; 0x24
   1848e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	radio_disable();
   18492:	f000 bf91 	b.w	193b8 <radio_disable>
		crc_ok = radio_crc_is_valid();
   18496:	f000 ffdb 	bl	19450 <radio_crc_is_valid>
   1849a:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   1849c:	f001 f8e8 	bl	19670 <radio_filter_has_match>
   184a0:	4607      	mov	r7, r0
		devmatch_id = radio_filter_match_get();
   184a2:	f001 f8ef 	bl	19684 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   184a6:	f001 facd 	bl	19a44 <radio_ar_has_match>
   184aa:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   184ac:	f001 faae 	bl	19a0c <radio_ar_match_get>
	if (crc_ok) {
   184b0:	b2ed      	uxtb	r5, r5
		irkmatch_id = radio_ar_match_get();
   184b2:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   184b4:	f001 f8a0 	bl	195f8 <radio_rssi_is_ready>
	lll_isr_status_reset();
   184b8:	f7ff fa9c 	bl	179f4 <lll_isr_status_reset>
	if (crc_ok) {
   184bc:	2d00      	cmp	r5, #0
   184be:	d0e1      	beq.n	18484 <isr_rx+0x14>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   184c0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   184c4:	d176      	bne.n	185b4 <isr_rx+0x144>
   184c6:	20ff      	movs	r0, #255	; 0xff
   184c8:	f88d 001f 	strb.w	r0, [sp, #31]
	pdu_rx = (void *)radio_pkt_scratch_get();
   184cc:	f000 ffce 	bl	1946c <radio_pkt_scratch_get>
   184d0:	7b23      	ldrb	r3, [r4, #12]
   184d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   184d6:	4680      	mov	r8, r0
   184d8:	6919      	ldr	r1, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   184da:	460b      	mov	r3, r1
		devmatch_ok = radio_filter_has_match();
   184dc:	b2ff      	uxtb	r7, r7
	tx_addr = pdu_adv->tx_addr;
   184de:	f813 5b02 	ldrb.w	r5, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   184e2:	f005 000f 	and.w	r0, r5, #15
   184e6:	2801      	cmp	r0, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   184e8:	bf08      	it	eq
   184ea:	f101 0908 	addeq.w	r9, r1, #8
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   184ee:	f898 1000 	ldrb.w	r1, [r8]
   184f2:	f001 010f 	and.w	r1, r1, #15
		tgt_addr = NULL;
   184f6:	bf18      	it	ne
   184f8:	f04f 0900 	movne.w	r9, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   184fc:	2903      	cmp	r1, #3
	tx_addr = pdu_adv->tx_addr;
   184fe:	f3c5 1280 	ubfx	r2, r5, #6, #1
	rx_addr = pdu_adv->rx_addr;
   18502:	ea4f 15d5 	mov.w	r5, r5, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   18506:	d05c      	beq.n	185c2 <isr_rx+0x152>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   18508:	2905      	cmp	r1, #5
   1850a:	d1bb      	bne.n	18484 <isr_rx+0x14>
   1850c:	f898 1001 	ldrb.w	r1, [r8, #1]
   18510:	2922      	cmp	r1, #34	; 0x22
   18512:	d1b7      	bne.n	18484 <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   18514:	f10d 011f 	add.w	r1, sp, #31
   18518:	9103      	str	r1, [sp, #12]
   1851a:	e9cd 9701 	strd	r9, r7, [sp, #4]
   1851e:	9500      	str	r5, [sp, #0]
   18520:	4641      	mov	r1, r8
   18522:	4620      	mov	r0, r4
   18524:	f7ff ff3c 	bl	183a0 <lll_adv_connect_ind_check>
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   18528:	2800      	cmp	r0, #0
   1852a:	d0ab      	beq.n	18484 <isr_rx+0x14>
					     devmatch_ok, &rl_idx) &&
   1852c:	6863      	ldr	r3, [r4, #4]
   1852e:	2b00      	cmp	r3, #0
   18530:	d0a8      	beq.n	18484 <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   18532:	2004      	movs	r0, #4
   18534:	f7f9 fe3e 	bl	121b4 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   18538:	2800      	cmp	r0, #0
   1853a:	d0a3      	beq.n	18484 <isr_rx+0x14>
		radio_isr_set(isr_abort, lll);
   1853c:	4845      	ldr	r0, [pc, #276]	; (18654 <isr_rx+0x1e4>)
   1853e:	4621      	mov	r1, r4
   18540:	f000 fe44 	bl	191cc <radio_isr_set>
		radio_disable();
   18544:	f000 ff38 	bl	193b8 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   18548:	f000 ff58 	bl	193fc <radio_is_ready>
   1854c:	2800      	cmp	r0, #0
   1854e:	d153      	bne.n	185f8 <isr_rx+0x188>
		lll->conn->slave.initiated = 1;
   18550:	6862      	ldr	r2, [r4, #4]
   18552:	f892 3020 	ldrb.w	r3, [r2, #32]
   18556:	f043 0301 	orr.w	r3, r3, #1
   1855a:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   1855e:	f7f9 fe47 	bl	121f0 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   18562:	2314      	movs	r3, #20
		rx = ull_pdu_rx_alloc();
   18564:	4605      	mov	r5, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   18566:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
   18568:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1856c:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   1856e:	4641      	mov	r1, r8
   18570:	2224      	movs	r2, #36	; 0x24
   18572:	301c      	adds	r0, #28
   18574:	f006 ffb0 	bl	1f4d8 <memcpy>
		ftr->param = lll;
   18578:	60ac      	str	r4, [r5, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   1857a:	f001 f927 	bl	197cc <radio_tmr_start_get>
   1857e:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   18580:	f001 f978 	bl	19874 <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   18584:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   18586:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   18588:	4608      	mov	r0, r1
   1858a:	f000 ff05 	bl	19398 <radio_tx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   1858e:	1a20      	subs	r0, r4, r0
   18590:	6168      	str	r0, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   18592:	b1a6      	cbz	r6, 185be <isr_rx+0x14e>
   18594:	f89d 301f 	ldrb.w	r3, [sp, #31]
   18598:	76ab      	strb	r3, [r5, #26]
			ftr->extra = ull_pdu_rx_alloc();
   1859a:	f7f9 fe29 	bl	121f0 <ull_pdu_rx_alloc>
   1859e:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
   185a0:	4629      	mov	r1, r5
   185a2:	6828      	ldr	r0, [r5, #0]
			ftr->extra = ull_pdu_rx_alloc();
   185a4:	60eb      	str	r3, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   185a6:	f7f9 fe39 	bl	1221c <ull_rx_put>
		ull_rx_sched();
   185aa:	f7f9 fe47 	bl	1223c <ull_rx_sched>
}
   185ae:	b009      	add	sp, #36	; 0x24
   185b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   185b4:	fa5f f088 	uxtb.w	r0, r8
   185b8:	f7fe fdaa 	bl	17110 <ull_filter_lll_rl_irk_idx>
   185bc:	e784      	b.n	184c8 <isr_rx+0x58>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   185be:	23ff      	movs	r3, #255	; 0xff
   185c0:	e7ea      	b.n	18598 <isr_rx+0x128>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   185c2:	f898 1001 	ldrb.w	r1, [r8, #1]
   185c6:	290c      	cmp	r1, #12
   185c8:	f47f af5c 	bne.w	18484 <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   185cc:	f1b9 0f00 	cmp.w	r9, #0
   185d0:	f47f af58 	bne.w	18484 <isr_rx+0x14>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   185d4:	f10d 011f 	add.w	r1, sp, #31
   185d8:	9101      	str	r1, [sp, #4]
   185da:	9700      	str	r7, [sp, #0]
   185dc:	4641      	mov	r1, r8
   185de:	4620      	mov	r0, r4
   185e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   185e4:	f7ff fea4 	bl	18330 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   185e8:	b9a0      	cbnz	r0, 18614 <isr_rx+0x1a4>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   185ea:	f898 1000 	ldrb.w	r1, [r8]
   185ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   185f2:	f001 010f 	and.w	r1, r1, #15
   185f6:	e787      	b.n	18508 <isr_rx+0x98>
		LL_ASSERT(!radio_is_ready());
   185f8:	4a17      	ldr	r2, [pc, #92]	; (18658 <isr_rx+0x1e8>)
   185fa:	4918      	ldr	r1, [pc, #96]	; (1865c <isr_rx+0x1ec>)
   185fc:	4818      	ldr	r0, [pc, #96]	; (18660 <isr_rx+0x1f0>)
   185fe:	f240 5345 	movw	r3, #1349	; 0x545
   18602:	f004 fd17 	bl	1d034 <printk>
   18606:	4040      	eors	r0, r0
   18608:	f380 8811 	msr	BASEPRI, r0
   1860c:	f04f 0003 	mov.w	r0, #3
   18610:	df02      	svc	2
   18612:	e79d      	b.n	18550 <isr_rx+0xe0>
		radio_isr_set(isr_done, lll);
   18614:	4621      	mov	r1, r4
   18616:	480e      	ldr	r0, [pc, #56]	; (18650 <isr_rx+0x1e0>)
   18618:	f000 fdd8 	bl	191cc <radio_isr_set>
		radio_switch_complete_and_disable();
   1861c:	f000 ffd6 	bl	195cc <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   18620:	7e23      	ldrb	r3, [r4, #24]
   18622:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   18626:	69e0      	ldr	r0, [r4, #28]
   18628:	f000 feb0 	bl	1938c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   1862c:	f000 fee6 	bl	193fc <radio_is_ready>
   18630:	2800      	cmp	r0, #0
   18632:	d0bc      	beq.n	185ae <isr_rx+0x13e>
   18634:	4a08      	ldr	r2, [pc, #32]	; (18658 <isr_rx+0x1e8>)
   18636:	4909      	ldr	r1, [pc, #36]	; (1865c <isr_rx+0x1ec>)
   18638:	4809      	ldr	r0, [pc, #36]	; (18660 <isr_rx+0x1f0>)
   1863a:	f44f 63a1 	mov.w	r3, #1288	; 0x508
   1863e:	f004 fcf9 	bl	1d034 <printk>
   18642:	4040      	eors	r0, r0
   18644:	f380 8811 	msr	BASEPRI, r0
   18648:	f04f 0003 	mov.w	r0, #3
   1864c:	df02      	svc	2
		if (!err) {
   1864e:	e7ae      	b.n	185ae <isr_rx+0x13e>
   18650:	00018121 	.word	0x00018121
   18654:	00017c39 	.word	0x00017c39
   18658:	00023ba4 	.word	0x00023ba4
   1865c:	00023bf0 	.word	0x00023bf0
   18660:	000230b4 	.word	0x000230b4

00018664 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   18664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18666:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   18668:	f7ff f9c4 	bl	179f4 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   1866c:	f7f9 feb0 	bl	123d0 <ull_event_done_extra_get>
	LL_ASSERT(e);
   18670:	4604      	mov	r4, r0
   18672:	2800      	cmp	r0, #0
   18674:	d033      	beq.n	186de <isr_done+0x7a>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
   18676:	4b21      	ldr	r3, [pc, #132]	; (186fc <isr_done+0x98>)
	e->crc_valid = crc_valid;
   18678:	4921      	ldr	r1, [pc, #132]	; (18700 <isr_done+0x9c>)

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   1867a:	4a22      	ldr	r2, [pc, #136]	; (18704 <isr_done+0xa0>)
	e->trx_cnt = trx_cnt;
   1867c:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   1867e:	7809      	ldrb	r1, [r1, #0]
	e->mic_state = mic_state;
   18680:	7812      	ldrb	r2, [r2, #0]
	e->crc_valid = crc_valid;
   18682:	71a1      	strb	r1, [r4, #6]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   18684:	2001      	movs	r0, #1
   18686:	7020      	strb	r0, [r4, #0]
	e->trx_cnt = trx_cnt;
   18688:	80a3      	strh	r3, [r4, #4]
	e->mic_state = mic_state;
   1868a:	71e2      	strb	r2, [r4, #7]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   1868c:	b11b      	cbz	r3, 18696 <isr_done+0x32>
		struct lll_conn *lll = param;

		if (lll->role) {
   1868e:	f995 301d 	ldrsb.w	r3, [r5, #29]
   18692:	2b00      	cmp	r3, #0
   18694:	db04      	blt.n	186a0 <isr_done+0x3c>
			lll->slave.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   18696:	4628      	mov	r0, r5
}
   18698:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1869c:	f7ff b9b8 	b.w	17a10 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   186a0:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   186a4:	f003 0307 	and.w	r3, r3, #7
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   186a8:	2b02      	cmp	r3, #2
   186aa:	d016      	beq.n	186da <isr_done+0x76>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   186ac:	2b04      	cmp	r3, #4
   186ae:	bf14      	ite	ne
   186b0:	2728      	movne	r7, #40	; 0x28
   186b2:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   186b6:	f001 f8c9 	bl	1984c <radio_tmr_aa_restore>
   186ba:	4606      	mov	r6, r0
   186bc:	f001 f8cc 	bl	19858 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   186c0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   186c2:	6127      	str	r7, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   186c4:	1a30      	subs	r0, r6, r0
			e->drift.window_widening_event_us =
   186c6:	e9c4 0302 	strd	r0, r3, [r4, #8]
			lll->slave.window_widening_event_us = 0;
   186ca:	2300      	movs	r3, #0
   186cc:	632b      	str	r3, [r5, #48]	; 0x30
			lll->slave.window_size_event_us = 0;
   186ce:	63ab      	str	r3, [r5, #56]	; 0x38
	lll_isr_cleanup(param);
   186d0:	4628      	mov	r0, r5
}
   186d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   186d6:	f7ff b99b 	b.w	17a10 <lll_isr_cleanup>
	switch (phy) {
   186da:	2718      	movs	r7, #24
   186dc:	e7eb      	b.n	186b6 <isr_done+0x52>
	LL_ASSERT(e);
   186de:	4a0a      	ldr	r2, [pc, #40]	; (18708 <isr_done+0xa4>)
   186e0:	490a      	ldr	r1, [pc, #40]	; (1870c <isr_done+0xa8>)
   186e2:	480b      	ldr	r0, [pc, #44]	; (18710 <isr_done+0xac>)
   186e4:	f44f 731d 	mov.w	r3, #628	; 0x274
   186e8:	f004 fca4 	bl	1d034 <printk>
   186ec:	4040      	eors	r0, r0
   186ee:	f380 8811 	msr	BASEPRI, r0
   186f2:	f04f 0003 	mov.w	r0, #3
   186f6:	df02      	svc	2
   186f8:	e7bd      	b.n	18676 <isr_done+0x12>
   186fa:	bf00      	nop
   186fc:	20002db0 	.word	0x20002db0
   18700:	20003566 	.word	0x20003566
   18704:	20003567 	.word	0x20003567
   18708:	00023c3c 	.word	0x00023c3c
   1870c:	000234f4 	.word	0x000234f4
   18710:	000230b4 	.word	0x000230b4

00018714 <lll_conn_init>:
{
   18714:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   18716:	f000 fea5 	bl	19464 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1871a:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   1871c:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1871e:	2101      	movs	r1, #1
   18720:	f361 0201 	bfi	r2, r1, #0, #2
}
   18724:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   18726:	701a      	strb	r2, [r3, #0]
}
   18728:	bd08      	pop	{r3, pc}
   1872a:	bf00      	nop

0001872c <lll_conn_reset>:
}
   1872c:	2000      	movs	r0, #0
   1872e:	4770      	bx	lr

00018730 <lll_conn_flush>:
}
   18730:	4770      	bx	lr
   18732:	bf00      	nop

00018734 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   18734:	4806      	ldr	r0, [pc, #24]	; (18750 <lll_conn_prepare_reset+0x1c>)
	crc_expire = 0U;
   18736:	4907      	ldr	r1, [pc, #28]	; (18754 <lll_conn_prepare_reset+0x20>)
	mic_state = LLL_CONN_MIC_NONE;
   18738:	4a07      	ldr	r2, [pc, #28]	; (18758 <lll_conn_prepare_reset+0x24>)
{
   1873a:	b410      	push	{r4}
	trx_cnt = 0U;
   1873c:	2300      	movs	r3, #0
   1873e:	4c07      	ldr	r4, [pc, #28]	; (1875c <lll_conn_prepare_reset+0x28>)
	crc_valid = 0U;
   18740:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   18742:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   18744:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   18746:	8023      	strh	r3, [r4, #0]
}
   18748:	f85d 4b04 	ldr.w	r4, [sp], #4
   1874c:	4770      	bx	lr
   1874e:	bf00      	nop
   18750:	20003566 	.word	0x20003566
   18754:	20003565 	.word	0x20003565
   18758:	20003567 	.word	0x20003567
   1875c:	20002db0 	.word	0x20002db0

00018760 <lll_conn_abort_cb>:
{
   18760:	b510      	push	{r4, lr}
	if (!prepare_param) {
   18762:	b1d0      	cbz	r0, 1879a <lll_conn_abort_cb+0x3a>
	err = lll_hfclock_off();
   18764:	460c      	mov	r4, r1
   18766:	f7ff fa41 	bl	17bec <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1876a:	2800      	cmp	r0, #0
   1876c:	db04      	blt.n	18778 <lll_conn_abort_cb+0x18>
	lll_done(param);
   1876e:	4620      	mov	r0, r4
}
   18770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   18774:	f7ff b874 	b.w	17860 <lll_done>
	LL_ASSERT(err >= 0);
   18778:	4a0b      	ldr	r2, [pc, #44]	; (187a8 <lll_conn_abort_cb+0x48>)
   1877a:	490c      	ldr	r1, [pc, #48]	; (187ac <lll_conn_abort_cb+0x4c>)
   1877c:	480c      	ldr	r0, [pc, #48]	; (187b0 <lll_conn_abort_cb+0x50>)
   1877e:	239c      	movs	r3, #156	; 0x9c
   18780:	f004 fc58 	bl	1d034 <printk>
   18784:	4040      	eors	r0, r0
   18786:	f380 8811 	msr	BASEPRI, r0
   1878a:	f04f 0003 	mov.w	r0, #3
   1878e:	df02      	svc	2
	lll_done(param);
   18790:	4620      	mov	r0, r4
}
   18792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   18796:	f7ff b863 	b.w	17860 <lll_done>
		radio_isr_set(isr_done, param);
   1879a:	4806      	ldr	r0, [pc, #24]	; (187b4 <lll_conn_abort_cb+0x54>)
   1879c:	f000 fd16 	bl	191cc <radio_isr_set>
}
   187a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   187a4:	f000 be08 	b.w	193b8 <radio_disable>
   187a8:	00023c3c 	.word	0x00023c3c
   187ac:	00023b68 	.word	0x00023b68
   187b0:	000230b4 	.word	0x000230b4
   187b4:	00018665 	.word	0x00018665

000187b8 <lll_conn_rx_pkt_set>:
{
   187b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   187ba:	4604      	mov	r4, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   187bc:	2001      	movs	r0, #1
   187be:	f7f9 fcf9 	bl	121b4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   187c2:	4606      	mov	r6, r0
   187c4:	b350      	cbz	r0, 1881c <lll_conn_rx_pkt_set+0x64>
	phy = lll->phy_rx;
   187c6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
	max_rx_octets = lll->max_rx_octets;
   187ca:	8fe7      	ldrh	r7, [r4, #62]	; 0x3e
	phy = lll->phy_rx;
   187cc:	f005 0507 	and.w	r5, r5, #7
	radio_phy_set(phy, 0);
   187d0:	2100      	movs	r1, #0
   187d2:	4628      	mov	r0, r5
   187d4:	f000 fd60 	bl	19298 <radio_phy_set>
	} else if (lll->enc_rx) {
   187d8:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   187dc:	006a      	lsls	r2, r5, #1
	} else if (lll->enc_rx) {
   187de:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   187e0:	f042 0201 	orr.w	r2, r2, #1
	} else if (lll->enc_rx) {
   187e4:	d510      	bpl.n	18808 <lll_conn_rx_pkt_set+0x50>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   187e6:	1d39      	adds	r1, r7, #4
   187e8:	b2c9      	uxtb	r1, r1
   187ea:	2008      	movs	r0, #8
   187ec:	f000 fd9a 	bl	19324 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   187f0:	f000 fe40 	bl	19474 <radio_pkt_decrypt_get>
   187f4:	4629      	mov	r1, r5
   187f6:	4602      	mov	r2, r0
   187f8:	f104 005f 	add.w	r0, r4, #95	; 0x5f
   187fc:	f001 f846 	bl	1988c <radio_ccm_rx_pkt_set>
}
   18800:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   18804:	f000 bdbc 	b.w	19380 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   18808:	2008      	movs	r0, #8
   1880a:	b2f9      	uxtb	r1, r7
   1880c:	f000 fd8a 	bl	19324 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   18810:	f106 001c 	add.w	r0, r6, #28
}
   18814:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   18818:	f000 bdb2 	b.w	19380 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   1881c:	4a06      	ldr	r2, [pc, #24]	; (18838 <lll_conn_rx_pkt_set+0x80>)
   1881e:	4907      	ldr	r1, [pc, #28]	; (1883c <lll_conn_rx_pkt_set+0x84>)
   18820:	4807      	ldr	r0, [pc, #28]	; (18840 <lll_conn_rx_pkt_set+0x88>)
   18822:	f240 13d9 	movw	r3, #473	; 0x1d9
   18826:	f004 fc05 	bl	1d034 <printk>
   1882a:	4040      	eors	r0, r0
   1882c:	f380 8811 	msr	BASEPRI, r0
   18830:	f04f 0003 	mov.w	r0, #3
   18834:	df02      	svc	2
   18836:	e7c6      	b.n	187c6 <lll_conn_rx_pkt_set+0xe>
   18838:	00023c3c 	.word	0x00023c3c
   1883c:	00023c88 	.word	0x00023c88
   18840:	000230b4 	.word	0x000230b4

00018844 <lll_conn_isr_tx>:
{
   18844:	b538      	push	{r3, r4, r5, lr}
   18846:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   18848:	f7ff f8c2 	bl	179d0 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1884c:	2096      	movs	r0, #150	; 0x96
   1884e:	f000 ff2f 	bl	196b0 <radio_tmr_tifs_set>
				     lll->phy_flags);
   18852:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   18856:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1885a:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1885e:	f000 0007 	and.w	r0, r0, #7
   18862:	f002 0207 	and.w	r2, r2, #7
   18866:	2100      	movs	r1, #0
   18868:	f000 fe50 	bl	1950c <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   1886c:	4620      	mov	r0, r4
   1886e:	f7ff ffa3 	bl	187b8 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   18872:	f000 fdc3 	bl	193fc <radio_is_ready>
   18876:	bb58      	cbnz	r0, 188d0 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   18878:	f001 f802 	bl	19880 <radio_tmr_tifs_base_get>
   1887c:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1887e:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   18882:	2101      	movs	r1, #1
   18884:	f000 0007 	and.w	r0, r0, #7
   18888:	f000 fd8a 	bl	193a0 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   1888c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   18890:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   18894:	4405      	add	r5, r0
   18896:	2b02      	cmp	r3, #2
   18898:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   1889c:	d016      	beq.n	188cc <lll_conn_isr_tx+0x88>
		return 376;
   1889e:	2b04      	cmp	r3, #4
   188a0:	bf14      	ite	ne
   188a2:	2328      	movne	r3, #40	; 0x28
   188a4:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   188a8:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   188ac:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   188b0:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   188b4:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   188b6:	f000 fd6f 	bl	19398 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   188ba:	1a28      	subs	r0, r5, r0
   188bc:	f000 ff98 	bl	197f0 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   188c0:	4621      	mov	r1, r4
   188c2:	480a      	ldr	r0, [pc, #40]	; (188ec <lll_conn_isr_tx+0xa8>)
}
   188c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   188c8:	f000 bc80 	b.w	191cc <radio_isr_set>
	switch (phy) {
   188cc:	2318      	movs	r3, #24
   188ce:	e7eb      	b.n	188a8 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   188d0:	4a07      	ldr	r2, [pc, #28]	; (188f0 <lll_conn_isr_tx+0xac>)
   188d2:	4908      	ldr	r1, [pc, #32]	; (188f4 <lll_conn_isr_tx+0xb0>)
   188d4:	4808      	ldr	r0, [pc, #32]	; (188f8 <lll_conn_isr_tx+0xb4>)
   188d6:	f240 13a5 	movw	r3, #421	; 0x1a5
   188da:	f004 fbab 	bl	1d034 <printk>
   188de:	4040      	eors	r0, r0
   188e0:	f380 8811 	msr	BASEPRI, r0
   188e4:	f04f 0003 	mov.w	r0, #3
   188e8:	df02      	svc	2
   188ea:	e7c5      	b.n	18878 <lll_conn_isr_tx+0x34>
   188ec:	00018a35 	.word	0x00018a35
   188f0:	00023c3c 	.word	0x00023c3c
   188f4:	00023bf0 	.word	0x00023bf0
   188f8:	000230b4 	.word	0x000230b4

000188fc <lll_conn_tx_pkt_set>:
{
   188fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   188fe:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   18900:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
	max_tx_octets = lll->max_tx_octets;
   18904:	8f86      	ldrh	r6, [r0, #60]	; 0x3c
	phy = lll->phy_tx;
   18906:	f001 0407 	and.w	r4, r1, #7
{
   1890a:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   1890c:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   18910:	4620      	mov	r0, r4
   18912:	f000 fcc1 	bl	19298 <radio_phy_set>
	} else if (lll->enc_tx) {
   18916:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
				    (phy << 1) | 0x01);
   1891a:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   1891c:	06db      	lsls	r3, r3, #27
		radio_pkt_configure(8, (max_tx_octets + 4U),
   1891e:	b2f1      	uxtb	r1, r6
   18920:	f042 0201 	orr.w	r2, r2, #1
	} else if (lll->enc_tx) {
   18924:	d50d      	bpl.n	18942 <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   18926:	3104      	adds	r1, #4
   18928:	b2c9      	uxtb	r1, r1
   1892a:	2008      	movs	r0, #8
   1892c:	f000 fcfa 	bl	19324 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   18930:	4639      	mov	r1, r7
   18932:	f105 0080 	add.w	r0, r5, #128	; 0x80
   18936:	f000 ffdf 	bl	198f8 <radio_ccm_tx_pkt_set>
}
   1893a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1893e:	f000 bd25 	b.w	1938c <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   18942:	2008      	movs	r0, #8
   18944:	f000 fcee 	bl	19324 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   18948:	4638      	mov	r0, r7
}
   1894a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   1894e:	f000 bd1d 	b.w	1938c <radio_pkt_tx_set>
   18952:	bf00      	nop

00018954 <lll_conn_pdu_tx_prep>:
{
   18954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18958:	4604      	mov	r4, r0
   1895a:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1895c:	aa01      	add	r2, sp, #4
   1895e:	6c80      	ldr	r0, [r0, #72]	; 0x48
{
   18960:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   18962:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   18964:	f7f5 fd8e 	bl	e484 <memq_peek>
	if (lll->empty || !link) {
   18968:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1896c:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1896e:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   18970:	d432      	bmi.n	189d8 <lll_conn_pdu_tx_prep+0x84>
   18972:	2800      	cmp	r0, #0
   18974:	d04e      	beq.n	18a14 <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   18976:	9b01      	ldr	r3, [sp, #4]
   18978:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
   1897c:	f103 0804 	add.w	r8, r3, #4
		if (!lll->packet_tx_head_len) {
   18980:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   18984:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   18988:	b913      	cbnz	r3, 18990 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   1898a:	786b      	ldrb	r3, [r5, #1]
   1898c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (lll->packet_tx_head_offset) {
   18990:	b137      	cbz	r7, 189a0 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   18992:	f818 2007 	ldrb.w	r2, [r8, r7]
   18996:	2101      	movs	r1, #1
   18998:	f361 0201 	bfi	r2, r1, #0, #2
   1899c:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   189a0:	1bdb      	subs	r3, r3, r7
   189a2:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   189a4:	4620      	mov	r0, r4
   189a6:	f7fd fb0b 	bl	15fc0 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   189aa:	786b      	ldrb	r3, [r5, #1]
   189ac:	4283      	cmp	r3, r0
   189ae:	d924      	bls.n	189fa <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   189b0:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   189b2:	f818 3007 	ldrb.w	r3, [r8, r7]
   189b6:	f043 0310 	orr.w	r3, r3, #16
   189ba:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   189be:	f818 3007 	ldrb.w	r3, [r8, r7]
   189c2:	f36f 1347 	bfc	r3, #5, #3
   189c6:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   189ca:	2300      	movs	r3, #0
   189cc:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   189ce:	f8c9 5000 	str.w	r5, [r9]
}
   189d2:	b003      	add	sp, #12
   189d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   189d8:	f043 0304 	orr.w	r3, r3, #4
   189dc:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   189e0:	f000 fd40 	bl	19464 <radio_pkt_empty_get>
   189e4:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   189e6:	b1e6      	cbz	r6, 18a22 <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   189e8:	7803      	ldrb	r3, [r0, #0]
   189ea:	f043 0310 	orr.w	r3, r3, #16
   189ee:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   189f0:	f8c9 5000 	str.w	r5, [r9]
}
   189f4:	b003      	add	sp, #12
   189f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   189fa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   189fc:	6832      	ldr	r2, [r6, #0]
   189fe:	429a      	cmp	r2, r3
			p->md = 1U;
   18a00:	f818 3007 	ldrb.w	r3, [r8, r7]
   18a04:	bf14      	ite	ne
   18a06:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   18a0a:	f36f 1304 	bfceq	r3, #4, #1
   18a0e:	f808 3007 	strb.w	r3, [r8, r7]
   18a12:	e7d4      	b.n	189be <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   18a14:	f043 0304 	orr.w	r3, r3, #4
   18a18:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   18a1c:	f000 fd22 	bl	19464 <radio_pkt_empty_get>
   18a20:	4605      	mov	r5, r0
			p->md = 0U;
   18a22:	782b      	ldrb	r3, [r5, #0]
   18a24:	f36f 1304 	bfc	r3, #4, #1
   18a28:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   18a2a:	f8c9 5000 	str.w	r5, [r9]
}
   18a2e:	b003      	add	sp, #12
   18a30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00018a34 <lll_conn_isr_rx>:
{
   18a34:	b5f0      	push	{r4, r5, r6, r7, lr}
   18a36:	b083      	sub	sp, #12
   18a38:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   18a3a:	f000 fce9 	bl	19410 <radio_is_done>
	if (trx_done) {
   18a3e:	b2c0      	uxtb	r0, r0
   18a40:	b950      	cbnz	r0, 18a58 <lll_conn_isr_rx+0x24>
	lll_isr_rx_status_reset();
   18a42:	f7fe ffcd 	bl	179e0 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   18a46:	48b5      	ldr	r0, [pc, #724]	; (18d1c <lll_conn_isr_rx+0x2e8>)
   18a48:	4621      	mov	r1, r4
   18a4a:	f000 fbbf 	bl	191cc <radio_isr_set>
}
   18a4e:	b003      	add	sp, #12
   18a50:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		radio_disable();
   18a54:	f000 bcb0 	b.w	193b8 <radio_disable>
		crc_ok = radio_crc_is_valid();
   18a58:	f000 fcfa 	bl	19450 <radio_crc_is_valid>
   18a5c:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   18a5e:	f000 fdcb 	bl	195f8 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   18a62:	f7fe ffbd 	bl	179e0 <lll_isr_rx_status_reset>
	trx_cnt++;
   18a66:	4aae      	ldr	r2, [pc, #696]	; (18d20 <lll_conn_isr_rx+0x2ec>)
   18a68:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   18a6a:	2001      	movs	r0, #1
	trx_cnt++;
   18a6c:	4403      	add	r3, r0
   18a6e:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   18a70:	f7f9 fba0 	bl	121b4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   18a74:	4606      	mov	r6, r0
   18a76:	2800      	cmp	r0, #0
   18a78:	f000 80ca 	beq.w	18c10 <lll_conn_isr_rx+0x1dc>
	if (crc_ok) {
   18a7c:	2d00      	cmp	r5, #0
   18a7e:	d15a      	bne.n	18b36 <lll_conn_isr_rx+0x102>
		if (crc_expire == 0U) {
   18a80:	4ba8      	ldr	r3, [pc, #672]	; (18d24 <lll_conn_isr_rx+0x2f0>)
   18a82:	781f      	ldrb	r7, [r3, #0]
   18a84:	2f00      	cmp	r7, #0
   18a86:	f040 80b2 	bne.w	18bee <lll_conn_isr_rx+0x1ba>
		crc_expire--;
   18a8a:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18a8c:	a901      	add	r1, sp, #4
   18a8e:	4620      	mov	r0, r4
		crc_expire--;
   18a90:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18a92:	f7ff ff5f 	bl	18954 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   18a96:	2096      	movs	r0, #150	; 0x96
   18a98:	f000 fe0a 	bl	196b0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   18a9c:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   18aa0:	f000 0007 	and.w	r0, r0, #7
   18aa4:	f000 fcea 	bl	1947c <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   18aa8:	489f      	ldr	r0, [pc, #636]	; (18d28 <lll_conn_isr_rx+0x2f4>)
   18aaa:	4621      	mov	r1, r4
   18aac:	f000 fb8e 	bl	191cc <radio_isr_set>
		radio_tmr_end_capture();
   18ab0:	f000 fed8 	bl	19864 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   18ab4:	9901      	ldr	r1, [sp, #4]
   18ab6:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
	pdu_data_tx->nesn = lll->nesn;
   18aba:	780b      	ldrb	r3, [r1, #0]
   18abc:	f023 000c 	bic.w	r0, r3, #12
   18ac0:	f3c2 0340 	ubfx	r3, r2, #1, #1
   18ac4:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   18ac6:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   18aca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   18ace:	4303      	orrs	r3, r0
   18ad0:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   18ad2:	4620      	mov	r0, r4
   18ad4:	f7ff ff12 	bl	188fc <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   18ad8:	f000 fc90 	bl	193fc <radio_is_ready>
   18adc:	2800      	cmp	r0, #0
   18ade:	f040 80d0 	bne.w	18c82 <lll_conn_isr_rx+0x24e>
	if (!radio_tmr_aa_restore()) {
   18ae2:	f000 feb3 	bl	1984c <radio_tmr_aa_restore>
   18ae6:	b1e8      	cbz	r0, 18b24 <lll_conn_isr_rx+0xf0>
	if (tx_release) {
   18ae8:	b315      	cbz	r5, 18b30 <lll_conn_isr_rx+0xfc>
		LL_ASSERT(lll->handle != 0xFFFF);
   18aea:	89a0      	ldrh	r0, [r4, #12]
   18aec:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18af0:	4298      	cmp	r0, r3
   18af2:	f000 80dd 	beq.w	18cb0 <lll_conn_isr_rx+0x27c>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   18af6:	4629      	mov	r1, r5
   18af8:	f7fd f914 	bl	15d24 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   18afc:	b177      	cbz	r7, 18b1c <lll_conn_isr_rx+0xe8>
		if (lll->enc_rx) {
   18afe:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18b02:	071b      	lsls	r3, r3, #28
   18b04:	f100 80cb 	bmi.w	18c9e <lll_conn_isr_rx+0x26a>
		ull_pdu_rx_alloc();
   18b08:	f7f9 fb72 	bl	121f0 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   18b0c:	2303      	movs	r3, #3
   18b0e:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   18b10:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   18b12:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   18b14:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   18b16:	4631      	mov	r1, r6
   18b18:	f7f9 fb80 	bl	1221c <ull_rx_put>
		ull_rx_sched();
   18b1c:	f7f9 fb8e 	bl	1223c <ull_rx_sched>
}
   18b20:	b003      	add	sp, #12
   18b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   18b24:	f000 fe86 	bl	19834 <radio_tmr_aa_get>
   18b28:	f000 fe8a 	bl	19840 <radio_tmr_aa_save>
	if (tx_release) {
   18b2c:	2d00      	cmp	r5, #0
   18b2e:	d1dc      	bne.n	18aea <lll_conn_isr_rx+0xb6>
	if (is_rx_enqueue) {
   18b30:	2f00      	cmp	r7, #0
   18b32:	d1e4      	bne.n	18afe <lll_conn_isr_rx+0xca>
   18b34:	e7f4      	b.n	18b20 <lll_conn_isr_rx+0xec>
	if (lll->enc_rx) {
   18b36:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18b3a:	0719      	lsls	r1, r3, #28
	pdu_data_rx = (void *)node_rx->pdu;
   18b3c:	f106 071c 	add.w	r7, r6, #28
	if (lll->enc_rx) {
   18b40:	f100 8095 	bmi.w	18c6e <lll_conn_isr_rx+0x23a>
	if (pdu_data_rx->nesn != lll->sn) {
   18b44:	7f32      	ldrb	r2, [r6, #28]
   18b46:	f003 0101 	and.w	r1, r3, #1
   18b4a:	f3c2 0080 	ubfx	r0, r2, #2, #1
   18b4e:	4288      	cmp	r0, r1
   18b50:	d06e      	beq.n	18c30 <lll_conn_isr_rx+0x1fc>
		if (lll->role) {
   18b52:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   18b56:	f081 0101 	eor.w	r1, r1, #1
   18b5a:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   18b5e:	2a00      	cmp	r2, #0
		lll->sn++;
   18b60:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (lll->role) {
   18b64:	da05      	bge.n	18b72 <lll_conn_isr_rx+0x13e>
			lll->slave.latency_enabled = 1;
   18b66:	f894 3020 	ldrb.w	r3, [r4, #32]
   18b6a:	f043 0302 	orr.w	r3, r3, #2
   18b6e:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   18b72:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18b76:	075a      	lsls	r2, r3, #29
   18b78:	f100 80a9 	bmi.w	18cce <lll_conn_isr_rx+0x29a>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   18b7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   18b80:	aa01      	add	r2, sp, #4
   18b82:	f7f5 fc7f 	bl	e484 <memq_peek>
		if (link) {
   18b86:	4605      	mov	r5, r0
   18b88:	2800      	cmp	r0, #0
   18b8a:	f000 80a7 	beq.w	18cdc <lll_conn_isr_rx+0x2a8>
					       lll->packet_tx_head_offset);
   18b8e:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
			pdu_data_tx_len = pdu_data_tx->len;
   18b92:	9b01      	ldr	r3, [sp, #4]
   18b94:	4413      	add	r3, r2
   18b96:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   18b98:	b171      	cbz	r1, 18bb8 <lll_conn_isr_rx+0x184>
				if (lll->enc_tx) {
   18b9a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18b9e:	06db      	lsls	r3, r3, #27
   18ba0:	d50a      	bpl.n	18bb8 <lll_conn_isr_rx+0x184>
					lll->ccm_tx.counter++;
   18ba2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   18ba6:	3301      	adds	r3, #1
   18ba8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   18bac:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   18bb0:	f143 0300 	adc.w	r3, r3, #0
   18bb4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   18bb8:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   18bbc:	440a      	add	r2, r1
   18bbe:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   18bc0:	429a      	cmp	r2, r3
   18bc2:	f0c0 808f 	bcc.w	18ce4 <lll_conn_isr_rx+0x2b0>
			} else if (offset == lll->packet_tx_head_len) {
   18bc6:	f000 80bf 	beq.w	18d48 <lll_conn_isr_rx+0x314>
				LL_ASSERT(0);
   18bca:	4a58      	ldr	r2, [pc, #352]	; (18d2c <lll_conn_isr_rx+0x2f8>)
   18bcc:	4958      	ldr	r1, [pc, #352]	; (18d30 <lll_conn_isr_rx+0x2fc>)
   18bce:	4859      	ldr	r0, [pc, #356]	; (18d34 <lll_conn_isr_rx+0x300>)
   18bd0:	f44f 7340 	mov.w	r3, #768	; 0x300
   18bd4:	f004 fa2e 	bl	1d034 <printk>
   18bd8:	4040      	eors	r0, r0
   18bda:	f380 8811 	msr	BASEPRI, r0
   18bde:	f04f 0003 	mov.w	r0, #3
   18be2:	df02      	svc	2
	tx_release = NULL;
   18be4:	2500      	movs	r5, #0
   18be6:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18bea:	7f32      	ldrb	r2, [r6, #28]
   18bec:	e021      	b.n	18c32 <lll_conn_isr_rx+0x1fe>
		crc_expire--;
   18bee:	3f01      	subs	r7, #1
   18bf0:	b2ff      	uxtb	r7, r7
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18bf2:	a901      	add	r1, sp, #4
   18bf4:	4620      	mov	r0, r4
		crc_expire--;
   18bf6:	701f      	strb	r7, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18bf8:	f7ff feac 	bl	18954 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   18bfc:	2f00      	cmp	r7, #0
   18bfe:	f040 80fe 	bne.w	18dfe <lll_conn_isr_rx+0x3ca>
		radio_isr_set(isr_done, param);
   18c02:	4846      	ldr	r0, [pc, #280]	; (18d1c <lll_conn_isr_rx+0x2e8>)
   18c04:	4621      	mov	r1, r4
   18c06:	f000 fae1 	bl	191cc <radio_isr_set>
			radio_switch_complete_and_disable();
   18c0a:	f000 fcdf 	bl	195cc <radio_switch_complete_and_disable>
   18c0e:	e751      	b.n	18ab4 <lll_conn_isr_rx+0x80>
	LL_ASSERT(node_rx);
   18c10:	4a46      	ldr	r2, [pc, #280]	; (18d2c <lll_conn_isr_rx+0x2f8>)
   18c12:	4949      	ldr	r1, [pc, #292]	; (18d38 <lll_conn_isr_rx+0x304>)
   18c14:	4847      	ldr	r0, [pc, #284]	; (18d34 <lll_conn_isr_rx+0x300>)
   18c16:	23d1      	movs	r3, #209	; 0xd1
   18c18:	f004 fa0c 	bl	1d034 <printk>
   18c1c:	4040      	eors	r0, r0
   18c1e:	f380 8811 	msr	BASEPRI, r0
   18c22:	f04f 0003 	mov.w	r0, #3
   18c26:	df02      	svc	2
	if (crc_ok) {
   18c28:	2d00      	cmp	r5, #0
   18c2a:	f43f af29 	beq.w	18a80 <lll_conn_isr_rx+0x4c>
   18c2e:	e782      	b.n	18b36 <lll_conn_isr_rx+0x102>
	tx_release = NULL;
   18c30:	2500      	movs	r5, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   18c32:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   18c36:	f3c3 0340 	ubfx	r3, r3, #1, #1
   18c3a:	429a      	cmp	r2, r3
   18c3c:	d059      	beq.n	18cf2 <lll_conn_isr_rx+0x2be>
	is_rx_enqueue = 0U;
   18c3e:	2700      	movs	r7, #0
		crc_expire = 0U;
   18c40:	4a38      	ldr	r2, [pc, #224]	; (18d24 <lll_conn_isr_rx+0x2f0>)
		crc_valid = 1U;
   18c42:	4b3e      	ldr	r3, [pc, #248]	; (18d3c <lll_conn_isr_rx+0x308>)
		crc_expire = 0U;
   18c44:	2100      	movs	r1, #0
   18c46:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18c48:	4620      	mov	r0, r4
		crc_valid = 1U;
   18c4a:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18c4c:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   18c4e:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18c50:	f7ff fe80 	bl	18954 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   18c54:	7f33      	ldrb	r3, [r6, #28]
   18c56:	06d9      	lsls	r1, r3, #27
   18c58:	f53f af1d 	bmi.w	18a96 <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   18c5c:	9b01      	ldr	r3, [sp, #4]
   18c5e:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   18c60:	06d2      	lsls	r2, r2, #27
   18c62:	f53f af18 	bmi.w	18a96 <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   18c66:	785b      	ldrb	r3, [r3, #1]
   18c68:	2b00      	cmp	r3, #0
   18c6a:	d0ca      	beq.n	18c02 <lll_conn_isr_rx+0x1ce>
   18c6c:	e713      	b.n	18a96 <lll_conn_isr_rx+0x62>
		pkt_decrypt = radio_pkt_decrypt_get();
   18c6e:	f000 fc01 	bl	19474 <radio_pkt_decrypt_get>
		memcpy((void *)pdu_data_rx, (void *)pkt_decrypt,
   18c72:	2203      	movs	r2, #3
		pkt_decrypt = radio_pkt_decrypt_get();
   18c74:	4601      	mov	r1, r0
		memcpy((void *)pdu_data_rx, (void *)pkt_decrypt,
   18c76:	4638      	mov	r0, r7
   18c78:	f006 fc2e 	bl	1f4d8 <memcpy>
   18c7c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18c80:	e760      	b.n	18b44 <lll_conn_isr_rx+0x110>
	LL_ASSERT(!radio_is_ready());
   18c82:	4a2a      	ldr	r2, [pc, #168]	; (18d2c <lll_conn_isr_rx+0x2f8>)
   18c84:	492e      	ldr	r1, [pc, #184]	; (18d40 <lll_conn_isr_rx+0x30c>)
   18c86:	482b      	ldr	r0, [pc, #172]	; (18d34 <lll_conn_isr_rx+0x300>)
   18c88:	f240 133d 	movw	r3, #317	; 0x13d
   18c8c:	f004 f9d2 	bl	1d034 <printk>
   18c90:	4040      	eors	r0, r0
   18c92:	f380 8811 	msr	BASEPRI, r0
   18c96:	f04f 0003 	mov.w	r0, #3
   18c9a:	df02      	svc	2
   18c9c:	e721      	b.n	18ae2 <lll_conn_isr_rx+0xae>
			pkt_decrypt_data = (uint8_t *)radio_pkt_decrypt_get() +
   18c9e:	f000 fbe9 	bl	19474 <radio_pkt_decrypt_get>
			memcpy((void *)pdu_data_rx->lldata,
   18ca2:	7f72      	ldrb	r2, [r6, #29]
   18ca4:	1cc1      	adds	r1, r0, #3
   18ca6:	f106 001f 	add.w	r0, r6, #31
   18caa:	f006 fc15 	bl	1f4d8 <memcpy>
   18cae:	e72b      	b.n	18b08 <lll_conn_isr_rx+0xd4>
		LL_ASSERT(lll->handle != 0xFFFF);
   18cb0:	4a1e      	ldr	r2, [pc, #120]	; (18d2c <lll_conn_isr_rx+0x2f8>)
   18cb2:	4924      	ldr	r1, [pc, #144]	; (18d44 <lll_conn_isr_rx+0x310>)
   18cb4:	481f      	ldr	r0, [pc, #124]	; (18d34 <lll_conn_isr_rx+0x300>)
   18cb6:	f44f 73a6 	mov.w	r3, #332	; 0x14c
   18cba:	f004 f9bb 	bl	1d034 <printk>
   18cbe:	4040      	eors	r0, r0
   18cc0:	f380 8811 	msr	BASEPRI, r0
   18cc4:	f04f 0003 	mov.w	r0, #3
   18cc8:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   18cca:	89a0      	ldrh	r0, [r4, #12]
   18ccc:	e713      	b.n	18af6 <lll_conn_isr_rx+0xc2>
			lll->empty = 0;
   18cce:	f36f 0382 	bfc	r3, #2, #1
   18cd2:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			pdu_data_tx = (void *)radio_pkt_empty_get();
   18cd6:	f000 fbc5 	bl	19464 <radio_pkt_empty_get>
	tx_release = NULL;
   18cda:	2500      	movs	r5, #0
   18cdc:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18ce0:	7f32      	ldrb	r2, [r6, #28]
   18ce2:	e7a6      	b.n	18c32 <lll_conn_isr_rx+0x1fe>
				lll->packet_tx_head_offset = offset;
   18ce4:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
   18ce8:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18cec:	7f32      	ldrb	r2, [r6, #28]
	tx_release = NULL;
   18cee:	2500      	movs	r5, #0
   18cf0:	e79f      	b.n	18c32 <lll_conn_isr_rx+0x1fe>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   18cf2:	2003      	movs	r0, #3
   18cf4:	f7f9 fa5e 	bl	121b4 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   18cf8:	2800      	cmp	r0, #0
   18cfa:	d0a0      	beq.n	18c3e <lll_conn_isr_rx+0x20a>
		lll->nesn++;
   18cfc:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18d00:	f083 0302 	eor.w	r3, r3, #2
   18d04:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (pdu_data_rx->len != 0) {
   18d08:	7f73      	ldrb	r3, [r6, #29]
   18d0a:	2b00      	cmp	r3, #0
   18d0c:	d097      	beq.n	18c3e <lll_conn_isr_rx+0x20a>
			if (lll->enc_rx) {
   18d0e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18d12:	0718      	lsls	r0, r3, #28
   18d14:	d429      	bmi.n	18d6a <lll_conn_isr_rx+0x336>
			*is_rx_enqueue = 1U;
   18d16:	2701      	movs	r7, #1
   18d18:	e792      	b.n	18c40 <lll_conn_isr_rx+0x20c>
   18d1a:	bf00      	nop
   18d1c:	00018665 	.word	0x00018665
   18d20:	20002db0 	.word	0x20002db0
   18d24:	20003565 	.word	0x20003565
   18d28:	00018845 	.word	0x00018845
   18d2c:	00023c3c 	.word	0x00023c3c
   18d30:	0002314c 	.word	0x0002314c
   18d34:	000230b4 	.word	0x000230b4
   18d38:	00023c88 	.word	0x00023c88
   18d3c:	20003566 	.word	0x20003566
   18d40:	00023bf0 	.word	0x00023bf0
   18d44:	00023c98 	.word	0x00023c98
				lll->packet_tx_head_len = 0;
   18d48:	2200      	movs	r2, #0
   18d4a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				memq_dequeue(lll->memq_tx.tail,
   18d4e:	f104 0148 	add.w	r1, r4, #72	; 0x48
   18d52:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   18d54:	f7f5 fb9e 	bl	e494 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   18d58:	9b01      	ldr	r3, [sp, #4]
   18d5a:	7f32      	ldrb	r2, [r6, #28]
   18d5c:	6819      	ldr	r1, [r3, #0]
   18d5e:	6029      	str	r1, [r5, #0]
				tx->next = link;
   18d60:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   18d62:	9d01      	ldr	r5, [sp, #4]
				FORCE_MD_CNT_SET();
   18d64:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   18d68:	e763      	b.n	18c32 <lll_conn_isr_rx+0x1fe>
				done = radio_ccm_is_done();
   18d6a:	f000 fdef 	bl	1994c <radio_ccm_is_done>
				LL_ASSERT(done);
   18d6e:	b3c0      	cbz	r0, 18de2 <lll_conn_isr_rx+0x3ae>
				bool mic_failure = !radio_ccm_mic_is_valid();
   18d70:	f000 fe0e 	bl	19990 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   18d74:	bb28      	cbnz	r0, 18dc2 <lll_conn_isr_rx+0x38e>
				    lll->ccm_rx.counter == 0 &&
   18d76:	f8d4 206f 	ldr.w	r2, [r4, #111]	; 0x6f
   18d7a:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
				if (mic_failure &&
   18d7e:	4313      	orrs	r3, r2
   18d80:	d104      	bne.n	18d8c <lll_conn_isr_rx+0x358>
				    (pdu_data_rx->ll_id ==
   18d82:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   18d84:	f003 0303 	and.w	r3, r3, #3
   18d88:	2b03      	cmp	r3, #3
   18d8a:	d004      	beq.n	18d96 <lll_conn_isr_rx+0x362>
					mic_state = LLL_CONN_MIC_FAIL;
   18d8c:	4b1d      	ldr	r3, [pc, #116]	; (18e04 <lll_conn_isr_rx+0x3d0>)
   18d8e:	2202      	movs	r2, #2
   18d90:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   18d92:	2700      	movs	r7, #0
   18d94:	e6a5      	b.n	18ae2 <lll_conn_isr_rx+0xae>
						radio_pkt_scratch_get();
   18d96:	f000 fb69 	bl	1946c <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   18d9a:	7843      	ldrb	r3, [r0, #1]
   18d9c:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   18d9e:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   18da0:	d8f4      	bhi.n	18d8c <lll_conn_isr_rx+0x358>
						memcpy(pdu_data_rx,
   18da2:	3303      	adds	r3, #3
   18da4:	b2da      	uxtb	r2, r3
   18da6:	4638      	mov	r0, r7
   18da8:	f006 fb96 	bl	1f4d8 <memcpy>
						lll->ccm_rx.counter--;
   18dac:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   18db0:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   18db4:	3b01      	subs	r3, #1
   18db6:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   18dba:	f142 33ff 	adc.w	r3, r2, #4294967295	; 0xffffffff
   18dbe:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				lll->ccm_rx.counter++;
   18dc2:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
				mic_state = LLL_CONN_MIC_PASS;
   18dc6:	4a0f      	ldr	r2, [pc, #60]	; (18e04 <lll_conn_isr_rx+0x3d0>)
				lll->ccm_rx.counter++;
   18dc8:	3301      	adds	r3, #1
   18dca:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   18dce:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
						lll->ccm_rx.counter--;
   18dd2:	f104 016f 	add.w	r1, r4, #111	; 0x6f
				lll->ccm_rx.counter++;
   18dd6:	f143 0300 	adc.w	r3, r3, #0
				mic_state = LLL_CONN_MIC_PASS;
   18dda:	2701      	movs	r7, #1
				lll->ccm_rx.counter++;
   18ddc:	604b      	str	r3, [r1, #4]
				mic_state = LLL_CONN_MIC_PASS;
   18dde:	7017      	strb	r7, [r2, #0]
		if (err) {
   18de0:	e72e      	b.n	18c40 <lll_conn_isr_rx+0x20c>
				LL_ASSERT(done);
   18de2:	4a09      	ldr	r2, [pc, #36]	; (18e08 <lll_conn_isr_rx+0x3d4>)
   18de4:	4909      	ldr	r1, [pc, #36]	; (18e0c <lll_conn_isr_rx+0x3d8>)
   18de6:	480a      	ldr	r0, [pc, #40]	; (18e10 <lll_conn_isr_rx+0x3dc>)
   18de8:	f240 331b 	movw	r3, #795	; 0x31b
   18dec:	f004 f922 	bl	1d034 <printk>
   18df0:	4040      	eors	r0, r0
   18df2:	f380 8811 	msr	BASEPRI, r0
   18df6:	f04f 0003 	mov.w	r0, #3
   18dfa:	df02      	svc	2
   18dfc:	e7b8      	b.n	18d70 <lll_conn_isr_rx+0x33c>
	is_rx_enqueue = 0U;
   18dfe:	462f      	mov	r7, r5
   18e00:	e649      	b.n	18a96 <lll_conn_isr_rx+0x62>
   18e02:	bf00      	nop
   18e04:	20003567 	.word	0x20003567
   18e08:	00023c3c 	.word	0x00023c3c
   18e0c:	00023c90 	.word	0x00023c90
   18e10:	000230b4 	.word	0x000230b4

00018e14 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   18e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   18e18:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   18e1a:	89a2      	ldrh	r2, [r4, #12]
   18e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18e20:	429a      	cmp	r2, r3
{
   18e22:	b083      	sub	sp, #12
	if (unlikely(lll->handle == 0xFFFF)) {
   18e24:	f000 80c1 	beq.w	18faa <prepare_cb+0x196>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   18e28:	4605      	mov	r5, r0
   18e2a:	f7ff fc83 	bl	18734 <lll_conn_prepare_reset>

	/* Deduce the latency */
	lll->latency_event = lll->latency_prepare - 1;
   18e2e:	8a63      	ldrh	r3, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   18e30:	8ae1      	ldrh	r1, [r4, #22]
	lll->latency_event = lll->latency_prepare - 1;
   18e32:	1e58      	subs	r0, r3, #1

	/* Update event counter to next value */
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   18e34:	440b      	add	r3, r1
   18e36:	82e3      	strh	r3, [r4, #22]

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;
   18e38:	2300      	movs	r3, #0
   18e3a:	8263      	strh	r3, [r4, #18]

	if (lll->data_chan_sel) {
   18e3c:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare - 1;
   18e3e:	b280      	uxth	r0, r0
	if (lll->data_chan_sel) {
   18e40:	065e      	lsls	r6, r3, #25
	lll->latency_event = lll->latency_prepare - 1;
   18e42:	82a0      	strh	r0, [r4, #20]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   18e44:	f104 0218 	add.w	r2, r4, #24
	if (lll->data_chan_sel) {
   18e48:	f100 808e 	bmi.w	18f68 <prepare_cb+0x154>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   18e4c:	f003 063f 	and.w	r6, r3, #63	; 0x3f
   18e50:	7fa1      	ldrb	r1, [r4, #30]
   18e52:	9600      	str	r6, [sp, #0]
   18e54:	4613      	mov	r3, r2
   18e56:	4602      	mov	r2, r0
   18e58:	f104 001f 	add.w	r0, r4, #31
   18e5c:	f7fd f9fc 	bl	16258 <lll_chan_sel_1>
   18e60:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   18e62:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   18e66:	441a      	add	r2, r3
		lll->slave.window_widening_event_us =
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   18e68:	e9d4 130d 	ldrd	r1, r3, [r4, #52]	; 0x34
	lll->slave.window_widening_prepare_us = 0;
   18e6c:	2700      	movs	r7, #0
	lll->slave.window_size_event_us +=
   18e6e:	440b      	add	r3, r1
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   18e70:	e9c4 730d 	strd	r7, r3, [r4, #52]	; 0x34
	    lll->slave.window_widening_max_us) {
   18e74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	lll->slave.window_widening_prepare_us = 0;
   18e76:	62e7      	str	r7, [r4, #44]	; 0x2c
		lll->slave.window_widening_event_us =
   18e78:	4293      	cmp	r3, r2
   18e7a:	bf28      	it	cs
   18e7c:	4613      	movcs	r3, r2
   18e7e:	6323      	str	r3, [r4, #48]	; 0x30

	/* Start setting up Radio h/w */
	radio_reset();
   18e80:	f000 f9e6 	bl	19250 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   18e84:	4638      	mov	r0, r7
   18e86:	f000 fa17 	bl	192b8 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   18e8a:	4620      	mov	r0, r4
   18e8c:	f7ff fc94 	bl	187b8 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   18e90:	1d20      	adds	r0, r4, #4
   18e92:	f000 fa2f 	bl	192f4 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   18e96:	7a63      	ldrb	r3, [r4, #9]
			    (((uint32_t)lll->crc_init[2] << 16) |
   18e98:	7aa1      	ldrb	r1, [r4, #10]
			     ((uint32_t)lll->crc_init[1] << 8) |
   18e9a:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   18e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((uint32_t)lll->crc_init[0])));
   18ea0:	7a21      	ldrb	r1, [r4, #8]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   18ea2:	f240 605b 	movw	r0, #1627	; 0x65b
   18ea6:	4319      	orrs	r1, r3
   18ea8:	f000 fac6 	bl	19438 <radio_crc_configure>

	lll_chan_set(data_chan_use);
   18eac:	4630      	mov	r0, r6
   18eae:	f7fe fd4b 	bl	17948 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   18eb2:	4621      	mov	r1, r4
   18eb4:	4842      	ldr	r0, [pc, #264]	; (18fc0 <prepare_cb+0x1ac>)
   18eb6:	f000 f989 	bl	191cc <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   18eba:	2096      	movs	r0, #150	; 0x96
   18ebc:	f000 fbf8 	bl	196b0 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
   18ec0:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
   18ec4:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   18ec8:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   18ecc:	4639      	mov	r1, r7
   18ece:	f002 0207 	and.w	r2, r2, #7
   18ed2:	f000 0007 	and.w	r0, r0, #7
   18ed6:	f000 fb19 	bl	1950c <radio_switch_complete_and_tx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   18eda:	f8d4 9000 	ldr.w	r9, [r4]
	ticks_at_event = p->ticks_at_expire;
   18ede:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   18ee0:	4648      	mov	r0, r9
   18ee2:	f7fe fd13 	bl	1790c <lll_evt_offset_get>
   18ee6:	eb06 0800 	add.w	r8, r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   18eea:	686a      	ldr	r2, [r5, #4]
   18eec:	f108 0109 	add.w	r1, r8, #9
   18ef0:	4638      	mov	r0, r7
   18ef2:	f000 fbe9 	bl	196c8 <radio_tmr_start>
   18ef6:	4606      	mov	r6, r0

	radio_tmr_aa_capture();
   18ef8:	f000 fc88 	bl	1980c <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   18efc:	4638      	mov	r0, r7
   18efe:	f000 fc9f 	bl	19840 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   18f02:	6b23      	ldr	r3, [r4, #48]	; 0x30
		 lll->slave.window_widening_event_us) << 1) +
	       lll->slave.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   18f04:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   18f08:	f103 0530 	add.w	r5, r3, #48	; 0x30
	hcto = remainder_us +
   18f0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   18f0e:	f000 0007 	and.w	r0, r0, #7
	hcto = remainder_us +
   18f12:	eb03 0345 	add.w	r3, r3, r5, lsl #1
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   18f16:	2101      	movs	r1, #1
	hcto = remainder_us +
   18f18:	441e      	add	r6, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   18f1a:	f000 fa3f 	bl	1939c <radio_rx_ready_delay_get>
   18f1e:	1835      	adds	r5, r6, r0
	hcto += addr_us_get(lll->phy_rx);
   18f20:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   18f24:	f000 0007 	and.w	r0, r0, #7
   18f28:	2802      	cmp	r0, #2
   18f2a:	d03c      	beq.n	18fa6 <prepare_cb+0x192>
		return 40;
   18f2c:	2804      	cmp	r0, #4
   18f2e:	bf0c      	ite	eq
   18f30:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   18f34:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   18f36:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   18f38:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   18f3a:	f000 fa31 	bl	193a0 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   18f3e:	4428      	add	r0, r5
   18f40:	f000 fc56 	bl	197f0 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   18f44:	89a1      	ldrh	r1, [r4, #12]
   18f46:	3103      	adds	r1, #3
   18f48:	4642      	mov	r2, r8
   18f4a:	b2c9      	uxtb	r1, r1
   18f4c:	4648      	mov	r0, r9
   18f4e:	f7fe fceb 	bl	17928 <lll_preempt_calc>
   18f52:	b190      	cbz	r0, 18f7a <prepare_cb+0x166>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   18f54:	481b      	ldr	r0, [pc, #108]	; (18fc4 <prepare_cb+0x1b0>)
   18f56:	4621      	mov	r1, r4
   18f58:	f000 f938 	bl	191cc <radio_isr_set>
		radio_disable();
   18f5c:	f000 fa2c 	bl	193b8 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   18f60:	2000      	movs	r0, #0
   18f62:	b003      	add	sp, #12
   18f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	event_counter = lll->event_counter + lll->latency_event;
   18f68:	4408      	add	r0, r1
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   18f6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18f6e:	8be1      	ldrh	r1, [r4, #30]
   18f70:	b280      	uxth	r0, r0
   18f72:	f7fd f9b7 	bl	162e4 <lll_chan_sel_2>
   18f76:	4606      	mov	r6, r0
   18f78:	e773      	b.n	18e62 <prepare_cb+0x4e>
		ret = lll_prepare_done(lll);
   18f7a:	4620      	mov	r0, r4
   18f7c:	f7fe fc6e 	bl	1785c <lll_prepare_done>
		LL_ASSERT(!ret);
   18f80:	2800      	cmp	r0, #0
   18f82:	d0ed      	beq.n	18f60 <prepare_cb+0x14c>
   18f84:	4a10      	ldr	r2, [pc, #64]	; (18fc8 <prepare_cb+0x1b4>)
   18f86:	4911      	ldr	r1, [pc, #68]	; (18fcc <prepare_cb+0x1b8>)
   18f88:	4811      	ldr	r0, [pc, #68]	; (18fd0 <prepare_cb+0x1bc>)
   18f8a:	f44f 7387 	mov.w	r3, #270	; 0x10e
   18f8e:	f004 f851 	bl	1d034 <printk>
   18f92:	4040      	eors	r0, r0
   18f94:	f380 8811 	msr	BASEPRI, r0
   18f98:	f04f 0003 	mov.w	r0, #3
   18f9c:	df02      	svc	2
}
   18f9e:	2000      	movs	r0, #0
   18fa0:	b003      	add	sp, #12
   18fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (phy) {
   18fa6:	2318      	movs	r3, #24
   18fa8:	e7c5      	b.n	18f36 <prepare_cb+0x122>
		radio_isr_set(lll_isr_early_abort, lll);
   18faa:	480a      	ldr	r0, [pc, #40]	; (18fd4 <prepare_cb+0x1c0>)
   18fac:	4621      	mov	r1, r4
   18fae:	f000 f90d 	bl	191cc <radio_isr_set>
		radio_disable();
   18fb2:	f000 fa01 	bl	193b8 <radio_disable>
}
   18fb6:	2000      	movs	r0, #0
   18fb8:	b003      	add	sp, #12
   18fba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18fbe:	bf00      	nop
   18fc0:	00018a35 	.word	0x00018a35
   18fc4:	00017a7d 	.word	0x00017a7d
   18fc8:	00023cc4 	.word	0x00023cc4
   18fcc:	00023448 	.word	0x00023448
   18fd0:	000230b4 	.word	0x000230b4
   18fd4:	00017aa5 	.word	0x00017aa5

00018fd8 <lll_slave_prepare>:
{
   18fd8:	b510      	push	{r4, lr}
   18fda:	b082      	sub	sp, #8
   18fdc:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   18fde:	f7fe fded 	bl	17bbc <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   18fe2:	2800      	cmp	r0, #0
   18fe4:	db2a      	blt.n	1903c <lll_slave_prepare+0x64>
	lll = p->param;
   18fe6:	68e1      	ldr	r1, [r4, #12]
	elapsed = p->lazy + 1;
   18fe8:	8923      	ldrh	r3, [r4, #8]
	lll->slave.window_widening_prepare_us +=
   18fea:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	lll->latency_prepare += elapsed;
   18fec:	f8b1 c012 	ldrh.w	ip, [r1, #18]
	    lll->slave.window_widening_periodic_us * elapsed;
   18ff0:	6a48      	ldr	r0, [r1, #36]	; 0x24
	elapsed = p->lazy + 1;
   18ff2:	3301      	adds	r3, #1
   18ff4:	b29b      	uxth	r3, r3
	lll->slave.window_widening_prepare_us +=
   18ff6:	fb00 2003 	mla	r0, r0, r3, r2
	lll->latency_prepare += elapsed;
   18ffa:	4463      	add	r3, ip
   18ffc:	824b      	strh	r3, [r1, #18]
	    lll->slave.window_widening_max_us) {
   18ffe:	6a8b      	ldr	r3, [r1, #40]	; 0x28
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   19000:	4a15      	ldr	r2, [pc, #84]	; (19058 <lll_slave_prepare+0x80>)
		lll->slave.window_widening_prepare_us =
   19002:	4283      	cmp	r3, r0
   19004:	bf28      	it	cs
   19006:	4603      	movcs	r3, r0
   19008:	62cb      	str	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1900a:	4814      	ldr	r0, [pc, #80]	; (1905c <lll_slave_prepare+0x84>)
   1900c:	4914      	ldr	r1, [pc, #80]	; (19060 <lll_slave_prepare+0x88>)
   1900e:	9400      	str	r4, [sp, #0]
   19010:	2300      	movs	r3, #0
   19012:	f7fe fb99 	bl	17748 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   19016:	b108      	cbz	r0, 1901c <lll_slave_prepare+0x44>
   19018:	3044      	adds	r0, #68	; 0x44
   1901a:	d101      	bne.n	19020 <lll_slave_prepare+0x48>
}
   1901c:	b002      	add	sp, #8
   1901e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   19020:	4a10      	ldr	r2, [pc, #64]	; (19064 <lll_slave_prepare+0x8c>)
   19022:	4911      	ldr	r1, [pc, #68]	; (19068 <lll_slave_prepare+0x90>)
   19024:	4811      	ldr	r0, [pc, #68]	; (1906c <lll_slave_prepare+0x94>)
   19026:	235f      	movs	r3, #95	; 0x5f
   19028:	f004 f804 	bl	1d034 <printk>
   1902c:	4040      	eors	r0, r0
   1902e:	f380 8811 	msr	BASEPRI, r0
   19032:	f04f 0003 	mov.w	r0, #3
   19036:	df02      	svc	2
}
   19038:	b002      	add	sp, #8
   1903a:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1903c:	4a09      	ldr	r2, [pc, #36]	; (19064 <lll_slave_prepare+0x8c>)
   1903e:	490c      	ldr	r1, [pc, #48]	; (19070 <lll_slave_prepare+0x98>)
   19040:	480a      	ldr	r0, [pc, #40]	; (1906c <lll_slave_prepare+0x94>)
   19042:	2348      	movs	r3, #72	; 0x48
   19044:	f003 fff6 	bl	1d034 <printk>
   19048:	4040      	eors	r0, r0
   1904a:	f380 8811 	msr	BASEPRI, r0
   1904e:	f04f 0003 	mov.w	r0, #3
   19052:	df02      	svc	2
   19054:	e7c7      	b.n	18fe6 <lll_slave_prepare+0xe>
   19056:	bf00      	nop
   19058:	00018e15 	.word	0x00018e15
   1905c:	00017905 	.word	0x00017905
   19060:	00018761 	.word	0x00018761
   19064:	00023cc4 	.word	0x00023cc4
   19068:	00023c18 	.word	0x00023c18
   1906c:	000230b4 	.word	0x000230b4
   19070:	00023b68 	.word	0x00023b68

00019074 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   19074:	4b05      	ldr	r3, [pc, #20]	; (1908c <cntr_init+0x18>)
    p_reg->EVTENSET = mask;
   19076:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1907a:	2100      	movs	r1, #0
   1907c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   19080:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   19084:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   19088:	4770      	bx	lr
   1908a:	bf00      	nop
   1908c:	4000b000 	.word	0x4000b000

00019090 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   19090:	4b05      	ldr	r3, [pc, #20]	; (190a8 <cntr_start+0x18>)
   19092:	7818      	ldrb	r0, [r3, #0]
   19094:	1c42      	adds	r2, r0, #1
   19096:	701a      	strb	r2, [r3, #0]
   19098:	b918      	cbnz	r0, 190a2 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1909a:	4b04      	ldr	r3, [pc, #16]	; (190ac <cntr_start+0x1c>)
   1909c:	2201      	movs	r2, #1
   1909e:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   190a0:	4770      	bx	lr
		return 1;
   190a2:	2001      	movs	r0, #1
}
   190a4:	4770      	bx	lr
   190a6:	bf00      	nop
   190a8:	20003568 	.word	0x20003568
   190ac:	4000b000 	.word	0x4000b000

000190b0 <cntr_stop>:

uint32_t cntr_stop(void)
{
   190b0:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   190b2:	4c0d      	ldr	r4, [pc, #52]	; (190e8 <cntr_stop+0x38>)
   190b4:	7820      	ldrb	r0, [r4, #0]
   190b6:	b148      	cbz	r0, 190cc <cntr_stop+0x1c>

	if (--_refcount) {
   190b8:	3801      	subs	r0, #1
   190ba:	b2c0      	uxtb	r0, r0
   190bc:	7020      	strb	r0, [r4, #0]
   190be:	b918      	cbnz	r0, 190c8 <cntr_stop+0x18>
   190c0:	4b0a      	ldr	r3, [pc, #40]	; (190ec <cntr_stop+0x3c>)
   190c2:	2201      	movs	r2, #1
   190c4:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   190c6:	bd10      	pop	{r4, pc}
		return 1;
   190c8:	2001      	movs	r0, #1
}
   190ca:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   190cc:	4a08      	ldr	r2, [pc, #32]	; (190f0 <cntr_stop+0x40>)
   190ce:	4909      	ldr	r1, [pc, #36]	; (190f4 <cntr_stop+0x44>)
   190d0:	4809      	ldr	r0, [pc, #36]	; (190f8 <cntr_stop+0x48>)
   190d2:	232d      	movs	r3, #45	; 0x2d
   190d4:	f003 ffae 	bl	1d034 <printk>
   190d8:	4040      	eors	r0, r0
   190da:	f380 8811 	msr	BASEPRI, r0
   190de:	f04f 0003 	mov.w	r0, #3
   190e2:	df02      	svc	2
	if (--_refcount) {
   190e4:	7820      	ldrb	r0, [r4, #0]
   190e6:	e7e7      	b.n	190b8 <cntr_stop+0x8>
   190e8:	20003568 	.word	0x20003568
   190ec:	4000b000 	.word	0x4000b000
   190f0:	00023d24 	.word	0x00023d24
   190f4:	00023d70 	.word	0x00023d70
   190f8:	000230b4 	.word	0x000230b4

000190fc <cntr_cnt_get>:
     return p_reg->COUNTER;
   190fc:	4b01      	ldr	r3, [pc, #4]	; (19104 <cntr_cnt_get+0x8>)
   190fe:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   19102:	4770      	bx	lr
   19104:	4000b000 	.word	0x4000b000

00019108 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   19108:	4b02      	ldr	r3, [pc, #8]	; (19114 <cntr_cmp_set+0xc>)
   1910a:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1910e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   19112:	4770      	bx	lr
   19114:	4000b000 	.word	0x4000b000

00019118 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19118:	4b12      	ldr	r3, [pc, #72]	; (19164 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1911a:	b430      	push	{r4, r5}
   1911c:	2101      	movs	r1, #1
   1911e:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   19120:	2000      	movs	r0, #0
   19122:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   19124:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   19128:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1912c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   19130:	6019      	str	r1, [r3, #0]
}
   19132:	e005      	b.n	19140 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   19134:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   19138:	b932      	cbnz	r2, 19148 <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1913a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1913e:	b11a      	cbz	r2, 19148 <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   19140:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   19144:	2a00      	cmp	r2, #0
   19146:	d0f5      	beq.n	19134 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19148:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1914a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1914e:	2a00      	cmp	r2, #0
   19150:	d1e7      	bne.n	19122 <do_ecb+0xa>
   19152:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   19156:	2d00      	cmp	r5, #0
   19158:	d0e3      	beq.n	19122 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   1915a:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   1915c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   19160:	4770      	bx	lr
   19162:	bf00      	nop
   19164:	4000e000 	.word	0x4000e000

00019168 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   19168:	b570      	push	{r4, r5, r6, lr}
   1916a:	b08c      	sub	sp, #48	; 0x30
   1916c:	460e      	mov	r6, r1
   1916e:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   19170:	4601      	mov	r1, r0
   19172:	2210      	movs	r2, #16
   19174:	4668      	mov	r0, sp
{
   19176:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   19178:	f7f5 f952 	bl	e420 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1917c:	2210      	movs	r2, #16
   1917e:	eb0d 0002 	add.w	r0, sp, r2
   19182:	4631      	mov	r1, r6
   19184:	f7f5 f94c 	bl	e420 <mem_rcopy>

	do_ecb(&ecb);
   19188:	4668      	mov	r0, sp
   1918a:	f7ff ffc5 	bl	19118 <do_ecb>

	if (cipher_text_le) {
   1918e:	b125      	cbz	r5, 1919a <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   19190:	2210      	movs	r2, #16
   19192:	a908      	add	r1, sp, #32
   19194:	4628      	mov	r0, r5
   19196:	f7f5 f943 	bl	e420 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1919a:	b124      	cbz	r4, 191a6 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1919c:	2210      	movs	r2, #16
   1919e:	a908      	add	r1, sp, #32
   191a0:	4620      	mov	r0, r4
   191a2:	f006 f999 	bl	1f4d8 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   191a6:	b00c      	add	sp, #48	; 0x30
   191a8:	bd70      	pop	{r4, r5, r6, pc}
   191aa:	bf00      	nop

000191ac <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   191ac:	4b04      	ldr	r3, [pc, #16]	; (191c0 <isr_radio+0x14>)
   191ae:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   191b2:	b123      	cbz	r3, 191be <isr_radio+0x12>
		isr_cb(isr_cb_param);
   191b4:	4a03      	ldr	r2, [pc, #12]	; (191c4 <isr_radio+0x18>)
   191b6:	4b04      	ldr	r3, [pc, #16]	; (191c8 <isr_radio+0x1c>)
   191b8:	6810      	ldr	r0, [r2, #0]
   191ba:	681b      	ldr	r3, [r3, #0]
   191bc:	4718      	bx	r3
}
   191be:	4770      	bx	lr
   191c0:	40001000 	.word	0x40001000
   191c4:	20002c08 	.word	0x20002c08
   191c8:	20002c04 	.word	0x20002c04

000191cc <radio_isr_set>:
{
   191cc:	b538      	push	{r3, r4, r5, lr}
   191ce:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   191d0:	2001      	movs	r0, #1
{
   191d2:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   191d4:	f7ed fda2 	bl	6d1c <arch_irq_disable>
	isr_cb = cb;
   191d8:	4b08      	ldr	r3, [pc, #32]	; (191fc <radio_isr_set+0x30>)
	isr_cb_param = param;
   191da:	4a09      	ldr	r2, [pc, #36]	; (19200 <radio_isr_set+0x34>)
	isr_cb = cb;
   191dc:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   191de:	4909      	ldr	r1, [pc, #36]	; (19204 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   191e0:	4b09      	ldr	r3, [pc, #36]	; (19208 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   191e2:	6015      	str	r5, [r2, #0]
   191e4:	2010      	movs	r0, #16
   191e6:	2202      	movs	r2, #2
   191e8:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   191ec:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   191f0:	2001      	movs	r0, #1
}
   191f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   191f6:	f7ed bd81 	b.w	6cfc <arch_irq_enable>
   191fa:	bf00      	nop
   191fc:	20002c04 	.word	0x20002c04
   19200:	20002c08 	.word	0x20002c08
   19204:	40001000 	.word	0x40001000
   19208:	e000e100 	.word	0xe000e100

0001920c <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1920c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   19214:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   19216:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1921a:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1921e:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   19222:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   19226:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1922a:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1922e:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   19232:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   19236:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1923a:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1923e:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   19242:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   19246:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1924a:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   1924e:	4770      	bx	lr

00019250 <radio_reset>:
{
   19250:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   19252:	2001      	movs	r0, #1
   19254:	f7ed fd62 	bl	6d1c <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   19258:	4a0d      	ldr	r2, [pc, #52]	; (19290 <radio_reset+0x40>)
   1925a:	2100      	movs	r1, #0
   1925c:	2301      	movs	r3, #1
   1925e:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   19262:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   19266:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1926a:	490a      	ldr	r1, [pc, #40]	; (19294 <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   1926c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   19270:	f023 0301 	bic.w	r3, r3, #1
   19274:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   19278:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1927c:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   19280:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   19284:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   19288:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   1928c:	bd10      	pop	{r4, pc}
   1928e:	bf00      	nop
   19290:	40001000 	.word	0x40001000
   19294:	4001f000 	.word	0x4001f000

00019298 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   19298:	4b06      	ldr	r3, [pc, #24]	; (192b4 <radio_phy_set+0x1c>)
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1929a:	2802      	cmp	r0, #2
   1929c:	bf14      	ite	ne
   1929e:	2203      	movne	r2, #3
   192a0:	2204      	moveq	r2, #4
   192a2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   192a6:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   192aa:	f042 0201 	orr.w	r2, r2, #1
   192ae:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   192b2:	4770      	bx	lr
   192b4:	40001000 	.word	0x40001000

000192b8 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   192b8:	4b01      	ldr	r3, [pc, #4]	; (192c0 <radio_tx_power_set+0x8>)
   192ba:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   192be:	4770      	bx	lr
   192c0:	40001000 	.word	0x40001000

000192c4 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   192c4:	4b01      	ldr	r3, [pc, #4]	; (192cc <radio_freq_chan_set+0x8>)
   192c6:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   192ca:	4770      	bx	lr
   192cc:	40001000 	.word	0x40001000

000192d0 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   192d0:	4b07      	ldr	r3, [pc, #28]	; (192f0 <radio_whiten_iv_set+0x20>)
   192d2:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   192d6:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   192da:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   192de:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   192e2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   192e6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   192ea:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   192ee:	4770      	bx	lr
   192f0:	40001000 	.word	0x40001000

000192f4 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   192f4:	4a0a      	ldr	r2, [pc, #40]	; (19320 <radio_aa_set+0x2c>)
   192f6:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   192f8:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   192fa:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   192fe:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   19302:	78c3      	ldrb	r3, [r0, #3]
   19304:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   19308:	7843      	ldrb	r3, [r0, #1]
   1930a:	f890 c002 	ldrb.w	ip, [r0, #2]
   1930e:	7801      	ldrb	r1, [r0, #0]
   19310:	041b      	lsls	r3, r3, #16
   19312:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   19316:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1931a:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1931e:	4770      	bx	lr
   19320:	40001000 	.word	0x40001000

00019324 <radio_pkt_configure>:
	switch (phy) {
   19324:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   19328:	2b02      	cmp	r3, #2
   1932a:	bf14      	ite	ne
   1932c:	f04f 0c00 	movne.w	ip, #0
   19330:	f04f 7c80 	moveq.w	ip, #16777216	; 0x1000000
	if (dc) {
   19334:	07d3      	lsls	r3, r2, #31
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   19336:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1933a:	bf48      	it	mi
   1933c:	f44c 1c80 	orrmi.w	ip, ip, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   19340:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   19342:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   19346:	ea40 000c 	orr.w	r0, r0, ip
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1934a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1934e:	4a0a      	ldr	r2, [pc, #40]	; (19378 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   19350:	4303      	orrs	r3, r0
   19352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   19356:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1935a:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   1935e:	4b07      	ldr	r3, [pc, #28]	; (1937c <radio_pkt_configure+0x58>)
   19360:	4003      	ands	r3, r0
   19362:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   19366:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1936a:	4319      	orrs	r1, r3
   1936c:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   19370:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   19374:	4770      	bx	lr
   19376:	bf00      	nop
   19378:	40001000 	.word	0x40001000
   1937c:	fef80000 	.word	0xfef80000

00019380 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   19380:	4b01      	ldr	r3, [pc, #4]	; (19388 <radio_pkt_rx_set+0x8>)
   19382:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   19386:	4770      	bx	lr
   19388:	40001000 	.word	0x40001000

0001938c <radio_pkt_tx_set>:
   1938c:	4b01      	ldr	r3, [pc, #4]	; (19394 <radio_pkt_tx_set+0x8>)
   1938e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   19392:	4770      	bx	lr
   19394:	40001000 	.word	0x40001000

00019398 <radio_tx_chain_delay_get>:
}
   19398:	2001      	movs	r0, #1
   1939a:	4770      	bx	lr

0001939c <radio_rx_ready_delay_get>:
}
   1939c:	2029      	movs	r0, #41	; 0x29
   1939e:	4770      	bx	lr

000193a0 <radio_rx_chain_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_US;
   193a0:	2802      	cmp	r0, #2
}
   193a2:	bf14      	ite	ne
   193a4:	200a      	movne	r0, #10
   193a6:	2006      	moveq	r0, #6
   193a8:	4770      	bx	lr
   193aa:	bf00      	nop

000193ac <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   193ac:	4b01      	ldr	r3, [pc, #4]	; (193b4 <radio_tx_enable+0x8>)
   193ae:	2201      	movs	r2, #1
   193b0:	601a      	str	r2, [r3, #0]
}
   193b2:	4770      	bx	lr
   193b4:	40001000 	.word	0x40001000

000193b8 <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   193b8:	4a08      	ldr	r2, [pc, #32]	; (193dc <radio_disable+0x24>)
	NRF_RADIO->SHORTS = 0;
   193ba:	4909      	ldr	r1, [pc, #36]	; (193e0 <radio_disable+0x28>)
{
   193bc:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   193be:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   193c0:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   193c4:	2000      	movs	r0, #0
   193c6:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   193ca:	6053      	str	r3, [r2, #4]
}
   193cc:	f85d 4b04 	ldr.w	r4, [sp], #4
   193d0:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   193d2:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   193d6:	610b      	str	r3, [r1, #16]
}
   193d8:	4770      	bx	lr
   193da:	bf00      	nop
   193dc:	4001f000 	.word	0x4001f000
   193e0:	40001000 	.word	0x40001000

000193e4 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   193e4:	4b04      	ldr	r3, [pc, #16]	; (193f8 <radio_status_reset+0x14>)
   193e6:	2200      	movs	r2, #0
   193e8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   193ec:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   193f0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   193f4:	4770      	bx	lr
   193f6:	bf00      	nop
   193f8:	40001000 	.word	0x40001000

000193fc <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   193fc:	4b03      	ldr	r3, [pc, #12]	; (1940c <radio_is_ready+0x10>)
   193fe:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   19402:	3800      	subs	r0, #0
   19404:	bf18      	it	ne
   19406:	2001      	movne	r0, #1
   19408:	4770      	bx	lr
   1940a:	bf00      	nop
   1940c:	40001000 	.word	0x40001000

00019410 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   19410:	4b03      	ldr	r3, [pc, #12]	; (19420 <radio_is_done+0x10>)
   19412:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   19416:	3800      	subs	r0, #0
   19418:	bf18      	it	ne
   1941a:	2001      	movne	r0, #1
   1941c:	4770      	bx	lr
   1941e:	bf00      	nop
   19420:	40001000 	.word	0x40001000

00019424 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   19424:	4b03      	ldr	r3, [pc, #12]	; (19434 <radio_is_idle+0x10>)
   19426:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1942a:	fab0 f080 	clz	r0, r0
   1942e:	0940      	lsrs	r0, r0, #5
   19430:	4770      	bx	lr
   19432:	bf00      	nop
   19434:	40001000 	.word	0x40001000

00019438 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   19438:	4b04      	ldr	r3, [pc, #16]	; (1944c <radio_crc_configure+0x14>)
   1943a:	f240 1203 	movw	r2, #259	; 0x103
   1943e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   19442:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   19446:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1944a:	4770      	bx	lr
   1944c:	40001000 	.word	0x40001000

00019450 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   19450:	4b03      	ldr	r3, [pc, #12]	; (19460 <radio_crc_is_valid+0x10>)
   19452:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   19456:	3800      	subs	r0, #0
   19458:	bf18      	it	ne
   1945a:	2001      	movne	r0, #1
   1945c:	4770      	bx	lr
   1945e:	bf00      	nop
   19460:	40001000 	.word	0x40001000

00019464 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   19464:	4800      	ldr	r0, [pc, #0]	; (19468 <radio_pkt_empty_get+0x4>)
   19466:	4770      	bx	lr
   19468:	20002afc 	.word	0x20002afc

0001946c <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   1946c:	4800      	ldr	r0, [pc, #0]	; (19470 <radio_pkt_scratch_get+0x4>)
   1946e:	4770      	bx	lr
   19470:	20002b00 	.word	0x20002b00

00019474 <radio_pkt_decrypt_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_decrypt_get(void)
{
	return _pkt_decrypt;
}
   19474:	4800      	ldr	r0, [pc, #0]	; (19478 <radio_pkt_decrypt_get+0x4>)
   19476:	4770      	bx	lr
   19478:	200029f8 	.word	0x200029f8

0001947c <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1947c:	4b1d      	ldr	r3, [pc, #116]	; (194f4 <radio_switch_complete_and_rx+0x78>)
{
   1947e:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   19480:	2203      	movs	r2, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   19482:	4d1d      	ldr	r5, [pc, #116]	; (194f8 <radio_switch_complete_and_rx+0x7c>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   19484:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   19488:	782a      	ldrb	r2, [r5, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1948a:	4e1c      	ldr	r6, [pc, #112]	; (194fc <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1948c:	4c1c      	ldr	r4, [pc, #112]	; (19500 <radio_switch_complete_and_rx+0x84>)
   1948e:	4f1d      	ldr	r7, [pc, #116]	; (19504 <radio_switch_complete_and_rx+0x88>)
   19490:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   19494:	f102 030c 	add.w	r3, r2, #12
   19498:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1949a:	00d0      	lsls	r0, r2, #3
   1949c:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1949e:	0091      	lsls	r1, r2, #2
   194a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   194a4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   194a8:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   194ac:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   194b0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   194b4:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   194b8:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   194bc:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   194c0:	4811      	ldr	r0, [pc, #68]	; (19508 <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   194c2:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   194c6:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
		SW_SWITCH_TIMER->CC[cc]) {
   194ca:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
	if (delay <
   194ce:	2b29      	cmp	r3, #41	; 0x29
				 SW_SWITCH_TIMER->CC[cc] - delay);
   194d0:	bf8a      	itet	hi
   194d2:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   194d6:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   194d8:	3b29      	subhi	r3, #41	; 0x29
   194da:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   194de:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   194e0:	4b06      	ldr	r3, [pc, #24]	; (194fc <radio_switch_complete_and_rx+0x80>)
   194e2:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1;
   194e6:	f002 0201 	and.w	r2, r2, #1
   194ea:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   194ee:	702a      	strb	r2, [r5, #0]
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   194f0:	bcf0      	pop	{r4, r5, r6, r7}
   194f2:	4770      	bx	lr
   194f4:	40001000 	.word	0x40001000
   194f8:	20003569 	.word	0x20003569
   194fc:	4001f000 	.word	0x4001f000
   19500:	40009140 	.word	0x40009140
   19504:	4000110c 	.word	0x4000110c
   19508:	40001004 	.word	0x40001004

0001950c <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx, uint8_t phy_tx,
				  uint8_t flags_tx)
{
   1950c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   19510:	4e28      	ldr	r6, [pc, #160]	; (195b4 <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   19512:	4c29      	ldr	r4, [pc, #164]	; (195b8 <radio_switch_complete_and_tx+0xac>)
   19514:	4f29      	ldr	r7, [pc, #164]	; (195bc <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19516:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 195c4 <radio_switch_complete_and_tx+0xb8>
   1951a:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 195c8 <radio_switch_complete_and_tx+0xbc>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1951e:	2303      	movs	r3, #3
   19520:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   19524:	7821      	ldrb	r1, [r4, #0]
   19526:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   1952a:	f101 030c 	add.w	r3, r1, #12
   1952e:	b2db      	uxtb	r3, r3
   19530:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   19532:	00cd      	lsls	r5, r1, #3
   19534:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19538:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1953c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   19540:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   19544:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19548:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1954c:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19550:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	ARG_UNUSED(flags);

	switch (phy) {
   19554:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19558:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   1955c:	f24a 234e 	movw	r3, #41550	; 0xa24e
   19560:	2a02      	cmp	r2, #2
   19562:	bf18      	it	ne
   19564:	461d      	movne	r5, r3

static inline uint32_t hal_radio_rx_chain_delay_ns_get(uint8_t phy, uint8_t flags)
{
	ARG_UNUSED(flags);

	switch (phy) {
   19566:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_NS;
   1956a:	f241 524a 	movw	r2, #5450	; 0x154a
   1956e:	f242 43b8 	movw	r3, #9400	; 0x24b8
   19572:	2802      	cmp	r0, #2
   19574:	bf08      	it	eq
   19576:	4613      	moveq	r3, r2
   19578:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
		delay = HAL_RADIO_NS2US_ROUND(
   1957c:	4a10      	ldr	r2, [pc, #64]	; (195c0 <radio_switch_complete_and_tx+0xb4>)
   1957e:	442b      	add	r3, r5
   19580:	fba2 2303 	umull	r2, r3, r2, r3
		SW_SWITCH_TIMER->CC[cc]) {
   19584:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
	if (delay <
   19588:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   1958c:	bf85      	ittet	hi
   1958e:	0998      	lsrhi	r0, r3, #6
				 SW_SWITCH_TIMER->CC[cc] - delay);
   19590:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   19594:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   19596:	1a1b      	subhi	r3, r3, r0
   19598:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   1959c:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   1959e:	4b09      	ldr	r3, [pc, #36]	; (195c4 <radio_switch_complete_and_tx+0xb8>)
   195a0:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1;
   195a4:	f001 0101 	and.w	r1, r1, #1
   195a8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   195ac:	7021      	strb	r1, [r4, #0]
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   195ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   195b2:	bf00      	nop
   195b4:	40001000 	.word	0x40001000
   195b8:	20003569 	.word	0x20003569
   195bc:	40009140 	.word	0x40009140
   195c0:	10624dd3 	.word	0x10624dd3
   195c4:	4001f000 	.word	0x4001f000
   195c8:	4000110c 	.word	0x4000110c

000195cc <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   195cc:	4904      	ldr	r1, [pc, #16]	; (195e0 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   195ce:	4b05      	ldr	r3, [pc, #20]	; (195e4 <radio_switch_complete_and_disable+0x18>)
   195d0:	2003      	movs	r0, #3
   195d2:	f44f 6210 	mov.w	r2, #2304	; 0x900
   195d6:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   195da:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   195de:	4770      	bx	lr
   195e0:	40001000 	.word	0x40001000
   195e4:	4001f000 	.word	0x4001f000

000195e8 <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   195e8:	4b02      	ldr	r3, [pc, #8]	; (195f4 <radio_rssi_status_reset+0xc>)
   195ea:	2200      	movs	r2, #0
   195ec:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   195f0:	4770      	bx	lr
   195f2:	bf00      	nop
   195f4:	40001000 	.word	0x40001000

000195f8 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   195f8:	4b03      	ldr	r3, [pc, #12]	; (19608 <radio_rssi_is_ready+0x10>)
   195fa:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   195fe:	3800      	subs	r0, #0
   19600:	bf18      	it	ne
   19602:	2001      	movne	r0, #1
   19604:	4770      	bx	lr
   19606:	bf00      	nop
   19608:	40001000 	.word	0x40001000

0001960c <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   1960c:	b410      	push	{r4}
   1960e:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   19612:	ea4f 038c 	mov.w	r3, ip, lsl #2
   19616:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1961a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1961e:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   19620:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   19624:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   19628:	8894      	ldrh	r4, [r2, #4]
   1962a:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1962e:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   19632:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   19636:	d1ec      	bne.n	19612 <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   19638:	4b03      	ldr	r3, [pc, #12]	; (19648 <radio_filter_configure+0x3c>)
}
   1963a:	f85d 4b04 	ldr.w	r4, [sp], #4
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1963e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   19642:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   19646:	4770      	bx	lr
   19648:	40001000 	.word	0x40001000

0001964c <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1964c:	4a03      	ldr	r2, [pc, #12]	; (1965c <radio_filter_disable+0x10>)
   1964e:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   19652:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   19656:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1965a:	4770      	bx	lr
   1965c:	40001000 	.word	0x40001000

00019660 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   19660:	4b02      	ldr	r3, [pc, #8]	; (1966c <radio_filter_status_reset+0xc>)
   19662:	2200      	movs	r2, #0
   19664:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   19668:	4770      	bx	lr
   1966a:	bf00      	nop
   1966c:	40001000 	.word	0x40001000

00019670 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   19670:	4b03      	ldr	r3, [pc, #12]	; (19680 <radio_filter_has_match+0x10>)
   19672:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   19676:	3800      	subs	r0, #0
   19678:	bf18      	it	ne
   1967a:	2001      	movne	r0, #1
   1967c:	4770      	bx	lr
   1967e:	bf00      	nop
   19680:	40001000 	.word	0x40001000

00019684 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   19684:	4b01      	ldr	r3, [pc, #4]	; (1968c <radio_filter_match_get+0x8>)
   19686:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1968a:	4770      	bx	lr
   1968c:	40001000 	.word	0x40001000

00019690 <radio_tmr_status_reset>:
    p_reg->EVTENCLR = mask;
   19690:	4904      	ldr	r1, [pc, #16]	; (196a4 <radio_tmr_status_reset+0x14>)
   19692:	4b05      	ldr	r3, [pc, #20]	; (196a8 <radio_tmr_status_reset+0x18>)
   19694:	4a05      	ldr	r2, [pc, #20]	; (196ac <radio_tmr_status_reset+0x1c>)
   19696:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   1969a:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   1969e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   196a2:	4770      	bx	lr
   196a4:	4000b000 	.word	0x4000b000
   196a8:	4001f000 	.word	0x4001f000
   196ac:	0e7000c0 	.word	0x0e7000c0

000196b0 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   196b0:	4b03      	ldr	r3, [pc, #12]	; (196c0 <radio_tmr_tifs_set+0x10>)
   196b2:	4a04      	ldr	r2, [pc, #16]	; (196c4 <radio_tmr_tifs_set+0x14>)
   196b4:	781b      	ldrb	r3, [r3, #0]
   196b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   196ba:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   196be:	4770      	bx	lr
   196c0:	20003569 	.word	0x20003569
   196c4:	40009000 	.word	0x40009000

000196c8 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   196c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   196cc:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   196d0:	4d31      	ldr	r5, [pc, #196]	; (19798 <radio_tmr_start+0xd0>)
   196d2:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   196d6:	42ab      	cmp	r3, r5
{
   196d8:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   196da:	d906      	bls.n	196ea <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   196dc:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   196e0:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   196e4:	3901      	subs	r1, #1
		remainder += 30517578UL;
   196e6:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   196ea:	4b2c      	ldr	r3, [pc, #176]	; (1979c <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   196ec:	482c      	ldr	r0, [pc, #176]	; (197a0 <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   196ee:	4d2d      	ldr	r5, [pc, #180]	; (197a4 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   196f0:	4e2d      	ldr	r6, [pc, #180]	; (197a8 <radio_tmr_start+0xe0>)
   196f2:	2701      	movs	r7, #1
   196f4:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   196f6:	2700      	movs	r7, #0
   196f8:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   196fc:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   19700:	2704      	movs	r7, #4
   19702:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   19706:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   19708:	2702      	movs	r7, #2
   1970a:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   1970e:	4a27      	ldr	r2, [pc, #156]	; (197ac <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   19710:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   19714:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   19718:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1971c:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   19720:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19722:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19726:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1972a:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1972e:	bb64      	cbnz	r4, 1978a <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   19730:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   19734:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   19738:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   1973c:	4b1b      	ldr	r3, [pc, #108]	; (197ac <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1973e:	4a1c      	ldr	r2, [pc, #112]	; (197b0 <radio_tmr_start+0xe8>)
   19740:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   19744:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   19746:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19748:	f8df 8074 	ldr.w	r8, [pc, #116]	; 197c0 <radio_tmr_start+0xf8>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1974c:	f8df e074 	ldr.w	lr, [pc, #116]	; 197c4 <radio_tmr_start+0xfc>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19750:	f8df c074 	ldr.w	ip, [pc, #116]	; 197c8 <radio_tmr_start+0x100>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19754:	4f17      	ldr	r7, [pc, #92]	; (197b4 <radio_tmr_start+0xec>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19756:	4e18      	ldr	r6, [pc, #96]	; (197b8 <radio_tmr_start+0xf0>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19758:	4d18      	ldr	r5, [pc, #96]	; (197bc <radio_tmr_start+0xf4>)
   1975a:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   1975c:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   19760:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   19764:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   19768:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   1976c:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1976e:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19772:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19776:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1977a:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1977e:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19782:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   19786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   1978a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1978e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   19792:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
   19796:	e7d1      	b.n	1973c <radio_tmr_start+0x74>
   19798:	7ff0bdbf 	.word	0x7ff0bdbf
   1979c:	40008000 	.word	0x40008000
   197a0:	431bde83 	.word	0x431bde83
   197a4:	4000b000 	.word	0x4000b000
   197a8:	4000b148 	.word	0x4000b148
   197ac:	4001f000 	.word	0x4001f000
   197b0:	40009000 	.word	0x40009000
   197b4:	4001f004 	.word	0x4001f004
   197b8:	40009144 	.word	0x40009144
   197bc:	4001f00c 	.word	0x4001f00c
   197c0:	4000110c 	.word	0x4000110c
   197c4:	4000900c 	.word	0x4000900c
   197c8:	40009140 	.word	0x40009140

000197cc <radio_tmr_start_get>:
    return p_reg->CC[ch];
   197cc:	4b01      	ldr	r3, [pc, #4]	; (197d4 <radio_tmr_start_get+0x8>)
   197ce:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   197d2:	4770      	bx	lr
   197d4:	4000b000 	.word	0x4000b000

000197d8 <radio_tmr_stop>:
   197d8:	4903      	ldr	r1, [pc, #12]	; (197e8 <radio_tmr_stop+0x10>)
   197da:	4a04      	ldr	r2, [pc, #16]	; (197ec <radio_tmr_stop+0x14>)
   197dc:	2301      	movs	r3, #1
   197de:	604b      	str	r3, [r1, #4]
   197e0:	610b      	str	r3, [r1, #16]
   197e2:	6053      	str	r3, [r2, #4]
   197e4:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   197e6:	4770      	bx	lr
   197e8:	40008000 	.word	0x40008000
   197ec:	40009000 	.word	0x40009000

000197f0 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   197f0:	4904      	ldr	r1, [pc, #16]	; (19804 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   197f2:	4b05      	ldr	r3, [pc, #20]	; (19808 <radio_tmr_hcto_configure+0x18>)
   197f4:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   197f8:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   197fc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   19800:	4770      	bx	lr
   19802:	bf00      	nop
   19804:	40008000 	.word	0x40008000
   19808:	4001f000 	.word	0x4001f000

0001980c <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1980c:	4b05      	ldr	r3, [pc, #20]	; (19824 <radio_tmr_aa_capture+0x18>)
   1980e:	4806      	ldr	r0, [pc, #24]	; (19828 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19810:	4906      	ldr	r1, [pc, #24]	; (1982c <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   19812:	4a07      	ldr	r2, [pc, #28]	; (19830 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19814:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19818:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   1981c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   19820:	4770      	bx	lr
   19822:	bf00      	nop
   19824:	4001f000 	.word	0x4001f000
   19828:	40001100 	.word	0x40001100
   1982c:	40008040 	.word	0x40008040
   19830:	04000080 	.word	0x04000080

00019834 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   19834:	4b01      	ldr	r3, [pc, #4]	; (1983c <radio_tmr_aa_get+0x8>)
   19836:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1983a:	4770      	bx	lr
   1983c:	40008000 	.word	0x40008000

00019840 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   19840:	4b01      	ldr	r3, [pc, #4]	; (19848 <radio_tmr_aa_save+0x8>)
   19842:	6018      	str	r0, [r3, #0]
}
   19844:	4770      	bx	lr
   19846:	bf00      	nop
   19848:	20002c0c 	.word	0x20002c0c

0001984c <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   1984c:	4b01      	ldr	r3, [pc, #4]	; (19854 <radio_tmr_aa_restore+0x8>)
}
   1984e:	6818      	ldr	r0, [r3, #0]
   19850:	4770      	bx	lr
   19852:	bf00      	nop
   19854:	20002c0c 	.word	0x20002c0c

00019858 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   19858:	4b01      	ldr	r3, [pc, #4]	; (19860 <radio_tmr_ready_get+0x8>)
   1985a:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1985e:	4770      	bx	lr
   19860:	40008000 	.word	0x40008000

00019864 <radio_tmr_end_capture>:
   19864:	4b02      	ldr	r3, [pc, #8]	; (19870 <radio_tmr_end_capture+0xc>)
   19866:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1986a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   1986e:	4770      	bx	lr
   19870:	4001f000 	.word	0x4001f000

00019874 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   19874:	4b01      	ldr	r3, [pc, #4]	; (1987c <radio_tmr_end_get+0x8>)
   19876:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1987a:	4770      	bx	lr
   1987c:	40008000 	.word	0x40008000

00019880 <radio_tmr_tifs_base_get>:
   19880:	4b01      	ldr	r3, [pc, #4]	; (19888 <radio_tmr_tifs_base_get+0x8>)
   19882:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   19886:	4770      	bx	lr
   19888:	40008000 	.word	0x40008000

0001988c <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static uint8_t MALIGN(4) _ccm_scratch[(HAL_RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
   1988c:	b4f0      	push	{r4, r5, r6, r7}
   1988e:	4605      	mov	r5, r0
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case PHY_2M:
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   19890:	4e13      	ldr	r6, [pc, #76]	; (198e0 <radio_ccm_rx_pkt_set+0x54>)
   19892:	4814      	ldr	r0, [pc, #80]	; (198e4 <radio_ccm_rx_pkt_set+0x58>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19894:	4b14      	ldr	r3, [pc, #80]	; (198e8 <radio_ccm_rx_pkt_set+0x5c>)

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   19896:	4f15      	ldr	r7, [pc, #84]	; (198ec <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19898:	2400      	movs	r4, #0
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1989a:	2902      	cmp	r1, #2
   1989c:	bf08      	it	eq
   1989e:	4606      	moveq	r6, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   198a0:	f04f 0c02 	mov.w	ip, #2
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   198a4:	4812      	ldr	r0, [pc, #72]	; (198f0 <radio_ccm_rx_pkt_set+0x64>)
   198a6:	4913      	ldr	r1, [pc, #76]	; (198f4 <radio_ccm_rx_pkt_set+0x68>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   198a8:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   198ac:	f8c3 c500 	str.w	ip, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   198b0:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   198b4:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   198b8:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   198bc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   198c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   198c4:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   198c8:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   198cc:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   198d0:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   198d4:	f8c1 2504 	str.w	r2, [r1, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   198d8:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   198da:	bcf0      	pop	{r4, r5, r6, r7}
   198dc:	601a      	str	r2, [r3, #0]
   198de:	4770      	bx	lr
   198e0:	01000001 	.word	0x01000001
   198e4:	01010001 	.word	0x01010001
   198e8:	4000f000 	.word	0x4000f000
   198ec:	200028ec 	.word	0x200028ec
   198f0:	20002b00 	.word	0x20002b00
   198f4:	4001f000 	.word	0x4001f000

000198f8 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   198f8:	4b10      	ldr	r3, [pc, #64]	; (1993c <radio_ccm_tx_pkt_set+0x44>)
{
   198fa:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   198fc:	2200      	movs	r2, #0
{
   198fe:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   19900:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19902:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   19906:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   1990a:	480d      	ldr	r0, [pc, #52]	; (19940 <radio_ccm_tx_pkt_set+0x48>)
   1990c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   19910:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   19914:	480b      	ldr	r0, [pc, #44]	; (19944 <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   19916:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1991a:	4c0b      	ldr	r4, [pc, #44]	; (19948 <radio_ccm_tx_pkt_set+0x50>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1991c:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   19920:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   19922:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   19926:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1992a:	f85d 4b04 	ldr.w	r4, [sp], #4
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1992e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   19932:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   19936:	6019      	str	r1, [r3, #0]
}
   19938:	4770      	bx	lr
   1993a:	bf00      	nop
   1993c:	4000f000 	.word	0x4000f000
   19940:	01010000 	.word	0x01010000
   19944:	20002b00 	.word	0x20002b00
   19948:	200028ec 	.word	0x200028ec

0001994c <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1994c:	4a0e      	ldr	r2, [pc, #56]	; (19988 <radio_ccm_is_done+0x3c>)
   1994e:	2302      	movs	r3, #2
   19950:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   19954:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   19958:	b933      	cbnz	r3, 19968 <radio_ccm_is_done+0x1c>
		__WFE();
   1995a:	bf20      	wfe
		__SEV();
   1995c:	bf40      	sev
		__WFE();
   1995e:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   19960:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   19964:	2b00      	cmp	r3, #0
   19966:	d0f8      	beq.n	1995a <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   19968:	4b07      	ldr	r3, [pc, #28]	; (19988 <radio_ccm_is_done+0x3c>)
   1996a:	4a08      	ldr	r2, [pc, #32]	; (1998c <radio_ccm_is_done+0x40>)
   1996c:	2002      	movs	r0, #2
   1996e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   19972:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   19976:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   1997a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1997e:	fab0 f080 	clz	r0, r0
   19982:	0940      	lsrs	r0, r0, #5
   19984:	4770      	bx	lr
   19986:	bf00      	nop
   19988:	4000f000 	.word	0x4000f000
   1998c:	e000e100 	.word	0xe000e100

00019990 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   19990:	4b03      	ldr	r3, [pc, #12]	; (199a0 <radio_ccm_mic_is_valid+0x10>)
   19992:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   19996:	3800      	subs	r0, #0
   19998:	bf18      	it	ne
   1999a:	2001      	movne	r0, #1
   1999c:	4770      	bx	lr
   1999e:	bf00      	nop
   199a0:	4000f000 	.word	0x4000f000

000199a4 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   199a4:	4a15      	ldr	r2, [pc, #84]	; (199fc <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   199a6:	4b16      	ldr	r3, [pc, #88]	; (19a00 <radio_ar_configure+0x5c>)
{
   199a8:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   199aa:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   199ae:	4e15      	ldr	r6, [pc, #84]	; (19a04 <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   199b0:	2703      	movs	r7, #3
   199b2:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   199b6:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   199b8:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   199bc:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   199be:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   199c2:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   199c4:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   199c8:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   199cc:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   199d0:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   199d4:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   199d8:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   199dc:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   199e0:	4909      	ldr	r1, [pc, #36]	; (19a08 <radio_ar_configure+0x64>)
   199e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   199e6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   199ea:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   199ee:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   199f2:	bcf0      	pop	{r4, r5, r6, r7}
   199f4:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   199f8:	4770      	bx	lr
   199fa:	bf00      	nop
   199fc:	40001000 	.word	0x40001000
   19a00:	4000f000 	.word	0x4000f000
   19a04:	200028e8 	.word	0x200028e8
   19a08:	4001f000 	.word	0x4001f000

00019a0c <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   19a0c:	4b01      	ldr	r3, [pc, #4]	; (19a14 <radio_ar_match_get+0x8>)
   19a0e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   19a12:	4770      	bx	lr
   19a14:	4000f000 	.word	0x4000f000

00019a18 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   19a18:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   19a1a:	4807      	ldr	r0, [pc, #28]	; (19a38 <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   19a1c:	4c07      	ldr	r4, [pc, #28]	; (19a3c <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   19a1e:	4a08      	ldr	r2, [pc, #32]	; (19a40 <radio_ar_status_reset+0x28>)
   19a20:	2300      	movs	r3, #0
   19a22:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   19a26:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   19a2a:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   19a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
   19a32:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   19a36:	4770      	bx	lr
   19a38:	4000f000 	.word	0x4000f000
   19a3c:	40001000 	.word	0x40001000
   19a40:	4001f000 	.word	0x4001f000

00019a44 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   19a44:	4b08      	ldr	r3, [pc, #32]	; (19a68 <radio_ar_has_match+0x24>)
   19a46:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   19a4a:	b160      	cbz	r0, 19a66 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   19a4c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   19a50:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   19a54:	b138      	cbz	r0, 19a66 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   19a56:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   19a5a:	b120      	cbz	r0, 19a66 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   19a5c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   19a60:	fab0 f080 	clz	r0, r0
   19a64:	0940      	lsrs	r0, r0, #5
}
   19a66:	4770      	bx	lr
   19a68:	40001000 	.word	0x40001000

00019a6c <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   19a6c:	2902      	cmp	r1, #2
{
   19a6e:	b510      	push	{r4, lr}
   19a70:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   19a72:	d00b      	beq.n	19a8c <mayfly_enable_cb+0x20>
   19a74:	4a0a      	ldr	r2, [pc, #40]	; (19aa0 <mayfly_enable_cb+0x34>)
   19a76:	490b      	ldr	r1, [pc, #44]	; (19aa4 <mayfly_enable_cb+0x38>)
   19a78:	480b      	ldr	r0, [pc, #44]	; (19aa8 <mayfly_enable_cb+0x3c>)
   19a7a:	231e      	movs	r3, #30
   19a7c:	f003 fada 	bl	1d034 <printk>
   19a80:	4040      	eors	r0, r0
   19a82:	f380 8811 	msr	BASEPRI, r0
   19a86:	f04f 0003 	mov.w	r0, #3
   19a8a:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   19a8c:	200b      	movs	r0, #11
	if (enable) {
   19a8e:	b11c      	cbz	r4, 19a98 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   19a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   19a94:	f7ed b932 	b.w	6cfc <arch_irq_enable>
}
   19a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   19a9c:	f7ed b93e 	b.w	6d1c <arch_irq_disable>
   19aa0:	00023da0 	.word	0x00023da0
   19aa4:	00023df0 	.word	0x00023df0
   19aa8:	000230b4 	.word	0x000230b4

00019aac <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   19aac:	b129      	cbz	r1, 19aba <mayfly_is_enabled+0xe>
   19aae:	3901      	subs	r1, #1
   19ab0:	2901      	cmp	r1, #1
   19ab2:	d805      	bhi.n	19ac0 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   19ab4:	200b      	movs	r0, #11
   19ab6:	f7ed b945 	b.w	6d44 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   19aba:	2018      	movs	r0, #24
   19abc:	f7ed b942 	b.w	6d44 <arch_irq_is_enabled>
{
   19ac0:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   19ac2:	4a07      	ldr	r2, [pc, #28]	; (19ae0 <mayfly_is_enabled+0x34>)
   19ac4:	4907      	ldr	r1, [pc, #28]	; (19ae4 <mayfly_is_enabled+0x38>)
   19ac6:	4808      	ldr	r0, [pc, #32]	; (19ae8 <mayfly_is_enabled+0x3c>)
   19ac8:	2336      	movs	r3, #54	; 0x36
   19aca:	f003 fab3 	bl	1d034 <printk>
   19ace:	4040      	eors	r0, r0
   19ad0:	f380 8811 	msr	BASEPRI, r0
   19ad4:	f04f 0003 	mov.w	r0, #3
   19ad8:	df02      	svc	2
		break;
	}

	return 0;
}
   19ada:	2000      	movs	r0, #0
   19adc:	bd08      	pop	{r3, pc}
   19ade:	bf00      	nop
   19ae0:	00023da0 	.word	0x00023da0
   19ae4:	0002314c 	.word	0x0002314c
   19ae8:	000230b4 	.word	0x000230b4

00019aec <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   19aec:	4288      	cmp	r0, r1
   19aee:	d00b      	beq.n	19b08 <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   19af0:	2801      	cmp	r0, #1
   19af2:	d003      	beq.n	19afc <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   19af4:	2802      	cmp	r0, #2
   19af6:	d009      	beq.n	19b0c <mayfly_prio_is_equal+0x20>
   19af8:	2000      	movs	r0, #0
#endif
	       0;
}
   19afa:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   19afc:	f1a1 0002 	sub.w	r0, r1, #2
   19b00:	fab0 f080 	clz	r0, r0
   19b04:	0940      	lsrs	r0, r0, #5
   19b06:	4770      	bx	lr
   19b08:	2001      	movs	r0, #1
   19b0a:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   19b0c:	f1a1 0001 	sub.w	r0, r1, #1
   19b10:	fab0 f080 	clz	r0, r0
   19b14:	0940      	lsrs	r0, r0, #5
   19b16:	4770      	bx	lr

00019b18 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   19b18:	2901      	cmp	r1, #1
{
   19b1a:	b508      	push	{r3, lr}
	switch (callee_id) {
   19b1c:	d00f      	beq.n	19b3e <mayfly_pend+0x26>
   19b1e:	2902      	cmp	r1, #2
   19b20:	d00d      	beq.n	19b3e <mayfly_pend+0x26>
   19b22:	b191      	cbz	r1, 19b4a <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   19b24:	4a0c      	ldr	r2, [pc, #48]	; (19b58 <mayfly_pend+0x40>)
   19b26:	490d      	ldr	r1, [pc, #52]	; (19b5c <mayfly_pend+0x44>)
   19b28:	480d      	ldr	r0, [pc, #52]	; (19b60 <mayfly_pend+0x48>)
   19b2a:	2367      	movs	r3, #103	; 0x67
   19b2c:	f003 fa82 	bl	1d034 <printk>
   19b30:	4040      	eors	r0, r0
   19b32:	f380 8811 	msr	BASEPRI, r0
   19b36:	f04f 0003 	mov.w	r0, #3
   19b3a:	df02      	svc	2
		break;
	}
}
   19b3c:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19b3e:	4b09      	ldr	r3, [pc, #36]	; (19b64 <mayfly_pend+0x4c>)
   19b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
   19b44:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   19b48:	bd08      	pop	{r3, pc}
   19b4a:	4b06      	ldr	r3, [pc, #24]	; (19b64 <mayfly_pend+0x4c>)
   19b4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   19b50:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   19b54:	bd08      	pop	{r3, pc}
   19b56:	bf00      	nop
   19b58:	00023da0 	.word	0x00023da0
   19b5c:	0002314c 	.word	0x0002314c
   19b60:	000230b4 	.word	0x000230b4
   19b64:	e000e100 	.word	0xe000e100

00019b68 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   19b68:	2803      	cmp	r0, #3
{
   19b6a:	b510      	push	{r4, lr}
   19b6c:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   19b6e:	d804      	bhi.n	19b7a <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   19b70:	4b11      	ldr	r3, [pc, #68]	; (19bb8 <hal_ticker_instance0_caller_id_get+0x50>)
   19b72:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   19b74:	b18c      	cbz	r4, 19b9a <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   19b76:	4620      	mov	r0, r4
   19b78:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   19b7a:	4a10      	ldr	r2, [pc, #64]	; (19bbc <hal_ticker_instance0_caller_id_get+0x54>)
   19b7c:	4910      	ldr	r1, [pc, #64]	; (19bc0 <hal_ticker_instance0_caller_id_get+0x58>)
   19b7e:	4811      	ldr	r0, [pc, #68]	; (19bc4 <hal_ticker_instance0_caller_id_get+0x5c>)
   19b80:	232b      	movs	r3, #43	; 0x2b
   19b82:	f003 fa57 	bl	1d034 <printk>
   19b86:	4040      	eors	r0, r0
   19b88:	f380 8811 	msr	BASEPRI, r0
   19b8c:	f04f 0003 	mov.w	r0, #3
   19b90:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   19b92:	4b09      	ldr	r3, [pc, #36]	; (19bb8 <hal_ticker_instance0_caller_id_get+0x50>)
   19b94:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   19b96:	2c00      	cmp	r4, #0
   19b98:	d1ed      	bne.n	19b76 <hal_ticker_instance0_caller_id_get+0xe>
   19b9a:	4a08      	ldr	r2, [pc, #32]	; (19bbc <hal_ticker_instance0_caller_id_get+0x54>)
   19b9c:	490a      	ldr	r1, [pc, #40]	; (19bc8 <hal_ticker_instance0_caller_id_get+0x60>)
   19b9e:	4809      	ldr	r0, [pc, #36]	; (19bc4 <hal_ticker_instance0_caller_id_get+0x5c>)
   19ba0:	232e      	movs	r3, #46	; 0x2e
   19ba2:	f003 fa47 	bl	1d034 <printk>
   19ba6:	4040      	eors	r0, r0
   19ba8:	f380 8811 	msr	BASEPRI, r0
   19bac:	f04f 0003 	mov.w	r0, #3
   19bb0:	df02      	svc	2
}
   19bb2:	4620      	mov	r0, r4
   19bb4:	bd10      	pop	{r4, pc}
   19bb6:	bf00      	nop
   19bb8:	00023ea8 	.word	0x00023ea8
   19bbc:	00023e14 	.word	0x00023e14
   19bc0:	00023e64 	.word	0x00023e64
   19bc4:	000230b4 	.word	0x000230b4
   19bc8:	00023e84 	.word	0x00023e84

00019bcc <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   19bcc:	3801      	subs	r0, #1
{
   19bce:	b510      	push	{r4, lr}
   19bd0:	461c      	mov	r4, r3
   19bd2:	2804      	cmp	r0, #4
   19bd4:	f200 8082 	bhi.w	19cdc <hal_ticker_instance0_sched+0x110>
   19bd8:	e8df f000 	tbb	[pc, r0]
   19bdc:	3f302112 	.word	0x3f302112
   19be0:	03          	.byte	0x03
   19be1:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   19be2:	2904      	cmp	r1, #4
   19be4:	d04a      	beq.n	19c7c <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   19be6:	4a44      	ldr	r2, [pc, #272]	; (19cf8 <hal_ticker_instance0_sched+0x12c>)
   19be8:	4944      	ldr	r1, [pc, #272]	; (19cfc <hal_ticker_instance0_sched+0x130>)
   19bea:	4845      	ldr	r0, [pc, #276]	; (19d00 <hal_ticker_instance0_sched+0x134>)
   19bec:	23ba      	movs	r3, #186	; 0xba
   19bee:	f003 fa21 	bl	1d034 <printk>
   19bf2:	4040      	eors	r0, r0
   19bf4:	f380 8811 	msr	BASEPRI, r0
   19bf8:	f04f 0003 	mov.w	r0, #3
   19bfc:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   19bfe:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   19c00:	2904      	cmp	r1, #4
   19c02:	d043      	beq.n	19c8c <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   19c04:	4a3c      	ldr	r2, [pc, #240]	; (19cf8 <hal_ticker_instance0_sched+0x12c>)
   19c06:	493d      	ldr	r1, [pc, #244]	; (19cfc <hal_ticker_instance0_sched+0x130>)
   19c08:	483d      	ldr	r0, [pc, #244]	; (19d00 <hal_ticker_instance0_sched+0x134>)
   19c0a:	234e      	movs	r3, #78	; 0x4e
   19c0c:	f003 fa12 	bl	1d034 <printk>
   19c10:	4040      	eors	r0, r0
   19c12:	f380 8811 	msr	BASEPRI, r0
   19c16:	f04f 0003 	mov.w	r0, #3
   19c1a:	df02      	svc	2
}
   19c1c:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   19c1e:	2903      	cmp	r1, #3
   19c20:	d03c      	beq.n	19c9c <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   19c22:	4a35      	ldr	r2, [pc, #212]	; (19cf8 <hal_ticker_instance0_sched+0x12c>)
   19c24:	4935      	ldr	r1, [pc, #212]	; (19cfc <hal_ticker_instance0_sched+0x130>)
   19c26:	4836      	ldr	r0, [pc, #216]	; (19d00 <hal_ticker_instance0_sched+0x134>)
   19c28:	2365      	movs	r3, #101	; 0x65
   19c2a:	f003 fa03 	bl	1d034 <printk>
   19c2e:	4040      	eors	r0, r0
   19c30:	f380 8811 	msr	BASEPRI, r0
   19c34:	f04f 0003 	mov.w	r0, #3
   19c38:	df02      	svc	2
}
   19c3a:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   19c3c:	2904      	cmp	r1, #4
   19c3e:	d035      	beq.n	19cac <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   19c40:	4a2d      	ldr	r2, [pc, #180]	; (19cf8 <hal_ticker_instance0_sched+0x12c>)
   19c42:	492e      	ldr	r1, [pc, #184]	; (19cfc <hal_ticker_instance0_sched+0x130>)
   19c44:	482e      	ldr	r0, [pc, #184]	; (19d00 <hal_ticker_instance0_sched+0x134>)
   19c46:	237c      	movs	r3, #124	; 0x7c
   19c48:	f003 f9f4 	bl	1d034 <printk>
   19c4c:	4040      	eors	r0, r0
   19c4e:	f380 8811 	msr	BASEPRI, r0
   19c52:	f04f 0003 	mov.w	r0, #3
   19c56:	df02      	svc	2
}
   19c58:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   19c5a:	2903      	cmp	r1, #3
   19c5c:	d036      	beq.n	19ccc <hal_ticker_instance0_sched+0x100>
   19c5e:	2904      	cmp	r1, #4
   19c60:	d02c      	beq.n	19cbc <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   19c62:	4a25      	ldr	r2, [pc, #148]	; (19cf8 <hal_ticker_instance0_sched+0x12c>)
   19c64:	4925      	ldr	r1, [pc, #148]	; (19cfc <hal_ticker_instance0_sched+0x130>)
   19c66:	4826      	ldr	r0, [pc, #152]	; (19d00 <hal_ticker_instance0_sched+0x134>)
   19c68:	23a2      	movs	r3, #162	; 0xa2
   19c6a:	f003 f9e3 	bl	1d034 <printk>
   19c6e:	4040      	eors	r0, r0
   19c70:	f380 8811 	msr	BASEPRI, r0
   19c74:	f04f 0003 	mov.w	r0, #3
   19c78:	df02      	svc	2
}
   19c7a:	bd10      	pop	{r4, pc}
			m.param = instance;
   19c7c:	4b21      	ldr	r3, [pc, #132]	; (19d04 <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   19c7e:	2102      	movs	r1, #2
			m.param = instance;
   19c80:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   19c82:	2003      	movs	r0, #3
}
   19c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   19c88:	f7f4 bc6a 	b.w	e560 <mayfly_enqueue>
			m.param = instance;
   19c8c:	4b1e      	ldr	r3, [pc, #120]	; (19d08 <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   19c8e:	2102      	movs	r1, #2
			m.param = instance;
   19c90:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   19c92:	2000      	movs	r0, #0
}
   19c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   19c98:	f7f4 bc62 	b.w	e560 <mayfly_enqueue>
			m.param = instance;
   19c9c:	4b1b      	ldr	r3, [pc, #108]	; (19d0c <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   19c9e:	2101      	movs	r1, #1
			m.param = instance;
   19ca0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   19ca2:	4608      	mov	r0, r1
}
   19ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   19ca8:	f7f4 bc5a 	b.w	e560 <mayfly_enqueue>
			m.param = instance;
   19cac:	4b18      	ldr	r3, [pc, #96]	; (19d10 <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   19cae:	2102      	movs	r1, #2
			m.param = instance;
   19cb0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   19cb2:	2001      	movs	r0, #1
}
   19cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   19cb8:	f7f4 bc52 	b.w	e560 <mayfly_enqueue>
			m.param = instance;
   19cbc:	4b15      	ldr	r3, [pc, #84]	; (19d14 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19cbe:	2102      	movs	r1, #2
			m.param = instance;
   19cc0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19cc2:	4608      	mov	r0, r1
}
   19cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19cc8:	f7f4 bc4a 	b.w	e560 <mayfly_enqueue>
			m.param = instance;
   19ccc:	4b12      	ldr	r3, [pc, #72]	; (19d18 <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19cce:	2101      	movs	r1, #1
			m.param = instance;
   19cd0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19cd2:	2002      	movs	r0, #2
}
   19cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19cd8:	f7f4 bc42 	b.w	e560 <mayfly_enqueue>
		LL_ASSERT(0);
   19cdc:	4a06      	ldr	r2, [pc, #24]	; (19cf8 <hal_ticker_instance0_sched+0x12c>)
   19cde:	4907      	ldr	r1, [pc, #28]	; (19cfc <hal_ticker_instance0_sched+0x130>)
   19ce0:	4807      	ldr	r0, [pc, #28]	; (19d00 <hal_ticker_instance0_sched+0x134>)
   19ce2:	23c0      	movs	r3, #192	; 0xc0
   19ce4:	f003 f9a6 	bl	1d034 <printk>
   19ce8:	4040      	eors	r0, r0
   19cea:	f380 8811 	msr	BASEPRI, r0
   19cee:	f04f 0003 	mov.w	r0, #3
   19cf2:	df02      	svc	2
}
   19cf4:	bd10      	pop	{r4, pc}
   19cf6:	bf00      	nop
   19cf8:	00023e14 	.word	0x00023e14
   19cfc:	0002314c 	.word	0x0002314c
   19d00:	000230b4 	.word	0x000230b4
   19d04:	20000590 	.word	0x20000590
   19d08:	20000580 	.word	0x20000580
   19d0c:	20000570 	.word	0x20000570
   19d10:	200005c0 	.word	0x200005c0
   19d14:	200005a0 	.word	0x200005a0
   19d18:	200005b0 	.word	0x200005b0

00019d1c <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   19d1c:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   19d1e:	2000      	movs	r0, #0
   19d20:	f7ff b9f2 	b.w	19108 <cntr_cmp_set>

00019d24 <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   19d24:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   19d26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   19d2a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   19d2e:	3201      	adds	r2, #1
   19d30:	d008      	beq.n	19d44 <hci_vendor_read_static_addr+0x20>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   19d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19d36:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   19d3a:	f013 0301 	ands.w	r3, r3, #1
   19d3e:	d10a      	bne.n	19d56 <hci_vendor_read_static_addr+0x32>
		}

		return 1;
	}

	return 0;
   19d40:	4618      	mov	r0, r3
}
   19d42:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   19d44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   19d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19d4c:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   19d4e:	4293      	cmp	r3, r2
   19d50:	d1ef      	bne.n	19d32 <hci_vendor_read_static_addr+0xe>
	return 0;
   19d52:	2000      	movs	r0, #0
}
   19d54:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   19d56:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   19d5a:	7003      	strb	r3, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   19d5c:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   19d5e:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   19d62:	f3c3 2307 	ubfx	r3, r3, #8, #8
   19d66:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   19d68:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   19d6a:	f880 c003 	strb.w	ip, [r0, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   19d6e:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   19d72:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   19d74:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   19d78:	f063 033f 	orn	r3, r3, #63	; 0x3f
   19d7c:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   19d7e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   19d82:	3301      	adds	r3, #1
   19d84:	d03b      	beq.n	19dfe <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   19d86:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   19d8a:	3301      	adds	r3, #1
   19d8c:	d037      	beq.n	19dfe <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   19d8e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   19d92:	3301      	adds	r3, #1
   19d94:	d033      	beq.n	19dfe <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   19d96:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   19d9a:	3301      	adds	r3, #1
   19d9c:	d02f      	beq.n	19dfe <hci_vendor_read_static_addr+0xda>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   19d9e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   19da2:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   19da4:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   19da6:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   19daa:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   19dae:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   19db0:	f880 c009 	strb.w	ip, [r0, #9]
   19db4:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   19db6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   19dba:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   19dbc:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   19dbe:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   19dc2:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   19dc6:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   19dc8:	f880 c00d 	strb.w	ip, [r0, #13]
   19dcc:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   19dce:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   19dd2:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   19dd4:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   19dd6:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   19dda:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   19dde:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   19de0:	73c3      	strb	r3, [r0, #15]
   19de2:	f880 c011 	strb.w	ip, [r0, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   19de6:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   19dea:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   19dec:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   19dee:	0a11      	lsrs	r1, r2, #8
   19df0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   19df4:	74c3      	strb	r3, [r0, #19]
	dst[0] = val;
   19df6:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   19df8:	7541      	strb	r1, [r0, #21]
		return 1;
   19dfa:	2001      	movs	r0, #1
}
   19dfc:	bd08      	pop	{r3, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   19dfe:	2210      	movs	r2, #16
   19e00:	2100      	movs	r1, #0
   19e02:	3006      	adds	r0, #6
   19e04:	f005 fb93 	bl	1f52e <memset>
		return 1;
   19e08:	2001      	movs	r0, #1
}
   19e0a:	bd08      	pop	{r3, pc}

00019e0c <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   19e0c:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   19e0e:	2210      	movs	r2, #16
{
   19e10:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   19e12:	2100      	movs	r1, #0
   19e14:	f005 fb8b 	bl	1f52e <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   19e18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   19e1c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   19e20:	3201      	adds	r2, #1
   19e22:	d034      	beq.n	19e8e <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   19e24:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   19e28:	3201      	adds	r2, #1
   19e2a:	d030      	beq.n	19e8e <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   19e2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   19e30:	3201      	adds	r2, #1
   19e32:	d02c      	beq.n	19e8e <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   19e34:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   19e38:	3201      	adds	r2, #1
   19e3a:	d028      	beq.n	19e8e <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   19e3c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   19e40:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   19e42:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   19e44:	0a08      	lsrs	r0, r1, #8
   19e46:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   19e4a:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   19e4c:	70e0      	strb	r0, [r4, #3]
   19e4e:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   19e50:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   19e54:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   19e56:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   19e58:	0a08      	lsrs	r0, r1, #8
   19e5a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   19e5e:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   19e60:	71e0      	strb	r0, [r4, #7]
   19e62:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   19e64:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   19e68:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   19e6a:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   19e6c:	0a08      	lsrs	r0, r1, #8
   19e6e:	f3c2 2207 	ubfx	r2, r2, #8, #8
   19e72:	7262      	strb	r2, [r4, #9]
	dst[0] = val;
   19e74:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   19e76:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   19e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   19e7c:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   19e7e:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   19e80:	0a11      	lsrs	r1, r2, #8
   19e82:	f3c3 2307 	ubfx	r3, r3, #8, #8
   19e86:	7363      	strb	r3, [r4, #13]
	dst[0] = val;
   19e88:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   19e8a:	73e1      	strb	r1, [r4, #15]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   19e8c:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   19e8e:	4620      	mov	r0, r4
   19e90:	2210      	movs	r2, #16
}
   19e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   19e96:	2100      	movs	r1, #0
   19e98:	f005 bb49 	b.w	1f52e <memset>

00019e9c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   19e9c:	4b02      	ldr	r3, [pc, #8]	; (19ea8 <net_buf_pool_get+0xc>)
   19e9e:	2228      	movs	r2, #40	; 0x28
   19ea0:	fb02 3000 	mla	r0, r2, r0, r3
   19ea4:	4770      	bx	lr
   19ea6:	bf00      	nop
   19ea8:	20000918 	.word	0x20000918

00019eac <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19eac:	7982      	ldrb	r2, [r0, #6]

	return buf - pool->__bufs;
   19eae:	4b05      	ldr	r3, [pc, #20]	; (19ec4 <net_buf_id+0x18>)
   19eb0:	2128      	movs	r1, #40	; 0x28
   19eb2:	fb01 3302 	mla	r3, r1, r2, r3
   19eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19eb8:	1ac0      	subs	r0, r0, r3
}
   19eba:	4b03      	ldr	r3, [pc, #12]	; (19ec8 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   19ebc:	10c0      	asrs	r0, r0, #3
}
   19ebe:	4358      	muls	r0, r3
   19ec0:	4770      	bx	lr
   19ec2:	bf00      	nop
   19ec4:	20000918 	.word	0x20000918
   19ec8:	aaaaaaab 	.word	0xaaaaaaab

00019ecc <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   19ecc:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19ece:	4b0a      	ldr	r3, [pc, #40]	; (19ef8 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19ed0:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19ed2:	2428      	movs	r4, #40	; 0x28
   19ed4:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   19ed8:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19eda:	6a1b      	ldr	r3, [r3, #32]
   19edc:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   19ede:	6823      	ldr	r3, [r4, #0]
   19ee0:	429a      	cmp	r2, r3
   19ee2:	bf94      	ite	ls
   19ee4:	600a      	strls	r2, [r1, #0]
   19ee6:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   19ee8:	f7ff ffe0 	bl	19eac <net_buf_id>
   19eec:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   19ef0:	fb02 3000 	mla	r0, r2, r0, r3
   19ef4:	bd10      	pop	{r4, pc}
   19ef6:	bf00      	nop
   19ef8:	20000918 	.word	0x20000918

00019efc <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   19efc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f00:	4605      	mov	r5, r0
   19f02:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   19f04:	4610      	mov	r0, r2
   19f06:	4619      	mov	r1, r3
{
   19f08:	4691      	mov	r9, r2
   19f0a:	4698      	mov	r8, r3
   19f0c:	4617      	mov	r7, r2
   19f0e:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   19f10:	f008 f8bf 	bl	22092 <sys_clock_timeout_end_calc>
   19f14:	4682      	mov	sl, r0
   19f16:	468b      	mov	fp, r1
	__asm__ volatile(
   19f18:	f04f 0320 	mov.w	r3, #32
   19f1c:	f3ef 8111 	mrs	r1, BASEPRI
   19f20:	f383 8811 	msr	BASEPRI, r3
   19f24:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   19f28:	8b6b      	ldrh	r3, [r5, #26]
   19f2a:	2b00      	cmp	r3, #0
   19f2c:	d055      	beq.n	19fda <net_buf_alloc_len+0xde>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   19f2e:	8b2a      	ldrh	r2, [r5, #24]
   19f30:	429a      	cmp	r2, r3
   19f32:	d93e      	bls.n	19fb2 <net_buf_alloc_len+0xb6>
   19f34:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   19f36:	2200      	movs	r2, #0
   19f38:	2300      	movs	r3, #0
   19f3a:	4628      	mov	r0, r5
   19f3c:	f001 fd90 	bl	1ba60 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   19f40:	9900      	ldr	r1, [sp, #0]
   19f42:	4604      	mov	r4, r0
   19f44:	2800      	cmp	r0, #0
   19f46:	d034      	beq.n	19fb2 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   19f48:	f381 8811 	msr	BASEPRI, r1
   19f4c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   19f50:	9b01      	ldr	r3, [sp, #4]
   19f52:	2b00      	cmp	r3, #0
   19f54:	d051      	beq.n	19ffa <net_buf_alloc_len+0xfe>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   19f56:	ea58 0309 	orrs.w	r3, r8, r9
   19f5a:	d00f      	beq.n	19f7c <net_buf_alloc_len+0x80>
   19f5c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   19f60:	bf08      	it	eq
   19f62:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   19f66:	d009      	beq.n	19f7c <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   19f68:	f002 fc70 	bl	1c84c <sys_clock_tick_get>
   19f6c:	ebba 0700 	subs.w	r7, sl, r0
   19f70:	eb6b 0601 	sbc.w	r6, fp, r1
   19f74:	2e00      	cmp	r6, #0
   19f76:	bfbc      	itt	lt
   19f78:	2700      	movlt	r7, #0
   19f7a:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19f7c:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   19f7e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1a010 <net_buf_alloc_len+0x114>
   19f82:	2228      	movs	r2, #40	; 0x28
   19f84:	fb02 8303 	mla	r3, r2, r3, r8
   19f88:	a901      	add	r1, sp, #4
   19f8a:	6a1b      	ldr	r3, [r3, #32]
   19f8c:	681b      	ldr	r3, [r3, #0]
   19f8e:	463a      	mov	r2, r7
   19f90:	681d      	ldr	r5, [r3, #0]
   19f92:	4620      	mov	r0, r4
   19f94:	4633      	mov	r3, r6
   19f96:	47a8      	blx	r5
   19f98:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   19f9a:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   19f9c:	bb70      	cbnz	r0, 19ffc <net_buf_alloc_len+0x100>
	k_lifo_put(&pool->free, buf);
   19f9e:	79a0      	ldrb	r0, [r4, #6]
   19fa0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19fa4:	4621      	mov	r1, r4
   19fa6:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   19faa:	f007 fde9 	bl	21b80 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   19fae:	462c      	mov	r4, r5
}
   19fb0:	e01f      	b.n	19ff2 <net_buf_alloc_len+0xf6>
		uninit_count = pool->uninit_count--;
   19fb2:	8b6b      	ldrh	r3, [r5, #26]
   19fb4:	1e5a      	subs	r2, r3, #1
   19fb6:	836a      	strh	r2, [r5, #26]
   19fb8:	f381 8811 	msr	BASEPRI, r1
   19fbc:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   19fc0:	8b2c      	ldrh	r4, [r5, #24]
   19fc2:	1ae3      	subs	r3, r4, r3
   19fc4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   19fc6:	2018      	movs	r0, #24
   19fc8:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   19fcc:	4810      	ldr	r0, [pc, #64]	; (1a010 <net_buf_alloc_len+0x114>)
   19fce:	4b11      	ldr	r3, [pc, #68]	; (1a014 <net_buf_alloc_len+0x118>)
   19fd0:	1a2d      	subs	r5, r5, r0
   19fd2:	10ed      	asrs	r5, r5, #3
   19fd4:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   19fd6:	71a5      	strb	r5, [r4, #6]
		goto success;
   19fd8:	e7ba      	b.n	19f50 <net_buf_alloc_len+0x54>
   19fda:	f381 8811 	msr	BASEPRI, r1
   19fde:	f3bf 8f6f 	isb	sy
   19fe2:	464a      	mov	r2, r9
   19fe4:	4643      	mov	r3, r8
   19fe6:	4628      	mov	r0, r5
   19fe8:	f001 fd3a 	bl	1ba60 <z_impl_k_queue_get>
	if (!buf) {
   19fec:	4604      	mov	r4, r0
   19fee:	2800      	cmp	r0, #0
   19ff0:	d1ae      	bne.n	19f50 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   19ff2:	4620      	mov	r0, r4
   19ff4:	b003      	add	sp, #12
   19ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   19ffa:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   19ffc:	2300      	movs	r3, #0
	buf->ref   = 1U;
   19ffe:	2201      	movs	r2, #1
	buf->frags = NULL;
   1a000:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1a002:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1a004:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1a006:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1a008:	6923      	ldr	r3, [r4, #16]
   1a00a:	81e2      	strh	r2, [r4, #14]
   1a00c:	60a3      	str	r3, [r4, #8]
	return buf;
   1a00e:	e7f0      	b.n	19ff2 <net_buf_alloc_len+0xf6>
   1a010:	20000918 	.word	0x20000918
   1a014:	cccccccd 	.word	0xcccccccd

0001a018 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1a018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a01c:	4d17      	ldr	r5, [pc, #92]	; (1a07c <net_buf_unref+0x64>)
   1a01e:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1a020:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1a022:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   1a024:	b90c      	cbnz	r4, 1a02a <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1a026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1a02a:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1a02c:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1a030:	3b01      	subs	r3, #1
   1a032:	b2db      	uxtb	r3, r3
   1a034:	7123      	strb	r3, [r4, #4]
   1a036:	2b00      	cmp	r3, #0
   1a038:	d1f5      	bne.n	1a026 <net_buf_unref+0xe>
		if (buf->__buf) {
   1a03a:	6921      	ldr	r1, [r4, #16]
   1a03c:	b159      	cbz	r1, 1a056 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1a03e:	7963      	ldrb	r3, [r4, #5]
   1a040:	079b      	lsls	r3, r3, #30
   1a042:	d407      	bmi.n	1a054 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a044:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1a046:	fb07 5303 	mla	r3, r7, r3, r5
   1a04a:	4620      	mov	r0, r4
   1a04c:	6a1b      	ldr	r3, [r3, #32]
   1a04e:	681b      	ldr	r3, [r3, #0]
   1a050:	689b      	ldr	r3, [r3, #8]
   1a052:	4798      	blx	r3
			buf->__buf = NULL;
   1a054:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1a056:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1a058:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1a05a:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1a05e:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1a060:	69db      	ldr	r3, [r3, #28]
   1a062:	b11b      	cbz	r3, 1a06c <net_buf_unref+0x54>
			pool->destroy(buf);
   1a064:	4620      	mov	r0, r4
   1a066:	4798      	blx	r3
{
   1a068:	4644      	mov	r4, r8
   1a06a:	e7db      	b.n	1a024 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1a06c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a070:	4621      	mov	r1, r4
   1a072:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   1a076:	f007 fd83 	bl	21b80 <k_queue_prepend>
}
   1a07a:	e7f5      	b.n	1a068 <net_buf_unref+0x50>
   1a07c:	20000918 	.word	0x20000918

0001a080 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1a080:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1a082:	4b09      	ldr	r3, [pc, #36]	; (1a0a8 <gpio_nrfx_init+0x28>)
   1a084:	781a      	ldrb	r2, [r3, #0]
   1a086:	b96a      	cbnz	r2, 1a0a4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1a088:	2101      	movs	r1, #1
   1a08a:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1a08c:	2006      	movs	r0, #6
   1a08e:	2105      	movs	r1, #5
   1a090:	f7ec fe66 	bl	6d60 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1a094:	2006      	movs	r0, #6
   1a096:	f7ec fe31 	bl	6cfc <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1a09a:	4b04      	ldr	r3, [pc, #16]	; (1a0ac <gpio_nrfx_init+0x2c>)
   1a09c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1a0a0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1a0a4:	2000      	movs	r0, #0
   1a0a6:	bd08      	pop	{r3, pc}
   1a0a8:	2000356a 	.word	0x2000356a
   1a0ac:	40006000 	.word	0x40006000

0001a0b0 <gpio_nrfx_pin_interrupt_configure>:
{
   1a0b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1a0b2:	460d      	mov	r5, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1a0b4:	6841      	ldr	r1, [r0, #4]
	return port->data;
   1a0b6:	6906      	ldr	r6, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1a0b8:	7a09      	ldrb	r1, [r1, #8]
   1a0ba:	f005 041f 	and.w	r4, r5, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   1a0be:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1a0c2:	ea44 1441 	orr.w	r4, r4, r1, lsl #5
   1a0c6:	d10c      	bne.n	1a0e2 <gpio_nrfx_pin_interrupt_configure+0x32>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1a0c8:	f004 011f 	and.w	r1, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1a0cc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1a0d0:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   1a0d4:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1a0d8:	07c8      	lsls	r0, r1, #31
   1a0da:	d507      	bpl.n	1a0ec <gpio_nrfx_pin_interrupt_configure+0x3c>
		return -ENOTSUP;
   1a0dc:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1a0e0:	e09a      	b.n	1a218 <gpio_nrfx_pin_interrupt_configure+0x168>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1a0e2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1a0e6:	68f1      	ldr	r1, [r6, #12]
   1a0e8:	f000 8098 	beq.w	1a21c <gpio_nrfx_pin_interrupt_configure+0x16c>
   1a0ec:	68f0      	ldr	r0, [r6, #12]
   1a0ee:	2101      	movs	r1, #1
   1a0f0:	40a9      	lsls	r1, r5
   1a0f2:	4301      	orrs	r1, r0
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1a0f4:	6970      	ldr	r0, [r6, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1a0f6:	60f1      	str	r1, [r6, #12]
   1a0f8:	2101      	movs	r1, #1
   1a0fa:	40a9      	lsls	r1, r5
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1a0fc:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1a100:	69b2      	ldr	r2, [r6, #24]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1a102:	bf0c      	ite	eq
   1a104:	4308      	orreq	r0, r1
   1a106:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1a108:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1a10c:	bf0c      	ite	eq
   1a10e:	430a      	orreq	r2, r1
   1a110:	438a      	bicne	r2, r1
   1a112:	61b2      	str	r2, [r6, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1a114:	6932      	ldr	r2, [r6, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1a116:	6170      	str	r0, [r6, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1a118:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   1a11c:	bf0c      	ite	eq
   1a11e:	4311      	orreq	r1, r2
   1a120:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1a124:	4a49      	ldr	r2, [pc, #292]	; (1a24c <gpio_nrfx_pin_interrupt_configure+0x19c>)
   1a126:	6131      	str	r1, [r6, #16]
   1a128:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1a12c:	2000      	movs	r0, #0
   1a12e:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1a130:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   1a134:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   1a138:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1a13c:	428c      	cmp	r4, r1
   1a13e:	d172      	bne.n	1a226 <gpio_nrfx_pin_interrupt_configure+0x176>
		    && (intenset & BIT(i))) {
   1a140:	fa23 f100 	lsr.w	r1, r3, r0
   1a144:	07c9      	lsls	r1, r1, #31
   1a146:	d56e      	bpl.n	1a226 <gpio_nrfx_pin_interrupt_configure+0x176>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1a148:	0083      	lsls	r3, r0, #2
   1a14a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a14e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1a152:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1a156:	f021 0101 	bic.w	r1, r1, #1
   1a15a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1a15e:	2301      	movs	r3, #1
   1a160:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   1a162:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   1a166:	b2c0      	uxtb	r0, r0
   1a168:	f001 f808 	bl	1b17c <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1a16c:	4620      	mov	r0, r4
   1a16e:	2100      	movs	r1, #0
   1a170:	f007 facf 	bl	21712 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1a174:	68f0      	ldr	r0, [r6, #12]
   1a176:	40e8      	lsrs	r0, r5
   1a178:	f010 0001 	ands.w	r0, r0, #1
   1a17c:	d04c      	beq.n	1a218 <gpio_nrfx_pin_interrupt_configure+0x168>
		if (data->trig_edge & BIT(pin)) {
   1a17e:	6970      	ldr	r0, [r6, #20]
   1a180:	40e8      	lsrs	r0, r5
   1a182:	f010 0201 	ands.w	r2, r0, #1
   1a186:	d055      	beq.n	1a234 <gpio_nrfx_pin_interrupt_configure+0x184>
				if (data->double_edge & BIT(pin)) {
   1a188:	69b3      	ldr	r3, [r6, #24]
   1a18a:	40eb      	lsrs	r3, r5
   1a18c:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1a18e:	bf5f      	itttt	pl
   1a190:	6931      	ldrpl	r1, [r6, #16]
   1a192:	fa21 f505 	lsrpl.w	r5, r1, r5
   1a196:	f005 0501 	andpl.w	r5, r5, #1
   1a19a:	f1c5 0502 	rsbpl	r5, r5, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1a19e:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1a1a2:	bf54      	ite	pl
   1a1a4:	b2ed      	uxtbpl	r5, r5
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1a1a6:	2503      	movmi	r5, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1a1a8:	f001 f808 	bl	1b1bc <nrfx_gpiote_channel_alloc>
   1a1ac:	4b28      	ldr	r3, [pc, #160]	; (1a250 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
   1a1ae:	4298      	cmp	r0, r3
   1a1b0:	d13d      	bne.n	1a22e <gpio_nrfx_pin_interrupt_configure+0x17e>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   1a1b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1a1b6:	0093      	lsls	r3, r2, #2
   1a1b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a1bc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a1c0:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1a1c2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1a1c6:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
   1a1ca:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   1a1ce:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a1d2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1a1d6:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   1a1da:	430c      	orrs	r4, r1
   1a1dc:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   1a1e0:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   1a1e4:	0093      	lsls	r3, r2, #2
   1a1e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a1ea:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a1ee:	2000      	movs	r0, #0
   1a1f0:	6018      	str	r0, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   1a1f2:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1a1f6:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1a1f8:	008b      	lsls	r3, r1, #2
   1a1fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a1fe:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1a202:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1a206:	f042 0201 	orr.w	r2, r2, #1
   1a20a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1a20e:	4a0f      	ldr	r2, [pc, #60]	; (1a24c <gpio_nrfx_pin_interrupt_configure+0x19c>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1a210:	2301      	movs	r3, #1
   1a212:	408b      	lsls	r3, r1
   1a214:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1a218:	b002      	add	sp, #8
   1a21a:	bd70      	pop	{r4, r5, r6, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1a21c:	2001      	movs	r0, #1
   1a21e:	40a8      	lsls	r0, r5
   1a220:	ea21 0100 	bic.w	r1, r1, r0
   1a224:	e766      	b.n	1a0f4 <gpio_nrfx_pin_interrupt_configure+0x44>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1a226:	3001      	adds	r0, #1
   1a228:	2808      	cmp	r0, #8
   1a22a:	d181      	bne.n	1a130 <gpio_nrfx_pin_interrupt_configure+0x80>
   1a22c:	e79e      	b.n	1a16c <gpio_nrfx_pin_interrupt_configure+0xbc>
		return -ENODEV;
   1a22e:	f06f 0012 	mvn.w	r0, #18
   1a232:	e7f1      	b.n	1a218 <gpio_nrfx_pin_interrupt_configure+0x168>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1a234:	6931      	ldr	r1, [r6, #16]
   1a236:	40e9      	lsrs	r1, r5
   1a238:	f001 0101 	and.w	r1, r1, #1
   1a23c:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1a240:	4620      	mov	r0, r4
   1a242:	b2c9      	uxtb	r1, r1
   1a244:	f007 fa65 	bl	21712 <nrf_gpio_cfg_sense_set>
	int res = 0;
   1a248:	4610      	mov	r0, r2
   1a24a:	e7e5      	b.n	1a218 <gpio_nrfx_pin_interrupt_configure+0x168>
   1a24c:	40006000 	.word	0x40006000
   1a250:	0bad0000 	.word	0x0bad0000

0001a254 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1a254:	4b2a      	ldr	r3, [pc, #168]	; (1a300 <gpio_nrfx_config+0xac>)
{
   1a256:	b570      	push	{r4, r5, r6, lr}
	return port->config;
   1a258:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1a25a:	482a      	ldr	r0, [pc, #168]	; (1a304 <gpio_nrfx_config+0xb0>)
   1a25c:	4013      	ands	r3, r2
   1a25e:	4283      	cmp	r3, r0
   1a260:	d03e      	beq.n	1a2e0 <gpio_nrfx_config+0x8c>
   1a262:	d80d      	bhi.n	1a280 <gpio_nrfx_config+0x2c>
   1a264:	2b06      	cmp	r3, #6
   1a266:	d015      	beq.n	1a294 <gpio_nrfx_config+0x40>
   1a268:	d805      	bhi.n	1a276 <gpio_nrfx_config+0x22>
   1a26a:	b19b      	cbz	r3, 1a294 <gpio_nrfx_config+0x40>
   1a26c:	2b02      	cmp	r3, #2
   1a26e:	d039      	beq.n	1a2e4 <gpio_nrfx_config+0x90>
   1a270:	f06f 0015 	mvn.w	r0, #21
   1a274:	e033      	b.n	1a2de <gpio_nrfx_config+0x8a>
   1a276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1a27a:	d1f9      	bne.n	1a270 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1a27c:	2301      	movs	r3, #1
   1a27e:	e009      	b.n	1a294 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1a280:	4821      	ldr	r0, [pc, #132]	; (1a308 <gpio_nrfx_config+0xb4>)
   1a282:	4283      	cmp	r3, r0
   1a284:	d030      	beq.n	1a2e8 <gpio_nrfx_config+0x94>
   1a286:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1a28a:	d02f      	beq.n	1a2ec <gpio_nrfx_config+0x98>
   1a28c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1a290:	d1ee      	bne.n	1a270 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1a292:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1a294:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1a296:	bf54      	ite	pl
   1a298:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1a29c:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1a29e:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1a2a2:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
   1a2a6:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1a2aa:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1a2ae:	d007      	beq.n	1a2c0 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1a2b0:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1a2b4:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1a2b6:	d01b      	beq.n	1a2f0 <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1a2b8:	2201      	movs	r2, #1
   1a2ba:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   1a2bc:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1a2c0:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
    *p_pin = pin_number & 0x1F;
   1a2c4:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1a2c8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1a2cc:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   1a2d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1a2d4:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1a2d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
   1a2dc:	2000      	movs	r0, #0
}
   1a2de:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1a2e0:	2307      	movs	r3, #7
   1a2e2:	e7d7      	b.n	1a294 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1a2e4:	2304      	movs	r3, #4
   1a2e6:	e7d5      	b.n	1a294 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1a2e8:	2305      	movs	r3, #5
   1a2ea:	e7d3      	b.n	1a294 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   1a2ec:	2303      	movs	r3, #3
   1a2ee:	e7d1      	b.n	1a294 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1a2f0:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1a2f2:	bf42      	ittt	mi
   1a2f4:	2201      	movmi	r2, #1
   1a2f6:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   1a2f8:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
   1a2fc:	e7e0      	b.n	1a2c0 <gpio_nrfx_config+0x6c>
   1a2fe:	bf00      	nop
   1a300:	00f00006 	.word	0x00f00006
   1a304:	00100006 	.word	0x00100006
   1a308:	00400002 	.word	0x00400002

0001a30c <gpiote_event_handler>:
{
   1a30c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a310:	4b41      	ldr	r3, [pc, #260]	; (1a418 <gpiote_event_handler+0x10c>)
   1a312:	f8d3 517c 	ldr.w	r5, [r3, #380]	; 0x17c
	if (port_event) {
   1a316:	2d00      	cmp	r5, #0
   1a318:	d059      	beq.n	1a3ce <gpiote_event_handler+0xc2>
	uint32_t out = data->pin_int_en;
   1a31a:	4b40      	ldr	r3, [pc, #256]	; (1a41c <gpiote_event_handler+0x110>)
    return p_reg->IN;
   1a31c:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
	out &= ~data->trig_edge & ~data->double_edge;
   1a320:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
	uint32_t out = data->pin_int_en;
   1a324:	68df      	ldr	r7, [r3, #12]
   1a326:	f8d9 4510 	ldr.w	r4, [r9, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1a32a:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   1a32c:	430a      	orrs	r2, r1
   1a32e:	ea27 0702 	bic.w	r7, r7, r2
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1a332:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   1a334:	ea27 0404 	bic.w	r4, r7, r4
	uint32_t check_pins = level_pins;
   1a338:	463a      	mov	r2, r7
	uint32_t bit = 1U << pin;
   1a33a:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1a33c:	f04f 0800 	mov.w	r8, #0
	while (check_pins) {
   1a340:	bb82      	cbnz	r2, 1a3a4 <gpiote_event_handler+0x98>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a342:	4b35      	ldr	r3, [pc, #212]	; (1a418 <gpiote_event_handler+0x10c>)
   1a344:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   1a348:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1a34c:	4a34      	ldr	r2, [pc, #208]	; (1a420 <gpiote_event_handler+0x114>)
    return p_reg->INTENSET & mask;
   1a34e:	4832      	ldr	r0, [pc, #200]	; (1a418 <gpiote_event_handler+0x10c>)
   1a350:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1a352:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a354:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   1a356:	f8d0 1304 	ldr.w	r1, [r0, #772]	; 0x304
   1a35a:	fa06 fc03 	lsl.w	ip, r6, r3
   1a35e:	ea1c 0f01 	tst.w	ip, r1
   1a362:	d00c      	beq.n	1a37e <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a364:	6811      	ldr	r1, [r2, #0]
   1a366:	b151      	cbz	r1, 1a37e <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1a368:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   1a36c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a370:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1a372:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1a376:	fa06 f101 	lsl.w	r1, r6, r1
   1a37a:	430c      	orrs	r4, r1
   1a37c:	6811      	ldr	r1, [r2, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1a37e:	3301      	adds	r3, #1
   1a380:	2b08      	cmp	r3, #8
   1a382:	f102 0204 	add.w	r2, r2, #4
   1a386:	d1e6      	bne.n	1a356 <gpiote_event_handler+0x4a>
	if (fired_triggers[0]) {
   1a388:	bb1c      	cbnz	r4, 1a3d2 <gpiote_event_handler+0xc6>
	if (port_event) {
   1a38a:	b14d      	cbz	r5, 1a3a0 <gpiote_event_handler+0x94>
	uint32_t out = data->pin_int_en;
   1a38c:	4e23      	ldr	r6, [pc, #140]	; (1a41c <gpiote_event_handler+0x110>)
	out &= ~data->trig_edge & ~data->double_edge;
   1a38e:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
	uint32_t out = data->pin_int_en;
   1a392:	68f2      	ldr	r2, [r6, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1a394:	430b      	orrs	r3, r1
   1a396:	ea22 0203 	bic.w	r2, r2, r3
	uint32_t bit = 1U << pin;
   1a39a:	2401      	movs	r4, #1
	uint32_t pin = 0U;
   1a39c:	2500      	movs	r5, #0
	while (level_pins) {
   1a39e:	bb4a      	cbnz	r2, 1a3f4 <gpiote_event_handler+0xe8>
}
   1a3a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (check_pins & bit) {
   1a3a4:	4216      	tst	r6, r2
   1a3a6:	d00e      	beq.n	1a3c6 <gpiote_event_handler+0xba>
			if (!(level_pins & bit)) {
   1a3a8:	423e      	tst	r6, r7
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1a3aa:	f008 001f 	and.w	r0, r8, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1a3ae:	bf08      	it	eq
   1a3b0:	f500 73e0 	addeq.w	r3, r0, #448	; 0x1c0
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1a3b4:	f04f 0100 	mov.w	r1, #0
   1a3b8:	bf08      	it	eq
   1a3ba:	f859 3023 	ldreq.w	r3, [r9, r3, lsl #2]
   1a3be:	f007 f9a8 	bl	21712 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   1a3c2:	ea22 0206 	bic.w	r2, r2, r6
		++pin;
   1a3c6:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
   1a3ca:	0076      	lsls	r6, r6, #1
   1a3cc:	e7b8      	b.n	1a340 <gpiote_event_handler+0x34>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1a3ce:	462c      	mov	r4, r5
   1a3d0:	e7bc      	b.n	1a34c <gpiote_event_handler+0x40>
	gpio_fire_callbacks(list, port, pins);
   1a3d2:	4b12      	ldr	r3, [pc, #72]	; (1a41c <gpiote_event_handler+0x110>)
   1a3d4:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1a3d6:	2900      	cmp	r1, #0
   1a3d8:	d0d7      	beq.n	1a38a <gpiote_event_handler+0x7e>
   1a3da:	680e      	ldr	r6, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1a3dc:	4f11      	ldr	r7, [pc, #68]	; (1a424 <gpiote_event_handler+0x118>)
		if (cb->pin_mask & pins) {
   1a3de:	688a      	ldr	r2, [r1, #8]
   1a3e0:	4022      	ands	r2, r4
   1a3e2:	d002      	beq.n	1a3ea <gpiote_event_handler+0xde>
			cb->handler(port, cb, cb->pin_mask & pins);
   1a3e4:	684b      	ldr	r3, [r1, #4]
   1a3e6:	4638      	mov	r0, r7
   1a3e8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1a3ea:	2e00      	cmp	r6, #0
   1a3ec:	d0cd      	beq.n	1a38a <gpiote_event_handler+0x7e>
   1a3ee:	4631      	mov	r1, r6
   1a3f0:	6836      	ldr	r6, [r6, #0]
   1a3f2:	e7f4      	b.n	1a3de <gpiote_event_handler+0xd2>
		if (level_pins & bit) {
   1a3f4:	4214      	tst	r4, r2
   1a3f6:	d00c      	beq.n	1a412 <gpiote_event_handler+0x106>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1a3f8:	6931      	ldr	r1, [r6, #16]
   1a3fa:	40e9      	lsrs	r1, r5
   1a3fc:	f001 0101 	and.w	r1, r1, #1
   1a400:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1a404:	b2c9      	uxtb	r1, r1
   1a406:	f005 001f 	and.w	r0, r5, #31
   1a40a:	f007 f982 	bl	21712 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1a40e:	ea22 0204 	bic.w	r2, r2, r4
		++pin;
   1a412:	3501      	adds	r5, #1
		bit <<= 1;
   1a414:	0064      	lsls	r4, r4, #1
   1a416:	e7c2      	b.n	1a39e <gpiote_event_handler+0x92>
   1a418:	40006000 	.word	0x40006000
   1a41c:	20002c44 	.word	0x20002c44
   1a420:	40006100 	.word	0x40006100
   1a424:	200007f0 	.word	0x200007f0

0001a428 <spi_1_init>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEVICE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
   1a428:	b538      	push	{r3, r4, r5, lr}
   1a42a:	4604      	mov	r4, r0
   1a42c:	2200      	movs	r2, #0
   1a42e:	2101      	movs	r1, #1
   1a430:	2004      	movs	r0, #4
   1a432:	f7ec fc95 	bl	6d60 <z_arm_irq_priority_set>
	return dev->data;
   1a436:	6923      	ldr	r3, [r4, #16]
	return dev->config;
   1a438:	6860      	ldr	r0, [r4, #4]
	dev_data->dev = dev;
   1a43a:	65dc      	str	r4, [r3, #92]	; 0x5c
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
   1a43c:	4a0d      	ldr	r2, [pc, #52]	; (1a474 <spi_1_init+0x4c>)
   1a43e:	f100 0108 	add.w	r1, r0, #8
   1a442:	f000 fef3 	bl	1b22c <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
   1a446:	4b0c      	ldr	r3, [pc, #48]	; (1a478 <spi_1_init+0x50>)
   1a448:	4298      	cmp	r0, r3
   1a44a:	d011      	beq.n	1a470 <spi_1_init+0x48>
   1a44c:	4b0b      	ldr	r3, [pc, #44]	; (1a47c <spi_1_init+0x54>)
   1a44e:	4a0c      	ldr	r2, [pc, #48]	; (1a480 <spi_1_init+0x58>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
   1a450:	6821      	ldr	r1, [r4, #0]
   1a452:	480c      	ldr	r0, [pc, #48]	; (1a484 <spi_1_init+0x5c>)
   1a454:	1ad2      	subs	r2, r2, r3
   1a456:	08d2      	lsrs	r2, r2, #3
   1a458:	0192      	lsls	r2, r2, #6
   1a45a:	f042 0201 	orr.w	r2, r2, #1
   1a45e:	f003 fa70 	bl	1d942 <log_1>
		return -EBUSY;
   1a462:	f06f 050f 	mvn.w	r5, #15
SPI_NRFX_SPI_DEVICE(1);
   1a466:	6920      	ldr	r0, [r4, #16]
   1a468:	f007 f9e7 	bl	2183a <spi_context_unlock_unconditionally>
   1a46c:	4628      	mov	r0, r5
   1a46e:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   1a470:	2500      	movs	r5, #0
   1a472:	e7f8      	b.n	1a466 <spi_1_init+0x3e>
   1a474:	0001a505 	.word	0x0001a505
   1a478:	0bad0000 	.word	0x0bad0000
   1a47c:	000225d8 	.word	0x000225d8
   1a480:	00022728 	.word	0x00022728
   1a484:	00025d73 	.word	0x00025d73

0001a488 <transfer_next_chunk>:
{
   1a488:	b530      	push	{r4, r5, lr}
	return dev->data;
   1a48a:	6905      	ldr	r5, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1a48c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
		return ctx->rx_len;
   1a48e:	6dab      	ldr	r3, [r5, #88]	; 0x58
{
   1a490:	b085      	sub	sp, #20
	if (!ctx->tx_len) {
   1a492:	b982      	cbnz	r2, 1a4b6 <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
   1a494:	bb73      	cbnz	r3, 1a4f4 <transfer_next_chunk+0x6c>
	int error = 0;
   1a496:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
   1a498:	2200      	movs	r2, #0
   1a49a:	4611      	mov	r1, r2
   1a49c:	4628      	mov	r0, r5
   1a49e:	f007 f9a7 	bl	217f0 <_spi_context_cs_control>
	ctx->sync_status = status;
   1a4a2:	63ac      	str	r4, [r5, #56]	; 0x38
	z_impl_k_sem_give(sem);
   1a4a4:	f105 0020 	add.w	r0, r5, #32
   1a4a8:	f001 fe7a 	bl	1c1a0 <z_impl_k_sem_give>
	dev_data->busy = false;
   1a4ac:	2300      	movs	r3, #0
   1a4ae:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
   1a4b2:	b005      	add	sp, #20
   1a4b4:	bd30      	pop	{r4, r5, pc}
	} else if (!ctx->rx_len) {
   1a4b6:	4611      	mov	r1, r2
   1a4b8:	b113      	cbz	r3, 1a4c0 <transfer_next_chunk+0x38>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1a4ba:	429a      	cmp	r2, r3
   1a4bc:	bf28      	it	cs
   1a4be:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
   1a4c0:	6cec      	ldr	r4, [r5, #76]	; 0x4c
		dev_data->chunk_len = chunk_len;
   1a4c2:	6629      	str	r1, [r5, #96]	; 0x60
		xfer.p_tx_buffer = ctx->tx_buf;
   1a4c4:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
   1a4c6:	b1bc      	cbz	r4, 1a4f8 <transfer_next_chunk+0x70>
   1a4c8:	2a00      	cmp	r2, #0
   1a4ca:	bf18      	it	ne
   1a4cc:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1a4ce:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1a4d0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   1a4d2:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1a4d4:	b192      	cbz	r2, 1a4fc <transfer_next_chunk+0x74>
   1a4d6:	2b00      	cmp	r3, #0
   1a4d8:	bf18      	it	ne
   1a4da:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   1a4dc:	6840      	ldr	r0, [r0, #4]
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1a4de:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   1a4e0:	2200      	movs	r2, #0
   1a4e2:	4669      	mov	r1, sp
   1a4e4:	f000 ff46 	bl	1b374 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   1a4e8:	4b05      	ldr	r3, [pc, #20]	; (1a500 <transfer_next_chunk+0x78>)
   1a4ea:	4298      	cmp	r0, r3
   1a4ec:	d0e1      	beq.n	1a4b2 <transfer_next_chunk+0x2a>
		error = -EIO;
   1a4ee:	f06f 0404 	mvn.w	r4, #4
   1a4f2:	e7d1      	b.n	1a498 <transfer_next_chunk+0x10>
   1a4f4:	4619      	mov	r1, r3
   1a4f6:	e7e3      	b.n	1a4c0 <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1a4f8:	4622      	mov	r2, r4
   1a4fa:	e7e8      	b.n	1a4ce <transfer_next_chunk+0x46>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1a4fc:	4613      	mov	r3, r2
   1a4fe:	e7ed      	b.n	1a4dc <transfer_next_chunk+0x54>
   1a500:	0bad0000 	.word	0x0bad0000

0001a504 <event_handler>:
{
   1a504:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1a506:	7803      	ldrb	r3, [r0, #0]
{
   1a508:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1a50a:	2b00      	cmp	r3, #0
   1a50c:	d14e      	bne.n	1a5ac <event_handler+0xa8>
	if (!ctx->tx_len) {
   1a50e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   1a510:	b163      	cbz	r3, 1a52c <event_handler+0x28>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1a512:	6e0a      	ldr	r2, [r1, #96]	; 0x60
	if (len > ctx->tx_len) {
   1a514:	429a      	cmp	r2, r3
   1a516:	d91d      	bls.n	1a554 <event_handler+0x50>
   1a518:	4925      	ldr	r1, [pc, #148]	; (1a5b0 <event_handler+0xac>)
   1a51a:	4b26      	ldr	r3, [pc, #152]	; (1a5b4 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
   1a51c:	4826      	ldr	r0, [pc, #152]	; (1a5b8 <event_handler+0xb4>)
   1a51e:	1ac9      	subs	r1, r1, r3
   1a520:	08c9      	lsrs	r1, r1, #3
   1a522:	0189      	lsls	r1, r1, #6
   1a524:	f041 0101 	orr.w	r1, r1, #1
   1a528:	f003 f9fc 	bl	1d924 <log_0>
	if (!ctx->rx_len) {
   1a52c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1a52e:	b163      	cbz	r3, 1a54a <event_handler+0x46>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1a530:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (len > ctx->rx_len) {
   1a532:	429a      	cmp	r2, r3
   1a534:	d924      	bls.n	1a580 <event_handler+0x7c>
   1a536:	491e      	ldr	r1, [pc, #120]	; (1a5b0 <event_handler+0xac>)
   1a538:	4b1e      	ldr	r3, [pc, #120]	; (1a5b4 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
   1a53a:	481f      	ldr	r0, [pc, #124]	; (1a5b8 <event_handler+0xb4>)
   1a53c:	1ac9      	subs	r1, r1, r3
   1a53e:	08c9      	lsrs	r1, r1, #3
   1a540:	0189      	lsls	r1, r1, #6
   1a542:	f041 0101 	orr.w	r1, r1, #1
   1a546:	f003 f9ed 	bl	1d924 <log_0>
		transfer_next_chunk(dev_data->dev);
   1a54a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
}
   1a54c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1a550:	f7ff bf9a 	b.w	1a488 <transfer_next_chunk>
	ctx->tx_len -= len;
   1a554:	1a9b      	subs	r3, r3, r2
   1a556:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
   1a558:	b963      	cbnz	r3, 1a574 <event_handler+0x70>
		ctx->tx_count--;
   1a55a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1a55c:	3b01      	subs	r3, #1
   1a55e:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
   1a560:	b163      	cbz	r3, 1a57c <event_handler+0x78>
			ctx->current_tx++;
   1a562:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1a564:	f103 0208 	add.w	r2, r3, #8
   1a568:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1a56a:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
   1a56c:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1a56e:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
   1a570:	650b      	str	r3, [r1, #80]	; 0x50
   1a572:	e7db      	b.n	1a52c <event_handler+0x28>
	} else if (ctx->tx_buf) {
   1a574:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   1a576:	2b00      	cmp	r3, #0
   1a578:	d0d8      	beq.n	1a52c <event_handler+0x28>
		ctx->tx_buf += dfs * len;
   1a57a:	4413      	add	r3, r2
   1a57c:	64e3      	str	r3, [r4, #76]	; 0x4c
   1a57e:	e7d5      	b.n	1a52c <event_handler+0x28>
	ctx->rx_len -= len;
   1a580:	1a9b      	subs	r3, r3, r2
   1a582:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
   1a584:	b963      	cbnz	r3, 1a5a0 <event_handler+0x9c>
		ctx->rx_count--;
   1a586:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1a588:	3b01      	subs	r3, #1
   1a58a:	64a3      	str	r3, [r4, #72]	; 0x48
		if (ctx->rx_count) {
   1a58c:	b163      	cbz	r3, 1a5a8 <event_handler+0xa4>
			ctx->current_rx++;
   1a58e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1a590:	f103 0208 	add.w	r2, r3, #8
   1a594:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1a596:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
   1a598:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1a59a:	6562      	str	r2, [r4, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
   1a59c:	65a3      	str	r3, [r4, #88]	; 0x58
   1a59e:	e7d4      	b.n	1a54a <event_handler+0x46>
	} else if (ctx->rx_buf) {
   1a5a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1a5a2:	2b00      	cmp	r3, #0
   1a5a4:	d0d1      	beq.n	1a54a <event_handler+0x46>
		ctx->rx_buf += dfs * len;
   1a5a6:	4413      	add	r3, r2
   1a5a8:	6563      	str	r3, [r4, #84]	; 0x54
   1a5aa:	e7ce      	b.n	1a54a <event_handler+0x46>
}
   1a5ac:	bd10      	pop	{r4, pc}
   1a5ae:	bf00      	nop
   1a5b0:	00022728 	.word	0x00022728
   1a5b4:	000225d8 	.word	0x000225d8
   1a5b8:	00025d93 	.word	0x00025d93

0001a5bc <spi_nrfx_transceive>:
{
   1a5bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5c0:	461e      	mov	r6, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1a5c2:	888b      	ldrh	r3, [r1, #4]
	return dev->data;
   1a5c4:	6904      	ldr	r4, [r0, #16]
   1a5c6:	045b      	lsls	r3, r3, #17
{
   1a5c8:	4680      	mov	r8, r0
   1a5ca:	460d      	mov	r5, r1
   1a5cc:	4617      	mov	r7, r2
   1a5ce:	d42d      	bmi.n	1a62c <spi_nrfx_transceive+0x70>
	return z_impl_k_sem_take(sem, timeout);
   1a5d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a5d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a5d8:	f104 0008 	add.w	r0, r4, #8
   1a5dc:	f001 fe06 	bl	1c1ec <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1a5e0:	6065      	str	r5, [r4, #4]
	return dev->data;
   1a5e2:	f8d8 2010 	ldr.w	r2, [r8, #16]
	if (spi_context_configured(ctx, spi_cfg)) {
   1a5e6:	6813      	ldr	r3, [r2, #0]
   1a5e8:	429d      	cmp	r5, r3
   1a5ea:	f000 80b2 	beq.w	1a752 <spi_nrfx_transceive+0x196>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1a5ee:	88ab      	ldrh	r3, [r5, #4]
   1a5f0:	07d8      	lsls	r0, r3, #31
   1a5f2:	d522      	bpl.n	1a63a <spi_nrfx_transceive+0x7e>
   1a5f4:	4a83      	ldr	r2, [pc, #524]	; (1a804 <spi_nrfx_transceive+0x248>)
   1a5f6:	4b84      	ldr	r3, [pc, #528]	; (1a808 <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Slave mode is not supported on %s",
   1a5f8:	f8d8 1000 	ldr.w	r1, [r8]
   1a5fc:	4883      	ldr	r0, [pc, #524]	; (1a80c <spi_nrfx_transceive+0x250>)
   1a5fe:	1ad2      	subs	r2, r2, r3
   1a600:	08d2      	lsrs	r2, r2, #3
   1a602:	0192      	lsls	r2, r2, #6
   1a604:	f042 0201 	orr.w	r2, r2, #1
   1a608:	f003 f99b 	bl	1d942 <log_1>
		return -EINVAL;
   1a60c:	f06f 0515 	mvn.w	r5, #21
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1a610:	6823      	ldr	r3, [r4, #0]
   1a612:	889b      	ldrh	r3, [r3, #4]
   1a614:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
   1a618:	d104      	bne.n	1a624 <spi_nrfx_transceive+0x68>
		ctx->owner = NULL;
   1a61a:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1a61c:	f104 0008 	add.w	r0, r4, #8
   1a620:	f001 fdbe 	bl	1c1a0 <z_impl_k_sem_give>
}
   1a624:	4628      	mov	r0, r5
   1a626:	b003      	add	sp, #12
   1a628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1a62c:	6923      	ldr	r3, [r4, #16]
   1a62e:	2b00      	cmp	r3, #0
   1a630:	d1ce      	bne.n	1a5d0 <spi_nrfx_transceive+0x14>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1a632:	6863      	ldr	r3, [r4, #4]
   1a634:	4299      	cmp	r1, r3
   1a636:	d1cb      	bne.n	1a5d0 <spi_nrfx_transceive+0x14>
   1a638:	e7d3      	b.n	1a5e2 <spi_nrfx_transceive+0x26>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1a63a:	0719      	lsls	r1, r3, #28
   1a63c:	d50a      	bpl.n	1a654 <spi_nrfx_transceive+0x98>
   1a63e:	4971      	ldr	r1, [pc, #452]	; (1a804 <spi_nrfx_transceive+0x248>)
   1a640:	4b71      	ldr	r3, [pc, #452]	; (1a808 <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Loopback mode is not supported");
   1a642:	4873      	ldr	r0, [pc, #460]	; (1a810 <spi_nrfx_transceive+0x254>)
   1a644:	1ac9      	subs	r1, r1, r3
   1a646:	08c9      	lsrs	r1, r1, #3
   1a648:	0189      	lsls	r1, r1, #6
   1a64a:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Word sizes other than 8 bits"
   1a64e:	f003 f969 	bl	1d924 <log_0>
   1a652:	e7db      	b.n	1a60c <spi_nrfx_transceive+0x50>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
   1a654:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
   1a658:	d008      	beq.n	1a66c <spi_nrfx_transceive+0xb0>
   1a65a:	496a      	ldr	r1, [pc, #424]	; (1a804 <spi_nrfx_transceive+0x248>)
   1a65c:	4b6a      	ldr	r3, [pc, #424]	; (1a808 <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Only single line mode is supported");
   1a65e:	486d      	ldr	r0, [pc, #436]	; (1a814 <spi_nrfx_transceive+0x258>)
   1a660:	1ac9      	subs	r1, r1, r3
   1a662:	08c9      	lsrs	r1, r1, #3
   1a664:	0189      	lsls	r1, r1, #6
   1a666:	f041 0101 	orr.w	r1, r1, #1
   1a66a:	e7f0      	b.n	1a64e <spi_nrfx_transceive+0x92>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1a66c:	f3c3 1345 	ubfx	r3, r3, #5, #6
   1a670:	2b08      	cmp	r3, #8
   1a672:	d008      	beq.n	1a686 <spi_nrfx_transceive+0xca>
   1a674:	4963      	ldr	r1, [pc, #396]	; (1a804 <spi_nrfx_transceive+0x248>)
   1a676:	4b64      	ldr	r3, [pc, #400]	; (1a808 <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Word sizes other than 8 bits"
   1a678:	4867      	ldr	r0, [pc, #412]	; (1a818 <spi_nrfx_transceive+0x25c>)
   1a67a:	1ac9      	subs	r1, r1, r3
   1a67c:	08c9      	lsrs	r1, r1, #3
   1a67e:	0189      	lsls	r1, r1, #6
   1a680:	f041 0101 	orr.w	r1, r1, #1
   1a684:	e7e3      	b.n	1a64e <spi_nrfx_transceive+0x92>
	if (spi_cfg->frequency < 125000) {
   1a686:	6829      	ldr	r1, [r5, #0]
   1a688:	4b64      	ldr	r3, [pc, #400]	; (1a81c <spi_nrfx_transceive+0x260>)
   1a68a:	4299      	cmp	r1, r3
   1a68c:	d808      	bhi.n	1a6a0 <spi_nrfx_transceive+0xe4>
   1a68e:	495d      	ldr	r1, [pc, #372]	; (1a804 <spi_nrfx_transceive+0x248>)
   1a690:	4b5d      	ldr	r3, [pc, #372]	; (1a808 <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1a692:	4863      	ldr	r0, [pc, #396]	; (1a820 <spi_nrfx_transceive+0x264>)
   1a694:	1ac9      	subs	r1, r1, r3
   1a696:	08c9      	lsrs	r1, r1, #3
   1a698:	0189      	lsls	r1, r1, #6
   1a69a:	f041 0101 	orr.w	r1, r1, #1
   1a69e:	e7d6      	b.n	1a64e <spi_nrfx_transceive+0x92>
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
   1a6a0:	68ab      	ldr	r3, [r5, #8]
	return dev->config;
   1a6a2:	f8d8 9004 	ldr.w	r9, [r8, #4]
	ctx->config = spi_cfg;
   1a6a6:	6015      	str	r5, [r2, #0]
   1a6a8:	2b00      	cmp	r3, #0
   1a6aa:	d07c      	beq.n	1a7a6 <spi_nrfx_transceive+0x1ea>
   1a6ac:	6818      	ldr	r0, [r3, #0]
   1a6ae:	2800      	cmp	r0, #0
   1a6b0:	d079      	beq.n	1a7a6 <spi_nrfx_transceive+0x1ea>
				   ctx->config->cs->gpio_dt_flags |
   1a6b2:	f893 a009 	ldrb.w	sl, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   1a6b6:	7a19      	ldrb	r1, [r3, #8]
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   1a6b8:	f8d0 b010 	ldr.w	fp, [r0, #16]
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1a6bc:	f01a 0f01 	tst.w	sl, #1
   1a6c0:	bf0c      	ite	eq
   1a6c2:	f44a 5ab0 	orreq.w	sl, sl, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1a6c6:	f48a 5ad0 	eorne.w	sl, sl, #6656	; 0x1a00
	return api->pin_configure(port, pin, flags);
   1a6ca:	6883      	ldr	r3, [r0, #8]
   1a6cc:	9101      	str	r1, [sp, #4]
   1a6ce:	681b      	ldr	r3, [r3, #0]
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1a6d0:	f42a 5280 	bic.w	r2, sl, #4096	; 0x1000
	return api->pin_configure(port, pin, flags);
   1a6d4:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
   1a6d6:	b960      	cbnz	r0, 1a6f2 <spi_nrfx_transceive+0x136>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1a6d8:	9901      	ldr	r1, [sp, #4]
   1a6da:	f8db 3000 	ldr.w	r3, [fp]
   1a6de:	2201      	movs	r2, #1
   1a6e0:	fa02 f101 	lsl.w	r1, r2, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1a6e4:	f01a 0f01 	tst.w	sl, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1a6e8:	bf14      	ite	ne
   1a6ea:	430b      	orrne	r3, r1
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1a6ec:	438b      	biceq	r3, r1
   1a6ee:	f8cb 3000 	str.w	r3, [fp]
	nrf_spi_configure(spi->p_reg,
   1a6f2:	88a9      	ldrh	r1, [r5, #4]
   1a6f4:	f8d9 2000 	ldr.w	r2, [r9]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1a6f8:	0788      	lsls	r0, r1, #30
   1a6fa:	f001 0304 	and.w	r3, r1, #4
   1a6fe:	d55d      	bpl.n	1a7bc <spi_nrfx_transceive+0x200>
			return NRF_SPI_MODE_2;
   1a700:	2b00      	cmp	r3, #0
   1a702:	bf14      	ite	ne
   1a704:	2303      	movne	r3, #3
   1a706:	2302      	moveq	r3, #2
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
   1a708:	2b02      	cmp	r3, #2
	if (operation & SPI_TRANSFER_LSB) {
   1a70a:	f3c1 1100 	ubfx	r1, r1, #4, #1
   1a70e:	d059      	beq.n	1a7c4 <spi_nrfx_transceive+0x208>
   1a710:	2b03      	cmp	r3, #3
   1a712:	d05a      	beq.n	1a7ca <spi_nrfx_transceive+0x20e>
   1a714:	2b01      	cmp	r3, #1
   1a716:	d101      	bne.n	1a71c <spi_nrfx_transceive+0x160>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   1a718:	f041 0102 	orr.w	r1, r1, #2
	if (frequency < 250000) {
   1a71c:	4b41      	ldr	r3, [pc, #260]	; (1a824 <spi_nrfx_transceive+0x268>)
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   1a71e:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
	nrf_spi_frequency_set(spi->p_reg,
   1a722:	6829      	ldr	r1, [r5, #0]
	if (frequency < 250000) {
   1a724:	4299      	cmp	r1, r3
   1a726:	d953      	bls.n	1a7d0 <spi_nrfx_transceive+0x214>
	} else if (frequency < 500000) {
   1a728:	4b3f      	ldr	r3, [pc, #252]	; (1a828 <spi_nrfx_transceive+0x26c>)
   1a72a:	4299      	cmp	r1, r3
   1a72c:	d953      	bls.n	1a7d6 <spi_nrfx_transceive+0x21a>
	} else if (frequency < 1000000) {
   1a72e:	4b3f      	ldr	r3, [pc, #252]	; (1a82c <spi_nrfx_transceive+0x270>)
   1a730:	4299      	cmp	r1, r3
   1a732:	d953      	bls.n	1a7dc <spi_nrfx_transceive+0x220>
	} else if (frequency < 2000000) {
   1a734:	4b3e      	ldr	r3, [pc, #248]	; (1a830 <spi_nrfx_transceive+0x274>)
   1a736:	4299      	cmp	r1, r3
   1a738:	d953      	bls.n	1a7e2 <spi_nrfx_transceive+0x226>
	} else if (frequency < 4000000) {
   1a73a:	4b3e      	ldr	r3, [pc, #248]	; (1a834 <spi_nrfx_transceive+0x278>)
   1a73c:	4299      	cmp	r1, r3
   1a73e:	d953      	bls.n	1a7e8 <spi_nrfx_transceive+0x22c>
		return NRF_SPI_FREQ_8M;
   1a740:	4b3d      	ldr	r3, [pc, #244]	; (1a838 <spi_nrfx_transceive+0x27c>)
   1a742:	4299      	cmp	r1, r3
   1a744:	bf34      	ite	cc
   1a746:	f04f 4180 	movcc.w	r1, #1073741824	; 0x40000000
   1a74a:	f04f 4100 	movcs.w	r1, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
   1a74e:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
		dev_data->busy = true;
   1a752:	2301      	movs	r3, #1
   1a754:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (tx_bufs) {
   1a758:	2f00      	cmp	r7, #0
   1a75a:	d048      	beq.n	1a7ee <spi_nrfx_transceive+0x232>
		ctx->current_tx = tx_bufs->buffers;
   1a75c:	683b      	ldr	r3, [r7, #0]
		ctx->tx_count = tx_bufs->count;
   1a75e:	687a      	ldr	r2, [r7, #4]
		ctx->current_tx = tx_bufs->buffers;
   1a760:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = tx_bufs->count;
   1a762:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1a764:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
   1a766:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1a768:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
   1a76a:	6523      	str	r3, [r4, #80]	; 0x50
	if (rx_bufs) {
   1a76c:	2e00      	cmp	r6, #0
   1a76e:	d043      	beq.n	1a7f8 <spi_nrfx_transceive+0x23c>
		ctx->current_rx = rx_bufs->buffers;
   1a770:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
   1a772:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
   1a774:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = rx_bufs->count;
   1a776:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1a778:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
   1a77a:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1a77c:	6562      	str	r2, [r4, #84]	; 0x54
		ctx->rx_len = ctx->current_rx->len / dfs;
   1a77e:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->sync_status = 0;
   1a780:	2200      	movs	r2, #0
   1a782:	63a2      	str	r2, [r4, #56]	; 0x38
	_spi_context_cs_control(ctx, on, false);
   1a784:	2101      	movs	r1, #1
   1a786:	4620      	mov	r0, r4
   1a788:	f007 f832 	bl	217f0 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   1a78c:	4640      	mov	r0, r8
   1a78e:	f7ff fe7b 	bl	1a488 <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
   1a792:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a79a:	f104 0020 	add.w	r0, r4, #32
   1a79e:	f001 fd25 	bl	1c1ec <z_impl_k_sem_take>
	status = ctx->sync_status;
   1a7a2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	return status;
   1a7a4:	e734      	b.n	1a610 <spi_nrfx_transceive+0x54>
   1a7a6:	4b18      	ldr	r3, [pc, #96]	; (1a808 <spi_nrfx_transceive+0x24c>)
   1a7a8:	4916      	ldr	r1, [pc, #88]	; (1a804 <spi_nrfx_transceive+0x248>)
		LOG_INF("CS control inhibited (no GPIO device)");
   1a7aa:	4824      	ldr	r0, [pc, #144]	; (1a83c <spi_nrfx_transceive+0x280>)
   1a7ac:	1ac9      	subs	r1, r1, r3
   1a7ae:	08c9      	lsrs	r1, r1, #3
   1a7b0:	0189      	lsls	r1, r1, #6
   1a7b2:	f041 0103 	orr.w	r1, r1, #3
   1a7b6:	f003 f8b5 	bl	1d924 <log_0>
   1a7ba:	e79a      	b.n	1a6f2 <spi_nrfx_transceive+0x136>
			return NRF_SPI_MODE_0;
   1a7bc:	3b00      	subs	r3, #0
   1a7be:	bf18      	it	ne
   1a7c0:	2301      	movne	r3, #1
   1a7c2:	e7a1      	b.n	1a708 <spi_nrfx_transceive+0x14c>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1a7c4:	f041 0104 	orr.w	r1, r1, #4
        break;
   1a7c8:	e7a8      	b.n	1a71c <spi_nrfx_transceive+0x160>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1a7ca:	f041 0106 	orr.w	r1, r1, #6
        break;
   1a7ce:	e7a5      	b.n	1a71c <spi_nrfx_transceive+0x160>
		return NRF_SPI_FREQ_125K;
   1a7d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   1a7d4:	e7bb      	b.n	1a74e <spi_nrfx_transceive+0x192>
		return NRF_SPI_FREQ_250K;
   1a7d6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   1a7da:	e7b8      	b.n	1a74e <spi_nrfx_transceive+0x192>
		return NRF_SPI_FREQ_500K;
   1a7dc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   1a7e0:	e7b5      	b.n	1a74e <spi_nrfx_transceive+0x192>
		return NRF_SPI_FREQ_1M;
   1a7e2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1a7e6:	e7b2      	b.n	1a74e <spi_nrfx_transceive+0x192>
		return NRF_SPI_FREQ_2M;
   1a7e8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   1a7ec:	e7af      	b.n	1a74e <spi_nrfx_transceive+0x192>
		ctx->tx_count = 0;
   1a7ee:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
		ctx->tx_len = 0;
   1a7f2:	e9c4 7713 	strd	r7, r7, [r4, #76]	; 0x4c
   1a7f6:	e7b9      	b.n	1a76c <spi_nrfx_transceive+0x1b0>
		ctx->rx_count = 0;
   1a7f8:	e9c4 6611 	strd	r6, r6, [r4, #68]	; 0x44
		ctx->rx_len = 0;
   1a7fc:	e9c4 6615 	strd	r6, r6, [r4, #84]	; 0x54
   1a800:	e7be      	b.n	1a780 <spi_nrfx_transceive+0x1c4>
   1a802:	bf00      	nop
   1a804:	00022728 	.word	0x00022728
   1a808:	000225d8 	.word	0x000225d8
   1a80c:	00025db1 	.word	0x00025db1
   1a810:	00025dd3 	.word	0x00025dd3
   1a814:	00025df2 	.word	0x00025df2
   1a818:	00025e15 	.word	0x00025e15
   1a81c:	0001e847 	.word	0x0001e847
   1a820:	00025e44 	.word	0x00025e44
   1a824:	0003d08f 	.word	0x0003d08f
   1a828:	0007a11f 	.word	0x0007a11f
   1a82c:	000f423f 	.word	0x000f423f
   1a830:	001e847f 	.word	0x001e847f
   1a834:	003d08ff 	.word	0x003d08ff
   1a838:	007a1200 	.word	0x007a1200
   1a83c:	00025e75 	.word	0x00025e75

0001a840 <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a840:	4b07      	ldr	r3, [pc, #28]	; (1a860 <uart_nrfx_poll_in+0x20>)
   1a842:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   1a846:	b142      	cbz	r2, 1a85a <uart_nrfx_poll_in+0x1a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a848:	2000      	movs	r0, #0
   1a84a:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
   1a84e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
   1a852:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   1a856:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
   1a858:	4770      	bx	lr
		return -1;
   1a85a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1a85e:	4770      	bx	lr
   1a860:	40002000 	.word	0x40002000

0001a864 <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1a864:	4b02      	ldr	r3, [pc, #8]	; (1a870 <uart_nrfx_err_check+0xc>)
   1a866:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1a86a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
   1a86e:	4770      	bx	lr
   1a870:	40002000 	.word	0x40002000

0001a874 <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
   1a874:	b510      	push	{r4, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   1a876:	794b      	ldrb	r3, [r1, #5]
   1a878:	2b01      	cmp	r3, #1
   1a87a:	d11c      	bne.n	1a8b6 <uart_nrfx_configure+0x42>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1a87c:	798b      	ldrb	r3, [r1, #6]
   1a87e:	2b03      	cmp	r3, #3
   1a880:	d119      	bne.n	1a8b6 <uart_nrfx_configure+0x42>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1a882:	79cb      	ldrb	r3, [r1, #7]
   1a884:	b9bb      	cbnz	r3, 1a8b6 <uart_nrfx_configure+0x42>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1a886:	790a      	ldrb	r2, [r1, #4]
   1a888:	b112      	cbz	r2, 1a890 <uart_nrfx_configure+0x1c>
   1a88a:	2a02      	cmp	r2, #2
   1a88c:	d113      	bne.n	1a8b6 <uart_nrfx_configure+0x42>
   1a88e:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1a890:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   1a892:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   1a896:	d05e      	beq.n	1a956 <uart_nrfx_configure+0xe2>
   1a898:	d82b      	bhi.n	1a8f2 <uart_nrfx_configure+0x7e>
   1a89a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1a89e:	d05c      	beq.n	1a95a <uart_nrfx_configure+0xe6>
   1a8a0:	d814      	bhi.n	1a8cc <uart_nrfx_configure+0x58>
   1a8a2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1a8a6:	d05a      	beq.n	1a95e <uart_nrfx_configure+0xea>
   1a8a8:	d808      	bhi.n	1a8bc <uart_nrfx_configure+0x48>
   1a8aa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1a8ae:	d059      	beq.n	1a964 <uart_nrfx_configure+0xf0>
   1a8b0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1a8b4:	d059      	beq.n	1a96a <uart_nrfx_configure+0xf6>
   1a8b6:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1a8ba:	e04b      	b.n	1a954 <uart_nrfx_configure+0xe0>
   1a8bc:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1a8c0:	d056      	beq.n	1a970 <uart_nrfx_configure+0xfc>
   1a8c2:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1a8c6:	d1f6      	bne.n	1a8b6 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   1a8c8:	4b33      	ldr	r3, [pc, #204]	; (1a998 <uart_nrfx_configure+0x124>)
   1a8ca:	e039      	b.n	1a940 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
   1a8cc:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1a8d0:	d051      	beq.n	1a976 <uart_nrfx_configure+0x102>
   1a8d2:	d807      	bhi.n	1a8e4 <uart_nrfx_configure+0x70>
   1a8d4:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1a8d8:	d04f      	beq.n	1a97a <uart_nrfx_configure+0x106>
   1a8da:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1a8de:	d1ea      	bne.n	1a8b6 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   1a8e0:	4b2e      	ldr	r3, [pc, #184]	; (1a99c <uart_nrfx_configure+0x128>)
   1a8e2:	e02d      	b.n	1a940 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
   1a8e4:	f647 2412 	movw	r4, #31250	; 0x7a12
   1a8e8:	42a3      	cmp	r3, r4
   1a8ea:	d1e4      	bne.n	1a8b6 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   1a8ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1a8f0:	e026      	b.n	1a940 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
   1a8f2:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1a8f6:	d043      	beq.n	1a980 <uart_nrfx_configure+0x10c>
   1a8f8:	d811      	bhi.n	1a91e <uart_nrfx_configure+0xaa>
   1a8fa:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1a8fe:	d041      	beq.n	1a984 <uart_nrfx_configure+0x110>
   1a900:	d808      	bhi.n	1a914 <uart_nrfx_configure+0xa0>
   1a902:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   1a906:	42a3      	cmp	r3, r4
   1a908:	d03e      	beq.n	1a988 <uart_nrfx_configure+0x114>
   1a90a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1a90e:	d1d2      	bne.n	1a8b6 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   1a910:	4b23      	ldr	r3, [pc, #140]	; (1a9a0 <uart_nrfx_configure+0x12c>)
   1a912:	e015      	b.n	1a940 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
   1a914:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1a918:	d1cd      	bne.n	1a8b6 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   1a91a:	4b22      	ldr	r3, [pc, #136]	; (1a9a4 <uart_nrfx_configure+0x130>)
   1a91c:	e010      	b.n	1a940 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
   1a91e:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1a922:	d034      	beq.n	1a98e <uart_nrfx_configure+0x11a>
   1a924:	d807      	bhi.n	1a936 <uart_nrfx_configure+0xc2>
   1a926:	4c20      	ldr	r4, [pc, #128]	; (1a9a8 <uart_nrfx_configure+0x134>)
   1a928:	42a3      	cmp	r3, r4
   1a92a:	d032      	beq.n	1a992 <uart_nrfx_configure+0x11e>
   1a92c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1a930:	d1c1      	bne.n	1a8b6 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   1a932:	4b1e      	ldr	r3, [pc, #120]	; (1a9ac <uart_nrfx_configure+0x138>)
   1a934:	e004      	b.n	1a940 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
   1a936:	4c1e      	ldr	r4, [pc, #120]	; (1a9b0 <uart_nrfx_configure+0x13c>)
   1a938:	42a3      	cmp	r3, r4
   1a93a:	d1bc      	bne.n	1a8b6 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   1a93c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1a940:	4c1c      	ldr	r4, [pc, #112]	; (1a9b4 <uart_nrfx_configure+0x140>)
   1a942:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1a946:	f8c4 256c 	str.w	r2, [r4, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1a94a:	6903      	ldr	r3, [r0, #16]
   1a94c:	c903      	ldmia	r1, {r0, r1}
   1a94e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1a952:	2000      	movs	r0, #0
}
   1a954:	bd10      	pop	{r4, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   1a956:	4b18      	ldr	r3, [pc, #96]	; (1a9b8 <uart_nrfx_configure+0x144>)
   1a958:	e7f2      	b.n	1a940 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   1a95a:	4b18      	ldr	r3, [pc, #96]	; (1a9bc <uart_nrfx_configure+0x148>)
   1a95c:	e7f0      	b.n	1a940 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   1a95e:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1a962:	e7ed      	b.n	1a940 <uart_nrfx_configure+0xcc>
		nrf_baudrate = 0x00014000;
   1a964:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1a968:	e7ea      	b.n	1a940 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
   1a96a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1a96e:	e7e7      	b.n	1a940 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   1a970:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1a974:	e7e4      	b.n	1a940 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   1a976:	4b12      	ldr	r3, [pc, #72]	; (1a9c0 <uart_nrfx_configure+0x14c>)
   1a978:	e7e2      	b.n	1a940 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   1a97a:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   1a97e:	e7df      	b.n	1a940 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   1a980:	4b10      	ldr	r3, [pc, #64]	; (1a9c4 <uart_nrfx_configure+0x150>)
   1a982:	e7dd      	b.n	1a940 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   1a984:	4b10      	ldr	r3, [pc, #64]	; (1a9c8 <uart_nrfx_configure+0x154>)
   1a986:	e7db      	b.n	1a940 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   1a988:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1a98c:	e7d8      	b.n	1a940 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   1a98e:	4b0f      	ldr	r3, [pc, #60]	; (1a9cc <uart_nrfx_configure+0x158>)
   1a990:	e7d6      	b.n	1a940 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   1a992:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1a996:	e7d3      	b.n	1a940 <uart_nrfx_configure+0xcc>
   1a998:	0013b000 	.word	0x0013b000
   1a99c:	004ea000 	.word	0x004ea000
   1a9a0:	00ebf000 	.word	0x00ebf000
   1a9a4:	01d7e000 	.word	0x01d7e000
   1a9a8:	0003d090 	.word	0x0003d090
   1a9ac:	075f7000 	.word	0x075f7000
   1a9b0:	000f4240 	.word	0x000f4240
   1a9b4:	40002000 	.word	0x40002000
   1a9b8:	009d5000 	.word	0x009d5000
   1a9bc:	00275000 	.word	0x00275000
   1a9c0:	0075f000 	.word	0x0075f000
   1a9c4:	03afb000 	.word	0x03afb000
   1a9c8:	013a9000 	.word	0x013a9000
   1a9cc:	0ebed000 	.word	0x0ebed000

0001a9d0 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
   1a9d0:	b510      	push	{r4, lr}
    p_reg->OUTSET = set_mask;
   1a9d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
   1a9d6:	4c13      	ldr	r4, [pc, #76]	; (1aa24 <uart_nrfx_init+0x54>)
   1a9d8:	2200      	movs	r2, #0
   1a9da:	2120      	movs	r1, #32
   1a9dc:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
   1a9e0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1a9e4:	2103      	movs	r1, #3
   1a9e6:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
   1a9ea:	f8c3 272c 	str.w	r2, [r3, #1836]	; 0x72c
    p_reg->PSELRXD = pselrxd;
   1a9ee:	230b      	movs	r3, #11
   1a9f0:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   1a9f4:	2305      	movs	r3, #5
   1a9f6:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSELRTS = pselrts;
   1a9fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a9fe:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	}

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1aa02:	6901      	ldr	r1, [r0, #16]
    p_reg->PSELCTS = pselcts;
   1aa04:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1aa08:	f7ff ff34 	bl	1a874 <uart_nrfx_configure>
	if (err) {
   1aa0c:	b940      	cbnz	r0, 1aa20 <uart_nrfx_init+0x50>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   1aa0e:	2304      	movs	r3, #4
   1aa10:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1aa14:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
   1aa18:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1aa1c:	2301      	movs	r3, #1
   1aa1e:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
   1aa20:	bd10      	pop	{r4, pc}
   1aa22:	bf00      	nop
   1aa24:	40002000 	.word	0x40002000

0001aa28 <uart_nrfx_poll_out>:
{
   1aa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aa2a:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
   1aa2c:	f007 fa0f 	bl	21e4e <k_is_in_isr>
   1aa30:	4d1a      	ldr	r5, [pc, #104]	; (1aa9c <uart_nrfx_poll_out+0x74>)
   1aa32:	bb78      	cbnz	r0, 1aa94 <uart_nrfx_poll_out+0x6c>
   1aa34:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1aa36:	2701      	movs	r7, #1
   1aa38:	f3bf 8f5b 	dmb	ish
   1aa3c:	e855 3f00 	ldrex	r3, [r5]
   1aa40:	2b00      	cmp	r3, #0
   1aa42:	d103      	bne.n	1aa4c <uart_nrfx_poll_out+0x24>
   1aa44:	e845 7200 	strex	r2, r7, [r5]
   1aa48:	2a00      	cmp	r2, #0
   1aa4a:	d1f7      	bne.n	1aa3c <uart_nrfx_poll_out+0x14>
   1aa4c:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   1aa50:	d007      	beq.n	1aa62 <uart_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
   1aa52:	2021      	movs	r0, #33	; 0x21
   1aa54:	2100      	movs	r1, #0
			if (--safety_cnt == 0) {
   1aa56:	3c01      	subs	r4, #1
   1aa58:	f001 fb0e 	bl	1c078 <z_impl_k_sleep>
   1aa5c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1aa60:	d1ea      	bne.n	1aa38 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1aa62:	4c0f      	ldr	r4, [pc, #60]	; (1aaa0 <uart_nrfx_poll_out+0x78>)
   1aa64:	2300      	movs	r3, #0
   1aa66:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   1aa6a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1aa6e:	2301      	movs	r3, #1
   1aa70:	60a3      	str	r3, [r4, #8]
    p_reg->TXD = txd;
   1aa72:	f8c4 651c 	str.w	r6, [r4, #1308]	; 0x51c
   1aa76:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1aa7a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
   1aa7e:	b923      	cbnz	r3, 1aa8a <uart_nrfx_poll_out+0x62>
   1aa80:	2001      	movs	r0, #1
   1aa82:	f006 ff13 	bl	218ac <nrfx_busy_wait>
   1aa86:	3e01      	subs	r6, #1
   1aa88:	d1f7      	bne.n	1aa7a <uart_nrfx_poll_out+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1aa8a:	2301      	movs	r3, #1
   1aa8c:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   1aa8e:	2300      	movs	r3, #0
   1aa90:	602b      	str	r3, [r5, #0]
}
   1aa92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
   1aa94:	2301      	movs	r3, #1
   1aa96:	602b      	str	r3, [r5, #0]
   1aa98:	e7e3      	b.n	1aa62 <uart_nrfx_poll_out+0x3a>
   1aa9a:	bf00      	nop
   1aa9c:	20002c68 	.word	0x20002c68
   1aaa0:	40002000 	.word	0x40002000

0001aaa4 <random_byte_get>:
	__asm__ volatile(
   1aaa4:	f04f 0320 	mov.w	r3, #32
   1aaa8:	f3ef 8211 	mrs	r2, BASEPRI
   1aaac:	f383 8811 	msr	BASEPRI, r3
   1aab0:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1aab4:	4b09      	ldr	r3, [pc, #36]	; (1aadc <random_byte_get+0x38>)
   1aab6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1aaba:	b161      	cbz	r1, 1aad6 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1aabc:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1aabe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1aac2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1aac6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1aaca:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1aacc:	f382 8811 	msr	BASEPRI, r2
   1aad0:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1aad4:	4770      	bx	lr
	int retval = -EAGAIN;
   1aad6:	f06f 000a 	mvn.w	r0, #10
   1aada:	e7f7      	b.n	1aacc <random_byte_get+0x28>
   1aadc:	4000d000 	.word	0x4000d000

0001aae0 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1aae0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aae2:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1aae4:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1aae6:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1aae8:	f04f 0020 	mov.w	r0, #32
   1aaec:	f3ef 8e11 	mrs	lr, BASEPRI
   1aaf0:	f380 8811 	msr	BASEPRI, r0
   1aaf4:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1aaf8:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1aafa:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   1aafe:	1ba4      	subs	r4, r4, r6
   1ab00:	403c      	ands	r4, r7
	if (available < len) {
   1ab02:	42a2      	cmp	r2, r4
		len = available;
   1ab04:	bf88      	it	hi
   1ab06:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1ab08:	18b0      	adds	r0, r6, r2
   1ab0a:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   1ab0c:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1ab0e:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   1ab10:	f38e 8811 	msr	BASEPRI, lr
   1ab14:	f3bf 8f6f 	isb	sy
   1ab18:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   1ab1a:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   1ab1c:	4290      	cmp	r0, r2
   1ab1e:	d119      	bne.n	1ab54 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1ab20:	4566      	cmp	r6, ip
   1ab22:	d10d      	bne.n	1ab40 <rng_pool_get+0x60>
	__asm__ volatile(
   1ab24:	f04f 0520 	mov.w	r5, #32
   1ab28:	f3ef 8011 	mrs	r0, BASEPRI
   1ab2c:	f385 8811 	msr	BASEPRI, r5
   1ab30:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1ab34:	781d      	ldrb	r5, [r3, #0]
   1ab36:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1ab38:	f380 8811 	msr	BASEPRI, r0
   1ab3c:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1ab40:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1ab42:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1ab44:	b290      	uxth	r0, r2
	available = available - len;
   1ab46:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   1ab48:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ab4a:	bf22      	ittt	cs
   1ab4c:	4b06      	ldrcs	r3, [pc, #24]	; (1ab68 <rng_pool_get+0x88>)
   1ab4e:	2201      	movcs	r2, #1
   1ab50:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1ab52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1ab54:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   1ab58:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1ab5a:	f89e e005 	ldrb.w	lr, [lr, #5]
   1ab5e:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   1ab62:	403d      	ands	r5, r7
   1ab64:	e7da      	b.n	1ab1c <rng_pool_get+0x3c>
   1ab66:	bf00      	nop
   1ab68:	4000d000 	.word	0x4000d000

0001ab6c <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ab6c:	43db      	mvns	r3, r3
{
   1ab6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ab72:	f013 0501 	ands.w	r5, r3, #1
{
   1ab76:	460e      	mov	r6, r1
   1ab78:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ab7a:	d004      	beq.n	1ab86 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1ab7c:	4821      	ldr	r0, [pc, #132]	; (1ac04 <entropy_nrf5_get_entropy_isr+0x98>)
   1ab7e:	f7ff ffaf 	bl	1aae0 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1ab82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1ab86:	b3a2      	cbz	r2, 1abf2 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1ab88:	f04f 0320 	mov.w	r3, #32
   1ab8c:	f3ef 8811 	mrs	r8, BASEPRI
   1ab90:	f383 8811 	msr	BASEPRI, r3
   1ab94:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1ab98:	200d      	movs	r0, #13
   1ab9a:	f7ec f8d3 	bl	6d44 <arch_irq_is_enabled>
   1ab9e:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1aba0:	200d      	movs	r0, #13
   1aba2:	f7ec f8bb 	bl	6d1c <arch_irq_disable>
	__asm__ volatile(
   1aba6:	f388 8811 	msr	BASEPRI, r8
   1abaa:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1abae:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1ac08 <entropy_nrf5_get_entropy_isr+0x9c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1abb2:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1ac0c <entropy_nrf5_get_entropy_isr+0xa0>
   1abb6:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1abba:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   1abbe:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1abc2:	2301      	movs	r3, #1
   1abc4:	f8c8 3000 	str.w	r3, [r8]
   1abc8:	4625      	mov	r5, r4
   1abca:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1abce:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1abd2:	b183      	cbz	r3, 1abf6 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1abd4:	f7ff ff66 	bl	1aaa4 <random_byte_get>
			if (byte < 0) {
   1abd8:	1e03      	subs	r3, r0, #0
   1abda:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1abde:	dbf6      	blt.n	1abce <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   1abe0:	3d01      	subs	r5, #1
   1abe2:	b2ad      	uxth	r5, r5
   1abe4:	5573      	strb	r3, [r6, r5]
		} while (len);
   1abe6:	2d00      	cmp	r5, #0
   1abe8:	d1f1      	bne.n	1abce <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1abea:	b117      	cbz	r7, 1abf2 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1abec:	200d      	movs	r0, #13
   1abee:	f7ec f885 	bl	6cfc <arch_irq_enable>
	return cnt;
   1abf2:	4620      	mov	r0, r4
   1abf4:	e7c5      	b.n	1ab82 <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   1abf6:	f3bf 8f4f 	dsb	sy
				__WFE();
   1abfa:	bf20      	wfe
				__SEV();
   1abfc:	bf40      	sev
				__WFE();
   1abfe:	bf20      	wfe
   1ac00:	e7e5      	b.n	1abce <entropy_nrf5_get_entropy_isr+0x62>
   1ac02:	bf00      	nop
   1ac04:	20002ca0 	.word	0x20002ca0
   1ac08:	4000d000 	.word	0x4000d000
   1ac0c:	e000e100 	.word	0xe000e100

0001ac10 <entropy_nrf5_get_entropy>:
{
   1ac10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1ac14:	4f13      	ldr	r7, [pc, #76]	; (1ac64 <entropy_nrf5_get_entropy+0x54>)
   1ac16:	460d      	mov	r5, r1
   1ac18:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1ac1a:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1ac1e:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1ac22:	b914      	cbnz	r4, 1ac2a <entropy_nrf5_get_entropy+0x1a>
}
   1ac24:	4620      	mov	r0, r4
   1ac26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ac2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ac2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ac32:	4638      	mov	r0, r7
   1ac34:	f001 fada 	bl	1c1ec <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1ac38:	4622      	mov	r2, r4
   1ac3a:	4629      	mov	r1, r5
   1ac3c:	4640      	mov	r0, r8
   1ac3e:	f7ff ff4f 	bl	1aae0 <rng_pool_get>
   1ac42:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1ac44:	4638      	mov	r0, r7
   1ac46:	f001 faab 	bl	1c1a0 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1ac4a:	b93e      	cbnz	r6, 1ac5c <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1ac4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ac50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ac54:	4648      	mov	r0, r9
   1ac56:	f001 fac9 	bl	1c1ec <z_impl_k_sem_take>
			continue;
   1ac5a:	e7e2      	b.n	1ac22 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1ac5c:	1ba4      	subs	r4, r4, r6
   1ac5e:	b2a4      	uxth	r4, r4
		buf += bytes;
   1ac60:	4435      	add	r5, r6
   1ac62:	e7de      	b.n	1ac22 <entropy_nrf5_get_entropy+0x12>
   1ac64:	20002c70 	.word	0x20002c70

0001ac68 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1ac68:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ac6a:	4c19      	ldr	r4, [pc, #100]	; (1acd0 <entropy_nrf5_init+0x68>)
   1ac6c:	2201      	movs	r2, #1
   1ac6e:	4611      	mov	r1, r2
   1ac70:	4620      	mov	r0, r4
   1ac72:	f007 f8dc 	bl	21e2e <z_impl_k_sem_init>
   1ac76:	2201      	movs	r2, #1
   1ac78:	2100      	movs	r1, #0
   1ac7a:	f104 0018 	add.w	r0, r4, #24
   1ac7e:	f007 f8d6 	bl	21e2e <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1ac82:	f240 4307 	movw	r3, #1031	; 0x407
   1ac86:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1ac8a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1ac8e:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1ac90:	230c      	movs	r3, #12
   1ac92:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1ac96:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1ac98:	4b0e      	ldr	r3, [pc, #56]	; (1acd4 <entropy_nrf5_init+0x6c>)
   1ac9a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1ac9e:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1aca2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1aca6:	f042 0201 	orr.w	r2, r2, #1
   1acaa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1acae:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1acb0:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1acb4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1acb8:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1acbc:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1acbe:	6019      	str	r1, [r3, #0]
   1acc0:	200d      	movs	r0, #13
   1acc2:	f7ec f84d 	bl	6d60 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1acc6:	200d      	movs	r0, #13
   1acc8:	f7ec f818 	bl	6cfc <arch_irq_enable>

	return 0;
}
   1accc:	4628      	mov	r0, r5
   1acce:	bd38      	pop	{r3, r4, r5, pc}
   1acd0:	20002c70 	.word	0x20002c70
   1acd4:	4000d000 	.word	0x4000d000

0001acd8 <isr>:
{
   1acd8:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1acda:	f7ff fee3 	bl	1aaa4 <random_byte_get>
	if (byte < 0) {
   1acde:	2800      	cmp	r0, #0
   1ace0:	db20      	blt.n	1ad24 <isr+0x4c>
	uint8_t last  = rngp->last;
   1ace2:	4b17      	ldr	r3, [pc, #92]	; (1ad40 <isr+0x68>)
   1ace4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1ace8:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1acec:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1acf0:	1a51      	subs	r1, r2, r1
   1acf2:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1acf6:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1acf8:	d10d      	bne.n	1ad16 <isr+0x3e>
	uint8_t last  = rngp->last;
   1acfa:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1acfe:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1ad02:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1ad06:	1a51      	subs	r1, r2, r1
   1ad08:	ea34 0101 	bics.w	r1, r4, r1
   1ad0c:	d10b      	bne.n	1ad26 <isr+0x4e>
   1ad0e:	4b0d      	ldr	r3, [pc, #52]	; (1ad44 <isr+0x6c>)
   1ad10:	2201      	movs	r2, #1
   1ad12:	605a      	str	r2, [r3, #4]
}
   1ad14:	e00e      	b.n	1ad34 <isr+0x5c>
	rngp->buffer[last] = byte;
   1ad16:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1ad18:	3201      	adds	r2, #1
   1ad1a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1ad1c:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1ad20:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1ad24:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1ad26:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1ad28:	3201      	adds	r2, #1
   1ad2a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1ad2c:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1ad30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1ad34:	4804      	ldr	r0, [pc, #16]	; (1ad48 <isr+0x70>)
}
   1ad36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ad3a:	f001 ba31 	b.w	1c1a0 <z_impl_k_sem_give>
   1ad3e:	bf00      	nop
   1ad40:	20002c70 	.word	0x20002c70
   1ad44:	4000d000 	.word	0x4000d000
   1ad48:	20002c88 	.word	0x20002c88

0001ad4c <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1ad4c:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   1ad50:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1ad54:	2a06      	cmp	r2, #6
   1ad56:	d109      	bne.n	1ad6c <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1ad58:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   1ad5c:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1ad60:	3b03      	subs	r3, #3
   1ad62:	2b03      	cmp	r3, #3
   1ad64:	d802      	bhi.n	1ad6c <nrf52_errata_16+0x20>
   1ad66:	4a02      	ldr	r2, [pc, #8]	; (1ad70 <nrf52_errata_16+0x24>)
   1ad68:	5cd0      	ldrb	r0, [r2, r3]
   1ad6a:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1ad6c:	2000      	movs	r0, #0
    #endif
}
   1ad6e:	4770      	bx	lr
   1ad70:	00025eb4 	.word	0x00025eb4

0001ad74 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1ad74:	4a02      	ldr	r2, [pc, #8]	; (1ad80 <nvmc_wait+0xc>)
   1ad76:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1ad7a:	2b00      	cmp	r3, #0
   1ad7c:	d0fb      	beq.n	1ad76 <nvmc_wait+0x2>
}
   1ad7e:	4770      	bx	lr
   1ad80:	4001e000 	.word	0x4001e000

0001ad84 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1ad84:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   1ad86:	f006 fd82 	bl	2188e <nrf52_errata_108>
   1ad8a:	b140      	cbz	r0, 1ad9e <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   1ad8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ad90:	4a89      	ldr	r2, [pc, #548]	; (1afb8 <SystemInit+0x234>)
   1ad92:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
   1ad96:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1ad9a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   1ad9e:	f7ff ffd5 	bl	1ad4c <nrf52_errata_16>
   1ada2:	b110      	cbz	r0, 1adaa <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   1ada4:	4b85      	ldr	r3, [pc, #532]	; (1afbc <SystemInit+0x238>)
   1ada6:	4a86      	ldr	r2, [pc, #536]	; (1afc0 <SystemInit+0x23c>)
   1ada8:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   1adaa:	f006 fd70 	bl	2188e <nrf52_errata_108>
   1adae:	b148      	cbz	r0, 1adc4 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   1adb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1adb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1adb8:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
   1adbc:	f3c3 3342 	ubfx	r3, r3, #13, #3
   1adc0:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   1adc4:	f7ff ffc2 	bl	1ad4c <nrf52_errata_16>
   1adc8:	b130      	cbz	r0, 1add8 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   1adca:	4a7e      	ldr	r2, [pc, #504]	; (1afc4 <SystemInit+0x240>)
   1adcc:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   1add0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1add4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1add8:	f006 fd59 	bl	2188e <nrf52_errata_108>
   1addc:	b140      	cbz	r0, 1adf0 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
   1adde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ade2:	2200      	movs	r2, #0
   1ade4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1ade8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1adec:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   1adf0:	f7ff ffac 	bl	1ad4c <nrf52_errata_16>
   1adf4:	b120      	cbz	r0, 1ae00 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   1adf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1adfa:	2203      	movs	r2, #3
   1adfc:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   1ae00:	f7ff ffa4 	bl	1ad4c <nrf52_errata_16>
   1ae04:	b160      	cbz	r0, 1ae20 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   1ae06:	4b70      	ldr	r3, [pc, #448]	; (1afc8 <SystemInit+0x244>)
   1ae08:	2205      	movs	r2, #5
   1ae0a:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   1ae0e:	2201      	movs	r2, #1
   1ae10:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   1ae14:	2200      	movs	r2, #0
   1ae16:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   1ae1a:	223f      	movs	r2, #63	; 0x3f
   1ae1c:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1ae20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ae24:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1ae28:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1ae2a:	bf09      	itett	eq
   1ae2c:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   1ae30:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1ae34:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1ae38:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
   1ae3c:	bf08      	it	eq
   1ae3e:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1ae42:	2a06      	cmp	r2, #6
   1ae44:	d14d      	bne.n	1aee2 <SystemInit+0x15e>
            {
                switch(var2)
   1ae46:	3b03      	subs	r3, #3
   1ae48:	2b03      	cmp	r3, #3
   1ae4a:	d803      	bhi.n	1ae54 <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1ae4c:	4a5f      	ldr	r2, [pc, #380]	; (1afcc <SystemInit+0x248>)
   1ae4e:	5cd3      	ldrb	r3, [r2, r3]
   1ae50:	2b00      	cmp	r3, #0
   1ae52:	d046      	beq.n	1aee2 <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1ae54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ae58:	4b5d      	ldr	r3, [pc, #372]	; (1afd0 <SystemInit+0x24c>)
   1ae5a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1ae5e:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1ae62:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1ae66:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1ae6a:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1ae6e:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1ae72:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1ae76:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1ae7a:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1ae7e:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1ae82:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1ae86:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1ae8a:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1ae8e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1ae92:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1ae96:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1ae9a:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1ae9e:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1aea2:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1aea6:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1aeaa:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1aeae:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1aeb2:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1aeb6:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1aeba:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1aebe:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1aec2:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1aec6:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1aeca:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1aece:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1aed2:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1aed6:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1aeda:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1aede:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   1aee2:	f006 fcd4 	bl	2188e <nrf52_errata_108>
   1aee6:	b148      	cbz	r0, 1aefc <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   1aee8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1aeec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1aef0:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1aef4:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   1aef8:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1aefc:	f006 fcc7 	bl	2188e <nrf52_errata_108>
   1af00:	b148      	cbz	r0, 1af16 <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1af02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1af06:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1af0a:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1af0c:	bf44      	itt	mi
   1af0e:	f06f 0201 	mvnmi.w	r2, #1
   1af12:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1af16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1af1a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1af1e:	2a06      	cmp	r2, #6
   1af20:	d10e      	bne.n	1af40 <SystemInit+0x1bc>
            {
                switch(var2)
   1af22:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1af26:	3b03      	subs	r3, #3
   1af28:	2b03      	cmp	r3, #3
   1af2a:	d802      	bhi.n	1af32 <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   1af2c:	4a29      	ldr	r2, [pc, #164]	; (1afd4 <SystemInit+0x250>)
   1af2e:	5cd3      	ldrb	r3, [r2, r3]
   1af30:	b133      	cbz	r3, 1af40 <SystemInit+0x1bc>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   1af32:	4a29      	ldr	r2, [pc, #164]	; (1afd8 <SystemInit+0x254>)
   1af34:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   1af38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1af3c:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c

    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
     * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
     * operations are not used in your code. */
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
   1af40:	4a20      	ldr	r2, [pc, #128]	; (1afc4 <SystemInit+0x240>)
   1af42:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1af46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1af4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
   1af4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1af52:	f3bf 8f6f 	isb	sy

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1af56:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1af5a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1af5e:	2a00      	cmp	r2, #0
   1af60:	db03      	blt.n	1af6a <SystemInit+0x1e6>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1af62:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1af66:	2b00      	cmp	r3, #0
   1af68:	da22      	bge.n	1afb0 <SystemInit+0x22c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1af6a:	491c      	ldr	r1, [pc, #112]	; (1afdc <SystemInit+0x258>)
   1af6c:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1af6e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1af72:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1af76:	2415      	movs	r4, #21
    nvmc_wait();
   1af78:	f7ff fefc 	bl	1ad74 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1af7c:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1af80:	f7ff fef8 	bl	1ad74 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1af84:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1af88:	f7ff fef4 	bl	1ad74 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1af8c:	2300      	movs	r3, #0
   1af8e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1af92:	f7ff feef 	bl	1ad74 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1af96:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1af9a:	490a      	ldr	r1, [pc, #40]	; (1afc4 <SystemInit+0x240>)
   1af9c:	4b10      	ldr	r3, [pc, #64]	; (1afe0 <SystemInit+0x25c>)
   1af9e:	68ca      	ldr	r2, [r1, #12]
   1afa0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1afa4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1afa6:	60cb      	str	r3, [r1, #12]
   1afa8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1afac:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1afae:	e7fd      	b.n	1afac <SystemInit+0x228>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1afb0:	4b0c      	ldr	r3, [pc, #48]	; (1afe4 <SystemInit+0x260>)
   1afb2:	4a0d      	ldr	r2, [pc, #52]	; (1afe8 <SystemInit+0x264>)
   1afb4:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1afb6:	bd10      	pop	{r4, pc}
   1afb8:	40013000 	.word	0x40013000
   1afbc:	4007c000 	.word	0x4007c000
   1afc0:	baadf00d 	.word	0xbaadf00d
   1afc4:	e000ed00 	.word	0xe000ed00
   1afc8:	40005000 	.word	0x40005000
   1afcc:	00025eac 	.word	0x00025eac
   1afd0:	4000c000 	.word	0x4000c000
   1afd4:	00025eb0 	.word	0x00025eb0
   1afd8:	40001000 	.word	0x40001000
   1afdc:	4001e000 	.word	0x4001e000
   1afe0:	05fa0004 	.word	0x05fa0004
   1afe4:	20000640 	.word	0x20000640
   1afe8:	03d09000 	.word	0x03d09000

0001afec <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1afec:	4b04      	ldr	r3, [pc, #16]	; (1b000 <nrfx_clock_init+0x14>)
   1afee:	791a      	ldrb	r2, [r3, #4]
   1aff0:	b922      	cbnz	r2, 1affc <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1aff2:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1aff4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1aff6:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1aff8:	4802      	ldr	r0, [pc, #8]	; (1b004 <nrfx_clock_init+0x18>)
   1affa:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1affc:	4802      	ldr	r0, [pc, #8]	; (1b008 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1affe:	4770      	bx	lr
   1b000:	20002cc4 	.word	0x20002cc4
   1b004:	0bad0000 	.word	0x0bad0000
   1b008:	0bad000c 	.word	0x0bad000c

0001b00c <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1b00c:	b530      	push	{r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1b00e:	b110      	cbz	r0, 1b016 <nrfx_clock_start+0xa>
   1b010:	2801      	cmp	r0, #1
   1b012:	d034      	beq.n	1b07e <nrfx_clock_start+0x72>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   1b014:	bd30      	pop	{r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1b016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b01a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1b01e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1b022:	03c9      	lsls	r1, r1, #15
   1b024:	d529      	bpl.n	1b07a <nrfx_clock_start+0x6e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1b026:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   1b02a:	2a01      	cmp	r2, #1
   1b02c:	d125      	bne.n	1b07a <nrfx_clock_start+0x6e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1b02e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b032:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b036:	2200      	movs	r2, #0
   1b038:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1b03c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   1b040:	2202      	movs	r2, #2
   1b042:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
   1b046:	4a13      	ldr	r2, [pc, #76]	; (1b094 <nrfx_clock_start+0x88>)
   1b048:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
   1b04c:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
   1b050:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
   1b054:	4b10      	ldr	r3, [pc, #64]	; (1b098 <nrfx_clock_start+0x8c>)
   1b056:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
   1b058:	f044 0101 	orr.w	r1, r4, #1
   1b05c:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
   1b05e:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
   1b060:	6859      	ldr	r1, [r3, #4]
   1b062:	1b49      	subs	r1, r1, r5
   1b064:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
   1b068:	d3fa      	bcc.n	1b060 <nrfx_clock_start+0x54>
    DWT->CTRL = dwt_ctrl;
   1b06a:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b06c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
   1b070:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   1b074:	2201      	movs	r2, #1
   1b076:	609a      	str	r2, [r3, #8]
}
   1b078:	e7cc      	b.n	1b014 <nrfx_clock_start+0x8>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1b07a:	2200      	movs	r2, #0
   1b07c:	e7d7      	b.n	1b02e <nrfx_clock_start+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b07e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b082:	2200      	movs	r2, #0
   1b084:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1b088:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1b08c:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b090:	6018      	str	r0, [r3, #0]
}
   1b092:	e7bf      	b.n	1b014 <nrfx_clock_start+0x8>
   1b094:	e000ed00 	.word	0xe000ed00
   1b098:	e0001000 	.word	0xe0001000

0001b09c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1b09c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1b09e:	b110      	cbz	r0, 1b0a6 <nrfx_clock_stop+0xa>
   1b0a0:	2801      	cmp	r0, #1
   1b0a2:	d017      	beq.n	1b0d4 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1b0a4:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   1b0a6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1b0aa:	2302      	movs	r3, #2
   1b0ac:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b0b0:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   1b0b4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b0b8:	2301      	movs	r3, #1
   1b0ba:	60e3      	str	r3, [r4, #12]
   1b0bc:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1b0c0:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   1b0c4:	03db      	lsls	r3, r3, #15
   1b0c6:	d5ed      	bpl.n	1b0a4 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1b0c8:	2001      	movs	r0, #1
   1b0ca:	f006 fbef 	bl	218ac <nrfx_busy_wait>
   1b0ce:	3d01      	subs	r5, #1
   1b0d0:	d1f6      	bne.n	1b0c0 <nrfx_clock_stop+0x24>
   1b0d2:	e7e7      	b.n	1b0a4 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   1b0d4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b0d8:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   1b0da:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b0de:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1b0e2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b0e6:	6060      	str	r0, [r4, #4]
   1b0e8:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1b0ec:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1b0f0:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   1b0f4:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1b0f6:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1b0fa:	d505      	bpl.n	1b108 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1b0fc:	b123      	cbz	r3, 1b108 <nrfx_clock_stop+0x6c>
   1b0fe:	2001      	movs	r0, #1
   1b100:	f006 fbd4 	bl	218ac <nrfx_busy_wait>
   1b104:	3d01      	subs	r5, #1
   1b106:	d1f1      	bne.n	1b0ec <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   1b108:	4b01      	ldr	r3, [pc, #4]	; (1b110 <nrfx_clock_stop+0x74>)
   1b10a:	2200      	movs	r2, #0
   1b10c:	715a      	strb	r2, [r3, #5]
   1b10e:	e7c9      	b.n	1b0a4 <nrfx_clock_stop+0x8>
   1b110:	20002cc4 	.word	0x20002cc4

0001b114 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1b114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1b118:	b510      	push	{r4, lr}
   1b11a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1b11e:	b16a      	cbz	r2, 1b13c <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b120:	2200      	movs	r2, #0
   1b122:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1b126:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1b12a:	2201      	movs	r2, #1
   1b12c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   1b130:	4b11      	ldr	r3, [pc, #68]	; (1b178 <nrfx_power_clock_irq_handler+0x64>)
   1b132:	7958      	ldrb	r0, [r3, #5]
   1b134:	b910      	cbnz	r0, 1b13c <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   1b136:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1b138:	681b      	ldr	r3, [r3, #0]
   1b13a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1b13c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b140:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1b144:	b172      	cbz	r2, 1b164 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b146:	2200      	movs	r2, #0
   1b148:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1b14c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1b150:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1b154:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1b158:	0792      	lsls	r2, r2, #30
   1b15a:	d104      	bne.n	1b166 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1b15c:	2201      	movs	r2, #1
   1b15e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b162:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1b164:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   1b166:	2202      	movs	r2, #2
   1b168:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1b16c:	4b02      	ldr	r3, [pc, #8]	; (1b178 <nrfx_power_clock_irq_handler+0x64>)
}
   1b16e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1b172:	681b      	ldr	r3, [r3, #0]
   1b174:	2001      	movs	r0, #1
   1b176:	4718      	bx	r3
   1b178:	20002cc4 	.word	0x20002cc4

0001b17c <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   1b17c:	2301      	movs	r3, #1
   1b17e:	fa03 f000 	lsl.w	r0, r3, r0
   1b182:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   1b184:	b193      	cbz	r3, 1b1ac <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   1b186:	f04f 0320 	mov.w	r3, #32
   1b18a:	f3ef 8111 	mrs	r1, BASEPRI
   1b18e:	f383 8811 	msr	BASEPRI, r3
   1b192:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1b196:	4a06      	ldr	r2, [pc, #24]	; (1b1b0 <nrfx_gpiote_channel_free+0x34>)
   1b198:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1b19a:	ea23 0000 	bic.w	r0, r3, r0
   1b19e:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
   1b1a0:	f381 8811 	msr	BASEPRI, r1
   1b1a4:	f3bf 8f6f 	isb	sy
   1b1a8:	4802      	ldr	r0, [pc, #8]	; (1b1b4 <nrfx_gpiote_channel_free+0x38>)
   1b1aa:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   1b1ac:	4802      	ldr	r0, [pc, #8]	; (1b1b8 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1b1ae:	4770      	bx	lr
   1b1b0:	20002ccc 	.word	0x20002ccc
   1b1b4:	0bad0000 	.word	0x0bad0000
   1b1b8:	0bad0004 	.word	0x0bad0004

0001b1bc <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   1b1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b1c0:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   1b1c2:	f8df e060 	ldr.w	lr, [pc, #96]	; 1b224 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1b1c6:	4816      	ldr	r0, [pc, #88]	; (1b220 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   1b1c8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1b228 <nrfx_gpiote_channel_alloc+0x6c>
{
   1b1cc:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   1b1ce:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   1b1d0:	2601      	movs	r6, #1
   1b1d2:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   1b1d4:	f04f 0120 	mov.w	r1, #32
   1b1d8:	f3ef 8c11 	mrs	ip, BASEPRI
   1b1dc:	f381 8811 	msr	BASEPRI, r1
   1b1e0:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1b1e4:	fa22 f103 	lsr.w	r1, r2, r3
   1b1e8:	07c9      	lsls	r1, r1, #31
   1b1ea:	d50a      	bpl.n	1b202 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   1b1ec:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
   1b1f0:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1b1f4:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   1b1f6:	bf01      	itttt	eq
   1b1f8:	4339      	orreq	r1, r7
   1b1fa:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            err_code = NRFX_SUCCESS;
   1b1fe:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   1b200:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   1b202:	f38c 8811 	msr	BASEPRI, ip
   1b206:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   1b20a:	4540      	cmp	r0, r8
   1b20c:	d005      	beq.n	1b21a <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   1b20e:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1b212:	439a      	bics	r2, r3
   1b214:	f104 0401 	add.w	r4, r4, #1
   1b218:	d1db      	bne.n	1b1d2 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1b21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b21e:	bf00      	nop
   1b220:	0bad0002 	.word	0x0bad0002
   1b224:	20002ccc 	.word	0x20002ccc
   1b228:	0bad0000 	.word	0x0bad0000

0001b22c <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
   1b22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1b230:	7906      	ldrb	r6, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1b232:	4c4d      	ldr	r4, [pc, #308]	; (1b368 <nrfx_spi_init+0x13c>)
   1b234:	2528      	movs	r5, #40	; 0x28
   1b236:	4375      	muls	r5, r6
   1b238:	1967      	adds	r7, r4, r5
   1b23a:	f897 c01c 	ldrb.w	ip, [r7, #28]
   1b23e:	f1bc 0f00 	cmp.w	ip, #0
   1b242:	f040 808f 	bne.w	1b364 <nrfx_spi_init+0x138>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
   1b246:	5162      	str	r2, [r4, r5]
    p_cb->p_context = p_context;
   1b248:	607b      	str	r3, [r7, #4]
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPI_MODE_1)
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
   1b24a:	f891 e000 	ldrb.w	lr, [r1]
    if (p_config->mode <= NRF_SPI_MODE_1)
   1b24e:	7b0f      	ldrb	r7, [r1, #12]
    *p_pin = pin_number & 0x1F;
   1b250:	f00e 051f 	and.w	r5, lr, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1b254:	f04f 0c01 	mov.w	ip, #1
   1b258:	fa0c fc05 	lsl.w	ip, ip, r5
   1b25c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1b260:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   1b264:	f04f 0801 	mov.w	r8, #1
   1b268:	2f01      	cmp	r7, #1
    p_reg->OUTCLR = clr_mask;
   1b26a:	bf94      	ite	ls
   1b26c:	f8c3 c50c 	strls.w	ip, [r3, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
   1b270:	f8c3 c508 	strhi.w	ip, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1b274:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   1b278:	784d      	ldrb	r5, [r1, #1]
   1b27a:	2dff      	cmp	r5, #255	; 0xff
    *p_pin = pin_number & 0x1F;
   1b27c:	bf1f      	itttt	ne
   1b27e:	f005 0c1f 	andne.w	ip, r5, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1b282:	fa08 f80c 	lslne.w	r8, r8, ip
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1b286:	f50c 7ce0 	addne.w	ip, ip, #448	; 0x1c0
    p_reg->OUTCLR = clr_mask;
   1b28a:	f8c3 850c 	strne.w	r8, [r3, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1b28e:	bf1c      	itt	ne
   1b290:	f04f 0803 	movne.w	r8, #3
   1b294:	f843 802c 	strne.w	r8, [r3, ip, lsl #2]
    else
    {
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   1b298:	788b      	ldrb	r3, [r1, #2]
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
   1b29a:	bf08      	it	eq
   1b29c:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   1b2a0:	2bff      	cmp	r3, #255	; 0xff
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   1b2a2:	bf1f      	itttt	ne
   1b2a4:	f891 800e 	ldrbne.w	r8, [r1, #14]
    *p_pin = pin_number & 0x1F;
   1b2a8:	f003 0c1f 	andne.w	ip, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1b2ac:	f50c 7ce0 	addne.w	ip, ip, #448	; 0x1c0
   1b2b0:	f04f 49a0 	movne.w	r9, #1342177280	; 0x50000000
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   1b2b4:	bf1c      	itt	ne
   1b2b6:	ea4f 0888 	movne.w	r8, r8, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1b2ba:	f849 802c 	strne.w	r8, [r9, ip, lsl #2]
    else
    {
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1b2be:	f891 8003 	ldrb.w	r8, [r1, #3]
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
   1b2c2:	bf08      	it	eq
   1b2c4:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1b2c8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1b2cc:	d00f      	beq.n	1b2ee <nrfx_spi_init+0xc2>
    *p_pin = pin_number & 0x1F;
   1b2ce:	f008 0c1f 	and.w	ip, r8, #31
    p_reg->OUTSET = set_mask;
   1b2d2:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1b2d6:	f04f 0901 	mov.w	r9, #1
   1b2da:	fa09 f90c 	lsl.w	r9, r9, ip
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1b2de:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
   1b2e2:	f8ca 9508 	str.w	r9, [sl, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1b2e6:	f04f 0903 	mov.w	r9, #3
   1b2ea:	f84a 902c 	str.w	r9, [sl, ip, lsl #2]
    {
        nrf_gpio_pin_set(p_config->ss_pin);
        nrf_gpio_cfg_output(p_config->ss_pin);
    }
    m_cb[p_instance->drv_inst_idx].ss_pin = p_config->ss_pin;
   1b2ee:	f04f 0c28 	mov.w	ip, #40	; 0x28
   1b2f2:	fb0c 4c06 	mla	ip, ip, r6, r4
   1b2f6:	f88c 801e 	strb.w	r8, [ip, #30]

    NRF_SPI_Type * p_spi = p_instance->p_reg;
   1b2fa:	6800      	ldr	r0, [r0, #0]
    p_reg->PSELSCK  = sck_pin;
   1b2fc:	f8c0 e508 	str.w	lr, [r0, #1288]	; 0x508
    p_reg->PSELMOSI = mosi_pin;
   1b300:	f8c0 550c 	str.w	r5, [r0, #1292]	; 0x50c
    p_reg->PSELMISO = miso_pin;
   1b304:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
   1b308:	688b      	ldr	r3, [r1, #8]
   1b30a:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   1b30e:	7b4b      	ldrb	r3, [r1, #13]
   1b310:	3b00      	subs	r3, #0
   1b312:	bf18      	it	ne
   1b314:	2301      	movne	r3, #1
    switch (spi_mode)
   1b316:	2f02      	cmp	r7, #2
   1b318:	d01e      	beq.n	1b358 <nrfx_spi_init+0x12c>
   1b31a:	2f03      	cmp	r7, #3
   1b31c:	d01f      	beq.n	1b35e <nrfx_spi_init+0x132>
   1b31e:	2f01      	cmp	r7, #1
   1b320:	d101      	bne.n	1b326 <nrfx_spi_init+0xfa>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   1b322:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
   1b326:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554
    nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);

    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   1b32a:	2328      	movs	r3, #40	; 0x28
   1b32c:	fb03 4306 	mla	r3, r3, r6, r4
   1b330:	7949      	ldrb	r1, [r1, #5]
   1b332:	77d9      	strb	r1, [r3, #31]
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1b334:	2301      	movs	r3, #1
   1b336:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
   1b33a:	b11a      	cbz	r2, 1b344 <nrfx_spi_init+0x118>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1b33c:	f340 3007 	sbfx	r0, r0, #12, #8
   1b340:	f7eb fcdc 	bl	6cfc <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   1b344:	2328      	movs	r3, #40	; 0x28
   1b346:	fb03 4406 	mla	r4, r3, r6, r4
   1b34a:	2300      	movs	r3, #0
   1b34c:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1b34e:	4807      	ldr	r0, [pc, #28]	; (1b36c <nrfx_spi_init+0x140>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1b350:	2301      	movs	r3, #1
   1b352:	7723      	strb	r3, [r4, #28]
}
   1b354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1b358:	f043 0304 	orr.w	r3, r3, #4
        break;
   1b35c:	e7e3      	b.n	1b326 <nrfx_spi_init+0xfa>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1b35e:	f043 0306 	orr.w	r3, r3, #6
        break;
   1b362:	e7e0      	b.n	1b326 <nrfx_spi_init+0xfa>
        return err_code;
   1b364:	4802      	ldr	r0, [pc, #8]	; (1b370 <nrfx_spi_init+0x144>)
   1b366:	e7f5      	b.n	1b354 <nrfx_spi_init+0x128>
   1b368:	20002d1c 	.word	0x20002d1c
   1b36c:	0bad0000 	.word	0x0bad0000
   1b370:	0bad0005 	.word	0x0bad0005

0001b374 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   1b374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1b378:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   1b37a:	4d41      	ldr	r5, [pc, #260]	; (1b480 <nrfx_spi_xfer+0x10c>)
   1b37c:	2328      	movs	r3, #40	; 0x28
   1b37e:	437b      	muls	r3, r7
{
   1b380:	4694      	mov	ip, r2
    if (p_cb->transfer_in_progress)
   1b382:	18ea      	adds	r2, r5, r3
{
   1b384:	460e      	mov	r6, r1
    if (p_cb->transfer_in_progress)
   1b386:	7f51      	ldrb	r1, [r2, #29]
{
   1b388:	4686      	mov	lr, r0
    if (p_cb->transfer_in_progress)
   1b38a:	2900      	cmp	r1, #0
   1b38c:	d175      	bne.n	1b47a <nrfx_spi_xfer+0x106>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   1b38e:	f855 8003 	ldr.w	r8, [r5, r3]
   1b392:	f1b8 0f00 	cmp.w	r8, #0
   1b396:	d001      	beq.n	1b39c <nrfx_spi_xfer+0x28>
        {
            p_cb->transfer_in_progress = true;
   1b398:	2301      	movs	r3, #1
   1b39a:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   1b39c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1b3a0:	2428      	movs	r4, #40	; 0x28
   1b3a2:	fb04 5407 	mla	r4, r4, r7, r5
   1b3a6:	f104 090c 	add.w	r9, r4, #12
   1b3aa:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
    p_cb->abort = false;
   1b3ae:	2300      	movs	r3, #0
   1b3b0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1b3b4:	7fa3      	ldrb	r3, [r4, #30]
   1b3b6:	2bff      	cmp	r3, #255	; 0xff
   1b3b8:	d008      	beq.n	1b3cc <nrfx_spi_xfer+0x58>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1b3ba:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
   1b3bc:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1b3c0:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTCLR = clr_mask;
   1b3c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1b3c8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    {
        nrf_gpio_pin_clear(p_cb->ss_pin);
    }
    if (flags)
   1b3cc:	2328      	movs	r3, #40	; 0x28
   1b3ce:	f1bc 0f00 	cmp.w	ip, #0
   1b3d2:	d006      	beq.n	1b3e2 <nrfx_spi_xfer+0x6e>
    {
        p_cb->transfer_in_progress = false;
   1b3d4:	fb03 5507 	mla	r5, r3, r7, r5
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   1b3d8:	482a      	ldr	r0, [pc, #168]	; (1b484 <nrfx_spi_xfer+0x110>)
        p_cb->transfer_in_progress = false;
   1b3da:	2300      	movs	r3, #0
   1b3dc:	776b      	strb	r3, [r5, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1b3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   1b3e2:	f8de 4000 	ldr.w	r4, [lr]
    p_cb->bytes_transferred = 0;
   1b3e6:	fb03 5307 	mla	r3, r3, r7, r5
    p_reg->INTENCLR = mask;
   1b3ea:	2204      	movs	r2, #4
   1b3ec:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
   1b3f0:	f8c3 c020 	str.w	ip, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b3f4:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
   1b3f8:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   1b3fc:	6872      	ldr	r2, [r6, #4]
    nrf_spi_txd_set(p_spi,
   1b3fe:	b18a      	cbz	r2, 1b424 <nrfx_spi_xfer+0xb0>
   1b400:	6833      	ldr	r3, [r6, #0]
   1b402:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
   1b404:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
   1b408:	2a01      	cmp	r2, #1
   1b40a:	d90d      	bls.n	1b428 <nrfx_spi_xfer+0xb4>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   1b40c:	6833      	ldr	r3, [r6, #0]
   1b40e:	785b      	ldrb	r3, [r3, #1]
   1b410:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_cb->handler)
   1b414:	f1b8 0f00 	cmp.w	r8, #0
   1b418:	d00e      	beq.n	1b438 <nrfx_spi_xfer+0xc4>
    p_reg->INTENSET = mask;
   1b41a:	2304      	movs	r3, #4
   1b41c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
   1b420:	4819      	ldr	r0, [pc, #100]	; (1b488 <nrfx_spi_xfer+0x114>)
   1b422:	e7dc      	b.n	1b3de <nrfx_spi_xfer+0x6a>
    nrf_spi_txd_set(p_spi,
   1b424:	7fdb      	ldrb	r3, [r3, #31]
   1b426:	e7ed      	b.n	1b404 <nrfx_spi_xfer+0x90>
    else if (p_xfer_desc->rx_length > 1)
   1b428:	68f3      	ldr	r3, [r6, #12]
   1b42a:	2b01      	cmp	r3, #1
   1b42c:	d9f2      	bls.n	1b414 <nrfx_spi_xfer+0xa0>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   1b42e:	2328      	movs	r3, #40	; 0x28
   1b430:	fb03 5307 	mla	r3, r3, r7, r5
    p_reg->TXD = data;
   1b434:	7fdb      	ldrb	r3, [r3, #31]
   1b436:	e7eb      	b.n	1b410 <nrfx_spi_xfer+0x9c>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1b438:	eb07 0187 	add.w	r1, r7, r7, lsl #2
   1b43c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b440:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   1b444:	2b00      	cmp	r3, #0
   1b446:	d0fb      	beq.n	1b440 <nrfx_spi_xfer+0xcc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b448:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   1b44c:	4620      	mov	r0, r4
   1b44e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1b452:	f006 fa37 	bl	218c4 <transfer_byte>
   1b456:	2800      	cmp	r0, #0
   1b458:	d1f2      	bne.n	1b440 <nrfx_spi_xfer+0xcc>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1b45a:	2328      	movs	r3, #40	; 0x28
   1b45c:	fb03 5507 	mla	r5, r3, r7, r5
   1b460:	7fab      	ldrb	r3, [r5, #30]
   1b462:	2bff      	cmp	r3, #255	; 0xff
   1b464:	d0dc      	beq.n	1b420 <nrfx_spi_xfer+0xac>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1b466:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
   1b468:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1b46c:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
   1b470:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1b474:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1b478:	e7d2      	b.n	1b420 <nrfx_spi_xfer+0xac>
        return err_code;
   1b47a:	4804      	ldr	r0, [pc, #16]	; (1b48c <nrfx_spi_xfer+0x118>)
   1b47c:	e7af      	b.n	1b3de <nrfx_spi_xfer+0x6a>
   1b47e:	bf00      	nop
   1b480:	20002d1c 	.word	0x20002d1c
   1b484:	0bad0003 	.word	0x0bad0003
   1b488:	0bad0000 	.word	0x0bad0000
   1b48c:	0bad000b 	.word	0x0bad000b

0001b490 <nrfx_spi_1_irq_handler>:
   1b490:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   1b494:	2300      	movs	r3, #0
}
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
   1b496:	b510      	push	{r4, lr}
    if (!transfer_byte(p_spi, p_cb))
   1b498:	490e      	ldr	r1, [pc, #56]	; (1b4d4 <nrfx_spi_1_irq_handler+0x44>)
   1b49a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1b49e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1b4a2:	f006 fa0f 	bl	218c4 <transfer_byte>
   1b4a6:	b9a0      	cbnz	r0, 1b4d2 <nrfx_spi_1_irq_handler+0x42>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1b4a8:	7f8b      	ldrb	r3, [r1, #30]
   1b4aa:	2bff      	cmp	r3, #255	; 0xff
   1b4ac:	d008      	beq.n	1b4c0 <nrfx_spi_1_irq_handler+0x30>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1b4ae:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
   1b4b0:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1b4b4:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
   1b4b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1b4bc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_cb->transfer_in_progress = false;
   1b4c0:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   1b4c2:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
   1b4c4:	774b      	strb	r3, [r1, #29]
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
}
   1b4c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1b4ca:	e9d1 3100 	ldrd	r3, r1, [r1]
   1b4ce:	4802      	ldr	r0, [pc, #8]	; (1b4d8 <nrfx_spi_1_irq_handler+0x48>)
   1b4d0:	4718      	bx	r3
}
   1b4d2:	bd10      	pop	{r4, pc}
   1b4d4:	20002d1c 	.word	0x20002d1c
   1b4d8:	20002d24 	.word	0x20002d24

0001b4dc <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1b4dc:	4b0e      	ldr	r3, [pc, #56]	; (1b518 <z_sys_init_run_level+0x3c>)
{
   1b4de:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1b4e0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1b4e4:	3001      	adds	r0, #1
   1b4e6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1b4ea:	42a6      	cmp	r6, r4
   1b4ec:	d800      	bhi.n	1b4f0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1b4ee:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1b4f0:	e9d4 3500 	ldrd	r3, r5, [r4]
   1b4f4:	4628      	mov	r0, r5
   1b4f6:	4798      	blx	r3
		if (dev != NULL) {
   1b4f8:	b165      	cbz	r5, 1b514 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   1b4fa:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   1b4fc:	b130      	cbz	r0, 1b50c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1b4fe:	2800      	cmp	r0, #0
   1b500:	bfb8      	it	lt
   1b502:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1b504:	28ff      	cmp	r0, #255	; 0xff
   1b506:	bfa8      	it	ge
   1b508:	20ff      	movge	r0, #255	; 0xff
   1b50a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1b50c:	785a      	ldrb	r2, [r3, #1]
   1b50e:	f042 0201 	orr.w	r2, r2, #1
   1b512:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1b514:	3408      	adds	r4, #8
   1b516:	e7e8      	b.n	1b4ea <z_sys_init_run_level+0xe>
   1b518:	00023f24 	.word	0x00023f24

0001b51c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1b51c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1b51e:	4605      	mov	r5, r0
   1b520:	b910      	cbnz	r0, 1b528 <z_impl_device_get_binding+0xc>
		return NULL;
   1b522:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   1b524:	4620      	mov	r0, r4
   1b526:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   1b528:	7803      	ldrb	r3, [r0, #0]
   1b52a:	2b00      	cmp	r3, #0
   1b52c:	d0f9      	beq.n	1b522 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1b52e:	4c0e      	ldr	r4, [pc, #56]	; (1b568 <z_impl_device_get_binding+0x4c>)
   1b530:	4e0e      	ldr	r6, [pc, #56]	; (1b56c <z_impl_device_get_binding+0x50>)
   1b532:	42b4      	cmp	r4, r6
   1b534:	d108      	bne.n	1b548 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   1b536:	4c0c      	ldr	r4, [pc, #48]	; (1b568 <z_impl_device_get_binding+0x4c>)
   1b538:	42b4      	cmp	r4, r6
   1b53a:	d0f2      	beq.n	1b522 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1b53c:	4620      	mov	r0, r4
   1b53e:	f006 f9f5 	bl	2192c <z_device_ready>
   1b542:	b950      	cbnz	r0, 1b55a <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1b544:	3418      	adds	r4, #24
   1b546:	e7f7      	b.n	1b538 <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
   1b548:	4620      	mov	r0, r4
   1b54a:	f006 f9ef 	bl	2192c <z_device_ready>
   1b54e:	b110      	cbz	r0, 1b556 <z_impl_device_get_binding+0x3a>
   1b550:	6823      	ldr	r3, [r4, #0]
   1b552:	42ab      	cmp	r3, r5
   1b554:	d0e6      	beq.n	1b524 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1b556:	3418      	adds	r4, #24
   1b558:	e7eb      	b.n	1b532 <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1b55a:	6821      	ldr	r1, [r4, #0]
   1b55c:	4628      	mov	r0, r5
   1b55e:	f003 ff9e 	bl	1f49e <strcmp>
   1b562:	2800      	cmp	r0, #0
   1b564:	d1ee      	bne.n	1b544 <z_impl_device_get_binding+0x28>
   1b566:	e7dd      	b.n	1b524 <z_impl_device_get_binding+0x8>
   1b568:	20000790 	.word	0x20000790
   1b56c:	20000820 	.word	0x20000820

0001b570 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1b570:	b510      	push	{r4, lr}
   1b572:	4604      	mov	r4, r0
	z_impl_log_panic();
   1b574:	f7ea fa4c 	bl	5a10 <z_impl_log_panic>
   1b578:	4b06      	ldr	r3, [pc, #24]	; (1b594 <k_sys_fatal_error_handler+0x24>)
   1b57a:	4907      	ldr	r1, [pc, #28]	; (1b598 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   1b57c:	4807      	ldr	r0, [pc, #28]	; (1b59c <k_sys_fatal_error_handler+0x2c>)
   1b57e:	1ac9      	subs	r1, r1, r3
   1b580:	08c9      	lsrs	r1, r1, #3
   1b582:	0189      	lsls	r1, r1, #6
   1b584:	f041 0101 	orr.w	r1, r1, #1
   1b588:	f002 f9cc 	bl	1d924 <log_0>
	arch_system_halt(reason);
   1b58c:	4620      	mov	r0, r4
   1b58e:	f006 f9d6 	bl	2193e <arch_system_halt>
   1b592:	bf00      	nop
   1b594:	000225d8 	.word	0x000225d8
   1b598:	00022710 	.word	0x00022710
   1b59c:	00025eb8 	.word	0x00025eb8

0001b5a0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1b5a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b5a4:	4606      	mov	r6, r0
   1b5a6:	460f      	mov	r7, r1
	__asm__ volatile(
   1b5a8:	f04f 0320 	mov.w	r3, #32
   1b5ac:	f3ef 8811 	mrs	r8, BASEPRI
   1b5b0:	f383 8811 	msr	BASEPRI, r3
   1b5b4:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1b5b8:	f000 fd78 	bl	1c0ac <z_impl_k_current_get>
   1b5bc:	4c1f      	ldr	r4, [pc, #124]	; (1b63c <z_fatal_error+0x9c>)
   1b5be:	4b20      	ldr	r3, [pc, #128]	; (1b640 <z_fatal_error+0xa0>)
   1b5c0:	1ae4      	subs	r4, r4, r3
   1b5c2:	2e04      	cmp	r6, #4
   1b5c4:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1b5c8:	bf96      	itet	ls
   1b5ca:	4a1e      	ldrls	r2, [pc, #120]	; (1b644 <z_fatal_error+0xa4>)
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1b5cc:	4a1e      	ldrhi	r2, [pc, #120]	; (1b648 <z_fatal_error+0xa8>)
   1b5ce:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   1b5d2:	01a4      	lsls	r4, r4, #6
   1b5d4:	f044 0301 	orr.w	r3, r4, #1
   1b5d8:	4605      	mov	r5, r0
   1b5da:	f8ad 3000 	strh.w	r3, [sp]
   1b5de:	481b      	ldr	r0, [pc, #108]	; (1b64c <z_fatal_error+0xac>)
   1b5e0:	2300      	movs	r3, #0
   1b5e2:	4631      	mov	r1, r6
   1b5e4:	f002 f9dd 	bl	1d9a2 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1b5e8:	b147      	cbz	r7, 1b5fc <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1b5ea:	69fb      	ldr	r3, [r7, #28]
   1b5ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1b5f0:	b123      	cbz	r3, 1b5fc <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1b5f2:	4817      	ldr	r0, [pc, #92]	; (1b650 <z_fatal_error+0xb0>)
   1b5f4:	f044 0101 	orr.w	r1, r4, #1
   1b5f8:	f002 f994 	bl	1d924 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1b5fc:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1b600:	b12d      	cbz	r5, 1b60e <z_fatal_error+0x6e>
   1b602:	4628      	mov	r0, r5
   1b604:	f006 fc30 	bl	21e68 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1b608:	b108      	cbz	r0, 1b60e <z_fatal_error+0x6e>
   1b60a:	7803      	ldrb	r3, [r0, #0]
   1b60c:	b903      	cbnz	r3, 1b610 <z_fatal_error+0x70>
		thread_name = "unknown";
   1b60e:	4811      	ldr	r0, [pc, #68]	; (1b654 <z_fatal_error+0xb4>)
	LOG_ERR("Current thread: %p (%s)", thread,
   1b610:	f7ea f878 	bl	5704 <log_strdup>
   1b614:	4623      	mov	r3, r4
   1b616:	4602      	mov	r2, r0
   1b618:	4629      	mov	r1, r5
   1b61a:	480f      	ldr	r0, [pc, #60]	; (1b658 <z_fatal_error+0xb8>)
   1b61c:	f002 f9a8 	bl	1d970 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1b620:	4639      	mov	r1, r7
   1b622:	4630      	mov	r0, r6
   1b624:	f7ff ffa4 	bl	1b570 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1b628:	f388 8811 	msr	BASEPRI, r8
   1b62c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1b630:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1b632:	b002      	add	sp, #8
   1b634:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b638:	f7eb bf1c 	b.w	7474 <z_impl_k_thread_abort>
   1b63c:	00022710 	.word	0x00022710
   1b640:	000225d8 	.word	0x000225d8
   1b644:	00023f3c 	.word	0x00023f3c
   1b648:	00025ec7 	.word	0x00025ec7
   1b64c:	00025ed5 	.word	0x00025ed5
   1b650:	00025efd 	.word	0x00025efd
   1b654:	00024a02 	.word	0x00024a02
   1b658:	00025f1e 	.word	0x00025f1e

0001b65c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1b65c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1b65e:	4c09      	ldr	r4, [pc, #36]	; (1b684 <idle+0x28>)
	__asm__ volatile(
   1b660:	f04f 0220 	mov.w	r2, #32
   1b664:	f3ef 8311 	mrs	r3, BASEPRI
   1b668:	f382 8811 	msr	BASEPRI, r2
   1b66c:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1b670:	f006 fcde 	bl	22030 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   1b674:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   1b676:	f7ea fd8f 	bl	6198 <pm_system_suspend>
   1b67a:	2800      	cmp	r0, #0
   1b67c:	d1f0      	bne.n	1b660 <idle+0x4>
	arch_cpu_idle();
   1b67e:	f7eb fbdb 	bl	6e38 <arch_cpu_idle>
}
   1b682:	e7ed      	b.n	1b660 <idle+0x4>
   1b684:	20002d44 	.word	0x20002d44

0001b688 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1b688:	4802      	ldr	r0, [pc, #8]	; (1b694 <z_bss_zero+0xc>)
   1b68a:	4a03      	ldr	r2, [pc, #12]	; (1b698 <z_bss_zero+0x10>)
   1b68c:	2100      	movs	r1, #0
   1b68e:	1a12      	subs	r2, r2, r0
   1b690:	f003 bf4d 	b.w	1f52e <memset>
   1b694:	20000a08 	.word	0x20000a08
   1b698:	2000356c 	.word	0x2000356c

0001b69c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1b69c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1b69e:	4b0a      	ldr	r3, [pc, #40]	; (1b6c8 <bg_thread_main+0x2c>)
   1b6a0:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1b6a2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1b6a4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1b6a6:	f7ff ff19 	bl	1b4dc <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1b6aa:	f000 ff7d 	bl	1c5a8 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1b6ae:	2003      	movs	r0, #3
   1b6b0:	f7ff ff14 	bl	1b4dc <z_sys_init_run_level>

	z_init_static_threads();
   1b6b4:	f000 fe38 	bl	1c328 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1b6b8:	f7e9 f9fe 	bl	4ab8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1b6bc:	4a03      	ldr	r2, [pc, #12]	; (1b6cc <bg_thread_main+0x30>)
   1b6be:	7b13      	ldrb	r3, [r2, #12]
   1b6c0:	f023 0301 	bic.w	r3, r3, #1
   1b6c4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1b6c6:	bd08      	pop	{r3, pc}
   1b6c8:	2000356b 	.word	0x2000356b
   1b6cc:	200014f8 	.word	0x200014f8

0001b6d0 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1b6d0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1b6d4:	b0b9      	sub	sp, #228	; 0xe4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1b6d6:	f7e9 ff6d 	bl	55b4 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1b6da:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 1b7d4 <z_cstart+0x104>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1b6de:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1b6e2:	4d34      	ldr	r5, [pc, #208]	; (1b7b4 <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
   1b6e4:	4e34      	ldr	r6, [pc, #208]	; (1b7b8 <z_cstart+0xe8>)
   1b6e6:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1b6e8:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 1b7d8 <z_cstart+0x108>
	z_setup_new_thread(thread, stack,
   1b6ec:	4f33      	ldr	r7, [pc, #204]	; (1b7bc <z_cstart+0xec>)
   1b6ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b6f2:	2400      	movs	r4, #0
   1b6f4:	616b      	str	r3, [r5, #20]
   1b6f6:	23e0      	movs	r3, #224	; 0xe0
   1b6f8:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1b6fc:	77ec      	strb	r4, [r5, #31]
   1b6fe:	762c      	strb	r4, [r5, #24]
   1b700:	766c      	strb	r4, [r5, #25]
   1b702:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1b704:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1b706:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1b70a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1b70c:	f7eb fe90 	bl	7430 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1b710:	f7eb fb8c 	bl	6e2c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1b714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b718:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1b71a:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1b71c:	4d28      	ldr	r5, [pc, #160]	; (1b7c0 <z_cstart+0xf0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1b71e:	f240 1301 	movw	r3, #257	; 0x101
   1b722:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1b726:	ab06      	add	r3, sp, #24
   1b728:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   1b72a:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
#endif
#if defined(CONFIG_MMU) && defined(CONFIG_USERSPACE)
	z_kernel_map_fixup();
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1b72e:	f006 f8fc 	bl	2192a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1b732:	4620      	mov	r0, r4
   1b734:	f7ff fed2 	bl	1b4dc <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1b738:	2001      	movs	r0, #1
   1b73a:	f7ff fecf 	bl	1b4dc <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1b73e:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   1b742:	f000 fc01 	bl	1bf48 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1b746:	4b1f      	ldr	r3, [pc, #124]	; (1b7c4 <z_cstart+0xf4>)
	_kernel.ready_q.cache = &z_main_thread;
   1b748:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1b74a:	491f      	ldr	r1, [pc, #124]	; (1b7c8 <z_cstart+0xf8>)
   1b74c:	9305      	str	r3, [sp, #20]
   1b74e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1b752:	4653      	mov	r3, sl
   1b754:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1b758:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1b75c:	9400      	str	r4, [sp, #0]
   1b75e:	4630      	mov	r0, r6
   1b760:	f000 fd86 	bl	1c270 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b764:	7b73      	ldrb	r3, [r6, #13]
   1b766:	4680      	mov	r8, r0
   1b768:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1b76c:	4630      	mov	r0, r6
   1b76e:	7373      	strb	r3, [r6, #13]
   1b770:	f006 fad1 	bl	21d16 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1b774:	230f      	movs	r3, #15
   1b776:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1b77a:	4914      	ldr	r1, [pc, #80]	; (1b7cc <z_cstart+0xfc>)
   1b77c:	4b14      	ldr	r3, [pc, #80]	; (1b7d0 <z_cstart+0x100>)
   1b77e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1b782:	e9cd b404 	strd	fp, r4, [sp, #16]
   1b786:	e9cd 5400 	strd	r5, r4, [sp]
   1b78a:	4638      	mov	r0, r7
   1b78c:	f000 fd70 	bl	1c270 <z_setup_new_thread>
   1b790:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1b792:	60ef      	str	r7, [r5, #12]
   1b794:	f023 0304 	bic.w	r3, r3, #4
   1b798:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1b79a:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   1b79e:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   1b7a2:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   1b7a4:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1b7a8:	4652      	mov	r2, sl
   1b7aa:	4641      	mov	r1, r8
   1b7ac:	4630      	mov	r0, r6
   1b7ae:	f7eb fb1b 	bl	6de8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1b7b2:	bf00      	nop
   1b7b4:	e000ed00 	.word	0xe000ed00
   1b7b8:	200014f8 	.word	0x200014f8
   1b7bc:	20001430 	.word	0x20001430
   1b7c0:	20002d44 	.word	0x20002d44
   1b7c4:	00025f80 	.word	0x00025f80
   1b7c8:	20004620 	.word	0x20004620
   1b7cc:	20004a20 	.word	0x20004a20
   1b7d0:	0001b65d 	.word	0x0001b65d
   1b7d4:	20005360 	.word	0x20005360
   1b7d8:	0001b69d 	.word	0x0001b69d

0001b7dc <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   1b7dc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1b7de:	4c06      	ldr	r4, [pc, #24]	; (1b7f8 <statics_init+0x1c>)
   1b7e0:	4d06      	ldr	r5, [pc, #24]	; (1b7fc <statics_init+0x20>)
   1b7e2:	42ac      	cmp	r4, r5
   1b7e4:	d301      	bcc.n	1b7ea <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1b7e6:	2000      	movs	r0, #0
   1b7e8:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1b7ea:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1b7ee:	4620      	mov	r0, r4
   1b7f0:	f006 f8b5 	bl	2195e <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1b7f4:	3414      	adds	r4, #20
   1b7f6:	e7f4      	b.n	1b7e2 <statics_init+0x6>
   1b7f8:	20000874 	.word	0x20000874
   1b7fc:	20000874 	.word	0x20000874

0001b800 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1b800:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1b802:	4b0e      	ldr	r3, [pc, #56]	; (1b83c <init_mem_slab_module+0x3c>)
   1b804:	4c0e      	ldr	r4, [pc, #56]	; (1b840 <init_mem_slab_module+0x40>)
   1b806:	42a3      	cmp	r3, r4
   1b808:	d301      	bcc.n	1b80e <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1b80a:	2000      	movs	r0, #0
	return rc;
}
   1b80c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1b80e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1b812:	ea41 0200 	orr.w	r2, r1, r0
   1b816:	f012 0203 	ands.w	r2, r2, #3
   1b81a:	d10b      	bne.n	1b834 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1b81c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1b81e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b820:	42aa      	cmp	r2, r5
   1b822:	d101      	bne.n	1b828 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1b824:	331c      	adds	r3, #28
   1b826:	e7ee      	b.n	1b806 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1b828:	695e      	ldr	r6, [r3, #20]
   1b82a:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b82c:	3201      	adds	r2, #1
		slab->free_list = p;
   1b82e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1b830:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1b832:	e7f5      	b.n	1b820 <init_mem_slab_module+0x20>
	return rc;
   1b834:	f06f 0015 	mvn.w	r0, #21
   1b838:	e7e8      	b.n	1b80c <init_mem_slab_module+0xc>
   1b83a:	bf00      	nop
   1b83c:	20000820 	.word	0x20000820
   1b840:	20000874 	.word	0x20000874

0001b844 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1b844:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b846:	460c      	mov	r4, r1
   1b848:	f04f 0520 	mov.w	r5, #32
   1b84c:	f3ef 8111 	mrs	r1, BASEPRI
   1b850:	f385 8811 	msr	BASEPRI, r5
   1b854:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1b858:	6945      	ldr	r5, [r0, #20]
   1b85a:	b15d      	cbz	r5, 1b874 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   1b85c:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1b85e:	682b      	ldr	r3, [r5, #0]
   1b860:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1b862:	6983      	ldr	r3, [r0, #24]
   1b864:	3301      	adds	r3, #1
   1b866:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1b868:	2000      	movs	r0, #0
	__asm__ volatile(
   1b86a:	f381 8811 	msr	BASEPRI, r1
   1b86e:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1b872:	e011      	b.n	1b898 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b874:	ea52 0c03 	orrs.w	ip, r2, r3
   1b878:	d103      	bne.n	1b882 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1b87a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   1b87c:	f06f 000b 	mvn.w	r0, #11
   1b880:	e7f3      	b.n	1b86a <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1b882:	e9cd 2300 	strd	r2, r3, [sp]
   1b886:	4602      	mov	r2, r0
   1b888:	4804      	ldr	r0, [pc, #16]	; (1b89c <k_mem_slab_alloc+0x58>)
   1b88a:	f000 f9e5 	bl	1bc58 <z_pend_curr>
		if (result == 0) {
   1b88e:	b918      	cbnz	r0, 1b898 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   1b890:	4b03      	ldr	r3, [pc, #12]	; (1b8a0 <k_mem_slab_alloc+0x5c>)
   1b892:	689b      	ldr	r3, [r3, #8]
   1b894:	695b      	ldr	r3, [r3, #20]
   1b896:	6023      	str	r3, [r4, #0]
}
   1b898:	b003      	add	sp, #12
   1b89a:	bd30      	pop	{r4, r5, pc}
   1b89c:	2000356c 	.word	0x2000356c
   1b8a0:	20002d44 	.word	0x20002d44

0001b8a4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1b8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b8a6:	4604      	mov	r4, r0
   1b8a8:	460d      	mov	r5, r1
	__asm__ volatile(
   1b8aa:	f04f 0320 	mov.w	r3, #32
   1b8ae:	f3ef 8611 	mrs	r6, BASEPRI
   1b8b2:	f383 8811 	msr	BASEPRI, r3
   1b8b6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   1b8ba:	6947      	ldr	r7, [r0, #20]
   1b8bc:	b96f      	cbnz	r7, 1b8da <k_mem_slab_free+0x36>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1b8be:	f006 fa71 	bl	21da4 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1b8c2:	b150      	cbz	r0, 1b8da <k_mem_slab_free+0x36>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1b8c4:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1b8c6:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1b8c8:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1b8ca:	f006 fa24 	bl	21d16 <z_ready_thread>
			z_reschedule(&lock, key);
   1b8ce:	4631      	mov	r1, r6
   1b8d0:	4808      	ldr	r0, [pc, #32]	; (1b8f4 <k_mem_slab_free+0x50>)
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   1b8d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   1b8d6:	f000 b93d 	b.w	1bb54 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1b8da:	682b      	ldr	r3, [r5, #0]
   1b8dc:	6962      	ldr	r2, [r4, #20]
   1b8de:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1b8e0:	682b      	ldr	r3, [r5, #0]
   1b8e2:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1b8e4:	69a3      	ldr	r3, [r4, #24]
   1b8e6:	3b01      	subs	r3, #1
   1b8e8:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1b8ea:	f386 8811 	msr	BASEPRI, r6
   1b8ee:	f3bf 8f6f 	isb	sy
}
   1b8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b8f4:	2000356c 	.word	0x2000356c

0001b8f8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1b8f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b8fc:	4604      	mov	r4, r0
   1b8fe:	4617      	mov	r7, r2
   1b900:	461e      	mov	r6, r3
	__asm__ volatile(
   1b902:	f04f 0320 	mov.w	r3, #32
   1b906:	f3ef 8811 	mrs	r8, BASEPRI
   1b90a:	f383 8811 	msr	BASEPRI, r3
   1b90e:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1b912:	68c3      	ldr	r3, [r0, #12]
   1b914:	4a2f      	ldr	r2, [pc, #188]	; (1b9d4 <z_impl_k_mutex_lock+0xdc>)
   1b916:	b16b      	cbz	r3, 1b934 <z_impl_k_mutex_lock+0x3c>
   1b918:	6880      	ldr	r0, [r0, #8]
   1b91a:	6891      	ldr	r1, [r2, #8]
   1b91c:	4288      	cmp	r0, r1
   1b91e:	d019      	beq.n	1b954 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1b920:	ea57 0306 	orrs.w	r3, r7, r6
   1b924:	d118      	bne.n	1b958 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1b926:	f388 8811 	msr	BASEPRI, r8
   1b92a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1b92e:	f06f 000f 	mvn.w	r0, #15
   1b932:	e00c      	b.n	1b94e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1b934:	6891      	ldr	r1, [r2, #8]
   1b936:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1b93a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1b93c:	3301      	adds	r3, #1
   1b93e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1b940:	6893      	ldr	r3, [r2, #8]
   1b942:	60a3      	str	r3, [r4, #8]
   1b944:	f388 8811 	msr	BASEPRI, r8
   1b948:	f3bf 8f6f 	isb	sy
		return 0;
   1b94c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1b94e:	b002      	add	sp, #8
   1b950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1b954:	6921      	ldr	r1, [r4, #16]
   1b956:	e7f0      	b.n	1b93a <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1b958:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b95c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1b960:	4299      	cmp	r1, r3
   1b962:	bfa8      	it	ge
   1b964:	4619      	movge	r1, r3
   1b966:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1b96a:	428b      	cmp	r3, r1
   1b96c:	dd2b      	ble.n	1b9c6 <z_impl_k_mutex_lock+0xce>
		resched = adjust_owner_prio(mutex, new_prio);
   1b96e:	f006 f878 	bl	21a62 <adjust_owner_prio.isra.0>
   1b972:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1b974:	e9cd 7600 	strd	r7, r6, [sp]
   1b978:	4817      	ldr	r0, [pc, #92]	; (1b9d8 <z_impl_k_mutex_lock+0xe0>)
   1b97a:	4622      	mov	r2, r4
   1b97c:	4641      	mov	r1, r8
   1b97e:	f000 f96b 	bl	1bc58 <z_pend_curr>
	if (got_mutex == 0) {
   1b982:	2800      	cmp	r0, #0
   1b984:	d0e3      	beq.n	1b94e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1b986:	f04f 0320 	mov.w	r3, #32
   1b98a:	f3ef 8611 	mrs	r6, BASEPRI
   1b98e:	f383 8811 	msr	BASEPRI, r3
   1b992:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1b996:	6823      	ldr	r3, [r4, #0]
   1b998:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b99a:	42a3      	cmp	r3, r4
   1b99c:	d007      	beq.n	1b9ae <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1b99e:	b133      	cbz	r3, 1b9ae <z_impl_k_mutex_lock+0xb6>
   1b9a0:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1b9a4:	4299      	cmp	r1, r3
   1b9a6:	bfa8      	it	ge
   1b9a8:	4619      	movge	r1, r3
   1b9aa:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1b9ae:	68a0      	ldr	r0, [r4, #8]
   1b9b0:	f006 f857 	bl	21a62 <adjust_owner_prio.isra.0>
   1b9b4:	b900      	cbnz	r0, 1b9b8 <z_impl_k_mutex_lock+0xc0>
	if (resched) {
   1b9b6:	b145      	cbz	r5, 1b9ca <z_impl_k_mutex_lock+0xd2>
		z_reschedule(&lock, key);
   1b9b8:	4807      	ldr	r0, [pc, #28]	; (1b9d8 <z_impl_k_mutex_lock+0xe0>)
   1b9ba:	4631      	mov	r1, r6
   1b9bc:	f000 f8ca 	bl	1bb54 <z_reschedule>
	return -EAGAIN;
   1b9c0:	f06f 000a 	mvn.w	r0, #10
   1b9c4:	e7c3      	b.n	1b94e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1b9c6:	2500      	movs	r5, #0
   1b9c8:	e7d4      	b.n	1b974 <z_impl_k_mutex_lock+0x7c>
	__asm__ volatile(
   1b9ca:	f386 8811 	msr	BASEPRI, r6
   1b9ce:	f3bf 8f6f 	isb	sy
   1b9d2:	e7f5      	b.n	1b9c0 <z_impl_k_mutex_lock+0xc8>
   1b9d4:	20002d44 	.word	0x20002d44
   1b9d8:	2000356c 	.word	0x2000356c

0001b9dc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1b9dc:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   1b9de:	6883      	ldr	r3, [r0, #8]
{
   1b9e0:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1b9e2:	2b00      	cmp	r3, #0
   1b9e4:	d032      	beq.n	1ba4c <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1b9e6:	4a1c      	ldr	r2, [pc, #112]	; (1ba58 <z_impl_k_mutex_unlock+0x7c>)
   1b9e8:	6892      	ldr	r2, [r2, #8]
   1b9ea:	4293      	cmp	r3, r2
   1b9ec:	d131      	bne.n	1ba52 <z_impl_k_mutex_unlock+0x76>
	--_current->base.sched_locked;
   1b9ee:	7bda      	ldrb	r2, [r3, #15]
   1b9f0:	3a01      	subs	r2, #1
   1b9f2:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1b9f4:	68c3      	ldr	r3, [r0, #12]
   1b9f6:	2b01      	cmp	r3, #1
   1b9f8:	d005      	beq.n	1ba06 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1b9fa:	3b01      	subs	r3, #1
   1b9fc:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1b9fe:	f000 f971 	bl	1bce4 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1ba02:	2000      	movs	r0, #0
}
   1ba04:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1ba06:	f04f 0320 	mov.w	r3, #32
   1ba0a:	f3ef 8511 	mrs	r5, BASEPRI
   1ba0e:	f383 8811 	msr	BASEPRI, r3
   1ba12:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1ba16:	6901      	ldr	r1, [r0, #16]
   1ba18:	6880      	ldr	r0, [r0, #8]
   1ba1a:	f006 f822 	bl	21a62 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1ba1e:	4620      	mov	r0, r4
   1ba20:	f006 f9c0 	bl	21da4 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1ba24:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1ba26:	b158      	cbz	r0, 1ba40 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   1ba28:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1ba2c:	6122      	str	r2, [r4, #16]
   1ba2e:	2200      	movs	r2, #0
   1ba30:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1ba32:	f006 f970 	bl	21d16 <z_ready_thread>
		z_reschedule(&lock, key);
   1ba36:	4809      	ldr	r0, [pc, #36]	; (1ba5c <z_impl_k_mutex_unlock+0x80>)
   1ba38:	4629      	mov	r1, r5
   1ba3a:	f000 f88b 	bl	1bb54 <z_reschedule>
   1ba3e:	e7de      	b.n	1b9fe <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1ba40:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1ba42:	f385 8811 	msr	BASEPRI, r5
   1ba46:	f3bf 8f6f 	isb	sy
   1ba4a:	e7d8      	b.n	1b9fe <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1ba4c:	f06f 0015 	mvn.w	r0, #21
   1ba50:	e7d8      	b.n	1ba04 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1ba52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ba56:	e7d5      	b.n	1ba04 <z_impl_k_mutex_unlock+0x28>
   1ba58:	20002d44 	.word	0x20002d44
   1ba5c:	2000356c 	.word	0x2000356c

0001ba60 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1ba60:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ba62:	4611      	mov	r1, r2
	__asm__ volatile(
   1ba64:	f04f 0220 	mov.w	r2, #32
   1ba68:	f3ef 8511 	mrs	r5, BASEPRI
   1ba6c:	f382 8811 	msr	BASEPRI, r2
   1ba70:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1ba74:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1ba76:	b19c      	cbz	r4, 1baa0 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ba78:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1ba7a:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ba7c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1ba80:	4294      	cmp	r4, r2
	list->head = node;
   1ba82:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1ba84:	bf08      	it	eq
   1ba86:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1ba88:	2101      	movs	r1, #1
   1ba8a:	4620      	mov	r0, r4
   1ba8c:	f006 f855 	bl	21b3a <z_queue_node_peek>
   1ba90:	4604      	mov	r4, r0
	__asm__ volatile(
   1ba92:	f385 8811 	msr	BASEPRI, r5
   1ba96:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1ba9a:	4620      	mov	r0, r4
   1ba9c:	b003      	add	sp, #12
   1ba9e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1baa0:	ea51 0203 	orrs.w	r2, r1, r3
   1baa4:	d0f5      	beq.n	1ba92 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1baa6:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1baaa:	e9cd 1300 	strd	r1, r3, [sp]
   1baae:	4610      	mov	r0, r2
   1bab0:	4629      	mov	r1, r5
   1bab2:	f000 f8d1 	bl	1bc58 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1bab6:	2800      	cmp	r0, #0
   1bab8:	d1ef      	bne.n	1ba9a <z_impl_k_queue_get+0x3a>
   1baba:	4b02      	ldr	r3, [pc, #8]	; (1bac4 <z_impl_k_queue_get+0x64>)
   1babc:	689b      	ldr	r3, [r3, #8]
   1babe:	695c      	ldr	r4, [r3, #20]
   1bac0:	e7eb      	b.n	1ba9a <z_impl_k_queue_get+0x3a>
   1bac2:	bf00      	nop
   1bac4:	20002d44 	.word	0x20002d44

0001bac8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1bac8:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1baca:	4c08      	ldr	r4, [pc, #32]	; (1baec <z_reset_time_slice+0x24>)
   1bacc:	6823      	ldr	r3, [r4, #0]
   1bace:	b15b      	cbz	r3, 1bae8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1bad0:	f7ea fe88 	bl	67e4 <sys_clock_elapsed>
   1bad4:	6822      	ldr	r2, [r4, #0]
   1bad6:	4906      	ldr	r1, [pc, #24]	; (1baf0 <z_reset_time_slice+0x28>)
   1bad8:	4410      	add	r0, r2
   1bada:	6108      	str	r0, [r1, #16]
		z_set_timeout_expiry(slice_time, false);
	}
}
   1badc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   1bae0:	2100      	movs	r1, #0
   1bae2:	4610      	mov	r0, r2
   1bae4:	f006 bab4 	b.w	22050 <z_set_timeout_expiry>
}
   1bae8:	bd10      	pop	{r4, pc}
   1baea:	bf00      	nop
   1baec:	20002d80 	.word	0x20002d80
   1baf0:	20002d44 	.word	0x20002d44

0001baf4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1baf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1baf6:	4604      	mov	r4, r0
   1baf8:	460d      	mov	r5, r1
	__asm__ volatile(
   1bafa:	f04f 0320 	mov.w	r3, #32
   1bafe:	f3ef 8611 	mrs	r6, BASEPRI
   1bb02:	f383 8811 	msr	BASEPRI, r3
   1bb06:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1bb0a:	4b0f      	ldr	r3, [pc, #60]	; (1bb48 <k_sched_time_slice_set+0x54>)
   1bb0c:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1bb0e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1bb12:	f240 30e7 	movw	r0, #999	; 0x3e7
   1bb16:	6119      	str	r1, [r3, #16]
   1bb18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bb1c:	2300      	movs	r3, #0
   1bb1e:	fbe4 0107 	umlal	r0, r1, r4, r7
   1bb22:	f7e4 ffab 	bl	a7c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1bb26:	2c00      	cmp	r4, #0
   1bb28:	4b08      	ldr	r3, [pc, #32]	; (1bb4c <k_sched_time_slice_set+0x58>)
   1bb2a:	dc09      	bgt.n	1bb40 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   1bb2c:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   1bb2e:	4b08      	ldr	r3, [pc, #32]	; (1bb50 <k_sched_time_slice_set+0x5c>)
   1bb30:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1bb32:	f7ff ffc9 	bl	1bac8 <z_reset_time_slice>
	__asm__ volatile(
   1bb36:	f386 8811 	msr	BASEPRI, r6
   1bb3a:	f3bf 8f6f 	isb	sy
	}
}
   1bb3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   1bb40:	2802      	cmp	r0, #2
   1bb42:	bfb8      	it	lt
   1bb44:	2002      	movlt	r0, #2
   1bb46:	e7f1      	b.n	1bb2c <k_sched_time_slice_set+0x38>
   1bb48:	20002d44 	.word	0x20002d44
   1bb4c:	20002d80 	.word	0x20002d80
   1bb50:	20002d7c 	.word	0x20002d7c

0001bb54 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1bb54:	b949      	cbnz	r1, 1bb6a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1bb56:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1bb5a:	b930      	cbnz	r0, 1bb6a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1bb5c:	4b05      	ldr	r3, [pc, #20]	; (1bb74 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1bb5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1bb60:	689b      	ldr	r3, [r3, #8]
   1bb62:	429a      	cmp	r2, r3
   1bb64:	d001      	beq.n	1bb6a <z_reschedule+0x16>
	ret = arch_swap(key);
   1bb66:	f7eb b84d 	b.w	6c04 <arch_swap>
   1bb6a:	f381 8811 	msr	BASEPRI, r1
   1bb6e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1bb72:	4770      	bx	lr
   1bb74:	20002d44 	.word	0x20002d44

0001bb78 <k_sched_lock>:
	__asm__ volatile(
   1bb78:	f04f 0320 	mov.w	r3, #32
   1bb7c:	f3ef 8111 	mrs	r1, BASEPRI
   1bb80:	f383 8811 	msr	BASEPRI, r3
   1bb84:	f3bf 8f6f 	isb	sy
   1bb88:	4b04      	ldr	r3, [pc, #16]	; (1bb9c <k_sched_lock+0x24>)
   1bb8a:	689a      	ldr	r2, [r3, #8]
   1bb8c:	7bd3      	ldrb	r3, [r2, #15]
   1bb8e:	3b01      	subs	r3, #1
   1bb90:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1bb92:	f381 8811 	msr	BASEPRI, r1
   1bb96:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1bb9a:	4770      	bx	lr
   1bb9c:	20002d44 	.word	0x20002d44

0001bba0 <update_cache>:
{
   1bba0:	b538      	push	{r3, r4, r5, lr}
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1bba2:	4d0d      	ldr	r5, [pc, #52]	; (1bbd8 <update_cache+0x38>)
{
   1bba4:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1bba6:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1bbaa:	f006 f884 	bl	21cb6 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1bbae:	4604      	mov	r4, r0
   1bbb0:	b900      	cbnz	r0, 1bbb4 <update_cache+0x14>
   1bbb2:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   1bbb4:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   1bbb6:	b94a      	cbnz	r2, 1bbcc <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   1bbb8:	7b5a      	ldrb	r2, [r3, #13]
   1bbba:	06d2      	lsls	r2, r2, #27
   1bbbc:	d106      	bne.n	1bbcc <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1bbbe:	69a2      	ldr	r2, [r4, #24]
   1bbc0:	b922      	cbnz	r2, 1bbcc <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
   1bbc2:	89da      	ldrh	r2, [r3, #14]
   1bbc4:	2a7f      	cmp	r2, #127	; 0x7f
   1bbc6:	d901      	bls.n	1bbcc <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   1bbc8:	626b      	str	r3, [r5, #36]	; 0x24
}
   1bbca:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1bbcc:	429c      	cmp	r4, r3
   1bbce:	d001      	beq.n	1bbd4 <update_cache+0x34>
			z_reset_time_slice();
   1bbd0:	f7ff ff7a 	bl	1bac8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1bbd4:	626c      	str	r4, [r5, #36]	; 0x24
}
   1bbd6:	e7f8      	b.n	1bbca <update_cache+0x2a>
   1bbd8:	20002d44 	.word	0x20002d44

0001bbdc <unready_thread>:
{
   1bbdc:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1bbde:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1bbe2:	7b43      	ldrb	r3, [r0, #13]
   1bbe4:	2a00      	cmp	r2, #0
{
   1bbe6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1bbe8:	da04      	bge.n	1bbf4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1bbea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bbee:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1bbf0:	f006 f80c 	bl	21c0c <sys_dlist_remove>
	update_cache(thread == _current);
   1bbf4:	4b04      	ldr	r3, [pc, #16]	; (1bc08 <unready_thread+0x2c>)
   1bbf6:	6898      	ldr	r0, [r3, #8]
   1bbf8:	1a43      	subs	r3, r0, r1
   1bbfa:	4258      	negs	r0, r3
   1bbfc:	4158      	adcs	r0, r3
}
   1bbfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1bc02:	f7ff bfcd 	b.w	1bba0 <update_cache>
   1bc06:	bf00      	nop
   1bc08:	20002d44 	.word	0x20002d44

0001bc0c <pend>:
{
   1bc0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bc10:	4606      	mov	r6, r0
   1bc12:	4615      	mov	r5, r2
   1bc14:	461c      	mov	r4, r3
	__asm__ volatile(
   1bc16:	f04f 0320 	mov.w	r3, #32
   1bc1a:	f3ef 8711 	mrs	r7, BASEPRI
   1bc1e:	f383 8811 	msr	BASEPRI, r3
   1bc22:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1bc26:	f006 f84c 	bl	21cc2 <add_to_waitq_locked>
	__asm__ volatile(
   1bc2a:	f387 8811 	msr	BASEPRI, r7
   1bc2e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bc32:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1bc36:	bf08      	it	eq
   1bc38:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   1bc3c:	d008      	beq.n	1bc50 <pend+0x44>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1bc3e:	462a      	mov	r2, r5
   1bc40:	4623      	mov	r3, r4
   1bc42:	f106 0018 	add.w	r0, r6, #24
   1bc46:	4903      	ldr	r1, [pc, #12]	; (1bc54 <pend+0x48>)
}
   1bc48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1bc4c:	f000 bd1e 	b.w	1c68c <z_add_timeout>
   1bc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bc54:	00021d37 	.word	0x00021d37

0001bc58 <z_pend_curr>:
{
   1bc58:	b510      	push	{r4, lr}
	pending_current = _current;
   1bc5a:	4b07      	ldr	r3, [pc, #28]	; (1bc78 <z_pend_curr+0x20>)
   1bc5c:	6898      	ldr	r0, [r3, #8]
   1bc5e:	4b07      	ldr	r3, [pc, #28]	; (1bc7c <z_pend_curr+0x24>)
{
   1bc60:	460c      	mov	r4, r1
	pending_current = _current;
   1bc62:	6018      	str	r0, [r3, #0]
{
   1bc64:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1bc66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1bc6a:	f7ff ffcf 	bl	1bc0c <pend>
   1bc6e:	4620      	mov	r0, r4
}
   1bc70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1bc74:	f7ea bfc6 	b.w	6c04 <arch_swap>
   1bc78:	20002d44 	.word	0x20002d44
   1bc7c:	20002d78 	.word	0x20002d78

0001bc80 <z_impl_k_thread_suspend>:
{
   1bc80:	b570      	push	{r4, r5, r6, lr}
   1bc82:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1bc84:	3018      	adds	r0, #24
   1bc86:	f006 f9bd 	bl	22004 <z_abort_timeout>
	__asm__ volatile(
   1bc8a:	f04f 0320 	mov.w	r3, #32
   1bc8e:	f3ef 8611 	mrs	r6, BASEPRI
   1bc92:	f383 8811 	msr	BASEPRI, r3
   1bc96:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1bc9a:	f994 200d 	ldrsb.w	r2, [r4, #13]
   1bc9e:	7b63      	ldrb	r3, [r4, #13]
   1bca0:	2a00      	cmp	r2, #0
   1bca2:	da05      	bge.n	1bcb0 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1bca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bca8:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1bcaa:	4620      	mov	r0, r4
   1bcac:	f005 ffae 	bl	21c0c <sys_dlist_remove>
		update_cache(thread == _current);
   1bcb0:	4d0b      	ldr	r5, [pc, #44]	; (1bce0 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1bcb2:	7b63      	ldrb	r3, [r4, #13]
   1bcb4:	68a8      	ldr	r0, [r5, #8]
   1bcb6:	f043 0310 	orr.w	r3, r3, #16
   1bcba:	7363      	strb	r3, [r4, #13]
   1bcbc:	1b03      	subs	r3, r0, r4
   1bcbe:	4258      	negs	r0, r3
   1bcc0:	4158      	adcs	r0, r3
   1bcc2:	f7ff ff6d 	bl	1bba0 <update_cache>
	__asm__ volatile(
   1bcc6:	f386 8811 	msr	BASEPRI, r6
   1bcca:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1bcce:	68ab      	ldr	r3, [r5, #8]
   1bcd0:	42a3      	cmp	r3, r4
   1bcd2:	d103      	bne.n	1bcdc <z_impl_k_thread_suspend+0x5c>
}
   1bcd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1bcd8:	f005 bfe3 	b.w	21ca2 <z_reschedule_unlocked>
}
   1bcdc:	bd70      	pop	{r4, r5, r6, pc}
   1bcde:	bf00      	nop
   1bce0:	20002d44 	.word	0x20002d44

0001bce4 <k_sched_unlock>:
{
   1bce4:	b510      	push	{r4, lr}
	__asm__ volatile(
   1bce6:	f04f 0320 	mov.w	r3, #32
   1bcea:	f3ef 8411 	mrs	r4, BASEPRI
   1bcee:	f383 8811 	msr	BASEPRI, r3
   1bcf2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1bcf6:	4b08      	ldr	r3, [pc, #32]	; (1bd18 <k_sched_unlock+0x34>)
   1bcf8:	689a      	ldr	r2, [r3, #8]
   1bcfa:	7bd3      	ldrb	r3, [r2, #15]
   1bcfc:	3301      	adds	r3, #1
   1bcfe:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1bd00:	2000      	movs	r0, #0
   1bd02:	f7ff ff4d 	bl	1bba0 <update_cache>
	__asm__ volatile(
   1bd06:	f384 8811 	msr	BASEPRI, r4
   1bd0a:	f3bf 8f6f 	isb	sy
}
   1bd0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1bd12:	f005 bfc6 	b.w	21ca2 <z_reschedule_unlocked>
   1bd16:	bf00      	nop
   1bd18:	20002d44 	.word	0x20002d44

0001bd1c <move_thread_to_end_of_prio_q>:
{
   1bd1c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1bd1e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1bd22:	7b43      	ldrb	r3, [r0, #13]
   1bd24:	2a00      	cmp	r2, #0
{
   1bd26:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1bd28:	da04      	bge.n	1bd34 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1bd2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bd2e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1bd30:	f005 ff6c 	bl	21c0c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1bd34:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1bd36:	4a15      	ldr	r2, [pc, #84]	; (1bd8c <move_thread_to_end_of_prio_q+0x70>)
   1bd38:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1bd3c:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1bd3e:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bd42:	f102 0528 	add.w	r5, r2, #40	; 0x28
   1bd46:	42ab      	cmp	r3, r5
   1bd48:	d01b      	beq.n	1bd82 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bd4a:	b1d3      	cbz	r3, 1bd82 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   1bd4c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1bd50:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   1bd54:	4286      	cmp	r6, r0
   1bd56:	d00f      	beq.n	1bd78 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   1bd58:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1bd5a:	2800      	cmp	r0, #0
   1bd5c:	dd0c      	ble.n	1bd78 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1bd5e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1bd60:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1bd64:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1bd66:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1bd68:	6890      	ldr	r0, [r2, #8]
   1bd6a:	1a43      	subs	r3, r0, r1
   1bd6c:	4258      	negs	r0, r3
}
   1bd6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1bd72:	4158      	adcs	r0, r3
   1bd74:	f7ff bf14 	b.w	1bba0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1bd78:	42a3      	cmp	r3, r4
   1bd7a:	d002      	beq.n	1bd82 <move_thread_to_end_of_prio_q+0x66>
   1bd7c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bd7e:	2b00      	cmp	r3, #0
   1bd80:	d1e6      	bne.n	1bd50 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   1bd82:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   1bd86:	6021      	str	r1, [r4, #0]
	list->tail = node;
   1bd88:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   1bd8a:	e7ed      	b.n	1bd68 <move_thread_to_end_of_prio_q+0x4c>
   1bd8c:	20002d44 	.word	0x20002d44

0001bd90 <z_time_slice>:
{
   1bd90:	b538      	push	{r3, r4, r5, lr}
   1bd92:	4601      	mov	r1, r0
	__asm__ volatile(
   1bd94:	f04f 0320 	mov.w	r3, #32
   1bd98:	f3ef 8411 	mrs	r4, BASEPRI
   1bd9c:	f383 8811 	msr	BASEPRI, r3
   1bda0:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1bda4:	4b15      	ldr	r3, [pc, #84]	; (1bdfc <z_time_slice+0x6c>)
   1bda6:	4a16      	ldr	r2, [pc, #88]	; (1be00 <z_time_slice+0x70>)
   1bda8:	6898      	ldr	r0, [r3, #8]
   1bdaa:	6815      	ldr	r5, [r2, #0]
   1bdac:	42a8      	cmp	r0, r5
   1bdae:	d106      	bne.n	1bdbe <z_time_slice+0x2e>
			z_reset_time_slice();
   1bdb0:	f7ff fe8a 	bl	1bac8 <z_reset_time_slice>
	__asm__ volatile(
   1bdb4:	f384 8811 	msr	BASEPRI, r4
   1bdb8:	f3bf 8f6f 	isb	sy
}
   1bdbc:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1bdbe:	2500      	movs	r5, #0
   1bdc0:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1bdc2:	4a10      	ldr	r2, [pc, #64]	; (1be04 <z_time_slice+0x74>)
   1bdc4:	6812      	ldr	r2, [r2, #0]
   1bdc6:	b1ba      	cbz	r2, 1bdf8 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   1bdc8:	89c2      	ldrh	r2, [r0, #14]
   1bdca:	2a7f      	cmp	r2, #127	; 0x7f
   1bdcc:	d814      	bhi.n	1bdf8 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   1bdce:	7b42      	ldrb	r2, [r0, #13]
   1bdd0:	06d2      	lsls	r2, r2, #27
   1bdd2:	d111      	bne.n	1bdf8 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1bdd4:	4a0c      	ldr	r2, [pc, #48]	; (1be08 <z_time_slice+0x78>)
   1bdd6:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1bdda:	6812      	ldr	r2, [r2, #0]
   1bddc:	4295      	cmp	r5, r2
   1bdde:	db0b      	blt.n	1bdf8 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   1bde0:	4a0a      	ldr	r2, [pc, #40]	; (1be0c <z_time_slice+0x7c>)
   1bde2:	4290      	cmp	r0, r2
   1bde4:	d008      	beq.n	1bdf8 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   1bde6:	691a      	ldr	r2, [r3, #16]
   1bde8:	428a      	cmp	r2, r1
   1bdea:	dc02      	bgt.n	1bdf2 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   1bdec:	f7ff ff96 	bl	1bd1c <move_thread_to_end_of_prio_q>
   1bdf0:	e7de      	b.n	1bdb0 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   1bdf2:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   1bdf4:	611a      	str	r2, [r3, #16]
   1bdf6:	e7dd      	b.n	1bdb4 <z_time_slice+0x24>
   1bdf8:	2200      	movs	r2, #0
   1bdfa:	e7fb      	b.n	1bdf4 <z_time_slice+0x64>
   1bdfc:	20002d44 	.word	0x20002d44
   1be00:	20002d78 	.word	0x20002d78
   1be04:	20002d80 	.word	0x20002d80
   1be08:	20002d7c 	.word	0x20002d7c
   1be0c:	20001430 	.word	0x20001430

0001be10 <ready_thread>:
{
   1be10:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1be12:	f990 200d 	ldrsb.w	r2, [r0, #13]
   1be16:	7b43      	ldrb	r3, [r0, #13]
   1be18:	2a00      	cmp	r2, #0
   1be1a:	db2a      	blt.n	1be72 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1be1c:	06da      	lsls	r2, r3, #27
   1be1e:	d128      	bne.n	1be72 <ready_thread+0x62>
   1be20:	6982      	ldr	r2, [r0, #24]
   1be22:	bb32      	cbnz	r2, 1be72 <ready_thread+0x62>
	return list->head == list;
   1be24:	4a14      	ldr	r2, [pc, #80]	; (1be78 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1be26:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1be2a:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   1be2c:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1be30:	f102 0528 	add.w	r5, r2, #40	; 0x28
   1be34:	42ab      	cmp	r3, r5
   1be36:	d017      	beq.n	1be68 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1be38:	b1b3      	cbz	r3, 1be68 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   1be3a:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1be3e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   1be42:	428e      	cmp	r6, r1
   1be44:	d00b      	beq.n	1be5e <ready_thread+0x4e>
		return b2 - b1;
   1be46:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1be48:	2900      	cmp	r1, #0
   1be4a:	dd08      	ble.n	1be5e <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   1be4c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1be4e:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1be52:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1be54:	6058      	str	r0, [r3, #4]
}
   1be56:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1be58:	2000      	movs	r0, #0
   1be5a:	f7ff bea1 	b.w	1bba0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1be5e:	42a3      	cmp	r3, r4
   1be60:	d002      	beq.n	1be68 <ready_thread+0x58>
   1be62:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1be64:	2b00      	cmp	r3, #0
   1be66:	d1ea      	bne.n	1be3e <ready_thread+0x2e>
	node->prev = tail;
   1be68:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   1be6c:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1be6e:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   1be70:	e7f1      	b.n	1be56 <ready_thread+0x46>
}
   1be72:	bc70      	pop	{r4, r5, r6}
   1be74:	4770      	bx	lr
   1be76:	bf00      	nop
   1be78:	20002d44 	.word	0x20002d44

0001be7c <z_sched_start>:
{
   1be7c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1be7e:	f04f 0220 	mov.w	r2, #32
   1be82:	f3ef 8411 	mrs	r4, BASEPRI
   1be86:	f382 8811 	msr	BASEPRI, r2
   1be8a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1be8e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   1be90:	0751      	lsls	r1, r2, #29
   1be92:	d404      	bmi.n	1be9e <z_sched_start+0x22>
	__asm__ volatile(
   1be94:	f384 8811 	msr	BASEPRI, r4
   1be98:	f3bf 8f6f 	isb	sy
}
   1be9c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1be9e:	f022 0204 	bic.w	r2, r2, #4
   1bea2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1bea4:	f7ff ffb4 	bl	1be10 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1bea8:	4621      	mov	r1, r4
   1beaa:	4802      	ldr	r0, [pc, #8]	; (1beb4 <z_sched_start+0x38>)
}
   1beac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1beb0:	f7ff be50 	b.w	1bb54 <z_reschedule>
   1beb4:	2000356c 	.word	0x2000356c

0001beb8 <z_set_prio>:
{
   1beb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1beba:	4604      	mov	r4, r0
	__asm__ volatile(
   1bebc:	f04f 0320 	mov.w	r3, #32
   1bec0:	f3ef 8611 	mrs	r6, BASEPRI
   1bec4:	f383 8811 	msr	BASEPRI, r3
   1bec8:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   1becc:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1bece:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   1bed0:	b249      	sxtb	r1, r1
   1bed2:	d133      	bne.n	1bf3c <z_set_prio+0x84>
		if (need_sched) {
   1bed4:	6982      	ldr	r2, [r0, #24]
   1bed6:	bb8a      	cbnz	r2, 1bf3c <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1bed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bedc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1bede:	f005 fe95 	bl	21c0c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1bee2:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   1bee4:	4a17      	ldr	r2, [pc, #92]	; (1bf44 <z_set_prio+0x8c>)
				thread->base.prio = prio;
   1bee6:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1bee8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1beec:	7343      	strb	r3, [r0, #13]
   1beee:	4610      	mov	r0, r2
   1bef0:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bef4:	4283      	cmp	r3, r0
   1bef6:	d01b      	beq.n	1bf30 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bef8:	b1d3      	cbz	r3, 1bf30 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   1befa:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
	int32_t b2 = thread_2->base.prio;
   1befc:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1bf00:	42a9      	cmp	r1, r5
   1bf02:	d010      	beq.n	1bf26 <z_set_prio+0x6e>
		return b2 - b1;
   1bf04:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1bf06:	2d00      	cmp	r5, #0
   1bf08:	dd0d      	ble.n	1bf26 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   1bf0a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1bf0c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1bf10:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1bf12:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1bf14:	2001      	movs	r0, #1
   1bf16:	f7ff fe43 	bl	1bba0 <update_cache>
   1bf1a:	2001      	movs	r0, #1
	__asm__ volatile(
   1bf1c:	f386 8811 	msr	BASEPRI, r6
   1bf20:	f3bf 8f6f 	isb	sy
}
   1bf24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1bf26:	42bb      	cmp	r3, r7
   1bf28:	d002      	beq.n	1bf30 <z_set_prio+0x78>
   1bf2a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bf2c:	2b00      	cmp	r3, #0
   1bf2e:	d1e5      	bne.n	1befc <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   1bf30:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->prev = tail;
   1bf32:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   1bf36:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1bf38:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   1bf3a:	e7eb      	b.n	1bf14 <z_set_prio+0x5c>
			thread->base.prio = prio;
   1bf3c:	73a1      	strb	r1, [r4, #14]
   1bf3e:	2000      	movs	r0, #0
   1bf40:	e7ec      	b.n	1bf1c <z_set_prio+0x64>
   1bf42:	bf00      	nop
   1bf44:	20002d44 	.word	0x20002d44

0001bf48 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1bf48:	4b04      	ldr	r3, [pc, #16]	; (1bf5c <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1bf4a:	2100      	movs	r1, #0
   1bf4c:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1bf50:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1bf54:	4608      	mov	r0, r1
   1bf56:	f7ff bdcd 	b.w	1baf4 <k_sched_time_slice_set>
   1bf5a:	bf00      	nop
   1bf5c:	20002d44 	.word	0x20002d44

0001bf60 <z_impl_k_yield>:

void z_impl_k_yield(void)
{
	__ASSERT(!arch_is_in_isr(), "");

	if (!z_is_idle_thread_object(_current)) {
   1bf60:	4925      	ldr	r1, [pc, #148]	; (1bff8 <z_impl_k_yield+0x98>)
{
   1bf62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1bf64:	688a      	ldr	r2, [r1, #8]
   1bf66:	4b25      	ldr	r3, [pc, #148]	; (1bffc <z_impl_k_yield+0x9c>)
   1bf68:	429a      	cmp	r2, r3
   1bf6a:	d03b      	beq.n	1bfe4 <z_impl_k_yield+0x84>
	__asm__ volatile(
   1bf6c:	f04f 0320 	mov.w	r3, #32
   1bf70:	f3ef 8511 	mrs	r5, BASEPRI
   1bf74:	f383 8811 	msr	BASEPRI, r3
   1bf78:	f3bf 8f6f 	isb	sy
		k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

		if (!IS_ENABLED(CONFIG_SMP) ||
			z_is_thread_queued(_current)) {
			dequeue_thread(&_kernel.ready_q.runq,
   1bf7c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1bf7e:	7b43      	ldrb	r3, [r0, #13]
   1bf80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bf84:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1bf86:	f005 fe41 	bl	21c0c <sys_dlist_remove>
					_current);
		}
		queue_thread(&_kernel.ready_q.runq, _current);
   1bf8a:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1bf8c:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   1bf8e:	4608      	mov	r0, r1
   1bf90:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1bf94:	735a      	strb	r2, [r3, #13]
   1bf96:	f850 2f28 	ldr.w	r2, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bf9a:	4282      	cmp	r2, r0
   1bf9c:	d01c      	beq.n	1bfd8 <z_impl_k_yield+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bf9e:	b1da      	cbz	r2, 1bfd8 <z_impl_k_yield+0x78>
	return (node == list->tail) ? NULL : node->next;
   1bfa0:	6acf      	ldr	r7, [r1, #44]	; 0x2c
	int32_t b1 = thread_1->base.prio;
   1bfa2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   1bfa6:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   1bfaa:	42a6      	cmp	r6, r4
   1bfac:	d00f      	beq.n	1bfce <z_impl_k_yield+0x6e>
		return b2 - b1;
   1bfae:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1bfb0:	2c00      	cmp	r4, #0
   1bfb2:	dd0c      	ble.n	1bfce <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
   1bfb4:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1bfb6:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   1bfba:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1bfbc:	6053      	str	r3, [r2, #4]
		update_cache(1);
   1bfbe:	2001      	movs	r0, #1
   1bfc0:	f7ff fdee 	bl	1bba0 <update_cache>
   1bfc4:	4628      	mov	r0, r5
		z_swap(&sched_spinlock, key);
	} else {
		z_swap_unlocked();
	}
}
   1bfc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1bfca:	f7ea be1b 	b.w	6c04 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1bfce:	42ba      	cmp	r2, r7
   1bfd0:	d002      	beq.n	1bfd8 <z_impl_k_yield+0x78>
   1bfd2:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bfd4:	2a00      	cmp	r2, #0
   1bfd6:	d1e6      	bne.n	1bfa6 <z_impl_k_yield+0x46>
	sys_dnode_t *const tail = list->tail;
   1bfd8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	node->prev = tail;
   1bfda:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   1bfde:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1bfe0:	62cb      	str	r3, [r1, #44]	; 0x2c
}
   1bfe2:	e7ec      	b.n	1bfbe <z_impl_k_yield+0x5e>
   1bfe4:	f04f 0320 	mov.w	r3, #32
   1bfe8:	f3ef 8011 	mrs	r0, BASEPRI
   1bfec:	f383 8811 	msr	BASEPRI, r3
   1bff0:	f3bf 8f6f 	isb	sy
   1bff4:	e7e7      	b.n	1bfc6 <z_impl_k_yield+0x66>
   1bff6:	bf00      	nop
   1bff8:	20002d44 	.word	0x20002d44
   1bffc:	20001430 	.word	0x20001430

0001c000 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1c000:	ea50 0301 	orrs.w	r3, r0, r1
{
   1c004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c008:	4605      	mov	r5, r0
   1c00a:	460e      	mov	r6, r1
	if (ticks == 0) {
   1c00c:	d104      	bne.n	1c018 <z_tick_sleep+0x18>
	z_impl_k_yield();
   1c00e:	f7ff ffa7 	bl	1bf60 <z_impl_k_yield>
		k_yield();
		return 0;
   1c012:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   1c014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1c018:	f006 f835 	bl	22086 <sys_clock_tick_get_32>
   1c01c:	4604      	mov	r4, r0
   1c01e:	f04f 0320 	mov.w	r3, #32
   1c022:	f3ef 8811 	mrs	r8, BASEPRI
   1c026:	f383 8811 	msr	BASEPRI, r3
   1c02a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1c02e:	4f0f      	ldr	r7, [pc, #60]	; (1c06c <z_tick_sleep+0x6c>)
   1c030:	4b0f      	ldr	r3, [pc, #60]	; (1c070 <z_tick_sleep+0x70>)
   1c032:	68b8      	ldr	r0, [r7, #8]
   1c034:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1c036:	f7ff fdd1 	bl	1bbdc <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1c03a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1c03c:	490d      	ldr	r1, [pc, #52]	; (1c074 <z_tick_sleep+0x74>)
   1c03e:	462a      	mov	r2, r5
   1c040:	4633      	mov	r3, r6
   1c042:	3018      	adds	r0, #24
   1c044:	f000 fb22 	bl	1c68c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1c048:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1c04a:	7b53      	ldrb	r3, [r2, #13]
   1c04c:	f043 0310 	orr.w	r3, r3, #16
   1c050:	7353      	strb	r3, [r2, #13]
   1c052:	4640      	mov	r0, r8
   1c054:	f7ea fdd6 	bl	6c04 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1c058:	f006 f815 	bl	22086 <sys_clock_tick_get_32>
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1c05c:	1962      	adds	r2, r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1c05e:	1a10      	subs	r0, r2, r0
   1c060:	eb63 0303 	sbc.w	r3, r3, r3
   1c064:	2b00      	cmp	r3, #0
   1c066:	bfb8      	it	lt
   1c068:	2000      	movlt	r0, #0
   1c06a:	e7d3      	b.n	1c014 <z_tick_sleep+0x14>
   1c06c:	20002d44 	.word	0x20002d44
   1c070:	20002d78 	.word	0x20002d78
   1c074:	00021d37 	.word	0x00021d37

0001c078 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c078:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1c07c:	bf08      	it	eq
   1c07e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1c082:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c084:	d106      	bne.n	1c094 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1c086:	4b08      	ldr	r3, [pc, #32]	; (1c0a8 <z_impl_k_sleep+0x30>)
   1c088:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1c08a:	f7ff fdf9 	bl	1bc80 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1c08e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   1c092:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1c094:	f7ff ffb4 	bl	1c000 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   1c098:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1c09c:	fb80 0303 	smull	r0, r3, r0, r3
   1c0a0:	0bc0      	lsrs	r0, r0, #15
   1c0a2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1c0a6:	e7f4      	b.n	1c092 <z_impl_k_sleep+0x1a>
   1c0a8:	20002d44 	.word	0x20002d44

0001c0ac <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1c0ac:	4b01      	ldr	r3, [pc, #4]	; (1c0b4 <z_impl_k_current_get+0x8>)
   1c0ae:	6898      	ldr	r0, [r3, #8]
   1c0b0:	4770      	bx	lr
   1c0b2:	bf00      	nop
   1c0b4:	20002d44 	.word	0x20002d44

0001c0b8 <z_impl_k_is_preempt_thread>:
   1c0b8:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   1c0bc:	b93b      	cbnz	r3, 1c0ce <z_impl_k_is_preempt_thread+0x16>
   1c0be:	4b05      	ldr	r3, [pc, #20]	; (1c0d4 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1c0c0:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   1c0c2:	89d8      	ldrh	r0, [r3, #14]
   1c0c4:	287f      	cmp	r0, #127	; 0x7f
   1c0c6:	bf8c      	ite	hi
   1c0c8:	2000      	movhi	r0, #0
   1c0ca:	2001      	movls	r0, #1
   1c0cc:	4770      	bx	lr
   1c0ce:	2000      	movs	r0, #0
}
   1c0d0:	4770      	bx	lr
   1c0d2:	bf00      	nop
   1c0d4:	20002d44 	.word	0x20002d44

0001c0d8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1c0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c0dc:	4604      	mov	r4, r0
   1c0de:	f04f 0320 	mov.w	r3, #32
   1c0e2:	f3ef 8611 	mrs	r6, BASEPRI
   1c0e6:	f383 8811 	msr	BASEPRI, r3
   1c0ea:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1c0ee:	7b43      	ldrb	r3, [r0, #13]
   1c0f0:	071a      	lsls	r2, r3, #28
   1c0f2:	d505      	bpl.n	1c100 <z_thread_abort+0x28>
	__asm__ volatile(
   1c0f4:	f386 8811 	msr	BASEPRI, r6
   1c0f8:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1c0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1c100:	f023 0220 	bic.w	r2, r3, #32
   1c104:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1c108:	09d2      	lsrs	r2, r2, #7
   1c10a:	d120      	bne.n	1c14e <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1c10c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1c10e:	68a3      	ldr	r3, [r4, #8]
   1c110:	b113      	cbz	r3, 1c118 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   1c112:	4620      	mov	r0, r4
   1c114:	f005 fd82 	bl	21c1c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1c118:	f104 0018 	add.w	r0, r4, #24
   1c11c:	f005 ff72 	bl	22004 <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1c120:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1c124:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1c128:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c12a:	42bd      	cmp	r5, r7
   1c12c:	d000      	beq.n	1c130 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1c12e:	b9b5      	cbnz	r5, 1c15e <z_thread_abort+0x86>
		update_cache(1);
   1c130:	2001      	movs	r0, #1
   1c132:	f7ff fd35 	bl	1bba0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1c136:	4b10      	ldr	r3, [pc, #64]	; (1c178 <z_thread_abort+0xa0>)
   1c138:	689b      	ldr	r3, [r3, #8]
   1c13a:	42a3      	cmp	r3, r4
   1c13c:	d1da      	bne.n	1c0f4 <z_thread_abort+0x1c>
   1c13e:	f3ef 8305 	mrs	r3, IPSR
   1c142:	2b00      	cmp	r3, #0
   1c144:	d1d6      	bne.n	1c0f4 <z_thread_abort+0x1c>
   1c146:	4630      	mov	r0, r6
   1c148:	f7ea fd5c 	bl	6c04 <arch_swap>
	return ret;
   1c14c:	e7d2      	b.n	1c0f4 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1c14e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1c152:	f043 0308 	orr.w	r3, r3, #8
   1c156:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1c158:	f005 fd58 	bl	21c0c <sys_dlist_remove>
}
   1c15c:	e7d7      	b.n	1c10e <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   1c15e:	4628      	mov	r0, r5
   1c160:	f005 fd5c 	bl	21c1c <unpend_thread_no_timeout>
   1c164:	f105 0018 	add.w	r0, r5, #24
   1c168:	f005 ff4c 	bl	22004 <z_abort_timeout>
   1c16c:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1c170:	4628      	mov	r0, r5
   1c172:	f7ff fe4d 	bl	1be10 <ready_thread>
   1c176:	e7d7      	b.n	1c128 <z_thread_abort+0x50>
   1c178:	20002d44 	.word	0x20002d44

0001c17c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1c17c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1c17e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1c182:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1c184:	e9cd 6700 	strd	r6, r7, [sp]
   1c188:	f7ff fd66 	bl	1bc58 <z_pend_curr>

	if (data != NULL) {
   1c18c:	b11c      	cbz	r4, 1c196 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1c18e:	4b03      	ldr	r3, [pc, #12]	; (1c19c <z_sched_wait+0x20>)
   1c190:	689b      	ldr	r3, [r3, #8]
   1c192:	695b      	ldr	r3, [r3, #20]
   1c194:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1c196:	b002      	add	sp, #8
   1c198:	bdd0      	pop	{r4, r6, r7, pc}
   1c19a:	bf00      	nop
   1c19c:	20002d44 	.word	0x20002d44

0001c1a0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1c1a0:	b538      	push	{r3, r4, r5, lr}
   1c1a2:	4604      	mov	r4, r0
	__asm__ volatile(
   1c1a4:	f04f 0320 	mov.w	r3, #32
   1c1a8:	f3ef 8511 	mrs	r5, BASEPRI
   1c1ac:	f383 8811 	msr	BASEPRI, r3
   1c1b0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   1c1b4:	f005 fdf6 	bl	21da4 <z_unpend_first_thread>

	if (thread != NULL) {
   1c1b8:	b148      	cbz	r0, 1c1ce <z_impl_k_sem_give+0x2e>
   1c1ba:	2200      	movs	r2, #0
   1c1bc:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1c1be:	f005 fdaa 	bl	21d16 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1c1c2:	4629      	mov	r1, r5
   1c1c4:	4808      	ldr	r0, [pc, #32]	; (1c1e8 <z_impl_k_sem_give+0x48>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   1c1c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1c1ca:	f7ff bcc3 	b.w	1bb54 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1c1ce:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1c1d2:	429a      	cmp	r2, r3
   1c1d4:	bf18      	it	ne
   1c1d6:	3301      	addne	r3, #1
   1c1d8:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1c1da:	2102      	movs	r1, #2
   1c1dc:	f104 0010 	add.w	r0, r4, #16
   1c1e0:	f006 f8d9 	bl	22396 <z_handle_obj_poll_events>
}
   1c1e4:	e7ed      	b.n	1c1c2 <z_impl_k_sem_give+0x22>
   1c1e6:	bf00      	nop
   1c1e8:	2000356c 	.word	0x2000356c

0001c1ec <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1c1ec:	b513      	push	{r0, r1, r4, lr}
   1c1ee:	f04f 0420 	mov.w	r4, #32
   1c1f2:	f3ef 8111 	mrs	r1, BASEPRI
   1c1f6:	f384 8811 	msr	BASEPRI, r4
   1c1fa:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1c1fe:	6884      	ldr	r4, [r0, #8]
   1c200:	b144      	cbz	r4, 1c214 <z_impl_k_sem_take+0x28>
		sem->count--;
   1c202:	3c01      	subs	r4, #1
   1c204:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1c206:	f381 8811 	msr	BASEPRI, r1
   1c20a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1c20e:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1c210:	b002      	add	sp, #8
   1c212:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c214:	ea52 0403 	orrs.w	r4, r2, r3
   1c218:	d106      	bne.n	1c228 <z_impl_k_sem_take+0x3c>
   1c21a:	f381 8811 	msr	BASEPRI, r1
   1c21e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1c222:	f06f 000f 	mvn.w	r0, #15
   1c226:	e7f3      	b.n	1c210 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1c228:	e9cd 2300 	strd	r2, r3, [sp]
   1c22c:	4602      	mov	r2, r0
   1c22e:	4802      	ldr	r0, [pc, #8]	; (1c238 <z_impl_k_sem_take+0x4c>)
   1c230:	f7ff fd12 	bl	1bc58 <z_pend_curr>
	return ret;
   1c234:	e7ec      	b.n	1c210 <z_impl_k_sem_take+0x24>
   1c236:	bf00      	nop
   1c238:	2000356c 	.word	0x2000356c

0001c23c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1c23c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1c23e:	4b09      	ldr	r3, [pc, #36]	; (1c264 <k_sys_work_q_init+0x28>)
   1c240:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1c242:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1c244:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1c246:	9300      	str	r3, [sp, #0]
   1c248:	4907      	ldr	r1, [pc, #28]	; (1c268 <k_sys_work_q_init+0x2c>)
   1c24a:	4808      	ldr	r0, [pc, #32]	; (1c26c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1c24c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1c250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c254:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1c258:	f000 f940 	bl	1c4dc <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1c25c:	4620      	mov	r0, r4
   1c25e:	b004      	add	sp, #16
   1c260:	bd10      	pop	{r4, pc}
   1c262:	bf00      	nop
   1c264:	00025f88 	.word	0x00025f88
   1c268:	20005360 	.word	0x20005360
   1c26c:	200015c0 	.word	0x200015c0

0001c270 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1c270:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1c274:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1c276:	7306      	strb	r6, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1c278:	3207      	adds	r2, #7
	sys_dlist_init(&w->waitq);
   1c27a:	f100 0558 	add.w	r5, r0, #88	; 0x58
   1c27e:	f022 0207 	bic.w	r2, r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
   1c282:	2604      	movs	r6, #4
	list->tail = (sys_dnode_t *)list;
   1c284:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	new_thread->stack_info.size = stack_buf_size;
   1c288:	e9c0 121a 	strd	r1, r2, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1c28c:	2500      	movs	r5, #0
	thread_base->thread_state = (uint8_t)initial_state;
   1c28e:	7346      	strb	r6, [r0, #13]
	stack_ptr = (char *)stack + stack_obj_size;
   1c290:	eb01 0802 	add.w	r8, r1, r2

	thread_base->prio = priority;
   1c294:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1c296:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1c298:	6085      	str	r5, [r0, #8]
	node->prev = NULL;
   1c29a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->prio = priority;
   1c29e:	7386      	strb	r6, [r0, #14]

	thread_base->sched_locked = 0U;
   1c2a0:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1c2a2:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1c2a4:	9202      	str	r2, [sp, #8]
   1c2a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c2a8:	9201      	str	r2, [sp, #4]
   1c2aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c2ac:	9200      	str	r2, [sp, #0]
   1c2ae:	4642      	mov	r2, r8
{
   1c2b0:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1c2b2:	f7ea fd7b 	bl	6dac <arch_new_thread>
	if (!_current) {
   1c2b6:	4b05      	ldr	r3, [pc, #20]	; (1c2cc <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   1c2b8:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1c2ba:	689b      	ldr	r3, [r3, #8]
   1c2bc:	b103      	cbz	r3, 1c2c0 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   1c2be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1c2c0:	6763      	str	r3, [r4, #116]	; 0x74
}
   1c2c2:	4640      	mov	r0, r8
   1c2c4:	b004      	add	sp, #16
   1c2c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c2ca:	bf00      	nop
   1c2cc:	20002d44 	.word	0x20002d44

0001c2d0 <z_impl_k_thread_create>:
{
   1c2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c2d2:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1c2d4:	2700      	movs	r7, #0
   1c2d6:	9705      	str	r7, [sp, #20]
   1c2d8:	9f10      	ldr	r7, [sp, #64]	; 0x40
   1c2da:	9704      	str	r7, [sp, #16]
   1c2dc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   1c2de:	9703      	str	r7, [sp, #12]
   1c2e0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1c2e2:	9702      	str	r7, [sp, #8]
{
   1c2e4:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1c2e8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1c2ea:	9701      	str	r7, [sp, #4]
   1c2ec:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1c2ee:	9700      	str	r7, [sp, #0]
{
   1c2f0:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1c2f2:	f7ff ffbd 	bl	1c270 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1c2f6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1c2fa:	bf08      	it	eq
   1c2fc:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1c300:	d005      	beq.n	1c30e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c302:	ea55 0306 	orrs.w	r3, r5, r6
   1c306:	d105      	bne.n	1c314 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   1c308:	4620      	mov	r0, r4
   1c30a:	f7ff fdb7 	bl	1be7c <z_sched_start>
}
   1c30e:	4620      	mov	r0, r4
   1c310:	b007      	add	sp, #28
   1c312:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1c314:	4903      	ldr	r1, [pc, #12]	; (1c324 <z_impl_k_thread_create+0x54>)
   1c316:	4632      	mov	r2, r6
   1c318:	462b      	mov	r3, r5
   1c31a:	f104 0018 	add.w	r0, r4, #24
   1c31e:	f000 f9b5 	bl	1c68c <z_add_timeout>
   1c322:	e7f4      	b.n	1c30e <z_impl_k_thread_create+0x3e>
   1c324:	00021d37 	.word	0x00021d37

0001c328 <z_init_static_threads>:
{
   1c328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c32c:	4c29      	ldr	r4, [pc, #164]	; (1c3d4 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1c32e:	4d2a      	ldr	r5, [pc, #168]	; (1c3d8 <z_init_static_threads+0xb0>)
{
   1c330:	b087      	sub	sp, #28
   1c332:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1c334:	42ae      	cmp	r6, r5
   1c336:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1c33a:	d30f      	bcc.n	1c35c <z_init_static_threads+0x34>
	k_sched_lock();
   1c33c:	f7ff fc1c 	bl	1bb78 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1c340:	4c24      	ldr	r4, [pc, #144]	; (1c3d4 <z_init_static_threads+0xac>)
   1c342:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1c3dc <z_init_static_threads+0xb4>
   1c346:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1c34a:	f240 37e7 	movw	r7, #999	; 0x3e7
   1c34e:	42ac      	cmp	r4, r5
   1c350:	d320      	bcc.n	1c394 <z_init_static_threads+0x6c>
}
   1c352:	b007      	add	sp, #28
   1c354:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1c358:	f7ff bcc4 	b.w	1bce4 <k_sched_unlock>
		z_setup_new_thread(
   1c35c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c360:	9305      	str	r3, [sp, #20]
   1c362:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1c366:	9304      	str	r3, [sp, #16]
   1c368:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1c36c:	9303      	str	r3, [sp, #12]
   1c36e:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1c372:	9302      	str	r3, [sp, #8]
   1c374:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1c378:	9301      	str	r3, [sp, #4]
   1c37a:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1c37e:	9300      	str	r3, [sp, #0]
   1c380:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1c384:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1c388:	f7ff ff72 	bl	1c270 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1c38c:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1c390:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1c392:	e7ce      	b.n	1c332 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1c394:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c396:	1c5a      	adds	r2, r3, #1
   1c398:	d00d      	beq.n	1c3b6 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   1c39a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1c39e:	2100      	movs	r1, #0
   1c3a0:	4638      	mov	r0, r7
   1c3a2:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c3a6:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1c3aa:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c3ae:	d104      	bne.n	1c3ba <z_init_static_threads+0x92>
	z_sched_start(thread);
   1c3b0:	4640      	mov	r0, r8
   1c3b2:	f7ff fd63 	bl	1be7c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1c3b6:	3430      	adds	r4, #48	; 0x30
   1c3b8:	e7c9      	b.n	1c34e <z_init_static_threads+0x26>
   1c3ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c3be:	2300      	movs	r3, #0
   1c3c0:	f7e4 fb5c 	bl	a7c <__aeabi_uldivmod>
   1c3c4:	4602      	mov	r2, r0
   1c3c6:	460b      	mov	r3, r1
   1c3c8:	f108 0018 	add.w	r0, r8, #24
   1c3cc:	4649      	mov	r1, r9
   1c3ce:	f000 f95d 	bl	1c68c <z_add_timeout>
   1c3d2:	e7f0      	b.n	1c3b6 <z_init_static_threads+0x8e>
   1c3d4:	20000820 	.word	0x20000820
   1c3d8:	20000820 	.word	0x20000820
   1c3dc:	00021d37 	.word	0x00021d37

0001c3e0 <finalize_cancel_locked>:
	*flagp &= ~BIT(bit);
   1c3e0:	68c3      	ldr	r3, [r0, #12]
{
   1c3e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   1c3e6:	4d14      	ldr	r5, [pc, #80]	; (1c438 <finalize_cancel_locked+0x58>)
	*flagp &= ~BIT(bit);
   1c3e8:	f023 0302 	bic.w	r3, r3, #2
   1c3ec:	60c3      	str	r3, [r0, #12]
   1c3ee:	682b      	ldr	r3, [r5, #0]
{
   1c3f0:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1c3f2:	b1f3      	cbz	r3, 1c432 <finalize_cancel_locked+0x52>
	return node->next;
   1c3f4:	2400      	movs	r4, #0
   1c3f6:	681f      	ldr	r7, [r3, #0]
	parent->next = child;
   1c3f8:	46a0      	mov	r8, r4
		if (wc->work == work) {
   1c3fa:	6859      	ldr	r1, [r3, #4]
   1c3fc:	42b1      	cmp	r1, r6
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1c3fe:	461a      	mov	r2, r3
		if (wc->work == work) {
   1c400:	d10c      	bne.n	1c41c <finalize_cancel_locked+0x3c>
	return node->next;
   1c402:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c404:	b97c      	cbnz	r4, 1c426 <finalize_cancel_locked+0x46>
   1c406:	6869      	ldr	r1, [r5, #4]
	list->head = node;
   1c408:	602a      	str	r2, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c40a:	428b      	cmp	r3, r1
   1c40c:	d100      	bne.n	1c410 <finalize_cancel_locked+0x30>
	list->tail = node;
   1c40e:	606a      	str	r2, [r5, #4]
	parent->next = child;
   1c410:	4618      	mov	r0, r3
   1c412:	f840 8b08 	str.w	r8, [r0], #8
	z_impl_k_sem_give(sem);
   1c416:	f7ff fec3 	bl	1c1a0 <z_impl_k_sem_give>
}
   1c41a:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1c41c:	b14f      	cbz	r7, 1c432 <finalize_cancel_locked+0x52>
	return node->next;
   1c41e:	463b      	mov	r3, r7
   1c420:	4614      	mov	r4, r2
   1c422:	683f      	ldr	r7, [r7, #0]
   1c424:	e7e9      	b.n	1c3fa <finalize_cancel_locked+0x1a>
	return list->tail;
   1c426:	6869      	ldr	r1, [r5, #4]
	parent->next = child;
   1c428:	6022      	str	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c42a:	4299      	cmp	r1, r3
	list->tail = node;
   1c42c:	bf08      	it	eq
   1c42e:	606c      	streq	r4, [r5, #4]
}
   1c430:	e7ee      	b.n	1c410 <finalize_cancel_locked+0x30>
}
   1c432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c436:	bf00      	nop
   1c438:	20002d84 	.word	0x20002d84

0001c43c <submit_to_queue_locked>:
{
   1c43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1c43e:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1c440:	079a      	lsls	r2, r3, #30
{
   1c442:	4604      	mov	r4, r0
   1c444:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1c446:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1c44a:	d41f      	bmi.n	1c48c <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1c44c:	075f      	lsls	r7, r3, #29
   1c44e:	d41f      	bmi.n	1c490 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   1c450:	680a      	ldr	r2, [r1, #0]
   1c452:	b90a      	cbnz	r2, 1c458 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1c454:	6882      	ldr	r2, [r0, #8]
   1c456:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1c458:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   1c45a:	bf44      	itt	mi
   1c45c:	68a3      	ldrmi	r3, [r4, #8]
   1c45e:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   1c460:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   1c462:	bf4c      	ite	mi
   1c464:	2502      	movmi	r5, #2
		ret = 1;
   1c466:	2501      	movpl	r5, #1
	if (queue == NULL) {
   1c468:	b37f      	cbz	r7, 1c4ca <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1c46a:	4b1b      	ldr	r3, [pc, #108]	; (1c4d8 <submit_to_queue_locked+0x9c>)
   1c46c:	689b      	ldr	r3, [r3, #8]
   1c46e:	42bb      	cmp	r3, r7
   1c470:	d111      	bne.n	1c496 <submit_to_queue_locked+0x5a>
   1c472:	f005 fcec 	bl	21e4e <k_is_in_isr>
   1c476:	f080 0001 	eor.w	r0, r0, #1
   1c47a:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   1c47c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1c480:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1c482:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1c486:	d523      	bpl.n	1c4d0 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   1c488:	b13a      	cbz	r2, 1c49a <submit_to_queue_locked+0x5e>
   1c48a:	b940      	cbnz	r0, 1c49e <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   1c48c:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   1c490:	2300      	movs	r3, #0
   1c492:	6033      	str	r3, [r6, #0]
	return ret;
   1c494:	e013      	b.n	1c4be <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1c496:	2000      	movs	r0, #0
   1c498:	e7f0      	b.n	1c47c <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   1c49a:	071b      	lsls	r3, r3, #28
   1c49c:	d4f6      	bmi.n	1c48c <submit_to_queue_locked+0x50>
	parent->next = child;
   1c49e:	2300      	movs	r3, #0
   1c4a0:	6023      	str	r3, [r4, #0]
	return list->tail;
   1c4a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
Z_GENLIST_APPEND(slist, snode)
   1c4a6:	b963      	cbnz	r3, 1c4c2 <submit_to_queue_locked+0x86>
	list->head = node;
   1c4a8:	e9c7 4432 	strd	r4, r4, [r7, #200]	; 0xc8
		(void)notify_queue_locked(queue);
   1c4ac:	4638      	mov	r0, r7
   1c4ae:	f005 fcf8 	bl	21ea2 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1c4b2:	68e3      	ldr	r3, [r4, #12]
   1c4b4:	f043 0304 	orr.w	r3, r3, #4
   1c4b8:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1c4ba:	6833      	ldr	r3, [r6, #0]
   1c4bc:	60a3      	str	r3, [r4, #8]
}
   1c4be:	4628      	mov	r0, r5
   1c4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1c4c2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c4c4:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
}
   1c4c8:	e7f0      	b.n	1c4ac <submit_to_queue_locked+0x70>
		return -EINVAL;
   1c4ca:	f06f 0515 	mvn.w	r5, #21
   1c4ce:	e7df      	b.n	1c490 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   1c4d0:	f06f 0512 	mvn.w	r5, #18
   1c4d4:	e7dc      	b.n	1c490 <submit_to_queue_locked+0x54>
   1c4d6:	bf00      	nop
   1c4d8:	20002d44 	.word	0x20002d44

0001c4dc <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1c4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c4de:	b089      	sub	sp, #36	; 0x24
   1c4e0:	4604      	mov	r4, r0
	list->head = NULL;
   1c4e2:	2000      	movs	r0, #0
	list->tail = NULL;
   1c4e4:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8
   1c4e8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1c4ea:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
	list->tail = (sys_dnode_t *)list;
   1c4ee:	e9c4 0034 	strd	r0, r0, [r4, #208]	; 0xd0
   1c4f2:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1c4f6:	e9c4 0036 	strd	r0, r0, [r4, #216]	; 0xd8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1c4fa:	b31d      	cbz	r5, 1c544 <k_work_queue_start+0x68>
   1c4fc:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1c4fe:	2800      	cmp	r0, #0
   1c500:	f240 1001 	movw	r0, #257	; 0x101
   1c504:	bf08      	it	eq
   1c506:	2001      	moveq	r0, #1
	*flagp = flags;
   1c508:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1c50c:	2000      	movs	r0, #0
   1c50e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1c512:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1c516:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1c51a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1c51e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1c522:	4b09      	ldr	r3, [pc, #36]	; (1c548 <k_work_queue_start+0x6c>)
   1c524:	9400      	str	r4, [sp, #0]
   1c526:	4620      	mov	r0, r4
   1c528:	f7ff fed2 	bl	1c2d0 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1c52c:	b125      	cbz	r5, 1c538 <k_work_queue_start+0x5c>
   1c52e:	6829      	ldr	r1, [r5, #0]
   1c530:	b111      	cbz	r1, 1c538 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1c532:	4620      	mov	r0, r4
   1c534:	f005 fc95 	bl	21e62 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1c538:	4620      	mov	r0, r4
		k_thread_name_set(&queue->thread, cfg->name);
	}

	k_thread_start(&queue->thread);
}
   1c53a:	b009      	add	sp, #36	; 0x24
   1c53c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1c540:	f005 bc94 	b.w	21e6c <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1c544:	2001      	movs	r0, #1
   1c546:	e7df      	b.n	1c508 <k_work_queue_start+0x2c>
   1c548:	000048e9 	.word	0x000048e9

0001c54c <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1c54c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c54e:	460c      	mov	r4, r1
   1c550:	9001      	str	r0, [sp, #4]
   1c552:	4616      	mov	r6, r2
   1c554:	461d      	mov	r5, r3
	__asm__ volatile(
   1c556:	f04f 0320 	mov.w	r3, #32
   1c55a:	f3ef 8711 	mrs	r7, BASEPRI
   1c55e:	f383 8811 	msr	BASEPRI, r3
   1c562:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1c566:	4608      	mov	r0, r1
   1c568:	f005 fc8d 	bl	21e86 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c56c:	ea55 0306 	orrs.w	r3, r5, r6
   1c570:	d109      	bne.n	1c586 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1c572:	a901      	add	r1, sp, #4
   1c574:	4620      	mov	r0, r4
   1c576:	f7ff ff61 	bl	1c43c <submit_to_queue_locked>
	__asm__ volatile(
   1c57a:	f387 8811 	msr	BASEPRI, r7
   1c57e:	f3bf 8f6f 	isb	sy
	ret = schedule_for_queue_locked(&queue, dwork, delay);

	k_spin_unlock(&lock, key);

	return ret;
}
   1c582:	b003      	add	sp, #12
   1c584:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1c586:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1c588:	4906      	ldr	r1, [pc, #24]	; (1c5a4 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1c58a:	f043 0308 	orr.w	r3, r3, #8
   1c58e:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1c590:	9b01      	ldr	r3, [sp, #4]
   1c592:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1c594:	f104 0010 	add.w	r0, r4, #16
   1c598:	4632      	mov	r2, r6
   1c59a:	462b      	mov	r3, r5
   1c59c:	f000 f876 	bl	1c68c <z_add_timeout>
	return ret;
   1c5a0:	2001      	movs	r0, #1
   1c5a2:	e7ea      	b.n	1c57a <k_work_reschedule_for_queue+0x2e>
   1c5a4:	00021f13 	.word	0x00021f13

0001c5a8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1c5a8:	4a02      	ldr	r2, [pc, #8]	; (1c5b4 <boot_banner+0xc>)
   1c5aa:	4903      	ldr	r1, [pc, #12]	; (1c5b8 <boot_banner+0x10>)
   1c5ac:	4803      	ldr	r0, [pc, #12]	; (1c5bc <boot_banner+0x14>)
   1c5ae:	f000 bd41 	b.w	1d034 <printk>
   1c5b2:	bf00      	nop
   1c5b4:	00024149 	.word	0x00024149
   1c5b8:	00025f91 	.word	0x00025f91
   1c5bc:	00025fb2 	.word	0x00025fb2

0001c5c0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1c5c0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1c5c2:	4806      	ldr	r0, [pc, #24]	; (1c5dc <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1c5c4:	4a06      	ldr	r2, [pc, #24]	; (1c5e0 <z_data_copy+0x20>)
   1c5c6:	4907      	ldr	r1, [pc, #28]	; (1c5e4 <z_data_copy+0x24>)
   1c5c8:	1a12      	subs	r2, r2, r0
   1c5ca:	f002 ff85 	bl	1f4d8 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1c5ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1c5d2:	4a05      	ldr	r2, [pc, #20]	; (1c5e8 <z_data_copy+0x28>)
   1c5d4:	4905      	ldr	r1, [pc, #20]	; (1c5ec <z_data_copy+0x2c>)
   1c5d6:	4806      	ldr	r0, [pc, #24]	; (1c5f0 <z_data_copy+0x30>)
   1c5d8:	f002 bf7e 	b.w	1f4d8 <memcpy>
   1c5dc:	20000000 	.word	0x20000000
   1c5e0:	20000a08 	.word	0x20000a08
   1c5e4:	00025fdc 	.word	0x00025fdc
   1c5e8:	00000000 	.word	0x00000000
   1c5ec:	00025fdc 	.word	0x00025fdc
   1c5f0:	20000000 	.word	0x20000000

0001c5f4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1c5f4:	4b03      	ldr	r3, [pc, #12]	; (1c604 <elapsed+0x10>)
   1c5f6:	681b      	ldr	r3, [r3, #0]
   1c5f8:	b90b      	cbnz	r3, 1c5fe <elapsed+0xa>
   1c5fa:	f7ea b8f3 	b.w	67e4 <sys_clock_elapsed>
}
   1c5fe:	2000      	movs	r0, #0
   1c600:	4770      	bx	lr
   1c602:	bf00      	nop
   1c604:	20002d8c 	.word	0x20002d8c

0001c608 <next_timeout>:
	return list->head == list;
   1c608:	4b11      	ldr	r3, [pc, #68]	; (1c650 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   1c60a:	b510      	push	{r4, lr}
   1c60c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c60e:	429c      	cmp	r4, r3
   1c610:	bf08      	it	eq
   1c612:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1c614:	f7ff ffee 	bl	1c5f4 <elapsed>
   1c618:	4602      	mov	r2, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1c61a:	b16c      	cbz	r4, 1c638 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1c61c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1c620:	1a80      	subs	r0, r0, r2
   1c622:	eb61 72e2 	sbc.w	r2, r1, r2, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1c626:	2801      	cmp	r0, #1
   1c628:	f172 0300 	sbcs.w	r3, r2, #0
   1c62c:	db0d      	blt.n	1c64a <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1c62e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   1c632:	f172 0300 	sbcs.w	r3, r2, #0
   1c636:	db01      	blt.n	1c63c <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   1c638:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1c63c:	4b05      	ldr	r3, [pc, #20]	; (1c654 <next_timeout+0x4c>)
   1c63e:	691b      	ldr	r3, [r3, #16]
   1c640:	b113      	cbz	r3, 1c648 <next_timeout+0x40>
   1c642:	4298      	cmp	r0, r3
   1c644:	bfa8      	it	ge
   1c646:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1c648:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1c64a:	2000      	movs	r0, #0
   1c64c:	e7f6      	b.n	1c63c <next_timeout+0x34>
   1c64e:	bf00      	nop
   1c650:	20000644 	.word	0x20000644
   1c654:	20002d44 	.word	0x20002d44

0001c658 <remove_timeout>:
{
   1c658:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   1c65a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c65c:	b168      	cbz	r0, 1c67a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1c65e:	4a0a      	ldr	r2, [pc, #40]	; (1c688 <remove_timeout+0x30>)
   1c660:	6852      	ldr	r2, [r2, #4]
   1c662:	4290      	cmp	r0, r2
   1c664:	d009      	beq.n	1c67a <remove_timeout+0x22>
	if (next(t) != NULL) {
   1c666:	b143      	cbz	r3, 1c67a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1c668:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1c66c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1c670:	1912      	adds	r2, r2, r4
   1c672:	eb41 0105 	adc.w	r1, r1, r5
   1c676:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1c67a:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1c67c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1c67e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c680:	2300      	movs	r3, #0
	node->prev = NULL;
   1c682:	e9c0 3300 	strd	r3, r3, [r0]
}
   1c686:	bd30      	pop	{r4, r5, pc}
   1c688:	20000644 	.word	0x20000644

0001c68c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c68c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c690:	bf08      	it	eq
   1c692:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1c696:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c69a:	4605      	mov	r5, r0
   1c69c:	460e      	mov	r6, r1
   1c69e:	4691      	mov	r9, r2
   1c6a0:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c6a2:	d066      	beq.n	1c772 <z_add_timeout+0xe6>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;
   1c6a4:	1c57      	adds	r7, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1c6a6:	f06f 0a01 	mvn.w	sl, #1
	k_ticks_t ticks = timeout.ticks + 1;
   1c6aa:	f143 0400 	adc.w	r4, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1c6ae:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   1c6b2:	ebba 0307 	subs.w	r3, sl, r7
   1c6b6:	eb6b 0304 	sbc.w	r3, fp, r4
   1c6ba:	2b00      	cmp	r3, #0
   1c6bc:	db0f      	blt.n	1c6de <z_add_timeout+0x52>
		ticks = Z_TICK_ABS(timeout.ticks) - (curr_tick + elapsed());
   1c6be:	f7ff ff99 	bl	1c5f4 <elapsed>
   1c6c2:	4b31      	ldr	r3, [pc, #196]	; (1c788 <z_add_timeout+0xfc>)
   1c6c4:	e9d3 2400 	ldrd	r2, r4, [r3]
   1c6c8:	ebba 0202 	subs.w	r2, sl, r2
   1c6cc:	eb6b 0404 	sbc.w	r4, fp, r4
   1c6d0:	ebb2 0209 	subs.w	r2, r2, r9
   1c6d4:	eb64 0408 	sbc.w	r4, r4, r8
   1c6d8:	1a17      	subs	r7, r2, r0
   1c6da:	eb64 74e0 	sbc.w	r4, r4, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1c6de:	60ae      	str	r6, [r5, #8]
	__asm__ volatile(
   1c6e0:	f04f 0320 	mov.w	r3, #32
   1c6e4:	f3ef 8611 	mrs	r6, BASEPRI
   1c6e8:	f383 8811 	msr	BASEPRI, r3
   1c6ec:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1c6f0:	f7ff ff80 	bl	1c5f4 <elapsed>
	ticks = MAX(1, ticks);
   1c6f4:	463a      	mov	r2, r7
   1c6f6:	2f01      	cmp	r7, #1
	return list->head == list;
   1c6f8:	4f24      	ldr	r7, [pc, #144]	; (1c78c <z_add_timeout+0x100>)
   1c6fa:	f174 0300 	sbcs.w	r3, r4, #0
   1c6fe:	bfb8      	it	lt
   1c700:	2201      	movlt	r2, #1
   1c702:	683b      	ldr	r3, [r7, #0]
   1c704:	bfb8      	it	lt
   1c706:	2400      	movlt	r4, #0
		to->dticks = ticks + elapsed();
   1c708:	1812      	adds	r2, r2, r0
   1c70a:	eb44 74e0 	adc.w	r4, r4, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c70e:	42bb      	cmp	r3, r7
   1c710:	e9c5 2404 	strd	r2, r4, [r5, #16]
   1c714:	d002      	beq.n	1c71c <z_add_timeout+0x90>
	return (node == list->tail) ? NULL : node->next;
   1c716:	f8d7 c004 	ldr.w	ip, [r7, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1c71a:	b92b      	cbnz	r3, 1c728 <z_add_timeout+0x9c>
	sys_dnode_t *const tail = list->tail;
   1c71c:	687b      	ldr	r3, [r7, #4]
	node->prev = tail;
   1c71e:	e9c5 7300 	strd	r7, r3, [r5]
	tail->next = node;
   1c722:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1c724:	607d      	str	r5, [r7, #4]
}
   1c726:	e011      	b.n	1c74c <z_add_timeout+0xc0>
			if (t->dticks > to->dticks) {
   1c728:	e9d3 1404 	ldrd	r1, r4, [r3, #16]
   1c72c:	e9d5 2004 	ldrd	r2, r0, [r5, #16]
   1c730:	428a      	cmp	r2, r1
   1c732:	eb70 0e04 	sbcs.w	lr, r0, r4
   1c736:	da1e      	bge.n	1c776 <z_add_timeout+0xea>
				t->dticks -= to->dticks;
   1c738:	1a8a      	subs	r2, r1, r2
   1c73a:	eb64 0000 	sbc.w	r0, r4, r0
   1c73e:	e9c3 2004 	strd	r2, r0, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1c742:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1c744:	e9c5 3200 	strd	r3, r2, [r5]
	prev->next = node;
   1c748:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   1c74a:	605d      	str	r5, [r3, #4]
	return list->head == list;
   1c74c:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c74e:	42bb      	cmp	r3, r7
   1c750:	d00b      	beq.n	1c76a <z_add_timeout+0xde>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1c752:	429d      	cmp	r5, r3
   1c754:	d109      	bne.n	1c76a <z_add_timeout+0xde>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1c756:	f7ff ff57 	bl	1c608 <next_timeout>

			if (next_time == 0 ||
   1c75a:	b118      	cbz	r0, 1c764 <z_add_timeout+0xd8>
			    _current_cpu->slice_ticks != next_time) {
   1c75c:	4b0c      	ldr	r3, [pc, #48]	; (1c790 <z_add_timeout+0x104>)
			if (next_time == 0 ||
   1c75e:	691b      	ldr	r3, [r3, #16]
   1c760:	4283      	cmp	r3, r0
   1c762:	d002      	beq.n	1c76a <z_add_timeout+0xde>
				sys_clock_set_timeout(next_time, false);
   1c764:	2100      	movs	r1, #0
   1c766:	f7ea f80b 	bl	6780 <sys_clock_set_timeout>
	__asm__ volatile(
   1c76a:	f386 8811 	msr	BASEPRI, r6
   1c76e:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1c772:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   1c776:	1a52      	subs	r2, r2, r1
   1c778:	eb60 0004 	sbc.w	r0, r0, r4
	return (node == list->tail) ? NULL : node->next;
   1c77c:	4563      	cmp	r3, ip
   1c77e:	e9c5 2004 	strd	r2, r0, [r5, #16]
   1c782:	d0cb      	beq.n	1c71c <z_add_timeout+0x90>
   1c784:	681b      	ldr	r3, [r3, #0]
   1c786:	e7c8      	b.n	1c71a <z_add_timeout+0x8e>
   1c788:	200016a8 	.word	0x200016a8
   1c78c:	20000644 	.word	0x20000644
   1c790:	20002d44 	.word	0x20002d44

0001c794 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1c794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c798:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1c79a:	f7ff faf9 	bl	1bd90 <z_time_slice>
	__asm__ volatile(
   1c79e:	f04f 0320 	mov.w	r3, #32
   1c7a2:	f3ef 8411 	mrs	r4, BASEPRI
   1c7a6:	f383 8811 	msr	BASEPRI, r3
   1c7aa:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1c7ae:	4e24      	ldr	r6, [pc, #144]	; (1c840 <sys_clock_announce+0xac>)
	return list->head == list;
   1c7b0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1c848 <sys_clock_announce+0xb4>
   1c7b4:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1c7b6:	4d23      	ldr	r5, [pc, #140]	; (1c844 <sys_clock_announce+0xb0>)
   1c7b8:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1c7bc:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c7be:	4540      	cmp	r0, r8
		curr_tick += dt;
   1c7c0:	e9d5 1e00 	ldrd	r1, lr, [r5]
   1c7c4:	ea4f 77e2 	mov.w	r7, r2, asr #31
   1c7c8:	d00b      	beq.n	1c7e2 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1c7ca:	b150      	cbz	r0, 1c7e2 <sys_clock_announce+0x4e>
   1c7cc:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   1c7d0:	429a      	cmp	r2, r3
   1c7d2:	eb77 090c 	sbcs.w	r9, r7, ip
   1c7d6:	da16      	bge.n	1c806 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1c7d8:	1a9b      	subs	r3, r3, r2
   1c7da:	eb6c 0c07 	sbc.w	ip, ip, r7
   1c7de:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   1c7e2:	1852      	adds	r2, r2, r1
   1c7e4:	eb4e 0707 	adc.w	r7, lr, r7
   1c7e8:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   1c7ec:	2500      	movs	r5, #0
   1c7ee:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1c7f0:	f7ff ff0a 	bl	1c608 <next_timeout>
   1c7f4:	4629      	mov	r1, r5
   1c7f6:	f7e9 ffc3 	bl	6780 <sys_clock_set_timeout>
	__asm__ volatile(
   1c7fa:	f384 8811 	msr	BASEPRI, r4
   1c7fe:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1c802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1c806:	1859      	adds	r1, r3, r1
   1c808:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   1c80c:	1ad3      	subs	r3, r2, r3
   1c80e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1c810:	2200      	movs	r2, #0
   1c812:	2300      	movs	r3, #0
   1c814:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   1c818:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   1c81c:	f7ff ff1c 	bl	1c658 <remove_timeout>
   1c820:	f384 8811 	msr	BASEPRI, r4
   1c824:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1c828:	6883      	ldr	r3, [r0, #8]
   1c82a:	4798      	blx	r3
	__asm__ volatile(
   1c82c:	f04f 0320 	mov.w	r3, #32
   1c830:	f3ef 8411 	mrs	r4, BASEPRI
   1c834:	f383 8811 	msr	BASEPRI, r3
   1c838:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1c83c:	e7bc      	b.n	1c7b8 <sys_clock_announce+0x24>
   1c83e:	bf00      	nop
   1c840:	20002d8c 	.word	0x20002d8c
   1c844:	200016a8 	.word	0x200016a8
   1c848:	20000644 	.word	0x20000644

0001c84c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1c84c:	b510      	push	{r4, lr}
   1c84e:	f04f 0320 	mov.w	r3, #32
   1c852:	f3ef 8411 	mrs	r4, BASEPRI
   1c856:	f383 8811 	msr	BASEPRI, r3
   1c85a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1c85e:	f7e9 ffc1 	bl	67e4 <sys_clock_elapsed>
   1c862:	4a05      	ldr	r2, [pc, #20]	; (1c878 <sys_clock_tick_get+0x2c>)
   1c864:	e9d2 3100 	ldrd	r3, r1, [r2]
   1c868:	18c0      	adds	r0, r0, r3
   1c86a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   1c86e:	f384 8811 	msr	BASEPRI, r4
   1c872:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1c876:	bd10      	pop	{r4, pc}
   1c878:	200016a8 	.word	0x200016a8

0001c87c <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1c87c:	b538      	push	{r3, r4, r5, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1c87e:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   1c882:	3301      	adds	r3, #1
   1c884:	f142 0200 	adc.w	r2, r2, #0
   1c888:	2b02      	cmp	r3, #2
   1c88a:	f172 0300 	sbcs.w	r3, r2, #0
{
   1c88e:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1c890:	d304      	bcc.n	1c89c <z_timer_expiration_handler+0x20>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c892:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1c896:	490d      	ldr	r1, [pc, #52]	; (1c8cc <z_timer_expiration_handler+0x50>)
   1c898:	f7ff fef8 	bl	1c68c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1c89c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1c89e:	3301      	adds	r3, #1
   1c8a0:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1c8a2:	6a23      	ldr	r3, [r4, #32]
   1c8a4:	b10b      	cbz	r3, 1c8aa <z_timer_expiration_handler+0x2e>
		timer->expiry_fn(timer);
   1c8a6:	4620      	mov	r0, r4
   1c8a8:	4798      	blx	r3
	return list->head == list;
   1c8aa:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c8ae:	42a5      	cmp	r5, r4
   1c8b0:	d00a      	beq.n	1c8c8 <z_timer_expiration_handler+0x4c>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1c8b2:	b14d      	cbz	r5, 1c8c8 <z_timer_expiration_handler+0x4c>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1c8b4:	4628      	mov	r0, r5
   1c8b6:	f005 f9c4 	bl	21c42 <z_unpend_thread_no_timeout>
   1c8ba:	2300      	movs	r3, #0
   1c8bc:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
   1c8be:	4628      	mov	r0, r5
}
   1c8c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
   1c8c4:	f005 ba27 	b.w	21d16 <z_ready_thread>
}
   1c8c8:	bd38      	pop	{r3, r4, r5, pc}
   1c8ca:	bf00      	nop
   1c8cc:	0001c87d 	.word	0x0001c87d

0001c8d0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1c8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1c8d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c8d8:	bf08      	it	eq
   1c8da:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1c8de:	4605      	mov	r5, r0
   1c8e0:	4690      	mov	r8, r2
   1c8e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1c8e6:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1c8e8:	d03c      	beq.n	1c964 <z_impl_k_timer_start+0x94>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1c8ea:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1c8ee:	bf08      	it	eq
   1c8f0:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   1c8f4:	4604      	mov	r4, r0
   1c8f6:	460e      	mov	r6, r1
   1c8f8:	d013      	beq.n	1c922 <z_impl_k_timer_start+0x52>
   1c8fa:	4308      	orrs	r0, r1
   1c8fc:	d011      	beq.n	1c922 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
   1c8fe:	f06f 0001 	mvn.w	r0, #1
   1c902:	1b00      	subs	r0, r0, r4
   1c904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c908:	eb60 0001 	sbc.w	r0, r0, r1
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1c90c:	2800      	cmp	r0, #0
   1c90e:	da08      	bge.n	1c922 <z_impl_k_timer_start+0x52>
		period.ticks = MAX(period.ticks - 1, 1);
   1c910:	3c01      	subs	r4, #1
   1c912:	f161 0600 	sbc.w	r6, r1, #0
   1c916:	2c01      	cmp	r4, #1
   1c918:	f176 0100 	sbcs.w	r1, r6, #0
   1c91c:	bfbc      	itt	lt
   1c91e:	2401      	movlt	r4, #1
   1c920:	2600      	movlt	r6, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1c922:	f06f 0101 	mvn.w	r1, #1
   1c926:	1a89      	subs	r1, r1, r2
   1c928:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c92c:	eb61 0103 	sbc.w	r1, r1, r3
   1c930:	2900      	cmp	r1, #0
   1c932:	da08      	bge.n	1c946 <z_impl_k_timer_start+0x76>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1c934:	3a01      	subs	r2, #1
   1c936:	f163 0700 	sbc.w	r7, r3, #0
   1c93a:	2f00      	cmp	r7, #0
   1c93c:	4690      	mov	r8, r2
   1c93e:	bfbc      	itt	lt
   1c940:	f04f 0800 	movlt.w	r8, #0
   1c944:	4647      	movlt	r7, r8
	}

	(void)z_abort_timeout(&timer->timeout);
   1c946:	4628      	mov	r0, r5
   1c948:	f005 fb5c 	bl	22004 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1c94c:	2300      	movs	r3, #0
   1c94e:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
   1c950:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c954:	4642      	mov	r2, r8
   1c956:	463b      	mov	r3, r7
   1c958:	4628      	mov	r0, r5
   1c95a:	4903      	ldr	r1, [pc, #12]	; (1c968 <z_impl_k_timer_start+0x98>)
		     duration);
}
   1c95c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c960:	f7ff be94 	b.w	1c68c <z_add_timeout>
}
   1c964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c968:	0001c87d 	.word	0x0001c87d

0001c96c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1c96c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1c970:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1c972:	4b29      	ldr	r3, [pc, #164]	; (1ca18 <z_impl_k_poll+0xac>)
   1c974:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   1c976:	2301      	movs	r3, #1
   1c978:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   1c97c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   1c980:	ea52 0305 	orrs.w	r3, r2, r5
{
   1c984:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1c986:	bf0c      	ite	eq
   1c988:	2301      	moveq	r3, #1
   1c98a:	2300      	movne	r3, #0
   1c98c:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   1c990:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1c992:	f005 fc07 	bl	221a4 <register_events>
   1c996:	4681      	mov	r9, r0
	__asm__ volatile(
   1c998:	f04f 0320 	mov.w	r3, #32
   1c99c:	f3ef 8a11 	mrs	sl, BASEPRI
   1c9a0:	f383 8811 	msr	BASEPRI, r3
   1c9a4:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1c9a8:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   1c9ac:	b964      	cbnz	r4, 1c9c8 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1c9ae:	4601      	mov	r1, r0
   1c9b0:	4652      	mov	r2, sl
   1c9b2:	4640      	mov	r0, r8
   1c9b4:	f005 fcb3 	bl	2231e <clear_event_registrations>
	__asm__ volatile(
   1c9b8:	f38a 8811 	msr	BASEPRI, sl
   1c9bc:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   1c9c0:	4620      	mov	r0, r4
   1c9c2:	b002      	add	sp, #8
   1c9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1c9c8:	2300      	movs	r3, #0
   1c9ca:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c9ce:	ea56 0305 	orrs.w	r3, r6, r5
   1c9d2:	d106      	bne.n	1c9e2 <z_impl_k_poll+0x76>
   1c9d4:	f38a 8811 	msr	BASEPRI, sl
   1c9d8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1c9dc:	f06f 040a 	mvn.w	r4, #10
   1c9e0:	e7ee      	b.n	1c9c0 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c9e2:	e9cd 6500 	strd	r6, r5, [sp]
   1c9e6:	4a0d      	ldr	r2, [pc, #52]	; (1ca1c <z_impl_k_poll+0xb0>)
   1c9e8:	480d      	ldr	r0, [pc, #52]	; (1ca20 <z_impl_k_poll+0xb4>)
   1c9ea:	4651      	mov	r1, sl
   1c9ec:	f7ff f934 	bl	1bc58 <z_pend_curr>
   1c9f0:	4604      	mov	r4, r0
	__asm__ volatile(
   1c9f2:	f04f 0320 	mov.w	r3, #32
   1c9f6:	f3ef 8511 	mrs	r5, BASEPRI
   1c9fa:	f383 8811 	msr	BASEPRI, r3
   1c9fe:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1ca02:	462a      	mov	r2, r5
   1ca04:	4649      	mov	r1, r9
   1ca06:	4640      	mov	r0, r8
   1ca08:	f005 fc89 	bl	2231e <clear_event_registrations>
	__asm__ volatile(
   1ca0c:	f385 8811 	msr	BASEPRI, r5
   1ca10:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1ca14:	e7d4      	b.n	1c9c0 <z_impl_k_poll+0x54>
   1ca16:	bf00      	nop
   1ca18:	20002d44 	.word	0x20002d44
   1ca1c:	2000064c 	.word	0x2000064c
   1ca20:	2000356c 	.word	0x2000356c

0001ca24 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1ca24:	b538      	push	{r3, r4, r5, lr}
   1ca26:	4603      	mov	r3, r0
	__asm__ volatile(
   1ca28:	f04f 0220 	mov.w	r2, #32
   1ca2c:	f3ef 8511 	mrs	r5, BASEPRI
   1ca30:	f382 8811 	msr	BASEPRI, r2
   1ca34:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1ca38:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1ca3a:	2101      	movs	r1, #1
   1ca3c:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1ca3e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1ca40:	4283      	cmp	r3, r0
   1ca42:	d106      	bne.n	1ca52 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1ca44:	f385 8811 	msr	BASEPRI, r5
   1ca48:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   1ca4c:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   1ca4e:	4620      	mov	r0, r4
   1ca50:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1ca52:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1ca56:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1ca58:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1ca5a:	2300      	movs	r3, #0
	node->prev = NULL;
   1ca5c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1ca60:	f005 fc01 	bl	22266 <signal_poll_event>
	z_reschedule(&lock, key);
   1ca64:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1ca66:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1ca68:	4801      	ldr	r0, [pc, #4]	; (1ca70 <z_impl_k_poll_signal_raise+0x4c>)
   1ca6a:	f7ff f873 	bl	1bb54 <z_reschedule>
	return rc;
   1ca6e:	e7ee      	b.n	1ca4e <z_impl_k_poll_signal_raise+0x2a>
   1ca70:	2000356c 	.word	0x2000356c

0001ca74 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1ca74:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1ca76:	4606      	mov	r6, r0
   1ca78:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1ca7a:	f005 f9e8 	bl	21e4e <k_is_in_isr>
   1ca7e:	b978      	cbnz	r0, 1caa0 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1ca80:	4b0b      	ldr	r3, [pc, #44]	; (1cab0 <z_thread_aligned_alloc+0x3c>)
   1ca82:	689b      	ldr	r3, [r3, #8]
   1ca84:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1ca86:	b17c      	cbz	r4, 1caa8 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1ca88:	1d2a      	adds	r2, r5, #4
   1ca8a:	d209      	bcs.n	1caa0 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1ca8c:	2000      	movs	r0, #0
   1ca8e:	2100      	movs	r1, #0
   1ca90:	e9cd 0100 	strd	r0, r1, [sp]
   1ca94:	f046 0104 	orr.w	r1, r6, #4
   1ca98:	4620      	mov	r0, r4
   1ca9a:	f004 ff69 	bl	21970 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1ca9e:	b908      	cbnz	r0, 1caa4 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1caa0:	2400      	movs	r4, #0
	}

	return ret;
   1caa2:	e001      	b.n	1caa8 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   1caa4:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1caa6:	1d04      	adds	r4, r0, #4
}
   1caa8:	4620      	mov	r0, r4
   1caaa:	b002      	add	sp, #8
   1caac:	bd70      	pop	{r4, r5, r6, pc}
   1caae:	bf00      	nop
   1cab0:	20002d44 	.word	0x20002d44

0001cab4 <vnd_ccc_cfg_changed>:
    }
   1cab4:	4770      	bx	lr

0001cab6 <write_vnd>:
    {
   1cab6:	b538      	push	{r3, r4, r5, lr}
   1cab8:	460c      	mov	r4, r1
   1caba:	f8bd 0010 	ldrh.w	r0, [sp, #16]
        uint8_t *value = attr->user_data;
   1cabe:	68e5      	ldr	r5, [r4, #12]
        if (offset + len > sizeof(vnd_value)) {
   1cac0:	461c      	mov	r4, r3
   1cac2:	18c3      	adds	r3, r0, r3
   1cac4:	2b06      	cmp	r3, #6
    {
   1cac6:	4611      	mov	r1, r2
        if (offset + len > sizeof(vnd_value)) {
   1cac8:	dc05      	bgt.n	1cad6 <write_vnd+0x20>
        memcpy(value + offset, buf, len);
   1caca:	4622      	mov	r2, r4
   1cacc:	4428      	add	r0, r5
   1cace:	f002 fd03 	bl	1f4d8 <memcpy>
    }
   1cad2:	4620      	mov	r0, r4
   1cad4:	bd38      	pop	{r3, r4, r5, pc}
            return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cad6:	f06f 0406 	mvn.w	r4, #6
   1cada:	e7fa      	b.n	1cad2 <write_vnd+0x1c>

0001cadc <dwt_writetodevice>:
{
   1cadc:	b507      	push	{r0, r1, r2, lr}
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
   1cade:	b2c0      	uxtb	r0, r0
    if (index == 0) // For index of 0, no sub-index is required
   1cae0:	b951      	cbnz	r1, 1caf8 <dwt_writetodevice+0x1c>
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
   1cae2:	f060 007f 	orn	r0, r0, #127	; 0x7f
   1cae6:	f88d 0004 	strb.w	r0, [sp, #4]
   1caea:	2001      	movs	r0, #1
    writetospi(cnt,header,length,buffer);
   1caec:	a901      	add	r1, sp, #4
   1caee:	f7e8 fbb9 	bl	5264 <writetospi>
} // end dwt_writetodevice()
   1caf2:	b003      	add	sp, #12
   1caf4:	f85d fb04 	ldr.w	pc, [sp], #4
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
   1caf8:	f060 003f 	orn	r0, r0, #63	; 0x3f
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
   1cafc:	297f      	cmp	r1, #127	; 0x7f
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
   1cafe:	f88d 0004 	strb.w	r0, [sp, #4]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
   1cb02:	b2c8      	uxtb	r0, r1
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
   1cb04:	bf85      	ittet	hi
   1cb06:	f060 007f 	ornhi	r0, r0, #127	; 0x7f
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
   1cb0a:	09c9      	lsrhi	r1, r1, #7
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
   1cb0c:	f88d 0005 	strbls.w	r0, [sp, #5]
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
   1cb10:	f88d 0005 	strbhi.w	r0, [sp, #5]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
   1cb14:	bf92      	itee	ls
   1cb16:	2002      	movls	r0, #2
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
   1cb18:	f88d 1006 	strbhi.w	r1, [sp, #6]
   1cb1c:	2003      	movhi	r0, #3
   1cb1e:	e7e5      	b.n	1caec <dwt_writetodevice+0x10>

0001cb20 <dwt_writetxdata>:
{
   1cb20:	b508      	push	{r3, lr}
   1cb22:	460b      	mov	r3, r1
   1cb24:	4611      	mov	r1, r2
    if ((txBufferOffset + txFrameLength) <= 1024)
   1cb26:	4402      	add	r2, r0
   1cb28:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1cb2c:	dc05      	bgt.n	1cb3a <dwt_writetxdata+0x1a>
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
   1cb2e:	1e82      	subs	r2, r0, #2
   1cb30:	2009      	movs	r0, #9
   1cb32:	f7ff ffd3 	bl	1cadc <dwt_writetodevice>
        return DWT_SUCCESS;
   1cb36:	2000      	movs	r0, #0
} // end dwt_writetxdata()
   1cb38:	bd08      	pop	{r3, pc}
        return DWT_ERROR;
   1cb3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cb3e:	e7fb      	b.n	1cb38 <dwt_writetxdata+0x18>

0001cb40 <dwt_readfromdevice>:
{
   1cb40:	b507      	push	{r0, r1, r2, lr}
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
   1cb42:	b2c0      	uxtb	r0, r0
    if (index == 0) // For index of 0, no sub-index is required
   1cb44:	b941      	cbnz	r1, 1cb58 <dwt_readfromdevice+0x18>
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
   1cb46:	f88d 0004 	strb.w	r0, [sp, #4]
   1cb4a:	2001      	movs	r0, #1
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
   1cb4c:	a901      	add	r1, sp, #4
   1cb4e:	f7e8 fbbf 	bl	52d0 <readfromspi>
} // end dwt_readfromdevice()
   1cb52:	b003      	add	sp, #12
   1cb54:	f85d fb04 	ldr.w	pc, [sp], #4
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
   1cb58:	f040 0040 	orr.w	r0, r0, #64	; 0x40
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
   1cb5c:	297f      	cmp	r1, #127	; 0x7f
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
   1cb5e:	f88d 0004 	strb.w	r0, [sp, #4]
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
   1cb62:	b2c8      	uxtb	r0, r1
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
   1cb64:	bf85      	ittet	hi
   1cb66:	f060 007f 	ornhi	r0, r0, #127	; 0x7f
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
   1cb6a:	09c9      	lsrhi	r1, r1, #7
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
   1cb6c:	f88d 0005 	strbls.w	r0, [sp, #5]
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
   1cb70:	f88d 0005 	strbhi.w	r0, [sp, #5]
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
   1cb74:	bf92      	itee	ls
   1cb76:	2002      	movls	r0, #2
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
   1cb78:	f88d 1006 	strbhi.w	r1, [sp, #6]
   1cb7c:	2003      	movhi	r0, #3
   1cb7e:	e7e5      	b.n	1cb4c <dwt_readfromdevice+0xc>

0001cb80 <dwt_readrxdata>:
{
   1cb80:	b410      	push	{r4}
   1cb82:	460c      	mov	r4, r1
   1cb84:	4603      	mov	r3, r0
   1cb86:	4611      	mov	r1, r2
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
   1cb88:	2011      	movs	r0, #17
   1cb8a:	4622      	mov	r2, r4
}
   1cb8c:	f85d 4b04 	ldr.w	r4, [sp], #4
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
   1cb90:	f7ff bfd6 	b.w	1cb40 <dwt_readfromdevice>

0001cb94 <dwt_readcarrierintegrator>:
{
   1cb94:	b507      	push	{r0, r1, r2, lr}
    dwt_readfromdevice(DRX_CONF_ID,DRX_CARRIER_INT_OFFSET,DRX_CARRIER_INT_LEN, buffer) ;
   1cb96:	2203      	movs	r2, #3
   1cb98:	ab01      	add	r3, sp, #4
   1cb9a:	2128      	movs	r1, #40	; 0x28
   1cb9c:	2027      	movs	r0, #39	; 0x27
   1cb9e:	f7ff ffcf 	bl	1cb40 <dwt_readfromdevice>
        regval = (regval << 8) + buffer[j] ;
   1cba2:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1cba6:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1cbaa:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1cbae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1cbb2:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    if (regval & B20_SIGN_EXTEND_TEST) regval |= B20_SIGN_EXTEND_MASK ; // sign extend bit #20 to whole word
   1cbb6:	04db      	lsls	r3, r3, #19
   1cbb8:	bf46      	itte	mi
   1cbba:	ea6f 3000 	mvnmi.w	r0, r0, lsl #12
   1cbbe:	ea6f 3010 	mvnmi.w	r0, r0, lsr #12
    else regval &= DRX_CARRIER_INT_MASK ;                               // make sure upper bits are clear if not sign extending
   1cbc2:	f3c0 0014 	ubfxpl	r0, r0, #0, #21
}
   1cbc6:	b003      	add	sp, #12
   1cbc8:	f85d fb04 	ldr.w	pc, [sp], #4

0001cbcc <dwt_read32bitoffsetreg>:
{
   1cbcc:	b513      	push	{r0, r1, r4, lr}
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
   1cbce:	ac01      	add	r4, sp, #4
   1cbd0:	2204      	movs	r2, #4
   1cbd2:	b280      	uxth	r0, r0
   1cbd4:	4623      	mov	r3, r4
   1cbd6:	b289      	uxth	r1, r1
   1cbd8:	f7ff ffb2 	bl	1cb40 <dwt_readfromdevice>
    for (j = 3 ; j >= 0 ; j --)
   1cbdc:	2203      	movs	r2, #3
    uint32  regval = 0 ;
   1cbde:	2000      	movs	r0, #0
        regval = (regval << 8) + buffer[j] ;
   1cbe0:	5ca3      	ldrb	r3, [r4, r2]
    for (j = 3 ; j >= 0 ; j --)
   1cbe2:	3a01      	subs	r2, #1
        regval = (regval << 8) + buffer[j] ;
   1cbe4:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    for (j = 3 ; j >= 0 ; j --)
   1cbe8:	d2fa      	bcs.n	1cbe0 <dwt_read32bitoffsetreg+0x14>
} // end dwt_read32bitoffsetreg()
   1cbea:	b002      	add	sp, #8
   1cbec:	bd10      	pop	{r4, pc}

0001cbee <dwt_readdevid>:
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
   1cbee:	2100      	movs	r1, #0
   1cbf0:	4608      	mov	r0, r1
   1cbf2:	f7ff bfeb 	b.w	1cbcc <dwt_read32bitoffsetreg>

0001cbf6 <dwt_readtxtimestamplo32>:
    return dwt_read32bitreg(TX_TIME_ID); // Read TX TIME as a 32-bit register to get the 4 lower bytes out of 5
   1cbf6:	2100      	movs	r1, #0
   1cbf8:	2017      	movs	r0, #23
   1cbfa:	f7ff bfe7 	b.w	1cbcc <dwt_read32bitoffsetreg>

0001cbfe <dwt_readrxtimestamplo32>:
    return dwt_read32bitreg(RX_TIME_ID); // Read RX TIME as a 32-bit register to get the 4 lower bytes out of 5
   1cbfe:	2100      	movs	r1, #0
   1cc00:	2015      	movs	r0, #21
   1cc02:	f7ff bfe3 	b.w	1cbcc <dwt_read32bitoffsetreg>

0001cc06 <dwt_read16bitoffsetreg>:
{
   1cc06:	b507      	push	{r0, r1, r2, lr}
    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
   1cc08:	2202      	movs	r2, #2
   1cc0a:	ab01      	add	r3, sp, #4
   1cc0c:	b289      	uxth	r1, r1
   1cc0e:	b280      	uxth	r0, r0
   1cc10:	f7ff ff96 	bl	1cb40 <dwt_readfromdevice>
    regval = (buffer[1] << 8) + buffer[0] ;
   1cc14:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1cc18:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1cc1c:	eb00 2003 	add.w	r0, r0, r3, lsl #8
} // end dwt_read16bitoffsetreg()
   1cc20:	b280      	uxth	r0, r0
   1cc22:	b003      	add	sp, #12
   1cc24:	f85d fb04 	ldr.w	pc, [sp], #4

0001cc28 <dwt_read8bitoffsetreg>:
{
   1cc28:	b507      	push	{r0, r1, r2, lr}
    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
   1cc2a:	2201      	movs	r2, #1
   1cc2c:	f10d 0307 	add.w	r3, sp, #7
   1cc30:	b289      	uxth	r1, r1
   1cc32:	b280      	uxth	r0, r0
   1cc34:	f7ff ff84 	bl	1cb40 <dwt_readfromdevice>
}
   1cc38:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1cc3c:	b003      	add	sp, #12
   1cc3e:	f85d fb04 	ldr.w	pc, [sp], #4

0001cc42 <dwt_write8bitoffsetreg>:
{
   1cc42:	b507      	push	{r0, r1, r2, lr}
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
   1cc44:	b289      	uxth	r1, r1
{
   1cc46:	f88d 2007 	strb.w	r2, [sp, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
   1cc4a:	f10d 0307 	add.w	r3, sp, #7
   1cc4e:	2201      	movs	r2, #1
   1cc50:	b280      	uxth	r0, r0
   1cc52:	f7ff ff43 	bl	1cadc <dwt_writetodevice>
}
   1cc56:	b003      	add	sp, #12
   1cc58:	f85d fb04 	ldr.w	pc, [sp], #4

0001cc5c <dwt_write16bitoffsetreg>:
{
   1cc5c:	b507      	push	{r0, r1, r2, lr}
    buffer[0] = regval & 0xFF;
   1cc5e:	f88d 2004 	strb.w	r2, [sp, #4]
    buffer[1] = regval >> 8 ;
   1cc62:	0a12      	lsrs	r2, r2, #8
   1cc64:	f88d 2005 	strb.w	r2, [sp, #5]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
   1cc68:	ab01      	add	r3, sp, #4
   1cc6a:	2202      	movs	r2, #2
   1cc6c:	b289      	uxth	r1, r1
   1cc6e:	b280      	uxth	r0, r0
   1cc70:	f7ff ff34 	bl	1cadc <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
   1cc74:	b003      	add	sp, #12
   1cc76:	f85d fb04 	ldr.w	pc, [sp], #4

0001cc7a <dwt_setrxantennadelay>:
{
   1cc7a:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
   1cc7c:	f641 0104 	movw	r1, #6148	; 0x1804
   1cc80:	202e      	movs	r0, #46	; 0x2e
   1cc82:	f7ff bfeb 	b.w	1cc5c <dwt_write16bitoffsetreg>

0001cc86 <dwt_settxantennadelay>:
{
   1cc86:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
   1cc88:	2100      	movs	r1, #0
   1cc8a:	2018      	movs	r0, #24
   1cc8c:	f7ff bfe6 	b.w	1cc5c <dwt_write16bitoffsetreg>

0001cc90 <dwt_write32bitoffsetreg>:
{
   1cc90:	b507      	push	{r0, r1, r2, lr}
        regval >>= 8 ;
   1cc92:	0a13      	lsrs	r3, r2, #8
        buffer[j] = regval & 0xff ;
   1cc94:	f88d 2004 	strb.w	r2, [sp, #4]
   1cc98:	f88d 3005 	strb.w	r3, [sp, #5]
        regval >>= 8 ;
   1cc9c:	0c13      	lsrs	r3, r2, #16
   1cc9e:	0e12      	lsrs	r2, r2, #24
        buffer[j] = regval & 0xff ;
   1cca0:	f88d 3006 	strb.w	r3, [sp, #6]
   1cca4:	f88d 2007 	strb.w	r2, [sp, #7]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
   1cca8:	ab01      	add	r3, sp, #4
   1ccaa:	2204      	movs	r2, #4
   1ccac:	b289      	uxth	r1, r1
   1ccae:	b280      	uxth	r0, r0
   1ccb0:	f7ff ff14 	bl	1cadc <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
   1ccb4:	b003      	add	sp, #12
   1ccb6:	f85d fb04 	ldr.w	pc, [sp], #4

0001ccba <_dwt_otpread>:
{
   1ccba:	b508      	push	{r3, lr}
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
   1ccbc:	b282      	uxth	r2, r0
   1ccbe:	2104      	movs	r1, #4
   1ccc0:	202d      	movs	r0, #45	; 0x2d
   1ccc2:	f7ff ffcb 	bl	1cc5c <dwt_write16bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
   1ccc6:	2203      	movs	r2, #3
   1ccc8:	2106      	movs	r1, #6
   1ccca:	202d      	movs	r0, #45	; 0x2d
   1cccc:	f7ff ffb9 	bl	1cc42 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
   1ccd0:	2106      	movs	r1, #6
   1ccd2:	202d      	movs	r0, #45	; 0x2d
   1ccd4:	2200      	movs	r2, #0
   1ccd6:	f7ff ffb4 	bl	1cc42 <dwt_write8bitoffsetreg>
}
   1ccda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
   1ccde:	210a      	movs	r1, #10
   1cce0:	202d      	movs	r0, #45	; 0x2d
   1cce2:	f7ff bf73 	b.w	1cbcc <dwt_read32bitoffsetreg>

0001cce6 <_dwt_aonarrayupload>:
{
   1cce6:	b508      	push	{r3, lr}
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
   1cce8:	2200      	movs	r2, #0
   1ccea:	2102      	movs	r1, #2
   1ccec:	202c      	movs	r0, #44	; 0x2c
   1ccee:	f7ff ffa8 	bl	1cc42 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
   1ccf2:	2202      	movs	r2, #2
}
   1ccf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
   1ccf8:	4611      	mov	r1, r2
   1ccfa:	202c      	movs	r0, #44	; 0x2c
   1ccfc:	f7ff bfa1 	b.w	1cc42 <dwt_write8bitoffsetreg>

0001cd00 <_dwt_configlde>:
{
   1cd00:	b510      	push	{r4, lr}
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
   1cd02:	226d      	movs	r2, #109	; 0x6d
{
   1cd04:	4604      	mov	r4, r0
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
   1cd06:	f640 0106 	movw	r1, #2054	; 0x806
   1cd0a:	202e      	movs	r0, #46	; 0x2e
   1cd0c:	f7ff ff99 	bl	1cc42 <dwt_write8bitoffsetreg>
    if(prfIndex)
   1cd10:	b144      	cbz	r4, 1cd24 <_dwt_configlde+0x24>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
   1cd12:	f240 6207 	movw	r2, #1543	; 0x607
}
   1cd16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
   1cd1a:	f641 0106 	movw	r1, #6150	; 0x1806
   1cd1e:	202e      	movs	r0, #46	; 0x2e
   1cd20:	f7ff bf9c 	b.w	1cc5c <dwt_write16bitoffsetreg>
   1cd24:	f241 6207 	movw	r2, #5639	; 0x1607
   1cd28:	e7f5      	b.n	1cd16 <_dwt_configlde+0x16>

0001cd2a <dwt_setrxaftertxdelay>:
{
   1cd2a:	b510      	push	{r4, lr}
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
   1cd2c:	2100      	movs	r1, #0
{
   1cd2e:	4604      	mov	r4, r0
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
   1cd30:	201a      	movs	r0, #26
   1cd32:	f7ff ff4b 	bl	1cbcc <dwt_read32bitoffsetreg>
    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
   1cd36:	0d00      	lsrs	r0, r0, #20
   1cd38:	0500      	lsls	r0, r0, #20
    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
   1cd3a:	f3c4 0213 	ubfx	r2, r4, #0, #20
    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
   1cd3e:	4302      	orrs	r2, r0
}
   1cd40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
   1cd44:	2100      	movs	r1, #0
   1cd46:	201a      	movs	r0, #26
   1cd48:	f7ff bfa2 	b.w	1cc90 <dwt_write32bitoffsetreg>

0001cd4c <_dwt_enableclocks>:
{
   1cd4c:	b513      	push	{r0, r1, r4, lr}
    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
   1cd4e:	2202      	movs	r2, #2
{
   1cd50:	4604      	mov	r4, r0
    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
   1cd52:	ab01      	add	r3, sp, #4
   1cd54:	2100      	movs	r1, #0
   1cd56:	2036      	movs	r0, #54	; 0x36
   1cd58:	f7ff fef2 	bl	1cb40 <dwt_readfromdevice>
    switch(clocks)
   1cd5c:	2c0e      	cmp	r4, #14
   1cd5e:	d81b      	bhi.n	1cd98 <_dwt_enableclocks+0x4c>
   1cd60:	e8df f004 	tbb	[pc, r4]
   1cd64:	1a290812 	.word	0x1a290812
   1cd68:	301a1a1a 	.word	0x301a1a1a
   1cd6c:	481a1a3d 	.word	0x481a1a3d
   1cd70:	524d      	.short	0x524d
   1cd72:	59          	.byte	0x59
   1cd73:	00          	.byte	0x00
            reg[0] = 0x00 ;
   1cd74:	2300      	movs	r3, #0
   1cd76:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = reg[1] & 0xfe;
   1cd7a:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1cd7e:	f023 0301 	bic.w	r3, r3, #1
            reg[1] = 0x03;
   1cd82:	f88d 3005 	strb.w	r3, [sp, #5]
        break;
   1cd86:	e007      	b.n	1cd98 <_dwt_enableclocks+0x4c>
            reg[0] = 0x01 | (reg[0] & 0xfc);
   1cd88:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1cd8c:	f023 0303 	bic.w	r3, r3, #3
   1cd90:	f043 0301 	orr.w	r3, r3, #1
            reg[0] = 0x20 | (reg[0] & 0xcf);
   1cd94:	f88d 3004 	strb.w	r3, [sp, #4]
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
   1cd98:	ab01      	add	r3, sp, #4
   1cd9a:	2201      	movs	r2, #1
   1cd9c:	2100      	movs	r1, #0
   1cd9e:	2036      	movs	r0, #54	; 0x36
   1cda0:	f7ff fe9c 	bl	1cadc <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
   1cda4:	2201      	movs	r2, #1
   1cda6:	f10d 0305 	add.w	r3, sp, #5
   1cdaa:	4611      	mov	r1, r2
   1cdac:	2036      	movs	r0, #54	; 0x36
   1cdae:	f7ff fe95 	bl	1cadc <dwt_writetodevice>
} // end _dwt_enableclocks()
   1cdb2:	b002      	add	sp, #8
   1cdb4:	bd10      	pop	{r4, pc}
            reg[0] = 0x02 | (reg[0] & 0xfc);
   1cdb6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1cdba:	f023 0303 	bic.w	r3, r3, #3
   1cdbe:	f043 0302 	orr.w	r3, r3, #2
   1cdc2:	e7e7      	b.n	1cd94 <_dwt_enableclocks+0x48>
            reg[0] = 0x48 | (reg[0] & 0xb3);
   1cdc4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1cdc8:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
   1cdcc:	f043 0348 	orr.w	r3, r3, #72	; 0x48
   1cdd0:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = 0x80 | reg[1];
   1cdd4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1cdd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1cddc:	e7d1      	b.n	1cd82 <_dwt_enableclocks+0x36>
            reg[0] = reg[0] & 0xb3;
   1cdde:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1cde2:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
   1cde6:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = 0x7f & reg[1];
   1cdea:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1cdee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1cdf2:	e7c6      	b.n	1cd82 <_dwt_enableclocks+0x36>
            reg[1] = 0x02 | reg[1];
   1cdf4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1cdf8:	f043 0302 	orr.w	r3, r3, #2
   1cdfc:	e7c1      	b.n	1cd82 <_dwt_enableclocks+0x36>
            reg[1] = reg[1] & 0xfd;
   1cdfe:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1ce02:	f023 0302 	bic.w	r3, r3, #2
   1ce06:	e7bc      	b.n	1cd82 <_dwt_enableclocks+0x36>
            reg[0] = 0x20 | (reg[0] & 0xcf);
   1ce08:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1ce0c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1ce10:	f043 0320 	orr.w	r3, r3, #32
   1ce14:	e7be      	b.n	1cd94 <_dwt_enableclocks+0x48>
            reg[0] = 0x01;
   1ce16:	2301      	movs	r3, #1
   1ce18:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = 0x03;
   1ce1c:	2303      	movs	r3, #3
   1ce1e:	e7b0      	b.n	1cd82 <_dwt_enableclocks+0x36>

0001ce20 <_dwt_loaducodefromrom>:
{
   1ce20:	b508      	push	{r3, lr}
    _dwt_enableclocks(FORCE_LDE);
   1ce22:	200e      	movs	r0, #14
   1ce24:	f7ff ff92 	bl	1cd4c <_dwt_enableclocks>
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
   1ce28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1ce2c:	2106      	movs	r1, #6
   1ce2e:	202d      	movs	r0, #45	; 0x2d
   1ce30:	f7ff ff14 	bl	1cc5c <dwt_write16bitoffsetreg>
    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
   1ce34:	2001      	movs	r0, #1
   1ce36:	f000 f8b9 	bl	1cfac <deca_sleep>
}
   1ce3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
   1ce3e:	2001      	movs	r0, #1
   1ce40:	f7ff bf84 	b.w	1cd4c <_dwt_enableclocks>

0001ce44 <_dwt_disablesequencing>:
{
   1ce44:	b508      	push	{r3, lr}
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
   1ce46:	2000      	movs	r0, #0
   1ce48:	f7ff ff80 	bl	1cd4c <_dwt_enableclocks>
}
   1ce4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
   1ce50:	2200      	movs	r2, #0
   1ce52:	2104      	movs	r1, #4
   1ce54:	2036      	movs	r0, #54	; 0x36
   1ce56:	f7ff bf01 	b.w	1cc5c <dwt_write16bitoffsetreg>

0001ce5a <dwt_rxreset>:
{
   1ce5a:	b508      	push	{r3, lr}
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
   1ce5c:	22e0      	movs	r2, #224	; 0xe0
   1ce5e:	2103      	movs	r1, #3
   1ce60:	2036      	movs	r0, #54	; 0x36
   1ce62:	f7ff feee 	bl	1cc42 <dwt_write8bitoffsetreg>
}
   1ce66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
   1ce6a:	22f0      	movs	r2, #240	; 0xf0
   1ce6c:	2103      	movs	r1, #3
   1ce6e:	2036      	movs	r0, #54	; 0x36
   1ce70:	f7ff bee7 	b.w	1cc42 <dwt_write8bitoffsetreg>

0001ce74 <dwt_setxtaltrim>:
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
   1ce74:	f000 001f 	and.w	r0, r0, #31
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
   1ce78:	f040 0260 	orr.w	r2, r0, #96	; 0x60
   1ce7c:	210e      	movs	r1, #14
   1ce7e:	202b      	movs	r0, #43	; 0x2b
   1ce80:	f7ff bedf 	b.w	1cc42 <dwt_write8bitoffsetreg>

0001ce84 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(unsigned long usec)
{
   1ce84:	b480      	push	{r7}
   1ce86:	b085      	sub	sp, #20
   1ce88:	af00      	add	r7, sp, #0
   1ce8a:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
   1ce8c:	2300      	movs	r3, #0
   1ce8e:	60fb      	str	r3, [r7, #12]
   1ce90:	e010      	b.n	1ceb4 <usleep+0x30>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
   1ce92:	2300      	movs	r3, #0
   1ce94:	60bb      	str	r3, [r7, #8]
   1ce96:	e002      	b.n	1ce9e <usleep+0x1a>
   1ce98:	68bb      	ldr	r3, [r7, #8]
   1ce9a:	3301      	adds	r3, #1
   1ce9c:	60bb      	str	r3, [r7, #8]
   1ce9e:	68bb      	ldr	r3, [r7, #8]
   1cea0:	2b01      	cmp	r3, #1
   1cea2:	bfd4      	ite	le
   1cea4:	2301      	movle	r3, #1
   1cea6:	2300      	movgt	r3, #0
   1cea8:	b2db      	uxtb	r3, r3
   1ceaa:	2b00      	cmp	r3, #0
   1ceac:	d1f4      	bne.n	1ce98 <usleep+0x14>
    for(i=0;i<usec;i++)
   1ceae:	68fb      	ldr	r3, [r7, #12]
   1ceb0:	3301      	adds	r3, #1
   1ceb2:	60fb      	str	r3, [r7, #12]
   1ceb4:	68fb      	ldr	r3, [r7, #12]
   1ceb6:	687a      	ldr	r2, [r7, #4]
   1ceb8:	429a      	cmp	r2, r3
   1ceba:	bf8c      	ite	hi
   1cebc:	2301      	movhi	r3, #1
   1cebe:	2300      	movls	r3, #0
   1cec0:	b2db      	uxtb	r3, r3
   1cec2:	2b00      	cmp	r3, #0
   1cec4:	d1e5      	bne.n	1ce92 <usleep+0xe>
        {
            // __NOP();
            // __NOP();
        }
    }
    return 0;
   1cec6:	2300      	movs	r3, #0
}
   1cec8:	4618      	mov	r0, r3
   1ceca:	3714      	adds	r7, #20
   1cecc:	46bd      	mov	sp, r7
   1cece:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ced2:	4770      	bx	lr

0001ced4 <Sleep>:

/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
void Sleep(uint32_t x)
{
   1ced4:	b580      	push	{r7, lr}
   1ced6:	b082      	sub	sp, #8
   1ced8:	af00      	add	r7, sp, #0
   1ceda:	6078      	str	r0, [r7, #4]
    k_msleep(x);
   1cedc:	687b      	ldr	r3, [r7, #4]
   1cede:	4618      	mov	r0, r3
   1cee0:	f000 f844 	bl	1cf6c <k_msleep>
}
   1cee4:	bf00      	nop
   1cee6:	3708      	adds	r7, #8
   1cee8:	46bd      	mov	sp, r7
   1ceea:	bd80      	pop	{r7, pc}

0001ceec <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
   1ceec:	b580      	push	{r7, lr}
   1ceee:	af00      	add	r7, sp, #0
    //TODO:drive the RSTn pin low
 
    usleep(1);
   1cef0:	2001      	movs	r0, #1
   1cef2:	f7ff ffc7 	bl	1ce84 <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
   1cef6:	2000      	movs	r0, #0
   1cef8:	f000 f805 	bl	1cf06 <setup_DW1000RSTnIRQ>

    Sleep(2);
   1cefc:	2002      	movs	r0, #2
   1cefe:	f7ff ffe9 	bl	1ced4 <Sleep>
}
   1cf02:	bf00      	nop
   1cf04:	bd80      	pop	{r7, pc}

0001cf06 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
   1cf06:	b480      	push	{r7}
   1cf08:	b083      	sub	sp, #12
   1cf0a:	af00      	add	r7, sp, #0
   1cf0c:	6078      	str	r0, [r7, #4]
    //TODO
}
   1cf0e:	bf00      	nop
   1cf10:	370c      	adds	r7, #12
   1cf12:	46bd      	mov	sp, r7
   1cf14:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cf18:	4770      	bx	lr

0001cf1a <port_wakeup_dw1000>:

/* @fn      port_wakeup_dw1000
 * @brief   "slow" waking up of DW1000 using DW_CS only
 * */
void port_wakeup_dw1000(void)
{
   1cf1a:	b480      	push	{r7}
   1cf1c:	af00      	add	r7, sp, #0
    //TODO
}
   1cf1e:	bf00      	nop
   1cf20:	46bd      	mov	sp, r7
   1cf22:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cf26:	4770      	bx	lr

0001cf28 <port_set_dw1000_slowrate>:

/* @fn      port_set_dw1000_slowrate
 * @brief   set 2MHz
 * */
void port_set_dw1000_slowrate(void)
{
   1cf28:	b580      	push	{r7, lr}
   1cf2a:	af00      	add	r7, sp, #0
    set_spi_speed_slow();
   1cf2c:	f7e8 f958 	bl	51e0 <set_spi_speed_slow>
}
   1cf30:	bf00      	nop
   1cf32:	bd80      	pop	{r7, pc}

0001cf34 <port_set_dw1000_fastrate>:

/* @fn      port_set_dw1000_fastrate
 * @brief   set 8MHz
 * */
void port_set_dw1000_fastrate(void)
{
   1cf34:	b580      	push	{r7, lr}
   1cf36:	af00      	add	r7, sp, #0
    //TODO
    set_spi_speed_fast();
   1cf38:	f7e8 f972 	bl	5220 <set_spi_speed_fast>
}
   1cf3c:	bf00      	nop
   1cf3e:	bd80      	pop	{r7, pc}

0001cf40 <port_DisableEXT_IRQ>:
   1cf40:	b480      	push	{r7}
   1cf42:	af00      	add	r7, sp, #0
   1cf44:	46bd      	mov	sp, r7
   1cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cf4a:	f7ff bfe6 	b.w	1cf1a <port_wakeup_dw1000>

0001cf4e <port_EnableEXT_IRQ>:
   1cf4e:	b480      	push	{r7}
   1cf50:	af00      	add	r7, sp, #0
   1cf52:	46bd      	mov	sp, r7
   1cf54:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cf58:	f7ff bfdf 	b.w	1cf1a <port_wakeup_dw1000>

0001cf5c <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
uint32_t port_GetEXT_IRQStatus(void)
{
   1cf5c:	b480      	push	{r7}
   1cf5e:	af00      	add	r7, sp, #0
    //TODO
    return 0;
   1cf60:	2300      	movs	r3, #0
}
   1cf62:	4618      	mov	r0, r3
   1cf64:	46bd      	mov	sp, r7
   1cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cf6a:	4770      	bx	lr

0001cf6c <k_msleep>:
{
   1cf6c:	b538      	push	{r3, r4, r5, lr}
   1cf6e:	2100      	movs	r1, #0
	return k_sleep(Z_TIMEOUT_MS(ms));
   1cf70:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
   1cf74:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1cf78:	f240 30e7 	movw	r0, #999	; 0x3e7
   1cf7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cf80:	2300      	movs	r3, #0
   1cf82:	fbc4 0105 	smlal	r0, r1, r4, r5
   1cf86:	f7e3 fd79 	bl	a7c <__aeabi_uldivmod>
}
   1cf8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
   1cf8e:	f7ff b873 	b.w	1c078 <z_impl_k_sleep>

0001cf92 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
   1cf92:	b510      	push	{r4, lr}
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
   1cf94:	f7ff ffe2 	bl	1cf5c <port_GetEXT_IRQStatus>

	if(s) {
   1cf98:	4604      	mov	r4, r0
   1cf9a:	b108      	cbz	r0, 1cfa0 <decamutexon+0xe>
		port_DisableEXT_IRQ(); //disable the external interrupt line
   1cf9c:	f7ff ffd0 	bl	1cf40 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
}
   1cfa0:	4620      	mov	r0, r4
   1cfa2:	bd10      	pop	{r4, pc}

0001cfa4 <decamutexoff>:
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
   1cfa4:	b108      	cbz	r0, 1cfaa <decamutexoff+0x6>
		port_EnableEXT_IRQ();
   1cfa6:	f7ff bfd2 	b.w	1cf4e <port_EnableEXT_IRQ>
	}
}
   1cfaa:	4770      	bx	lr

0001cfac <deca_sleep>:
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_sleep(unsigned int time_ms)
{
	Sleep(time_ms);
   1cfac:	f7ff bf92 	b.w	1ced4 <Sleep>

0001cfb0 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1cfb0:	b140      	cbz	r0, 1cfc4 <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1cfb2:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1cfb4:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1cfb8:	2b02      	cmp	r3, #2
   1cfba:	d006      	beq.n	1cfca <sys_notify_validate+0x1a>
   1cfbc:	2b03      	cmp	r3, #3
   1cfbe:	d004      	beq.n	1cfca <sys_notify_validate+0x1a>
   1cfc0:	2b01      	cmp	r3, #1
   1cfc2:	d005      	beq.n	1cfd0 <sys_notify_validate+0x20>
		return -EINVAL;
   1cfc4:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1cfc8:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1cfca:	6803      	ldr	r3, [r0, #0]
   1cfcc:	2b00      	cmp	r3, #0
   1cfce:	d0f9      	beq.n	1cfc4 <sys_notify_validate+0x14>
		notify->result = 0;
   1cfd0:	2300      	movs	r3, #0
   1cfd2:	6083      	str	r3, [r0, #8]
   1cfd4:	4618      	mov	r0, r3
   1cfd6:	4770      	bx	lr

0001cfd8 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1cfd8:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1cfda:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1cfde:	2b02      	cmp	r3, #2
{
   1cfe0:	b510      	push	{r4, lr}
	notify->result = res;
   1cfe2:	6081      	str	r1, [r0, #8]
	switch (method) {
   1cfe4:	d00b      	beq.n	1cffe <sys_notify_finalize+0x26>
   1cfe6:	2b03      	cmp	r3, #3
   1cfe8:	d10c      	bne.n	1d004 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1cfea:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1cfec:	2300      	movs	r3, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1cfee:	2200      	movs	r2, #0
   1cff0:	6042      	str	r2, [r0, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1cff2:	b113      	cbz	r3, 1cffa <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   1cff4:	4618      	mov	r0, r3
   1cff6:	f7ff fd15 	bl	1ca24 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1cffa:	4620      	mov	r0, r4
   1cffc:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1cffe:	6803      	ldr	r3, [r0, #0]
	sys_notify_generic_callback rv = 0;
   1d000:	2400      	movs	r4, #0
		break;
   1d002:	e7f4      	b.n	1cfee <sys_notify_finalize+0x16>
	switch (method) {
   1d004:	2400      	movs	r4, #0
   1d006:	4623      	mov	r3, r4
   1d008:	e7f1      	b.n	1cfee <sys_notify_finalize+0x16>

0001d00a <arch_printk_char_out>:
}
   1d00a:	2000      	movs	r0, #0
   1d00c:	4770      	bx	lr

0001d00e <str_out>:
{
   1d00e:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1d010:	688a      	ldr	r2, [r1, #8]
   1d012:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1d014:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1d016:	b114      	cbz	r4, 1d01e <str_out+0x10>
   1d018:	684b      	ldr	r3, [r1, #4]
   1d01a:	4293      	cmp	r3, r2
   1d01c:	dc01      	bgt.n	1d022 <str_out+0x14>
		ctx->count++;
   1d01e:	608d      	str	r5, [r1, #8]
}
   1d020:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1d022:	3b01      	subs	r3, #1
   1d024:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1d026:	bf08      	it	eq
   1d028:	2200      	moveq	r2, #0
   1d02a:	608d      	str	r5, [r1, #8]
   1d02c:	bf0c      	ite	eq
   1d02e:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1d030:	54a0      	strbne	r0, [r4, r2]
   1d032:	e7f5      	b.n	1d020 <str_out+0x12>

0001d034 <printk>:
{
   1d034:	b40f      	push	{r0, r1, r2, r3}
   1d036:	b507      	push	{r0, r1, r2, lr}
   1d038:	a904      	add	r1, sp, #16
   1d03a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1d03e:	9101      	str	r1, [sp, #4]
		log_printk(fmt, ap);
   1d040:	f000 fcd9 	bl	1d9f6 <log_printk>
}
   1d044:	b003      	add	sp, #12
   1d046:	f85d eb04 	ldr.w	lr, [sp], #4
   1d04a:	b004      	add	sp, #16
   1d04c:	4770      	bx	lr

0001d04e <snprintk>:
{
   1d04e:	b40c      	push	{r2, r3}
   1d050:	b507      	push	{r0, r1, r2, lr}
   1d052:	ab04      	add	r3, sp, #16
   1d054:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1d058:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1d05a:	f7e8 f97f 	bl	535c <vsnprintk>
}
   1d05e:	b003      	add	sp, #12
   1d060:	f85d eb04 	ldr.w	lr, [sp], #4
   1d064:	b002      	add	sp, #8
   1d066:	4770      	bx	lr

0001d068 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1d068:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1d06a:	f013 0307 	ands.w	r3, r3, #7
   1d06e:	d105      	bne.n	1d07c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1d070:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1d072:	2b00      	cmp	r3, #0
   1d074:	bf0c      	ite	eq
   1d076:	2000      	moveq	r0, #0
   1d078:	2003      	movne	r0, #3
   1d07a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1d07c:	2b02      	cmp	r3, #2
   1d07e:	d105      	bne.n	1d08c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1d080:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   1d082:	2b00      	cmp	r3, #0
   1d084:	bf14      	ite	ne
   1d086:	2000      	movne	r0, #0
   1d088:	2004      	moveq	r0, #4
   1d08a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1d08c:	2b01      	cmp	r3, #1
   1d08e:	d105      	bne.n	1d09c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1d090:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1d092:	2b00      	cmp	r3, #0
   1d094:	bf0c      	ite	eq
   1d096:	2000      	moveq	r0, #0
   1d098:	2005      	movne	r0, #5
   1d09a:	4770      	bx	lr
	int evt = EVT_NOP;
   1d09c:	2000      	movs	r0, #0
}
   1d09e:	4770      	bx	lr

0001d0a0 <notify_one>:
{
   1d0a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d0a2:	460d      	mov	r5, r1
   1d0a4:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1d0a6:	4619      	mov	r1, r3
   1d0a8:	1d28      	adds	r0, r5, #4
{
   1d0aa:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1d0ac:	9300      	str	r3, [sp, #0]
   1d0ae:	f7ff ff93 	bl	1cfd8 <sys_notify_finalize>
	if (cb) {
   1d0b2:	4604      	mov	r4, r0
   1d0b4:	b140      	cbz	r0, 1d0c8 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1d0b6:	e9dd 3200 	ldrd	r3, r2, [sp]
   1d0ba:	4629      	mov	r1, r5
   1d0bc:	4630      	mov	r0, r6
   1d0be:	46a4      	mov	ip, r4
}
   1d0c0:	b002      	add	sp, #8
   1d0c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   1d0c6:	4760      	bx	ip
}
   1d0c8:	b002      	add	sp, #8
   1d0ca:	bd70      	pop	{r4, r5, r6, pc}

0001d0cc <transition_complete>:
{
   1d0cc:	b410      	push	{r4}
	__asm__ volatile(
   1d0ce:	f04f 0420 	mov.w	r4, #32
   1d0d2:	f3ef 8211 	mrs	r2, BASEPRI
   1d0d6:	f384 8811 	msr	BASEPRI, r4
   1d0da:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1d0de:	6141      	str	r1, [r0, #20]
}
   1d0e0:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
   1d0e4:	2101      	movs	r1, #1
   1d0e6:	f7e8 b94d 	b.w	5384 <process_event>

0001d0ea <validate_args>:
{
   1d0ea:	b510      	push	{r4, lr}
   1d0ec:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1d0ee:	b140      	cbz	r0, 1d102 <validate_args+0x18>
   1d0f0:	b139      	cbz	r1, 1d102 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1d0f2:	1d08      	adds	r0, r1, #4
   1d0f4:	f7ff ff5c 	bl	1cfb0 <sys_notify_validate>
	if ((rv == 0)
   1d0f8:	b928      	cbnz	r0, 1d106 <validate_args+0x1c>
	    && ((cli->notify.flags
   1d0fa:	68a3      	ldr	r3, [r4, #8]
   1d0fc:	f033 0303 	bics.w	r3, r3, #3
   1d100:	d001      	beq.n	1d106 <validate_args+0x1c>
		rv = -EINVAL;
   1d102:	f06f 0015 	mvn.w	r0, #21
}
   1d106:	bd10      	pop	{r4, pc}

0001d108 <onoff_manager_init>:
{
   1d108:	b538      	push	{r3, r4, r5, lr}
   1d10a:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1d10c:	4605      	mov	r5, r0
   1d10e:	b158      	cbz	r0, 1d128 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1d110:	b151      	cbz	r1, 1d128 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1d112:	680b      	ldr	r3, [r1, #0]
   1d114:	b143      	cbz	r3, 1d128 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1d116:	684b      	ldr	r3, [r1, #4]
   1d118:	b133      	cbz	r3, 1d128 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1d11a:	221c      	movs	r2, #28
   1d11c:	2100      	movs	r1, #0
   1d11e:	f002 fa06 	bl	1f52e <memset>
   1d122:	612c      	str	r4, [r5, #16]
	return 0;
   1d124:	2000      	movs	r0, #0
}
   1d126:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1d128:	f06f 0015 	mvn.w	r0, #21
   1d12c:	e7fb      	b.n	1d126 <onoff_manager_init+0x1e>

0001d12e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1d12e:	b570      	push	{r4, r5, r6, lr}
   1d130:	4604      	mov	r4, r0
   1d132:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1d134:	f7ff ffd9 	bl	1d0ea <validate_args>

	if (rv < 0) {
   1d138:	1e05      	subs	r5, r0, #0
   1d13a:	db31      	blt.n	1d1a0 <onoff_request+0x72>
   1d13c:	f04f 0320 	mov.w	r3, #32
   1d140:	f3ef 8111 	mrs	r1, BASEPRI
   1d144:	f383 8811 	msr	BASEPRI, r3
   1d148:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1d14c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1d14e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1d150:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1d154:	42ab      	cmp	r3, r5
   1d156:	f000 0207 	and.w	r2, r0, #7
   1d15a:	d02e      	beq.n	1d1ba <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1d15c:	2a02      	cmp	r2, #2
   1d15e:	d10e      	bne.n	1d17e <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1d160:	3301      	adds	r3, #1
   1d162:	8363      	strh	r3, [r4, #26]
	rv = state;
   1d164:	4615      	mov	r5, r2
		notify = true;
   1d166:	2301      	movs	r3, #1
	__asm__ volatile(
   1d168:	f381 8811 	msr	BASEPRI, r1
   1d16c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1d170:	b1b3      	cbz	r3, 1d1a0 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1d172:	2300      	movs	r3, #0
   1d174:	4631      	mov	r1, r6
   1d176:	4620      	mov	r0, r4
   1d178:	f7ff ff92 	bl	1d0a0 <notify_one>
   1d17c:	e010      	b.n	1d1a0 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1d17e:	0783      	lsls	r3, r0, #30
   1d180:	d001      	beq.n	1d186 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1d182:	2a06      	cmp	r2, #6
   1d184:	d10e      	bne.n	1d1a4 <onoff_request+0x76>
	parent->next = child;
   1d186:	2300      	movs	r3, #0
   1d188:	6033      	str	r3, [r6, #0]
	return list->tail;
   1d18a:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   1d18c:	b993      	cbnz	r3, 1d1b4 <onoff_request+0x86>
	list->head = node;
   1d18e:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1d192:	4615      	mov	r5, r2
   1d194:	b962      	cbnz	r2, 1d1b0 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1d196:	460a      	mov	r2, r1
   1d198:	4620      	mov	r0, r4
   1d19a:	2102      	movs	r1, #2
   1d19c:	f7e8 f8f2 	bl	5384 <process_event>
		}
	}

	return rv;
}
   1d1a0:	4628      	mov	r0, r5
   1d1a2:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1d1a4:	2a05      	cmp	r2, #5
   1d1a6:	bf0c      	ite	eq
   1d1a8:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   1d1ac:	f06f 0504 	mvnne.w	r5, #4
   1d1b0:	2300      	movs	r3, #0
   1d1b2:	e7d9      	b.n	1d168 <onoff_request+0x3a>
	parent->next = child;
   1d1b4:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1d1b6:	6066      	str	r6, [r4, #4]
}
   1d1b8:	e7eb      	b.n	1d192 <onoff_request+0x64>
		rv = -EAGAIN;
   1d1ba:	f06f 050a 	mvn.w	r5, #10
   1d1be:	e7f7      	b.n	1d1b0 <onoff_request+0x82>

0001d1c0 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   1d1c0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d1c2:	f04f 0320 	mov.w	r3, #32
   1d1c6:	f3ef 8211 	mrs	r2, BASEPRI
   1d1ca:	f383 8811 	msr	BASEPRI, r3
   1d1ce:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1d1d2:	8b04      	ldrh	r4, [r0, #24]
   1d1d4:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   1d1d8:	2c02      	cmp	r4, #2
   1d1da:	d00a      	beq.n	1d1f2 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   1d1dc:	2c01      	cmp	r4, #1
   1d1de:	bf0c      	ite	eq
   1d1e0:	f06f 0004 	mvneq.w	r0, #4
   1d1e4:	f06f 0022 	mvnne.w	r0, #34	; 0x22
	__asm__ volatile(
   1d1e8:	f382 8811 	msr	BASEPRI, r2
   1d1ec:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   1d1f0:	e008      	b.n	1d204 <onoff_release+0x44>
	mgr->refs -= 1U;
   1d1f2:	8b43      	ldrh	r3, [r0, #26]
   1d1f4:	3b01      	subs	r3, #1
   1d1f6:	b29b      	uxth	r3, r3
   1d1f8:	8343      	strh	r3, [r0, #26]
	if (stop) {
   1d1fa:	b923      	cbnz	r3, 1d206 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   1d1fc:	4621      	mov	r1, r4
   1d1fe:	f7e8 f8c1 	bl	5384 <process_event>
	int rv = state;
   1d202:	4620      	mov	r0, r4
}
   1d204:	bd10      	pop	{r4, pc}
	int rv = state;
   1d206:	4620      	mov	r0, r4
   1d208:	e7ee      	b.n	1d1e8 <onoff_release+0x28>

0001d20a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1d20a:	4604      	mov	r4, r0
   1d20c:	b508      	push	{r3, lr}
   1d20e:	4608      	mov	r0, r1
   1d210:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1d212:	461a      	mov	r2, r3
   1d214:	47a0      	blx	r4
	return z_impl_k_current_get();
   1d216:	f7fe ff49 	bl	1c0ac <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1d21a:	f7ea f92b 	bl	7474 <z_impl_k_thread_abort>

0001d21e <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1d21e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1d220:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1d224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1d228:	bf2c      	ite	cs
   1d22a:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1d22e:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1d232:	4770      	bx	lr

0001d234 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1d234:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1d238:	6880      	ldr	r0, [r0, #8]
   1d23a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1d23e:	bf2c      	ite	cs
   1d240:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1d244:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1d248:	4770      	bx	lr

0001d24a <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1d24a:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1d24c:	2201      	movs	r2, #1
   1d24e:	f7ff ffe6 	bl	1d21e <chunk_field>
}
   1d252:	40d0      	lsrs	r0, r2
   1d254:	bd08      	pop	{r3, pc}

0001d256 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1d256:	6883      	ldr	r3, [r0, #8]
   1d258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1d25c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1d260:	d308      	bcc.n	1d274 <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1d262:	684b      	ldr	r3, [r1, #4]
		if (used) {
   1d264:	b11a      	cbz	r2, 1d26e <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1d266:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1d26a:	604b      	str	r3, [r1, #4]
   1d26c:	4770      	bx	lr
   1d26e:	f023 0301 	bic.w	r3, r3, #1
   1d272:	e7fa      	b.n	1d26a <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1d274:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   1d276:	b11a      	cbz	r2, 1d280 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1d278:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1d27c:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1d27e:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1d280:	f023 0301 	bic.w	r3, r3, #1
   1d284:	e7fa      	b.n	1d27c <set_chunk_used+0x26>

0001d286 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1d286:	0053      	lsls	r3, r2, #1
   1d288:	2201      	movs	r2, #1
   1d28a:	f7ff bfd3 	b.w	1d234 <chunk_set>

0001d28e <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1d28e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1d292:	bf2c      	ite	cs
   1d294:	2008      	movcs	r0, #8
   1d296:	2004      	movcc	r0, #4
	return chunksz * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1d298:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1d29a:	3008      	adds	r0, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1d29c:	eba1 00d0 	sub.w	r0, r1, r0, lsr #3
	return 31 - __builtin_clz(usable_sz);
   1d2a0:	fab0 f080 	clz	r0, r0
}
   1d2a4:	f1c0 001f 	rsb	r0, r0, #31
   1d2a8:	4770      	bx	lr

0001d2aa <free_list_remove_bidx>:

	return ret;
}

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   1d2aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d2ae:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1d2b0:	2203      	movs	r2, #3
   1d2b2:	460e      	mov	r6, r1
   1d2b4:	4604      	mov	r4, r0
   1d2b6:	f7ff ffb2 	bl	1d21e <chunk_field>

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
   1d2ba:	4286      	cmp	r6, r0
   1d2bc:	4605      	mov	r5, r0
   1d2be:	f107 0804 	add.w	r8, r7, #4
   1d2c2:	d10b      	bne.n	1d2dc <free_list_remove_bidx+0x32>
		/* this is the last chunk */
		h->avail_buckets &= ~(1 << bidx);
   1d2c4:	2301      	movs	r3, #1
   1d2c6:	fa03 f707 	lsl.w	r7, r3, r7
   1d2ca:	68e3      	ldr	r3, [r4, #12]
   1d2cc:	ea23 0307 	bic.w	r3, r3, r7
   1d2d0:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1d2d2:	2300      	movs	r3, #0
   1d2d4:	f844 3028 	str.w	r3, [r4, r8, lsl #2]

		b->next = second;
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
   1d2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1d2dc:	4631      	mov	r1, r6
   1d2de:	2202      	movs	r2, #2
   1d2e0:	4620      	mov	r0, r4
   1d2e2:	f7ff ff9c 	bl	1d21e <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   1d2e6:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   1d2e8:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1d2ea:	4601      	mov	r1, r0
		b->next = second;
   1d2ec:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1d2f0:	4620      	mov	r0, r4
   1d2f2:	2203      	movs	r2, #3
   1d2f4:	f7ff ff9e 	bl	1d234 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1d2f8:	4633      	mov	r3, r6
   1d2fa:	4629      	mov	r1, r5
   1d2fc:	4620      	mov	r0, r4
   1d2fe:	2202      	movs	r2, #2
}
   1d300:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d304:	f7ff bf96 	b.w	1d234 <chunk_set>

0001d308 <free_list_remove>:

static void free_list_remove(struct z_heap *h, chunkid_t c)
{
   1d308:	b570      	push	{r4, r5, r6, lr}
	return big_heap_chunks(h->end_chunk);
   1d30a:	6886      	ldr	r6, [r0, #8]
   1d30c:	460d      	mov	r5, r1
   1d30e:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1d310:	f7ff ff9b 	bl	1d24a <chunk_size>
   1d314:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1d318:	4601      	mov	r1, r0
   1d31a:	d301      	bcc.n	1d320 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1d31c:	2801      	cmp	r0, #1
   1d31e:	d009      	beq.n	1d334 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1d320:	4630      	mov	r0, r6
   1d322:	f7ff ffb4 	bl	1d28e <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   1d326:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1d328:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1d32a:	4620      	mov	r0, r4
	}
}
   1d32c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   1d330:	f7ff bfbb 	b.w	1d2aa <free_list_remove_bidx>
}
   1d334:	bd70      	pop	{r4, r5, r6, pc}

0001d336 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1d336:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d33a:	4604      	mov	r4, r0
	int bi = bucket_idx(h, sz);
   1d33c:	6880      	ldr	r0, [r0, #8]
{
   1d33e:	460f      	mov	r7, r1
	int bi = bucket_idx(h, sz);
   1d340:	f7ff ffa5 	bl	1d28e <bucket_idx.isra.0>
   1d344:	eb04 0980 	add.w	r9, r4, r0, lsl #2
   1d348:	4605      	mov	r5, r0
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1d34a:	f8d9 8010 	ldr.w	r8, [r9, #16]
   1d34e:	f1b8 0f00 	cmp.w	r8, #0
   1d352:	d01c      	beq.n	1d38e <alloc_chunk+0x58>
   1d354:	2603      	movs	r6, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1d356:	f8d9 1010 	ldr.w	r1, [r9, #16]
			if (chunk_size(h, c) >= sz) {
   1d35a:	9101      	str	r1, [sp, #4]
   1d35c:	4620      	mov	r0, r4
   1d35e:	f7ff ff74 	bl	1d24a <chunk_size>
   1d362:	42b8      	cmp	r0, r7
   1d364:	9901      	ldr	r1, [sp, #4]
   1d366:	d308      	bcc.n	1d37a <alloc_chunk+0x44>
				free_list_remove_bidx(h, c, bi);
   1d368:	462a      	mov	r2, r5

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1d36a:	4620      	mov	r0, r4
   1d36c:	f7ff ff9d 	bl	1d2aa <free_list_remove_bidx>
   1d370:	9901      	ldr	r1, [sp, #4]
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1d372:	4608      	mov	r0, r1
   1d374:	b003      	add	sp, #12
   1d376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return chunk_field(h, c, FREE_NEXT);
   1d37a:	2203      	movs	r2, #3
   1d37c:	4620      	mov	r0, r4
   1d37e:	f7ff ff4e 	bl	1d21e <chunk_field>
		} while (--i && b->next != first);
   1d382:	3e01      	subs	r6, #1
			b->next = next_free_chunk(h, c);
   1d384:	f8c9 0010 	str.w	r0, [r9, #16]
		} while (--i && b->next != first);
   1d388:	d001      	beq.n	1d38e <alloc_chunk+0x58>
   1d38a:	4580      	cmp	r8, r0
   1d38c:	d1e3      	bne.n	1d356 <alloc_chunk+0x20>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1d38e:	68e3      	ldr	r3, [r4, #12]
   1d390:	3501      	adds	r5, #1
   1d392:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d396:	40a9      	lsls	r1, r5
	if (bmask != 0U) {
   1d398:	4019      	ands	r1, r3
   1d39a:	d0ea      	beq.n	1d372 <alloc_chunk+0x3c>
		int minbucket = __builtin_ctz(bmask);
   1d39c:	fa91 f2a1 	rbit	r2, r1
   1d3a0:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1d3a4:	1d13      	adds	r3, r2, #4
   1d3a6:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1d3aa:	9101      	str	r1, [sp, #4]
   1d3ac:	e7dd      	b.n	1d36a <alloc_chunk+0x34>

0001d3ae <split_chunks>:
{
   1d3ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d3b0:	4614      	mov	r4, r2
   1d3b2:	4605      	mov	r5, r0
   1d3b4:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
   1d3b6:	f7ff ff48 	bl	1d24a <chunk_size>
	chunksz_t lsz = rc - lc;
   1d3ba:	1ba3      	subs	r3, r4, r6
	chunksz_t rsz = sz0 - lsz;
   1d3bc:	1b32      	subs	r2, r6, r4
   1d3be:	1817      	adds	r7, r2, r0
	set_chunk_size(h, lc, lsz);
   1d3c0:	4631      	mov	r1, r6
   1d3c2:	461a      	mov	r2, r3
   1d3c4:	4628      	mov	r0, r5
   1d3c6:	9301      	str	r3, [sp, #4]
   1d3c8:	f7ff ff5d 	bl	1d286 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1d3cc:	463a      	mov	r2, r7
   1d3ce:	4621      	mov	r1, r4
   1d3d0:	4628      	mov	r0, r5
   1d3d2:	f7ff ff58 	bl	1d286 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1d3d6:	9b01      	ldr	r3, [sp, #4]
   1d3d8:	2200      	movs	r2, #0
   1d3da:	4621      	mov	r1, r4
   1d3dc:	4628      	mov	r0, r5
   1d3de:	f7ff ff29 	bl	1d234 <chunk_set>
	return c + chunk_size(h, c);
   1d3e2:	4621      	mov	r1, r4
   1d3e4:	4628      	mov	r0, r5
   1d3e6:	f7ff ff30 	bl	1d24a <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1d3ea:	463b      	mov	r3, r7
   1d3ec:	1821      	adds	r1, r4, r0
   1d3ee:	2200      	movs	r2, #0
   1d3f0:	4628      	mov	r0, r5
}
   1d3f2:	b003      	add	sp, #12
   1d3f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1d3f8:	f7ff bf1c 	b.w	1d234 <chunk_set>

0001d3fc <merge_chunks>:
{
   1d3fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d3fe:	4616      	mov	r6, r2
   1d400:	4604      	mov	r4, r0
   1d402:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1d404:	f7ff ff21 	bl	1d24a <chunk_size>
   1d408:	4631      	mov	r1, r6
   1d40a:	4605      	mov	r5, r0
   1d40c:	4620      	mov	r0, r4
   1d40e:	f7ff ff1c 	bl	1d24a <chunk_size>
   1d412:	182b      	adds	r3, r5, r0
	set_chunk_size(h, lc, newsz);
   1d414:	461a      	mov	r2, r3
   1d416:	4639      	mov	r1, r7
   1d418:	4620      	mov	r0, r4
   1d41a:	9301      	str	r3, [sp, #4]
   1d41c:	f7ff ff33 	bl	1d286 <set_chunk_size>
	return c + chunk_size(h, c);
   1d420:	4631      	mov	r1, r6
   1d422:	4620      	mov	r0, r4
   1d424:	f7ff ff11 	bl	1d24a <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1d428:	9b01      	ldr	r3, [sp, #4]
   1d42a:	1831      	adds	r1, r6, r0
   1d42c:	2200      	movs	r2, #0
   1d42e:	4620      	mov	r0, r4
}
   1d430:	b003      	add	sp, #12
   1d432:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1d436:	f7ff befd 	b.w	1d234 <chunk_set>

0001d43a <free_list_add>:
{
   1d43a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return big_heap_chunks(h->end_chunk);
   1d43e:	6886      	ldr	r6, [r0, #8]
   1d440:	460d      	mov	r5, r1
   1d442:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1d444:	f7ff ff01 	bl	1d24a <chunk_size>
   1d448:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1d44c:	4601      	mov	r1, r0
   1d44e:	d301      	bcc.n	1d454 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1d450:	2801      	cmp	r0, #1
   1d452:	d033      	beq.n	1d4bc <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1d454:	4630      	mov	r0, r6
   1d456:	f7ff ff1a 	bl	1d28e <bucket_idx.isra.0>
	if (b->next == 0U) {
   1d45a:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1d45e:	6916      	ldr	r6, [r2, #16]
   1d460:	b99e      	cbnz	r6, 1d48a <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1d462:	2301      	movs	r3, #1
   1d464:	fa03 f000 	lsl.w	r0, r3, r0
   1d468:	68e3      	ldr	r3, [r4, #12]
   1d46a:	4303      	orrs	r3, r0
   1d46c:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1d46e:	4629      	mov	r1, r5
		b->next = c;
   1d470:	6115      	str	r5, [r2, #16]
   1d472:	462b      	mov	r3, r5
   1d474:	2202      	movs	r2, #2
   1d476:	4620      	mov	r0, r4
   1d478:	f7ff fedc 	bl	1d234 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1d47c:	2203      	movs	r2, #3
   1d47e:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1d480:	4620      	mov	r0, r4
}
   1d482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d486:	f7ff bed5 	b.w	1d234 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1d48a:	2202      	movs	r2, #2
   1d48c:	4631      	mov	r1, r6
   1d48e:	4620      	mov	r0, r4
   1d490:	f7ff fec5 	bl	1d21e <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1d494:	4629      	mov	r1, r5
   1d496:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1d498:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1d49a:	4620      	mov	r0, r4
   1d49c:	f7ff feca 	bl	1d234 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1d4a0:	2203      	movs	r2, #3
   1d4a2:	4633      	mov	r3, r6
   1d4a4:	4629      	mov	r1, r5
   1d4a6:	4620      	mov	r0, r4
   1d4a8:	f7ff fec4 	bl	1d234 <chunk_set>
   1d4ac:	4639      	mov	r1, r7
   1d4ae:	462b      	mov	r3, r5
   1d4b0:	4620      	mov	r0, r4
   1d4b2:	f7ff febf 	bl	1d234 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1d4b6:	2202      	movs	r2, #2
   1d4b8:	4631      	mov	r1, r6
   1d4ba:	e7e1      	b.n	1d480 <free_list_add+0x46>
   1d4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d4c0 <free_chunk>:
{
   1d4c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d4c2:	4605      	mov	r5, r0
   1d4c4:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   1d4c6:	f7ff fec0 	bl	1d24a <chunk_size>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1d4ca:	2201      	movs	r2, #1
	return c + chunk_size(h, c);
   1d4cc:	1821      	adds	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1d4ce:	4628      	mov	r0, r5
   1d4d0:	9101      	str	r1, [sp, #4]
   1d4d2:	f7ff fea4 	bl	1d21e <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1d4d6:	f010 0f01 	tst.w	r0, #1
   1d4da:	9901      	ldr	r1, [sp, #4]
   1d4dc:	d10b      	bne.n	1d4f6 <free_chunk+0x36>
		free_list_remove(h, right_chunk(h, c));
   1d4de:	4628      	mov	r0, r5
   1d4e0:	f7ff ff12 	bl	1d308 <free_list_remove>
	return c + chunk_size(h, c);
   1d4e4:	4621      	mov	r1, r4
   1d4e6:	4628      	mov	r0, r5
   1d4e8:	f7ff feaf 	bl	1d24a <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1d4ec:	4621      	mov	r1, r4
   1d4ee:	1822      	adds	r2, r4, r0
   1d4f0:	4628      	mov	r0, r5
   1d4f2:	f7ff ff83 	bl	1d3fc <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1d4f6:	2200      	movs	r2, #0
   1d4f8:	4621      	mov	r1, r4
   1d4fa:	4628      	mov	r0, r5
   1d4fc:	f7ff fe8f 	bl	1d21e <chunk_field>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1d500:	2201      	movs	r2, #1
	return c - chunk_field(h, c, LEFT_SIZE);
   1d502:	1a21      	subs	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1d504:	4628      	mov	r0, r5
   1d506:	9101      	str	r1, [sp, #4]
   1d508:	f7ff fe89 	bl	1d21e <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1d50c:	ea10 0602 	ands.w	r6, r0, r2
   1d510:	9901      	ldr	r1, [sp, #4]
   1d512:	d112      	bne.n	1d53a <free_chunk+0x7a>
		free_list_remove(h, left_chunk(h, c));
   1d514:	4628      	mov	r0, r5
   1d516:	f7ff fef7 	bl	1d308 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1d51a:	4621      	mov	r1, r4
   1d51c:	4632      	mov	r2, r6
   1d51e:	4628      	mov	r0, r5
   1d520:	f7ff fe7d 	bl	1d21e <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1d524:	4622      	mov	r2, r4
   1d526:	1a21      	subs	r1, r4, r0
   1d528:	4628      	mov	r0, r5
   1d52a:	f7ff ff67 	bl	1d3fc <merge_chunks>
   1d52e:	4621      	mov	r1, r4
   1d530:	4632      	mov	r2, r6
   1d532:	4628      	mov	r0, r5
   1d534:	f7ff fe73 	bl	1d21e <chunk_field>
   1d538:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1d53a:	4621      	mov	r1, r4
   1d53c:	4628      	mov	r0, r5
}
   1d53e:	b002      	add	sp, #8
   1d540:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_list_add(h, c);
   1d544:	f7ff bf79 	b.w	1d43a <free_list_add>

0001d548 <sys_heap_free>:
{
   1d548:	b507      	push	{r0, r1, r2, lr}
	if (mem == NULL) {
   1d54a:	b199      	cbz	r1, 1d574 <sys_heap_free+0x2c>
   1d54c:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1d54e:	6883      	ldr	r3, [r0, #8]
   1d550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d554:	bf2c      	ite	cs
   1d556:	2308      	movcs	r3, #8
   1d558:	2304      	movcc	r3, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1d55a:	1ac9      	subs	r1, r1, r3
   1d55c:	1a09      	subs	r1, r1, r0
   1d55e:	08c9      	lsrs	r1, r1, #3
	set_chunk_used(h, c, false);
   1d560:	2200      	movs	r2, #0
   1d562:	9101      	str	r1, [sp, #4]
   1d564:	f7ff fe77 	bl	1d256 <set_chunk_used>
	free_chunk(h, c);
   1d568:	9901      	ldr	r1, [sp, #4]
}
   1d56a:	b003      	add	sp, #12
   1d56c:	f85d eb04 	ldr.w	lr, [sp], #4
	free_chunk(h, c);
   1d570:	f7ff bfa6 	b.w	1d4c0 <free_chunk>
}
   1d574:	b003      	add	sp, #12
   1d576:	f85d fb04 	ldr.w	pc, [sp], #4

0001d57a <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1d57a:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1d57c:	6806      	ldr	r6, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   1d57e:	b909      	cbnz	r1, 1d584 <sys_heap_alloc+0xa>
		return NULL;
   1d580:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   1d582:	bd70      	pop	{r4, r5, r6, pc}
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   1d584:	68b3      	ldr	r3, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1d586:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1d58a:	d9f9      	bls.n	1d580 <sys_heap_alloc+0x6>
	return big_heap(h) ? 8 : 4;
   1d58c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d590:	bf2c      	ite	cs
   1d592:	2208      	movcs	r2, #8
   1d594:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1d596:	1dcc      	adds	r4, r1, #7
   1d598:	4414      	add	r4, r2
   1d59a:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1d59c:	4621      	mov	r1, r4
   1d59e:	4630      	mov	r0, r6
   1d5a0:	f7ff fec9 	bl	1d336 <alloc_chunk>
	if (c == 0U) {
   1d5a4:	4605      	mov	r5, r0
   1d5a6:	2800      	cmp	r0, #0
   1d5a8:	d0ea      	beq.n	1d580 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1d5aa:	4601      	mov	r1, r0
   1d5ac:	4630      	mov	r0, r6
   1d5ae:	f7ff fe4c 	bl	1d24a <chunk_size>
   1d5b2:	42a0      	cmp	r0, r4
   1d5b4:	d909      	bls.n	1d5ca <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   1d5b6:	442c      	add	r4, r5
   1d5b8:	4629      	mov	r1, r5
   1d5ba:	4630      	mov	r0, r6
   1d5bc:	4622      	mov	r2, r4
   1d5be:	f7ff fef6 	bl	1d3ae <split_chunks>
		free_list_add(h, c + chunk_sz);
   1d5c2:	4621      	mov	r1, r4
   1d5c4:	4630      	mov	r0, r6
   1d5c6:	f7ff ff38 	bl	1d43a <free_list_add>
	set_chunk_used(h, c, true);
   1d5ca:	4629      	mov	r1, r5
   1d5cc:	4630      	mov	r0, r6
   1d5ce:	2201      	movs	r2, #1
   1d5d0:	f7ff fe41 	bl	1d256 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1d5d4:	68b3      	ldr	r3, [r6, #8]
   1d5d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d5da:	bf2c      	ite	cs
   1d5dc:	2308      	movcs	r3, #8
   1d5de:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1d5e0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1d5e4:	4428      	add	r0, r5
	return chunk_mem(h, c);
   1d5e6:	e7cc      	b.n	1d582 <sys_heap_alloc+0x8>

0001d5e8 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1d5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1d5ec:	424b      	negs	r3, r1
	struct z_heap *h = heap->heap;
   1d5ee:	6806      	ldr	r6, [r0, #0]
	rew = align & -align;
   1d5f0:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
   1d5f4:	ea31 0303 	bics.w	r3, r1, r3
{
   1d5f8:	4614      	mov	r4, r2
	return big_heap_chunks(h->end_chunk);
   1d5fa:	68b2      	ldr	r2, [r6, #8]
	if (align != rew) {
   1d5fc:	d00e      	beq.n	1d61c <sys_heap_aligned_alloc+0x34>
	return big_heap(h) ? 8 : 4;
   1d5fe:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1d602:	bf2c      	ite	cs
   1d604:	2308      	movcs	r3, #8
   1d606:	2304      	movcc	r3, #4
   1d608:	42bb      	cmp	r3, r7
   1d60a:	bf28      	it	cs
   1d60c:	463b      	movcs	r3, r7
   1d60e:	46b9      	mov	r9, r7
		align -= rew;
   1d610:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1d612:	b994      	cbnz	r4, 1d63a <sys_heap_aligned_alloc+0x52>
		return NULL;
   1d614:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   1d616:	4628      	mov	r0, r5
   1d618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d61c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1d620:	bf34      	ite	cc
   1d622:	2304      	movcc	r3, #4
   1d624:	2308      	movcs	r3, #8
		if (align <= chunk_header_bytes(h)) {
   1d626:	4299      	cmp	r1, r3
   1d628:	d804      	bhi.n	1d634 <sys_heap_aligned_alloc+0x4c>
			return sys_heap_alloc(heap, bytes);
   1d62a:	4621      	mov	r1, r4
}
   1d62c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1d630:	f7ff bfa3 	b.w	1d57a <sys_heap_alloc>
		rew = 0;
   1d634:	f04f 0900 	mov.w	r9, #0
   1d638:	e7eb      	b.n	1d612 <sys_heap_aligned_alloc+0x2a>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1d63a:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
   1d63e:	d9e9      	bls.n	1d614 <sys_heap_aligned_alloc+0x2c>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   1d640:	1de1      	adds	r1, r4, #7
   1d642:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1d646:	4439      	add	r1, r7
   1d648:	bf2c      	ite	cs
   1d64a:	2208      	movcs	r2, #8
   1d64c:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1d64e:	1ac9      	subs	r1, r1, r3
   1d650:	4411      	add	r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1d652:	08c9      	lsrs	r1, r1, #3
   1d654:	4630      	mov	r0, r6
   1d656:	f7ff fe6e 	bl	1d336 <alloc_chunk>
	if (c0 == 0) {
   1d65a:	4680      	mov	r8, r0
   1d65c:	2800      	cmp	r0, #0
   1d65e:	d0d9      	beq.n	1d614 <sys_heap_aligned_alloc+0x2c>
	return big_heap(h) ? 8 : 4;
   1d660:	68b3      	ldr	r3, [r6, #8]
   1d662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d666:	bf2c      	ite	cs
   1d668:	2308      	movcs	r3, #8
   1d66a:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1d66c:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   1d670:	441d      	add	r5, r3
   1d672:	1e7a      	subs	r2, r7, #1
   1d674:	4435      	add	r5, r6
   1d676:	427f      	negs	r7, r7
   1d678:	4415      	add	r5, r2
   1d67a:	403d      	ands	r5, r7
   1d67c:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1d680:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1d682:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1d684:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1d686:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1d688:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1d68c:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1d68e:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1d692:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1d696:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1d69a:	d208      	bcs.n	1d6ae <sys_heap_aligned_alloc+0xc6>
		split_chunks(h, c0, c);
   1d69c:	4601      	mov	r1, r0
   1d69e:	463a      	mov	r2, r7
   1d6a0:	4630      	mov	r0, r6
   1d6a2:	f7ff fe84 	bl	1d3ae <split_chunks>
		free_list_add(h, c0);
   1d6a6:	4641      	mov	r1, r8
   1d6a8:	4630      	mov	r0, r6
   1d6aa:	f7ff fec6 	bl	1d43a <free_list_add>
	return c + chunk_size(h, c);
   1d6ae:	4639      	mov	r1, r7
   1d6b0:	4630      	mov	r0, r6
   1d6b2:	f7ff fdca 	bl	1d24a <chunk_size>
   1d6b6:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1d6b8:	4284      	cmp	r4, r0
   1d6ba:	d208      	bcs.n	1d6ce <sys_heap_aligned_alloc+0xe6>
		split_chunks(h, c, c_end);
   1d6bc:	4639      	mov	r1, r7
   1d6be:	4630      	mov	r0, r6
   1d6c0:	4622      	mov	r2, r4
   1d6c2:	f7ff fe74 	bl	1d3ae <split_chunks>
		free_list_add(h, c_end);
   1d6c6:	4621      	mov	r1, r4
   1d6c8:	4630      	mov	r0, r6
   1d6ca:	f7ff feb6 	bl	1d43a <free_list_add>
	set_chunk_used(h, c, true);
   1d6ce:	2201      	movs	r2, #1
   1d6d0:	4639      	mov	r1, r7
   1d6d2:	4630      	mov	r0, r6
   1d6d4:	f7ff fdbf 	bl	1d256 <set_chunk_used>
	return mem;
   1d6d8:	e79d      	b.n	1d616 <sys_heap_aligned_alloc+0x2e>

0001d6da <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1d6da:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1d6de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d6e0:	bf2c      	ite	cs
   1d6e2:	2408      	movcs	r4, #8
   1d6e4:	2404      	movcc	r4, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1d6e6:	1b14      	subs	r4, r2, r4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1d6e8:	1dce      	adds	r6, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1d6ea:	440c      	add	r4, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1d6ec:	f026 0607 	bic.w	r6, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1d6f0:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1d6f4:	1ba4      	subs	r4, r4, r6
   1d6f6:	08e4      	lsrs	r4, r4, #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1d6f8:	2300      	movs	r3, #0
	heap->heap = h;
   1d6fa:	6006      	str	r6, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1d6fc:	4621      	mov	r1, r4
	h->end_chunk = heap_sz;
   1d6fe:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
   1d700:	60f3      	str	r3, [r6, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1d702:	4620      	mov	r0, r4
   1d704:	f7ff fdc3 	bl	1d28e <bucket_idx.isra.0>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1d708:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1d70a:	351b      	adds	r5, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1d70c:	1c41      	adds	r1, r0, #1
   1d70e:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1d710:	f106 0210 	add.w	r2, r6, #16
		h->buckets[i].next = 0;
   1d714:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   1d716:	428b      	cmp	r3, r1
   1d718:	db2e      	blt.n	1d778 <sys_heap_init+0x9e>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1d71a:	462a      	mov	r2, r5
   1d71c:	4630      	mov	r0, r6
   1d71e:	2100      	movs	r1, #0
   1d720:	f7ff fdb1 	bl	1d286 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1d724:	2300      	movs	r3, #0
   1d726:	461a      	mov	r2, r3
   1d728:	4619      	mov	r1, r3
   1d72a:	4630      	mov	r0, r6
   1d72c:	f7ff fd82 	bl	1d234 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1d730:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
   1d732:	4619      	mov	r1, r3
   1d734:	4630      	mov	r0, r6
   1d736:	2201      	movs	r2, #1
   1d738:	f7ff fd8d 	bl	1d256 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1d73c:	463a      	mov	r2, r7
   1d73e:	4629      	mov	r1, r5
   1d740:	f7ff fda1 	bl	1d286 <set_chunk_size>
   1d744:	462b      	mov	r3, r5
   1d746:	2200      	movs	r2, #0
   1d748:	4629      	mov	r1, r5
   1d74a:	4630      	mov	r0, r6
   1d74c:	f7ff fd72 	bl	1d234 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   1d750:	4621      	mov	r1, r4
   1d752:	4630      	mov	r0, r6
   1d754:	f7ff fd97 	bl	1d286 <set_chunk_size>
   1d758:	463b      	mov	r3, r7
   1d75a:	4621      	mov	r1, r4
   1d75c:	4630      	mov	r0, r6
   1d75e:	2200      	movs	r2, #0
   1d760:	f7ff fd68 	bl	1d234 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   1d764:	4621      	mov	r1, r4
   1d766:	4630      	mov	r0, r6
   1d768:	2201      	movs	r2, #1
   1d76a:	f7ff fd74 	bl	1d256 <set_chunk_used>

	free_list_add(h, chunk0_size);
   1d76e:	4629      	mov	r1, r5
}
   1d770:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1d774:	f7ff be61 	b.w	1d43a <free_list_add>
		h->buckets[i].next = 0;
   1d778:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1d77c:	3301      	adds	r3, #1
   1d77e:	e7ca      	b.n	1d716 <sys_heap_init+0x3c>

0001d780 <_ldiv5>:
	uint32_t v_lo = *v;
   1d780:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   1d784:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   1d786:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   1d78a:	fba2 2403 	umull	r2, r4, r2, r3
   1d78e:	18d5      	adds	r5, r2, r3
   1d790:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   1d794:	fba1 1303 	umull	r1, r3, r1, r3
   1d798:	1852      	adds	r2, r2, r1
   1d79a:	eb44 0403 	adc.w	r4, r4, r3
   1d79e:	1952      	adds	r2, r2, r5
   1d7a0:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   1d7a4:	1889      	adds	r1, r1, r2
   1d7a6:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   1d7aa:	e9c0 1300 	strd	r1, r3, [r0]
}
   1d7ae:	bd30      	pop	{r4, r5, pc}

0001d7b0 <_get_digit>:
	if (*digit_count > 0) {
   1d7b0:	680b      	ldr	r3, [r1, #0]
   1d7b2:	2b00      	cmp	r3, #0
{
   1d7b4:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
   1d7b6:	dd10      	ble.n	1d7da <_get_digit+0x2a>
		--*digit_count;
   1d7b8:	3b01      	subs	r3, #1
   1d7ba:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   1d7bc:	6803      	ldr	r3, [r0, #0]
   1d7be:	6844      	ldr	r4, [r0, #4]
   1d7c0:	220a      	movs	r2, #10
   1d7c2:	fba3 1302 	umull	r1, r3, r3, r2
   1d7c6:	fb02 3304 	mla	r3, r2, r4, r3
		rval = ((*fr >> 60) & 0xF) + '0';
   1d7ca:	0f1a      	lsrs	r2, r3, #28
		*fr &= (BIT64(60) - 1U);
   1d7cc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
   1d7d0:	e9c0 1300 	strd	r1, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   1d7d4:	3230      	adds	r2, #48	; 0x30
}
   1d7d6:	4610      	mov	r0, r2
   1d7d8:	bd10      	pop	{r4, pc}
		rval = '0';
   1d7da:	2230      	movs	r2, #48	; 0x30
   1d7dc:	e7fb      	b.n	1d7d6 <_get_digit+0x26>

0001d7de <encode_uint>:
{
   1d7de:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d7e2:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1d7e4:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   1d7e6:	2b6f      	cmp	r3, #111	; 0x6f
{
   1d7e8:	4680      	mov	r8, r0
   1d7ea:	460f      	mov	r7, r1
   1d7ec:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1d7ee:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1d7f2:	d029      	beq.n	1d848 <encode_uint+0x6a>
   1d7f4:	d824      	bhi.n	1d840 <encode_uint+0x62>
		return 16;
   1d7f6:	2b58      	cmp	r3, #88	; 0x58
   1d7f8:	bf14      	ite	ne
   1d7fa:	260a      	movne	r6, #10
   1d7fc:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   1d7fe:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1d802:	4632      	mov	r2, r6
   1d804:	2300      	movs	r3, #0
   1d806:	4640      	mov	r0, r8
   1d808:	4639      	mov	r1, r7
   1d80a:	f7e3 f937 	bl	a7c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1d80e:	2a09      	cmp	r2, #9
   1d810:	b2d4      	uxtb	r4, r2
   1d812:	d81e      	bhi.n	1d852 <encode_uint+0x74>
   1d814:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1d816:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1d818:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1d81a:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1d81e:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1d822:	d301      	bcc.n	1d828 <encode_uint+0x4a>
   1d824:	45d1      	cmp	r9, sl
   1d826:	d811      	bhi.n	1d84c <encode_uint+0x6e>
	if (conv->flag_hash) {
   1d828:	782b      	ldrb	r3, [r5, #0]
   1d82a:	069b      	lsls	r3, r3, #26
   1d82c:	d505      	bpl.n	1d83a <encode_uint+0x5c>
		if (radix == 8) {
   1d82e:	2e08      	cmp	r6, #8
   1d830:	d115      	bne.n	1d85e <encode_uint+0x80>
			conv->altform_0 = true;
   1d832:	78ab      	ldrb	r3, [r5, #2]
   1d834:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1d838:	70ab      	strb	r3, [r5, #2]
}
   1d83a:	4648      	mov	r0, r9
   1d83c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1d840:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1d844:	2b70      	cmp	r3, #112	; 0x70
   1d846:	e7d7      	b.n	1d7f8 <encode_uint+0x1a>
	switch (specifier) {
   1d848:	2608      	movs	r6, #8
   1d84a:	e7d8      	b.n	1d7fe <encode_uint+0x20>
		value /= radix;
   1d84c:	4680      	mov	r8, r0
   1d84e:	460f      	mov	r7, r1
   1d850:	e7d7      	b.n	1d802 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1d852:	f1bb 0f19 	cmp.w	fp, #25
   1d856:	bf94      	ite	ls
   1d858:	3437      	addls	r4, #55	; 0x37
   1d85a:	3457      	addhi	r4, #87	; 0x57
   1d85c:	e7db      	b.n	1d816 <encode_uint+0x38>
		} else if (radix == 16) {
   1d85e:	2e10      	cmp	r6, #16
   1d860:	d1eb      	bne.n	1d83a <encode_uint+0x5c>
			conv->altform_0c = true;
   1d862:	78ab      	ldrb	r3, [r5, #2]
   1d864:	f043 0310 	orr.w	r3, r3, #16
   1d868:	e7e6      	b.n	1d838 <encode_uint+0x5a>

0001d86a <outs>:
{
   1d86a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d86e:	4680      	mov	r8, r0
   1d870:	4689      	mov	r9, r1
   1d872:	4616      	mov	r6, r2
   1d874:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1d876:	4615      	mov	r5, r2
   1d878:	42bd      	cmp	r5, r7
   1d87a:	eba5 0406 	sub.w	r4, r5, r6
   1d87e:	d305      	bcc.n	1d88c <outs+0x22>
   1d880:	b10f      	cbz	r7, 1d886 <outs+0x1c>
	return (int)count;
   1d882:	4620      	mov	r0, r4
   1d884:	e008      	b.n	1d898 <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1d886:	782b      	ldrb	r3, [r5, #0]
   1d888:	2b00      	cmp	r3, #0
   1d88a:	d0fa      	beq.n	1d882 <outs+0x18>
		int rc = out((int)*sp++, ctx);
   1d88c:	f815 0b01 	ldrb.w	r0, [r5], #1
   1d890:	4649      	mov	r1, r9
   1d892:	47c0      	blx	r8
		if (rc < 0) {
   1d894:	2800      	cmp	r0, #0
   1d896:	daef      	bge.n	1d878 <outs+0xe>
}
   1d898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001d89c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1d89c:	4770      	bx	lr

0001d89e <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1d89e:	2300      	movs	r3, #0
	list->head = NULL;
   1d8a0:	e9c0 3300 	strd	r3, r3, [r0]
}
   1d8a4:	4770      	bx	lr

0001d8a6 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1d8a6:	6803      	ldr	r3, [r0, #0]
   1d8a8:	b923      	cbnz	r3, 1d8b4 <log_list_add_tail+0xe>
		list->head = msg;
   1d8aa:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1d8ac:	2300      	movs	r3, #0
	list->tail = msg;
   1d8ae:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1d8b0:	600b      	str	r3, [r1, #0]
}
   1d8b2:	4770      	bx	lr
		list->tail->next = msg;
   1d8b4:	6843      	ldr	r3, [r0, #4]
   1d8b6:	6019      	str	r1, [r3, #0]
   1d8b8:	e7f8      	b.n	1d8ac <log_list_add_tail+0x6>

0001d8ba <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1d8ba:	6800      	ldr	r0, [r0, #0]
   1d8bc:	4770      	bx	lr

0001d8be <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   1d8be:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   1d8c0:	b10b      	cbz	r3, 1d8c6 <log_list_head_get+0x8>
		list->head = list->head->next;
   1d8c2:	681a      	ldr	r2, [r3, #0]
   1d8c4:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   1d8c6:	4618      	mov	r0, r3
   1d8c8:	4770      	bx	lr

0001d8ca <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1d8ca:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1d8cc:	f7e8 f900 	bl	5ad0 <log_msg_chunk_alloc>

	if (msg != NULL) {
   1d8d0:	b118      	cbz	r0, 1d8da <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1d8d2:	2301      	movs	r3, #1
   1d8d4:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1d8d6:	2300      	movs	r3, #0
   1d8d8:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   1d8da:	bd08      	pop	{r3, pc}

0001d8dc <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1d8dc:	f7e8 bf9c 	b.w	6818 <sys_clock_cycle_get_32>

0001d8e0 <dummy_timestamp>:
   1d8e0:	2000      	movs	r0, #0
   1d8e2:	4770      	bx	lr

0001d8e4 <z_log_get_s_mask>:
{
   1d8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d8e6:	4605      	mov	r5, r0
	uint32_t mask = 0U;
   1d8e8:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   1d8ea:	4603      	mov	r3, r0
	bool arm = false;
   1d8ec:	4602      	mov	r2, r0
				mask |= BIT(arg);
   1d8ee:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   1d8f0:	f815 4b01 	ldrb.w	r4, [r5], #1
   1d8f4:	b10c      	cbz	r4, 1d8fa <z_log_get_s_mask+0x16>
   1d8f6:	428b      	cmp	r3, r1
   1d8f8:	d300      	bcc.n	1d8fc <z_log_get_s_mask+0x18>
}
   1d8fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   1d8fc:	2c25      	cmp	r4, #37	; 0x25
   1d8fe:	d102      	bne.n	1d906 <z_log_get_s_mask+0x22>
			arm = !arm;
   1d900:	f082 0201 	eor.w	r2, r2, #1
   1d904:	e7f4      	b.n	1d8f0 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   1d906:	2a00      	cmp	r2, #0
   1d908:	d0f2      	beq.n	1d8f0 <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1d90a:	f044 0620 	orr.w	r6, r4, #32
   1d90e:	3e61      	subs	r6, #97	; 0x61
   1d910:	2e19      	cmp	r6, #25
   1d912:	d8ed      	bhi.n	1d8f0 <z_log_get_s_mask+0xc>
			if (curr == 's') {
   1d914:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   1d916:	bf04      	itt	eq
   1d918:	fa07 f203 	lsleq.w	r2, r7, r3
   1d91c:	4310      	orreq	r0, r2
			arg++;
   1d91e:	3301      	adds	r3, #1
			arm = false;
   1d920:	2200      	movs	r2, #0
   1d922:	e7e5      	b.n	1d8f0 <z_log_get_s_mask+0xc>

0001d924 <log_0>:
{
   1d924:	b513      	push	{r0, r1, r4, lr}
   1d926:	4604      	mov	r4, r0
   1d928:	9101      	str	r1, [sp, #4]
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1d92a:	f7ff ffce 	bl	1d8ca <z_log_msg_std_alloc>

	if (msg != NULL) {
   1d92e:	b130      	cbz	r0, 1d93e <log_0+0x1a>
		msg_finalize(msg, src_level);
   1d930:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   1d932:	6104      	str	r4, [r0, #16]
}
   1d934:	b002      	add	sp, #8
   1d936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1d93a:	f7e8 b807 	b.w	594c <msg_finalize>
}
   1d93e:	b002      	add	sp, #8
   1d940:	bd10      	pop	{r4, pc}

0001d942 <log_1>:
{
   1d942:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d944:	460c      	mov	r4, r1
   1d946:	4611      	mov	r1, r2
   1d948:	4605      	mov	r5, r0
   1d94a:	9101      	str	r1, [sp, #4]
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1d94c:	f7ff ffbd 	bl	1d8ca <z_log_msg_std_alloc>

	if (msg != NULL) {
   1d950:	b160      	cbz	r0, 1d96c <log_1+0x2a>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1d952:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   1d954:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1d956:	2501      	movs	r5, #1
   1d958:	f365 1207 	bfi	r2, r5, #4, #4
   1d95c:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   1d95e:	9901      	ldr	r1, [sp, #4]
		msg->payload.single.args[0] = arg1;
   1d960:	6144      	str	r4, [r0, #20]
}
   1d962:	b003      	add	sp, #12
   1d964:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		msg_finalize(msg, src_level);
   1d968:	f7e7 bff0 	b.w	594c <msg_finalize>
}
   1d96c:	b003      	add	sp, #12
   1d96e:	bd30      	pop	{r4, r5, pc}

0001d970 <log_2>:
{
   1d970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d972:	460e      	mov	r6, r1
   1d974:	4619      	mov	r1, r3
   1d976:	4607      	mov	r7, r0
   1d978:	4615      	mov	r5, r2
   1d97a:	9101      	str	r1, [sp, #4]
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1d97c:	f7ff ffa5 	bl	1d8ca <z_log_msg_std_alloc>

	if (msg != NULL) {
   1d980:	b168      	cbz	r0, 1d99e <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1d982:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1d984:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1d986:	2202      	movs	r2, #2
   1d988:	f362 1307 	bfi	r3, r2, #4, #4
   1d98c:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   1d98e:	9901      	ldr	r1, [sp, #4]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1d990:	e9c0 6505 	strd	r6, r5, [r0, #20]
}
   1d994:	b003      	add	sp, #12
   1d996:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		msg_finalize(msg, src_level);
   1d99a:	f7e7 bfd7 	b.w	594c <msg_finalize>
}
   1d99e:	b003      	add	sp, #12
   1d9a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d9a2 <log_3>:
{
   1d9a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1d9a6:	460f      	mov	r7, r1
   1d9a8:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   1d9ac:	9101      	str	r1, [sp, #4]
   1d9ae:	4680      	mov	r8, r0
   1d9b0:	4616      	mov	r6, r2
   1d9b2:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1d9b4:	f7ff ff89 	bl	1d8ca <z_log_msg_std_alloc>

	if (msg != NULL) {
   1d9b8:	b178      	cbz	r0, 1d9da <log_3+0x38>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1d9ba:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1d9bc:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1d9c0:	2203      	movs	r2, #3
   1d9c2:	f362 1307 	bfi	r3, r2, #4, #4
   1d9c6:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   1d9c8:	9901      	ldr	r1, [sp, #4]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
		msg->payload.single.args[2] = arg3;
   1d9ca:	61c5      	str	r5, [r0, #28]
		msg->payload.single.args[1] = arg2;
   1d9cc:	e9c0 7605 	strd	r7, r6, [r0, #20]
}
   1d9d0:	b002      	add	sp, #8
   1d9d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1d9d6:	f7e7 bfb9 	b.w	594c <msg_finalize>
}
   1d9da:	b002      	add	sp, #8
   1d9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d9e0 <log_n>:
{
   1d9e0:	b510      	push	{r4, lr}
   1d9e2:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1d9e4:	f000 f8b9 	bl	1db5a <log_msg_create_n>
		if (msg == NULL) {
   1d9e8:	b120      	cbz	r0, 1d9f4 <log_n+0x14>
		msg_finalize(msg, src_level);
   1d9ea:	4621      	mov	r1, r4
}
   1d9ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1d9f0:	f7e7 bfac 	b.w	594c <msg_finalize>
}
   1d9f4:	bd10      	pop	{r4, pc}

0001d9f6 <log_printk>:
{
   1d9f6:	b500      	push	{lr}
   1d9f8:	b0a3      	sub	sp, #140	; 0x8c
   1d9fa:	4602      	mov	r2, r0
   1d9fc:	460b      	mov	r3, r1
			length = vsnprintk(str, sizeof(str), fmt, ap);
   1d9fe:	a801      	add	r0, sp, #4
   1da00:	2181      	movs	r1, #129	; 0x81
   1da02:	f7e7 fcab 	bl	535c <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
   1da06:	2881      	cmp	r0, #129	; 0x81
   1da08:	4602      	mov	r2, r0
   1da0a:	a901      	add	r1, sp, #4
   1da0c:	bf28      	it	cs
   1da0e:	2281      	movcs	r2, #129	; 0x81
   1da10:	2000      	movs	r0, #0
   1da12:	f000 f8fe 	bl	1dc12 <log_msg_hexdump_create>
			if (msg == NULL) {
   1da16:	b118      	cbz	r0, 1da20 <log_printk+0x2a>
			msg_finalize(msg, src_level_union.structure);
   1da18:	f04f 0100 	mov.w	r1, #0
   1da1c:	f7e7 ff96 	bl	594c <msg_finalize>
}
   1da20:	b023      	add	sp, #140	; 0x8c
   1da22:	f85d fb04 	ldr.w	pc, [sp], #4

0001da26 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1da26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1da2a:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1da2c:	8903      	ldrh	r3, [r0, #8]
{
   1da2e:	f89d 7020 	ldrb.w	r7, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1da32:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   1da36:	42a3      	cmp	r3, r4
{
   1da38:	460e      	mov	r6, r1
	if (offset >= available_len) {
   1da3a:	d803      	bhi.n	1da44 <log_msg_hexdump_data_op+0x1e>
		*length = 0;
   1da3c:	2300      	movs	r3, #0
   1da3e:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1da40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1da44:	6811      	ldr	r1, [r2, #0]
   1da46:	4421      	add	r1, r4
   1da48:	4299      	cmp	r1, r3
		*length = available_len - offset;
   1da4a:	bf84      	itt	hi
   1da4c:	1b19      	subhi	r1, r3, r4
   1da4e:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1da50:	2b0c      	cmp	r3, #12
	req_len = *length;
   1da52:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1da56:	d92b      	bls.n	1dab0 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   1da58:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1da5a:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   1da5e:	d82e      	bhi.n	1dabe <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
   1da60:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1da62:	2308      	movs	r3, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1da64:	454b      	cmp	r3, r9
   1da66:	bf28      	it	cs
   1da68:	464b      	movcs	r3, r9
   1da6a:	461d      	mov	r5, r3
			(void)memcpy(&head_data[offset], data, cpy_len);
   1da6c:	4420      	add	r0, r4
   1da6e:	461a      	mov	r2, r3
		if (put_op) {
   1da70:	b317      	cbz	r7, 1dab8 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1da72:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   1da74:	f001 fd30 	bl	1f4d8 <memcpy>
		req_len -= cpy_len;
   1da78:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1da7c:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   1da7e:	f1b9 0f00 	cmp.w	r9, #0
   1da82:	d0dd      	beq.n	1da40 <log_msg_hexdump_data_op+0x1a>
   1da84:	f1b8 0f00 	cmp.w	r8, #0
   1da88:	d0da      	beq.n	1da40 <log_msg_hexdump_data_op+0x1a>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1da8a:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1da8e:	454d      	cmp	r5, r9
   1da90:	bf28      	it	cs
   1da92:	464d      	movcs	r5, r9
			(void)memcpy(&cont->payload.bytes[offset],
   1da94:	1d20      	adds	r0, r4, #4
   1da96:	4440      	add	r0, r8
   1da98:	462a      	mov	r2, r5
		if (put_op) {
   1da9a:	b1bf      	cbz	r7, 1dacc <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   1da9c:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   1da9e:	f001 fd1b 	bl	1f4d8 <memcpy>
		req_len -= cpy_len;
   1daa2:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1daa6:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   1daaa:	442e      	add	r6, r5
		offset = 0;
   1daac:	2400      	movs	r4, #0
   1daae:	e7e6      	b.n	1da7e <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   1dab0:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1dab2:	f04f 0800 	mov.w	r8, #0
   1dab6:	e7d5      	b.n	1da64 <log_msg_hexdump_data_op+0x3e>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1dab8:	4601      	mov	r1, r0
   1daba:	4630      	mov	r0, r6
   1dabc:	e7da      	b.n	1da74 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   1dabe:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1dac0:	2c1b      	cmp	r4, #27
   1dac2:	d9dc      	bls.n	1da7e <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   1dac4:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   1dac8:	3c1c      	subs	r4, #28
   1daca:	e7f9      	b.n	1dac0 <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1dacc:	4601      	mov	r1, r0
   1dace:	4630      	mov	r0, r6
   1dad0:	e7e5      	b.n	1da9e <log_msg_hexdump_data_op+0x78>

0001dad2 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1dad2:	3004      	adds	r0, #4
   1dad4:	f3bf 8f5b 	dmb	ish
   1dad8:	e850 3f00 	ldrex	r3, [r0]
   1dadc:	3301      	adds	r3, #1
   1dade:	e840 3200 	strex	r2, r3, [r0]
   1dae2:	2a00      	cmp	r2, #0
   1dae4:	d1f8      	bne.n	1dad8 <log_msg_get+0x6>
   1dae6:	f3bf 8f5b 	dmb	ish
}
   1daea:	4770      	bx	lr

0001daec <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1daec:	7a40      	ldrb	r0, [r0, #9]
}
   1daee:	0900      	lsrs	r0, r0, #4
   1daf0:	4770      	bx	lr

0001daf2 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1daf2:	7a43      	ldrb	r3, [r0, #9]
   1daf4:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1daf8:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1dafc:	d216      	bcs.n	1db2c <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1dafe:	2a03      	cmp	r2, #3
   1db00:	d803      	bhi.n	1db0a <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   1db02:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1db06:	6940      	ldr	r0, [r0, #20]
   1db08:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1db0a:	2901      	cmp	r1, #1
   1db0c:	d803      	bhi.n	1db16 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1db0e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1db12:	6980      	ldr	r0, [r0, #24]
   1db14:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1db16:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1db18:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1db1a:	2906      	cmp	r1, #6
   1db1c:	d803      	bhi.n	1db26 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1db1e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1db22:	6848      	ldr	r0, [r1, #4]
   1db24:	4770      	bx	lr
		cont = cont->next;
   1db26:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   1db28:	3907      	subs	r1, #7
		cont = cont->next;
   1db2a:	e7f6      	b.n	1db1a <log_msg_arg_get+0x28>
		return 0;
   1db2c:	2000      	movs	r0, #0
}
   1db2e:	4770      	bx	lr

0001db30 <log_msg_put>:
{
   1db30:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1db32:	1d02      	adds	r2, r0, #4
   1db34:	f3bf 8f5b 	dmb	ish
   1db38:	e852 1f00 	ldrex	r1, [r2]
   1db3c:	3901      	subs	r1, #1
   1db3e:	e842 1c00 	strex	ip, r1, [r2]
   1db42:	f1bc 0f00 	cmp.w	ip, #0
   1db46:	d1f7      	bne.n	1db38 <log_msg_put+0x8>
   1db48:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1db4c:	685b      	ldr	r3, [r3, #4]
   1db4e:	b90b      	cbnz	r3, 1db54 <log_msg_put+0x24>
		msg_free(msg);
   1db50:	f7e7 bfd2 	b.w	5af8 <msg_free>
}
   1db54:	4770      	bx	lr

0001db56 <log_msg_str_get>:
}
   1db56:	6900      	ldr	r0, [r0, #16]
   1db58:	4770      	bx	lr

0001db5a <log_msg_create_n>:
{
   1db5a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db5e:	4680      	mov	r8, r0
   1db60:	460f      	mov	r7, r1
   1db62:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1db64:	f7e7 ffb4 	bl	5ad0 <log_msg_chunk_alloc>
	if (msg != NULL) {
   1db68:	4604      	mov	r4, r0
   1db6a:	b358      	cbz	r0, 1dbc4 <log_msg_create_n+0x6a>
		msg->hdr.ref_cnt = 1;
   1db6c:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1db6e:	f04f 0a00 	mov.w	sl, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1db72:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1db74:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1db76:	f8a0 a008 	strh.w	sl, [r0, #8]
   1db7a:	d90c      	bls.n	1db96 <log_msg_create_n+0x3c>
	msg->hdr.params.generic.ext = 1;
   1db7c:	7a03      	ldrb	r3, [r0, #8]
	*next = NULL;
   1db7e:	f8c0 a014 	str.w	sl, [r0, #20]
	msg->hdr.params.generic.ext = 1;
   1db82:	f043 0302 	orr.w	r3, r3, #2
   1db86:	7203      	strb	r3, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1db88:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
   1db8c:	f100 0b14 	add.w	fp, r0, #20
	while (n > 0) {
   1db90:	f1b9 0f00 	cmp.w	r9, #0
   1db94:	dc0e      	bgt.n	1dbb4 <log_msg_create_n+0x5a>
		msg->hdr.params.std.nargs = nargs;
   1db96:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   1db98:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1db9c:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1dba0:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1dba2:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1dba4:	d819      	bhi.n	1dbda <log_msg_create_n+0x80>
		(void)memcpy(msg->payload.single.args, args,
   1dba6:	00aa      	lsls	r2, r5, #2
   1dba8:	4639      	mov	r1, r7
   1dbaa:	f104 0014 	add.w	r0, r4, #20
   1dbae:	f001 fc93 	bl	1f4d8 <memcpy>
	while (nargs != 0U) {
   1dbb2:	e007      	b.n	1dbc4 <log_msg_create_n+0x6a>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1dbb4:	f7e7 ff8c 	bl	5ad0 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1dbb8:	4606      	mov	r6, r0
   1dbba:	b930      	cbnz	r0, 1dbca <log_msg_create_n+0x70>
			msg_free(msg);
   1dbbc:	4620      	mov	r0, r4
   1dbbe:	f7e7 ff9b 	bl	5af8 <msg_free>
			return NULL;
   1dbc2:	4634      	mov	r4, r6
}
   1dbc4:	4620      	mov	r0, r4
   1dbc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1dbca:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1dbce:	f1a9 0907 	sub.w	r9, r9, #7
   1dbd2:	f8c0 a000 	str.w	sl, [r0]
		next = &cont->next;
   1dbd6:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1dbd8:	e7da      	b.n	1db90 <log_msg_create_n+0x36>
		(void)memcpy(msg->payload.ext.data.args, args,
   1dbda:	4639      	mov	r1, r7
   1dbdc:	2208      	movs	r2, #8
   1dbde:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1dbe2:	f8d4 8014 	ldr.w	r8, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1dbe6:	f001 fc77 	bl	1f4d8 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1dbea:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1dbec:	3708      	adds	r7, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1dbee:	2d07      	cmp	r5, #7
   1dbf0:	462e      	mov	r6, r5
   1dbf2:	bf28      	it	cs
   1dbf4:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1dbf6:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1dbfa:	4639      	mov	r1, r7
   1dbfc:	f108 0004 	add.w	r0, r8, #4
   1dc00:	464a      	mov	r2, r9
   1dc02:	f001 fc69 	bl	1f4d8 <memcpy>
	while (nargs != 0U) {
   1dc06:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   1dc08:	f8d8 8000 	ldr.w	r8, [r8]
		args += cpy_args;
   1dc0c:	444f      	add	r7, r9
	while (nargs != 0U) {
   1dc0e:	d1ee      	bne.n	1dbee <log_msg_create_n+0x94>
   1dc10:	e7d8      	b.n	1dbc4 <log_msg_create_n+0x6a>

0001dc12 <log_msg_hexdump_create>:
{
   1dc12:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1dc16:	f643 75ff 	movw	r5, #16383	; 0x3fff
   1dc1a:	4295      	cmp	r5, r2
{
   1dc1c:	4607      	mov	r7, r0
   1dc1e:	9101      	str	r1, [sp, #4]
   1dc20:	4616      	mov	r6, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1dc22:	bf28      	it	cs
   1dc24:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   1dc26:	f7e7 ff53 	bl	5ad0 <log_msg_chunk_alloc>
	if (msg == NULL) {
   1dc2a:	4604      	mov	r4, r0
   1dc2c:	b388      	cbz	r0, 1dc92 <log_msg_hexdump_create+0x80>
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1dc2e:	8902      	ldrh	r2, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1dc30:	9901      	ldr	r1, [sp, #4]
	msg->str = str;
   1dc32:	6107      	str	r7, [r0, #16]
	msg->hdr.ref_cnt = 1;
   1dc34:	2301      	movs	r3, #1
   1dc36:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1dc38:	00ab      	lsls	r3, r5, #2
   1dc3a:	f043 0301 	orr.w	r3, r3, #1
   1dc3e:	f002 0202 	and.w	r2, r2, #2
   1dc42:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1dc44:	2e0c      	cmp	r6, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1dc46:	8103      	strh	r3, [r0, #8]
		(void)memcpy(msg->payload.single.bytes, data, length);
   1dc48:	f100 0814 	add.w	r8, r0, #20
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1dc4c:	d919      	bls.n	1dc82 <log_msg_hexdump_create+0x70>
		(void)memcpy(msg->payload.ext.data.bytes,
   1dc4e:	2208      	movs	r2, #8
   1dc50:	3018      	adds	r0, #24
   1dc52:	f001 fc41 	bl	1f4d8 <memcpy>
		msg->hdr.params.generic.ext = 1;
   1dc56:	7a23      	ldrb	r3, [r4, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1dc58:	9901      	ldr	r1, [sp, #4]
		msg->payload.ext.next = NULL;
   1dc5a:	f04f 0900 	mov.w	r9, #0
		msg->hdr.params.generic.ext = 1;
   1dc5e:	f043 0302 	orr.w	r3, r3, #2
		msg->payload.ext.next = NULL;
   1dc62:	f8c4 9014 	str.w	r9, [r4, #20]
		msg->hdr.params.generic.ext = 1;
   1dc66:	7223      	strb	r3, [r4, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1dc68:	f101 0608 	add.w	r6, r1, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1dc6c:	3d08      	subs	r5, #8
	while (length > 0) {
   1dc6e:	b185      	cbz	r5, 1dc92 <log_msg_hexdump_create+0x80>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1dc70:	f7e7 ff2e 	bl	5ad0 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1dc74:	4607      	mov	r7, r0
   1dc76:	b980      	cbnz	r0, 1dc9a <log_msg_hexdump_create+0x88>
			msg_free(msg);
   1dc78:	4620      	mov	r0, r4
   1dc7a:	f7e7 ff3d 	bl	5af8 <msg_free>
			return NULL;
   1dc7e:	463c      	mov	r4, r7
   1dc80:	e007      	b.n	1dc92 <log_msg_hexdump_create+0x80>
		(void)memcpy(msg->payload.single.bytes, data, length);
   1dc82:	462a      	mov	r2, r5
   1dc84:	4640      	mov	r0, r8
   1dc86:	f001 fc27 	bl	1f4d8 <memcpy>
		msg->hdr.params.generic.ext = 0;
   1dc8a:	7a23      	ldrb	r3, [r4, #8]
   1dc8c:	f36f 0341 	bfc	r3, #1, #1
   1dc90:	7223      	strb	r3, [r4, #8]
}
   1dc92:	4620      	mov	r0, r4
   1dc94:	b003      	add	sp, #12
   1dc96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   1dc9a:	2d1c      	cmp	r5, #28
   1dc9c:	462f      	mov	r7, r5
   1dc9e:	bf28      	it	cs
   1dca0:	271c      	movcs	r7, #28
		*prev_cont = cont;
   1dca2:	f8c8 0000 	str.w	r0, [r8]
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   1dca6:	4631      	mov	r1, r6
		cont->next = NULL;
   1dca8:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   1dcac:	4680      	mov	r8, r0
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   1dcae:	463a      	mov	r2, r7
   1dcb0:	3004      	adds	r0, #4
   1dcb2:	f001 fc11 	bl	1f4d8 <memcpy>
		data += chunk_length;
   1dcb6:	443e      	add	r6, r7
		length -= chunk_length;
   1dcb8:	1bed      	subs	r5, r5, r7
   1dcba:	e7d8      	b.n	1dc6e <log_msg_hexdump_create+0x5c>

0001dcbc <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   1dcbc:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1dcbe:	2400      	movs	r4, #0
   1dcc0:	9400      	str	r4, [sp, #0]
   1dcc2:	f7ff feb0 	bl	1da26 <log_msg_hexdump_data_op>
}
   1dcc6:	b002      	add	sp, #8
   1dcc8:	bd10      	pop	{r4, pc}

0001dcca <buffer_write>:
{
   1dcca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dccc:	4606      	mov	r6, r0
   1dcce:	460d      	mov	r5, r1
   1dcd0:	4614      	mov	r4, r2
   1dcd2:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1dcd4:	4621      	mov	r1, r4
   1dcd6:	4628      	mov	r0, r5
   1dcd8:	463a      	mov	r2, r7
   1dcda:	47b0      	blx	r6
	} while (len != 0);
   1dcdc:	1a24      	subs	r4, r4, r0
		buf += processed;
   1dcde:	4405      	add	r5, r0
	} while (len != 0);
   1dce0:	d1f8      	bne.n	1dcd4 <buffer_write+0xa>
}
   1dce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001dce4 <std_print>:
{
   1dce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dce8:	b08e      	sub	sp, #56	; 0x38
   1dcea:	af0e      	add	r7, sp, #56	; 0x38
   1dcec:	4680      	mov	r8, r0
   1dcee:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1dcf0:	f7ff ff31 	bl	1db56 <log_msg_str_get>
   1dcf4:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   1dcf6:	4640      	mov	r0, r8
   1dcf8:	f7ff fef8 	bl	1daec <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1dcfc:	0083      	lsls	r3, r0, #2
   1dcfe:	3307      	adds	r3, #7
   1dd00:	f023 0307 	bic.w	r3, r3, #7
   1dd04:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   1dd08:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1dd0a:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1dd0c:	f04f 0900 	mov.w	r9, #0
   1dd10:	45d1      	cmp	r9, sl
   1dd12:	d116      	bne.n	1dd42 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1dd14:	4640      	mov	r0, r8
   1dd16:	f7ff fee9 	bl	1daec <log_msg_nargs_get>
   1dd1a:	280f      	cmp	r0, #15
   1dd1c:	d81e      	bhi.n	1dd5c <std_print+0x78>
   1dd1e:	e8df f010 	tbh	[pc, r0, lsl #1]
   1dd22:	0019      	.short	0x0019
   1dd24:	00260020 	.word	0x00260020
   1dd28:	0036002d 	.word	0x0036002d
   1dd2c:	004e0041 	.word	0x004e0041
   1dd30:	006e005d 	.word	0x006e005d
   1dd34:	00960081 	.word	0x00960081
   1dd38:	00c600ad 	.word	0x00c600ad
   1dd3c:	00fe00e1 	.word	0x00fe00e1
   1dd40:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   1dd42:	4649      	mov	r1, r9
   1dd44:	4640      	mov	r0, r8
   1dd46:	f7ff fed4 	bl	1daf2 <log_msg_arg_get>
   1dd4a:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   1dd4e:	f109 0901 	add.w	r9, r9, #1
   1dd52:	e7dd      	b.n	1dd10 <std_print+0x2c>
		print_formatted(output, str);
   1dd54:	4631      	mov	r1, r6
   1dd56:	4628      	mov	r0, r5
   1dd58:	f7e7 ff0c 	bl	5b74 <print_formatted>
}
   1dd5c:	46bd      	mov	sp, r7
   1dd5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   1dd62:	6822      	ldr	r2, [r4, #0]
   1dd64:	4631      	mov	r1, r6
   1dd66:	4628      	mov	r0, r5
   1dd68:	f7e7 ff04 	bl	5b74 <print_formatted>
		break;
   1dd6c:	e7f6      	b.n	1dd5c <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   1dd6e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1dd72:	4631      	mov	r1, r6
   1dd74:	4628      	mov	r0, r5
   1dd76:	f7e7 fefd 	bl	5b74 <print_formatted>
		break;
   1dd7a:	e7ef      	b.n	1dd5c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   1dd7c:	68a3      	ldr	r3, [r4, #8]
   1dd7e:	9300      	str	r3, [sp, #0]
   1dd80:	e9d4 2300 	ldrd	r2, r3, [r4]
   1dd84:	4631      	mov	r1, r6
   1dd86:	4628      	mov	r0, r5
   1dd88:	f7e7 fef4 	bl	5b74 <print_formatted>
		break;
   1dd8c:	e7e6      	b.n	1dd5c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1dd8e:	68e3      	ldr	r3, [r4, #12]
   1dd90:	9301      	str	r3, [sp, #4]
   1dd92:	68a3      	ldr	r3, [r4, #8]
   1dd94:	9300      	str	r3, [sp, #0]
   1dd96:	e9d4 2300 	ldrd	r2, r3, [r4]
   1dd9a:	4631      	mov	r1, r6
   1dd9c:	4628      	mov	r0, r5
   1dd9e:	f7e7 fee9 	bl	5b74 <print_formatted>
		break;
   1dda2:	e7db      	b.n	1dd5c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1dda4:	6923      	ldr	r3, [r4, #16]
   1dda6:	9302      	str	r3, [sp, #8]
   1dda8:	68e3      	ldr	r3, [r4, #12]
   1ddaa:	9301      	str	r3, [sp, #4]
   1ddac:	68a3      	ldr	r3, [r4, #8]
   1ddae:	9300      	str	r3, [sp, #0]
   1ddb0:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ddb4:	4631      	mov	r1, r6
   1ddb6:	4628      	mov	r0, r5
   1ddb8:	f7e7 fedc 	bl	5b74 <print_formatted>
		break;
   1ddbc:	e7ce      	b.n	1dd5c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1ddbe:	6963      	ldr	r3, [r4, #20]
   1ddc0:	9303      	str	r3, [sp, #12]
   1ddc2:	6923      	ldr	r3, [r4, #16]
   1ddc4:	9302      	str	r3, [sp, #8]
   1ddc6:	68e3      	ldr	r3, [r4, #12]
   1ddc8:	9301      	str	r3, [sp, #4]
   1ddca:	68a3      	ldr	r3, [r4, #8]
   1ddcc:	9300      	str	r3, [sp, #0]
   1ddce:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ddd2:	4631      	mov	r1, r6
   1ddd4:	4628      	mov	r0, r5
   1ddd6:	f7e7 fecd 	bl	5b74 <print_formatted>
		break;
   1ddda:	e7bf      	b.n	1dd5c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1dddc:	69a3      	ldr	r3, [r4, #24]
   1ddde:	9304      	str	r3, [sp, #16]
   1dde0:	6963      	ldr	r3, [r4, #20]
   1dde2:	9303      	str	r3, [sp, #12]
   1dde4:	6923      	ldr	r3, [r4, #16]
   1dde6:	9302      	str	r3, [sp, #8]
   1dde8:	68e3      	ldr	r3, [r4, #12]
   1ddea:	9301      	str	r3, [sp, #4]
   1ddec:	68a3      	ldr	r3, [r4, #8]
   1ddee:	9300      	str	r3, [sp, #0]
   1ddf0:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ddf4:	4631      	mov	r1, r6
   1ddf6:	4628      	mov	r0, r5
   1ddf8:	f7e7 febc 	bl	5b74 <print_formatted>
		break;
   1ddfc:	e7ae      	b.n	1dd5c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1ddfe:	69e3      	ldr	r3, [r4, #28]
   1de00:	9305      	str	r3, [sp, #20]
   1de02:	69a3      	ldr	r3, [r4, #24]
   1de04:	9304      	str	r3, [sp, #16]
   1de06:	6963      	ldr	r3, [r4, #20]
   1de08:	9303      	str	r3, [sp, #12]
   1de0a:	6923      	ldr	r3, [r4, #16]
   1de0c:	9302      	str	r3, [sp, #8]
   1de0e:	68e3      	ldr	r3, [r4, #12]
   1de10:	9301      	str	r3, [sp, #4]
   1de12:	68a3      	ldr	r3, [r4, #8]
   1de14:	9300      	str	r3, [sp, #0]
   1de16:	e9d4 2300 	ldrd	r2, r3, [r4]
   1de1a:	4631      	mov	r1, r6
   1de1c:	4628      	mov	r0, r5
   1de1e:	f7e7 fea9 	bl	5b74 <print_formatted>
		break;
   1de22:	e79b      	b.n	1dd5c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1de24:	6a23      	ldr	r3, [r4, #32]
   1de26:	9306      	str	r3, [sp, #24]
   1de28:	69e3      	ldr	r3, [r4, #28]
   1de2a:	9305      	str	r3, [sp, #20]
   1de2c:	69a3      	ldr	r3, [r4, #24]
   1de2e:	9304      	str	r3, [sp, #16]
   1de30:	6963      	ldr	r3, [r4, #20]
   1de32:	9303      	str	r3, [sp, #12]
   1de34:	6923      	ldr	r3, [r4, #16]
   1de36:	9302      	str	r3, [sp, #8]
   1de38:	68e3      	ldr	r3, [r4, #12]
   1de3a:	9301      	str	r3, [sp, #4]
   1de3c:	68a3      	ldr	r3, [r4, #8]
   1de3e:	9300      	str	r3, [sp, #0]
   1de40:	e9d4 2300 	ldrd	r2, r3, [r4]
   1de44:	4631      	mov	r1, r6
   1de46:	4628      	mov	r0, r5
   1de48:	f7e7 fe94 	bl	5b74 <print_formatted>
		break;
   1de4c:	e786      	b.n	1dd5c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1de4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1de50:	9307      	str	r3, [sp, #28]
   1de52:	6a23      	ldr	r3, [r4, #32]
   1de54:	9306      	str	r3, [sp, #24]
   1de56:	69e3      	ldr	r3, [r4, #28]
   1de58:	9305      	str	r3, [sp, #20]
   1de5a:	69a3      	ldr	r3, [r4, #24]
   1de5c:	9304      	str	r3, [sp, #16]
   1de5e:	6963      	ldr	r3, [r4, #20]
   1de60:	9303      	str	r3, [sp, #12]
   1de62:	6923      	ldr	r3, [r4, #16]
   1de64:	9302      	str	r3, [sp, #8]
   1de66:	68e3      	ldr	r3, [r4, #12]
   1de68:	9301      	str	r3, [sp, #4]
   1de6a:	68a3      	ldr	r3, [r4, #8]
   1de6c:	9300      	str	r3, [sp, #0]
   1de6e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1de72:	4631      	mov	r1, r6
   1de74:	4628      	mov	r0, r5
   1de76:	f7e7 fe7d 	bl	5b74 <print_formatted>
		break;
   1de7a:	e76f      	b.n	1dd5c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1de7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1de7e:	9308      	str	r3, [sp, #32]
   1de80:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1de82:	9307      	str	r3, [sp, #28]
   1de84:	6a23      	ldr	r3, [r4, #32]
   1de86:	9306      	str	r3, [sp, #24]
   1de88:	69e3      	ldr	r3, [r4, #28]
   1de8a:	9305      	str	r3, [sp, #20]
   1de8c:	69a3      	ldr	r3, [r4, #24]
   1de8e:	9304      	str	r3, [sp, #16]
   1de90:	6963      	ldr	r3, [r4, #20]
   1de92:	9303      	str	r3, [sp, #12]
   1de94:	6923      	ldr	r3, [r4, #16]
   1de96:	9302      	str	r3, [sp, #8]
   1de98:	68e3      	ldr	r3, [r4, #12]
   1de9a:	9301      	str	r3, [sp, #4]
   1de9c:	68a3      	ldr	r3, [r4, #8]
   1de9e:	9300      	str	r3, [sp, #0]
   1dea0:	e9d4 2300 	ldrd	r2, r3, [r4]
   1dea4:	4631      	mov	r1, r6
   1dea6:	4628      	mov	r0, r5
   1dea8:	f7e7 fe64 	bl	5b74 <print_formatted>
		break;
   1deac:	e756      	b.n	1dd5c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1deae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1deb0:	9309      	str	r3, [sp, #36]	; 0x24
   1deb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1deb4:	9308      	str	r3, [sp, #32]
   1deb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1deb8:	9307      	str	r3, [sp, #28]
   1deba:	6a23      	ldr	r3, [r4, #32]
   1debc:	9306      	str	r3, [sp, #24]
   1debe:	69e3      	ldr	r3, [r4, #28]
   1dec0:	9305      	str	r3, [sp, #20]
   1dec2:	69a3      	ldr	r3, [r4, #24]
   1dec4:	9304      	str	r3, [sp, #16]
   1dec6:	6963      	ldr	r3, [r4, #20]
   1dec8:	9303      	str	r3, [sp, #12]
   1deca:	6923      	ldr	r3, [r4, #16]
   1decc:	9302      	str	r3, [sp, #8]
   1dece:	68e3      	ldr	r3, [r4, #12]
   1ded0:	9301      	str	r3, [sp, #4]
   1ded2:	68a3      	ldr	r3, [r4, #8]
   1ded4:	9300      	str	r3, [sp, #0]
   1ded6:	e9d4 2300 	ldrd	r2, r3, [r4]
   1deda:	4631      	mov	r1, r6
   1dedc:	4628      	mov	r0, r5
   1dede:	f7e7 fe49 	bl	5b74 <print_formatted>
		break;
   1dee2:	e73b      	b.n	1dd5c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1dee4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1dee6:	930a      	str	r3, [sp, #40]	; 0x28
   1dee8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1deea:	9309      	str	r3, [sp, #36]	; 0x24
   1deec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1deee:	9308      	str	r3, [sp, #32]
   1def0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1def2:	9307      	str	r3, [sp, #28]
   1def4:	6a23      	ldr	r3, [r4, #32]
   1def6:	9306      	str	r3, [sp, #24]
   1def8:	69e3      	ldr	r3, [r4, #28]
   1defa:	9305      	str	r3, [sp, #20]
   1defc:	69a3      	ldr	r3, [r4, #24]
   1defe:	9304      	str	r3, [sp, #16]
   1df00:	6963      	ldr	r3, [r4, #20]
   1df02:	9303      	str	r3, [sp, #12]
   1df04:	6923      	ldr	r3, [r4, #16]
   1df06:	9302      	str	r3, [sp, #8]
   1df08:	68e3      	ldr	r3, [r4, #12]
   1df0a:	9301      	str	r3, [sp, #4]
   1df0c:	68a3      	ldr	r3, [r4, #8]
   1df0e:	9300      	str	r3, [sp, #0]
   1df10:	e9d4 2300 	ldrd	r2, r3, [r4]
   1df14:	4631      	mov	r1, r6
   1df16:	4628      	mov	r0, r5
   1df18:	f7e7 fe2c 	bl	5b74 <print_formatted>
		break;
   1df1c:	e71e      	b.n	1dd5c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1df1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1df20:	930b      	str	r3, [sp, #44]	; 0x2c
   1df22:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1df24:	930a      	str	r3, [sp, #40]	; 0x28
   1df26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1df28:	9309      	str	r3, [sp, #36]	; 0x24
   1df2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1df2c:	9308      	str	r3, [sp, #32]
   1df2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1df30:	9307      	str	r3, [sp, #28]
   1df32:	6a23      	ldr	r3, [r4, #32]
   1df34:	9306      	str	r3, [sp, #24]
   1df36:	69e3      	ldr	r3, [r4, #28]
   1df38:	9305      	str	r3, [sp, #20]
   1df3a:	69a3      	ldr	r3, [r4, #24]
   1df3c:	9304      	str	r3, [sp, #16]
   1df3e:	6963      	ldr	r3, [r4, #20]
   1df40:	9303      	str	r3, [sp, #12]
   1df42:	6923      	ldr	r3, [r4, #16]
   1df44:	9302      	str	r3, [sp, #8]
   1df46:	68e3      	ldr	r3, [r4, #12]
   1df48:	9301      	str	r3, [sp, #4]
   1df4a:	68a3      	ldr	r3, [r4, #8]
   1df4c:	9300      	str	r3, [sp, #0]
   1df4e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1df52:	4631      	mov	r1, r6
   1df54:	4628      	mov	r0, r5
   1df56:	f7e7 fe0d 	bl	5b74 <print_formatted>
		break;
   1df5a:	e6ff      	b.n	1dd5c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1df5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1df5e:	930c      	str	r3, [sp, #48]	; 0x30
   1df60:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1df62:	930b      	str	r3, [sp, #44]	; 0x2c
   1df64:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1df66:	930a      	str	r3, [sp, #40]	; 0x28
   1df68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1df6a:	9309      	str	r3, [sp, #36]	; 0x24
   1df6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1df6e:	9308      	str	r3, [sp, #32]
   1df70:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1df72:	9307      	str	r3, [sp, #28]
   1df74:	6a23      	ldr	r3, [r4, #32]
   1df76:	9306      	str	r3, [sp, #24]
   1df78:	69e3      	ldr	r3, [r4, #28]
   1df7a:	9305      	str	r3, [sp, #20]
   1df7c:	69a3      	ldr	r3, [r4, #24]
   1df7e:	9304      	str	r3, [sp, #16]
   1df80:	6963      	ldr	r3, [r4, #20]
   1df82:	9303      	str	r3, [sp, #12]
   1df84:	6923      	ldr	r3, [r4, #16]
   1df86:	9302      	str	r3, [sp, #8]
   1df88:	68e3      	ldr	r3, [r4, #12]
   1df8a:	9301      	str	r3, [sp, #4]
   1df8c:	68a3      	ldr	r3, [r4, #8]
   1df8e:	9300      	str	r3, [sp, #0]
   1df90:	e9d4 2300 	ldrd	r2, r3, [r4]
   1df94:	4631      	mov	r1, r6
   1df96:	4628      	mov	r0, r5
   1df98:	f7e7 fdec 	bl	5b74 <print_formatted>
}
   1df9c:	e6de      	b.n	1dd5c <std_print+0x78>

0001df9e <log_output_flush>:
		     output->control_block->offset,
   1df9e:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   1dfa0:	6881      	ldr	r1, [r0, #8]
{
   1dfa2:	b510      	push	{r4, lr}
   1dfa4:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1dfa6:	e9d2 2300 	ldrd	r2, r3, [r2]
   1dfaa:	6800      	ldr	r0, [r0, #0]
   1dfac:	f7ff fe8d 	bl	1dcca <buffer_write>
	output->control_block->offset = 0;
   1dfb0:	6863      	ldr	r3, [r4, #4]
   1dfb2:	2200      	movs	r2, #0
   1dfb4:	601a      	str	r2, [r3, #0]
}
   1dfb6:	bd10      	pop	{r4, pc}

0001dfb8 <out_func>:
{
   1dfb8:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1dfba:	684b      	ldr	r3, [r1, #4]
   1dfbc:	681a      	ldr	r2, [r3, #0]
   1dfbe:	68cb      	ldr	r3, [r1, #12]
   1dfc0:	429a      	cmp	r2, r3
{
   1dfc2:	4605      	mov	r5, r0
   1dfc4:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1dfc6:	d102      	bne.n	1dfce <out_func+0x16>
		log_output_flush(out_ctx);
   1dfc8:	4608      	mov	r0, r1
   1dfca:	f7ff ffe8 	bl	1df9e <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1dfce:	6863      	ldr	r3, [r4, #4]
   1dfd0:	f3bf 8f5b 	dmb	ish
   1dfd4:	e853 2f00 	ldrex	r2, [r3]
   1dfd8:	1c51      	adds	r1, r2, #1
   1dfda:	e843 1000 	strex	r0, r1, [r3]
   1dfde:	2800      	cmp	r0, #0
   1dfe0:	d1f8      	bne.n	1dfd4 <out_func+0x1c>
   1dfe2:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   1dfe6:	68a3      	ldr	r3, [r4, #8]
   1dfe8:	549d      	strb	r5, [r3, r2]
}
   1dfea:	2000      	movs	r0, #0
   1dfec:	bd38      	pop	{r3, r4, r5, pc}

0001dfee <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   1dfee:	b570      	push	{r4, r5, r6, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1dff0:	68ce      	ldr	r6, [r1, #12]
{
   1dff2:	b086      	sub	sp, #24
   1dff4:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1dff6:	4630      	mov	r0, r6
{
   1dff8:	460c      	mov	r4, r1
   1dffa:	e9cd 3204 	strd	r3, r2, [sp, #16]
				 strlen(attr->user_data));
   1dffe:	f001 fa3e 	bl	1f47e <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1e002:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
   1e006:	9100      	str	r1, [sp, #0]
   1e008:	b280      	uxth	r0, r0
   1e00a:	e9cd 6001 	strd	r6, r0, [sp, #4]
   1e00e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   1e012:	4621      	mov	r1, r4
   1e014:	4628      	mov	r0, r5
   1e016:	f002 fe2e 	bl	20c76 <bt_gatt_attr_read>
}
   1e01a:	b006      	add	sp, #24
   1e01c:	bd70      	pop	{r4, r5, r6, pc}

0001e01e <bas_init>:
static int bas_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	return 0;
}
   1e01e:	2000      	movs	r0, #0
   1e020:	4770      	bx	lr

0001e022 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1e022:	2200      	movs	r2, #0
   1e024:	8002      	strh	r2, [r0, #0]
   1e026:	6042      	str	r2, [r0, #4]
}
   1e028:	4770      	bx	lr

0001e02a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1e02a:	6903      	ldr	r3, [r0, #16]
   1e02c:	b2c9      	uxtb	r1, r1
   1e02e:	220c      	movs	r2, #12
   1e030:	fb01 3302 	mla	r3, r1, r2, r3
   1e034:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   1e036:	f000 0007 	and.w	r0, r0, #7
   1e03a:	4770      	bx	lr

0001e03c <set_on_state>:
	__asm__ volatile(
   1e03c:	f04f 0320 	mov.w	r3, #32
   1e040:	f3ef 8211 	mrs	r2, BASEPRI
   1e044:	f383 8811 	msr	BASEPRI, r3
   1e048:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1e04c:	6803      	ldr	r3, [r0, #0]
   1e04e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1e052:	f043 0302 	orr.w	r3, r3, #2
   1e056:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1e058:	f382 8811 	msr	BASEPRI, r2
   1e05c:	f3bf 8f6f 	isb	sy
}
   1e060:	4770      	bx	lr

0001e062 <stop>:
{
   1e062:	4603      	mov	r3, r0
   1e064:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   1e066:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   1e068:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1e06a:	f04f 0420 	mov.w	r4, #32
   1e06e:	f3ef 8611 	mrs	r6, BASEPRI
   1e072:	f384 8811 	msr	BASEPRI, r4
   1e076:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1e07a:	250c      	movs	r5, #12
   1e07c:	fb05 0401 	mla	r4, r5, r1, r0
   1e080:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1e082:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1e086:	d001      	beq.n	1e08c <stop+0x2a>
   1e088:	42a2      	cmp	r2, r4
   1e08a:	d111      	bne.n	1e0b0 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1e08c:	fb05 0001 	mla	r0, r5, r1, r0
   1e090:	2201      	movs	r2, #1
   1e092:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   1e094:	2000      	movs	r0, #0
	__asm__ volatile(
   1e096:	f386 8811 	msr	BASEPRI, r6
   1e09a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1e09e:	b930      	cbnz	r0, 1e0ae <stop+0x4c>
	get_sub_config(dev, type)->stop();
   1e0a0:	685b      	ldr	r3, [r3, #4]
   1e0a2:	220c      	movs	r2, #12
   1e0a4:	fb02 3101 	mla	r1, r2, r1, r3
   1e0a8:	684b      	ldr	r3, [r1, #4]
   1e0aa:	4798      	blx	r3
	return 0;
   1e0ac:	2000      	movs	r0, #0
}
   1e0ae:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   1e0b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e0b4:	e7ef      	b.n	1e096 <stop+0x34>

0001e0b6 <api_stop>:
	return stop(dev, subsys, CTX_API);
   1e0b6:	2280      	movs	r2, #128	; 0x80
   1e0b8:	f7ff bfd3 	b.w	1e062 <stop>

0001e0bc <async_start>:
{
   1e0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e0be:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   1e0c0:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   1e0c2:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1e0c4:	f04f 0520 	mov.w	r5, #32
   1e0c8:	f3ef 8c11 	mrs	ip, BASEPRI
   1e0cc:	f385 8811 	msr	BASEPRI, r5
   1e0d0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1e0d4:	260c      	movs	r6, #12
   1e0d6:	fb06 4601 	mla	r6, r6, r1, r4
   1e0da:	6c35      	ldr	r5, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1e0dc:	f005 0e07 	and.w	lr, r5, #7
   1e0e0:	f1be 0f01 	cmp.w	lr, #1
   1e0e4:	d110      	bne.n	1e108 <async_start+0x4c>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1e0e6:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   1e0e8:	2500      	movs	r5, #0
	__asm__ volatile(
   1e0ea:	f38c 8811 	msr	BASEPRI, ip
   1e0ee:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1e0f2:	b93d      	cbnz	r5, 1e104 <async_start+0x48>
	subdata->cb = cb;
   1e0f4:	260c      	movs	r6, #12
   1e0f6:	4371      	muls	r1, r6
   1e0f8:	440c      	add	r4, r1
	subdata->user_data = user_data;
   1e0fa:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1e0fe:	6843      	ldr	r3, [r0, #4]
   1e100:	585b      	ldr	r3, [r3, r1]
   1e102:	4798      	blx	r3
}
   1e104:	4628      	mov	r0, r5
   1e106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1e108:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
		err = -EALREADY;
   1e10c:	42af      	cmp	r7, r5
   1e10e:	bf14      	ite	ne
   1e110:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   1e114:	f06f 0544 	mvneq.w	r5, #68	; 0x44
   1e118:	e7e7      	b.n	1e0ea <async_start+0x2e>

0001e11a <api_start>:
{
   1e11a:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1e11c:	2480      	movs	r4, #128	; 0x80
   1e11e:	9400      	str	r4, [sp, #0]
   1e120:	f7ff ffcc 	bl	1e0bc <async_start>
}
   1e124:	b002      	add	sp, #8
   1e126:	bd10      	pop	{r4, pc}

0001e128 <onoff_started_callback>:
	return &data->mgr[type];
   1e128:	6900      	ldr	r0, [r0, #16]
{
   1e12a:	b410      	push	{r4}
	return &data->mgr[type];
   1e12c:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1e12e:	241c      	movs	r4, #28
   1e130:	fb03 0004 	mla	r0, r3, r4, r0
   1e134:	2100      	movs	r1, #0
}
   1e136:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
   1e13a:	4710      	bx	r2

0001e13c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1e13c:	2000      	movs	r0, #0
   1e13e:	f7fc bfad 	b.w	1b09c <nrfx_clock_stop>

0001e142 <blocking_start_callback>:
{
   1e142:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1e144:	f7fe b82c 	b.w	1c1a0 <z_impl_k_sem_give>

0001e148 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1e148:	4770      	bx	lr

0001e14a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1e14a:	4770      	bx	lr

0001e14c <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1e14c:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1e14e:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   1e150:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1e152:	bf9c      	itt	ls
   1e154:	6880      	ldrls	r0, [r0, #8]
   1e156:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   1e158:	3b01      	subs	r3, #1
   1e15a:	1a98      	subs	r0, r3, r2
}
   1e15c:	4770      	bx	lr

0001e15e <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1e15e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1e162:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1e166:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1e168:	eba9 0804 	sub.w	r8, r9, r4
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1e16c:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   1e16e:	4590      	cmp	r8, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1e170:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1e172:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   1e174:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   1e176:	d904      	bls.n	1e182 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1e178:	f001 f9ae 	bl	1f4d8 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1e17c:	60ec      	str	r4, [r5, #12]
}
   1e17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1e182:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   1e184:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1e188:	f001 f9a6 	bl	1f4d8 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1e18c:	6868      	ldr	r0, [r5, #4]
   1e18e:	4622      	mov	r2, r4
   1e190:	eb07 0108 	add.w	r1, r7, r8
   1e194:	e7f0      	b.n	1e178 <_WriteNoCheck+0x1a>

0001e196 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1e196:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   1e19a:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1e19c:	4606      	mov	r6, r0
   1e19e:	4689      	mov	r9, r1
   1e1a0:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1e1a2:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1e1a6:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1e1a8:	68b3      	ldr	r3, [r6, #8]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1e1aa:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   1e1ac:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1e1ae:	bf28      	it	cs
   1e1b0:	18e4      	addcs	r4, r4, r3
   1e1b2:	3c01      	subs	r4, #1
   1e1b4:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1e1b6:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1e1b8:	42bc      	cmp	r4, r7
   1e1ba:	bf28      	it	cs
   1e1bc:	463c      	movcs	r4, r7
   1e1be:	4294      	cmp	r4, r2
   1e1c0:	bf28      	it	cs
   1e1c2:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1e1c4:	4649      	mov	r1, r9
   1e1c6:	4428      	add	r0, r5
   1e1c8:	4622      	mov	r2, r4
   1e1ca:	f001 f985 	bl	1f4d8 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1e1ce:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1e1d0:	4425      	add	r5, r4
      WrOff = 0u;
   1e1d2:	42ab      	cmp	r3, r5
   1e1d4:	bf08      	it	eq
   1e1d6:	2500      	moveq	r5, #0
  } while (NumBytes);
   1e1d8:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   1e1da:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1e1dc:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   1e1de:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1e1e0:	d1e1      	bne.n	1e1a6 <_WriteBlocking+0x10>
}
   1e1e2:	4640      	mov	r0, r8
   1e1e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e1e8 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1e1e8:	f7e8 bb30 	b.w	684c <_DoInit>

0001e1ec <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1e1ec:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1e1ee:	f7ff fffb 	bl	1e1e8 <SEGGER_RTT_Init>

	return 0;
}
   1e1f2:	2000      	movs	r0, #0
   1e1f4:	bd08      	pop	{r3, pc}

0001e1f6 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1e1f6:	b538      	push	{r3, r4, r5, lr}
   1e1f8:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1e1fa:	42ab      	cmp	r3, r5
{
   1e1fc:	4611      	mov	r1, r2
   1e1fe:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1e200:	d804      	bhi.n	1e20c <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1e202:	461a      	mov	r2, r3
   1e204:	f001 f968 	bl	1f4d8 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1e208:	4620      	mov	r0, r4
   1e20a:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1e20c:	2400      	movs	r4, #0
   1e20e:	e7fb      	b.n	1e208 <_copy+0x12>

0001e210 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1e210:	f001 b98d 	b.w	1f52e <memset>

0001e214 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1e214:	09c3      	lsrs	r3, r0, #7
   1e216:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1e21a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1e21e:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1e222:	b2c0      	uxtb	r0, r0
   1e224:	4770      	bx	lr

0001e226 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   1e226:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e22a:	4606      	mov	r6, r0
   1e22c:	b0a9      	sub	sp, #164	; 0xa4
   1e22e:	4688      	mov	r8, r1
   1e230:	4614      	mov	r4, r2
   1e232:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1e234:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   1e238:	f7e8 fbbc 	bl	69b4 <uECC_get_rng>
		if (!rng_function ||
   1e23c:	4603      	mov	r3, r0
   1e23e:	2800      	cmp	r0, #0
   1e240:	d03e      	beq.n	1e2c0 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   1e242:	2140      	movs	r1, #64	; 0x40
   1e244:	a808      	add	r0, sp, #32
   1e246:	4798      	blx	r3
		if (!rng_function ||
   1e248:	b3d0      	cbz	r0, 1e2c0 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1e24a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   1e24e:	f112 031f 	adds.w	r3, r2, #31
   1e252:	bf48      	it	mi
   1e254:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   1e258:	466d      	mov	r5, sp
   1e25a:	464a      	mov	r2, r9
   1e25c:	a908      	add	r1, sp, #32
   1e25e:	4628      	mov	r0, r5
   1e260:	f343 1347 	sbfx	r3, r3, #5, #8
   1e264:	f000 fa00 	bl	1e668 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   1e268:	4622      	mov	r2, r4
   1e26a:	4629      	mov	r1, r5
   1e26c:	a818      	add	r0, sp, #96	; 0x60
   1e26e:	f000 fe16 	bl	1ee9e <EccPoint_compute_public_key>
   1e272:	b318      	cbz	r0, 1e2bc <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   1e274:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   1e278:	1dd9      	adds	r1, r3, #7
   1e27a:	bf48      	it	mi
   1e27c:	f103 010e 	addmi.w	r1, r3, #14
   1e280:	462a      	mov	r2, r5
   1e282:	4640      	mov	r0, r8
   1e284:	10c9      	asrs	r1, r1, #3
   1e286:	f000 fe32 	bl	1eeee <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   1e28a:	f994 1001 	ldrsb.w	r1, [r4, #1]
   1e28e:	aa18      	add	r2, sp, #96	; 0x60
   1e290:	4630      	mov	r0, r6
   1e292:	f000 fe2c 	bl	1eeee <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1e296:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   1e29a:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1e29e:	ab18      	add	r3, sp, #96	; 0x60
   1e2a0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1e2a4:	1870      	adds	r0, r6, r1
   1e2a6:	f000 fe22 	bl	1eeee <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   1e2aa:	2220      	movs	r2, #32
   1e2ac:	2100      	movs	r1, #0
   1e2ae:	4628      	mov	r0, r5
   1e2b0:	f001 f93d 	bl	1f52e <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   1e2b4:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   1e2b6:	b029      	add	sp, #164	; 0xa4
   1e2b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   1e2bc:	3f01      	subs	r7, #1
   1e2be:	d1bb      	bne.n	1e238 <uECC_make_key+0x12>
        		return 0;
   1e2c0:	2000      	movs	r0, #0
   1e2c2:	e7f8      	b.n	1e2b6 <uECC_make_key+0x90>

0001e2c4 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   1e2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e2c8:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   1e2ca:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   1e2ce:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   1e2d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   1e2d6:	b0a4      	sub	sp, #144	; 0x90
   1e2d8:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   1e2da:	1dda      	adds	r2, r3, #7
   1e2dc:	bf48      	it	mi
   1e2de:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   1e2e2:	ad04      	add	r5, sp, #16
{
   1e2e4:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   1e2e6:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   1e2e8:	4628      	mov	r0, r5
   1e2ea:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   1e2ec:	9502      	str	r5, [sp, #8]
   1e2ee:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   1e2f0:	f000 fe11 	bl	1ef16 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   1e2f4:	463a      	mov	r2, r7
   1e2f6:	4649      	mov	r1, r9
   1e2f8:	a814      	add	r0, sp, #80	; 0x50
   1e2fa:	f000 fe0c 	bl	1ef16 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   1e2fe:	ab14      	add	r3, sp, #80	; 0x50
   1e300:	eb09 0107 	add.w	r1, r9, r7
   1e304:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   1e308:	463a      	mov	r2, r7
   1e30a:	f000 fe04 	bl	1ef16 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   1e30e:	4623      	mov	r3, r4
   1e310:	4632      	mov	r2, r6
   1e312:	4629      	mov	r1, r5
   1e314:	4628      	mov	r0, r5
   1e316:	f000 fd95 	bl	1ee44 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   1e31a:	fab0 f380 	clz	r3, r0
   1e31e:	9401      	str	r4, [sp, #4]
   1e320:	aa24      	add	r2, sp, #144	; 0x90
   1e322:	095b      	lsrs	r3, r3, #5
   1e324:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   1e328:	8863      	ldrh	r3, [r4, #2]
   1e32a:	3301      	adds	r3, #1
   1e32c:	b21b      	sxth	r3, r3
   1e32e:	9300      	str	r3, [sp, #0]
   1e330:	f851 2c88 	ldr.w	r2, [r1, #-136]
   1e334:	a914      	add	r1, sp, #80	; 0x50
   1e336:	2300      	movs	r3, #0
   1e338:	4608      	mov	r0, r1
   1e33a:	f000 fcb6 	bl	1ecaa <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   1e33e:	aa14      	add	r2, sp, #80	; 0x50
   1e340:	4639      	mov	r1, r7
   1e342:	4640      	mov	r0, r8
   1e344:	f000 fdd3 	bl	1eeee <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   1e348:	4621      	mov	r1, r4
   1e34a:	a814      	add	r0, sp, #80	; 0x50
   1e34c:	f000 fc22 	bl	1eb94 <EccPoint_isZero>
   1e350:	af02      	add	r7, sp, #8
   1e352:	4604      	mov	r4, r0
   1e354:	2208      	movs	r2, #8
   1e356:	2100      	movs	r1, #0
   1e358:	4638      	mov	r0, r7
   1e35a:	f001 f8e8 	bl	1f52e <memset>
   1e35e:	2220      	movs	r2, #32
   1e360:	2100      	movs	r1, #0
   1e362:	4630      	mov	r0, r6
   1e364:	f001 f8e3 	bl	1f52e <memset>
   1e368:	2220      	movs	r2, #32
   1e36a:	2100      	movs	r1, #0
   1e36c:	4628      	mov	r0, r5
   1e36e:	f001 f8de 	bl	1f52e <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   1e372:	fab4 f084 	clz	r0, r4
   1e376:	0940      	lsrs	r0, r0, #5
   1e378:	b024      	add	sp, #144	; 0x90
   1e37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001e37e <uECC_vli_add>:
{
   1e37e:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1e380:	2400      	movs	r4, #0
{
   1e382:	4607      	mov	r7, r0
	uECC_word_t carry = 0;
   1e384:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1e386:	b265      	sxtb	r5, r4
   1e388:	42ab      	cmp	r3, r5
   1e38a:	dc00      	bgt.n	1e38e <uECC_vli_add+0x10>
}
   1e38c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   1e38e:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
   1e392:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
   1e396:	442e      	add	r6, r5
   1e398:	4406      	add	r6, r0
	return (p_true*(cond)) | (p_false*(!cond));
   1e39a:	42b5      	cmp	r5, r6
   1e39c:	f000 0501 	and.w	r5, r0, #1
   1e3a0:	bf18      	it	ne
   1e3a2:	2500      	movne	r5, #0
		result[i] = sum;
   1e3a4:	f847 6024 	str.w	r6, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1e3a8:	bf94      	ite	ls
   1e3aa:	4628      	movls	r0, r5
   1e3ac:	f045 0001 	orrhi.w	r0, r5, #1
	for (i = 0; i < num_words; ++i) {
   1e3b0:	3401      	adds	r4, #1
   1e3b2:	e7e8      	b.n	1e386 <uECC_vli_add+0x8>

0001e3b4 <uECC_vli_rshift1>:
	vli += num_words;
   1e3b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   1e3b8:	2300      	movs	r3, #0
	while (vli-- > end) {
   1e3ba:	4288      	cmp	r0, r1
   1e3bc:	d300      	bcc.n	1e3c0 <uECC_vli_rshift1+0xc>
}
   1e3be:	4770      	bx	lr
		uECC_word_t temp = *vli;
   1e3c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   1e3c4:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   1e3c8:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   1e3ca:	07d3      	lsls	r3, r2, #31
   1e3cc:	e7f5      	b.n	1e3ba <uECC_vli_rshift1+0x6>

0001e3ce <vli_modInv_update>:
	if (!EVEN(uv)) {
   1e3ce:	6803      	ldr	r3, [r0, #0]
{
   1e3d0:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   1e3d2:	f013 0601 	ands.w	r6, r3, #1
{
   1e3d6:	4605      	mov	r5, r0
   1e3d8:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   1e3da:	d005      	beq.n	1e3e8 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   1e3dc:	4613      	mov	r3, r2
   1e3de:	460a      	mov	r2, r1
   1e3e0:	4601      	mov	r1, r0
   1e3e2:	f7ff ffcc 	bl	1e37e <uECC_vli_add>
   1e3e6:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   1e3e8:	4621      	mov	r1, r4
   1e3ea:	4628      	mov	r0, r5
   1e3ec:	f7ff ffe2 	bl	1e3b4 <uECC_vli_rshift1>
	if (carry) {
   1e3f0:	b146      	cbz	r6, 1e404 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   1e3f2:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   1e3f6:	3a01      	subs	r2, #1
   1e3f8:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   1e3fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1e400:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   1e404:	bd70      	pop	{r4, r5, r6, pc}

0001e406 <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   1e406:	f04f 0c00 	mov.w	ip, #0
{
   1e40a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   1e40e:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   1e410:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   1e412:	fa4f f98c 	sxtb.w	r9, ip
   1e416:	454b      	cmp	r3, r9
   1e418:	dc16      	bgt.n	1e448 <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1e41a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1e41e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   1e422:	9601      	str	r6, [sp, #4]
   1e424:	f04f 0800 	mov.w	r8, #0
   1e428:	9f01      	ldr	r7, [sp, #4]
   1e42a:	fa53 fe88 	uxtab	lr, r3, r8
   1e42e:	fa4f fe8e 	sxtb.w	lr, lr
   1e432:	45be      	cmp	lr, r7
   1e434:	fa5f f688 	uxtb.w	r6, r8
   1e438:	db26      	blt.n	1e488 <uECC_vli_mult+0x82>
	result[num_words * 2 - 1] = r0;
   1e43a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1e43e:	f840 4c04 	str.w	r4, [r0, #-4]
}
   1e442:	b003      	add	sp, #12
   1e444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   1e448:	f04f 0e00 	mov.w	lr, #0
   1e44c:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   1e450:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   1e452:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1e456:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   1e45a:	fba6 6707 	umull	r6, r7, r6, r7
   1e45e:	1934      	adds	r4, r6, r4
		for (i = 0; i <= k; ++i) {
   1e460:	f10e 0e01 	add.w	lr, lr, #1
   1e464:	417d      	adcs	r5, r7
   1e466:	fa4f f68e 	sxtb.w	r6, lr
   1e46a:	f04f 0b00 	mov.w	fp, #0
   1e46e:	bf28      	it	cs
   1e470:	f04f 0b01 	movcs.w	fp, #1
   1e474:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   1e476:	44d8      	add	r8, fp
		for (i = 0; i <= k; ++i) {
   1e478:	ddeb      	ble.n	1e452 <uECC_vli_mult+0x4c>
		result[k] = r0;
   1e47a:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   1e47e:	462c      	mov	r4, r5
   1e480:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   1e484:	4645      	mov	r5, r8
   1e486:	e7c4      	b.n	1e412 <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1e488:	3601      	adds	r6, #1
   1e48a:	fa4f fc86 	sxtb.w	ip, r6
   1e48e:	eb01 068c 	add.w	r6, r1, ip, lsl #2
   1e492:	ebae 0a0c 	sub.w	sl, lr, ip
   1e496:	46a9      	mov	r9, r5
   1e498:	9600      	str	r6, [sp, #0]
   1e49a:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
   1e49e:	2500      	movs	r5, #0
   1e4a0:	459c      	cmp	ip, r3
   1e4a2:	db05      	blt.n	1e4b0 <uECC_vli_mult+0xaa>
		result[k] = r0;
   1e4a4:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1e4a8:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   1e4ac:	464c      	mov	r4, r9
   1e4ae:	e7bb      	b.n	1e428 <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1e4b0:	9e00      	ldr	r6, [sp, #0]
   1e4b2:	f85a 7904 	ldr.w	r7, [sl], #-4
   1e4b6:	f856 bb04 	ldr.w	fp, [r6], #4
   1e4ba:	9600      	str	r6, [sp, #0]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1e4bc:	fbab 7607 	umull	r7, r6, fp, r7
   1e4c0:	193c      	adds	r4, r7, r4
   1e4c2:	eb56 0909 	adcs.w	r9, r6, r9
   1e4c6:	f04f 0b00 	mov.w	fp, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1e4ca:	f10c 0c01 	add.w	ip, ip, #1
   1e4ce:	bf28      	it	cs
   1e4d0:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   1e4d4:	445d      	add	r5, fp
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1e4d6:	fa4f fc8c 	sxtb.w	ip, ip
   1e4da:	e7e1      	b.n	1e4a0 <uECC_vli_mult+0x9a>

0001e4dc <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   1e4dc:	2300      	movs	r3, #0
{
   1e4de:	b510      	push	{r4, lr}
		 vli[i] = 0;
   1e4e0:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   1e4e2:	b25a      	sxtb	r2, r3
   1e4e4:	4291      	cmp	r1, r2
   1e4e6:	dc00      	bgt.n	1e4ea <uECC_vli_clear+0xe>
}
   1e4e8:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   1e4ea:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1e4ee:	3301      	adds	r3, #1
   1e4f0:	e7f7      	b.n	1e4e2 <uECC_vli_clear+0x6>

0001e4f2 <uECC_vli_isZero>:
{
   1e4f2:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1e4f4:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   1e4f6:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   1e4f8:	b25c      	sxtb	r4, r3
   1e4fa:	42a1      	cmp	r1, r4
   1e4fc:	dc03      	bgt.n	1e506 <uECC_vli_isZero+0x14>
}
   1e4fe:	fab2 f082 	clz	r0, r2
   1e502:	0940      	lsrs	r0, r0, #5
   1e504:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   1e506:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1e50a:	3301      	adds	r3, #1
   1e50c:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   1e50e:	e7f3      	b.n	1e4f8 <uECC_vli_isZero+0x6>

0001e510 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1e510:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1e512:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1e514:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1e518:	f001 011f 	and.w	r1, r1, #31
   1e51c:	fa03 f101 	lsl.w	r1, r3, r1
}
   1e520:	4008      	ands	r0, r1
   1e522:	4770      	bx	lr

0001e524 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1e524:	3901      	subs	r1, #1
   1e526:	b24b      	sxtb	r3, r1
   1e528:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   1e52c:	2b00      	cmp	r3, #0
   1e52e:	da04      	bge.n	1e53a <uECC_vli_numBits+0x16>
	return (i + 1);
   1e530:	3301      	adds	r3, #1
   1e532:	b25b      	sxtb	r3, r3
	if (num_digits == 0) {
   1e534:	b943      	cbnz	r3, 1e548 <uECC_vli_numBits+0x24>
		return 0;
   1e536:	4618      	mov	r0, r3
}
   1e538:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1e53a:	f851 2904 	ldr.w	r2, [r1], #-4
   1e53e:	2a00      	cmp	r2, #0
   1e540:	d1f6      	bne.n	1e530 <uECC_vli_numBits+0xc>
   1e542:	3b01      	subs	r3, #1
   1e544:	b25b      	sxtb	r3, r3
   1e546:	e7f1      	b.n	1e52c <uECC_vli_numBits+0x8>
	digit = vli[num_digits - 1];
   1e548:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   1e54c:	3a01      	subs	r2, #1
   1e54e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
	for (i = 0; digit; ++i) {
   1e552:	2000      	movs	r0, #0
   1e554:	b922      	cbnz	r2, 1e560 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   1e556:	3b01      	subs	r3, #1
   1e558:	eb00 1343 	add.w	r3, r0, r3, lsl #5
   1e55c:	b218      	sxth	r0, r3
   1e55e:	4770      	bx	lr
		digit >>= 1;
   1e560:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   1e562:	3001      	adds	r0, #1
   1e564:	e7f6      	b.n	1e554 <uECC_vli_numBits+0x30>

0001e566 <uECC_vli_set>:
{
   1e566:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1e568:	2300      	movs	r3, #0
   1e56a:	b25c      	sxtb	r4, r3
   1e56c:	42a2      	cmp	r2, r4
   1e56e:	dc00      	bgt.n	1e572 <uECC_vli_set+0xc>
}
   1e570:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   1e572:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   1e576:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1e57a:	3301      	adds	r3, #1
   1e57c:	e7f5      	b.n	1e56a <uECC_vli_set+0x4>

0001e57e <uECC_vli_cmp_unsafe>:
{
   1e57e:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   1e580:	3a01      	subs	r2, #1
   1e582:	b253      	sxtb	r3, r2
   1e584:	009a      	lsls	r2, r3, #2
   1e586:	2b00      	cmp	r3, #0
   1e588:	da01      	bge.n	1e58e <uECC_vli_cmp_unsafe+0x10>
	return 0;
   1e58a:	2000      	movs	r0, #0
}
   1e58c:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   1e58e:	5885      	ldr	r5, [r0, r2]
   1e590:	588c      	ldr	r4, [r1, r2]
   1e592:	42a5      	cmp	r5, r4
   1e594:	d805      	bhi.n	1e5a2 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   1e596:	f1a2 0204 	sub.w	r2, r2, #4
   1e59a:	d304      	bcc.n	1e5a6 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   1e59c:	3b01      	subs	r3, #1
   1e59e:	b25b      	sxtb	r3, r3
   1e5a0:	e7f1      	b.n	1e586 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   1e5a2:	2001      	movs	r0, #1
   1e5a4:	e7f2      	b.n	1e58c <uECC_vli_cmp_unsafe+0xe>
			return -1;
   1e5a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5aa:	e7ef      	b.n	1e58c <uECC_vli_cmp_unsafe+0xe>

0001e5ac <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   1e5ac:	3a01      	subs	r2, #1
   1e5ae:	b253      	sxtb	r3, r2
{
   1e5b0:	b570      	push	{r4, r5, r6, lr}
   1e5b2:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   1e5b4:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   1e5b6:	2b00      	cmp	r3, #0
   1e5b8:	da03      	bge.n	1e5c2 <uECC_vli_equal+0x16>
}
   1e5ba:	1e20      	subs	r0, r4, #0
   1e5bc:	bf18      	it	ne
   1e5be:	2001      	movne	r0, #1
   1e5c0:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   1e5c2:	5885      	ldr	r5, [r0, r2]
   1e5c4:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   1e5c6:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   1e5c8:	4075      	eors	r5, r6
   1e5ca:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   1e5cc:	b25b      	sxtb	r3, r3
   1e5ce:	3a04      	subs	r2, #4
   1e5d0:	e7f1      	b.n	1e5b6 <uECC_vli_equal+0xa>

0001e5d2 <uECC_vli_sub>:
{
   1e5d2:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1e5d4:	2400      	movs	r4, #0
{
   1e5d6:	4607      	mov	r7, r0
   1e5d8:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   1e5da:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1e5dc:	b265      	sxtb	r5, r4
   1e5de:	4565      	cmp	r5, ip
   1e5e0:	db00      	blt.n	1e5e4 <uECC_vli_sub+0x12>
}
   1e5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   1e5e4:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
   1e5e8:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   1e5ec:	1a2e      	subs	r6, r5, r0
   1e5ee:	1af6      	subs	r6, r6, r3
	return (p_true*(cond)) | (p_false*(!cond));
   1e5f0:	42b5      	cmp	r5, r6
   1e5f2:	f000 0501 	and.w	r5, r0, #1
   1e5f6:	bf18      	it	ne
   1e5f8:	2500      	movne	r5, #0
		result[i] = diff;
   1e5fa:	f847 6024 	str.w	r6, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1e5fe:	bf2c      	ite	cs
   1e600:	4628      	movcs	r0, r5
   1e602:	f045 0001 	orrcc.w	r0, r5, #1
	for (i = 0; i < num_words; ++i) {
   1e606:	3401      	adds	r4, #1
   1e608:	e7e8      	b.n	1e5dc <uECC_vli_sub+0xa>

0001e60a <uECC_vli_modAdd>:
{
   1e60a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e60c:	461d      	mov	r5, r3
   1e60e:	f99d 3018 	ldrsb.w	r3, [sp, #24]
   1e612:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1e614:	f7ff feb3 	bl	1e37e <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   1e618:	b940      	cbnz	r0, 1e62c <uECC_vli_modAdd+0x22>
   1e61a:	461a      	mov	r2, r3
   1e61c:	4621      	mov	r1, r4
   1e61e:	4628      	mov	r0, r5
   1e620:	9301      	str	r3, [sp, #4]
   1e622:	f7ff ffac 	bl	1e57e <uECC_vli_cmp_unsafe>
   1e626:	2801      	cmp	r0, #1
   1e628:	9b01      	ldr	r3, [sp, #4]
   1e62a:	d007      	beq.n	1e63c <uECC_vli_modAdd+0x32>
		uECC_vli_sub(result, result, mod, num_words);
   1e62c:	462a      	mov	r2, r5
   1e62e:	4621      	mov	r1, r4
   1e630:	4620      	mov	r0, r4
}
   1e632:	b003      	add	sp, #12
   1e634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		uECC_vli_sub(result, result, mod, num_words);
   1e638:	f7ff bfcb 	b.w	1e5d2 <uECC_vli_sub>
}
   1e63c:	b003      	add	sp, #12
   1e63e:	bd30      	pop	{r4, r5, pc}

0001e640 <uECC_vli_modSub>:
{
   1e640:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e642:	461d      	mov	r5, r3
   1e644:	f99d 3018 	ldrsb.w	r3, [sp, #24]
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1e648:	9301      	str	r3, [sp, #4]
{
   1e64a:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1e64c:	f7ff ffc1 	bl	1e5d2 <uECC_vli_sub>
	if (l_borrow) {
   1e650:	9b01      	ldr	r3, [sp, #4]
   1e652:	b138      	cbz	r0, 1e664 <uECC_vli_modSub+0x24>
		uECC_vli_add(result, result, mod, num_words);
   1e654:	462a      	mov	r2, r5
   1e656:	4621      	mov	r1, r4
   1e658:	4620      	mov	r0, r4
}
   1e65a:	b003      	add	sp, #12
   1e65c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		uECC_vli_add(result, result, mod, num_words);
   1e660:	f7ff be8d 	b.w	1e37e <uECC_vli_add>
}
   1e664:	b003      	add	sp, #12
   1e666:	bd30      	pop	{r4, r5, pc}

0001e668 <uECC_vli_mmod>:
{
   1e668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e66c:	b0a5      	sub	sp, #148	; 0x94
   1e66e:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   1e670:	ab14      	add	r3, sp, #80	; 0x50
   1e672:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   1e676:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   1e678:	4629      	mov	r1, r5
   1e67a:	4610      	mov	r0, r2
{
   1e67c:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   1e67e:	f7ff ff51 	bl	1e524 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   1e682:	ebc0 1085 	rsb	r0, r0, r5, lsl #6
   1e686:	b204      	sxth	r4, r0
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1e688:	2c00      	cmp	r4, #0
   1e68a:	4621      	mov	r1, r4
   1e68c:	bfb8      	it	lt
   1e68e:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1e692:	4263      	negs	r3, r4
   1e694:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1e698:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1e69c:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   1e6a0:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1e6a2:	bf58      	it	pl
   1e6a4:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   1e6a6:	f7ff ff19 	bl	1e4dc <uECC_vli_clear>
	if (bit_shift > 0) {
   1e6aa:	2e00      	cmp	r6, #0
   1e6ac:	b208      	sxth	r0, r1
   1e6ae:	dd2b      	ble.n	1e708 <uECC_vli_mmod+0xa0>
   1e6b0:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   1e6b2:	2200      	movs	r2, #0
   1e6b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1e6b8:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1e6bc:	4613      	mov	r3, r2
   1e6be:	429d      	cmp	r5, r3
   1e6c0:	d817      	bhi.n	1e6f2 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   1e6c2:	006b      	lsls	r3, r5, #1
   1e6c4:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1e6c6:	ab04      	add	r3, sp, #16
   1e6c8:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1e6cc:	1e6f      	subs	r7, r5, #1
   1e6ce:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1e6d0:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1e6d2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   1e6d6:	2c00      	cmp	r4, #0
   1e6d8:	da54      	bge.n	1e784 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   1e6da:	ab24      	add	r3, sp, #144	; 0x90
   1e6dc:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1e6e0:	462a      	mov	r2, r5
   1e6e2:	f856 1c88 	ldr.w	r1, [r6, #-136]
   1e6e6:	4640      	mov	r0, r8
   1e6e8:	f7ff ff3d 	bl	1e566 <uECC_vli_set>
}
   1e6ec:	b025      	add	sp, #148	; 0x94
   1e6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   1e6f2:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   1e6f6:	fa0c f106 	lsl.w	r1, ip, r6
   1e6fa:	430a      	orrs	r2, r1
   1e6fc:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1e700:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1e702:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1e706:	e7da      	b.n	1e6be <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   1e708:	ab04      	add	r3, sp, #16
   1e70a:	462a      	mov	r2, r5
   1e70c:	4639      	mov	r1, r7
   1e70e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1e712:	f7ff ff28 	bl	1e566 <uECC_vli_set>
   1e716:	e7d4      	b.n	1e6c2 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1e718:	fa0f fe82 	sxth.w	lr, r2
   1e71c:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   1e720:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   1e724:	ab24      	add	r3, sp, #144	; 0x90
   1e726:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1e72a:	3001      	adds	r0, #1
   1e72c:	f852 3c80 	ldr.w	r3, [r2, #-128]
   1e730:	440b      	add	r3, r1
   1e732:	ebbb 0303 	subs.w	r3, fp, r3
   1e736:	bf34      	ite	cc
   1e738:	2201      	movcc	r2, #1
   1e73a:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   1e73c:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   1e73e:	bf18      	it	ne
   1e740:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   1e742:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   1e746:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   1e74a:	9b01      	ldr	r3, [sp, #4]
   1e74c:	b242      	sxtb	r2, r0
   1e74e:	429a      	cmp	r2, r3
   1e750:	dbe2      	blt.n	1e718 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   1e752:	1a73      	subs	r3, r6, r1
   1e754:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1e756:	4629      	mov	r1, r5
   1e758:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   1e75a:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1e75c:	f7ff fe2a 	bl	1e3b4 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1e760:	ab24      	add	r3, sp, #144	; 0x90
   1e762:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1e766:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1e768:	f853 2c80 	ldr.w	r2, [r3, #-128]
   1e76c:	f857 3c80 	ldr.w	r3, [r7, #-128]
   1e770:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   1e774:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1e778:	4648      	mov	r0, r9
	for (index = 1; shift >= 0; --shift) {
   1e77a:	3c01      	subs	r4, #1
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1e77c:	f7ff fe1a 	bl	1e3b4 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   1e780:	b224      	sxth	r4, r4
   1e782:	e7a8      	b.n	1e6d6 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1e784:	ab24      	add	r3, sp, #144	; 0x90
   1e786:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   1e788:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   1e78c:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1e78e:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   1e792:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   1e796:	e7d8      	b.n	1e74a <uECC_vli_mmod+0xe2>

0001e798 <uECC_vli_modMult_fast>:
{
   1e798:	b530      	push	{r4, r5, lr}
   1e79a:	461c      	mov	r4, r3
   1e79c:	b091      	sub	sp, #68	; 0x44
   1e79e:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   1e7a0:	f993 3000 	ldrsb.w	r3, [r3]
   1e7a4:	4668      	mov	r0, sp
   1e7a6:	f7ff fe2e 	bl	1e406 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   1e7aa:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   1e7ae:	4669      	mov	r1, sp
   1e7b0:	4628      	mov	r0, r5
   1e7b2:	4798      	blx	r3
}
   1e7b4:	b011      	add	sp, #68	; 0x44
   1e7b6:	bd30      	pop	{r4, r5, pc}

0001e7b8 <uECC_vli_modSquare_fast>:
{
   1e7b8:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   1e7ba:	460a      	mov	r2, r1
   1e7bc:	f7ff bfec 	b.w	1e798 <uECC_vli_modMult_fast>

0001e7c0 <double_jacobian_default>:
{
   1e7c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   1e7c4:	f993 6000 	ldrsb.w	r6, [r3]
{
   1e7c8:	b092      	sub	sp, #72	; 0x48
   1e7ca:	4604      	mov	r4, r0
   1e7cc:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   1e7ce:	4610      	mov	r0, r2
   1e7d0:	4631      	mov	r1, r6
{
   1e7d2:	4615      	mov	r5, r2
   1e7d4:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   1e7d6:	f7ff fe8c 	bl	1e4f2 <uECC_vli_isZero>
   1e7da:	2800      	cmp	r0, #0
   1e7dc:	f040 8091 	bne.w	1e902 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   1e7e0:	463a      	mov	r2, r7
   1e7e2:	4649      	mov	r1, r9
   1e7e4:	a802      	add	r0, sp, #8
   1e7e6:	f7ff ffe7 	bl	1e7b8 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   1e7ea:	463b      	mov	r3, r7
   1e7ec:	aa02      	add	r2, sp, #8
   1e7ee:	4621      	mov	r1, r4
   1e7f0:	a80a      	add	r0, sp, #40	; 0x28
   1e7f2:	f7ff ffd1 	bl	1e798 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   1e7f6:	a902      	add	r1, sp, #8
   1e7f8:	4608      	mov	r0, r1
   1e7fa:	463a      	mov	r2, r7
   1e7fc:	f7ff ffdc 	bl	1e7b8 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   1e800:	463b      	mov	r3, r7
   1e802:	462a      	mov	r2, r5
   1e804:	4649      	mov	r1, r9
   1e806:	4648      	mov	r0, r9
   1e808:	f7ff ffc6 	bl	1e798 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1e80c:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   1e810:	463a      	mov	r2, r7
   1e812:	4629      	mov	r1, r5
   1e814:	4628      	mov	r0, r5
   1e816:	f7ff ffcf 	bl	1e7b8 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1e81a:	4643      	mov	r3, r8
   1e81c:	462a      	mov	r2, r5
   1e81e:	4621      	mov	r1, r4
   1e820:	4620      	mov	r0, r4
   1e822:	9600      	str	r6, [sp, #0]
   1e824:	f7ff fef1 	bl	1e60a <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   1e828:	4643      	mov	r3, r8
   1e82a:	462a      	mov	r2, r5
   1e82c:	4629      	mov	r1, r5
   1e82e:	4628      	mov	r0, r5
   1e830:	9600      	str	r6, [sp, #0]
   1e832:	f7ff feea 	bl	1e60a <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   1e836:	4643      	mov	r3, r8
   1e838:	462a      	mov	r2, r5
   1e83a:	4621      	mov	r1, r4
   1e83c:	4628      	mov	r0, r5
   1e83e:	9600      	str	r6, [sp, #0]
   1e840:	f7ff fefe 	bl	1e640 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   1e844:	463b      	mov	r3, r7
   1e846:	462a      	mov	r2, r5
   1e848:	4621      	mov	r1, r4
   1e84a:	4620      	mov	r0, r4
   1e84c:	f7ff ffa4 	bl	1e798 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   1e850:	4643      	mov	r3, r8
   1e852:	4622      	mov	r2, r4
   1e854:	4621      	mov	r1, r4
   1e856:	4628      	mov	r0, r5
   1e858:	9600      	str	r6, [sp, #0]
   1e85a:	f7ff fed6 	bl	1e60a <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   1e85e:	4643      	mov	r3, r8
   1e860:	9600      	str	r6, [sp, #0]
   1e862:	462a      	mov	r2, r5
   1e864:	4621      	mov	r1, r4
   1e866:	4620      	mov	r0, r4
   1e868:	f7ff fecf 	bl	1e60a <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1e86c:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   1e86e:	07db      	lsls	r3, r3, #31
   1e870:	d54a      	bpl.n	1e908 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1e872:	4633      	mov	r3, r6
   1e874:	4642      	mov	r2, r8
   1e876:	4621      	mov	r1, r4
   1e878:	4620      	mov	r0, r4
   1e87a:	f7ff fd80 	bl	1e37e <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   1e87e:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1e880:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   1e882:	4620      	mov	r0, r4
   1e884:	f7ff fd96 	bl	1e3b4 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   1e888:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   1e88c:	3b01      	subs	r3, #1
   1e88e:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   1e892:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   1e896:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   1e89a:	463a      	mov	r2, r7
   1e89c:	4621      	mov	r1, r4
   1e89e:	4628      	mov	r0, r5
   1e8a0:	f7ff ff8a 	bl	1e7b8 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   1e8a4:	4643      	mov	r3, r8
   1e8a6:	aa0a      	add	r2, sp, #40	; 0x28
   1e8a8:	4629      	mov	r1, r5
   1e8aa:	4628      	mov	r0, r5
   1e8ac:	9600      	str	r6, [sp, #0]
   1e8ae:	f7ff fec7 	bl	1e640 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   1e8b2:	4643      	mov	r3, r8
   1e8b4:	aa0a      	add	r2, sp, #40	; 0x28
   1e8b6:	4629      	mov	r1, r5
   1e8b8:	4628      	mov	r0, r5
   1e8ba:	9600      	str	r6, [sp, #0]
   1e8bc:	f7ff fec0 	bl	1e640 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   1e8c0:	a90a      	add	r1, sp, #40	; 0x28
   1e8c2:	4608      	mov	r0, r1
   1e8c4:	4643      	mov	r3, r8
   1e8c6:	462a      	mov	r2, r5
   1e8c8:	9600      	str	r6, [sp, #0]
   1e8ca:	f7ff feb9 	bl	1e640 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   1e8ce:	463b      	mov	r3, r7
   1e8d0:	aa0a      	add	r2, sp, #40	; 0x28
   1e8d2:	4621      	mov	r1, r4
   1e8d4:	4620      	mov	r0, r4
   1e8d6:	f7ff ff5f 	bl	1e798 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   1e8da:	aa02      	add	r2, sp, #8
   1e8dc:	4643      	mov	r3, r8
   1e8de:	4610      	mov	r0, r2
   1e8e0:	4621      	mov	r1, r4
   1e8e2:	9600      	str	r6, [sp, #0]
   1e8e4:	f7ff feac 	bl	1e640 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   1e8e8:	4632      	mov	r2, r6
   1e8ea:	4629      	mov	r1, r5
   1e8ec:	4620      	mov	r0, r4
   1e8ee:	f7ff fe3a 	bl	1e566 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   1e8f2:	4649      	mov	r1, r9
   1e8f4:	4628      	mov	r0, r5
   1e8f6:	f7ff fe36 	bl	1e566 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   1e8fa:	a902      	add	r1, sp, #8
   1e8fc:	4648      	mov	r0, r9
   1e8fe:	f7ff fe32 	bl	1e566 <uECC_vli_set>
}
   1e902:	b012      	add	sp, #72	; 0x48
   1e904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   1e908:	4631      	mov	r1, r6
   1e90a:	4620      	mov	r0, r4
   1e90c:	f7ff fd52 	bl	1e3b4 <uECC_vli_rshift1>
   1e910:	e7c3      	b.n	1e89a <double_jacobian_default+0xda>

0001e912 <x_side_default>:
{
   1e912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e916:	4615      	mov	r5, r2
   1e918:	b08a      	sub	sp, #40	; 0x28
   1e91a:	4604      	mov	r4, r0
   1e91c:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1e91e:	221c      	movs	r2, #28
   1e920:	2100      	movs	r1, #0
   1e922:	a803      	add	r0, sp, #12
   1e924:	f000 fe03 	bl	1f52e <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1e928:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   1e92a:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1e92e:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1e930:	462a      	mov	r2, r5
   1e932:	4631      	mov	r1, r6
   1e934:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1e936:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1e938:	f7ff ff3e 	bl	1e7b8 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1e93c:	463b      	mov	r3, r7
   1e93e:	aa02      	add	r2, sp, #8
   1e940:	4621      	mov	r1, r4
   1e942:	4620      	mov	r0, r4
   1e944:	f8cd 8000 	str.w	r8, [sp]
   1e948:	f7ff fe7a 	bl	1e640 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   1e94c:	462b      	mov	r3, r5
   1e94e:	4632      	mov	r2, r6
   1e950:	4621      	mov	r1, r4
   1e952:	4620      	mov	r0, r4
   1e954:	f7ff ff20 	bl	1e798 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   1e958:	f8cd 8000 	str.w	r8, [sp]
   1e95c:	463b      	mov	r3, r7
   1e95e:	f105 0284 	add.w	r2, r5, #132	; 0x84
   1e962:	4621      	mov	r1, r4
   1e964:	4620      	mov	r0, r4
   1e966:	f7ff fe50 	bl	1e60a <uECC_vli_modAdd>
}
   1e96a:	b00a      	add	sp, #40	; 0x28
   1e96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e970 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   1e970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e974:	b09a      	sub	sp, #104	; 0x68
   1e976:	4616      	mov	r6, r2
   1e978:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1e97c:	4644      	mov	r4, r8
{
   1e97e:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   1e980:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1e984:	9500      	str	r5, [sp, #0]
{
   1e986:	4607      	mov	r7, r0
   1e988:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1e98a:	4623      	mov	r3, r4
   1e98c:	4602      	mov	r2, r0
   1e98e:	4631      	mov	r1, r6
   1e990:	a802      	add	r0, sp, #8
   1e992:	f7ff fe55 	bl	1e640 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1e996:	a902      	add	r1, sp, #8
   1e998:	4642      	mov	r2, r8
   1e99a:	4608      	mov	r0, r1
   1e99c:	f7ff ff0c 	bl	1e7b8 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1e9a0:	4643      	mov	r3, r8
   1e9a2:	aa02      	add	r2, sp, #8
   1e9a4:	4639      	mov	r1, r7
   1e9a6:	4638      	mov	r0, r7
   1e9a8:	f7ff fef6 	bl	1e798 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1e9ac:	4643      	mov	r3, r8
   1e9ae:	aa02      	add	r2, sp, #8
   1e9b0:	4631      	mov	r1, r6
   1e9b2:	4630      	mov	r0, r6
   1e9b4:	f7ff fef0 	bl	1e798 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   1e9b8:	4623      	mov	r3, r4
   1e9ba:	4652      	mov	r2, sl
   1e9bc:	4649      	mov	r1, r9
   1e9be:	a802      	add	r0, sp, #8
   1e9c0:	9500      	str	r5, [sp, #0]
   1e9c2:	f7ff fe22 	bl	1e60a <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1e9c6:	4623      	mov	r3, r4
   1e9c8:	4652      	mov	r2, sl
   1e9ca:	4649      	mov	r1, r9
   1e9cc:	4648      	mov	r0, r9
   1e9ce:	9500      	str	r5, [sp, #0]
   1e9d0:	f7ff fe36 	bl	1e640 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   1e9d4:	4623      	mov	r3, r4
   1e9d6:	463a      	mov	r2, r7
   1e9d8:	4631      	mov	r1, r6
   1e9da:	a80a      	add	r0, sp, #40	; 0x28
   1e9dc:	9500      	str	r5, [sp, #0]
   1e9de:	f7ff fe2f 	bl	1e640 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   1e9e2:	4643      	mov	r3, r8
   1e9e4:	aa0a      	add	r2, sp, #40	; 0x28
   1e9e6:	4651      	mov	r1, sl
   1e9e8:	4650      	mov	r0, sl
   1e9ea:	f7ff fed5 	bl	1e798 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   1e9ee:	4623      	mov	r3, r4
   1e9f0:	4632      	mov	r2, r6
   1e9f2:	4639      	mov	r1, r7
   1e9f4:	a80a      	add	r0, sp, #40	; 0x28
   1e9f6:	9500      	str	r5, [sp, #0]
   1e9f8:	f7ff fe07 	bl	1e60a <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   1e9fc:	4642      	mov	r2, r8
   1e9fe:	4649      	mov	r1, r9
   1ea00:	4630      	mov	r0, r6
   1ea02:	f7ff fed9 	bl	1e7b8 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   1ea06:	4623      	mov	r3, r4
   1ea08:	aa0a      	add	r2, sp, #40	; 0x28
   1ea0a:	4631      	mov	r1, r6
   1ea0c:	4630      	mov	r0, r6
   1ea0e:	9500      	str	r5, [sp, #0]
   1ea10:	f7ff fe16 	bl	1e640 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   1ea14:	4623      	mov	r3, r4
   1ea16:	4632      	mov	r2, r6
   1ea18:	4639      	mov	r1, r7
   1ea1a:	a812      	add	r0, sp, #72	; 0x48
   1ea1c:	9500      	str	r5, [sp, #0]
   1ea1e:	f7ff fe0f 	bl	1e640 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   1ea22:	4643      	mov	r3, r8
   1ea24:	aa12      	add	r2, sp, #72	; 0x48
   1ea26:	4649      	mov	r1, r9
   1ea28:	4648      	mov	r0, r9
   1ea2a:	f7ff feb5 	bl	1e798 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   1ea2e:	4623      	mov	r3, r4
   1ea30:	4652      	mov	r2, sl
   1ea32:	4649      	mov	r1, r9
   1ea34:	4648      	mov	r0, r9
   1ea36:	9500      	str	r5, [sp, #0]
   1ea38:	f7ff fe02 	bl	1e640 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   1ea3c:	4642      	mov	r2, r8
   1ea3e:	a902      	add	r1, sp, #8
   1ea40:	a812      	add	r0, sp, #72	; 0x48
   1ea42:	f7ff feb9 	bl	1e7b8 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   1ea46:	a912      	add	r1, sp, #72	; 0x48
   1ea48:	4623      	mov	r3, r4
   1ea4a:	aa0a      	add	r2, sp, #40	; 0x28
   1ea4c:	4608      	mov	r0, r1
   1ea4e:	9500      	str	r5, [sp, #0]
   1ea50:	f7ff fdf6 	bl	1e640 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   1ea54:	4623      	mov	r3, r4
   1ea56:	463a      	mov	r2, r7
   1ea58:	a912      	add	r1, sp, #72	; 0x48
   1ea5a:	a80a      	add	r0, sp, #40	; 0x28
   1ea5c:	9500      	str	r5, [sp, #0]
   1ea5e:	f7ff fdef 	bl	1e640 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   1ea62:	a90a      	add	r1, sp, #40	; 0x28
   1ea64:	4643      	mov	r3, r8
   1ea66:	aa02      	add	r2, sp, #8
   1ea68:	4608      	mov	r0, r1
   1ea6a:	f7ff fe95 	bl	1e798 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   1ea6e:	4623      	mov	r3, r4
   1ea70:	4652      	mov	r2, sl
   1ea72:	a90a      	add	r1, sp, #40	; 0x28
   1ea74:	4650      	mov	r0, sl
   1ea76:	9500      	str	r5, [sp, #0]
   1ea78:	f7ff fde2 	bl	1e640 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   1ea7c:	462a      	mov	r2, r5
   1ea7e:	a912      	add	r1, sp, #72	; 0x48
   1ea80:	4638      	mov	r0, r7
   1ea82:	f7ff fd70 	bl	1e566 <uECC_vli_set>
}
   1ea86:	b01a      	add	sp, #104	; 0x68
   1ea88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001ea8c <uECC_vli_modInv>:
{
   1ea8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ea8e:	460f      	mov	r7, r1
   1ea90:	b0a1      	sub	sp, #132	; 0x84
   1ea92:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   1ea94:	4619      	mov	r1, r3
   1ea96:	4638      	mov	r0, r7
{
   1ea98:	4615      	mov	r5, r2
   1ea9a:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   1ea9c:	f7ff fd29 	bl	1e4f2 <uECC_vli_isZero>
   1eaa0:	b128      	cbz	r0, 1eaae <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   1eaa2:	4630      	mov	r0, r6
}
   1eaa4:	b021      	add	sp, #132	; 0x84
   1eaa6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   1eaaa:	f7ff bd17 	b.w	1e4dc <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   1eaae:	4622      	mov	r2, r4
   1eab0:	4639      	mov	r1, r7
   1eab2:	4668      	mov	r0, sp
   1eab4:	f7ff fd57 	bl	1e566 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   1eab8:	4629      	mov	r1, r5
   1eaba:	a808      	add	r0, sp, #32
   1eabc:	f7ff fd53 	bl	1e566 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   1eac0:	a810      	add	r0, sp, #64	; 0x40
   1eac2:	4621      	mov	r1, r4
   1eac4:	f7ff fd0a 	bl	1e4dc <uECC_vli_clear>
	u[0] = 1;
   1eac8:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   1eaca:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   1eacc:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   1eace:	f7ff fd05 	bl	1e4dc <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   1ead2:	4622      	mov	r2, r4
   1ead4:	a908      	add	r1, sp, #32
   1ead6:	4668      	mov	r0, sp
   1ead8:	f7ff fd51 	bl	1e57e <uECC_vli_cmp_unsafe>
   1eadc:	b930      	cbnz	r0, 1eaec <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   1eade:	4622      	mov	r2, r4
   1eae0:	a910      	add	r1, sp, #64	; 0x40
   1eae2:	4630      	mov	r0, r6
   1eae4:	f7ff fd3f 	bl	1e566 <uECC_vli_set>
}
   1eae8:	b021      	add	sp, #132	; 0x84
   1eaea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   1eaec:	9b00      	ldr	r3, [sp, #0]
   1eaee:	07da      	lsls	r2, r3, #31
   1eaf0:	d409      	bmi.n	1eb06 <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   1eaf2:	4621      	mov	r1, r4
   1eaf4:	4668      	mov	r0, sp
   1eaf6:	f7ff fc5d 	bl	1e3b4 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   1eafa:	4622      	mov	r2, r4
   1eafc:	4629      	mov	r1, r5
   1eafe:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   1eb00:	f7ff fc65 	bl	1e3ce <vli_modInv_update>
   1eb04:	e7e5      	b.n	1ead2 <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   1eb06:	9b08      	ldr	r3, [sp, #32]
   1eb08:	07db      	lsls	r3, r3, #31
   1eb0a:	d407      	bmi.n	1eb1c <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   1eb0c:	4621      	mov	r1, r4
   1eb0e:	a808      	add	r0, sp, #32
   1eb10:	f7ff fc50 	bl	1e3b4 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   1eb14:	4622      	mov	r2, r4
   1eb16:	4629      	mov	r1, r5
   1eb18:	a818      	add	r0, sp, #96	; 0x60
   1eb1a:	e7f1      	b.n	1eb00 <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   1eb1c:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   1eb1e:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   1eb20:	dd1c      	ble.n	1eb5c <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   1eb22:	aa08      	add	r2, sp, #32
   1eb24:	4669      	mov	r1, sp
   1eb26:	4668      	mov	r0, sp
   1eb28:	f7ff fd53 	bl	1e5d2 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   1eb2c:	4621      	mov	r1, r4
   1eb2e:	4668      	mov	r0, sp
   1eb30:	f7ff fc40 	bl	1e3b4 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   1eb34:	4622      	mov	r2, r4
   1eb36:	a918      	add	r1, sp, #96	; 0x60
   1eb38:	a810      	add	r0, sp, #64	; 0x40
   1eb3a:	f7ff fd20 	bl	1e57e <uECC_vli_cmp_unsafe>
   1eb3e:	2800      	cmp	r0, #0
   1eb40:	da05      	bge.n	1eb4e <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   1eb42:	a910      	add	r1, sp, #64	; 0x40
   1eb44:	4623      	mov	r3, r4
   1eb46:	462a      	mov	r2, r5
   1eb48:	4608      	mov	r0, r1
   1eb4a:	f7ff fc18 	bl	1e37e <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   1eb4e:	a910      	add	r1, sp, #64	; 0x40
   1eb50:	4623      	mov	r3, r4
   1eb52:	aa18      	add	r2, sp, #96	; 0x60
   1eb54:	4608      	mov	r0, r1
   1eb56:	f7ff fd3c 	bl	1e5d2 <uECC_vli_sub>
   1eb5a:	e7ce      	b.n	1eafa <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   1eb5c:	466a      	mov	r2, sp
   1eb5e:	a808      	add	r0, sp, #32
   1eb60:	f7ff fd37 	bl	1e5d2 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   1eb64:	4621      	mov	r1, r4
   1eb66:	a808      	add	r0, sp, #32
   1eb68:	f7ff fc24 	bl	1e3b4 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   1eb6c:	4622      	mov	r2, r4
   1eb6e:	a910      	add	r1, sp, #64	; 0x40
   1eb70:	a818      	add	r0, sp, #96	; 0x60
   1eb72:	f7ff fd04 	bl	1e57e <uECC_vli_cmp_unsafe>
   1eb76:	2800      	cmp	r0, #0
   1eb78:	da05      	bge.n	1eb86 <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   1eb7a:	a918      	add	r1, sp, #96	; 0x60
   1eb7c:	4623      	mov	r3, r4
   1eb7e:	462a      	mov	r2, r5
   1eb80:	4608      	mov	r0, r1
   1eb82:	f7ff fbfc 	bl	1e37e <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   1eb86:	a918      	add	r1, sp, #96	; 0x60
   1eb88:	4623      	mov	r3, r4
   1eb8a:	aa10      	add	r2, sp, #64	; 0x40
   1eb8c:	4608      	mov	r0, r1
   1eb8e:	f7ff fd20 	bl	1e5d2 <uECC_vli_sub>
   1eb92:	e7bf      	b.n	1eb14 <uECC_vli_modInv+0x88>

0001eb94 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   1eb94:	7809      	ldrb	r1, [r1, #0]
   1eb96:	0049      	lsls	r1, r1, #1
   1eb98:	b249      	sxtb	r1, r1
   1eb9a:	f7ff bcaa 	b.w	1e4f2 <uECC_vli_isZero>

0001eb9e <apply_z>:
{
   1eb9e:	b570      	push	{r4, r5, r6, lr}
   1eba0:	4614      	mov	r4, r2
   1eba2:	b08a      	sub	sp, #40	; 0x28
   1eba4:	4606      	mov	r6, r0
   1eba6:	460d      	mov	r5, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   1eba8:	461a      	mov	r2, r3
   1ebaa:	4621      	mov	r1, r4
   1ebac:	a802      	add	r0, sp, #8
   1ebae:	9301      	str	r3, [sp, #4]
   1ebb0:	f7ff fe02 	bl	1e7b8 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   1ebb4:	9b01      	ldr	r3, [sp, #4]
   1ebb6:	aa02      	add	r2, sp, #8
   1ebb8:	4631      	mov	r1, r6
   1ebba:	4630      	mov	r0, r6
   1ebbc:	f7ff fdec 	bl	1e798 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   1ebc0:	a902      	add	r1, sp, #8
   1ebc2:	9b01      	ldr	r3, [sp, #4]
   1ebc4:	4622      	mov	r2, r4
   1ebc6:	4608      	mov	r0, r1
   1ebc8:	f7ff fde6 	bl	1e798 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   1ebcc:	9b01      	ldr	r3, [sp, #4]
   1ebce:	aa02      	add	r2, sp, #8
   1ebd0:	4629      	mov	r1, r5
   1ebd2:	4628      	mov	r0, r5
   1ebd4:	f7ff fde0 	bl	1e798 <uECC_vli_modMult_fast>
}
   1ebd8:	b00a      	add	sp, #40	; 0x28
   1ebda:	bd70      	pop	{r4, r5, r6, pc}

0001ebdc <XYcZ_add>:
{
   1ebdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ebe0:	b08a      	sub	sp, #40	; 0x28
   1ebe2:	4614      	mov	r4, r2
   1ebe4:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   1ebe8:	4655      	mov	r5, sl
{
   1ebea:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   1ebec:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1ebf0:	9600      	str	r6, [sp, #0]
{
   1ebf2:	4680      	mov	r8, r0
   1ebf4:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1ebf6:	462b      	mov	r3, r5
   1ebf8:	4602      	mov	r2, r0
   1ebfa:	4621      	mov	r1, r4
   1ebfc:	a802      	add	r0, sp, #8
   1ebfe:	f7ff fd1f 	bl	1e640 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1ec02:	a902      	add	r1, sp, #8
   1ec04:	4652      	mov	r2, sl
   1ec06:	4608      	mov	r0, r1
   1ec08:	f7ff fdd6 	bl	1e7b8 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1ec0c:	4653      	mov	r3, sl
   1ec0e:	aa02      	add	r2, sp, #8
   1ec10:	4641      	mov	r1, r8
   1ec12:	4640      	mov	r0, r8
   1ec14:	f7ff fdc0 	bl	1e798 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1ec18:	4653      	mov	r3, sl
   1ec1a:	aa02      	add	r2, sp, #8
   1ec1c:	4621      	mov	r1, r4
   1ec1e:	4620      	mov	r0, r4
   1ec20:	f7ff fdba 	bl	1e798 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1ec24:	462b      	mov	r3, r5
   1ec26:	464a      	mov	r2, r9
   1ec28:	4639      	mov	r1, r7
   1ec2a:	4638      	mov	r0, r7
   1ec2c:	9600      	str	r6, [sp, #0]
   1ec2e:	f7ff fd07 	bl	1e640 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   1ec32:	4652      	mov	r2, sl
   1ec34:	4639      	mov	r1, r7
   1ec36:	a802      	add	r0, sp, #8
   1ec38:	f7ff fdbe 	bl	1e7b8 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   1ec3c:	a902      	add	r1, sp, #8
   1ec3e:	462b      	mov	r3, r5
   1ec40:	4642      	mov	r2, r8
   1ec42:	4608      	mov	r0, r1
   1ec44:	9600      	str	r6, [sp, #0]
   1ec46:	f7ff fcfb 	bl	1e640 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   1ec4a:	a902      	add	r1, sp, #8
   1ec4c:	462b      	mov	r3, r5
   1ec4e:	4622      	mov	r2, r4
   1ec50:	4608      	mov	r0, r1
   1ec52:	9600      	str	r6, [sp, #0]
   1ec54:	f7ff fcf4 	bl	1e640 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   1ec58:	462b      	mov	r3, r5
   1ec5a:	4642      	mov	r2, r8
   1ec5c:	4621      	mov	r1, r4
   1ec5e:	4620      	mov	r0, r4
   1ec60:	9600      	str	r6, [sp, #0]
   1ec62:	f7ff fced 	bl	1e640 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   1ec66:	4653      	mov	r3, sl
   1ec68:	4622      	mov	r2, r4
   1ec6a:	4649      	mov	r1, r9
   1ec6c:	4648      	mov	r0, r9
   1ec6e:	f7ff fd93 	bl	1e798 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   1ec72:	462b      	mov	r3, r5
   1ec74:	aa02      	add	r2, sp, #8
   1ec76:	4641      	mov	r1, r8
   1ec78:	4620      	mov	r0, r4
   1ec7a:	9600      	str	r6, [sp, #0]
   1ec7c:	f7ff fce0 	bl	1e640 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   1ec80:	4653      	mov	r3, sl
   1ec82:	4622      	mov	r2, r4
   1ec84:	4639      	mov	r1, r7
   1ec86:	4638      	mov	r0, r7
   1ec88:	f7ff fd86 	bl	1e798 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   1ec8c:	462b      	mov	r3, r5
   1ec8e:	464a      	mov	r2, r9
   1ec90:	4639      	mov	r1, r7
   1ec92:	4638      	mov	r0, r7
   1ec94:	9600      	str	r6, [sp, #0]
   1ec96:	f7ff fcd3 	bl	1e640 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   1ec9a:	4632      	mov	r2, r6
   1ec9c:	a902      	add	r1, sp, #8
   1ec9e:	4620      	mov	r0, r4
   1eca0:	f7ff fc61 	bl	1e566 <uECC_vli_set>
}
   1eca4:	b00a      	add	sp, #40	; 0x28
   1eca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001ecaa <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   1ecaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ecae:	b0b1      	sub	sp, #196	; 0xc4
   1ecb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ecb4:	9c3b      	ldr	r4, [sp, #236]	; 0xec
   1ecb6:	9204      	str	r2, [sp, #16]
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   1ecb8:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   1ecbc:	a818      	add	r0, sp, #96	; 0x60
   1ecbe:	463a      	mov	r2, r7
{
   1ecc0:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   1ecc2:	f7ff fc50 	bl	1e566 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   1ecc6:	00bb      	lsls	r3, r7, #2
   1ecc8:	9305      	str	r3, [sp, #20]
   1ecca:	9b03      	ldr	r3, [sp, #12]
   1eccc:	eb03 0a87 	add.w	sl, r3, r7, lsl #2
   1ecd0:	4651      	mov	r1, sl
   1ecd2:	a828      	add	r0, sp, #160	; 0xa0
   1ecd4:	f7ff fc47 	bl	1e566 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   1ecd8:	f994 2000 	ldrsb.w	r2, [r4]
	if (initial_Z) {
   1ecdc:	2d00      	cmp	r5, #0
   1ecde:	f000 8085 	beq.w	1edec <EccPoint_mult+0x142>
		uECC_vli_set(z, initial_Z, num_words);
   1ece2:	4629      	mov	r1, r5
   1ece4:	a808      	add	r0, sp, #32
   1ece6:	f7ff fc3e 	bl	1e566 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   1ecea:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   1ecee:	a918      	add	r1, sp, #96	; 0x60
   1ecf0:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   1ecf2:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   1ecf6:	f7ff fc36 	bl	1e566 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   1ecfa:	a928      	add	r1, sp, #160	; 0xa0
   1ecfc:	4648      	mov	r0, r9
   1ecfe:	f7ff fc32 	bl	1e566 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   1ed02:	4623      	mov	r3, r4
   1ed04:	aa08      	add	r2, sp, #32
   1ed06:	a818      	add	r0, sp, #96	; 0x60
   1ed08:	f7ff ff49 	bl	1eb9e <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   1ed0c:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   1ed10:	4623      	mov	r3, r4
   1ed12:	aa08      	add	r2, sp, #32
   1ed14:	a928      	add	r1, sp, #160	; 0xa0
   1ed16:	a818      	add	r0, sp, #96	; 0x60
   1ed18:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   1ed1a:	4623      	mov	r3, r4
   1ed1c:	aa08      	add	r2, sp, #32
   1ed1e:	4649      	mov	r1, r9
   1ed20:	4640      	mov	r0, r8
   1ed22:	f7ff ff3c 	bl	1eb9e <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   1ed26:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   1ed2a:	3d02      	subs	r5, #2
   1ed2c:	b22d      	sxth	r5, r5
   1ed2e:	2d00      	cmp	r5, #0
   1ed30:	dc65      	bgt.n	1edfe <EccPoint_mult+0x154>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1ed32:	9b04      	ldr	r3, [sp, #16]
   1ed34:	681d      	ldr	r5, [r3, #0]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1ed36:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1ed38:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1ed3c:	ab10      	add	r3, sp, #64	; 0x40
   1ed3e:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   1ed42:	43ed      	mvns	r5, r5
   1ed44:	ab20      	add	r3, sp, #128	; 0x80
   1ed46:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   1ed4a:	f005 0501 	and.w	r5, r5, #1
   1ed4e:	ab10      	add	r3, sp, #64	; 0x40
   1ed50:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   1ed54:	ab20      	add	r3, sp, #128	; 0x80
   1ed56:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1ed5a:	f104 0b04 	add.w	fp, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1ed5e:	462b      	mov	r3, r5
   1ed60:	464a      	mov	r2, r9
   1ed62:	4631      	mov	r1, r6
   1ed64:	4640      	mov	r0, r8
   1ed66:	f7ff fe03 	bl	1e970 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1ed6a:	465b      	mov	r3, fp
   1ed6c:	aa10      	add	r2, sp, #64	; 0x40
   1ed6e:	a918      	add	r1, sp, #96	; 0x60
   1ed70:	a808      	add	r0, sp, #32
   1ed72:	9700      	str	r7, [sp, #0]
   1ed74:	f7ff fc64 	bl	1e640 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   1ed78:	a908      	add	r1, sp, #32
   1ed7a:	4623      	mov	r3, r4
   1ed7c:	4632      	mov	r2, r6
   1ed7e:	4608      	mov	r0, r1
   1ed80:	f7ff fd0a 	bl	1e798 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   1ed84:	a908      	add	r1, sp, #32
   1ed86:	9a03      	ldr	r2, [sp, #12]
   1ed88:	4623      	mov	r3, r4
   1ed8a:	4608      	mov	r0, r1
   1ed8c:	f7ff fd04 	bl	1e798 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   1ed90:	a908      	add	r1, sp, #32
   1ed92:	463b      	mov	r3, r7
   1ed94:	465a      	mov	r2, fp
   1ed96:	4608      	mov	r0, r1
   1ed98:	f7ff fe78 	bl	1ea8c <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   1ed9c:	a908      	add	r1, sp, #32
   1ed9e:	4623      	mov	r3, r4
   1eda0:	4652      	mov	r2, sl
   1eda2:	4608      	mov	r0, r1
   1eda4:	f7ff fcf8 	bl	1e798 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   1eda8:	a908      	add	r1, sp, #32
   1edaa:	4623      	mov	r3, r4
   1edac:	4642      	mov	r2, r8
   1edae:	4608      	mov	r0, r1
   1edb0:	f7ff fcf2 	bl	1e798 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1edb4:	9400      	str	r4, [sp, #0]
   1edb6:	4633      	mov	r3, r6
   1edb8:	4642      	mov	r2, r8
   1edba:	4629      	mov	r1, r5
   1edbc:	4648      	mov	r0, r9
   1edbe:	f7ff ff0d 	bl	1ebdc <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   1edc2:	4623      	mov	r3, r4
   1edc4:	aa08      	add	r2, sp, #32
   1edc6:	a920      	add	r1, sp, #128	; 0x80
   1edc8:	a810      	add	r0, sp, #64	; 0x40
   1edca:	f7ff fee8 	bl	1eb9e <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   1edce:	9802      	ldr	r0, [sp, #8]
   1edd0:	463a      	mov	r2, r7
   1edd2:	a910      	add	r1, sp, #64	; 0x40
   1edd4:	f7ff fbc7 	bl	1e566 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   1edd8:	9b02      	ldr	r3, [sp, #8]
   1edda:	9c05      	ldr	r4, [sp, #20]
   1eddc:	4423      	add	r3, r4
   1edde:	a920      	add	r1, sp, #128	; 0x80
   1ede0:	4618      	mov	r0, r3
   1ede2:	f7ff fbc0 	bl	1e566 <uECC_vli_set>
}
   1ede6:	b031      	add	sp, #196	; 0xc4
   1ede8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   1edec:	4611      	mov	r1, r2
   1edee:	a808      	add	r0, sp, #32
   1edf0:	9206      	str	r2, [sp, #24]
   1edf2:	f7ff fb73 	bl	1e4dc <uECC_vli_clear>
		z[0] = 1;
   1edf6:	2301      	movs	r3, #1
   1edf8:	9a06      	ldr	r2, [sp, #24]
   1edfa:	9308      	str	r3, [sp, #32]
   1edfc:	e775      	b.n	1ecea <EccPoint_mult+0x40>
		nb = !uECC_vli_testBit(scalar, i);
   1edfe:	4629      	mov	r1, r5
   1ee00:	9804      	ldr	r0, [sp, #16]
   1ee02:	f7ff fb85 	bl	1e510 <uECC_vli_testBit>
   1ee06:	fab0 f680 	clz	r6, r0
   1ee0a:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1ee0c:	f1c6 0101 	rsb	r1, r6, #1
   1ee10:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   1ee14:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   1ee18:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   1ee1c:	4633      	mov	r3, r6
   1ee1e:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   1ee22:	465a      	mov	r2, fp
   1ee24:	9400      	str	r4, [sp, #0]
   1ee26:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1ee2a:	f7ff fda1 	bl	1e970 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1ee2e:	9907      	ldr	r1, [sp, #28]
   1ee30:	9806      	ldr	r0, [sp, #24]
   1ee32:	9400      	str	r4, [sp, #0]
   1ee34:	460b      	mov	r3, r1
   1ee36:	4602      	mov	r2, r0
   1ee38:	4631      	mov	r1, r6
   1ee3a:	4658      	mov	r0, fp
   1ee3c:	f7ff fece 	bl	1ebdc <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   1ee40:	3d01      	subs	r5, #1
   1ee42:	e773      	b.n	1ed2c <EccPoint_mult+0x82>

0001ee44 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   1ee44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1ee46:	f9b3 7002 	ldrsh.w	r7, [r3, #2]
{
   1ee4a:	461c      	mov	r4, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1ee4c:	f117 031f 	adds.w	r3, r7, #31
{
   1ee50:	460d      	mov	r5, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1ee52:	bf48      	it	mi
   1ee54:	f107 033e 	addmi.w	r3, r7, #62	; 0x3e
{
   1ee58:	4616      	mov	r6, r2

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1ee5a:	4601      	mov	r1, r0
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1ee5c:	f343 1347 	sbfx	r3, r3, #5, #8
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1ee60:	f104 0224 	add.w	r2, r4, #36	; 0x24
   1ee64:	4628      	mov	r0, r5
   1ee66:	f7ff fa8a 	bl	1e37e <uECC_vli_add>
   1ee6a:	b9a0      	cbnz	r0, 1ee96 <regularize_k+0x52>
   1ee6c:	ebb7 1f43 	cmp.w	r7, r3, lsl #5
   1ee70:	da13      	bge.n	1ee9a <regularize_k+0x56>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   1ee72:	4639      	mov	r1, r7
   1ee74:	4628      	mov	r0, r5
   1ee76:	e9cd 2300 	strd	r2, r3, [sp]
   1ee7a:	f7ff fb49 	bl	1e510 <uECC_vli_testBit>
   1ee7e:	e9dd 2300 	ldrd	r2, r3, [sp]
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   1ee82:	1e04      	subs	r4, r0, #0
   1ee84:	bf18      	it	ne
   1ee86:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   1ee88:	4629      	mov	r1, r5
   1ee8a:	4630      	mov	r0, r6
   1ee8c:	f7ff fa77 	bl	1e37e <uECC_vli_add>

	return carry;
}
   1ee90:	4620      	mov	r0, r4
   1ee92:	b003      	add	sp, #12
   1ee94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1ee96:	2401      	movs	r4, #1
   1ee98:	e7f6      	b.n	1ee88 <regularize_k+0x44>
   1ee9a:	4604      	mov	r4, r0
   1ee9c:	e7f4      	b.n	1ee88 <regularize_k+0x44>

0001ee9e <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   1ee9e:	b530      	push	{r4, r5, lr}
   1eea0:	4614      	mov	r4, r2
   1eea2:	b095      	sub	sp, #84	; 0x54
   1eea4:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1eea6:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1eea8:	4623      	mov	r3, r4
{
   1eeaa:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1eeac:	a904      	add	r1, sp, #16
   1eeae:	9102      	str	r1, [sp, #8]
   1eeb0:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1eeb2:	f7ff ffc7 	bl	1ee44 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   1eeb6:	fab0 f380 	clz	r3, r0
   1eeba:	095b      	lsrs	r3, r3, #5
   1eebc:	aa14      	add	r2, sp, #80	; 0x50
   1eebe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1eec2:	8863      	ldrh	r3, [r4, #2]
   1eec4:	9401      	str	r4, [sp, #4]
   1eec6:	3301      	adds	r3, #1
   1eec8:	b21b      	sxth	r3, r3
   1eeca:	9300      	str	r3, [sp, #0]
   1eecc:	f852 2c48 	ldr.w	r2, [r2, #-72]
   1eed0:	2300      	movs	r3, #0
   1eed2:	f104 0144 	add.w	r1, r4, #68	; 0x44
   1eed6:	4628      	mov	r0, r5
   1eed8:	f7ff fee7 	bl	1ecaa <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   1eedc:	4621      	mov	r1, r4
   1eede:	4628      	mov	r0, r5
   1eee0:	f7ff fe58 	bl	1eb94 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   1eee4:	fab0 f080 	clz	r0, r0
   1eee8:	0940      	lsrs	r0, r0, #5
   1eeea:	b015      	add	sp, #84	; 0x54
   1eeec:	bd30      	pop	{r4, r5, pc}

0001eeee <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   1eeee:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   1eef0:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1eef2:	1e4f      	subs	r7, r1, #1
   1eef4:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   1eef6:	428c      	cmp	r4, r1
   1eef8:	f105 0501 	add.w	r5, r5, #1
   1eefc:	db00      	blt.n	1ef00 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   1eefe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1ef00:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   1ef02:	f023 0603 	bic.w	r6, r3, #3
   1ef06:	f003 0303 	and.w	r3, r3, #3
   1ef0a:	5996      	ldr	r6, [r2, r6]
   1ef0c:	00db      	lsls	r3, r3, #3
   1ef0e:	fa26 f303 	lsr.w	r3, r6, r3
   1ef12:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   1ef14:	e7ee      	b.n	1eef4 <uECC_vli_nativeToBytes+0x6>

0001ef16 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   1ef16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ef18:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1ef1a:	1cd1      	adds	r1, r2, #3
   1ef1c:	bf48      	it	mi
   1ef1e:	1d91      	addmi	r1, r2, #6
   1ef20:	f341 0187 	sbfx	r1, r1, #2, #8
{
   1ef24:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1ef26:	f7ff fad9 	bl	1e4dc <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   1ef2a:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1ef2c:	1e67      	subs	r7, r4, #1
   1ef2e:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   1ef30:	42a2      	cmp	r2, r4
   1ef32:	f105 0501 	add.w	r5, r5, #1
   1ef36:	db00      	blt.n	1ef3a <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   1ef38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1ef3a:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   1ef3c:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   1ef40:	5cb2      	ldrb	r2, [r6, r2]
   1ef42:	f003 0303 	and.w	r3, r3, #3
   1ef46:	00db      	lsls	r3, r3, #3
   1ef48:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   1ef4c:	5842      	ldr	r2, [r0, r1]
   1ef4e:	431a      	orrs	r2, r3
   1ef50:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   1ef52:	e7ec      	b.n	1ef2e <uECC_vli_bytesToNative+0x18>

0001ef54 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   1ef54:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ef56:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1ef58:	f991 6000 	ldrsb.w	r6, [r1]
{
   1ef5c:	4605      	mov	r5, r0
   1ef5e:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   1ef60:	f7ff fe18 	bl	1eb94 <EccPoint_isZero>
   1ef64:	bb28      	cbnz	r0, 1efb2 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1ef66:	1d27      	adds	r7, r4, #4
   1ef68:	4632      	mov	r2, r6
   1ef6a:	4629      	mov	r1, r5
   1ef6c:	4638      	mov	r0, r7
   1ef6e:	f7ff fb06 	bl	1e57e <uECC_vli_cmp_unsafe>
   1ef72:	2801      	cmp	r0, #1
   1ef74:	d120      	bne.n	1efb8 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   1ef76:	4632      	mov	r2, r6
   1ef78:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   1ef7c:	4638      	mov	r0, r7
   1ef7e:	f7ff fafe 	bl	1e57e <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1ef82:	2801      	cmp	r0, #1
   1ef84:	d118      	bne.n	1efb8 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   1ef86:	4622      	mov	r2, r4
   1ef88:	4668      	mov	r0, sp
   1ef8a:	f7ff fc15 	bl	1e7b8 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   1ef8e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1ef92:	4622      	mov	r2, r4
   1ef94:	4629      	mov	r1, r5
   1ef96:	a808      	add	r0, sp, #32
   1ef98:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   1ef9a:	4632      	mov	r2, r6
   1ef9c:	a908      	add	r1, sp, #32
   1ef9e:	4668      	mov	r0, sp
   1efa0:	f7ff fb04 	bl	1e5ac <uECC_vli_equal>
		return -3;
   1efa4:	2800      	cmp	r0, #0
   1efa6:	bf0c      	ite	eq
   1efa8:	2000      	moveq	r0, #0
   1efaa:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   1efae:	b011      	add	sp, #68	; 0x44
   1efb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   1efb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1efb6:	e7fa      	b.n	1efae <uECC_valid_point+0x5a>
		return -2;
   1efb8:	f06f 0001 	mvn.w	r0, #1
   1efbc:	e7f7      	b.n	1efae <uECC_valid_point+0x5a>

0001efbe <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   1efbe:	b570      	push	{r4, r5, r6, lr}
   1efc0:	460c      	mov	r4, r1
   1efc2:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   1efc4:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1efc6:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   1efca:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1efcc:	4601      	mov	r1, r0
   1efce:	4668      	mov	r0, sp
   1efd0:	f7ff ffa1 	bl	1ef16 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   1efd4:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   1efd8:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   1efdc:	18a9      	adds	r1, r5, r2
   1efde:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   1efe2:	f7ff ff98 	bl	1ef16 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   1efe6:	2210      	movs	r2, #16
   1efe8:	4631      	mov	r1, r6
   1efea:	4668      	mov	r0, sp
   1efec:	f7ff fac7 	bl	1e57e <uECC_vli_cmp_unsafe>
   1eff0:	b128      	cbz	r0, 1effe <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   1eff2:	4621      	mov	r1, r4
   1eff4:	4668      	mov	r0, sp
   1eff6:	f7ff ffad 	bl	1ef54 <uECC_valid_point>
}
   1effa:	b010      	add	sp, #64	; 0x40
   1effc:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   1effe:	f06f 0003 	mvn.w	r0, #3
   1f002:	e7fa      	b.n	1effa <uECC_valid_public_key+0x3c>

0001f004 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1f004:	78cb      	ldrb	r3, [r1, #3]
   1f006:	7802      	ldrb	r2, [r0, #0]
   1f008:	4053      	eors	r3, r2
   1f00a:	7003      	strb	r3, [r0, #0]
   1f00c:	884b      	ldrh	r3, [r1, #2]
   1f00e:	7842      	ldrb	r2, [r0, #1]
   1f010:	4053      	eors	r3, r2
   1f012:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1f014:	680a      	ldr	r2, [r1, #0]
   1f016:	7883      	ldrb	r3, [r0, #2]
   1f018:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1f01c:	7083      	strb	r3, [r0, #2]
   1f01e:	680a      	ldr	r2, [r1, #0]
   1f020:	78c3      	ldrb	r3, [r0, #3]
   1f022:	4053      	eors	r3, r2
   1f024:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1f026:	79cb      	ldrb	r3, [r1, #7]
   1f028:	7902      	ldrb	r2, [r0, #4]
   1f02a:	4053      	eors	r3, r2
   1f02c:	7103      	strb	r3, [r0, #4]
   1f02e:	88cb      	ldrh	r3, [r1, #6]
   1f030:	7942      	ldrb	r2, [r0, #5]
   1f032:	4053      	eors	r3, r2
   1f034:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1f036:	684a      	ldr	r2, [r1, #4]
   1f038:	7983      	ldrb	r3, [r0, #6]
   1f03a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1f03e:	7183      	strb	r3, [r0, #6]
   1f040:	684a      	ldr	r2, [r1, #4]
   1f042:	79c3      	ldrb	r3, [r0, #7]
   1f044:	4053      	eors	r3, r2
   1f046:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1f048:	7acb      	ldrb	r3, [r1, #11]
   1f04a:	7a02      	ldrb	r2, [r0, #8]
   1f04c:	4053      	eors	r3, r2
   1f04e:	7203      	strb	r3, [r0, #8]
   1f050:	7a42      	ldrb	r2, [r0, #9]
   1f052:	894b      	ldrh	r3, [r1, #10]
   1f054:	4053      	eors	r3, r2
   1f056:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1f058:	688a      	ldr	r2, [r1, #8]
   1f05a:	7a83      	ldrb	r3, [r0, #10]
   1f05c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1f060:	7283      	strb	r3, [r0, #10]
   1f062:	688a      	ldr	r2, [r1, #8]
   1f064:	7ac3      	ldrb	r3, [r0, #11]
   1f066:	4053      	eors	r3, r2
   1f068:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1f06a:	7bcb      	ldrb	r3, [r1, #15]
   1f06c:	7b02      	ldrb	r2, [r0, #12]
   1f06e:	4053      	eors	r3, r2
   1f070:	7303      	strb	r3, [r0, #12]
   1f072:	89cb      	ldrh	r3, [r1, #14]
   1f074:	7b42      	ldrb	r2, [r0, #13]
   1f076:	4053      	eors	r3, r2
   1f078:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1f07a:	68ca      	ldr	r2, [r1, #12]
   1f07c:	7b83      	ldrb	r3, [r0, #14]
   1f07e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1f082:	7383      	strb	r3, [r0, #14]
   1f084:	68ca      	ldr	r2, [r1, #12]
   1f086:	7bc3      	ldrb	r3, [r0, #15]
   1f088:	4053      	eors	r3, r2
   1f08a:	73c3      	strb	r3, [r0, #15]
}
   1f08c:	4770      	bx	lr

0001f08e <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1f08e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1f090:	7802      	ldrb	r2, [r0, #0]
   1f092:	f88d 2000 	strb.w	r2, [sp]
   1f096:	7942      	ldrb	r2, [r0, #5]
   1f098:	f88d 2001 	strb.w	r2, [sp, #1]
   1f09c:	7a82      	ldrb	r2, [r0, #10]
   1f09e:	f88d 2002 	strb.w	r2, [sp, #2]
   1f0a2:	7bc2      	ldrb	r2, [r0, #15]
   1f0a4:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1f0a8:	7902      	ldrb	r2, [r0, #4]
   1f0aa:	f88d 2004 	strb.w	r2, [sp, #4]
   1f0ae:	7a42      	ldrb	r2, [r0, #9]
   1f0b0:	f88d 2005 	strb.w	r2, [sp, #5]
   1f0b4:	7b82      	ldrb	r2, [r0, #14]
   1f0b6:	f88d 2006 	strb.w	r2, [sp, #6]
   1f0ba:	78c2      	ldrb	r2, [r0, #3]
   1f0bc:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1f0c0:	7a02      	ldrb	r2, [r0, #8]
   1f0c2:	f88d 2008 	strb.w	r2, [sp, #8]
   1f0c6:	7b42      	ldrb	r2, [r0, #13]
   1f0c8:	f88d 2009 	strb.w	r2, [sp, #9]
   1f0cc:	7882      	ldrb	r2, [r0, #2]
   1f0ce:	f88d 200a 	strb.w	r2, [sp, #10]
   1f0d2:	79c2      	ldrb	r2, [r0, #7]
   1f0d4:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1f0d8:	7b02      	ldrb	r2, [r0, #12]
   1f0da:	f88d 200c 	strb.w	r2, [sp, #12]
   1f0de:	7842      	ldrb	r2, [r0, #1]
   1f0e0:	7ac3      	ldrb	r3, [r0, #11]
   1f0e2:	f88d 200d 	strb.w	r2, [sp, #13]
   1f0e6:	7982      	ldrb	r2, [r0, #6]
   1f0e8:	f88d 200e 	strb.w	r2, [sp, #14]
   1f0ec:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1f0f0:	2310      	movs	r3, #16
   1f0f2:	466a      	mov	r2, sp
   1f0f4:	4619      	mov	r1, r3
   1f0f6:	f7ff f87e 	bl	1e1f6 <_copy>
}
   1f0fa:	b005      	add	sp, #20
   1f0fc:	f85d fb04 	ldr.w	pc, [sp], #4

0001f100 <mult_row_column>:
{
   1f100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f102:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1f104:	7808      	ldrb	r0, [r1, #0]
{
   1f106:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1f108:	f7ff f884 	bl	1e214 <_double_byte>
   1f10c:	4605      	mov	r5, r0
   1f10e:	7860      	ldrb	r0, [r4, #1]
   1f110:	f7ff f880 	bl	1e214 <_double_byte>
   1f114:	78a2      	ldrb	r2, [r4, #2]
   1f116:	7863      	ldrb	r3, [r4, #1]
   1f118:	4053      	eors	r3, r2
   1f11a:	78e2      	ldrb	r2, [r4, #3]
   1f11c:	4053      	eors	r3, r2
   1f11e:	405d      	eors	r5, r3
   1f120:	4068      	eors	r0, r5
   1f122:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1f124:	7860      	ldrb	r0, [r4, #1]
   1f126:	7827      	ldrb	r7, [r4, #0]
   1f128:	f7ff f874 	bl	1e214 <_double_byte>
   1f12c:	4605      	mov	r5, r0
   1f12e:	78a0      	ldrb	r0, [r4, #2]
   1f130:	f7ff f870 	bl	1e214 <_double_byte>
   1f134:	78a3      	ldrb	r3, [r4, #2]
   1f136:	405f      	eors	r7, r3
   1f138:	78e3      	ldrb	r3, [r4, #3]
   1f13a:	405f      	eors	r7, r3
   1f13c:	407d      	eors	r5, r7
   1f13e:	4068      	eors	r0, r5
   1f140:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1f142:	78a0      	ldrb	r0, [r4, #2]
   1f144:	7865      	ldrb	r5, [r4, #1]
   1f146:	7827      	ldrb	r7, [r4, #0]
   1f148:	f7ff f864 	bl	1e214 <_double_byte>
   1f14c:	406f      	eors	r7, r5
   1f14e:	4605      	mov	r5, r0
   1f150:	78e0      	ldrb	r0, [r4, #3]
   1f152:	f7ff f85f 	bl	1e214 <_double_byte>
   1f156:	78e3      	ldrb	r3, [r4, #3]
   1f158:	405f      	eors	r7, r3
   1f15a:	407d      	eors	r5, r7
   1f15c:	4068      	eors	r0, r5
   1f15e:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1f160:	7820      	ldrb	r0, [r4, #0]
   1f162:	f7ff f857 	bl	1e214 <_double_byte>
   1f166:	7863      	ldrb	r3, [r4, #1]
   1f168:	7825      	ldrb	r5, [r4, #0]
   1f16a:	405d      	eors	r5, r3
   1f16c:	78a3      	ldrb	r3, [r4, #2]
   1f16e:	405d      	eors	r5, r3
   1f170:	4045      	eors	r5, r0
   1f172:	78e0      	ldrb	r0, [r4, #3]
   1f174:	f7ff f84e 	bl	1e214 <_double_byte>
   1f178:	b2ed      	uxtb	r5, r5
   1f17a:	4045      	eors	r5, r0
   1f17c:	70f5      	strb	r5, [r6, #3]
}
   1f17e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f180 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1f180:	b570      	push	{r4, r5, r6, lr}
   1f182:	4614      	mov	r4, r2
   1f184:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1f186:	4605      	mov	r5, r0
   1f188:	2800      	cmp	r0, #0
   1f18a:	d049      	beq.n	1f220 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1f18c:	2900      	cmp	r1, #0
   1f18e:	d049      	beq.n	1f224 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1f190:	2a00      	cmp	r2, #0
   1f192:	d049      	beq.n	1f228 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1f194:	2310      	movs	r3, #16
   1f196:	460a      	mov	r2, r1
   1f198:	4668      	mov	r0, sp
   1f19a:	4619      	mov	r1, r3
   1f19c:	f7ff f82b 	bl	1e1f6 <_copy>
	add_round_key(state, s->words);
   1f1a0:	4621      	mov	r1, r4
   1f1a2:	4668      	mov	r0, sp
   1f1a4:	f7ff ff2e 	bl	1f004 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1f1a8:	3410      	adds	r4, #16
   1f1aa:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1f1ae:	4668      	mov	r0, sp
   1f1b0:	f7e7 fcca 	bl	6b48 <sub_bytes>
		shift_rows(state);
   1f1b4:	4668      	mov	r0, sp
   1f1b6:	f7ff ff6a 	bl	1f08e <shift_rows>
	mult_row_column(t, s);
   1f1ba:	4669      	mov	r1, sp
   1f1bc:	a804      	add	r0, sp, #16
   1f1be:	f7ff ff9f 	bl	1f100 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1f1c2:	a901      	add	r1, sp, #4
   1f1c4:	a805      	add	r0, sp, #20
   1f1c6:	f7ff ff9b 	bl	1f100 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1f1ca:	a902      	add	r1, sp, #8
   1f1cc:	a806      	add	r0, sp, #24
   1f1ce:	f7ff ff97 	bl	1f100 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1f1d2:	a903      	add	r1, sp, #12
   1f1d4:	a807      	add	r0, sp, #28
   1f1d6:	f7ff ff93 	bl	1f100 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1f1da:	2310      	movs	r3, #16
   1f1dc:	4619      	mov	r1, r3
   1f1de:	eb0d 0203 	add.w	r2, sp, r3
   1f1e2:	4668      	mov	r0, sp
   1f1e4:	f7ff f807 	bl	1e1f6 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1f1e8:	4621      	mov	r1, r4
   1f1ea:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1f1ec:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1f1ee:	f7ff ff09 	bl	1f004 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1f1f2:	42a6      	cmp	r6, r4
   1f1f4:	d1db      	bne.n	1f1ae <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1f1f6:	f7e7 fca7 	bl	6b48 <sub_bytes>
	shift_rows(state);
   1f1fa:	4668      	mov	r0, sp
   1f1fc:	f7ff ff47 	bl	1f08e <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1f200:	4631      	mov	r1, r6
   1f202:	4668      	mov	r0, sp
   1f204:	f7ff fefe 	bl	1f004 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1f208:	2310      	movs	r3, #16
   1f20a:	4619      	mov	r1, r3
   1f20c:	466a      	mov	r2, sp
   1f20e:	4628      	mov	r0, r5
   1f210:	f7fe fff1 	bl	1e1f6 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1f214:	4668      	mov	r0, sp
   1f216:	2210      	movs	r2, #16
   1f218:	2100      	movs	r1, #0
   1f21a:	f7fe fff9 	bl	1e210 <_set>

	return TC_CRYPTO_SUCCESS;
   1f21e:	2001      	movs	r0, #1
}
   1f220:	b008      	add	sp, #32
   1f222:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1f224:	4608      	mov	r0, r1
   1f226:	e7fb      	b.n	1f220 <tc_aes_encrypt+0xa0>
   1f228:	4610      	mov	r0, r2
   1f22a:	e7f9      	b.n	1f220 <tc_aes_encrypt+0xa0>

0001f22c <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1f22c:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1f22e:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1f230:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1f232:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1f236:	2b00      	cmp	r3, #0
   1f238:	bfb4      	ite	lt
   1f23a:	2387      	movlt	r3, #135	; 0x87
   1f23c:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1f23e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1f242:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1f246:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1f248:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1f24c:	d002      	beq.n	1f254 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1f24e:	7813      	ldrb	r3, [r2, #0]
   1f250:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1f252:	e7f4      	b.n	1f23e <gf_double+0x12>
	}
}
   1f254:	bd10      	pop	{r4, pc}

0001f256 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1f256:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1f258:	b120      	cbz	r0, 1f264 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1f25a:	2258      	movs	r2, #88	; 0x58
   1f25c:	2100      	movs	r1, #0
   1f25e:	f7fe ffd7 	bl	1e210 <_set>
   1f262:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1f264:	bd08      	pop	{r3, pc}

0001f266 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1f266:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1f268:	4604      	mov	r4, r0
   1f26a:	b188      	cbz	r0, 1f290 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1f26c:	2210      	movs	r2, #16
   1f26e:	2100      	movs	r1, #0
   1f270:	f7fe ffce 	bl	1e210 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1f274:	2210      	movs	r2, #16
   1f276:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1f27a:	2100      	movs	r1, #0
   1f27c:	f7fe ffc8 	bl	1e210 <_set>
	s->leftover_offset = 0;
   1f280:	2300      	movs	r3, #0
   1f282:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1f284:	2200      	movs	r2, #0
   1f286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1f28a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1f28e:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1f290:	bd10      	pop	{r4, pc}

0001f292 <tc_cmac_setup>:
{
   1f292:	b570      	push	{r4, r5, r6, lr}
   1f294:	460d      	mov	r5, r1
   1f296:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1f298:	4604      	mov	r4, r0
   1f29a:	b310      	cbz	r0, 1f2e2 <tc_cmac_setup+0x50>
   1f29c:	b311      	cbz	r1, 1f2e4 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1f29e:	2258      	movs	r2, #88	; 0x58
   1f2a0:	2100      	movs	r1, #0
   1f2a2:	f7fe ffb5 	bl	1e210 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1f2a6:	4629      	mov	r1, r5
	s->sched = sched;
   1f2a8:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1f2aa:	4630      	mov	r0, r6
   1f2ac:	f7e7 fc58 	bl	6b60 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1f2b0:	2210      	movs	r2, #16
   1f2b2:	2100      	movs	r1, #0
   1f2b4:	4620      	mov	r0, r4
   1f2b6:	f7fe ffab 	bl	1e210 <_set>
	gf_double (s->K1, s->iv);
   1f2ba:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1f2be:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1f2c0:	4621      	mov	r1, r4
   1f2c2:	4620      	mov	r0, r4
   1f2c4:	f7ff ff5c 	bl	1f180 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1f2c8:	4621      	mov	r1, r4
   1f2ca:	4628      	mov	r0, r5
   1f2cc:	f7ff ffae 	bl	1f22c <gf_double>
	gf_double (s->K2, s->K1);
   1f2d0:	4629      	mov	r1, r5
   1f2d2:	f104 0020 	add.w	r0, r4, #32
   1f2d6:	f7ff ffa9 	bl	1f22c <gf_double>
	tc_cmac_init(s);
   1f2da:	4620      	mov	r0, r4
   1f2dc:	f7ff ffc3 	bl	1f266 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1f2e0:	2001      	movs	r0, #1
}
   1f2e2:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1f2e4:	4608      	mov	r0, r1
   1f2e6:	e7fc      	b.n	1f2e2 <tc_cmac_setup+0x50>

0001f2e8 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1f2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f2ec:	460d      	mov	r5, r1
   1f2ee:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1f2f0:	4604      	mov	r4, r0
   1f2f2:	2800      	cmp	r0, #0
   1f2f4:	d061      	beq.n	1f3ba <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1f2f6:	b912      	cbnz	r2, 1f2fe <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1f2f8:	2001      	movs	r0, #1
}
   1f2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1f2fe:	2900      	cmp	r1, #0
   1f300:	d05b      	beq.n	1f3ba <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   1f302:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1f306:	ea53 0102 	orrs.w	r1, r3, r2
   1f30a:	d056      	beq.n	1f3ba <tc_cmac_update+0xd2>
	s->countdown--;
   1f30c:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   1f30e:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1f312:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   1f316:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1f31a:	f1b8 0f00 	cmp.w	r8, #0
   1f31e:	d02a      	beq.n	1f376 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1f320:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1f324:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1f328:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1f32a:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1f32c:	d208      	bcs.n	1f340 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1f32e:	462a      	mov	r2, r5
   1f330:	4633      	mov	r3, r6
   1f332:	4631      	mov	r1, r6
   1f334:	f7fe ff5f 	bl	1e1f6 <_copy>
			s->leftover_offset += data_length;
   1f338:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1f33a:	4432      	add	r2, r6
   1f33c:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1f33e:	e7db      	b.n	1f2f8 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1f340:	463b      	mov	r3, r7
   1f342:	462a      	mov	r2, r5
   1f344:	4639      	mov	r1, r7
   1f346:	f7fe ff56 	bl	1e1f6 <_copy>
		data_length -= remaining_space;
   1f34a:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1f34c:	2300      	movs	r3, #0
   1f34e:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1f350:	4446      	add	r6, r8
		data += remaining_space;
   1f352:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1f354:	1e63      	subs	r3, r4, #1
   1f356:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1f35a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1f35e:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1f362:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1f364:	ea82 0200 	eor.w	r2, r2, r0
   1f368:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1f36a:	d1f6      	bne.n	1f35a <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1f36c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1f36e:	4621      	mov	r1, r4
   1f370:	4620      	mov	r0, r4
   1f372:	f7ff ff05 	bl	1f180 <tc_aes_encrypt>
   1f376:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1f37a:	2e10      	cmp	r6, #16
   1f37c:	d80a      	bhi.n	1f394 <tc_cmac_update+0xac>
	if (data_length > 0) {
   1f37e:	2e00      	cmp	r6, #0
   1f380:	d0ba      	beq.n	1f2f8 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1f382:	4633      	mov	r3, r6
   1f384:	462a      	mov	r2, r5
   1f386:	4631      	mov	r1, r6
   1f388:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1f38c:	f7fe ff33 	bl	1e1f6 <_copy>
		s->leftover_offset = data_length;
   1f390:	6466      	str	r6, [r4, #68]	; 0x44
   1f392:	e7b1      	b.n	1f2f8 <tc_cmac_update+0x10>
   1f394:	1e63      	subs	r3, r4, #1
   1f396:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1f398:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1f39c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1f3a0:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1f3a2:	ea82 0200 	eor.w	r2, r2, r0
   1f3a6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1f3a8:	d1f6      	bne.n	1f398 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1f3aa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1f3ac:	4621      	mov	r1, r4
   1f3ae:	4620      	mov	r0, r4
   1f3b0:	f7ff fee6 	bl	1f180 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1f3b4:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1f3b6:	3e10      	subs	r6, #16
   1f3b8:	e7df      	b.n	1f37a <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   1f3ba:	2000      	movs	r0, #0
   1f3bc:	e79d      	b.n	1f2fa <tc_cmac_update+0x12>

0001f3be <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1f3be:	b570      	push	{r4, r5, r6, lr}
   1f3c0:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1f3c2:	4605      	mov	r5, r0
   1f3c4:	b1e8      	cbz	r0, 1f402 <tc_cmac_final+0x44>
   1f3c6:	b369      	cbz	r1, 1f424 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1f3c8:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1f3ca:	2a10      	cmp	r2, #16
   1f3cc:	d11a      	bne.n	1f404 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1f3ce:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1f3d0:	1e63      	subs	r3, r4, #1
   1f3d2:	3901      	subs	r1, #1
   1f3d4:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1f3d8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1f3dc:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1f3e0:	4072      	eors	r2, r6
   1f3e2:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1f3e6:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1f3e8:	ea82 0206 	eor.w	r2, r2, r6
   1f3ec:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1f3ee:	d1f3      	bne.n	1f3d8 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1f3f0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1f3f2:	4621      	mov	r1, r4
   1f3f4:	4628      	mov	r0, r5
   1f3f6:	f7ff fec3 	bl	1f180 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1f3fa:	4620      	mov	r0, r4
   1f3fc:	f7ff ff2b 	bl	1f256 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1f400:	2001      	movs	r0, #1
}
   1f402:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1f404:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1f408:	2100      	movs	r1, #0
   1f40a:	f1c2 0210 	rsb	r2, r2, #16
   1f40e:	4420      	add	r0, r4
   1f410:	f7fe fefe 	bl	1e210 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1f414:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1f416:	4423      	add	r3, r4
   1f418:	2280      	movs	r2, #128	; 0x80
   1f41a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1f41e:	f104 0120 	add.w	r1, r4, #32
   1f422:	e7d5      	b.n	1f3d0 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1f424:	4608      	mov	r0, r1
   1f426:	e7ec      	b.n	1f402 <tc_cmac_final+0x44>

0001f428 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1f428:	2100      	movs	r1, #0
   1f42a:	2001      	movs	r0, #1
   1f42c:	f7e7 bd1c 	b.w	6e68 <z_arm_fatal_error>

0001f430 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1f430:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1f432:	6800      	ldr	r0, [r0, #0]
   1f434:	f7e7 bd18 	b.w	6e68 <z_arm_fatal_error>

0001f438 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1f438:	b508      	push	{r3, lr}
	handler();
   1f43a:	f7e7 fd89 	bl	6f50 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1f43e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1f442:	f7e7 bffd 	b.w	7440 <z_arm_exc_exit>

0001f446 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1f446:	3901      	subs	r1, #1
   1f448:	4603      	mov	r3, r0
   1f44a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1f44e:	b90a      	cbnz	r2, 1f454 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1f450:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1f452:	4770      	bx	lr
		*d = *s;
   1f454:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1f458:	e7f7      	b.n	1f44a <strcpy+0x4>

0001f45a <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1f45a:	b570      	push	{r4, r5, r6, lr}
   1f45c:	4605      	mov	r5, r0
   1f45e:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1f460:	b142      	cbz	r2, 1f474 <strncpy+0x1a>
   1f462:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   1f466:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   1f468:	b92c      	cbnz	r4, 1f476 <strncpy+0x1c>
   1f46a:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   1f46c:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   1f470:	429a      	cmp	r2, r3
   1f472:	d1fb      	bne.n	1f46c <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   1f474:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   1f476:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   1f47a:	4632      	mov	r2, r6
   1f47c:	e7ef      	b.n	1f45e <strncpy+0x4>

0001f47e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1f47e:	4603      	mov	r3, r0
	size_t n = 0;
   1f480:	2000      	movs	r0, #0

	while (*s != '\0') {
   1f482:	5c1a      	ldrb	r2, [r3, r0]
   1f484:	b902      	cbnz	r2, 1f488 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1f486:	4770      	bx	lr
		n++;
   1f488:	3001      	adds	r0, #1
   1f48a:	e7fa      	b.n	1f482 <strlen+0x4>

0001f48c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1f48c:	4603      	mov	r3, r0
	size_t n = 0;
   1f48e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1f490:	5c1a      	ldrb	r2, [r3, r0]
   1f492:	b10a      	cbz	r2, 1f498 <strnlen+0xc>
   1f494:	4288      	cmp	r0, r1
   1f496:	d100      	bne.n	1f49a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1f498:	4770      	bx	lr
		n++;
   1f49a:	3001      	adds	r0, #1
   1f49c:	e7f8      	b.n	1f490 <strnlen+0x4>

0001f49e <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1f49e:	3801      	subs	r0, #1
   1f4a0:	3901      	subs	r1, #1
   1f4a2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1f4a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1f4aa:	4293      	cmp	r3, r2
   1f4ac:	d101      	bne.n	1f4b2 <strcmp+0x14>
   1f4ae:	2b00      	cmp	r3, #0
   1f4b0:	d1f7      	bne.n	1f4a2 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1f4b2:	1a98      	subs	r0, r3, r2
   1f4b4:	4770      	bx	lr

0001f4b6 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1f4b6:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1f4b8:	b162      	cbz	r2, 1f4d4 <memcmp+0x1e>
   1f4ba:	4603      	mov	r3, r0
   1f4bc:	3901      	subs	r1, #1
   1f4be:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1f4c0:	f813 0b01 	ldrb.w	r0, [r3], #1
   1f4c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1f4c8:	42a3      	cmp	r3, r4
   1f4ca:	d001      	beq.n	1f4d0 <memcmp+0x1a>
   1f4cc:	4290      	cmp	r0, r2
   1f4ce:	d0f7      	beq.n	1f4c0 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1f4d0:	1a80      	subs	r0, r0, r2
}
   1f4d2:	bd10      	pop	{r4, pc}
		return 0;
   1f4d4:	4610      	mov	r0, r2
   1f4d6:	e7fc      	b.n	1f4d2 <memcmp+0x1c>

0001f4d8 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1f4d8:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1f4da:	ea81 0400 	eor.w	r4, r1, r0
   1f4de:	07a5      	lsls	r5, r4, #30
   1f4e0:	4603      	mov	r3, r0
   1f4e2:	d00b      	beq.n	1f4fc <memcpy+0x24>
   1f4e4:	3b01      	subs	r3, #1
   1f4e6:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1f4e8:	4291      	cmp	r1, r2
   1f4ea:	d11b      	bne.n	1f524 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1f4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1f4ee:	2a00      	cmp	r2, #0
   1f4f0:	d0fc      	beq.n	1f4ec <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1f4f2:	f811 4b01 	ldrb.w	r4, [r1], #1
   1f4f6:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   1f4fa:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   1f4fc:	079c      	lsls	r4, r3, #30
   1f4fe:	d1f6      	bne.n	1f4ee <memcpy+0x16>
   1f500:	f022 0403 	bic.w	r4, r2, #3
   1f504:	1f1d      	subs	r5, r3, #4
   1f506:	0896      	lsrs	r6, r2, #2
   1f508:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1f50a:	42b9      	cmp	r1, r7
   1f50c:	d105      	bne.n	1f51a <memcpy+0x42>
   1f50e:	f06f 0503 	mvn.w	r5, #3
   1f512:	fb05 2206 	mla	r2, r5, r6, r2
		d_byte = (unsigned char *)d_word;
   1f516:	4423      	add	r3, r4
   1f518:	e7e4      	b.n	1f4e4 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1f51a:	f851 cb04 	ldr.w	ip, [r1], #4
   1f51e:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1f522:	e7f2      	b.n	1f50a <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1f524:	f811 4b01 	ldrb.w	r4, [r1], #1
   1f528:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1f52c:	e7dc      	b.n	1f4e8 <memcpy+0x10>

0001f52e <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1f52e:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1f530:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   1f532:	4604      	mov	r4, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1f534:	07a3      	lsls	r3, r4, #30
   1f536:	d111      	bne.n	1f55c <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1f538:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
	c_word |= c_word << 16;
   1f53c:	ea43 4503 	orr.w	r5, r3, r3, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1f540:	f022 0303 	bic.w	r3, r2, #3
   1f544:	0896      	lsrs	r6, r2, #2
   1f546:	4423      	add	r3, r4
   1f548:	429c      	cmp	r4, r3
   1f54a:	d10d      	bne.n	1f568 <memset+0x3a>
   1f54c:	f06f 0403 	mvn.w	r4, #3
   1f550:	fb04 2206 	mla	r2, r4, r6, r2
   1f554:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1f556:	4293      	cmp	r3, r2
   1f558:	d109      	bne.n	1f56e <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1f55a:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1f55c:	2a00      	cmp	r2, #0
   1f55e:	d0fc      	beq.n	1f55a <memset+0x2c>
		*(d_byte++) = c_byte;
   1f560:	f804 1b01 	strb.w	r1, [r4], #1
		n--;
   1f564:	3a01      	subs	r2, #1
   1f566:	e7e5      	b.n	1f534 <memset+0x6>
		*(d_word++) = c_word;
   1f568:	f844 5b04 	str.w	r5, [r4], #4
		n -= sizeof(mem_word_t);
   1f56c:	e7ec      	b.n	1f548 <memset+0x1a>
		*(d_byte++) = c_byte;
   1f56e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1f572:	e7f0      	b.n	1f556 <memset+0x28>

0001f574 <_stdout_hook_default>:
}
   1f574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f578:	4770      	bx	lr

0001f57a <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1f57a:	f7fb bc03 	b.w	1ad84 <SystemInit>

0001f57e <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
   1f57e:	b082      	sub	sp, #8
   1f580:	ab02      	add	r3, sp, #8
   1f582:	e903 0003 	stmdb	r3, {r0, r1}
	switch (info.state) {
   1f586:	f89d 3000 	ldrb.w	r3, [sp]
   1f58a:	2b06      	cmp	r3, #6
   1f58c:	d108      	bne.n	1f5a0 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1f58e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f592:	2201      	movs	r2, #1
   1f594:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1f598:	f3bf 8f4f 	dsb	sy
        __WFE();
   1f59c:	bf20      	wfe
    while (true)
   1f59e:	e7fd      	b.n	1f59c <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   1f5a0:	b002      	add	sp, #8
   1f5a2:	4770      	bx	lr

0001f5a4 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1f5a4:	b082      	sub	sp, #8
   1f5a6:	ab02      	add	r3, sp, #8
   1f5a8:	e903 0003 	stmdb	r3, {r0, r1}
   1f5ac:	2300      	movs	r3, #0
   1f5ae:	f383 8811 	msr	BASEPRI, r3
   1f5b2:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1f5b6:	b002      	add	sp, #8
   1f5b8:	4770      	bx	lr

0001f5ba <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   1f5ba:	b530      	push	{r4, r5, lr}
   1f5bc:	b085      	sub	sp, #20
   1f5be:	4604      	mov	r4, r0
   1f5c0:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   1f5c2:	4668      	mov	r0, sp
   1f5c4:	2203      	movs	r2, #3
   1f5c6:	f7ff ff87 	bl	1f4d8 <memcpy>
	(void)memset(res + 3, 0, 13);
   1f5ca:	220d      	movs	r2, #13
   1f5cc:	2100      	movs	r1, #0
   1f5ce:	f10d 0003 	add.w	r0, sp, #3
   1f5d2:	f7ff ffac 	bl	1f52e <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   1f5d6:	4620      	mov	r0, r4
   1f5d8:	466a      	mov	r2, sp
   1f5da:	4669      	mov	r1, sp
   1f5dc:	f7f1 fda0 	bl	11120 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   1f5e0:	4604      	mov	r4, r0
   1f5e2:	b920      	cbnz	r0, 1f5ee <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   1f5e4:	2203      	movs	r2, #3
   1f5e6:	4669      	mov	r1, sp
   1f5e8:	4628      	mov	r0, r5
   1f5ea:	f7ff ff75 	bl	1f4d8 <memcpy>

	return 0;
}
   1f5ee:	4620      	mov	r0, r4
   1f5f0:	b005      	add	sp, #20
   1f5f2:	bd30      	pop	{r4, r5, pc}

0001f5f4 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   1f5f4:	b513      	push	{r0, r1, r4, lr}
   1f5f6:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   1f5f8:	aa01      	add	r2, sp, #4
   1f5fa:	3103      	adds	r1, #3
   1f5fc:	f7ff ffdd 	bl	1f5ba <ah>
	if (err) {
   1f600:	b948      	cbnz	r0, 1f616 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   1f602:	2203      	movs	r2, #3
   1f604:	a901      	add	r1, sp, #4
   1f606:	4620      	mov	r0, r4
   1f608:	f7ff ff55 	bl	1f4b6 <memcmp>
   1f60c:	fab0 f080 	clz	r0, r0
   1f610:	0940      	lsrs	r0, r0, #5
}
   1f612:	b002      	add	sp, #8
   1f614:	bd10      	pop	{r4, pc}
		return false;
   1f616:	2000      	movs	r0, #0
   1f618:	e7fb      	b.n	1f612 <bt_rpa_irk_matches+0x1e>

0001f61a <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   1f61a:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   1f61c:	1cce      	adds	r6, r1, #3
{
   1f61e:	4605      	mov	r5, r0
   1f620:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   1f622:	4630      	mov	r0, r6
   1f624:	2103      	movs	r1, #3
   1f626:	f7f1 fd79 	bl	1111c <bt_rand>
	if (err) {
   1f62a:	b960      	cbnz	r0, 1f646 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   1f62c:	7963      	ldrb	r3, [r4, #5]
   1f62e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1f632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1f636:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   1f638:	4622      	mov	r2, r4
   1f63a:	4631      	mov	r1, r6
   1f63c:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   1f63e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   1f642:	f7ff bfba 	b.w	1f5ba <ah>
}
   1f646:	bd70      	pop	{r4, r5, r6, pc}

0001f648 <send_cmd_status>:
{
   1f648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1f64c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1f650:	4606      	mov	r6, r0
   1f652:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1f654:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f658:	2100      	movs	r1, #0
   1f65a:	200f      	movs	r0, #15
   1f65c:	f7e8 fa98 	bl	7b90 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1f660:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   1f662:	f100 0808 	add.w	r8, r0, #8
   1f666:	4604      	mov	r4, r0
   1f668:	7507      	strb	r7, [r0, #20]
   1f66a:	2102      	movs	r1, #2
   1f66c:	4640      	mov	r0, r8
   1f66e:	f002 f80d 	bl	2168c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1f672:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   1f674:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1f676:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   1f678:	7041      	strb	r1, [r0, #1]
   1f67a:	4640      	mov	r0, r8
   1f67c:	f002 f806 	bl	2168c <net_buf_simple_add>
	evt->ncmd = 1U;
   1f680:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   1f682:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   1f684:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   1f686:	4620      	mov	r0, r4
}
   1f688:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   1f68c:	f7e9 bc08 	b.w	8ea0 <bt_recv_prio>

0001f690 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   1f690:	f101 0320 	add.w	r3, r1, #32
   1f694:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1f696:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1f69a:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1f69e:	428b      	cmp	r3, r1
   1f6a0:	d1f9      	bne.n	1f696 <sys_memcpy_swap.constprop.0+0x6>
}
   1f6a2:	4770      	bx	lr

0001f6a4 <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   1f6a4:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   1f6a8:	f043 0306 	orr.w	r3, r3, #6
   1f6ac:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   1f6b0:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   1f6b4:	f043 0304 	orr.w	r3, r3, #4
   1f6b8:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   1f6bc:	4770      	bx	lr

0001f6be <default_CSPRNG>:
{
   1f6be:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   1f6c0:	f7f1 fd2c 	bl	1111c <bt_rand>
}
   1f6c4:	fab0 f080 	clz	r0, r0
   1f6c8:	0940      	lsrs	r0, r0, #5
   1f6ca:	bd08      	pop	{r3, pc}

0001f6cc <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1f6cc:	b510      	push	{r4, lr}
   1f6ce:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1f6d0:	7801      	ldrb	r1, [r0, #0]
   1f6d2:	7822      	ldrb	r2, [r4, #0]
   1f6d4:	428a      	cmp	r2, r1
{
   1f6d6:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1f6d8:	d00f      	beq.n	1f6fa <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1f6da:	4669      	mov	r1, sp
   1f6dc:	f7e8 f9ec 	bl	7ab8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1f6e0:	a905      	add	r1, sp, #20
   1f6e2:	4620      	mov	r0, r4
   1f6e4:	f7e8 f9e8 	bl	7ab8 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1f6e8:	2210      	movs	r2, #16
   1f6ea:	f10d 0115 	add.w	r1, sp, #21
   1f6ee:	f10d 0001 	add.w	r0, sp, #1
   1f6f2:	f7ff fee0 	bl	1f4b6 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1f6f6:	b00a      	add	sp, #40	; 0x28
   1f6f8:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1f6fa:	2a01      	cmp	r2, #1
   1f6fc:	d006      	beq.n	1f70c <bt_uuid_cmp+0x40>
   1f6fe:	2a02      	cmp	r2, #2
   1f700:	d007      	beq.n	1f712 <bt_uuid_cmp+0x46>
   1f702:	b972      	cbnz	r2, 1f722 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1f704:	8840      	ldrh	r0, [r0, #2]
   1f706:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1f708:	1ac0      	subs	r0, r0, r3
   1f70a:	e7f4      	b.n	1f6f6 <bt_uuid_cmp+0x2a>
   1f70c:	6840      	ldr	r0, [r0, #4]
   1f70e:	6863      	ldr	r3, [r4, #4]
   1f710:	e7fa      	b.n	1f708 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1f712:	2210      	movs	r2, #16
   1f714:	1c61      	adds	r1, r4, #1
   1f716:	3001      	adds	r0, #1
}
   1f718:	b00a      	add	sp, #40	; 0x28
   1f71a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1f71e:	f7ff beca 	b.w	1f4b6 <memcmp>
	switch (u1->type) {
   1f722:	f06f 0015 	mvn.w	r0, #21
   1f726:	e7e6      	b.n	1f6f6 <bt_uuid_cmp+0x2a>

0001f728 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1f728:	2a04      	cmp	r2, #4
{
   1f72a:	b510      	push	{r4, lr}
	switch (data_len) {
   1f72c:	d00a      	beq.n	1f744 <bt_uuid_create+0x1c>
   1f72e:	2a10      	cmp	r2, #16
   1f730:	d00d      	beq.n	1f74e <bt_uuid_create+0x26>
   1f732:	2a02      	cmp	r2, #2
   1f734:	f04f 0300 	mov.w	r3, #0
   1f738:	d10f      	bne.n	1f75a <bt_uuid_create+0x32>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1f73a:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1f73c:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1f73e:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1f740:	2001      	movs	r0, #1
}
   1f742:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1f744:	2301      	movs	r3, #1
   1f746:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1f748:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1f74a:	6042      	str	r2, [r0, #4]
		break;
   1f74c:	e7f8      	b.n	1f740 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1f74e:	2302      	movs	r3, #2
   1f750:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1f754:	f7ff fec0 	bl	1f4d8 <memcpy>
		break;
   1f758:	e7f2      	b.n	1f740 <bt_uuid_create+0x18>
	switch (data_len) {
   1f75a:	4618      	mov	r0, r3
   1f75c:	e7f1      	b.n	1f742 <bt_uuid_create+0x1a>

0001f75e <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1f75e:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1f760:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1f762:	2106      	movs	r1, #6
{
   1f764:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1f766:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1f76a:	f7f1 fcd7 	bl	1111c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1f76e:	b918      	cbnz	r0, 1f778 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1f770:	79a3      	ldrb	r3, [r4, #6]
   1f772:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1f776:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1f778:	bd10      	pop	{r4, pc}

0001f77a <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1f77a:	280f      	cmp	r0, #15
   1f77c:	d806      	bhi.n	1f78c <bt_hci_evt_get_flags+0x12>
   1f77e:	280d      	cmp	r0, #13
   1f780:	d80b      	bhi.n	1f79a <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1f782:	2805      	cmp	r0, #5
   1f784:	bf14      	ite	ne
   1f786:	2002      	movne	r0, #2
   1f788:	2003      	moveq	r0, #3
   1f78a:	4770      	bx	lr
	switch (evt) {
   1f78c:	2813      	cmp	r0, #19
   1f78e:	d004      	beq.n	1f79a <bt_hci_evt_get_flags+0x20>
   1f790:	281a      	cmp	r0, #26
   1f792:	bf14      	ite	ne
   1f794:	2002      	movne	r0, #2
   1f796:	2001      	moveq	r0, #1
   1f798:	4770      	bx	lr
   1f79a:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1f79c:	4770      	bx	lr

0001f79e <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   1f79e:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   1f7a2:	b193      	cbz	r3, 1f7ca <update_sec_level+0x2c>
   1f7a4:	7b5a      	ldrb	r2, [r3, #13]
   1f7a6:	07d1      	lsls	r1, r2, #31
   1f7a8:	d50f      	bpl.n	1f7ca <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   1f7aa:	06d2      	lsls	r2, r2, #27
   1f7ac:	d50b      	bpl.n	1f7c6 <update_sec_level+0x28>
   1f7ae:	7b1b      	ldrb	r3, [r3, #12]
   1f7b0:	2b10      	cmp	r3, #16
   1f7b2:	d108      	bne.n	1f7c6 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   1f7b4:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   1f7b6:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   1f7b8:	7a82      	ldrb	r2, [r0, #10]
   1f7ba:	7a40      	ldrb	r0, [r0, #9]
}
   1f7bc:	4282      	cmp	r2, r0
   1f7be:	bf8c      	ite	hi
   1f7c0:	2000      	movhi	r0, #0
   1f7c2:	2001      	movls	r0, #1
   1f7c4:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   1f7c6:	2303      	movs	r3, #3
   1f7c8:	e7f5      	b.n	1f7b6 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   1f7ca:	2302      	movs	r3, #2
   1f7cc:	e7f3      	b.n	1f7b6 <update_sec_level+0x18>

0001f7ce <atomic_or>:
{
   1f7ce:	4603      	mov	r3, r0
}
   1f7d0:	f3bf 8f5b 	dmb	ish
   1f7d4:	e853 0f00 	ldrex	r0, [r3]
   1f7d8:	ea40 0201 	orr.w	r2, r0, r1
   1f7dc:	e843 2c00 	strex	ip, r2, [r3]
   1f7e0:	f1bc 0f00 	cmp.w	ip, #0
   1f7e4:	d1f6      	bne.n	1f7d4 <atomic_or+0x6>
   1f7e6:	f3bf 8f5b 	dmb	ish
   1f7ea:	4770      	bx	lr

0001f7ec <sys_put_le64>:
	dst[1] = val >> 8;
   1f7ec:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   1f7f0:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   1f7f2:	0e00      	lsrs	r0, r0, #24
   1f7f4:	7053      	strb	r3, [r2, #1]
   1f7f6:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   1f7f8:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   1f7fa:	f3c1 2007 	ubfx	r0, r1, #8, #8
   1f7fe:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   1f800:	7093      	strb	r3, [r2, #2]
   1f802:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   1f804:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   1f806:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   1f808:	71d1      	strb	r1, [r2, #7]
}
   1f80a:	4770      	bx	lr

0001f80c <bt_hci_disconnect>:
{
   1f80c:	b570      	push	{r4, r5, r6, lr}
   1f80e:	4606      	mov	r6, r0
   1f810:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1f812:	f240 4006 	movw	r0, #1030	; 0x406
   1f816:	2103      	movs	r1, #3
   1f818:	f7e8 fdae 	bl	8378 <bt_hci_cmd_create>
	if (!buf) {
   1f81c:	4604      	mov	r4, r0
   1f81e:	b168      	cbz	r0, 1f83c <bt_hci_disconnect+0x30>
   1f820:	2103      	movs	r1, #3
   1f822:	3008      	adds	r0, #8
   1f824:	f001 ff32 	bl	2168c <net_buf_simple_add>
	disconn->reason = reason;
   1f828:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1f82a:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1f82c:	4621      	mov	r1, r4
   1f82e:	2200      	movs	r2, #0
}
   1f830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1f834:	f240 4006 	movw	r0, #1030	; 0x406
   1f838:	f7e8 bf00 	b.w	863c <bt_hci_cmd_send_sync>
}
   1f83c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1f840:	bd70      	pop	{r4, r5, r6, pc}

0001f842 <bt_le_set_data_len>:
{
   1f842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f844:	4607      	mov	r7, r0
   1f846:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1f848:	f242 0022 	movw	r0, #8226	; 0x2022
   1f84c:	2106      	movs	r1, #6
{
   1f84e:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1f850:	f7e8 fd92 	bl	8378 <bt_hci_cmd_create>
	if (!buf) {
   1f854:	4604      	mov	r4, r0
   1f856:	b170      	cbz	r0, 1f876 <bt_le_set_data_len+0x34>
   1f858:	2106      	movs	r1, #6
   1f85a:	3008      	adds	r0, #8
   1f85c:	f001 ff16 	bl	2168c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1f860:	883b      	ldrh	r3, [r7, #0]
   1f862:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1f864:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1f866:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1f868:	4621      	mov	r1, r4
   1f86a:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1f86e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1f872:	f7e8 bdbb 	b.w	83ec <bt_hci_cmd_send>
}
   1f876:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1f87a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f87c <bt_le_set_phy>:
{
   1f87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f880:	4681      	mov	r9, r0
   1f882:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1f884:	f242 0032 	movw	r0, #8242	; 0x2032
   1f888:	2107      	movs	r1, #7
{
   1f88a:	f89d a020 	ldrb.w	sl, [sp, #32]
   1f88e:	4617      	mov	r7, r2
   1f890:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1f892:	f7e8 fd71 	bl	8378 <bt_hci_cmd_create>
	if (!buf) {
   1f896:	4605      	mov	r5, r0
   1f898:	b198      	cbz	r0, 1f8c2 <bt_le_set_phy+0x46>
   1f89a:	2107      	movs	r1, #7
   1f89c:	3008      	adds	r0, #8
   1f89e:	f001 fef5 	bl	2168c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1f8a2:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   1f8a6:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1f8aa:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1f8ac:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   1f8ae:	f8a0 a005 	strh.w	sl, [r0, #5]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1f8b2:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1f8b4:	4629      	mov	r1, r5
   1f8b6:	f242 0032 	movw	r0, #8242	; 0x2032
}
   1f8ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1f8be:	f7e8 bd95 	b.w	83ec <bt_hci_cmd_send>
}
   1f8c2:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1f8c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001f8ca <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1f8ca:	6880      	ldr	r0, [r0, #8]
   1f8cc:	f7e9 b848 	b.w	8960 <enh_conn_complete>

0001f8d0 <le_legacy_conn_complete>:
{
   1f8d0:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1f8d2:	6881      	ldr	r1, [r0, #8]
{
   1f8d4:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1f8d6:	780b      	ldrb	r3, [r1, #0]
   1f8d8:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1f8dc:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1f8e0:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1f8e4:	78cb      	ldrb	r3, [r1, #3]
   1f8e6:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1f8ea:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1f8ee:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1f8f2:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1f8f6:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1f8fa:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1f8fe:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1f902:	7c4b      	ldrb	r3, [r1, #17]
   1f904:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	memcpy(dst, src, sizeof(*dst));
   1f908:	2207      	movs	r2, #7
   1f90a:	3104      	adds	r1, #4
   1f90c:	a803      	add	r0, sp, #12
   1f90e:	f7ff fde3 	bl	1f4d8 <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1f912:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   1f914:	4669      	mov	r1, sp
   1f916:	2206      	movs	r2, #6
   1f918:	f10d 0013 	add.w	r0, sp, #19
   1f91c:	9400      	str	r4, [sp, #0]
   1f91e:	f8ad 4004 	strh.w	r4, [sp, #4]
   1f922:	f7ff fdd9 	bl	1f4d8 <memcpy>
   1f926:	2206      	movs	r2, #6
   1f928:	4669      	mov	r1, sp
   1f92a:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1f92e:	9400      	str	r4, [sp, #0]
   1f930:	f8ad 4004 	strh.w	r4, [sp, #4]
   1f934:	f7ff fdd0 	bl	1f4d8 <memcpy>
	enh_conn_complete(&enh);
   1f938:	a802      	add	r0, sp, #8
   1f93a:	f7e9 f811 	bl	8960 <enh_conn_complete>
}
   1f93e:	b00a      	add	sp, #40	; 0x28
   1f940:	bd10      	pop	{r4, pc}

0001f942 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1f942:	8803      	ldrh	r3, [r0, #0]
   1f944:	8842      	ldrh	r2, [r0, #2]
   1f946:	4293      	cmp	r3, r2
{
   1f948:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1f94a:	d819      	bhi.n	1f980 <bt_le_conn_params_valid+0x3e>
   1f94c:	2b05      	cmp	r3, #5
   1f94e:	d917      	bls.n	1f980 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1f950:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1f954:	d814      	bhi.n	1f980 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1f956:	8883      	ldrh	r3, [r0, #4]
   1f958:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1f95c:	d210      	bcs.n	1f980 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1f95e:	88c0      	ldrh	r0, [r0, #6]
   1f960:	f1a0 010a 	sub.w	r1, r0, #10
   1f964:	b289      	uxth	r1, r1
   1f966:	f640 4476 	movw	r4, #3190	; 0xc76
   1f96a:	42a1      	cmp	r1, r4
   1f96c:	d808      	bhi.n	1f980 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1f96e:	3301      	adds	r3, #1
   1f970:	b29b      	uxth	r3, r3
   1f972:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1f974:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1f978:	bf34      	ite	cc
   1f97a:	2001      	movcc	r0, #1
   1f97c:	2000      	movcs	r0, #0
}
   1f97e:	bd10      	pop	{r4, pc}
		return false;
   1f980:	2000      	movs	r0, #0
   1f982:	e7fc      	b.n	1f97e <bt_le_conn_params_valid+0x3c>

0001f984 <bt_send>:
		return bt_hci_ecc_send(buf);
   1f984:	f7e8 b804 	b.w	7990 <bt_hci_ecc_send>

0001f988 <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   1f988:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1f98a:	f7ee fccd 	bl	e328 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   1f98e:	b118      	cbz	r0, 1f998 <bt_addr_le_is_bonded+0x10>
   1f990:	89c0      	ldrh	r0, [r0, #14]
   1f992:	3800      	subs	r0, #0
   1f994:	bf18      	it	ne
   1f996:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   1f998:	bd08      	pop	{r3, pc}

0001f99a <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   1f99a:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1f99c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1f9a0:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1f9a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f9a6:	2100      	movs	r1, #0
{
   1f9a8:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1f9aa:	f7e8 f8f1 	bl	7b90 <bt_buf_get_evt>
   1f9ae:	2102      	movs	r1, #2
   1f9b0:	4604      	mov	r4, r0
   1f9b2:	3008      	adds	r0, #8
   1f9b4:	f001 fe6a 	bl	2168c <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   1f9b8:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   1f9ba:	7045      	strb	r5, [r0, #1]

	return buf;
}
   1f9bc:	4620      	mov	r0, r4
   1f9be:	bd70      	pop	{r4, r5, r6, pc}

0001f9c0 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1f9c0:	3103      	adds	r1, #3
{
   1f9c2:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1f9c4:	b2c9      	uxtb	r1, r1
{
   1f9c6:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1f9c8:	200e      	movs	r0, #14
   1f9ca:	f7ff ffe6 	bl	1f99a <bt_hci_evt_create>
   1f9ce:	2103      	movs	r1, #3
   1f9d0:	4604      	mov	r4, r0
   1f9d2:	3008      	adds	r0, #8
   1f9d4:	f001 fe5a 	bl	2168c <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   1f9d8:	2301      	movs	r3, #1
   1f9da:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   1f9dc:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   1f9e0:	4620      	mov	r0, r4
   1f9e2:	bd38      	pop	{r3, r4, r5, pc}

0001f9e4 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   1f9e4:	b570      	push	{r4, r5, r6, lr}
   1f9e6:	4605      	mov	r5, r0
   1f9e8:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   1f9ea:	200f      	movs	r0, #15
   1f9ec:	2104      	movs	r1, #4
   1f9ee:	f7ff ffd4 	bl	1f99a <bt_hci_evt_create>
   1f9f2:	2104      	movs	r1, #4
   1f9f4:	4604      	mov	r4, r0
   1f9f6:	3008      	adds	r0, #8
   1f9f8:	f001 fe48 	bl	2168c <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   1f9fc:	2201      	movs	r2, #1
	cs->status = status;
   1f9fe:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   1fa00:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   1fa02:	8045      	strh	r5, [r0, #2]

	return buf;
}
   1fa04:	4620      	mov	r0, r4
   1fa06:	bd70      	pop	{r4, r5, r6, pc}

0001fa08 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1fa08:	2207      	movs	r2, #7
   1fa0a:	f7ff bd65 	b.w	1f4d8 <memcpy>

0001fa0e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fa0e:	f3bf 8f5b 	dmb	ish
   1fa12:	6800      	ldr	r0, [r0, #0]
   1fa14:	f3bf 8f5b 	dmb	ish
}
   1fa18:	4770      	bx	lr

0001fa1a <adv_unpause_enabled>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fa1a:	f100 0310 	add.w	r3, r0, #16
   1fa1e:	f3bf 8f5b 	dmb	ish
   1fa22:	e853 2f00 	ldrex	r2, [r3]
   1fa26:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   1fa2a:	e843 1c00 	strex	ip, r1, [r3]
   1fa2e:	f1bc 0f00 	cmp.w	ip, #0
   1fa32:	d1f6      	bne.n	1fa22 <adv_unpause_enabled+0x8>
   1fa34:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   1fa38:	0493      	lsls	r3, r2, #18
   1fa3a:	d502      	bpl.n	1fa42 <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   1fa3c:	2101      	movs	r1, #1
   1fa3e:	f000 b985 	b.w	1fd4c <bt_le_adv_set_enable>
}
   1fa42:	4770      	bx	lr

0001fa44 <hci_id_add.constprop.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   1fa44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fa46:	4607      	mov	r7, r0
   1fa48:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   1fa4a:	f242 0027 	movw	r0, #8231	; 0x2027
   1fa4e:	2127      	movs	r1, #39	; 0x27
   1fa50:	f7e8 fc92 	bl	8378 <bt_hci_cmd_create>
	if (!buf) {
   1fa54:	4604      	mov	r4, r0
   1fa56:	b1d0      	cbz	r0, 1fa8e <hci_id_add.constprop.0+0x4a>
   1fa58:	2127      	movs	r1, #39	; 0x27
   1fa5a:	3008      	adds	r0, #8
   1fa5c:	f001 fe16 	bl	2168c <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1fa60:	4639      	mov	r1, r7
   1fa62:	4605      	mov	r5, r0
   1fa64:	f7ff ffd0 	bl	1fa08 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   1fa68:	4631      	mov	r1, r6
   1fa6a:	2210      	movs	r2, #16
   1fa6c:	1de8      	adds	r0, r5, #7
   1fa6e:	f7ff fd33 	bl	1f4d8 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   1fa72:	2210      	movs	r2, #16
   1fa74:	2100      	movs	r1, #0
   1fa76:	f105 0017 	add.w	r0, r5, #23
   1fa7a:	f7ff fd58 	bl	1f52e <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1fa7e:	4621      	mov	r1, r4
   1fa80:	2200      	movs	r2, #0
}
   1fa82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1fa86:	f242 0027 	movw	r0, #8231	; 0x2027
   1fa8a:	f7e8 bdd7 	b.w	863c <bt_hci_cmd_send_sync>
}
   1fa8e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1fa92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001fa94 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   1fa94:	7a03      	ldrb	r3, [r0, #8]
   1fa96:	075b      	lsls	r3, r3, #29
   1fa98:	d504      	bpl.n	1faa4 <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1fa9a:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   1fa9e:	3001      	adds	r0, #1
   1faa0:	f7ff bfd0 	b.w	1fa44 <hci_id_add.constprop.0>
}
   1faa4:	4770      	bx	lr

0001faa6 <addr_res_enable>:
{
   1faa6:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1faa8:	2101      	movs	r1, #1
{
   1faaa:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1faac:	f242 002d 	movw	r0, #8237	; 0x202d
   1fab0:	f7e8 fc62 	bl	8378 <bt_hci_cmd_create>
	if (!buf) {
   1fab4:	4604      	mov	r4, r0
   1fab6:	b158      	cbz	r0, 1fad0 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   1fab8:	4629      	mov	r1, r5
   1faba:	3008      	adds	r0, #8
   1fabc:	f001 fdf5 	bl	216aa <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1fac0:	4621      	mov	r1, r4
   1fac2:	2200      	movs	r2, #0
}
   1fac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1fac8:	f242 002d 	movw	r0, #8237	; 0x202d
   1facc:	f7e8 bdb6 	b.w	863c <bt_hci_cmd_send_sync>
}
   1fad0:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1fad4:	bd38      	pop	{r3, r4, r5, pc}

0001fad6 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1fad6:	f100 0210 	add.w	r2, r0, #16
{
   1fada:	b508      	push	{r3, lr}
   1fadc:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1fade:	4610      	mov	r0, r2
   1fae0:	f7ff ff95 	bl	1fa0e <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1fae4:	0641      	lsls	r1, r0, #25
   1fae6:	d511      	bpl.n	1fb0c <adv_pause_enabled+0x36>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1fae8:	f3bf 8f5b 	dmb	ish
   1faec:	e852 1f00 	ldrex	r1, [r2]
   1faf0:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   1faf4:	e842 1000 	strex	r0, r1, [r2]
   1faf8:	2800      	cmp	r0, #0
   1fafa:	d1f7      	bne.n	1faec <adv_pause_enabled+0x16>
   1fafc:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   1fb00:	4618      	mov	r0, r3
   1fb02:	2100      	movs	r1, #0
}
   1fb04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   1fb08:	f000 b920 	b.w	1fd4c <bt_le_adv_set_enable>
}
   1fb0c:	bd08      	pop	{r3, pc}

0001fb0e <bt_lookup_id_addr>:
{
   1fb0e:	b510      	push	{r4, lr}
   1fb10:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   1fb12:	f7ee fbd1 	bl	e2b8 <bt_keys_find_irk>
		if (keys) {
   1fb16:	b100      	cbz	r0, 1fb1a <bt_lookup_id_addr+0xc>
			return &keys->addr;
   1fb18:	1c44      	adds	r4, r0, #1
}
   1fb1a:	4620      	mov	r0, r4
   1fb1c:	bd10      	pop	{r4, pc}

0001fb1e <bt_id_set_adv_private_addr>:
{
   1fb1e:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1fb20:	2106      	movs	r1, #6
   1fb22:	4668      	mov	r0, sp
   1fb24:	f7f1 fafa 	bl	1111c <bt_rand>
	if (err) {
   1fb28:	b940      	cbnz	r0, 1fb3c <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1fb2a:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   1fb2e:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1fb30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1fb34:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   1fb38:	f7e9 faec 	bl	9114 <set_random_address>
}
   1fb3c:	b003      	add	sp, #12
   1fb3e:	f85d fb04 	ldr.w	pc, [sp], #4

0001fb42 <bt_id_adv_random_addr_check>:
}
   1fb42:	2001      	movs	r0, #1
   1fb44:	4770      	bx	lr

0001fb46 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   1fb46:	7a03      	ldrb	r3, [r0, #8]
   1fb48:	07d9      	lsls	r1, r3, #31
   1fb4a:	d504      	bpl.n	1fb56 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   1fb4c:	f023 0301 	bic.w	r3, r3, #1
   1fb50:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   1fb52:	f7e9 bb53 	b.w	91fc <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   1fb56:	0799      	lsls	r1, r3, #30
   1fb58:	d504      	bpl.n	1fb64 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   1fb5a:	f023 0302 	bic.w	r3, r3, #2
   1fb5e:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   1fb60:	f7e9 bc22 	b.w	93a8 <bt_id_del>
}
   1fb64:	4770      	bx	lr

0001fb66 <get_adv_channel_map>:
{
   1fb66:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1fb68:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1fb6c:	bf0c      	ite	eq
   1fb6e:	2007      	moveq	r0, #7
   1fb70:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1fb72:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1fb74:	bf48      	it	mi
   1fb76:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1fb7a:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1fb7c:	bf48      	it	mi
   1fb7e:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1fb82:	4770      	bx	lr

0001fb84 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fb84:	f3bf 8f5b 	dmb	ish
   1fb88:	6800      	ldr	r0, [r0, #0]
   1fb8a:	f3bf 8f5b 	dmb	ish
}
   1fb8e:	4770      	bx	lr

0001fb90 <atomic_and>:
{
   1fb90:	4603      	mov	r3, r0
}
   1fb92:	f3bf 8f5b 	dmb	ish
   1fb96:	e853 0f00 	ldrex	r0, [r3]
   1fb9a:	ea00 0201 	and.w	r2, r0, r1
   1fb9e:	e843 2c00 	strex	ip, r2, [r3]
   1fba2:	f1bc 0f00 	cmp.w	ip, #0
   1fba6:	d1f6      	bne.n	1fb96 <atomic_and+0x6>
   1fba8:	f3bf 8f5b 	dmb	ish
   1fbac:	4770      	bx	lr

0001fbae <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1fbae:	2301      	movs	r3, #1
{
   1fbb0:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1fbb2:	fa03 f101 	lsl.w	r1, r3, r1
{
   1fbb6:	4604      	mov	r4, r0
	if (val) {
   1fbb8:	b16a      	cbz	r2, 1fbd6 <atomic_set_bit_to+0x28>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1fbba:	f3bf 8f5b 	dmb	ish
   1fbbe:	e854 3f00 	ldrex	r3, [r4]
   1fbc2:	430b      	orrs	r3, r1
   1fbc4:	e844 3200 	strex	r2, r3, [r4]
   1fbc8:	2a00      	cmp	r2, #0
   1fbca:	d1f8      	bne.n	1fbbe <atomic_set_bit_to+0x10>
   1fbcc:	f3bf 8f5b 	dmb	ish
	}
}
   1fbd0:	f85d 4b04 	ldr.w	r4, [sp], #4
   1fbd4:	4770      	bx	lr
   1fbd6:	f85d 4b04 	ldr.w	r4, [sp], #4
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1fbda:	43c9      	mvns	r1, r1
   1fbdc:	f7ff bfd8 	b.w	1fb90 <atomic_and>

0001fbe0 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   1fbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fbe4:	b087      	sub	sp, #28
   1fbe6:	4605      	mov	r5, r0
   1fbe8:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
   1fbec:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   1fbf0:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   1fbf4:	460c      	mov	r4, r1
   1fbf6:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
   1fbf8:	2100      	movs	r1, #0
   1fbfa:	2210      	movs	r2, #16
   1fbfc:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   1fbfe:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
   1fc00:	f7ff fc95 	bl	1f52e <memset>
	if (use_name) {
   1fc04:	f1b8 0f00 	cmp.w	r8, #0
   1fc08:	d010      	beq.n	1fc2c <le_adv_update.constprop.0+0x4c>
		const char *name = bt_get_name();
   1fc0a:	f7e9 fa65 	bl	90d8 <bt_get_name>
   1fc0e:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   1fc10:	2c00      	cmp	r4, #0
   1fc12:	d13c      	bne.n	1fc8e <le_adv_update.constprop.0+0xae>
   1fc14:	2e00      	cmp	r6, #0
   1fc16:	d145      	bne.n	1fca4 <le_adv_update.constprop.0+0xc4>
		data = (struct bt_data)BT_DATA(
   1fc18:	4658      	mov	r0, fp
   1fc1a:	f7ff fc30 	bl	1f47e <strlen>
   1fc1e:	2309      	movs	r3, #9
   1fc20:	f88d 3000 	strb.w	r3, [sp]
   1fc24:	f88d 0001 	strb.w	r0, [sp, #1]
   1fc28:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
   1fc2c:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
   1fc30:	f1b8 0f00 	cmp.w	r8, #0
   1fc34:	d038      	beq.n	1fca8 <le_adv_update.constprop.0+0xc8>
   1fc36:	f1ba 0f00 	cmp.w	sl, #0
   1fc3a:	d135      	bne.n	1fca8 <le_adv_update.constprop.0+0xc8>
			d[1].len = 1;
   1fc3c:	2301      	movs	r3, #1
			d[1].data = &data;
   1fc3e:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1fc42:	9305      	str	r3, [sp, #20]
			d_len = 2;
   1fc44:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1fc46:	a902      	add	r1, sp, #8
   1fc48:	f242 0008 	movw	r0, #8200	; 0x2008
   1fc4c:	f7e9 fe56 	bl	98fc <hci_set_ad>
		if (err) {
   1fc50:	4604      	mov	r4, r0
   1fc52:	b978      	cbnz	r0, 1fc74 <le_adv_update.constprop.0+0x94>
	if (scannable) {
   1fc54:	f1ba 0f00 	cmp.w	sl, #0
   1fc58:	d128      	bne.n	1fcac <le_adv_update.constprop.0+0xcc>
   1fc5a:	3510      	adds	r5, #16
   1fc5c:	f3bf 8f5b 	dmb	ish
   1fc60:	e855 3f00 	ldrex	r3, [r5]
   1fc64:	f043 0304 	orr.w	r3, r3, #4
   1fc68:	e845 3200 	strex	r2, r3, [r5]
   1fc6c:	2a00      	cmp	r2, #0
   1fc6e:	d1f7      	bne.n	1fc60 <le_adv_update.constprop.0+0x80>
   1fc70:	f3bf 8f5b 	dmb	ish
}
   1fc74:	4620      	mov	r0, r4
   1fc76:	b007      	add	sp, #28
   1fc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1fc7c:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   1fc80:	3a08      	subs	r2, #8
   1fc82:	2a01      	cmp	r2, #1
   1fc84:	d925      	bls.n	1fcd2 <le_adv_update.constprop.0+0xf2>
	for (i = 0; i < ad_len; i++) {
   1fc86:	3301      	adds	r3, #1
   1fc88:	429f      	cmp	r7, r3
   1fc8a:	d1f7      	bne.n	1fc7c <le_adv_update.constprop.0+0x9c>
   1fc8c:	e7c2      	b.n	1fc14 <le_adv_update.constprop.0+0x34>
   1fc8e:	2300      	movs	r3, #0
   1fc90:	e7fa      	b.n	1fc88 <le_adv_update.constprop.0+0xa8>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1fc92:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   1fc96:	3a08      	subs	r2, #8
   1fc98:	2a01      	cmp	r2, #1
   1fc9a:	d91a      	bls.n	1fcd2 <le_adv_update.constprop.0+0xf2>
	for (i = 0; i < ad_len; i++) {
   1fc9c:	3301      	adds	r3, #1
   1fc9e:	4599      	cmp	r9, r3
   1fca0:	d1f7      	bne.n	1fc92 <le_adv_update.constprop.0+0xb2>
   1fca2:	e7b9      	b.n	1fc18 <le_adv_update.constprop.0+0x38>
   1fca4:	2300      	movs	r3, #0
   1fca6:	e7fa      	b.n	1fc9e <le_adv_update.constprop.0+0xbe>
		d_len = 1;
   1fca8:	2201      	movs	r2, #1
   1fcaa:	e7cc      	b.n	1fc46 <le_adv_update.constprop.0+0x66>
		d[0].len = sd_len;
   1fcac:	e9cd 6902 	strd	r6, r9, [sp, #8]
		if (use_name) {
   1fcb0:	2201      	movs	r2, #1
   1fcb2:	f1b8 0f00 	cmp.w	r8, #0
   1fcb6:	d003      	beq.n	1fcc0 <le_adv_update.constprop.0+0xe0>
			d[1].len = 1;
   1fcb8:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
   1fcba:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
   1fcbe:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1fcc0:	a902      	add	r1, sp, #8
   1fcc2:	f242 0009 	movw	r0, #8201	; 0x2009
   1fcc6:	f7e9 fe19 	bl	98fc <hci_set_ad>
		if (err) {
   1fcca:	2800      	cmp	r0, #0
   1fccc:	d0c5      	beq.n	1fc5a <le_adv_update.constprop.0+0x7a>
   1fcce:	4604      	mov	r4, r0
   1fcd0:	e7d0      	b.n	1fc74 <le_adv_update.constprop.0+0x94>
			return -EINVAL;
   1fcd2:	f06f 0415 	mvn.w	r4, #21
   1fcd6:	e7cd      	b.n	1fc74 <le_adv_update.constprop.0+0x94>

0001fcd8 <adv_id_check_connectable_func>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1fcd8:	f100 0210 	add.w	r2, r0, #16
{
   1fcdc:	b508      	push	{r3, lr}
   1fcde:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1fce0:	4610      	mov	r0, r2
   1fce2:	f7ff ff4f 	bl	1fb84 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1fce6:	0640      	lsls	r0, r0, #25
   1fce8:	d50a      	bpl.n	1fd00 <adv_id_check_connectable_func+0x28>
   1fcea:	4610      	mov	r0, r2
   1fcec:	f7ff ff4a 	bl	1fb84 <atomic_get>
   1fcf0:	05c2      	lsls	r2, r0, #23
   1fcf2:	d505      	bpl.n	1fd00 <adv_id_check_connectable_func+0x28>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   1fcf4:	781a      	ldrb	r2, [r3, #0]
   1fcf6:	780b      	ldrb	r3, [r1, #0]
   1fcf8:	429a      	cmp	r2, r3
		check_data->adv_enabled = true;
   1fcfa:	bf1c      	itt	ne
   1fcfc:	2301      	movne	r3, #1
   1fcfe:	704b      	strbne	r3, [r1, #1]
}
   1fd00:	bd08      	pop	{r3, pc}

0001fd02 <bt_le_adv_set_enable_legacy>:
{
   1fd02:	b570      	push	{r4, r5, r6, lr}
   1fd04:	4606      	mov	r6, r0
   1fd06:	b086      	sub	sp, #24
   1fd08:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1fd0a:	f242 000a 	movw	r0, #8202	; 0x200a
   1fd0e:	2101      	movs	r1, #1
   1fd10:	f7e8 fb32 	bl	8378 <bt_hci_cmd_create>
	if (!buf) {
   1fd14:	4604      	mov	r4, r0
   1fd16:	b1b0      	cbz	r0, 1fd46 <bt_le_adv_set_enable_legacy+0x44>
   1fd18:	3008      	adds	r0, #8
	if (enable) {
   1fd1a:	b195      	cbz	r5, 1fd42 <bt_le_adv_set_enable_legacy+0x40>
   1fd1c:	2101      	movs	r1, #1
   1fd1e:	f001 fcc4 	bl	216aa <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1fd22:	f106 0210 	add.w	r2, r6, #16
   1fd26:	a903      	add	r1, sp, #12
   1fd28:	4620      	mov	r0, r4
   1fd2a:	9500      	str	r5, [sp, #0]
   1fd2c:	2306      	movs	r3, #6
   1fd2e:	f7e8 fb11 	bl	8354 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1fd32:	2200      	movs	r2, #0
   1fd34:	4621      	mov	r1, r4
   1fd36:	f242 000a 	movw	r0, #8202	; 0x200a
   1fd3a:	f7e8 fc7f 	bl	863c <bt_hci_cmd_send_sync>
}
   1fd3e:	b006      	add	sp, #24
   1fd40:	bd70      	pop	{r4, r5, r6, pc}
   1fd42:	4629      	mov	r1, r5
   1fd44:	e7eb      	b.n	1fd1e <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   1fd46:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1fd4a:	e7f8      	b.n	1fd3e <bt_le_adv_set_enable_legacy+0x3c>

0001fd4c <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   1fd4c:	f7ff bfd9 	b.w	1fd02 <bt_le_adv_set_enable_legacy>

0001fd50 <atomic_and>:
{
   1fd50:	4603      	mov	r3, r0
}
   1fd52:	f3bf 8f5b 	dmb	ish
   1fd56:	e853 0f00 	ldrex	r0, [r3]
   1fd5a:	ea00 0201 	and.w	r2, r0, r1
   1fd5e:	e843 2c00 	strex	ip, r2, [r3]
   1fd62:	f1bc 0f00 	cmp.w	ip, #0
   1fd66:	d1f6      	bne.n	1fd56 <atomic_and+0x6>
   1fd68:	f3bf 8f5b 	dmb	ish
   1fd6c:	4770      	bx	lr

0001fd6e <tx_notify>:
{
   1fd6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1fd70:	4604      	mov	r4, r0
	__asm__ volatile(
   1fd72:	f04f 0220 	mov.w	r2, #32
   1fd76:	f3ef 8311 	mrs	r3, BASEPRI
   1fd7a:	f382 8811 	msr	BASEPRI, r2
   1fd7e:	f3bf 8f6f 	isb	sy
	return list->head;
   1fd82:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1fd84:	b928      	cbnz	r0, 1fd92 <tx_notify+0x24>
	__asm__ volatile(
   1fd86:	f383 8811 	msr	BASEPRI, r3
   1fd8a:	f3bf 8f6f 	isb	sy
}
   1fd8e:	b003      	add	sp, #12
   1fd90:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1fd92:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   1fd94:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1fd96:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1fd98:	4288      	cmp	r0, r1
	list->tail = node;
   1fd9a:	bf08      	it	eq
   1fd9c:	6262      	streq	r2, [r4, #36]	; 0x24
   1fd9e:	f383 8811 	msr	BASEPRI, r3
   1fda2:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1fda6:	e9d0 5101 	ldrd	r5, r1, [r0, #4]
   1fdaa:	9101      	str	r1, [sp, #4]
		tx_free(tx);
   1fdac:	f7ea f948 	bl	a040 <tx_free>
		cb(conn, user_data);
   1fdb0:	9901      	ldr	r1, [sp, #4]
   1fdb2:	4620      	mov	r0, r4
   1fdb4:	47a8      	blx	r5
	while (1) {
   1fdb6:	e7dc      	b.n	1fd72 <tx_notify+0x4>

0001fdb8 <tx_complete_work>:
	tx_notify(conn);
   1fdb8:	3828      	subs	r0, #40	; 0x28
   1fdba:	f7ff bfd8 	b.w	1fd6e <tx_notify>

0001fdbe <bt_conn_new>:
{
   1fdbe:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   1fdc0:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1fdc2:	2501      	movs	r5, #1
   1fdc4:	428b      	cmp	r3, r1
   1fdc6:	d102      	bne.n	1fdce <bt_conn_new+0x10>
		return NULL;
   1fdc8:	2400      	movs	r4, #0
}
   1fdca:	4620      	mov	r0, r4
   1fdcc:	bd38      	pop	{r3, r4, r5, pc}
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1fdce:	4604      	mov	r4, r0
   1fdd0:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   1fdd4:	f3bf 8f5b 	dmb	ish
   1fdd8:	e852 0f00 	ldrex	r0, [r2]
   1fddc:	2800      	cmp	r0, #0
   1fdde:	d104      	bne.n	1fdea <bt_conn_new+0x2c>
   1fde0:	e842 5c00 	strex	ip, r5, [r2]
   1fde4:	f1bc 0f00 	cmp.w	ip, #0
   1fde8:	d1f6      	bne.n	1fdd8 <bt_conn_new+0x1a>
   1fdea:	f3bf 8f5b 	dmb	ish
   1fdee:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1fdf2:	d001      	beq.n	1fdf8 <bt_conn_new+0x3a>
	for (i = 0; i < size; i++) {
   1fdf4:	3301      	adds	r3, #1
   1fdf6:	e7e5      	b.n	1fdc4 <bt_conn_new+0x6>
	if (!conn) {
   1fdf8:	2c00      	cmp	r4, #0
   1fdfa:	d0e6      	beq.n	1fdca <bt_conn_new+0xc>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1fdfc:	22b8      	movs	r2, #184	; 0xb8
   1fdfe:	2100      	movs	r1, #0
   1fe00:	4620      	mov	r0, r4
   1fe02:	f7ff fb94 	bl	1f52e <memset>
	return conn;
   1fe06:	e7e0      	b.n	1fdca <bt_conn_new+0xc>

0001fe08 <bt_conn_set_security>:
{
   1fe08:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1fe0a:	7b43      	ldrb	r3, [r0, #13]
   1fe0c:	2b07      	cmp	r3, #7
{
   1fe0e:	4604      	mov	r4, r0
   1fe10:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   1fe12:	d124      	bne.n	1fe5e <bt_conn_set_security+0x56>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   1fe14:	7a43      	ldrb	r3, [r0, #9]
   1fe16:	428b      	cmp	r3, r1
   1fe18:	d224      	bcs.n	1fe64 <bt_conn_set_security+0x5c>
   1fe1a:	7a83      	ldrb	r3, [r0, #10]
   1fe1c:	428b      	cmp	r3, r1
   1fe1e:	d221      	bcs.n	1fe64 <bt_conn_set_security+0x5c>
	if (val) {
   1fe20:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   1fe22:	f100 0004 	add.w	r0, r0, #4
   1fe26:	d515      	bpl.n	1fe54 <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1fe28:	f3bf 8f5b 	dmb	ish
   1fe2c:	e850 3f00 	ldrex	r3, [r0]
   1fe30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1fe34:	e840 3200 	strex	r2, r3, [r0]
   1fe38:	2a00      	cmp	r2, #0
   1fe3a:	d1f7      	bne.n	1fe2c <bt_conn_set_security+0x24>
   1fe3c:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   1fe40:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   1fe44:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   1fe46:	4620      	mov	r0, r4
   1fe48:	f7ed fcf4 	bl	d834 <bt_smp_start_security>
	if (err) {
   1fe4c:	b108      	cbz	r0, 1fe52 <bt_conn_set_security+0x4a>
		conn->required_sec_level = conn->sec_level;
   1fe4e:	7a63      	ldrb	r3, [r4, #9]
   1fe50:	72a3      	strb	r3, [r4, #10]
}
   1fe52:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1fe54:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   1fe58:	f7ff ff7a 	bl	1fd50 <atomic_and>
   1fe5c:	e7f0      	b.n	1fe40 <bt_conn_set_security+0x38>
		return -ENOTCONN;
   1fe5e:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1fe62:	e7f6      	b.n	1fe52 <bt_conn_set_security+0x4a>
		return 0;
   1fe64:	2000      	movs	r0, #0
   1fe66:	e7f4      	b.n	1fe52 <bt_conn_set_security+0x4a>

0001fe68 <bt_conn_get_security>:
}
   1fe68:	7a40      	ldrb	r0, [r0, #9]
   1fe6a:	4770      	bx	lr

0001fe6c <bt_conn_reset_rx_state>:
{
   1fe6c:	b510      	push	{r4, lr}
   1fe6e:	4604      	mov	r4, r0
	if (!conn->rx) {
   1fe70:	6900      	ldr	r0, [r0, #16]
   1fe72:	b118      	cbz	r0, 1fe7c <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1fe74:	f7fa f8d0 	bl	1a018 <net_buf_unref>
	conn->rx = NULL;
   1fe78:	2300      	movs	r3, #0
   1fe7a:	6123      	str	r3, [r4, #16]
}
   1fe7c:	bd10      	pop	{r4, pc}

0001fe7e <bt_conn_is_peer_addr_le>:
{
   1fe7e:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1fe80:	7a03      	ldrb	r3, [r0, #8]
   1fe82:	428b      	cmp	r3, r1
{
   1fe84:	4604      	mov	r4, r0
   1fe86:	4615      	mov	r5, r2
	if (id != conn->id) {
   1fe88:	d115      	bne.n	1feb6 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1fe8a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1fe8e:	2207      	movs	r2, #7
   1fe90:	4628      	mov	r0, r5
   1fe92:	f7ff fb10 	bl	1f4b6 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1fe96:	b180      	cbz	r0, 1feba <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1fe98:	78e3      	ldrb	r3, [r4, #3]
   1fe9a:	2207      	movs	r2, #7
   1fe9c:	b943      	cbnz	r3, 1feb0 <bt_conn_is_peer_addr_le+0x32>
   1fe9e:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1fea2:	4628      	mov	r0, r5
   1fea4:	f7ff fb07 	bl	1f4b6 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1fea8:	fab0 f080 	clz	r0, r0
   1feac:	0940      	lsrs	r0, r0, #5
}
   1feae:	bd38      	pop	{r3, r4, r5, pc}
   1feb0:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1feb4:	e7f5      	b.n	1fea2 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1feb6:	2000      	movs	r0, #0
   1feb8:	e7f9      	b.n	1feae <bt_conn_is_peer_addr_le+0x30>
		return true;
   1feba:	2001      	movs	r0, #1
   1febc:	e7f7      	b.n	1feae <bt_conn_is_peer_addr_le+0x30>

0001febe <bt_conn_ref>:
{
   1febe:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1fec0:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fec4:	f3bf 8f5b 	dmb	ish
   1fec8:	6813      	ldr	r3, [r2, #0]
   1feca:	f3bf 8f5b 	dmb	ish
		if (!old) {
   1fece:	b17b      	cbz	r3, 1fef0 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1fed0:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1fed4:	1c59      	adds	r1, r3, #1
   1fed6:	e852 4f00 	ldrex	r4, [r2]
   1feda:	429c      	cmp	r4, r3
   1fedc:	d104      	bne.n	1fee8 <bt_conn_ref+0x2a>
   1fede:	e842 1c00 	strex	ip, r1, [r2]
   1fee2:	f1bc 0f00 	cmp.w	ip, #0
   1fee6:	d1f6      	bne.n	1fed6 <bt_conn_ref+0x18>
   1fee8:	f3bf 8f5b 	dmb	ish
   1feec:	d1ea      	bne.n	1fec4 <bt_conn_ref+0x6>
}
   1feee:	bd10      	pop	{r4, pc}
			return NULL;
   1fef0:	4618      	mov	r0, r3
   1fef2:	e7fc      	b.n	1feee <bt_conn_ref+0x30>

0001fef4 <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   1fef4:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1fef8:	f3bf 8f5b 	dmb	ish
   1fefc:	e853 2f00 	ldrex	r2, [r3]
   1ff00:	3a01      	subs	r2, #1
   1ff02:	e843 2100 	strex	r1, r2, [r3]
   1ff06:	2900      	cmp	r1, #0
   1ff08:	d1f8      	bne.n	1fefc <bt_conn_unref+0x8>
   1ff0a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ff0e:	f3bf 8f5b 	dmb	ish
   1ff12:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1ff16:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1ff1a:	b90b      	cbnz	r3, 1ff20 <bt_conn_unref+0x2c>
		bt_le_adv_resume();
   1ff1c:	f7e9 bef4 	b.w	9d08 <bt_le_adv_resume>
}
   1ff20:	4770      	bx	lr

0001ff22 <conn_lookup_handle>:
{
   1ff22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ff26:	4607      	mov	r7, r0
   1ff28:	460e      	mov	r6, r1
   1ff2a:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1ff2c:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1ff2e:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1ff32:	42b4      	cmp	r4, r6
   1ff34:	d103      	bne.n	1ff3e <conn_lookup_handle+0x1c>
	return NULL;
   1ff36:	2300      	movs	r3, #0
}
   1ff38:	4618      	mov	r0, r3
   1ff3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1ff3e:	fb09 7004 	mla	r0, r9, r4, r7
   1ff42:	f7ff ffbc 	bl	1febe <bt_conn_ref>
		if (!conn) {
   1ff46:	4603      	mov	r3, r0
   1ff48:	b158      	cbz	r0, 1ff62 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1ff4a:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1ff4c:	2d01      	cmp	r5, #1
   1ff4e:	d002      	beq.n	1ff56 <conn_lookup_handle+0x34>
   1ff50:	3d07      	subs	r5, #7
   1ff52:	2d01      	cmp	r5, #1
   1ff54:	d803      	bhi.n	1ff5e <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1ff56:	881a      	ldrh	r2, [r3, #0]
   1ff58:	4542      	cmp	r2, r8
   1ff5a:	d0ed      	beq.n	1ff38 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1ff5c:	4618      	mov	r0, r3
   1ff5e:	f7ff ffc9 	bl	1fef4 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1ff62:	3401      	adds	r4, #1
   1ff64:	e7e5      	b.n	1ff32 <conn_lookup_handle+0x10>

0001ff66 <bt_conn_disconnect>:
{
   1ff66:	b538      	push	{r3, r4, r5, lr}
   1ff68:	7b43      	ldrb	r3, [r0, #13]
   1ff6a:	3b02      	subs	r3, #2
   1ff6c:	4604      	mov	r4, r0
   1ff6e:	2b06      	cmp	r3, #6
   1ff70:	d805      	bhi.n	1ff7e <bt_conn_disconnect+0x18>
   1ff72:	e8df f003 	tbb	[pc, r3]
   1ff76:	0408      	.short	0x0408
   1ff78:	0e0c0404 	.word	0x0e0c0404
   1ff7c:	0c          	.byte	0x0c
   1ff7d:	00          	.byte	0x00
	switch (conn->state) {
   1ff7e:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   1ff82:	4628      	mov	r0, r5
   1ff84:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   1ff86:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1ff88:	2100      	movs	r1, #0
   1ff8a:	f7ea fb1b 	bl	a5c4 <bt_conn_set_state>
		return 0;
   1ff8e:	2500      	movs	r5, #0
   1ff90:	e7f7      	b.n	1ff82 <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   1ff92:	8800      	ldrh	r0, [r0, #0]
   1ff94:	f7ff fc3a 	bl	1f80c <bt_hci_disconnect>
	if (err) {
   1ff98:	4605      	mov	r5, r0
   1ff9a:	2800      	cmp	r0, #0
   1ff9c:	d1f1      	bne.n	1ff82 <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   1ff9e:	7b63      	ldrb	r3, [r4, #13]
   1ffa0:	2b07      	cmp	r3, #7
   1ffa2:	d1ee      	bne.n	1ff82 <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   1ffa4:	2108      	movs	r1, #8
   1ffa6:	4620      	mov	r0, r4
   1ffa8:	f7ea fb0c 	bl	a5c4 <bt_conn_set_state>
   1ffac:	e7e9      	b.n	1ff82 <bt_conn_disconnect+0x1c>

0001ffae <bt_conn_le_conn_update>:
{
   1ffae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ffb0:	4607      	mov	r7, r0
   1ffb2:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1ffb4:	f242 0013 	movw	r0, #8211	; 0x2013
   1ffb8:	210e      	movs	r1, #14
   1ffba:	f7e8 f9dd 	bl	8378 <bt_hci_cmd_create>
	if (!buf) {
   1ffbe:	4606      	mov	r6, r0
   1ffc0:	b1d0      	cbz	r0, 1fff8 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1ffc2:	210e      	movs	r1, #14
   1ffc4:	3008      	adds	r0, #8
   1ffc6:	f001 fb61 	bl	2168c <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1ffca:	220e      	movs	r2, #14
   1ffcc:	4604      	mov	r4, r0
   1ffce:	2100      	movs	r1, #0
   1ffd0:	f7ff faad 	bl	1f52e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1ffd4:	883b      	ldrh	r3, [r7, #0]
   1ffd6:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1ffd8:	882b      	ldrh	r3, [r5, #0]
   1ffda:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1ffdc:	886b      	ldrh	r3, [r5, #2]
   1ffde:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1ffe0:	88ab      	ldrh	r3, [r5, #4]
   1ffe2:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1ffe4:	88eb      	ldrh	r3, [r5, #6]
   1ffe6:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1ffe8:	4631      	mov	r1, r6
   1ffea:	2200      	movs	r2, #0
}
   1ffec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1fff0:	f242 0013 	movw	r0, #8211	; 0x2013
   1fff4:	f7e8 bb22 	b.w	863c <bt_hci_cmd_send_sync>
}
   1fff8:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1fffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001fffe <l2cap_connected>:
}
   1fffe:	4770      	bx	lr

00020000 <l2cap_disconnected>:
   20000:	4770      	bx	lr

00020002 <bt_l2cap_chan_remove>:
	return list->head;
   20002:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   20004:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20006:	b17b      	cbz	r3, 20028 <bt_l2cap_chan_remove+0x26>
   20008:	3b08      	subs	r3, #8
   2000a:	2200      	movs	r2, #0
   2000c:	b163      	cbz	r3, 20028 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   2000e:	428b      	cmp	r3, r1
			sys_slist_remove(&conn->channels, prev, &chan->node);
   20010:	f103 0408 	add.w	r4, r3, #8
		if (chan == ch) {
   20014:	d10e      	bne.n	20034 <bt_l2cap_chan_remove+0x32>
	return node->next;
   20016:	6899      	ldr	r1, [r3, #8]
	return list->tail;
   20018:	6d45      	ldr	r5, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   2001a:	b932      	cbnz	r2, 2002a <bt_l2cap_chan_remove+0x28>
   2001c:	42ac      	cmp	r4, r5
	list->head = node;
   2001e:	6501      	str	r1, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   20020:	d100      	bne.n	20024 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   20022:	6541      	str	r1, [r0, #84]	; 0x54
	parent->next = child;
   20024:	2200      	movs	r2, #0
   20026:	609a      	str	r2, [r3, #8]
}
   20028:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   2002a:	42ac      	cmp	r4, r5
	parent->next = child;
   2002c:	6011      	str	r1, [r2, #0]
	list->tail = node;
   2002e:	bf08      	it	eq
   20030:	6542      	streq	r2, [r0, #84]	; 0x54
}
   20032:	e7f7      	b.n	20024 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20034:	2c00      	cmp	r4, #0
   20036:	d0f7      	beq.n	20028 <bt_l2cap_chan_remove+0x26>
	return node->next;
   20038:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2003a:	2b00      	cmp	r3, #0
   2003c:	d0f4      	beq.n	20028 <bt_l2cap_chan_remove+0x26>
   2003e:	3b08      	subs	r3, #8
   20040:	4622      	mov	r2, r4
   20042:	e7e3      	b.n	2000c <bt_l2cap_chan_remove+0xa>

00020044 <bt_l2cap_chan_del>:
{
   20044:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   20046:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2004a:	4604      	mov	r4, r0
	if (!chan->conn) {
   2004c:	b123      	cbz	r3, 20058 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2004e:	686b      	ldr	r3, [r5, #4]
   20050:	b103      	cbz	r3, 20054 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   20052:	4798      	blx	r3
	chan->conn = NULL;
   20054:	2300      	movs	r3, #0
   20056:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   20058:	68e3      	ldr	r3, [r4, #12]
   2005a:	b10b      	cbz	r3, 20060 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2005c:	4620      	mov	r0, r4
   2005e:	4798      	blx	r3
	if (ops->released) {
   20060:	69eb      	ldr	r3, [r5, #28]
   20062:	b11b      	cbz	r3, 2006c <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   20064:	4620      	mov	r0, r4
}
   20066:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2006a:	4718      	bx	r3
}
   2006c:	bd70      	pop	{r4, r5, r6, pc}

0002006e <bt_l2cap_disconnected>:
	return list->head;
   2006e:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   20070:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   20072:	b18b      	cbz	r3, 20098 <bt_l2cap_disconnected+0x2a>
   20074:	f1b3 0008 	subs.w	r0, r3, #8
   20078:	d00e      	beq.n	20098 <bt_l2cap_disconnected+0x2a>
	return node->next;
   2007a:	681c      	ldr	r4, [r3, #0]
   2007c:	b104      	cbz	r4, 20080 <bt_l2cap_disconnected+0x12>
   2007e:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   20080:	f7ff ffe0 	bl	20044 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   20084:	b144      	cbz	r4, 20098 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20086:	f114 0308 	adds.w	r3, r4, #8
   2008a:	d002      	beq.n	20092 <bt_l2cap_disconnected+0x24>
	return node->next;
   2008c:	68a3      	ldr	r3, [r4, #8]
   2008e:	b103      	cbz	r3, 20092 <bt_l2cap_disconnected+0x24>
   20090:	3b08      	subs	r3, #8
{
   20092:	4620      	mov	r0, r4
   20094:	461c      	mov	r4, r3
   20096:	e7f3      	b.n	20080 <bt_l2cap_disconnected+0x12>
}
   20098:	bd10      	pop	{r4, pc}

0002009a <bt_l2cap_security_changed>:
{
   2009a:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   2009c:	6d03      	ldr	r3, [r0, #80]	; 0x50
   2009e:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   200a0:	b1a3      	cbz	r3, 200cc <bt_l2cap_security_changed+0x32>
   200a2:	f1b3 0008 	subs.w	r0, r3, #8
   200a6:	d011      	beq.n	200cc <bt_l2cap_security_changed+0x32>
	return node->next;
   200a8:	681c      	ldr	r4, [r3, #0]
   200aa:	b104      	cbz	r4, 200ae <bt_l2cap_security_changed+0x14>
   200ac:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   200ae:	6843      	ldr	r3, [r0, #4]
   200b0:	689b      	ldr	r3, [r3, #8]
   200b2:	b10b      	cbz	r3, 200b8 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   200b4:	4629      	mov	r1, r5
   200b6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   200b8:	b144      	cbz	r4, 200cc <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   200ba:	f114 0308 	adds.w	r3, r4, #8
   200be:	d002      	beq.n	200c6 <bt_l2cap_security_changed+0x2c>
	return node->next;
   200c0:	68a3      	ldr	r3, [r4, #8]
   200c2:	b103      	cbz	r3, 200c6 <bt_l2cap_security_changed+0x2c>
   200c4:	3b08      	subs	r3, #8
{
   200c6:	4620      	mov	r0, r4
   200c8:	461c      	mov	r4, r3
   200ca:	e7f0      	b.n	200ae <bt_l2cap_security_changed+0x14>
}
   200cc:	bd38      	pop	{r3, r4, r5, pc}

000200ce <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   200ce:	3104      	adds	r1, #4
   200d0:	f7ea bc58 	b.w	a984 <bt_conn_create_pdu_timeout>

000200d4 <bt_l2cap_send_cb>:
{
   200d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   200d6:	4614      	mov	r4, r2
   200d8:	4606      	mov	r6, r0
   200da:	460f      	mov	r7, r1
   200dc:	9301      	str	r3, [sp, #4]
	return net_buf_simple_push(&buf->b, len);
   200de:	2104      	movs	r1, #4
   200e0:	9b08      	ldr	r3, [sp, #32]
   200e2:	9300      	str	r3, [sp, #0]
   200e4:	f102 0008 	add.w	r0, r2, #8
   200e8:	f001 fae7 	bl	216ba <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   200ec:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   200ee:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   200f0:	e9dd 3200 	ldrd	r3, r2, [sp]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   200f4:	3904      	subs	r1, #4
   200f6:	8001      	strh	r1, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   200f8:	4621      	mov	r1, r4
   200fa:	4630      	mov	r0, r6
}
   200fc:	b003      	add	sp, #12
   200fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   20102:	f7ea b98b 	b.w	a41c <bt_conn_send_cb>

00020106 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   20106:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20108:	b160      	cbz	r0, 20124 <bt_l2cap_le_lookup_tx_cid+0x1e>
   2010a:	3808      	subs	r0, #8
   2010c:	b900      	cbnz	r0, 20110 <bt_l2cap_le_lookup_tx_cid+0xa>
   2010e:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   20110:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   20114:	428b      	cmp	r3, r1
   20116:	d005      	beq.n	20124 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20118:	f110 0308 	adds.w	r3, r0, #8
   2011c:	d001      	beq.n	20122 <bt_l2cap_le_lookup_tx_cid+0x1c>
	return node->next;
   2011e:	6880      	ldr	r0, [r0, #8]
   20120:	e7f2      	b.n	20108 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   20122:	4618      	mov	r0, r3
}
   20124:	4770      	bx	lr

00020126 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   20126:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20128:	b160      	cbz	r0, 20144 <bt_l2cap_le_lookup_rx_cid+0x1e>
   2012a:	3808      	subs	r0, #8
   2012c:	b900      	cbnz	r0, 20130 <bt_l2cap_le_lookup_rx_cid+0xa>
   2012e:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   20130:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   20134:	428b      	cmp	r3, r1
   20136:	d005      	beq.n	20144 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20138:	f110 0308 	adds.w	r3, r0, #8
   2013c:	d001      	beq.n	20142 <bt_l2cap_le_lookup_rx_cid+0x1c>
	return node->next;
   2013e:	6880      	ldr	r0, [r0, #8]
   20140:	e7f2      	b.n	20128 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   20142:	4618      	mov	r0, r3
}
   20144:	4770      	bx	lr

00020146 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   20146:	4770      	bx	lr

00020148 <sys_slist_get>:
	return list->head;
   20148:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2014a:	b12b      	cbz	r3, 20158 <sys_slist_get+0x10>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2014c:	6841      	ldr	r1, [r0, #4]
	return node->next;
   2014e:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   20150:	6002      	str	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20152:	428b      	cmp	r3, r1
	list->tail = node;
   20154:	bf08      	it	eq
   20156:	6042      	streq	r2, [r0, #4]
Z_GENLIST_GET(slist, snode)
   20158:	4618      	mov	r0, r3
   2015a:	4770      	bx	lr

0002015c <net_buf_frags_len>:
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   2015c:	2300      	movs	r3, #0

	while (buf) {
   2015e:	b908      	cbnz	r0, 20164 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   20160:	4618      	mov	r0, r3
   20162:	4770      	bx	lr
		bytes += buf->len;
   20164:	8982      	ldrh	r2, [r0, #12]
		buf = buf->frags;
   20166:	6800      	ldr	r0, [r0, #0]
		bytes += buf->len;
   20168:	4413      	add	r3, r2
		buf = buf->frags;
   2016a:	e7f8      	b.n	2015e <net_buf_frags_len+0x2>

0002016c <att_sent>:
	if (chan->ops->sent) {
   2016c:	684b      	ldr	r3, [r1, #4]
   2016e:	695b      	ldr	r3, [r3, #20]
{
   20170:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   20172:	b103      	cbz	r3, 20176 <att_sent+0xa>
		chan->ops->sent(chan);
   20174:	4718      	bx	r3
}
   20176:	4770      	bx	lr

00020178 <attr_read_type_cb>:
{
   20178:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2017a:	68d4      	ldr	r4, [r2, #12]
   2017c:	7823      	ldrb	r3, [r4, #0]
   2017e:	3102      	adds	r1, #2
   20180:	b913      	cbnz	r3, 20188 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   20182:	7021      	strb	r1, [r4, #0]
	return true;
   20184:	2001      	movs	r0, #1
   20186:	e006      	b.n	20196 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   20188:	428b      	cmp	r3, r1
   2018a:	d0fb      	beq.n	20184 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2018c:	8983      	ldrh	r3, [r0, #12]
   2018e:	3b02      	subs	r3, #2
   20190:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   20192:	2000      	movs	r0, #0
   20194:	6110      	str	r0, [r2, #16]
}
   20196:	bd10      	pop	{r4, pc}

00020198 <att_prepare_write_req>:
}
   20198:	2006      	movs	r0, #6
   2019a:	4770      	bx	lr

0002019c <att_op_get_type>:
	switch (op) {
   2019c:	281e      	cmp	r0, #30
   2019e:	d816      	bhi.n	201ce <att_op_get_type+0x32>
   201a0:	b308      	cbz	r0, 201e6 <att_op_get_type+0x4a>
   201a2:	1e43      	subs	r3, r0, #1
   201a4:	2b1d      	cmp	r3, #29
   201a6:	d81e      	bhi.n	201e6 <att_op_get_type+0x4a>
   201a8:	e8df f003 	tbb	[pc, r3]
   201ac:	23172317 	.word	0x23172317
   201b0:	23172317 	.word	0x23172317
   201b4:	23172317 	.word	0x23172317
   201b8:	23172317 	.word	0x23172317
   201bc:	1d172317 	.word	0x1d172317
   201c0:	2317231d 	.word	0x2317231d
   201c4:	1d191d17 	.word	0x1d191d17
   201c8:	0f1b      	.short	0x0f1b
   201ca:	2004      	movs	r0, #4
   201cc:	4770      	bx	lr
   201ce:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   201d2:	2b52      	cmp	r3, #82	; 0x52
   201d4:	d107      	bne.n	201e6 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   201d6:	2000      	movs	r0, #0
}
   201d8:	4770      	bx	lr
		return ATT_RESPONSE;
   201da:	2002      	movs	r0, #2
   201dc:	4770      	bx	lr
		return ATT_NOTIFICATION;
   201de:	2003      	movs	r0, #3
   201e0:	4770      	bx	lr
		return ATT_INDICATION;
   201e2:	2005      	movs	r0, #5
   201e4:	4770      	bx	lr
		return ATT_COMMAND;
   201e6:	f010 0f40 	tst.w	r0, #64	; 0x40
   201ea:	bf0c      	ite	eq
   201ec:	2006      	moveq	r0, #6
   201ee:	2000      	movne	r0, #0
   201f0:	4770      	bx	lr
		return ATT_REQUEST;
   201f2:	2001      	movs	r0, #1
   201f4:	4770      	bx	lr

000201f6 <bt_gatt_foreach_attr>:
{
   201f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   201f8:	e9cd 2301 	strd	r2, r3, [sp, #4]
   201fc:	2300      	movs	r3, #0
   201fe:	9300      	str	r3, [sp, #0]
   20200:	461a      	mov	r2, r3
   20202:	f7ec f901 	bl	c408 <bt_gatt_foreach_attr_type>
}
   20206:	b005      	add	sp, #20
   20208:	f85d fb04 	ldr.w	pc, [sp], #4

0002020c <find_info_cb>:
{
   2020c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2020e:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   20210:	6817      	ldr	r7, [r2, #0]
{
   20212:	4605      	mov	r5, r0
   20214:	460e      	mov	r6, r1
   20216:	4614      	mov	r4, r2
	if (!data->rsp) {
   20218:	b963      	cbnz	r3, 20234 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2021a:	6850      	ldr	r0, [r2, #4]
   2021c:	2101      	movs	r1, #1
   2021e:	3008      	adds	r0, #8
   20220:	f001 fa34 	bl	2168c <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   20224:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   20226:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   20228:	781b      	ldrb	r3, [r3, #0]
   2022a:	2b00      	cmp	r3, #0
   2022c:	bf0c      	ite	eq
   2022e:	2301      	moveq	r3, #1
   20230:	2302      	movne	r3, #2
   20232:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   20234:	68a3      	ldr	r3, [r4, #8]
   20236:	781b      	ldrb	r3, [r3, #0]
   20238:	2b01      	cmp	r3, #1
   2023a:	d003      	beq.n	20244 <find_info_cb+0x38>
   2023c:	2b02      	cmp	r3, #2
   2023e:	d019      	beq.n	20274 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   20240:	2000      	movs	r0, #0
   20242:	e016      	b.n	20272 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   20244:	682b      	ldr	r3, [r5, #0]
   20246:	781b      	ldrb	r3, [r3, #0]
   20248:	2b00      	cmp	r3, #0
   2024a:	d1f9      	bne.n	20240 <find_info_cb+0x34>
   2024c:	6860      	ldr	r0, [r4, #4]
   2024e:	2104      	movs	r1, #4
   20250:	3008      	adds	r0, #8
   20252:	f001 fa1b 	bl	2168c <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   20256:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   20258:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2025a:	885b      	ldrh	r3, [r3, #2]
   2025c:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2025e:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   20260:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   20262:	899b      	ldrh	r3, [r3, #12]
   20264:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   20268:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2026a:	2804      	cmp	r0, #4
   2026c:	bf94      	ite	ls
   2026e:	2000      	movls	r0, #0
   20270:	2001      	movhi	r0, #1
}
   20272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   20274:	682b      	ldr	r3, [r5, #0]
   20276:	781b      	ldrb	r3, [r3, #0]
   20278:	2b02      	cmp	r3, #2
   2027a:	d1e1      	bne.n	20240 <find_info_cb+0x34>
   2027c:	6860      	ldr	r0, [r4, #4]
   2027e:	2112      	movs	r1, #18
   20280:	3008      	adds	r0, #8
   20282:	f001 fa03 	bl	2168c <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   20286:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   20288:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2028a:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   2028c:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   20290:	3101      	adds	r1, #1
   20292:	f7ff f921 	bl	1f4d8 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   20296:	6863      	ldr	r3, [r4, #4]
   20298:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   2029c:	899b      	ldrh	r3, [r3, #12]
   2029e:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   202a0:	2812      	cmp	r0, #18
   202a2:	e7e3      	b.n	2026c <find_info_cb+0x60>

000202a4 <attr_read_group_cb>:
	if (!data->rsp->len) {
   202a4:	68d0      	ldr	r0, [r2, #12]
   202a6:	7803      	ldrb	r3, [r0, #0]
   202a8:	3104      	adds	r1, #4
   202aa:	b913      	cbnz	r3, 202b2 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   202ac:	7001      	strb	r1, [r0, #0]
	return true;
   202ae:	2001      	movs	r0, #1
}
   202b0:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   202b2:	428b      	cmp	r3, r1
   202b4:	d0fb      	beq.n	202ae <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   202b6:	6891      	ldr	r1, [r2, #8]
   202b8:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   202ba:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   202bc:	3b04      	subs	r3, #4
   202be:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   202c0:	6110      	str	r0, [r2, #16]
		return false;
   202c2:	4770      	bx	lr

000202c4 <write_cb>:
{
   202c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   202c6:	4614      	mov	r4, r2
   202c8:	4601      	mov	r1, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   202ca:	9003      	str	r0, [sp, #12]
   202cc:	222a      	movs	r2, #42	; 0x2a
   202ce:	6820      	ldr	r0, [r4, #0]
   202d0:	f000 fd44 	bl	20d5c <bt_gatt_check_perm>
   202d4:	4605      	mov	r5, r0
   202d6:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   202d8:	bb00      	cbnz	r0, 2031c <write_cb+0x58>
	if (!data->req) {
   202da:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   202dc:	9903      	ldr	r1, [sp, #12]
   202de:	68e2      	ldr	r2, [r4, #12]
   202e0:	6820      	ldr	r0, [r4, #0]
		flags |= BT_GATT_WRITE_FLAG_CMD;
   202e2:	2b00      	cmp	r3, #0
   202e4:	bf14      	ite	ne
   202e6:	2300      	movne	r3, #0
   202e8:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   202ea:	9301      	str	r3, [sp, #4]
   202ec:	8a63      	ldrh	r3, [r4, #18]
   202ee:	9300      	str	r3, [sp, #0]
   202f0:	688e      	ldr	r6, [r1, #8]
   202f2:	8a23      	ldrh	r3, [r4, #16]
   202f4:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   202f6:	1e03      	subs	r3, r0, #0
   202f8:	db05      	blt.n	20306 <write_cb+0x42>
   202fa:	8a22      	ldrh	r2, [r4, #16]
   202fc:	4293      	cmp	r3, r2
   202fe:	d10b      	bne.n	20318 <write_cb+0x54>
	data->err = 0U;
   20300:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   20302:	2501      	movs	r5, #1
   20304:	e005      	b.n	20312 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   20306:	f113 0fff 	cmn.w	r3, #255	; 0xff
   2030a:	d305      	bcc.n	20318 <write_cb+0x54>
		return -err;
   2030c:	425b      	negs	r3, r3
   2030e:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   20310:	7523      	strb	r3, [r4, #20]
}
   20312:	4628      	mov	r0, r5
   20314:	b004      	add	sp, #16
   20316:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   20318:	230e      	movs	r3, #14
   2031a:	e7f9      	b.n	20310 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   2031c:	2500      	movs	r5, #0
   2031e:	e7f8      	b.n	20312 <write_cb+0x4e>

00020320 <att_chan_read>:
{
   20320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20324:	ed2d 8b02 	vpush	{d8}
   20328:	4680      	mov	r8, r0
   2032a:	b083      	sub	sp, #12
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2032c:	4610      	mov	r0, r2
{
   2032e:	4699      	mov	r9, r3
   20330:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   20332:	f7ff ff13 	bl	2015c <net_buf_frags_len>
   20336:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   2033a:	4283      	cmp	r3, r0
{
   2033c:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2033e:	d97e      	bls.n	2043e <att_chan_read+0x11e>
	struct bt_conn *conn = chan->chan.chan.conn;
   20340:	f8d8 3008 	ldr.w	r3, [r8, #8]
	frag = net_buf_frag_last(buf);
   20344:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   20346:	ee08 3a10 	vmov	s16, r3
	frag = net_buf_frag_last(buf);
   2034a:	f001 f97d 	bl	21648 <net_buf_frag_last>
	size_t len, total = 0;
   2034e:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   20352:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   20354:	4630      	mov	r0, r6
   20356:	f7ff ff01 	bl	2015c <net_buf_frags_len>
   2035a:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   2035e:	f105 0708 	add.w	r7, r5, #8
   20362:	1a1c      	subs	r4, r3, r0
   20364:	4638      	mov	r0, r7
   20366:	f001 f9cc 	bl	21702 <net_buf_simple_tailroom>
   2036a:	4284      	cmp	r4, r0
   2036c:	d211      	bcs.n	20392 <att_chan_read+0x72>
   2036e:	4630      	mov	r0, r6
   20370:	f7ff fef4 	bl	2015c <net_buf_frags_len>
   20374:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   20378:	1a24      	subs	r4, r4, r0
		if (!len) {
   2037a:	bb34      	cbnz	r4, 203ca <att_chan_read+0xaa>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2037c:	79b0      	ldrb	r0, [r6, #6]
   2037e:	f7f9 fd8d 	bl	19e9c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   20382:	2200      	movs	r2, #0
   20384:	2300      	movs	r3, #0
   20386:	f001 f92a 	bl	215de <net_buf_alloc_fixed>
			if (!frag) {
   2038a:	4605      	mov	r5, r0
   2038c:	b930      	cbnz	r0, 2039c <att_chan_read+0x7c>
	return total;
   2038e:	4657      	mov	r7, sl
   20390:	e02d      	b.n	203ee <att_chan_read+0xce>
	return net_buf_simple_tailroom(&buf->b);
   20392:	4638      	mov	r0, r7
   20394:	f001 f9b5 	bl	21702 <net_buf_simple_tailroom>
   20398:	4604      	mov	r4, r0
   2039a:	e7ee      	b.n	2037a <att_chan_read+0x5a>
			net_buf_frag_add(buf, frag);
   2039c:	4601      	mov	r1, r0
   2039e:	4630      	mov	r0, r6
   203a0:	f001 f963 	bl	2166a <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   203a4:	4630      	mov	r0, r6
   203a6:	f7ff fed9 	bl	2015c <net_buf_frags_len>
   203aa:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   203ae:	f105 0708 	add.w	r7, r5, #8
   203b2:	1a1c      	subs	r4, r3, r0
   203b4:	4638      	mov	r0, r7
   203b6:	f001 f9a4 	bl	21702 <net_buf_simple_tailroom>
   203ba:	4284      	cmp	r4, r0
   203bc:	d21d      	bcs.n	203fa <att_chan_read+0xda>
   203be:	4630      	mov	r0, r6
   203c0:	f7ff fecc 	bl	2015c <net_buf_frags_len>
   203c4:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   203c8:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   203ca:	68a9      	ldr	r1, [r5, #8]
   203cc:	89aa      	ldrh	r2, [r5, #12]
   203ce:	f8db 7004 	ldr.w	r7, [fp, #4]
   203d2:	f8cd 9000 	str.w	r9, [sp]
   203d6:	440a      	add	r2, r1
   203d8:	ee18 0a10 	vmov	r0, s16
   203dc:	b2a3      	uxth	r3, r4
   203de:	4659      	mov	r1, fp
   203e0:	47b8      	blx	r7
		if (read < 0) {
   203e2:	1e07      	subs	r7, r0, #0
   203e4:	da0e      	bge.n	20404 <att_chan_read+0xe4>
				return total;
   203e6:	f1ba 0f00 	cmp.w	sl, #0
   203ea:	bf18      	it	ne
   203ec:	4657      	movne	r7, sl
}
   203ee:	4638      	mov	r0, r7
   203f0:	b003      	add	sp, #12
   203f2:	ecbd 8b02 	vpop	{d8}
   203f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   203fa:	4638      	mov	r0, r7
   203fc:	f001 f981 	bl	21702 <net_buf_simple_tailroom>
   20400:	4604      	mov	r4, r0
   20402:	e7e2      	b.n	203ca <att_chan_read+0xaa>
		if (cb && !cb(frag, read, user_data)) {
   20404:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20406:	b993      	cbnz	r3, 2042e <att_chan_read+0x10e>
	return net_buf_simple_add(&buf->b, len);
   20408:	4639      	mov	r1, r7
   2040a:	f105 0008 	add.w	r0, r5, #8
   2040e:	f001 f93d 	bl	2168c <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   20412:	4630      	mov	r0, r6
   20414:	f7ff fea2 	bl	2015c <net_buf_frags_len>
   20418:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   2041c:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2041e:	4283      	cmp	r3, r0
		total += read;
   20420:	44ba      	add	sl, r7
		offset += read;
   20422:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   20426:	d9b2      	bls.n	2038e <att_chan_read+0x6e>
   20428:	42a7      	cmp	r7, r4
   2042a:	d093      	beq.n	20354 <att_chan_read+0x34>
   2042c:	e7af      	b.n	2038e <att_chan_read+0x6e>
		if (cb && !cb(frag, read, user_data)) {
   2042e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   20430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20432:	4639      	mov	r1, r7
   20434:	4628      	mov	r0, r5
   20436:	4798      	blx	r3
   20438:	2800      	cmp	r0, #0
   2043a:	d1e5      	bne.n	20408 <att_chan_read+0xe8>
   2043c:	e7a7      	b.n	2038e <att_chan_read+0x6e>
		return 0;
   2043e:	2700      	movs	r7, #0
   20440:	e7d5      	b.n	203ee <att_chan_read+0xce>

00020442 <chan_req_send>:
{
   20442:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   20444:	688e      	ldr	r6, [r1, #8]
{
   20446:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   20448:	4630      	mov	r0, r6
   2044a:	f7ff fe87 	bl	2015c <net_buf_frags_len>
   2044e:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   20452:	4283      	cmp	r3, r0
{
   20454:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   20456:	d30a      	bcc.n	2046e <chan_req_send+0x2c>
	req->buf = NULL;
   20458:	2200      	movs	r2, #0
	chan->req = req;
   2045a:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	err = chan_send(chan, buf, NULL);
   2045e:	4628      	mov	r0, r5
	req->buf = NULL;
   20460:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   20462:	4631      	mov	r1, r6
   20464:	f7ea fef4 	bl	b250 <chan_send>
	if (err) {
   20468:	b100      	cbz	r0, 2046c <chan_req_send+0x2a>
		req->buf = buf;
   2046a:	60a6      	str	r6, [r4, #8]
}
   2046c:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   2046e:	f06f 0023 	mvn.w	r0, #35	; 0x23
   20472:	e7fb      	b.n	2046c <chan_req_send+0x2a>

00020474 <process_queue>:
{
   20474:	b537      	push	{r0, r1, r2, r4, r5, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   20476:	2300      	movs	r3, #0
{
   20478:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   2047a:	2200      	movs	r2, #0
   2047c:	4608      	mov	r0, r1
{
   2047e:	460d      	mov	r5, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   20480:	f001 f8b2 	bl	215e8 <net_buf_get>
	if (buf) {
   20484:	4601      	mov	r1, r0
   20486:	b168      	cbz	r0, 204a4 <process_queue+0x30>
		err = chan_send(chan, buf, NULL);
   20488:	9001      	str	r0, [sp, #4]
   2048a:	2200      	movs	r2, #0
   2048c:	4620      	mov	r0, r4
   2048e:	f7ea fedf 	bl	b250 <chan_send>
		if (err) {
   20492:	9901      	ldr	r1, [sp, #4]
   20494:	4604      	mov	r4, r0
   20496:	b110      	cbz	r0, 2049e <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   20498:	4628      	mov	r0, r5
   2049a:	f001 fb71 	bl	21b80 <k_queue_prepend>
}
   2049e:	4620      	mov	r0, r4
   204a0:	b003      	add	sp, #12
   204a2:	bd30      	pop	{r4, r5, pc}
	return -ENOENT;
   204a4:	f06f 0401 	mvn.w	r4, #1
   204a8:	e7f9      	b.n	2049e <process_queue+0x2a>

000204aa <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   204aa:	b510      	push	{r4, lr}
	return list->head;
   204ac:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   204ae:	2200      	movs	r2, #0
   204b0:	b153      	cbz	r3, 204c8 <sys_slist_find_and_remove.isra.0+0x1e>
   204b2:	428b      	cmp	r3, r1
   204b4:	d10e      	bne.n	204d4 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   204b6:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   204b8:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   204ba:	b932      	cbnz	r2, 204ca <sys_slist_find_and_remove.isra.0+0x20>
   204bc:	42a1      	cmp	r1, r4
	list->head = node;
   204be:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   204c0:	d100      	bne.n	204c4 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   204c2:	6043      	str	r3, [r0, #4]
	parent->next = child;
   204c4:	2300      	movs	r3, #0
   204c6:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   204c8:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   204ca:	42a1      	cmp	r1, r4
	parent->next = child;
   204cc:	6013      	str	r3, [r2, #0]
	list->tail = node;
   204ce:	bf08      	it	eq
   204d0:	6042      	streq	r2, [r0, #4]
}
   204d2:	e7f7      	b.n	204c4 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   204d4:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   204d6:	681b      	ldr	r3, [r3, #0]
   204d8:	e7ea      	b.n	204b0 <sys_slist_find_and_remove.isra.0+0x6>

000204da <att_exec_write_req>:
   204da:	2006      	movs	r0, #6
   204dc:	4770      	bx	lr

000204de <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   204de:	30c8      	adds	r0, #200	; 0xc8
   204e0:	f3bf 8f5b 	dmb	ish
   204e4:	e850 3f00 	ldrex	r3, [r0]
   204e8:	f023 0301 	bic.w	r3, r3, #1
   204ec:	e840 3200 	strex	r2, r3, [r0]
   204f0:	2a00      	cmp	r2, #0
   204f2:	d1f7      	bne.n	204e4 <chan_rsp_sent+0x6>
   204f4:	f3bf 8f5b 	dmb	ish
}
   204f8:	4770      	bx	lr

000204fa <chan_cfm_sent>:
   204fa:	30c8      	adds	r0, #200	; 0xc8
   204fc:	f3bf 8f5b 	dmb	ish
   20500:	e850 3f00 	ldrex	r3, [r0]
   20504:	f023 0302 	bic.w	r3, r3, #2
   20508:	e840 3200 	strex	r2, r3, [r0]
   2050c:	2a00      	cmp	r2, #0
   2050e:	d1f7      	bne.n	20500 <chan_cfm_sent+0x6>
   20510:	f3bf 8f5b 	dmb	ish
}
   20514:	4770      	bx	lr

00020516 <read_cb>:
{
   20516:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att_chan *chan = data->chan;
   20518:	6817      	ldr	r7, [r2, #0]
{
   2051a:	b085      	sub	sp, #20
	data->err = 0x00;
   2051c:	2600      	movs	r6, #0
{
   2051e:	4601      	mov	r1, r0
   20520:	4615      	mov	r5, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   20522:	68b8      	ldr	r0, [r7, #8]
	data->err = 0x00;
   20524:	7316      	strb	r6, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   20526:	2215      	movs	r2, #21
   20528:	9103      	str	r1, [sp, #12]
   2052a:	f000 fc17 	bl	20d5c <bt_gatt_check_perm>
   2052e:	4604      	mov	r4, r0
   20530:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   20532:	b998      	cbnz	r0, 2055c <read_cb+0x46>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   20534:	e9cd 0000 	strd	r0, r0, [sp]
   20538:	88ab      	ldrh	r3, [r5, #4]
   2053a:	68aa      	ldr	r2, [r5, #8]
   2053c:	9903      	ldr	r1, [sp, #12]
   2053e:	4638      	mov	r0, r7
   20540:	f7ff feee 	bl	20320 <att_chan_read>
	if (ret < 0) {
   20544:	1e03      	subs	r3, r0, #0
   20546:	da0b      	bge.n	20560 <read_cb+0x4a>
	if (err < 0 && err >= -0xff) {
   20548:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2054c:	bf26      	itte	cs
   2054e:	425b      	negcs	r3, r3
   20550:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   20552:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   20554:	732b      	strb	r3, [r5, #12]
}
   20556:	4620      	mov	r0, r4
   20558:	b005      	add	sp, #20
   2055a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
   2055c:	4634      	mov	r4, r6
   2055e:	e7fa      	b.n	20556 <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   20560:	2401      	movs	r4, #1
   20562:	e7f8      	b.n	20556 <read_cb+0x40>

00020564 <bt_att_sent>:
{
   20564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   20566:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
	struct bt_att *att = chan->att;
   2056a:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2056e:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   20570:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   20574:	b10b      	cbz	r3, 2057a <bt_att_sent+0x16>
		chan->sent(chan);
   20576:	4638      	mov	r0, r7
   20578:	4798      	blx	r3
   2057a:	f3bf 8f5b 	dmb	ish
   2057e:	f105 03c0 	add.w	r3, r5, #192	; 0xc0
   20582:	e853 2f00 	ldrex	r2, [r3]
   20586:	f022 0210 	bic.w	r2, r2, #16
   2058a:	e843 2100 	strex	r1, r2, [r3]
   2058e:	2900      	cmp	r1, #0
   20590:	d1f7      	bne.n	20582 <bt_att_sent+0x1e>
   20592:	f3bf 8f5b 	dmb	ish
	if (!att) {
   20596:	b30c      	cbz	r4, 205dc <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   20598:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   2059c:	b98b      	cbnz	r3, 205c2 <bt_att_sent+0x5e>
   2059e:	6863      	ldr	r3, [r4, #4]
   205a0:	b17b      	cbz	r3, 205c2 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   205a2:	1d20      	adds	r0, r4, #4
   205a4:	f7ff fdd0 	bl	20148 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   205a8:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   205aa:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   205ac:	4638      	mov	r0, r7
   205ae:	f7ff ff48 	bl	20442 <chan_req_send>
   205b2:	2800      	cmp	r0, #0
   205b4:	da12      	bge.n	205dc <bt_att_sent+0x78>
	parent->next = child;
   205b6:	6863      	ldr	r3, [r4, #4]
   205b8:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   205ba:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   205bc:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   205be:	b903      	cbnz	r3, 205c2 <bt_att_sent+0x5e>
	list->tail = node;
   205c0:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   205c2:	f105 01c8 	add.w	r1, r5, #200	; 0xc8
   205c6:	4638      	mov	r0, r7
   205c8:	f7ff ff54 	bl	20474 <process_queue>
	if (!err) {
   205cc:	b130      	cbz	r0, 205dc <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   205ce:	f104 010c 	add.w	r1, r4, #12
   205d2:	4638      	mov	r0, r7
}
   205d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   205d8:	f7ff bf4c 	b.w	20474 <process_queue>
}
   205dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000205de <att_req_send_process>:
{
   205de:	b570      	push	{r4, r5, r6, lr}
   205e0:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   205e2:	3004      	adds	r0, #4
   205e4:	f7ff fdb0 	bl	20148 <sys_slist_get>
	if (!node) {
   205e8:	4606      	mov	r6, r0
   205ea:	b1c0      	cbz	r0, 2061e <att_req_send_process+0x40>
	return list->head;
   205ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   205ee:	b153      	cbz	r3, 20606 <att_req_send_process+0x28>
   205f0:	f5b3 708e 	subs.w	r0, r3, #284	; 0x11c
   205f4:	d007      	beq.n	20606 <att_req_send_process+0x28>
	return node->next;
   205f6:	681c      	ldr	r4, [r3, #0]
   205f8:	b10c      	cbz	r4, 205fe <att_req_send_process+0x20>
   205fa:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
		if (!chan->req) {
   205fe:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   20602:	b13b      	cbz	r3, 20614 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   20604:	b964      	cbnz	r4, 20620 <att_req_send_process+0x42>
	parent->next = child;
   20606:	686b      	ldr	r3, [r5, #4]
   20608:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2060a:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   2060c:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   2060e:	b933      	cbnz	r3, 2061e <att_req_send_process+0x40>
	list->tail = node;
   20610:	60ae      	str	r6, [r5, #8]
}
   20612:	e004      	b.n	2061e <att_req_send_process+0x40>
	return chan_req_send(chan, req);
   20614:	4631      	mov	r1, r6
   20616:	f7ff ff14 	bl	20442 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2061a:	2800      	cmp	r0, #0
   2061c:	dbf2      	blt.n	20604 <att_req_send_process+0x26>
}
   2061e:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   20620:	f514 738e 	adds.w	r3, r4, #284	; 0x11c
   20624:	d004      	beq.n	20630 <att_req_send_process+0x52>
	return node->next;
   20626:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2062a:	b10b      	cbz	r3, 20630 <att_req_send_process+0x52>
   2062c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
{
   20630:	4620      	mov	r0, r4
   20632:	461c      	mov	r4, r3
   20634:	e7e3      	b.n	205fe <att_req_send_process+0x20>

00020636 <bt_att_status>:
{
   20636:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20638:	f3bf 8f5b 	dmb	ish
   2063c:	680b      	ldr	r3, [r1, #0]
   2063e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   20642:	07db      	lsls	r3, r3, #31
{
   20644:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   20646:	d519      	bpl.n	2067c <bt_att_status+0x46>
	if (!chan->att) {
   20648:	f850 0c08 	ldr.w	r0, [r0, #-8]
   2064c:	b1b0      	cbz	r0, 2067c <bt_att_status+0x46>
	if (chan->req) {
   2064e:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   20652:	b99b      	cbnz	r3, 2067c <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   20654:	3004      	adds	r0, #4
   20656:	f7ff fd77 	bl	20148 <sys_slist_get>
	if (!node) {
   2065a:	4604      	mov	r4, r0
   2065c:	b170      	cbz	r0, 2067c <bt_att_status+0x46>
	return chan_req_send(chan, req);
   2065e:	4601      	mov	r1, r0
   20660:	f1a5 0008 	sub.w	r0, r5, #8
   20664:	f7ff feed 	bl	20442 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   20668:	2800      	cmp	r0, #0
   2066a:	da07      	bge.n	2067c <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   2066c:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   20670:	685a      	ldr	r2, [r3, #4]
   20672:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   20674:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   20676:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   20678:	b902      	cbnz	r2, 2067c <bt_att_status+0x46>
	list->tail = node;
   2067a:	609c      	str	r4, [r3, #8]
}
   2067c:	bd38      	pop	{r3, r4, r5, pc}

0002067e <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2067e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20682:	4688      	mov	r8, r1
   20684:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   20686:	2101      	movs	r1, #1
   20688:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2068a:	4605      	mov	r5, r0
   2068c:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2068e:	f7ea fee1 	bl	b454 <bt_att_chan_create_pdu>
	if (!buf) {
   20692:	4604      	mov	r4, r0
   20694:	b170      	cbz	r0, 206b4 <send_err_rsp.part.0+0x36>
   20696:	2104      	movs	r1, #4
   20698:	3008      	adds	r0, #8
   2069a:	f000 fff7 	bl	2168c <net_buf_simple_add>
	rsp->request = req;
   2069e:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   206a2:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   206a4:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   206a8:	4621      	mov	r1, r4
   206aa:	4628      	mov	r0, r5
}
   206ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   206b0:	f7ea be3c 	b.w	b32c <bt_att_chan_send_rsp.constprop.0>
}
   206b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000206b8 <att_write_req>:
{
   206b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   206ba:	460c      	mov	r4, r1
   206bc:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   206be:	f101 0008 	add.w	r0, r1, #8
   206c2:	f001 f812 	bl	216ea <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   206c6:	89a2      	ldrh	r2, [r4, #12]
   206c8:	9201      	str	r2, [sp, #4]
   206ca:	68a2      	ldr	r2, [r4, #8]
   206cc:	9200      	str	r2, [sp, #0]
   206ce:	4603      	mov	r3, r0
   206d0:	2213      	movs	r2, #19
   206d2:	2112      	movs	r1, #18
   206d4:	4628      	mov	r0, r5
   206d6:	f7ea ffb1 	bl	b63c <att_write_rsp.constprop.0>
}
   206da:	b003      	add	sp, #12
   206dc:	bd30      	pop	{r4, r5, pc}

000206de <att_write_cmd>:
{
   206de:	b537      	push	{r0, r1, r2, r4, r5, lr}
   206e0:	460c      	mov	r4, r1
   206e2:	4605      	mov	r5, r0
   206e4:	f101 0008 	add.w	r0, r1, #8
   206e8:	f000 ffff 	bl	216ea <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   206ec:	89a2      	ldrh	r2, [r4, #12]
   206ee:	9201      	str	r2, [sp, #4]
   206f0:	68a2      	ldr	r2, [r4, #8]
   206f2:	9200      	str	r2, [sp, #0]
   206f4:	2200      	movs	r2, #0
   206f6:	4603      	mov	r3, r0
   206f8:	4611      	mov	r1, r2
   206fa:	4628      	mov	r0, r5
   206fc:	f7ea ff9e 	bl	b63c <att_write_rsp.constprop.0>
}
   20700:	b003      	add	sp, #12
   20702:	bd30      	pop	{r4, r5, pc}

00020704 <att_read_blob_req>:
{
   20704:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   20706:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   20708:	8813      	ldrh	r3, [r2, #0]
   2070a:	8852      	ldrh	r2, [r2, #2]
   2070c:	9200      	str	r2, [sp, #0]
   2070e:	210c      	movs	r1, #12
   20710:	220d      	movs	r2, #13
   20712:	f7eb f8f5 	bl	b900 <att_read_rsp>
}
   20716:	b003      	add	sp, #12
   20718:	f85d fb04 	ldr.w	pc, [sp], #4

0002071c <att_read_req>:
{
   2071c:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2071e:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   20720:	2200      	movs	r2, #0
   20722:	881b      	ldrh	r3, [r3, #0]
   20724:	9200      	str	r2, [sp, #0]
   20726:	210a      	movs	r1, #10
   20728:	220b      	movs	r2, #11
   2072a:	f7eb f8e9 	bl	b900 <att_read_rsp>
}
   2072e:	b003      	add	sp, #12
   20730:	f85d fb04 	ldr.w	pc, [sp], #4

00020734 <att_mtu_req>:
{
   20734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   20736:	6803      	ldr	r3, [r0, #0]
{
   20738:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   2073a:	6818      	ldr	r0, [r3, #0]
   2073c:	f3bf 8f5b 	dmb	ish
   20740:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
   20744:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   20748:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   2074c:	071b      	lsls	r3, r3, #28
   2074e:	d41d      	bmi.n	2078c <att_mtu_req+0x58>
	mtu_client = sys_le16_to_cpu(req->mtu);
   20750:	688b      	ldr	r3, [r1, #8]
   20752:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   20754:	2e16      	cmp	r6, #22
   20756:	d91b      	bls.n	20790 <att_mtu_req+0x5c>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   20758:	2202      	movs	r2, #2
   2075a:	2103      	movs	r1, #3
   2075c:	f7ea ffd0 	bl	b700 <bt_att_create_pdu>
	if (!pdu) {
   20760:	4607      	mov	r7, r0
   20762:	b1b8      	cbz	r0, 20794 <att_mtu_req+0x60>
	return net_buf_simple_add(&buf->b, len);
   20764:	2102      	movs	r1, #2
   20766:	3008      	adds	r0, #8
   20768:	f000 ff90 	bl	2168c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2076c:	2341      	movs	r3, #65	; 0x41
   2076e:	7003      	strb	r3, [r0, #0]
   20770:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   20772:	4639      	mov	r1, r7
   20774:	4628      	mov	r0, r5
   20776:	f7ea fdd9 	bl	b32c <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2077a:	2e41      	cmp	r6, #65	; 0x41
   2077c:	bf28      	it	cs
   2077e:	2641      	movcs	r6, #65	; 0x41
   20780:	f8a5 6052 	strh.w	r6, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   20784:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
	return 0;
   20788:	4620      	mov	r0, r4
}
   2078a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2078c:	2006      	movs	r0, #6
   2078e:	e7fc      	b.n	2078a <att_mtu_req+0x56>
		return BT_ATT_ERR_INVALID_PDU;
   20790:	2004      	movs	r0, #4
   20792:	e7fa      	b.n	2078a <att_mtu_req+0x56>
		return BT_ATT_ERR_UNLIKELY;
   20794:	200e      	movs	r0, #14
   20796:	e7f8      	b.n	2078a <att_mtu_req+0x56>

00020798 <bt_att_init>:
	bt_gatt_init();
   20798:	f7eb bdb0 	b.w	c2fc <bt_gatt_init>

0002079c <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2079c:	898a      	ldrh	r2, [r1, #12]
   2079e:	6889      	ldr	r1, [r1, #8]
   207a0:	2300      	movs	r3, #0
   207a2:	f7eb ba1f 	b.w	bbe4 <att_handle_rsp>

000207a6 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   207a6:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   207aa:	b570      	push	{r4, r5, r6, lr}
   207ac:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   207ae:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   207b2:	2b00      	cmp	r3, #0
   207b4:	d037      	beq.n	20826 <bt_att_encrypt_change+0x80>
	if (hci_status) {
   207b6:	b171      	cbz	r1, 207d6 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   207b8:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   207bc:	2b00      	cmp	r3, #0
   207be:	d032      	beq.n	20826 <bt_att_encrypt_change+0x80>
   207c0:	7c1b      	ldrb	r3, [r3, #16]
   207c2:	07da      	lsls	r2, r3, #31
   207c4:	d52f      	bpl.n	20826 <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   207c6:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   207c8:	2200      	movs	r2, #0
   207ca:	4630      	mov	r0, r6
   207cc:	4611      	mov	r1, r2
}
   207ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   207d2:	f7eb ba07 	b.w	bbe4 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   207d6:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   207d8:	4628      	mov	r0, r5
   207da:	f7ec f893 	bl	c904 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   207de:	7a6b      	ldrb	r3, [r5, #9]
   207e0:	2b01      	cmp	r3, #1
   207e2:	d020      	beq.n	20826 <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   207e4:	f8d4 40c4 	ldr.w	r4, [r4, #196]	; 0xc4
   207e8:	b1ec      	cbz	r4, 20826 <bt_att_encrypt_change+0x80>
   207ea:	7c23      	ldrb	r3, [r4, #16]
   207ec:	07db      	lsls	r3, r3, #31
   207ee:	d51a      	bpl.n	20826 <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   207f0:	68e3      	ldr	r3, [r4, #12]
   207f2:	2b00      	cmp	r3, #0
   207f4:	d0e7      	beq.n	207c6 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   207f6:	6962      	ldr	r2, [r4, #20]
   207f8:	7c61      	ldrb	r1, [r4, #17]
   207fa:	4630      	mov	r0, r6
   207fc:	f7ea fe2a 	bl	b454 <bt_att_chan_create_pdu>
	if (!buf) {
   20800:	4605      	mov	r5, r0
   20802:	b140      	cbz	r0, 20816 <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   20804:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   20808:	68e3      	ldr	r3, [r4, #12]
   2080a:	4798      	blx	r3
   2080c:	4602      	mov	r2, r0
   2080e:	b120      	cbz	r0, 2081a <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   20810:	4628      	mov	r0, r5
   20812:	f7f9 fc01 	bl	1a018 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   20816:	230e      	movs	r3, #14
   20818:	e7d6      	b.n	207c8 <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   2081a:	4629      	mov	r1, r5
   2081c:	4630      	mov	r0, r6
   2081e:	f7ea fd17 	bl	b250 <chan_send>
   20822:	2800      	cmp	r0, #0
   20824:	d1f4      	bne.n	20810 <bt_att_encrypt_change+0x6a>
}
   20826:	bd70      	pop	{r4, r5, r6, pc}

00020828 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   20828:	b5f0      	push	{r4, r5, r6, r7, lr}
   2082a:	b085      	sub	sp, #20
   2082c:	4606      	mov	r6, r0
   2082e:	9103      	str	r1, [sp, #12]
   20830:	4615      	mov	r5, r2
   20832:	461f      	mov	r7, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   20834:	f7ea fb46 	bl	aec4 <att_get>
	if (!att) {
   20838:	9903      	ldr	r1, [sp, #12]
   2083a:	4604      	mov	r4, r0
   2083c:	b930      	cbnz	r0, 2084c <bt_att_send+0x24>
		net_buf_unref(buf);
   2083e:	4608      	mov	r0, r1
   20840:	f7f9 fbea 	bl	1a018 <net_buf_unref>
		return -ENOTCONN;
   20844:	f06f 0038 	mvn.w	r0, #56	; 0x38

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   20848:	b005      	add	sp, #20
   2084a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (cb) {
   2084c:	b13d      	cbz	r5, 2085e <bt_att_send+0x36>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   2084e:	460a      	mov	r2, r1
   20850:	9700      	str	r7, [sp, #0]
   20852:	462b      	mov	r3, r5
   20854:	2104      	movs	r1, #4
   20856:	4630      	mov	r0, r6
   20858:	f7ff fc3c 	bl	200d4 <bt_l2cap_send_cb>
   2085c:	e7f4      	b.n	20848 <bt_att_send+0x20>
	net_buf_put(&att->tx_queue, buf);
   2085e:	f100 050c 	add.w	r5, r0, #12
   20862:	4628      	mov	r0, r5
   20864:	f000 fede 	bl	21624 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   20868:	2200      	movs	r2, #0
   2086a:	2300      	movs	r3, #0
   2086c:	4628      	mov	r0, r5
   2086e:	f000 febb 	bl	215e8 <net_buf_get>
	if (!buf) {
   20872:	4601      	mov	r1, r0
   20874:	b908      	cbnz	r0, 2087a <bt_att_send+0x52>
	return 0;
   20876:	2000      	movs	r0, #0
   20878:	e7e6      	b.n	20848 <bt_att_send+0x20>
	return list->head;
   2087a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2087c:	b1cb      	cbz	r3, 208b2 <bt_att_send+0x8a>
   2087e:	f5b3 708e 	subs.w	r0, r3, #284	; 0x11c
   20882:	d016      	beq.n	208b2 <bt_att_send+0x8a>
	return node->next;
   20884:	681c      	ldr	r4, [r3, #0]
   20886:	b10c      	cbz	r4, 2088c <bt_att_send+0x64>
   20888:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
	return chan_send(chan, buf, cb);
   2088c:	2200      	movs	r2, #0
   2088e:	9103      	str	r1, [sp, #12]
   20890:	f7ea fcde 	bl	b250 <chan_send>
		if (err >= 0) {
   20894:	2800      	cmp	r0, #0
   20896:	daee      	bge.n	20876 <bt_att_send+0x4e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   20898:	9903      	ldr	r1, [sp, #12]
   2089a:	b154      	cbz	r4, 208b2 <bt_att_send+0x8a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2089c:	f514 738e 	adds.w	r3, r4, #284	; 0x11c
   208a0:	d004      	beq.n	208ac <bt_att_send+0x84>
	return node->next;
   208a2:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   208a6:	b10b      	cbz	r3, 208ac <bt_att_send+0x84>
   208a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
{
   208ac:	4620      	mov	r0, r4
   208ae:	461c      	mov	r4, r3
   208b0:	e7ec      	b.n	2088c <bt_att_send+0x64>
		k_queue_prepend(&att->tx_queue._queue, buf);
   208b2:	4628      	mov	r0, r5
   208b4:	f001 f964 	bl	21b80 <k_queue_prepend>
   208b8:	e7dd      	b.n	20876 <bt_att_send+0x4e>

000208ba <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   208ba:	b510      	push	{r4, lr}
   208bc:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   208be:	f7ea fb01 	bl	aec4 <att_get>
	if (!att) {
   208c2:	b160      	cbz	r0, 208de <bt_att_req_send+0x24>
	parent->next = child;
   208c4:	2300      	movs	r3, #0
   208c6:	6023      	str	r3, [r4, #0]
	return list->tail;
   208c8:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   208ca:	b92b      	cbnz	r3, 208d8 <bt_att_req_send+0x1e>
	list->head = node;
   208cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   208d0:	f7ff fe85 	bl	205de <att_req_send_process>

	return 0;
   208d4:	2000      	movs	r0, #0
}
   208d6:	bd10      	pop	{r4, pc}
	parent->next = child;
   208d8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   208da:	6084      	str	r4, [r0, #8]
}
   208dc:	e7f8      	b.n	208d0 <bt_att_req_send+0x16>
		return -ENOTCONN;
   208de:	f06f 0038 	mvn.w	r0, #56	; 0x38
   208e2:	e7f8      	b.n	208d6 <bt_att_req_send+0x1c>

000208e4 <gatt_ccc_changed>:
{
   208e4:	460b      	mov	r3, r1
   208e6:	8909      	ldrh	r1, [r1, #8]
   208e8:	8a5a      	ldrh	r2, [r3, #18]
   208ea:	4291      	cmp	r1, r2
   208ec:	bf38      	it	cc
   208ee:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   208f0:	8a9a      	ldrh	r2, [r3, #20]
   208f2:	428a      	cmp	r2, r1
   208f4:	d003      	beq.n	208fe <gatt_ccc_changed+0x1a>
		ccc->value = value;
   208f6:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   208f8:	699b      	ldr	r3, [r3, #24]
   208fa:	b103      	cbz	r3, 208fe <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   208fc:	4718      	bx	r3
}
   208fe:	4770      	bx	lr

00020900 <gatt_indicate_rsp>:
{
   20900:	b510      	push	{r4, lr}
   20902:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   20904:	68a3      	ldr	r3, [r4, #8]
{
   20906:	460a      	mov	r2, r1
	if (params->func) {
   20908:	b10b      	cbz	r3, 2090e <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2090a:	4621      	mov	r1, r4
   2090c:	4798      	blx	r3
	params->_ref--;
   2090e:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   20910:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   20912:	3b01      	subs	r3, #1
   20914:	b2db      	uxtb	r3, r3
   20916:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   20918:	b122      	cbz	r2, 20924 <gatt_indicate_rsp+0x24>
   2091a:	b91b      	cbnz	r3, 20924 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2091c:	4620      	mov	r0, r4
}
   2091e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   20922:	4710      	bx	r2
}
   20924:	bd10      	pop	{r4, pc}

00020926 <match_uuid>:
	data->attr = attr;
   20926:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   20928:	8091      	strh	r1, [r2, #4]
}
   2092a:	2000      	movs	r0, #0
   2092c:	4770      	bx	lr

0002092e <gen_hash_m>:
{
   2092e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   20930:	6807      	ldr	r7, [r0, #0]
   20932:	783d      	ldrb	r5, [r7, #0]
{
   20934:	b089      	sub	sp, #36	; 0x24
   20936:	4606      	mov	r6, r0
   20938:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2093a:	b10d      	cbz	r5, 20940 <gen_hash_m+0x12>
	switch (u16->val) {
   2093c:	2501      	movs	r5, #1
   2093e:	e014      	b.n	2096a <gen_hash_m+0x3c>
   20940:	887b      	ldrh	r3, [r7, #2]
   20942:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   20946:	d004      	beq.n	20952 <gen_hash_m+0x24>
   20948:	d812      	bhi.n	20970 <gen_hash_m+0x42>
   2094a:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2094e:	2b03      	cmp	r3, #3
   20950:	d8f4      	bhi.n	2093c <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   20952:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   20956:	2202      	movs	r2, #2
   20958:	f10d 010e 	add.w	r1, sp, #14
   2095c:	4620      	mov	r0, r4
   2095e:	f7fe fcc3 	bl	1f2e8 <tc_cmac_update>
   20962:	b9e0      	cbnz	r0, 2099e <gen_hash_m+0x70>
			state->err = -EINVAL;
   20964:	f06f 0315 	mvn.w	r3, #21
   20968:	65a3      	str	r3, [r4, #88]	; 0x58
}
   2096a:	4628      	mov	r0, r5
   2096c:	b009      	add	sp, #36	; 0x24
   2096e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   20970:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   20974:	33ff      	adds	r3, #255	; 0xff
   20976:	b29b      	uxth	r3, r3
   20978:	2b04      	cmp	r3, #4
   2097a:	d8df      	bhi.n	2093c <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2097c:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   20980:	2202      	movs	r2, #2
   20982:	f10d 010e 	add.w	r1, sp, #14
   20986:	4620      	mov	r0, r4
   20988:	f7fe fcae 	bl	1f2e8 <tc_cmac_update>
   2098c:	2800      	cmp	r0, #0
   2098e:	d0e9      	beq.n	20964 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   20990:	887b      	ldrh	r3, [r7, #2]
   20992:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   20996:	2202      	movs	r2, #2
   20998:	f10d 010e 	add.w	r1, sp, #14
   2099c:	e017      	b.n	209ce <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   2099e:	887b      	ldrh	r3, [r7, #2]
   209a0:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   209a4:	2202      	movs	r2, #2
   209a6:	f10d 010e 	add.w	r1, sp, #14
   209aa:	4620      	mov	r0, r4
   209ac:	f7fe fc9c 	bl	1f2e8 <tc_cmac_update>
   209b0:	2800      	cmp	r0, #0
   209b2:	d0d7      	beq.n	20964 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   209b4:	2000      	movs	r0, #0
   209b6:	2310      	movs	r3, #16
   209b8:	eb0d 0203 	add.w	r2, sp, r3
   209bc:	6877      	ldr	r7, [r6, #4]
   209be:	9000      	str	r0, [sp, #0]
   209c0:	4631      	mov	r1, r6
   209c2:	47b8      	blx	r7
		if (len < 0) {
   209c4:	1e02      	subs	r2, r0, #0
   209c6:	da01      	bge.n	209cc <gen_hash_m+0x9e>
			state->err = len;
   209c8:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   209ca:	e7ce      	b.n	2096a <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   209cc:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   209ce:	4620      	mov	r0, r4
   209d0:	f7fe fc8a 	bl	1f2e8 <tc_cmac_update>
   209d4:	2800      	cmp	r0, #0
   209d6:	d1b1      	bne.n	2093c <gen_hash_m+0xe>
   209d8:	e7c4      	b.n	20964 <gen_hash_m+0x36>

000209da <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   209da:	2207      	movs	r2, #7
   209dc:	f7fe bd7c 	b.w	1f4d8 <memcpy>

000209e0 <clear_cf_cfg>:
{
   209e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   209e2:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   209e4:	2500      	movs	r5, #0
   209e6:	4669      	mov	r1, sp
   209e8:	3001      	adds	r0, #1
   209ea:	9500      	str	r5, [sp, #0]
   209ec:	f8cd 5003 	str.w	r5, [sp, #3]
   209f0:	f7ff fff3 	bl	209da <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   209f4:	f104 0008 	add.w	r0, r4, #8
   209f8:	2201      	movs	r2, #1
   209fa:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   209fc:	340c      	adds	r4, #12
   209fe:	f7fe fd96 	bl	1f52e <memset>
   20a02:	f3bf 8f5b 	dmb	ish
   20a06:	e854 3f00 	ldrex	r3, [r4]
   20a0a:	e844 5200 	strex	r2, r5, [r4]
   20a0e:	2a00      	cmp	r2, #0
   20a10:	d1f9      	bne.n	20a06 <clear_cf_cfg+0x26>
   20a12:	f3bf 8f5b 	dmb	ish
}
   20a16:	b003      	add	sp, #12
   20a18:	bd30      	pop	{r4, r5, pc}

00020a1a <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   20a1a:	2301      	movs	r3, #1
   20a1c:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20a20:	f3bf 8f5b 	dmb	ish
   20a24:	e850 3f00 	ldrex	r3, [r0]
   20a28:	430b      	orrs	r3, r1
   20a2a:	e840 3200 	strex	r2, r3, [r0]
   20a2e:	2a00      	cmp	r2, #0
   20a30:	d1f8      	bne.n	20a24 <atomic_set_bit+0xa>
   20a32:	f3bf 8f5b 	dmb	ish
}
   20a36:	4770      	bx	lr

00020a38 <sc_restore_rsp>:
{
   20a38:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   20a3a:	f7eb f98f 	bl	bd5c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   20a3e:	b140      	cbz	r0, 20a52 <sc_restore_rsp+0x1a>
   20a40:	7a03      	ldrb	r3, [r0, #8]
   20a42:	07db      	lsls	r3, r3, #31
   20a44:	d505      	bpl.n	20a52 <sc_restore_rsp+0x1a>
}
   20a46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   20a4a:	2100      	movs	r1, #0
   20a4c:	300c      	adds	r0, #12
   20a4e:	f7ff bfe4 	b.w	20a1a <atomic_set_bit>
}
   20a52:	bd08      	pop	{r3, pc}

00020a54 <read_ppcp>:
{
   20a54:	b513      	push	{r0, r1, r4, lr}
   20a56:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   20a58:	2218      	movs	r2, #24
{
   20a5a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   20a5e:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   20a62:	2228      	movs	r2, #40	; 0x28
   20a64:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   20a68:	2200      	movs	r2, #0
   20a6a:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   20a6e:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   20a70:	f04f 022a 	mov.w	r2, #42	; 0x2a
   20a74:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   20a78:	d80b      	bhi.n	20a92 <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   20a7a:	f1c1 0408 	rsb	r4, r1, #8
   20a7e:	429c      	cmp	r4, r3
   20a80:	bfa8      	it	ge
   20a82:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   20a84:	4622      	mov	r2, r4
   20a86:	4469      	add	r1, sp
   20a88:	f7fe fd26 	bl	1f4d8 <memcpy>
}
   20a8c:	4620      	mov	r0, r4
   20a8e:	b002      	add	sp, #8
   20a90:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20a92:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   20a96:	e7f9      	b.n	20a8c <read_ppcp+0x38>

00020a98 <read_appearance>:
{
   20a98:	b513      	push	{r0, r1, r4, lr}
   20a9a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   20a9e:	4610      	mov	r0, r2
	if (offset > value_len) {
   20aa0:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   20aa2:	f04f 0280 	mov.w	r2, #128	; 0x80
   20aa6:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   20aaa:	d80d      	bhi.n	20ac8 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   20aac:	f1c1 0402 	rsb	r4, r1, #2
   20ab0:	429c      	cmp	r4, r3
   20ab2:	bfa8      	it	ge
   20ab4:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   20ab6:	f10d 0306 	add.w	r3, sp, #6
   20aba:	4622      	mov	r2, r4
   20abc:	4419      	add	r1, r3
   20abe:	f7fe fd0b 	bl	1f4d8 <memcpy>
}
   20ac2:	4620      	mov	r0, r4
   20ac4:	b002      	add	sp, #8
   20ac6:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20ac8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   20acc:	e7f9      	b.n	20ac2 <read_appearance+0x2a>

00020ace <read_name>:
{
   20ace:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20ad2:	4699      	mov	r9, r3
   20ad4:	f8bd 7020 	ldrh.w	r7, [sp, #32]
   20ad8:	4616      	mov	r6, r2
	const char *name = bt_get_name();
   20ada:	f7e8 fafd 	bl	90d8 <bt_get_name>
   20ade:	4680      	mov	r8, r0
				 strlen(name));
   20ae0:	f7fe fccd 	bl	1f47e <strlen>
	if (offset > value_len) {
   20ae4:	b283      	uxth	r3, r0
   20ae6:	42bb      	cmp	r3, r7
   20ae8:	d30e      	bcc.n	20b08 <read_name+0x3a>
	len = MIN(buf_len, value_len - offset);
   20aea:	1bdc      	subs	r4, r3, r7
   20aec:	454c      	cmp	r4, r9
   20aee:	4623      	mov	r3, r4
   20af0:	bfa8      	it	ge
   20af2:	464b      	movge	r3, r9
   20af4:	b29c      	uxth	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   20af6:	4622      	mov	r2, r4
   20af8:	eb08 0107 	add.w	r1, r8, r7
   20afc:	4630      	mov	r0, r6
   20afe:	f7fe fceb 	bl	1f4d8 <memcpy>
}
   20b02:	4620      	mov	r0, r4
   20b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20b08:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   20b0c:	e7f9      	b.n	20b02 <read_name+0x34>

00020b0e <cf_read>:
{
   20b0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20b10:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   20b12:	2300      	movs	r3, #0
{
   20b14:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   20b18:	f88d 3004 	strb.w	r3, [sp, #4]
{
   20b1c:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   20b1e:	f7eb f91d 	bl	bd5c <find_cf_cfg>
	if (cfg) {
   20b22:	b128      	cbz	r0, 20b30 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   20b24:	f100 0108 	add.w	r1, r0, #8
   20b28:	2201      	movs	r2, #1
   20b2a:	a801      	add	r0, sp, #4
   20b2c:	f7fe fcd4 	bl	1f4d8 <memcpy>
	if (offset > value_len) {
   20b30:	2e01      	cmp	r6, #1
   20b32:	d80d      	bhi.n	20b50 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   20b34:	f1c6 0401 	rsb	r4, r6, #1
   20b38:	42bc      	cmp	r4, r7
   20b3a:	bfa8      	it	ge
   20b3c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   20b3e:	ab01      	add	r3, sp, #4
   20b40:	4622      	mov	r2, r4
   20b42:	1999      	adds	r1, r3, r6
   20b44:	4628      	mov	r0, r5
   20b46:	f7fe fcc7 	bl	1f4d8 <memcpy>
}
   20b4a:	4620      	mov	r0, r4
   20b4c:	b003      	add	sp, #12
   20b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20b50:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   20b54:	e7f9      	b.n	20b4a <cf_read+0x3c>

00020b56 <bt_gatt_attr_read_service>:
{
   20b56:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   20b58:	68c9      	ldr	r1, [r1, #12]
{
   20b5a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   20b5e:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   20b60:	780a      	ldrb	r2, [r1, #0]
   20b62:	b992      	cbnz	r2, 20b8a <bt_gatt_attr_read_service+0x34>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   20b64:	884a      	ldrh	r2, [r1, #2]
   20b66:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   20b6a:	2d02      	cmp	r5, #2
   20b6c:	d819      	bhi.n	20ba2 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   20b6e:	f1c5 0402 	rsb	r4, r5, #2
   20b72:	429c      	cmp	r4, r3
   20b74:	bfa8      	it	ge
   20b76:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   20b78:	f10d 0306 	add.w	r3, sp, #6
   20b7c:	4622      	mov	r2, r4
   20b7e:	1959      	adds	r1, r3, r5
   20b80:	f7fe fcaa 	bl	1f4d8 <memcpy>
}
   20b84:	4620      	mov	r0, r4
   20b86:	b003      	add	sp, #12
   20b88:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   20b8a:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   20b8c:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   20b90:	d807      	bhi.n	20ba2 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   20b92:	f1c5 0410 	rsb	r4, r5, #16
   20b96:	429c      	cmp	r4, r3
   20b98:	bfa8      	it	ge
   20b9a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   20b9c:	4622      	mov	r2, r4
   20b9e:	4429      	add	r1, r5
   20ba0:	e7ee      	b.n	20b80 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20ba2:	f06f 0406 	mvn.w	r4, #6
   20ba6:	e7ed      	b.n	20b84 <bt_gatt_attr_read_service+0x2e>

00020ba8 <find_ccc_cfg>:
{
   20ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20baa:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   20bac:	1c4c      	adds	r4, r1, #1
   20bae:	f101 0515 	add.w	r5, r1, #21
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   20bb2:	1e67      	subs	r7, r4, #1
		if (conn) {
   20bb4:	b14e      	cbz	r6, 20bca <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   20bb6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   20bba:	4622      	mov	r2, r4
   20bbc:	4630      	mov	r0, r6
   20bbe:	f7ff f95e 	bl	1fe7e <bt_conn_is_peer_addr_le>
   20bc2:	b160      	cbz	r0, 20bde <find_ccc_cfg+0x36>
}
   20bc4:	4638      	mov	r0, r7
   20bc6:	b003      	add	sp, #12
   20bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return memcmp(a, b, sizeof(*a));
   20bca:	2207      	movs	r2, #7
   20bcc:	4669      	mov	r1, sp
   20bce:	4620      	mov	r0, r4
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   20bd0:	9600      	str	r6, [sp, #0]
   20bd2:	f8cd 6003 	str.w	r6, [sp, #3]
   20bd6:	f7fe fc6e 	bl	1f4b6 <memcmp>
   20bda:	2800      	cmp	r0, #0
   20bdc:	d0f2      	beq.n	20bc4 <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   20bde:	340a      	adds	r4, #10
   20be0:	42ac      	cmp	r4, r5
   20be2:	d1e6      	bne.n	20bb2 <find_ccc_cfg+0xa>
	return NULL;
   20be4:	2700      	movs	r7, #0
   20be6:	e7ed      	b.n	20bc4 <find_ccc_cfg+0x1c>

00020be8 <bt_gatt_attr_read_ccc>:
{
   20be8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   20bea:	68c9      	ldr	r1, [r1, #12]
{
   20bec:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   20bf0:	4615      	mov	r5, r2
   20bf2:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   20bf4:	f7ff ffd8 	bl	20ba8 <find_ccc_cfg>
	if (cfg) {
   20bf8:	b198      	cbz	r0, 20c22 <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
   20bfa:	8901      	ldrh	r1, [r0, #8]
   20bfc:	f8ad 1006 	strh.w	r1, [sp, #6]
	if (offset > value_len) {
   20c00:	2e02      	cmp	r6, #2
   20c02:	d810      	bhi.n	20c26 <bt_gatt_attr_read_ccc+0x3e>
	len = MIN(buf_len, value_len - offset);
   20c04:	f1c6 0402 	rsb	r4, r6, #2
   20c08:	42bc      	cmp	r4, r7
   20c0a:	bfa8      	it	ge
   20c0c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   20c0e:	f10d 0306 	add.w	r3, sp, #6
   20c12:	4622      	mov	r2, r4
   20c14:	1999      	adds	r1, r3, r6
   20c16:	4628      	mov	r0, r5
   20c18:	f7fe fc5e 	bl	1f4d8 <memcpy>
}
   20c1c:	4620      	mov	r0, r4
   20c1e:	b003      	add	sp, #12
   20c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
   20c22:	4601      	mov	r1, r0
   20c24:	e7ea      	b.n	20bfc <bt_gatt_attr_read_ccc+0x14>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20c26:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   20c2a:	e7f7      	b.n	20c1c <bt_gatt_attr_read_ccc+0x34>

00020c2c <sc_clear>:
{
   20c2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20c2e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   20c30:	f100 0188 	add.w	r1, r0, #136	; 0x88
   20c34:	7a00      	ldrb	r0, [r0, #8]
   20c36:	9101      	str	r1, [sp, #4]
   20c38:	f7fe fea6 	bl	1f988 <bt_addr_le_is_bonded>
   20c3c:	7a20      	ldrb	r0, [r4, #8]
   20c3e:	9901      	ldr	r1, [sp, #4]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   20c40:	f7eb f9fa 	bl	c038 <find_sc_cfg>
	if (!cfg) {
   20c44:	b130      	cbz	r0, 20c54 <sc_clear+0x28>
	memset(cfg, 0, sizeof(*cfg));
   20c46:	220c      	movs	r2, #12
   20c48:	2100      	movs	r1, #0
}
   20c4a:	b003      	add	sp, #12
   20c4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	memset(cfg, 0, sizeof(*cfg));
   20c50:	f7fe bc6d 	b.w	1f52e <memset>
}
   20c54:	b003      	add	sp, #12
   20c56:	bd30      	pop	{r4, r5, pc}

00020c58 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   20c58:	2a02      	cmp	r2, #2
{
   20c5a:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   20c5c:	d108      	bne.n	20c70 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   20c5e:	2300      	movs	r3, #0
   20c60:	f100 0188 	add.w	r1, r0, #136	; 0x88
   20c64:	461a      	mov	r2, r3
   20c66:	7a00      	ldrb	r0, [r0, #8]
   20c68:	f7eb fa08 	bl	c07c <sc_save>
}
   20c6c:	2002      	movs	r0, #2
   20c6e:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   20c70:	f7ff ffdc 	bl	20c2c <sc_clear>
   20c74:	e7fa      	b.n	20c6c <sc_ccc_cfg_write+0x14>

00020c76 <bt_gatt_attr_read>:
{
   20c76:	b538      	push	{r3, r4, r5, lr}
   20c78:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   20c7c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   20c80:	42a9      	cmp	r1, r5
{
   20c82:	4610      	mov	r0, r2
	if (offset > value_len) {
   20c84:	d80b      	bhi.n	20c9e <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   20c86:	1a6c      	subs	r4, r5, r1
   20c88:	42a3      	cmp	r3, r4
   20c8a:	bfa8      	it	ge
   20c8c:	4623      	movge	r3, r4
   20c8e:	b29c      	uxth	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   20c90:	9b05      	ldr	r3, [sp, #20]
   20c92:	4622      	mov	r2, r4
   20c94:	4419      	add	r1, r3
   20c96:	f7fe fc1f 	bl	1f4d8 <memcpy>
}
   20c9a:	4620      	mov	r0, r4
   20c9c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20c9e:	f06f 0406 	mvn.w	r4, #6
   20ca2:	e7fa      	b.n	20c9a <bt_gatt_attr_read+0x24>

00020ca4 <bt_gatt_attr_value_handle>:
{
   20ca4:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   20ca6:	4604      	mov	r4, r0
   20ca8:	b910      	cbnz	r0, 20cb0 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   20caa:	2000      	movs	r0, #0
}
   20cac:	b002      	add	sp, #8
   20cae:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   20cb0:	2300      	movs	r3, #0
   20cb2:	f88d 3004 	strb.w	r3, [sp, #4]
   20cb6:	6800      	ldr	r0, [r0, #0]
   20cb8:	f642 0303 	movw	r3, #10243	; 0x2803
   20cbc:	a901      	add	r1, sp, #4
   20cbe:	f8ad 3006 	strh.w	r3, [sp, #6]
   20cc2:	f7fe fd03 	bl	1f6cc <bt_uuid_cmp>
   20cc6:	2800      	cmp	r0, #0
   20cc8:	d1ef      	bne.n	20caa <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   20cca:	68e3      	ldr	r3, [r4, #12]
   20ccc:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   20cce:	2800      	cmp	r0, #0
   20cd0:	d1ec      	bne.n	20cac <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   20cd2:	4620      	mov	r0, r4
   20cd4:	f7eb fb66 	bl	c3a4 <bt_gatt_attr_get_handle>
   20cd8:	3001      	adds	r0, #1
   20cda:	b280      	uxth	r0, r0
	return handle;
   20cdc:	e7e6      	b.n	20cac <bt_gatt_attr_value_handle+0x8>

00020cde <bt_gatt_attr_read_chrc>:
{
   20cde:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   20ce0:	68cc      	ldr	r4, [r1, #12]
{
   20ce2:	b087      	sub	sp, #28
   20ce4:	4608      	mov	r0, r1
   20ce6:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   20ce8:	79a3      	ldrb	r3, [r4, #6]
   20cea:	f88d 3004 	strb.w	r3, [sp, #4]
{
   20cee:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   20cf2:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   20cf4:	f7ff ffd6 	bl	20ca4 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   20cf8:	6821      	ldr	r1, [r4, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   20cfa:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   20cfe:	780b      	ldrb	r3, [r1, #0]
   20d00:	b9a3      	cbnz	r3, 20d2c <bt_gatt_attr_read_chrc+0x4e>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   20d02:	884b      	ldrh	r3, [r1, #2]
   20d04:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   20d08:	2105      	movs	r1, #5
	if (offset > value_len) {
   20d0a:	42b1      	cmp	r1, r6
   20d0c:	d316      	bcc.n	20d3c <bt_gatt_attr_read_chrc+0x5e>
	len = MIN(buf_len, value_len - offset);
   20d0e:	1b8c      	subs	r4, r1, r6
   20d10:	42bc      	cmp	r4, r7
   20d12:	4623      	mov	r3, r4
   20d14:	bfa8      	it	ge
   20d16:	463b      	movge	r3, r7
   20d18:	b29c      	uxth	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   20d1a:	ab01      	add	r3, sp, #4
   20d1c:	4622      	mov	r2, r4
   20d1e:	1999      	adds	r1, r3, r6
   20d20:	4628      	mov	r0, r5
   20d22:	f7fe fbd9 	bl	1f4d8 <memcpy>
}
   20d26:	4620      	mov	r0, r4
   20d28:	b007      	add	sp, #28
   20d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   20d2c:	3101      	adds	r1, #1
   20d2e:	2210      	movs	r2, #16
   20d30:	f10d 0007 	add.w	r0, sp, #7
   20d34:	f7fe fbd0 	bl	1f4d8 <memcpy>
		value_len += 16U;
   20d38:	2113      	movs	r1, #19
   20d3a:	e7e6      	b.n	20d0a <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20d3c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   20d40:	e7f1      	b.n	20d26 <bt_gatt_attr_read_chrc+0x48>

00020d42 <bt_gatt_foreach_attr>:
{
   20d42:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   20d44:	e9cd 2301 	strd	r2, r3, [sp, #4]
   20d48:	2300      	movs	r3, #0
   20d4a:	9300      	str	r3, [sp, #0]
   20d4c:	461a      	mov	r2, r3
   20d4e:	f7eb fb5b 	bl	c408 <bt_gatt_foreach_attr_type>
}
   20d52:	b005      	add	sp, #20
   20d54:	f85d fb04 	ldr.w	pc, [sp], #4

00020d58 <db_hash_process>:
	db_hash_gen(true);
   20d58:	f7eb bbb0 	b.w	c4bc <db_hash_gen.constprop.0>

00020d5c <bt_gatt_check_perm>:
{
   20d5c:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   20d5e:	07d4      	lsls	r4, r2, #31
{
   20d60:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   20d62:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   20d64:	d504      	bpl.n	20d70 <bt_gatt_check_perm+0x14>
   20d66:	f010 0f15 	tst.w	r0, #21
   20d6a:	d01e      	beq.n	20daa <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   20d6c:	684b      	ldr	r3, [r1, #4]
   20d6e:	b1e3      	cbz	r3, 20daa <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   20d70:	0793      	lsls	r3, r2, #30
   20d72:	d504      	bpl.n	20d7e <bt_gatt_check_perm+0x22>
   20d74:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   20d78:	d019      	beq.n	20dae <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   20d7a:	688b      	ldr	r3, [r1, #8]
   20d7c:	b1bb      	cbz	r3, 20dae <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   20d7e:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   20d82:	f014 0f30 	tst.w	r4, #48	; 0x30
   20d86:	d103      	bne.n	20d90 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   20d88:	f014 000c 	ands.w	r0, r4, #12
   20d8c:	d107      	bne.n	20d9e <bt_gatt_check_perm+0x42>
}
   20d8e:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   20d90:	4628      	mov	r0, r5
   20d92:	f7ff f869 	bl	1fe68 <bt_conn_get_security>
   20d96:	2802      	cmp	r0, #2
   20d98:	d8f6      	bhi.n	20d88 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   20d9a:	2005      	movs	r0, #5
   20d9c:	e7f7      	b.n	20d8e <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   20d9e:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   20da0:	2b00      	cmp	r3, #0
   20da2:	bf14      	ite	ne
   20da4:	2000      	movne	r0, #0
   20da6:	200f      	moveq	r0, #15
   20da8:	e7f1      	b.n	20d8e <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   20daa:	2002      	movs	r0, #2
   20dac:	e7ef      	b.n	20d8e <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   20dae:	2003      	movs	r0, #3
   20db0:	e7ed      	b.n	20d8e <bt_gatt_check_perm+0x32>

00020db2 <bt_gatt_change_aware>:
{
   20db2:	b510      	push	{r4, lr}
   20db4:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   20db6:	f7ea ffd1 	bl	bd5c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   20dba:	4603      	mov	r3, r0
   20dbc:	b910      	cbnz	r0, 20dc4 <bt_gatt_change_aware+0x12>
		return true;
   20dbe:	2401      	movs	r4, #1
}
   20dc0:	4620      	mov	r0, r4
   20dc2:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   20dc4:	7a02      	ldrb	r2, [r0, #8]
   20dc6:	07d2      	lsls	r2, r2, #31
   20dc8:	d5f9      	bpl.n	20dbe <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20dca:	f3bf 8f5b 	dmb	ish
   20dce:	68d9      	ldr	r1, [r3, #12]
   20dd0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   20dd4:	f011 0101 	ands.w	r1, r1, #1
   20dd8:	f100 000c 	add.w	r0, r0, #12
   20ddc:	d1ef      	bne.n	20dbe <bt_gatt_change_aware+0xc>
	if (!req) {
   20dde:	2c00      	cmp	r4, #0
   20de0:	d0ee      	beq.n	20dc0 <bt_gatt_change_aware+0xe>
   20de2:	f3bf 8f5b 	dmb	ish
   20de6:	68db      	ldr	r3, [r3, #12]
   20de8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   20dec:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   20df0:	079b      	lsls	r3, r3, #30
   20df2:	d50e      	bpl.n	20e12 <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20df4:	f3bf 8f5b 	dmb	ish
   20df8:	e850 3f00 	ldrex	r3, [r0]
   20dfc:	f023 0302 	bic.w	r3, r3, #2
   20e00:	e840 3200 	strex	r2, r3, [r0]
   20e04:	2a00      	cmp	r2, #0
   20e06:	d1f7      	bne.n	20df8 <bt_gatt_change_aware+0x46>
   20e08:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   20e0c:	f7ff fe05 	bl	20a1a <atomic_set_bit>
	return false;
   20e10:	e7d6      	b.n	20dc0 <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   20e12:	2101      	movs	r1, #1
   20e14:	e7fa      	b.n	20e0c <bt_gatt_change_aware+0x5a>

00020e16 <sys_memcpy_swap>:
	psrc += length - 1;
   20e16:	1e53      	subs	r3, r2, #1
   20e18:	4419      	add	r1, r3
	for (; length > 0; length--) {
   20e1a:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   20e1c:	f811 3901 	ldrb.w	r3, [r1], #-1
   20e20:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   20e24:	4290      	cmp	r0, r2
   20e26:	d1f9      	bne.n	20e1c <sys_memcpy_swap+0x6>
}
   20e28:	4770      	bx	lr

00020e2a <smp_pairing_rsp>:
}
   20e2a:	2007      	movs	r0, #7
   20e2c:	4770      	bx	lr

00020e2e <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   20e2e:	2301      	movs	r3, #1
   20e30:	fa03 f101 	lsl.w	r1, r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   20e34:	43c9      	mvns	r1, r1
   20e36:	f3bf 8f5b 	dmb	ish
   20e3a:	e850 3f00 	ldrex	r3, [r0]
   20e3e:	400b      	ands	r3, r1
   20e40:	e840 3200 	strex	r2, r3, [r0]
   20e44:	2a00      	cmp	r2, #0
   20e46:	d1f8      	bne.n	20e3a <atomic_clear_bit+0xc>
   20e48:	f3bf 8f5b 	dmb	ish
}
   20e4c:	4770      	bx	lr

00020e4e <bt_smp_aes_cmac>:
{
   20e4e:	b570      	push	{r4, r5, r6, lr}
   20e50:	b0c2      	sub	sp, #264	; 0x108
   20e52:	460d      	mov	r5, r1
   20e54:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   20e56:	4601      	mov	r1, r0
   20e58:	aa16      	add	r2, sp, #88	; 0x58
   20e5a:	4668      	mov	r0, sp
{
   20e5c:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   20e5e:	f7fe fa18 	bl	1f292 <tc_cmac_setup>
   20e62:	b150      	cbz	r0, 20e7a <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   20e64:	4632      	mov	r2, r6
   20e66:	4629      	mov	r1, r5
   20e68:	4668      	mov	r0, sp
   20e6a:	f7fe fa3d 	bl	1f2e8 <tc_cmac_update>
   20e6e:	b120      	cbz	r0, 20e7a <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   20e70:	4669      	mov	r1, sp
   20e72:	4620      	mov	r0, r4
   20e74:	f7fe faa3 	bl	1f3be <tc_cmac_final>
   20e78:	b918      	cbnz	r0, 20e82 <bt_smp_aes_cmac+0x34>
		return -EIO;
   20e7a:	f06f 0004 	mvn.w	r0, #4
}
   20e7e:	b042      	add	sp, #264	; 0x108
   20e80:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   20e82:	2000      	movs	r0, #0
   20e84:	e7fb      	b.n	20e7e <bt_smp_aes_cmac+0x30>

00020e86 <smp_security_request>:
   20e86:	2007      	movs	r0, #7
   20e88:	4770      	bx	lr

00020e8a <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   20e8a:	b510      	push	{r4, lr}
   20e8c:	1e43      	subs	r3, r0, #1
   20e8e:	f100 0210 	add.w	r2, r0, #16
   20e92:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   20e94:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   20e98:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   20e9c:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   20e9e:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   20ea0:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   20ea2:	d1f7      	bne.n	20e94 <sys_mem_swap.constprop.0+0xa>
	}
}
   20ea4:	bd10      	pop	{r4, pc}

00020ea6 <smp_f6>:
{
   20ea6:	b5f0      	push	{r4, r5, r6, r7, lr}
   20ea8:	b097      	sub	sp, #92	; 0x5c
   20eaa:	4605      	mov	r5, r0
   20eac:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   20eae:	a805      	add	r0, sp, #20
   20eb0:	2210      	movs	r2, #16
{
   20eb2:	461c      	mov	r4, r3
   20eb4:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   20eb6:	f7ff ffae 	bl	20e16 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   20eba:	2210      	movs	r2, #16
   20ebc:	4631      	mov	r1, r6
   20ebe:	a809      	add	r0, sp, #36	; 0x24
   20ec0:	f7ff ffa9 	bl	20e16 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   20ec4:	4621      	mov	r1, r4
   20ec6:	2210      	movs	r2, #16
   20ec8:	a80d      	add	r0, sp, #52	; 0x34
   20eca:	f7ff ffa4 	bl	20e16 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   20ece:	991c      	ldr	r1, [sp, #112]	; 0x70
   20ed0:	2203      	movs	r2, #3
   20ed2:	a811      	add	r0, sp, #68	; 0x44
   20ed4:	f7ff ff9f 	bl	20e16 <sys_memcpy_swap>
	m[51] = a1->type;
   20ed8:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   20eda:	f814 3b01 	ldrb.w	r3, [r4], #1
   20ede:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   20ee2:	4621      	mov	r1, r4
   20ee4:	2206      	movs	r2, #6
   20ee6:	a812      	add	r0, sp, #72	; 0x48
   20ee8:	f7fe faf6 	bl	1f4d8 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   20eec:	4621      	mov	r1, r4
   20eee:	2206      	movs	r2, #6
   20ef0:	a812      	add	r0, sp, #72	; 0x48
   20ef2:	f7ff ff90 	bl	20e16 <sys_memcpy_swap>
	m[58] = a2->type;
   20ef6:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   20ef8:	f814 3b01 	ldrb.w	r3, [r4], #1
   20efc:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   20f00:	4621      	mov	r1, r4
   20f02:	2206      	movs	r2, #6
   20f04:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   20f08:	f7fe fae6 	bl	1f4d8 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   20f0c:	4621      	mov	r1, r4
   20f0e:	2206      	movs	r2, #6
   20f10:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   20f14:	f7ff ff7f 	bl	20e16 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   20f18:	2210      	movs	r2, #16
   20f1a:	4629      	mov	r1, r5
   20f1c:	a801      	add	r0, sp, #4
   20f1e:	f7ff ff7a 	bl	20e16 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   20f22:	463b      	mov	r3, r7
   20f24:	2241      	movs	r2, #65	; 0x41
   20f26:	a905      	add	r1, sp, #20
   20f28:	a801      	add	r0, sp, #4
   20f2a:	f7ff ff90 	bl	20e4e <bt_smp_aes_cmac>
	if (err) {
   20f2e:	4604      	mov	r4, r0
   20f30:	b910      	cbnz	r0, 20f38 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   20f32:	4638      	mov	r0, r7
   20f34:	f7ff ffa9 	bl	20e8a <sys_mem_swap.constprop.0>
}
   20f38:	4620      	mov	r0, r4
   20f3a:	b017      	add	sp, #92	; 0x5c
   20f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00020f3e <smp_f4>:
{
   20f3e:	b5f0      	push	{r4, r5, r6, r7, lr}
   20f40:	b097      	sub	sp, #92	; 0x5c
   20f42:	4614      	mov	r4, r2
   20f44:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   20f46:	2220      	movs	r2, #32
   20f48:	4601      	mov	r1, r0
   20f4a:	a805      	add	r0, sp, #20
{
   20f4c:	461d      	mov	r5, r3
   20f4e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   20f50:	f7ff ff61 	bl	20e16 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   20f54:	2220      	movs	r2, #32
   20f56:	4631      	mov	r1, r6
   20f58:	a80d      	add	r0, sp, #52	; 0x34
   20f5a:	f7ff ff5c 	bl	20e16 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   20f5e:	4621      	mov	r1, r4
   20f60:	2210      	movs	r2, #16
   20f62:	a801      	add	r0, sp, #4
	m[64] = z;
   20f64:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   20f68:	f7ff ff55 	bl	20e16 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   20f6c:	463b      	mov	r3, r7
   20f6e:	2241      	movs	r2, #65	; 0x41
   20f70:	a905      	add	r1, sp, #20
   20f72:	a801      	add	r0, sp, #4
   20f74:	f7ff ff6b 	bl	20e4e <bt_smp_aes_cmac>
	if (err) {
   20f78:	4604      	mov	r4, r0
   20f7a:	b910      	cbnz	r0, 20f82 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   20f7c:	4638      	mov	r0, r7
   20f7e:	f7ff ff84 	bl	20e8a <sys_mem_swap.constprop.0>
}
   20f82:	4620      	mov	r0, r4
   20f84:	b017      	add	sp, #92	; 0x5c
   20f86:	bdf0      	pop	{r4, r5, r6, r7, pc}

00020f88 <k_delayed_work_cancel.isra.0>:
static inline int k_delayed_work_cancel(struct k_delayed_work *work)
   20f88:	b510      	push	{r4, lr}
   20f8a:	4604      	mov	r4, r0
	return k_work_delayable_busy_get(dwork) != 0;
   20f8c:	f001 f812 	bl	21fb4 <k_work_delayable_busy_get>
	int rc = k_work_cancel_delayable(&work->work);
   20f90:	4620      	mov	r0, r4
}
   20f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	int rc = k_work_cancel_delayable(&work->work);
   20f96:	f001 b821 	b.w	21fdc <k_work_cancel_delayable>

00020f9a <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   20f9a:	2301      	movs	r3, #1
   20f9c:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20fa0:	f3bf 8f5b 	dmb	ish
   20fa4:	e850 3f00 	ldrex	r3, [r0]
   20fa8:	430b      	orrs	r3, r1
   20faa:	e840 3200 	strex	r2, r3, [r0]
   20fae:	2a00      	cmp	r2, #0
   20fb0:	d1f8      	bne.n	20fa4 <atomic_set_bit+0xa>
   20fb2:	f3bf 8f5b 	dmb	ish
}
   20fb6:	4770      	bx	lr

00020fb8 <smp_keypress_notif>:
{
   20fb8:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   20fba:	210e      	movs	r1, #14
   20fbc:	30c0      	adds	r0, #192	; 0xc0
   20fbe:	f7ff ffec 	bl	20f9a <atomic_set_bit>
}
   20fc2:	2000      	movs	r0, #0
   20fc4:	bd08      	pop	{r3, pc}

00020fc6 <smp_signing_info>:
   20fc6:	2007      	movs	r0, #7
   20fc8:	4770      	bx	lr

00020fca <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20fca:	f3bf 8f5b 	dmb	ish
   20fce:	6800      	ldr	r0, [r0, #0]
   20fd0:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   20fd4:	4108      	asrs	r0, r1
}
   20fd6:	f000 0001 	and.w	r0, r0, #1
   20fda:	4770      	bx	lr

00020fdc <update_keys_check>:
{
   20fdc:	b510      	push	{r4, lr}
   20fde:	4603      	mov	r3, r0
	if (!keys ||
   20fe0:	b1f9      	cbz	r1, 21022 <update_keys_check+0x46>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   20fe2:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   20fe4:	f010 0f24 	tst.w	r0, #36	; 0x24
   20fe8:	d01b      	beq.n	21022 <update_keys_check+0x46>
	return MIN(req->max_key_size, rsp->max_key_size);
   20fea:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
   20fee:	f893 40cd 	ldrb.w	r4, [r3, #205]	; 0xcd
	if (keys->enc_size > get_encryption_key_size(smp)) {
   20ff2:	7b09      	ldrb	r1, [r1, #12]
   20ff4:	42a2      	cmp	r2, r4
   20ff6:	bf28      	it	cs
   20ff8:	4622      	movcs	r2, r4
   20ffa:	4291      	cmp	r1, r2
   20ffc:	d901      	bls.n	21002 <update_keys_check+0x26>
		return false;
   20ffe:	2000      	movs	r0, #0
}
   21000:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   21002:	0682      	lsls	r2, r0, #26
   21004:	d405      	bmi.n	21012 <update_keys_check+0x36>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   21006:	f893 00c8 	ldrb.w	r0, [r3, #200]	; 0xc8
   2100a:	3800      	subs	r0, #0
   2100c:	bf18      	it	ne
   2100e:	2001      	movne	r0, #1
   21010:	e7f6      	b.n	21000 <update_keys_check+0x24>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   21012:	2105      	movs	r1, #5
   21014:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
   21018:	f7ff ffd7 	bl	20fca <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2101c:	2800      	cmp	r0, #0
   2101e:	d1f2      	bne.n	21006 <update_keys_check+0x2a>
   21020:	e7ed      	b.n	20ffe <update_keys_check+0x22>
		return true;
   21022:	2001      	movs	r0, #1
   21024:	e7ec      	b.n	21000 <update_keys_check+0x24>

00021026 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   21026:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   21028:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2102c:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2102e:	4628      	mov	r0, r5
   21030:	2104      	movs	r1, #4
   21032:	f7ff ffca 	bl	20fca <atomic_test_bit>
   21036:	b168      	cbz	r0, 21054 <smp_create_pdu.constprop.0+0x2e>
		timeout = K_NO_WAIT;
   21038:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2103a:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   2103c:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2103e:	4608      	mov	r0, r1
   21040:	f7ff f845 	bl	200ce <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   21044:	4604      	mov	r4, r0
   21046:	b940      	cbnz	r0, 2105a <smp_create_pdu.constprop.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   21048:	2104      	movs	r1, #4
   2104a:	4628      	mov	r0, r5
   2104c:	f7ff ffa5 	bl	20f9a <atomic_set_bit>
}
   21050:	4620      	mov	r0, r4
   21052:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   21054:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   21058:	e7ef      	b.n	2103a <smp_create_pdu.constprop.0+0x14>
   2105a:	2101      	movs	r1, #1
   2105c:	3008      	adds	r0, #8
   2105e:	f000 fb15 	bl	2168c <net_buf_simple_add>
	hdr->code = op;
   21062:	7006      	strb	r6, [r0, #0]
	return buf;
   21064:	e7f4      	b.n	21050 <smp_create_pdu.constprop.0+0x2a>

00021066 <send_pairing_rsp>:
{
   21066:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   21068:	2102      	movs	r1, #2
{
   2106a:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2106c:	f7ff ffdb 	bl	21026 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   21070:	4604      	mov	r4, r0
   21072:	b178      	cbz	r0, 21094 <send_pairing_rsp+0x2e>
   21074:	2106      	movs	r1, #6
   21076:	3008      	adds	r0, #8
   21078:	f000 fb08 	bl	2168c <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   2107c:	2206      	movs	r2, #6
   2107e:	f105 01d1 	add.w	r1, r5, #209	; 0xd1
   21082:	f7fe fa29 	bl	1f4d8 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   21086:	4628      	mov	r0, r5
   21088:	2200      	movs	r2, #0
   2108a:	4621      	mov	r1, r4
   2108c:	f7eb fd26 	bl	cadc <smp_send.constprop.0>
	return 0;
   21090:	2000      	movs	r0, #0
}
   21092:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   21094:	2008      	movs	r0, #8
   21096:	e7fc      	b.n	21092 <send_pairing_rsp+0x2c>

00021098 <smp_send_pairing_random>:
{
   21098:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2109a:	2104      	movs	r1, #4
{
   2109c:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2109e:	f7ff ffc2 	bl	21026 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   210a2:	4604      	mov	r4, r0
   210a4:	b178      	cbz	r0, 210c6 <smp_send_pairing_random+0x2e>
   210a6:	2110      	movs	r1, #16
   210a8:	3008      	adds	r0, #8
   210aa:	f000 faef 	bl	2168c <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   210ae:	2210      	movs	r2, #16
   210b0:	f105 01e7 	add.w	r1, r5, #231	; 0xe7
   210b4:	f7fe fa10 	bl	1f4d8 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   210b8:	4628      	mov	r0, r5
   210ba:	2200      	movs	r2, #0
   210bc:	4621      	mov	r1, r4
   210be:	f7eb fd0d 	bl	cadc <smp_send.constprop.0>
	return 0;
   210c2:	2000      	movs	r0, #0
}
   210c4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   210c6:	2008      	movs	r0, #8
   210c8:	e7fc      	b.n	210c4 <smp_send_pairing_random+0x2c>

000210ca <smp_dhkey_check>:
{
   210ca:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   210cc:	6803      	ldr	r3, [r0, #0]
   210ce:	78db      	ldrb	r3, [r3, #3]
   210d0:	2b01      	cmp	r3, #1
{
   210d2:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   210d4:	d115      	bne.n	21102 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   210d6:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   210d8:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
   210dc:	2110      	movs	r1, #16
   210de:	4628      	mov	r0, r5
   210e0:	f7ff fea5 	bl	20e2e <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   210e4:	4631      	mov	r1, r6
   210e6:	2210      	movs	r2, #16
   210e8:	f204 1077 	addw	r0, r4, #375	; 0x177
   210ec:	f7fe f9f4 	bl	1f4d8 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   210f0:	2107      	movs	r1, #7
   210f2:	4628      	mov	r0, r5
   210f4:	f7ff ff69 	bl	20fca <atomic_test_bit>
   210f8:	b128      	cbz	r0, 21106 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   210fa:	2109      	movs	r1, #9
   210fc:	4628      	mov	r0, r5
   210fe:	f7ff ff4c 	bl	20f9a <atomic_set_bit>
}
   21102:	2000      	movs	r0, #0
   21104:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   21106:	210a      	movs	r1, #10
   21108:	4628      	mov	r0, r5
   2110a:	f7ff ff5e 	bl	20fca <atomic_test_bit>
   2110e:	2800      	cmp	r0, #0
   21110:	d1f3      	bne.n	210fa <smp_dhkey_check+0x30>
		return compute_and_check_and_send_slave_dhcheck(smp);
   21112:	4620      	mov	r0, r4
}
   21114:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   21118:	f7ec b8da 	b.w	d2d0 <compute_and_check_and_send_slave_dhcheck>

0002111c <atomic_test_and_clear_bit>:
{
   2111c:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2111e:	2301      	movs	r3, #1
   21120:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   21124:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21126:	f3bf 8f5b 	dmb	ish
   2112a:	e850 3f00 	ldrex	r3, [r0]
   2112e:	ea03 0c02 	and.w	ip, r3, r2
   21132:	e840 ce00 	strex	lr, ip, [r0]
   21136:	f1be 0f00 	cmp.w	lr, #0
   2113a:	d1f6      	bne.n	2112a <atomic_test_and_clear_bit+0xe>
   2113c:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   21140:	420b      	tst	r3, r1
}
   21142:	bf14      	ite	ne
   21144:	2001      	movne	r0, #1
   21146:	2000      	moveq	r0, #0
   21148:	f85d fb04 	ldr.w	pc, [sp], #4

0002114c <smp_reset>:
{
   2114c:	b510      	push	{r4, lr}
   2114e:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   21150:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   21154:	f7ff ff18 	bl	20f88 <k_delayed_work_cancel.isra.0>
	smp->method = JUST_WORKS;
   21158:	2300      	movs	r3, #0
   2115a:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	atomic_set(smp->allowed_cmds, 0);
   2115e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   21162:	f3bf 8f5b 	dmb	ish
   21166:	e850 2f00 	ldrex	r2, [r0]
   2116a:	e840 3100 	strex	r1, r3, [r0]
   2116e:	2900      	cmp	r1, #0
   21170:	d1f9      	bne.n	21166 <smp_reset+0x1a>
   21172:	f3bf 8f5b 	dmb	ish
   21176:	f3bf 8f5b 	dmb	ish
   2117a:	34c4      	adds	r4, #196	; 0xc4
   2117c:	e854 2f00 	ldrex	r2, [r4]
   21180:	e844 3100 	strex	r1, r3, [r4]
   21184:	2900      	cmp	r1, #0
   21186:	d1f9      	bne.n	2117c <smp_reset+0x30>
   21188:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2118c:	2101      	movs	r1, #1
}
   2118e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   21192:	f7ff bf02 	b.w	20f9a <atomic_set_bit>

00021196 <smp_c1>:
{
   21196:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2119a:	b089      	sub	sp, #36	; 0x24
   2119c:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   211a0:	4699      	mov	r9, r3
	p1[0] = ia->type;
   211a2:	783b      	ldrb	r3, [r7, #0]
{
   211a4:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   211a6:	f88d 3000 	strb.w	r3, [sp]
{
   211aa:	460c      	mov	r4, r1
	p1[1] = ra->type;
   211ac:	f898 3000 	ldrb.w	r3, [r8]
   211b0:	f88d 3001 	strb.w	r3, [sp, #1]
{
   211b4:	4611      	mov	r1, r2
   211b6:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   211b8:	2207      	movs	r2, #7
   211ba:	f10d 0002 	add.w	r0, sp, #2
   211be:	f7fe f98b 	bl	1f4d8 <memcpy>
	memcpy(p1 + 9, pres, 7);
   211c2:	2207      	movs	r2, #7
   211c4:	4649      	mov	r1, r9
   211c6:	f10d 0009 	add.w	r0, sp, #9
   211ca:	f7fe f985 	bl	1f4d8 <memcpy>
	while (len--) {
   211ce:	f104 0010 	add.w	r0, r4, #16
   211d2:	4629      	mov	r1, r5
   211d4:	466a      	mov	r2, sp
   211d6:	42a0      	cmp	r0, r4
   211d8:	d127      	bne.n	2122a <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   211da:	462a      	mov	r2, r5
   211dc:	4629      	mov	r1, r5
   211de:	4630      	mov	r0, r6
   211e0:	f7ef ff9e 	bl	11120 <bt_encrypt_le>
	if (err) {
   211e4:	4604      	mov	r4, r0
   211e6:	b9e0      	cbnz	r0, 21222 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   211e8:	2206      	movs	r2, #6
   211ea:	f108 0101 	add.w	r1, r8, #1
   211ee:	a804      	add	r0, sp, #16
   211f0:	f7fe f972 	bl	1f4d8 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   211f4:	2206      	movs	r2, #6
   211f6:	1c79      	adds	r1, r7, #1
   211f8:	f10d 0016 	add.w	r0, sp, #22
   211fc:	f7fe f96c 	bl	1f4d8 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   21200:	2204      	movs	r2, #4
   21202:	4621      	mov	r1, r4
   21204:	a807      	add	r0, sp, #28
   21206:	f7fe f992 	bl	1f52e <memset>
	while (len--) {
   2120a:	f105 0010 	add.w	r0, r5, #16
   2120e:	462a      	mov	r2, r5
   21210:	ab04      	add	r3, sp, #16
   21212:	4282      	cmp	r2, r0
   21214:	d112      	bne.n	2123c <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   21216:	462a      	mov	r2, r5
   21218:	4629      	mov	r1, r5
   2121a:	4630      	mov	r0, r6
   2121c:	f7ef ff80 	bl	11120 <bt_encrypt_le>
   21220:	4604      	mov	r4, r0
}
   21222:	4620      	mov	r0, r4
   21224:	b009      	add	sp, #36	; 0x24
   21226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   2122a:	f814 3b01 	ldrb.w	r3, [r4], #1
   2122e:	f812 cb01 	ldrb.w	ip, [r2], #1
   21232:	ea83 030c 	eor.w	r3, r3, ip
   21236:	f801 3b01 	strb.w	r3, [r1], #1
   2123a:	e7cc      	b.n	211d6 <smp_c1+0x40>
   2123c:	f812 1b01 	ldrb.w	r1, [r2], #1
   21240:	f813 4b01 	ldrb.w	r4, [r3], #1
   21244:	4061      	eors	r1, r4
   21246:	f802 1c01 	strb.w	r1, [r2, #-1]
   2124a:	e7e2      	b.n	21212 <smp_c1+0x7c>

0002124c <legacy_pairing_confirm>:
{
   2124c:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2124e:	f100 07c4 	add.w	r7, r0, #196	; 0xc4
{
   21252:	b085      	sub	sp, #20
   21254:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   21256:	210a      	movs	r1, #10
   21258:	4638      	mov	r0, r7
   2125a:	f7ff feb6 	bl	20fca <atomic_test_bit>
   2125e:	bb90      	cbnz	r0, 212c6 <legacy_pairing_confirm+0x7a>
			atomic_set_bit(smp->allowed_cmds,
   21260:	2104      	movs	r1, #4
   21262:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   21266:	f7ff fe98 	bl	20f9a <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2126a:	2103      	movs	r1, #3
   2126c:	4628      	mov	r0, r5
	struct bt_conn *conn = smp->chan.chan.conn;
   2126e:	682c      	ldr	r4, [r5, #0]
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   21270:	f7ff fed9 	bl	21026 <smp_create_pdu.constprop.0>
	if (!buf) {
   21274:	4606      	mov	r6, r0
   21276:	b1c0      	cbz	r0, 212aa <legacy_pairing_confirm+0x5e>
   21278:	2110      	movs	r1, #16
   2127a:	3008      	adds	r0, #8
   2127c:	f000 fa06 	bl	2168c <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   21280:	f104 0396 	add.w	r3, r4, #150	; 0x96
   21284:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   21286:	9002      	str	r0, [sp, #8]
   21288:	9301      	str	r3, [sp, #4]
   2128a:	9400      	str	r4, [sp, #0]
   2128c:	f105 03d0 	add.w	r3, r5, #208	; 0xd0
   21290:	f105 02c9 	add.w	r2, r5, #201	; 0xc9
   21294:	f105 01e7 	add.w	r1, r5, #231	; 0xe7
   21298:	f205 1007 	addw	r0, r5, #263	; 0x107
   2129c:	f7ff ff7b 	bl	21196 <smp_c1>
   212a0:	4604      	mov	r4, r0
   212a2:	b120      	cbz	r0, 212ae <legacy_pairing_confirm+0x62>
		net_buf_unref(buf);
   212a4:	4630      	mov	r0, r6
   212a6:	f7f8 feb7 	bl	1a018 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   212aa:	2008      	movs	r0, #8
   212ac:	e009      	b.n	212c2 <legacy_pairing_confirm+0x76>
	smp_send(smp, buf, NULL, NULL);
   212ae:	4602      	mov	r2, r0
   212b0:	4631      	mov	r1, r6
   212b2:	4628      	mov	r0, r5
   212b4:	f7eb fc12 	bl	cadc <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   212b8:	4621      	mov	r1, r4
   212ba:	4638      	mov	r0, r7
   212bc:	f7ff fdb7 	bl	20e2e <atomic_clear_bit>
	return 0;
   212c0:	2000      	movs	r0, #0
}
   212c2:	b005      	add	sp, #20
   212c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   212c6:	2100      	movs	r1, #0
   212c8:	4638      	mov	r0, r7
   212ca:	f7ff fe66 	bl	20f9a <atomic_set_bit>
   212ce:	e7f7      	b.n	212c0 <legacy_pairing_confirm+0x74>

000212d0 <bt_smp_request_ltk>:
{
   212d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   212d4:	b085      	sub	sp, #20
   212d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   212da:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   212de:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   212e0:	f7eb fba4 	bl	ca2c <smp_chan_get>
	if (!smp) {
   212e4:	4605      	mov	r5, r0
   212e6:	2800      	cmp	r0, #0
   212e8:	f000 8094 	beq.w	21414 <bt_smp_request_ltk+0x144>
	if (ediv == 0U && rand == 0U &&
   212ec:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   212f0:	f100 07c4 	add.w	r7, r0, #196	; 0xc4
	if (ediv == 0U && rand == 0U &&
   212f4:	f1b9 0f00 	cmp.w	r9, #0
   212f8:	d12c      	bne.n	21354 <bt_smp_request_ltk+0x84>
   212fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   212fe:	4313      	orrs	r3, r2
   21300:	d128      	bne.n	21354 <bt_smp_request_ltk+0x84>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   21302:	2103      	movs	r1, #3
   21304:	4638      	mov	r0, r7
   21306:	f7ff fe60 	bl	20fca <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2130a:	b318      	cbz	r0, 21354 <bt_smp_request_ltk+0x84>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2130c:	2101      	movs	r1, #1
   2130e:	4638      	mov	r0, r7
   21310:	f7ff fe5b 	bl	20fca <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   21314:	4606      	mov	r6, r0
   21316:	b1e8      	cbz	r0, 21354 <bt_smp_request_ltk+0x84>
	return MIN(req->max_key_size, rsp->max_key_size);
   21318:	f895 40d4 	ldrb.w	r4, [r5, #212]	; 0xd4
   2131c:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
   21320:	429c      	cmp	r4, r3
   21322:	bf28      	it	cs
   21324:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   21326:	4622      	mov	r2, r4
   21328:	f205 1107 	addw	r1, r5, #263	; 0x107
   2132c:	4640      	mov	r0, r8
   2132e:	f7fe f8d3 	bl	1f4d8 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   21332:	2c0f      	cmp	r4, #15
   21334:	d806      	bhi.n	21344 <bt_smp_request_ltk+0x74>
			(void)memset(ltk + enc_size, 0,
   21336:	f1c4 0210 	rsb	r2, r4, #16
   2133a:	4649      	mov	r1, r9
   2133c:	eb08 0004 	add.w	r0, r8, r4
   21340:	f7fe f8f5 	bl	1f52e <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   21344:	2101      	movs	r1, #1
   21346:	4638      	mov	r0, r7
   21348:	f7ff fe27 	bl	20f9a <atomic_set_bit>
}
   2134c:	4630      	mov	r0, r6
   2134e:	b005      	add	sp, #20
   21350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   21354:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   21358:	b983      	cbnz	r3, 2137c <bt_smp_request_ltk+0xac>
					     &conn->le.dst);
   2135a:	f104 0288 	add.w	r2, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2135e:	7a21      	ldrb	r1, [r4, #8]
   21360:	9201      	str	r2, [sp, #4]
   21362:	2020      	movs	r0, #32
   21364:	f7ec ff92 	bl	e28c <bt_keys_find>
		if (!conn->le.keys) {
   21368:	9a01      	ldr	r2, [sp, #4]
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2136a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   2136e:	b928      	cbnz	r0, 2137c <bt_smp_request_ltk+0xac>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   21370:	7a21      	ldrb	r1, [r4, #8]
   21372:	2001      	movs	r0, #1
   21374:	f7ec ff8a 	bl	e28c <bt_keys_find>
   21378:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   2137c:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   21380:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   21384:	b9ee      	cbnz	r6, 213c2 <bt_smp_request_ltk+0xf2>
   21386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2138a:	4313      	orrs	r3, r2
   2138c:	d119      	bne.n	213c2 <bt_smp_request_ltk+0xf2>
   2138e:	b390      	cbz	r0, 213f6 <bt_smp_request_ltk+0x126>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   21390:	89c3      	ldrh	r3, [r0, #14]
   21392:	069a      	lsls	r2, r3, #26
   21394:	d516      	bpl.n	213c4 <bt_smp_request_ltk+0xf4>
		enc_size = conn->le.keys->enc_size;
   21396:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   21398:	f100 011a 	add.w	r1, r0, #26
   2139c:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   2139e:	4640      	mov	r0, r8
   213a0:	f7fe f89a 	bl	1f4d8 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   213a4:	2c0f      	cmp	r4, #15
   213a6:	d806      	bhi.n	213b6 <bt_smp_request_ltk+0xe6>
			(void)memset(ltk + enc_size, 0,
   213a8:	f1c4 0210 	rsb	r2, r4, #16
   213ac:	4631      	mov	r1, r6
   213ae:	eb08 0004 	add.w	r0, r8, r4
   213b2:	f7fe f8bc 	bl	1f52e <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   213b6:	2101      	movs	r1, #1
   213b8:	4638      	mov	r0, r7
   213ba:	f7ff fdee 	bl	20f9a <atomic_set_bit>
		return true;
   213be:	2601      	movs	r6, #1
   213c0:	e7c4      	b.n	2134c <bt_smp_request_ltk+0x7c>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   213c2:	b1c0      	cbz	r0, 213f6 <bt_smp_request_ltk+0x126>
   213c4:	89c3      	ldrh	r3, [r0, #14]
   213c6:	07db      	lsls	r3, r3, #31
   213c8:	d515      	bpl.n	213f6 <bt_smp_request_ltk+0x126>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   213ca:	2208      	movs	r2, #8
   213cc:	eb0d 0102 	add.w	r1, sp, r2
   213d0:	3040      	adds	r0, #64	; 0x40
   213d2:	f7fe f870 	bl	1f4b6 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   213d6:	b970      	cbnz	r0, 213f6 <bt_smp_request_ltk+0x126>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   213d8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   213dc:	2202      	movs	r2, #2
   213de:	a90c      	add	r1, sp, #48	; 0x30
   213e0:	3048      	adds	r0, #72	; 0x48
   213e2:	f7fe f868 	bl	1f4b6 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   213e6:	4606      	mov	r6, r0
   213e8:	b928      	cbnz	r0, 213f6 <bt_smp_request_ltk+0x126>
		enc_size = conn->le.keys->enc_size;
   213ea:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   213ee:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   213f0:	314a      	adds	r1, #74	; 0x4a
   213f2:	4622      	mov	r2, r4
   213f4:	e7d3      	b.n	2139e <bt_smp_request_ltk+0xce>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   213f6:	210f      	movs	r1, #15
   213f8:	4638      	mov	r0, r7
   213fa:	f7ff fde6 	bl	20fca <atomic_test_bit>
   213fe:	b120      	cbz	r0, 2140a <bt_smp_request_ltk+0x13a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   21400:	2202      	movs	r2, #2
   21402:	2106      	movs	r1, #6
   21404:	4620      	mov	r0, r4
   21406:	f7e8 ff43 	bl	a290 <bt_conn_security_changed>
	smp_reset(smp);
   2140a:	4628      	mov	r0, r5
   2140c:	f7ff fe9e 	bl	2114c <smp_reset>
	return false;
   21410:	2600      	movs	r6, #0
   21412:	e79b      	b.n	2134c <bt_smp_request_ltk+0x7c>
		return false;
   21414:	4606      	mov	r6, r0
   21416:	e799      	b.n	2134c <bt_smp_request_ltk+0x7c>

00021418 <bt_smp_sign>:
   21418:	f06f 0022 	mvn.w	r0, #34	; 0x22
   2141c:	4770      	bx	lr

0002141e <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2141e:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
{
   21422:	b573      	push	{r0, r1, r4, r5, r6, lr}
   21424:	4605      	mov	r5, r0
   21426:	460c      	mov	r4, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   21428:	4618      	mov	r0, r3
   2142a:	2103      	movs	r1, #3
   2142c:	f7ff fdcd 	bl	20fca <atomic_test_bit>
   21430:	b1c8      	cbz	r0, 21466 <smp_error+0x48>
		smp_pairing_complete(smp, reason);
   21432:	4621      	mov	r1, r4
   21434:	4628      	mov	r0, r5
   21436:	f7ec fabb 	bl	d9b0 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   2143a:	2105      	movs	r1, #5
   2143c:	4628      	mov	r0, r5
   2143e:	f7ff fdf2 	bl	21026 <smp_create_pdu.constprop.0>
	if (!buf) {
   21442:	4606      	mov	r6, r0
   21444:	b1e0      	cbz	r0, 21480 <smp_error+0x62>
   21446:	2101      	movs	r1, #1
   21448:	3008      	adds	r0, #8
   2144a:	f000 f91f 	bl	2168c <net_buf_simple_add>
	rsp->reason = reason;
   2144e:	7004      	strb	r4, [r0, #0]
   21450:	2400      	movs	r4, #0
   21452:	6828      	ldr	r0, [r5, #0]
   21454:	9400      	str	r4, [sp, #0]
   21456:	4623      	mov	r3, r4
   21458:	4632      	mov	r2, r6
   2145a:	2106      	movs	r1, #6
   2145c:	f7fe fe3a 	bl	200d4 <bt_l2cap_send_cb>
	return 0;
   21460:	4620      	mov	r0, r4
}
   21462:	b002      	add	sp, #8
   21464:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   21466:	2101      	movs	r1, #1
   21468:	4618      	mov	r0, r3
   2146a:	f7ff fdae 	bl	20fca <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2146e:	2800      	cmp	r0, #0
   21470:	d1df      	bne.n	21432 <smp_error+0x14>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   21472:	210f      	movs	r1, #15
   21474:	4618      	mov	r0, r3
   21476:	f7ff fda8 	bl	20fca <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2147a:	2800      	cmp	r0, #0
   2147c:	d1d9      	bne.n	21432 <smp_error+0x14>
   2147e:	e7dc      	b.n	2143a <smp_error+0x1c>
		return -ENOBUFS;
   21480:	f06f 0036 	mvn.w	r0, #54	; 0x36
   21484:	e7ed      	b.n	21462 <smp_error+0x44>

00021486 <bt_smp_dhkey_ready>:
{
   21486:	b570      	push	{r4, r5, r6, lr}
   21488:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2148a:	2008      	movs	r0, #8
   2148c:	f7eb fb82 	bl	cb94 <smp_find>
	if (smp) {
   21490:	4604      	mov	r4, r0
   21492:	b1c0      	cbz	r0, 214c6 <bt_smp_dhkey_ready+0x40>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   21494:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
   21498:	2108      	movs	r1, #8
   2149a:	4628      	mov	r0, r5
   2149c:	f7ff fcc7 	bl	20e2e <atomic_clear_bit>
	if (!dhkey) {
   214a0:	b38e      	cbz	r6, 21506 <bt_smp_dhkey_ready+0x80>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   214a2:	2107      	movs	r1, #7
   214a4:	f7ff fcc3 	bl	20e2e <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, 32);
   214a8:	4631      	mov	r1, r6
   214aa:	2220      	movs	r2, #32
   214ac:	f204 1057 	addw	r0, r4, #343	; 0x157
   214b0:	f7fe f812 	bl	1f4d8 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   214b4:	210a      	movs	r1, #10
   214b6:	4628      	mov	r0, r5
   214b8:	f7ff fd87 	bl	20fca <atomic_test_bit>
   214bc:	b168      	cbz	r0, 214da <bt_smp_dhkey_ready+0x54>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   214be:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   214c0:	4628      	mov	r0, r5
   214c2:	f7ff fd6a 	bl	20f9a <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   214c6:	2007      	movs	r0, #7
   214c8:	f7eb fb64 	bl	cb94 <smp_find>
		if (smp) {
   214cc:	4604      	mov	r4, r0
   214ce:	b118      	cbz	r0, 214d8 <bt_smp_dhkey_ready+0x52>
			err = smp_dhkey_generate(smp);
   214d0:	f7eb fb3a 	bl	cb48 <smp_dhkey_generate>
			if (err) {
   214d4:	4601      	mov	r1, r0
   214d6:	b990      	cbnz	r0, 214fe <bt_smp_dhkey_ready+0x78>
}
   214d8:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   214da:	2110      	movs	r1, #16
   214dc:	4628      	mov	r0, r5
   214de:	f7ff fd74 	bl	20fca <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   214e2:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   214e4:	2800      	cmp	r0, #0
   214e6:	d1eb      	bne.n	214c0 <bt_smp_dhkey_ready+0x3a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   214e8:	4628      	mov	r0, r5
   214ea:	f7ff fd6e 	bl	20fca <atomic_test_bit>
   214ee:	2800      	cmp	r0, #0
   214f0:	d0e9      	beq.n	214c6 <bt_smp_dhkey_ready+0x40>
		return  compute_and_check_and_send_slave_dhcheck(smp);
   214f2:	4620      	mov	r0, r4
   214f4:	f7eb feec 	bl	d2d0 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
   214f8:	4601      	mov	r1, r0
   214fa:	2800      	cmp	r0, #0
   214fc:	d0e3      	beq.n	214c6 <bt_smp_dhkey_ready+0x40>
			smp_error(smp, err);
   214fe:	4620      	mov	r0, r4
   21500:	f7ff ff8d 	bl	2141e <smp_error>
   21504:	e7df      	b.n	214c6 <bt_smp_dhkey_ready+0x40>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   21506:	210b      	movs	r1, #11
   21508:	e7f9      	b.n	214fe <bt_smp_dhkey_ready+0x78>

0002150a <bt_smp_disconnected>:
{
   2150a:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   2150c:	6803      	ldr	r3, [r0, #0]
{
   2150e:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   21510:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
	struct bt_keys *keys = chan->conn->le.keys;
   21514:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	k_delayed_work_cancel(&smp->work);
   21518:	f7ff fd36 	bl	20f88 <k_delayed_work_cancel.isra.0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2151c:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
   21520:	2103      	movs	r1, #3
   21522:	4618      	mov	r0, r3
   21524:	f7ff fd51 	bl	20fca <atomic_test_bit>
   21528:	b1a0      	cbz	r0, 21554 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2152a:	2108      	movs	r1, #8
   2152c:	4620      	mov	r0, r4
   2152e:	f7ec fa3f 	bl	d9b0 <smp_pairing_complete>
	if (keys) {
   21532:	b13d      	cbz	r5, 21544 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   21534:	89eb      	ldrh	r3, [r5, #14]
   21536:	b113      	cbz	r3, 2153e <bt_smp_disconnected+0x34>
   21538:	7b6b      	ldrb	r3, [r5, #13]
   2153a:	079b      	lsls	r3, r3, #30
   2153c:	d502      	bpl.n	21544 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   2153e:	4628      	mov	r0, r5
   21540:	f000 f83e 	bl	215c0 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   21544:	4620      	mov	r0, r4
   21546:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
}
   2154a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   2154e:	2100      	movs	r1, #0
   21550:	f7fd bfed 	b.w	1f52e <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   21554:	2101      	movs	r1, #1
   21556:	4618      	mov	r0, r3
   21558:	f7ff fd37 	bl	20fca <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2155c:	2800      	cmp	r0, #0
   2155e:	d1e4      	bne.n	2152a <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   21560:	210f      	movs	r1, #15
   21562:	4618      	mov	r0, r3
   21564:	f7ff fd31 	bl	20fca <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   21568:	2800      	cmp	r0, #0
   2156a:	d1de      	bne.n	2152a <bt_smp_disconnected+0x20>
   2156c:	e7e1      	b.n	21532 <bt_smp_disconnected+0x28>

0002156e <smp_ident_sent>:
{
   2156e:	b508      	push	{r3, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   21570:	7883      	ldrb	r3, [r0, #2]
   21572:	2b01      	cmp	r3, #1
   21574:	d10f      	bne.n	21596 <smp_ident_sent+0x28>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   21576:	2106      	movs	r1, #6
   21578:	f7fe fdc5 	bl	20106 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   2157c:	f890 21a8 	ldrb.w	r2, [r0, #424]	; 0x1a8
   21580:	f022 0201 	bic.w	r2, r2, #1
   21584:	f880 21a8 	strb.w	r2, [r0, #424]	; 0x1a8
		if (!smp->local_dist && !smp->remote_dist) {
   21588:	f8b0 11a8 	ldrh.w	r1, [r0, #424]	; 0x1a8
   2158c:	b919      	cbnz	r1, 21596 <smp_ident_sent+0x28>
}
   2158e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   21592:	f7ec ba0d 	b.w	d9b0 <smp_pairing_complete>
}
   21596:	bd08      	pop	{r3, pc}

00021598 <bt_keys_get_type>:
{
   21598:	b570      	push	{r4, r5, r6, lr}
   2159a:	4604      	mov	r4, r0
   2159c:	460d      	mov	r5, r1
   2159e:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   215a0:	f7ec fe74 	bl	e28c <bt_keys_find>
	if (keys) {
   215a4:	b938      	cbnz	r0, 215b6 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   215a6:	4631      	mov	r1, r6
   215a8:	4628      	mov	r0, r5
   215aa:	f7ec fe37 	bl	e21c <bt_keys_get_addr>
	if (!keys) {
   215ae:	b110      	cbz	r0, 215b6 <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   215b0:	89c3      	ldrh	r3, [r0, #14]
   215b2:	431c      	orrs	r4, r3
   215b4:	81c4      	strh	r4, [r0, #14]
}
   215b6:	bd70      	pop	{r4, r5, r6, pc}

000215b8 <bt_keys_add_type>:
	keys->keys |= type;
   215b8:	89c3      	ldrh	r3, [r0, #14]
   215ba:	4319      	orrs	r1, r3
   215bc:	81c1      	strh	r1, [r0, #14]
}
   215be:	4770      	bx	lr

000215c0 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   215c0:	b510      	push	{r4, lr}
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   215c2:	7a03      	ldrb	r3, [r0, #8]
   215c4:	075b      	lsls	r3, r3, #29
{
   215c6:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   215c8:	d501      	bpl.n	215ce <bt_keys_clear+0xe>
		bt_id_del(keys);
   215ca:	f7e7 feed 	bl	93a8 <bt_id_del>

		BT_DBG("Deleting key %s", log_strdup(key));
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
   215ce:	4620      	mov	r0, r4
   215d0:	225c      	movs	r2, #92	; 0x5c
}
   215d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(keys, 0, sizeof(*keys));
   215d6:	2100      	movs	r1, #0
   215d8:	f7fd bfa9 	b.w	1f52e <memset>

000215dc <fixed_data_unref>:
}
   215dc:	4770      	bx	lr

000215de <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   215de:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   215e0:	6849      	ldr	r1, [r1, #4]
   215e2:	6809      	ldr	r1, [r1, #0]
   215e4:	f7f8 bc8a 	b.w	19efc <net_buf_alloc_len>

000215e8 <net_buf_get>:
{
   215e8:	b570      	push	{r4, r5, r6, lr}
   215ea:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   215ec:	f7fa fa38 	bl	1ba60 <z_impl_k_queue_get>
	if (!buf) {
   215f0:	4605      	mov	r5, r0
   215f2:	b128      	cbz	r0, 21600 <net_buf_get+0x18>
   215f4:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   215f6:	7963      	ldrb	r3, [r4, #5]
   215f8:	f013 0301 	ands.w	r3, r3, #1
   215fc:	d102      	bne.n	21604 <net_buf_get+0x1c>
	frag->frags = NULL;
   215fe:	6023      	str	r3, [r4, #0]
}
   21600:	4628      	mov	r0, r5
   21602:	bd70      	pop	{r4, r5, r6, pc}
   21604:	2300      	movs	r3, #0
   21606:	2200      	movs	r2, #0
   21608:	4630      	mov	r0, r6
   2160a:	f7fa fa29 	bl	1ba60 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   2160e:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   21610:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   21612:	f023 0301 	bic.w	r3, r3, #1
   21616:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   21618:	4604      	mov	r4, r0
   2161a:	e7ec      	b.n	215f6 <net_buf_get+0xe>

0002161c <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   2161c:	6883      	ldr	r3, [r0, #8]
   2161e:	4419      	add	r1, r3
   21620:	6001      	str	r1, [r0, #0]
}
   21622:	4770      	bx	lr

00021624 <net_buf_put>:
{
   21624:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   21626:	460a      	mov	r2, r1
   21628:	6814      	ldr	r4, [r2, #0]
   2162a:	b91c      	cbnz	r4, 21634 <net_buf_put+0x10>
}
   2162c:	f85d 4b04 	ldr.w	r4, [sp], #4
	k_fifo_put_list(fifo, buf, tail);
   21630:	f000 bab0 	b.w	21b94 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   21634:	7953      	ldrb	r3, [r2, #5]
   21636:	f043 0301 	orr.w	r3, r3, #1
   2163a:	7153      	strb	r3, [r2, #5]
   2163c:	4622      	mov	r2, r4
   2163e:	e7f3      	b.n	21628 <net_buf_put+0x4>

00021640 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   21640:	7902      	ldrb	r2, [r0, #4]
   21642:	3201      	adds	r2, #1
   21644:	7102      	strb	r2, [r0, #4]
	return buf;
}
   21646:	4770      	bx	lr

00021648 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   21648:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2164a:	4618      	mov	r0, r3
   2164c:	681b      	ldr	r3, [r3, #0]
   2164e:	2b00      	cmp	r3, #0
   21650:	d1fb      	bne.n	2164a <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   21652:	4770      	bx	lr

00021654 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   21654:	6802      	ldr	r2, [r0, #0]
{
   21656:	b510      	push	{r4, lr}
	if (parent->frags) {
   21658:	b12a      	cbz	r2, 21666 <net_buf_frag_insert+0x12>
   2165a:	460b      	mov	r3, r1
	while (buf->frags) {
   2165c:	461c      	mov	r4, r3
   2165e:	681b      	ldr	r3, [r3, #0]
   21660:	2b00      	cmp	r3, #0
   21662:	d1fb      	bne.n	2165c <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   21664:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   21666:	6001      	str	r1, [r0, #0]
}
   21668:	bd10      	pop	{r4, pc}

0002166a <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2166a:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   2166c:	4604      	mov	r4, r0
   2166e:	b920      	cbnz	r0, 2167a <net_buf_frag_add+0x10>
	buf->ref++;
   21670:	790b      	ldrb	r3, [r1, #4]
   21672:	3301      	adds	r3, #1
   21674:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   21676:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   21678:	bd10      	pop	{r4, pc}
   2167a:	4603      	mov	r3, r0
	while (buf->frags) {
   2167c:	4618      	mov	r0, r3
   2167e:	681b      	ldr	r3, [r3, #0]
   21680:	2b00      	cmp	r3, #0
   21682:	d1fb      	bne.n	2167c <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   21684:	f7ff ffe6 	bl	21654 <net_buf_frag_insert>
   21688:	4620      	mov	r0, r4
   2168a:	e7f5      	b.n	21678 <net_buf_frag_add+0xe>

0002168c <net_buf_simple_add>:
	return buf->data + buf->len;
   2168c:	8883      	ldrh	r3, [r0, #4]
   2168e:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   21690:	4419      	add	r1, r3
   21692:	8081      	strh	r1, [r0, #4]
	return tail;
}
   21694:	18d0      	adds	r0, r2, r3
   21696:	4770      	bx	lr

00021698 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   21698:	b430      	push	{r4, r5}
   2169a:	8884      	ldrh	r4, [r0, #4]
   2169c:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   2169e:	18a3      	adds	r3, r4, r2
   216a0:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   216a2:	1928      	adds	r0, r5, r4
}
   216a4:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   216a6:	f7fd bf17 	b.w	1f4d8 <memcpy>

000216aa <net_buf_simple_add_u8>:
   216aa:	8883      	ldrh	r3, [r0, #4]
   216ac:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   216ae:	b510      	push	{r4, lr}
	buf->len += len;
   216b0:	1c5c      	adds	r4, r3, #1
   216b2:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   216b4:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   216b6:	18d0      	adds	r0, r2, r3
   216b8:	bd10      	pop	{r4, pc}

000216ba <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   216ba:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   216bc:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   216be:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   216c0:	4411      	add	r1, r2
	buf->data -= len;
   216c2:	6003      	str	r3, [r0, #0]
	buf->len += len;
   216c4:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   216c6:	4618      	mov	r0, r3
   216c8:	4770      	bx	lr

000216ca <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   216ca:	8883      	ldrh	r3, [r0, #4]
   216cc:	1a5b      	subs	r3, r3, r1
   216ce:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   216d0:	6803      	ldr	r3, [r0, #0]
   216d2:	4419      	add	r1, r3
   216d4:	6001      	str	r1, [r0, #0]
}
   216d6:	4608      	mov	r0, r1
   216d8:	4770      	bx	lr

000216da <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
	void *data = buf->data;
   216da:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   216dc:	8883      	ldrh	r3, [r0, #4]
   216de:	1a5b      	subs	r3, r3, r1
	buf->data += len;
   216e0:	4411      	add	r1, r2
	buf->len -= len;
   216e2:	8083      	strh	r3, [r0, #4]
	buf->data += len;
   216e4:	6001      	str	r1, [r0, #0]

	return data;
}
   216e6:	4610      	mov	r0, r2
   216e8:	4770      	bx	lr

000216ea <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   216ea:	b508      	push	{r3, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   216ec:	6803      	ldr	r3, [r0, #0]
   216ee:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   216f0:	2102      	movs	r1, #2
   216f2:	f7ff ffea 	bl	216ca <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   216f6:	4610      	mov	r0, r2
   216f8:	bd08      	pop	{r3, pc}

000216fa <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   216fa:	6802      	ldr	r2, [r0, #0]
   216fc:	6880      	ldr	r0, [r0, #8]
}
   216fe:	1a10      	subs	r0, r2, r0
   21700:	4770      	bx	lr

00021702 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   21702:	8883      	ldrh	r3, [r0, #4]
   21704:	88c2      	ldrh	r2, [r0, #6]
   21706:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   21708:	6803      	ldr	r3, [r0, #0]
   2170a:	6880      	ldr	r0, [r0, #8]
   2170c:	1a18      	subs	r0, r3, r0
}
   2170e:	1a10      	subs	r0, r2, r0
   21710:	4770      	bx	lr

00021712 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   21712:	f000 001f 	and.w	r0, r0, #31
   21716:	0080      	lsls	r0, r0, #2
   21718:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   2171c:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   21720:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   21724:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   21728:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
   2172c:	4770      	bx	lr

0002172e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2172e:	6843      	ldr	r3, [r0, #4]
   21730:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   21732:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   21736:	600b      	str	r3, [r1, #0]
}
   21738:	2000      	movs	r0, #0
   2173a:	4770      	bx	lr

0002173c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2173c:	6843      	ldr	r3, [r0, #4]
   2173e:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   21740:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   21744:	4042      	eors	r2, r0
   21746:	400a      	ands	r2, r1
   21748:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2174a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2174e:	2000      	movs	r0, #0
   21750:	4770      	bx	lr

00021752 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   21752:	6843      	ldr	r3, [r0, #4]
   21754:	685b      	ldr	r3, [r3, #4]
}
   21756:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   21758:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2175c:	4770      	bx	lr

0002175e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2175e:	6843      	ldr	r3, [r0, #4]
   21760:	685b      	ldr	r3, [r3, #4]
}
   21762:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   21764:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   21768:	4770      	bx	lr

0002176a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2176a:	6843      	ldr	r3, [r0, #4]
   2176c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2176e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   21772:	4059      	eors	r1, r3
    p_reg->OUT = value;
   21774:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   21778:	2000      	movs	r0, #0
   2177a:	4770      	bx	lr

0002177c <gpio_nrfx_manage_callback>:
	return port->data;
   2177c:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2177e:	6858      	ldr	r0, [r3, #4]
{
   21780:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   21782:	b158      	cbz	r0, 2179c <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21784:	2400      	movs	r4, #0
   21786:	4281      	cmp	r1, r0
   21788:	d112      	bne.n	217b0 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   2178a:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   2178c:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   2178e:	b954      	cbnz	r4, 217a6 <gpio_nrfx_manage_callback+0x2a>
   21790:	428d      	cmp	r5, r1
	list->head = node;
   21792:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   21794:	d100      	bne.n	21798 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   21796:	6098      	str	r0, [r3, #8]
	parent->next = child;
   21798:	2000      	movs	r0, #0
   2179a:	6008      	str	r0, [r1, #0]
	if (set) {
   2179c:	b96a      	cbnz	r2, 217ba <gpio_nrfx_manage_callback+0x3e>
	return 0;
   2179e:	2000      	movs	r0, #0
}
   217a0:	bd30      	pop	{r4, r5, pc}
   217a2:	4628      	mov	r0, r5
   217a4:	e7ef      	b.n	21786 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   217a6:	428d      	cmp	r5, r1
	parent->next = child;
   217a8:	6020      	str	r0, [r4, #0]
	list->tail = node;
   217aa:	bf08      	it	eq
   217ac:	609c      	streq	r4, [r3, #8]
}
   217ae:	e7f3      	b.n	21798 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   217b0:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   217b2:	4604      	mov	r4, r0
   217b4:	2d00      	cmp	r5, #0
   217b6:	d1f4      	bne.n	217a2 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   217b8:	b13a      	cbz	r2, 217ca <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   217ba:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   217bc:	685a      	ldr	r2, [r3, #4]
   217be:	600a      	str	r2, [r1, #0]
	list->head = node;
   217c0:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   217c2:	2800      	cmp	r0, #0
   217c4:	d1eb      	bne.n	2179e <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   217c6:	6099      	str	r1, [r3, #8]
}
   217c8:	e7ea      	b.n	217a0 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   217ca:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   217ce:	e7e7      	b.n	217a0 <gpio_nrfx_manage_callback+0x24>

000217d0 <gpio_pin_set.isra.0>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   217d0:	2301      	movs	r3, #1
   217d2:	fa03 f101 	lsl.w	r1, r3, r1
   217d6:	6903      	ldr	r3, [r0, #16]
   217d8:	681b      	ldr	r3, [r3, #0]
   217da:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   217dc:	bf18      	it	ne
   217de:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   217e2:	b112      	cbz	r2, 217ea <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
   217e4:	6883      	ldr	r3, [r0, #8]
   217e6:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   217e8:	4718      	bx	r3
   217ea:	6883      	ldr	r3, [r0, #8]
   217ec:	691b      	ldr	r3, [r3, #16]
   217ee:	e7fb      	b.n	217e8 <gpio_pin_set.isra.0+0x18>

000217f0 <_spi_context_cs_control>:
{
   217f0:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   217f2:	6805      	ldr	r5, [r0, #0]
{
   217f4:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   217f6:	b1fd      	cbz	r5, 21838 <_spi_context_cs_control+0x48>
   217f8:	68ab      	ldr	r3, [r5, #8]
   217fa:	b1eb      	cbz	r3, 21838 <_spi_context_cs_control+0x48>
   217fc:	6818      	ldr	r0, [r3, #0]
   217fe:	b1d8      	cbz	r0, 21838 <_spi_context_cs_control+0x48>
		if (on) {
   21800:	b151      	cbz	r1, 21818 <_spi_context_cs_control+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   21802:	7a19      	ldrb	r1, [r3, #8]
   21804:	2201      	movs	r2, #1
   21806:	f7ff ffe3 	bl	217d0 <gpio_pin_set.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   2180a:	6823      	ldr	r3, [r4, #0]
   2180c:	689b      	ldr	r3, [r3, #8]
   2180e:	6858      	ldr	r0, [r3, #4]
}
   21810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   21814:	f000 bb21 	b.w	21e5a <z_impl_k_busy_wait>
			if (!force_off &&
   21818:	b912      	cbnz	r2, 21820 <_spi_context_cs_control+0x30>
   2181a:	88aa      	ldrh	r2, [r5, #4]
   2181c:	0492      	lsls	r2, r2, #18
   2181e:	d40b      	bmi.n	21838 <_spi_context_cs_control+0x48>
			k_busy_wait(ctx->config->cs->delay);
   21820:	6858      	ldr	r0, [r3, #4]
   21822:	f000 fb1a 	bl	21e5a <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   21826:	6823      	ldr	r3, [r4, #0]
   21828:	689b      	ldr	r3, [r3, #8]
   2182a:	2200      	movs	r2, #0
   2182c:	7a19      	ldrb	r1, [r3, #8]
   2182e:	6818      	ldr	r0, [r3, #0]
}
   21830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   21834:	f7ff bfcc 	b.w	217d0 <gpio_pin_set.isra.0>
}
   21838:	bd38      	pop	{r3, r4, r5, pc}

0002183a <spi_context_unlock_unconditionally>:
{
   2183a:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   2183c:	2201      	movs	r2, #1
   2183e:	2100      	movs	r1, #0
{
   21840:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   21842:	f7ff ffd5 	bl	217f0 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   21846:	6923      	ldr	r3, [r4, #16]
   21848:	b933      	cbnz	r3, 21858 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   2184a:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   2184c:	f104 0008 	add.w	r0, r4, #8
}
   21850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21854:	f7fa bca4 	b.w	1c1a0 <z_impl_k_sem_give>
   21858:	bd10      	pop	{r4, pc}

0002185a <spi_nrfx_release>:
	return dev->data;
   2185a:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2185c:	6803      	ldr	r3, [r0, #0]
   2185e:	428b      	cmp	r3, r1
{
   21860:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   21862:	d106      	bne.n	21872 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   21864:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
   21868:	b934      	cbnz	r4, 21878 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   2186a:	f7ff ffe6 	bl	2183a <spi_context_unlock_unconditionally>
	return 0;
   2186e:	4620      	mov	r0, r4
}
   21870:	bd10      	pop	{r4, pc}
		return -EINVAL;
   21872:	f06f 0015 	mvn.w	r0, #21
   21876:	e7fb      	b.n	21870 <spi_nrfx_release+0x16>
		return -EBUSY;
   21878:	f06f 000f 	mvn.w	r0, #15
   2187c:	e7f8      	b.n	21870 <spi_nrfx_release+0x16>

0002187e <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   2187e:	6902      	ldr	r2, [r0, #16]
{
   21880:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   21882:	e892 0003 	ldmia.w	r2, {r0, r1}
   21886:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2188a:	2000      	movs	r0, #0
   2188c:	4770      	bx	lr

0002188e <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   2188e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   21892:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   21896:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   21898:	bf04      	itt	eq
   2189a:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
   2189e:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
   218a2:	1f83      	subs	r3, r0, #6
   218a4:	4258      	negs	r0, r3
   218a6:	4158      	adcs	r0, r3
   218a8:	4770      	bx	lr

000218aa <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   218aa:	4700      	bx	r0

000218ac <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   218ac:	f000 bad5 	b.w	21e5a <z_impl_k_busy_wait>

000218b0 <nrfx_clock_enable>:
{
   218b0:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   218b2:	2000      	movs	r0, #0
   218b4:	f7e5 fa46 	bl	6d44 <arch_irq_is_enabled>
   218b8:	b918      	cbnz	r0, 218c2 <nrfx_clock_enable+0x12>
}
   218ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   218be:	f7e5 ba1d 	b.w	6cfc <arch_irq_enable>
   218c2:	bd08      	pop	{r3, pc}

000218c4 <transfer_byte>:
{
   218c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   218c6:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   218ca:	698a      	ldr	r2, [r1, #24]
   218cc:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   218ce:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   218d2:	6a0b      	ldr	r3, [r1, #32]
   218d4:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   218d6:	bf3e      	ittt	cc
   218d8:	694a      	ldrcc	r2, [r1, #20]
   218da:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   218de:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   218e0:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
   218e2:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
   218e6:	1c53      	adds	r3, r2, #1
   218e8:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   218ea:	3202      	adds	r2, #2
    if (p_cb->abort)
   218ec:	b13c      	cbz	r4, 218fe <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   218ee:	690c      	ldr	r4, [r1, #16]
   218f0:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   218f2:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   218f4:	bf38      	it	cc
   218f6:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   218f8:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   218fa:	bf88      	it	hi
   218fc:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   218fe:	690d      	ldr	r5, [r1, #16]
   21900:	4295      	cmp	r5, r2
   21902:	d905      	bls.n	21910 <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   21904:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
   21906:	5c9b      	ldrb	r3, [r3, r2]
   21908:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   2190c:	2001      	movs	r0, #1
   2190e:	e00a      	b.n	21926 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   21910:	698c      	ldr	r4, [r1, #24]
   21912:	4294      	cmp	r4, r2
   21914:	d901      	bls.n	2191a <transfer_byte+0x56>
   21916:	7fcb      	ldrb	r3, [r1, #31]
   21918:	e7f6      	b.n	21908 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   2191a:	42ab      	cmp	r3, r5
   2191c:	d3f6      	bcc.n	2190c <transfer_byte+0x48>
   2191e:	42a3      	cmp	r3, r4
   21920:	bf2c      	ite	cs
   21922:	2000      	movcs	r0, #0
   21924:	2001      	movcc	r0, #1
}
   21926:	b003      	add	sp, #12
   21928:	bd30      	pop	{r4, r5, pc}

0002192a <z_device_state_init>:
}
   2192a:	4770      	bx	lr

0002192c <z_device_ready>:
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0U);
   2192c:	68c3      	ldr	r3, [r0, #12]
   2192e:	8818      	ldrh	r0, [r3, #0]
   21930:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
   21934:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   21938:	4258      	negs	r0, r3
   2193a:	4158      	adcs	r0, r3
   2193c:	4770      	bx	lr

0002193e <arch_system_halt>:
	__asm__ volatile(
   2193e:	f04f 0220 	mov.w	r2, #32
   21942:	f3ef 8311 	mrs	r3, BASEPRI
   21946:	f382 8811 	msr	BASEPRI, r2
   2194a:	f3bf 8f6f 	isb	sy
	for (;;) {
   2194e:	e7fe      	b.n	2194e <arch_system_halt+0x10>

00021950 <z_pm_save_idle_exit>:
{
   21950:	b508      	push	{r3, lr}
	pm_system_resume();
   21952:	f7e4 fc0b 	bl	616c <pm_system_resume>
}
   21956:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2195a:	f7fc bbf6 	b.w	1e14a <sys_clock_idle_exit>

0002195e <k_heap_init>:
{
   2195e:	b410      	push	{r4}
   21960:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   21964:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   21968:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   2196c:	f7fb beb5 	b.w	1d6da <sys_heap_init>

00021970 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   21970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21974:	b085      	sub	sp, #20
   21976:	4606      	mov	r6, r0
   21978:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2197a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   2197e:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   21980:	f000 fb87 	bl	22092 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   21984:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   21988:	4605      	mov	r5, r0
   2198a:	460f      	mov	r7, r1
   2198c:	f04f 0320 	mov.w	r3, #32
   21990:	f3ef 8411 	mrs	r4, BASEPRI
   21994:	f383 8811 	msr	BASEPRI, r3
   21998:	f3bf 8f6f 	isb	sy
		now = sys_clock_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2199c:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   219a0:	464a      	mov	r2, r9
   219a2:	4641      	mov	r1, r8
   219a4:	4630      	mov	r0, r6
   219a6:	f7fb fe1f 	bl	1d5e8 <sys_heap_aligned_alloc>
   219aa:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   219ac:	f7fa ff4e 	bl	1c84c <sys_clock_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   219b0:	9b03      	ldr	r3, [sp, #12]
   219b2:	b13b      	cbz	r3, 219c4 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   219b4:	f384 8811 	msr	BASEPRI, r4
   219b8:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   219bc:	4618      	mov	r0, r3
   219be:	b005      	add	sp, #20
   219c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   219c4:	1a28      	subs	r0, r5, r0
   219c6:	eb67 0101 	sbc.w	r1, r7, r1
   219ca:	2801      	cmp	r0, #1
   219cc:	f171 0200 	sbcs.w	r2, r1, #0
   219d0:	dbf0      	blt.n	219b4 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   219d2:	e9cd 0100 	strd	r0, r1, [sp]
   219d6:	465a      	mov	r2, fp
   219d8:	4621      	mov	r1, r4
   219da:	4650      	mov	r0, sl
   219dc:	f7fa f93c 	bl	1bc58 <z_pend_curr>
	__asm__ volatile(
   219e0:	f04f 0320 	mov.w	r3, #32
   219e4:	f3ef 8411 	mrs	r4, BASEPRI
   219e8:	f383 8811 	msr	BASEPRI, r3
   219ec:	f3bf 8f6f 	isb	sy
   219f0:	e7d6      	b.n	219a0 <k_heap_aligned_alloc+0x30>

000219f2 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   219f2:	b538      	push	{r3, r4, r5, lr}
   219f4:	4604      	mov	r4, r0
   219f6:	f04f 0320 	mov.w	r3, #32
   219fa:	f3ef 8511 	mrs	r5, BASEPRI
   219fe:	f383 8811 	msr	BASEPRI, r3
   21a02:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   21a06:	f7fb fd9f 	bl	1d548 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   21a0a:	f104 000c 	add.w	r0, r4, #12
   21a0e:	f000 f9e1 	bl	21dd4 <z_unpend_all>
   21a12:	b130      	cbz	r0, 21a22 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   21a14:	4629      	mov	r1, r5
   21a16:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   21a1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   21a1e:	f7fa b899 	b.w	1bb54 <z_reschedule>
	__asm__ volatile(
   21a22:	f385 8811 	msr	BASEPRI, r5
   21a26:	f3bf 8f6f 	isb	sy
}
   21a2a:	bd38      	pop	{r3, r4, r5, pc}

00021a2c <k_mem_slab_init>:
{
   21a2c:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   21a2e:	2400      	movs	r4, #0
   21a30:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   21a32:	ea41 0402 	orr.w	r4, r1, r2
   21a36:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   21a3a:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   21a3e:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   21a40:	d10c      	bne.n	21a5c <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   21a42:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   21a44:	42a3      	cmp	r3, r4
   21a46:	d103      	bne.n	21a50 <k_mem_slab_init+0x24>
   21a48:	e9c0 0000 	strd	r0, r0, [r0]
}
   21a4c:	2000      	movs	r0, #0
}
   21a4e:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   21a50:	6945      	ldr	r5, [r0, #20]
   21a52:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   21a54:	3401      	adds	r4, #1
		slab->free_list = p;
   21a56:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   21a58:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   21a5a:	e7f3      	b.n	21a44 <k_mem_slab_init+0x18>
		return -EINVAL;
   21a5c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   21a60:	e7f5      	b.n	21a4e <k_mem_slab_init+0x22>

00021a62 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   21a62:	f990 300e 	ldrsb.w	r3, [r0, #14]
   21a66:	428b      	cmp	r3, r1
   21a68:	d001      	beq.n	21a6e <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   21a6a:	f7fa ba25 	b.w	1beb8 <z_set_prio>
}
   21a6e:	2000      	movs	r0, #0
   21a70:	4770      	bx	lr

00021a72 <queue_insert>:
{
   21a72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21a76:	4699      	mov	r9, r3
   21a78:	4604      	mov	r4, r0
   21a7a:	f89d 3020 	ldrb.w	r3, [sp, #32]
   21a7e:	460d      	mov	r5, r1
   21a80:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   21a82:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   21a86:	f04f 0220 	mov.w	r2, #32
   21a8a:	f3ef 8711 	mrs	r7, BASEPRI
   21a8e:	f382 8811 	msr	BASEPRI, r2
   21a92:	f3bf 8f6f 	isb	sy
	if (is_append) {
   21a96:	b103      	cbz	r3, 21a9a <queue_insert+0x28>
	return list->tail;
   21a98:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   21a9a:	4630      	mov	r0, r6
   21a9c:	f000 f982 	bl	21da4 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   21aa0:	b158      	cbz	r0, 21aba <queue_insert+0x48>
   21aa2:	2400      	movs	r4, #0
   21aa4:	67c4      	str	r4, [r0, #124]	; 0x7c
   21aa6:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   21aaa:	f000 f934 	bl	21d16 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   21aae:	4630      	mov	r0, r6
   21ab0:	4639      	mov	r1, r7
   21ab2:	f7fa f84f 	bl	1bb54 <z_reschedule>
	return 0;
   21ab6:	2000      	movs	r0, #0
   21ab8:	e00c      	b.n	21ad4 <queue_insert+0x62>
	if (alloc) {
   21aba:	f1b9 0f00 	cmp.w	r9, #0
   21abe:	d01b      	beq.n	21af8 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   21ac0:	2108      	movs	r1, #8
   21ac2:	f7fa ffd7 	bl	1ca74 <z_thread_aligned_alloc>
		if (anode == NULL) {
   21ac6:	b938      	cbnz	r0, 21ad8 <queue_insert+0x66>
	__asm__ volatile(
   21ac8:	f387 8811 	msr	BASEPRI, r7
   21acc:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   21ad0:	f06f 000b 	mvn.w	r0, #11
}
   21ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   21ad8:	2301      	movs	r3, #1
		anode->data = data;
   21ada:	f8c0 8004 	str.w	r8, [r0, #4]
   21ade:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21ae0:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   21ae2:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   21ae6:	b95d      	cbnz	r5, 21b00 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   21ae8:	6823      	ldr	r3, [r4, #0]
   21aea:	4313      	orrs	r3, r2
   21aec:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   21aee:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   21af0:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   21af2:	b973      	cbnz	r3, 21b12 <queue_insert+0xa0>
	list->tail = node;
   21af4:	6060      	str	r0, [r4, #4]
}
   21af6:	e00c      	b.n	21b12 <queue_insert+0xa0>
	node->next_and_flags = flags;
   21af8:	f8c8 9000 	str.w	r9, [r8]
}
   21afc:	4640      	mov	r0, r8
   21afe:	e7ef      	b.n	21ae0 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   21b00:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   21b02:	f033 0303 	bics.w	r3, r3, #3
   21b06:	d110      	bne.n	21b2a <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   21b08:	6002      	str	r2, [r0, #0]
	return list->tail;
   21b0a:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   21b0c:	b93a      	cbnz	r2, 21b1e <queue_insert+0xac>
	list->head = node;
   21b0e:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   21b12:	2104      	movs	r1, #4
   21b14:	f104 0010 	add.w	r0, r4, #16
   21b18:	f000 fc3d 	bl	22396 <z_handle_obj_poll_events>
   21b1c:	e7c7      	b.n	21aae <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21b1e:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   21b20:	f003 0303 	and.w	r3, r3, #3
   21b24:	4303      	orrs	r3, r0
   21b26:	6013      	str	r3, [r2, #0]
   21b28:	e7e4      	b.n	21af4 <queue_insert+0x82>
   21b2a:	4313      	orrs	r3, r2
   21b2c:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21b2e:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   21b30:	f003 0303 	and.w	r3, r3, #3
   21b34:	4303      	orrs	r3, r0
   21b36:	602b      	str	r3, [r5, #0]
}
   21b38:	e7eb      	b.n	21b12 <queue_insert+0xa0>

00021b3a <z_queue_node_peek>:
{
   21b3a:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   21b3c:	4604      	mov	r4, r0
   21b3e:	b130      	cbz	r0, 21b4e <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21b40:	6802      	ldr	r2, [r0, #0]
   21b42:	0793      	lsls	r3, r2, #30
   21b44:	d003      	beq.n	21b4e <z_queue_node_peek+0x14>
		ret = anode->data;
   21b46:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   21b48:	b109      	cbz	r1, 21b4e <z_queue_node_peek+0x14>
			k_free(anode);
   21b4a:	f000 fc32 	bl	223b2 <k_free>
}
   21b4e:	4620      	mov	r0, r4
   21b50:	bd10      	pop	{r4, pc}

00021b52 <z_impl_k_queue_init>:
	list->head = NULL;
   21b52:	2300      	movs	r3, #0
	list->tail = NULL;
   21b54:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   21b58:	f100 0308 	add.w	r3, r0, #8
   21b5c:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   21b60:	f100 0310 	add.w	r3, r0, #16
   21b64:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   21b68:	4770      	bx	lr

00021b6a <k_queue_append>:
{
   21b6a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   21b6c:	2301      	movs	r3, #1
   21b6e:	9300      	str	r3, [sp, #0]
   21b70:	2300      	movs	r3, #0
{
   21b72:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   21b74:	4619      	mov	r1, r3
   21b76:	f7ff ff7c 	bl	21a72 <queue_insert>
}
   21b7a:	b003      	add	sp, #12
   21b7c:	f85d fb04 	ldr.w	pc, [sp], #4

00021b80 <k_queue_prepend>:
{
   21b80:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   21b82:	2300      	movs	r3, #0
{
   21b84:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   21b86:	9300      	str	r3, [sp, #0]
   21b88:	4619      	mov	r1, r3
   21b8a:	f7ff ff72 	bl	21a72 <queue_insert>
}
   21b8e:	b003      	add	sp, #12
   21b90:	f85d fb04 	ldr.w	pc, [sp], #4

00021b94 <k_queue_append_list>:
{
   21b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21b98:	4605      	mov	r5, r0
   21b9a:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   21b9c:	460c      	mov	r4, r1
   21b9e:	b391      	cbz	r1, 21c06 <k_queue_append_list+0x72>
   21ba0:	b38a      	cbz	r2, 21c06 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   21ba2:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   21ba6:	f04f 0320 	mov.w	r3, #32
   21baa:	f3ef 8811 	mrs	r8, BASEPRI
   21bae:	f383 8811 	msr	BASEPRI, r3
   21bb2:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   21bb6:	4638      	mov	r0, r7
   21bb8:	f000 f8f4 	bl	21da4 <z_unpend_first_thread>
   21bbc:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   21bc0:	b920      	cbnz	r0, 21bcc <k_queue_append_list+0x38>
	return list->tail;
   21bc2:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   21bc4:	b9ca      	cbnz	r2, 21bfa <k_queue_append_list+0x66>
	list->head = node;
   21bc6:	602c      	str	r4, [r5, #0]
	list->tail = node;
   21bc8:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   21bca:	e00a      	b.n	21be2 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   21bcc:	6144      	str	r4, [r0, #20]
   21bce:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   21bd2:	f000 f8a0 	bl	21d16 <z_ready_thread>
		head = *(void **)head;
   21bd6:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   21bd8:	4638      	mov	r0, r7
   21bda:	f000 f8e3 	bl	21da4 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   21bde:	2c00      	cmp	r4, #0
   21be0:	d1ee      	bne.n	21bc0 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   21be2:	2104      	movs	r1, #4
   21be4:	f105 0010 	add.w	r0, r5, #16
   21be8:	f000 fbd5 	bl	22396 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   21bec:	4638      	mov	r0, r7
   21bee:	4641      	mov	r1, r8
   21bf0:	f7f9 ffb0 	bl	1bb54 <z_reschedule>
	return 0;
   21bf4:	2000      	movs	r0, #0
}
   21bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21bfa:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   21bfc:	f003 0303 	and.w	r3, r3, #3
   21c00:	431c      	orrs	r4, r3
   21c02:	6014      	str	r4, [r2, #0]
}
   21c04:	e7e0      	b.n	21bc8 <k_queue_append_list+0x34>
		return -EINVAL;
   21c06:	f06f 0015 	mvn.w	r0, #21
   21c0a:	e7f4      	b.n	21bf6 <k_queue_append_list+0x62>

00021c0c <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   21c0c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   21c10:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   21c12:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21c14:	2300      	movs	r3, #0
	node->prev = NULL;
   21c16:	e9c0 3300 	strd	r3, r3, [r0]
}
   21c1a:	4770      	bx	lr

00021c1c <unpend_thread_no_timeout>:
{
   21c1c:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   21c1e:	f7ff fff5 	bl	21c0c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   21c22:	7b43      	ldrb	r3, [r0, #13]
   21c24:	f023 0302 	bic.w	r3, r3, #2
   21c28:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   21c2a:	2300      	movs	r3, #0
   21c2c:	6083      	str	r3, [r0, #8]
}
   21c2e:	bd08      	pop	{r3, pc}

00021c30 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   21c30:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   21c34:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   21c38:	4283      	cmp	r3, r0
		return b2 - b1;
   21c3a:	bf14      	ite	ne
   21c3c:	1ac0      	subne	r0, r0, r3
	return 0;
   21c3e:	2000      	moveq	r0, #0
}
   21c40:	4770      	bx	lr

00021c42 <z_unpend_thread_no_timeout>:
{
   21c42:	b508      	push	{r3, lr}
   21c44:	f04f 0320 	mov.w	r3, #32
   21c48:	f3ef 8111 	mrs	r1, BASEPRI
   21c4c:	f383 8811 	msr	BASEPRI, r3
   21c50:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   21c54:	f7ff ffe2 	bl	21c1c <unpend_thread_no_timeout>
	__asm__ volatile(
   21c58:	f381 8811 	msr	BASEPRI, r1
   21c5c:	f3bf 8f6f 	isb	sy
}
   21c60:	bd08      	pop	{r3, pc}

00021c62 <z_unpend_thread>:
{
   21c62:	b510      	push	{r4, lr}
	__asm__ volatile(
   21c64:	f04f 0320 	mov.w	r3, #32
   21c68:	f3ef 8411 	mrs	r4, BASEPRI
   21c6c:	f383 8811 	msr	BASEPRI, r3
   21c70:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   21c74:	f7ff ffd2 	bl	21c1c <unpend_thread_no_timeout>
	__asm__ volatile(
   21c78:	f384 8811 	msr	BASEPRI, r4
   21c7c:	f3bf 8f6f 	isb	sy
}
   21c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_abort_timeout(&thread->base.timeout);
   21c84:	3018      	adds	r0, #24
   21c86:	f000 b9bd 	b.w	22004 <z_abort_timeout>

00021c8a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   21c8a:	4603      	mov	r3, r0
   21c8c:	b920      	cbnz	r0, 21c98 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   21c8e:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   21c92:	b90a      	cbnz	r2, 21c98 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   21c94:	f7e4 bfb6 	b.w	6c04 <arch_swap>
   21c98:	f383 8811 	msr	BASEPRI, r3
   21c9c:	f3bf 8f6f 	isb	sy
}
   21ca0:	4770      	bx	lr

00021ca2 <z_reschedule_unlocked>:
	__asm__ volatile(
   21ca2:	f04f 0320 	mov.w	r3, #32
   21ca6:	f3ef 8011 	mrs	r0, BASEPRI
   21caa:	f383 8811 	msr	BASEPRI, r3
   21cae:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   21cb2:	f7ff bfea 	b.w	21c8a <z_reschedule_irqlock>

00021cb6 <z_priq_dumb_best>:
	return list->head == list;
   21cb6:	6803      	ldr	r3, [r0, #0]
}
   21cb8:	4298      	cmp	r0, r3
   21cba:	bf14      	ite	ne
   21cbc:	4618      	movne	r0, r3
   21cbe:	2000      	moveq	r0, #0
   21cc0:	4770      	bx	lr

00021cc2 <add_to_waitq_locked>:
{
   21cc2:	b538      	push	{r3, r4, r5, lr}
   21cc4:	4604      	mov	r4, r0
   21cc6:	460d      	mov	r5, r1
	unready_thread(thread);
   21cc8:	f7f9 ff88 	bl	1bbdc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   21ccc:	7b63      	ldrb	r3, [r4, #13]
   21cce:	f043 0302 	orr.w	r3, r3, #2
   21cd2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   21cd4:	b195      	cbz	r5, 21cfc <add_to_waitq_locked+0x3a>
   21cd6:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   21cd8:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21cda:	429d      	cmp	r5, r3
   21cdc:	d015      	beq.n	21d0a <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21cde:	b1a3      	cbz	r3, 21d0a <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   21ce0:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   21ce4:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   21ce8:	4291      	cmp	r1, r2
   21cea:	d008      	beq.n	21cfe <add_to_waitq_locked+0x3c>
		return b2 - b1;
   21cec:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   21cee:	2a00      	cmp	r2, #0
   21cf0:	dd05      	ble.n	21cfe <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   21cf2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   21cf4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   21cf8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   21cfa:	605c      	str	r4, [r3, #4]
}
   21cfc:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   21cfe:	686a      	ldr	r2, [r5, #4]
   21d00:	4293      	cmp	r3, r2
   21d02:	d002      	beq.n	21d0a <add_to_waitq_locked+0x48>
   21d04:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21d06:	2b00      	cmp	r3, #0
   21d08:	d1ec      	bne.n	21ce4 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   21d0a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   21d0c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   21d10:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21d12:	606c      	str	r4, [r5, #4]
}
   21d14:	e7f2      	b.n	21cfc <add_to_waitq_locked+0x3a>

00021d16 <z_ready_thread>:
{
   21d16:	b510      	push	{r4, lr}
   21d18:	f04f 0320 	mov.w	r3, #32
   21d1c:	f3ef 8411 	mrs	r4, BASEPRI
   21d20:	f383 8811 	msr	BASEPRI, r3
   21d24:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   21d28:	f7fa f872 	bl	1be10 <ready_thread>
	__asm__ volatile(
   21d2c:	f384 8811 	msr	BASEPRI, r4
   21d30:	f3bf 8f6f 	isb	sy
}
   21d34:	bd10      	pop	{r4, pc}

00021d36 <z_thread_timeout>:
{
   21d36:	b510      	push	{r4, lr}
   21d38:	4601      	mov	r1, r0
	__asm__ volatile(
   21d3a:	f04f 0320 	mov.w	r3, #32
   21d3e:	f3ef 8411 	mrs	r4, BASEPRI
   21d42:	f383 8811 	msr	BASEPRI, r3
   21d46:	f3bf 8f6f 	isb	sy
		if (!killed) {
   21d4a:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   21d4e:	f013 0f28 	tst.w	r3, #40	; 0x28
   21d52:	d10d      	bne.n	21d70 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   21d54:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   21d58:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   21d5a:	b10b      	cbz	r3, 21d60 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   21d5c:	f7ff ff5e 	bl	21c1c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   21d60:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   21d64:	f023 0314 	bic.w	r3, r3, #20
   21d68:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   21d6c:	f7fa f850 	bl	1be10 <ready_thread>
	__asm__ volatile(
   21d70:	f384 8811 	msr	BASEPRI, r4
   21d74:	f3bf 8f6f 	isb	sy
}
   21d78:	bd10      	pop	{r4, pc}

00021d7a <z_unpend1_no_timeout>:
{
   21d7a:	b510      	push	{r4, lr}
	__asm__ volatile(
   21d7c:	f04f 0320 	mov.w	r3, #32
   21d80:	f3ef 8411 	mrs	r4, BASEPRI
   21d84:	f383 8811 	msr	BASEPRI, r3
   21d88:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   21d8c:	f7ff ff93 	bl	21cb6 <z_priq_dumb_best>
		if (thread != NULL) {
   21d90:	4601      	mov	r1, r0
   21d92:	b108      	cbz	r0, 21d98 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   21d94:	f7ff ff42 	bl	21c1c <unpend_thread_no_timeout>
	__asm__ volatile(
   21d98:	f384 8811 	msr	BASEPRI, r4
   21d9c:	f3bf 8f6f 	isb	sy
}
   21da0:	4608      	mov	r0, r1
   21da2:	bd10      	pop	{r4, pc}

00021da4 <z_unpend_first_thread>:
{
   21da4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   21da6:	f04f 0320 	mov.w	r3, #32
   21daa:	f3ef 8511 	mrs	r5, BASEPRI
   21dae:	f383 8811 	msr	BASEPRI, r3
   21db2:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   21db6:	f7ff ff7e 	bl	21cb6 <z_priq_dumb_best>
		if (thread != NULL) {
   21dba:	4604      	mov	r4, r0
   21dbc:	b120      	cbz	r0, 21dc8 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   21dbe:	f7ff ff2d 	bl	21c1c <unpend_thread_no_timeout>
   21dc2:	3018      	adds	r0, #24
   21dc4:	f000 f91e 	bl	22004 <z_abort_timeout>
	__asm__ volatile(
   21dc8:	f385 8811 	msr	BASEPRI, r5
   21dcc:	f3bf 8f6f 	isb	sy
}
   21dd0:	4620      	mov	r0, r4
   21dd2:	bd38      	pop	{r3, r4, r5, pc}

00021dd4 <z_unpend_all>:
{
   21dd4:	b538      	push	{r3, r4, r5, lr}
   21dd6:	4605      	mov	r5, r0
	int need_sched = 0;
   21dd8:	2000      	movs	r0, #0
	return list->head == list;
   21dda:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21ddc:	42a5      	cmp	r5, r4
   21dde:	d000      	beq.n	21de2 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   21de0:	b904      	cbnz	r4, 21de4 <z_unpend_all+0x10>
}
   21de2:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   21de4:	4620      	mov	r0, r4
   21de6:	f7ff ff3c 	bl	21c62 <z_unpend_thread>
		z_ready_thread(thread);
   21dea:	4620      	mov	r0, r4
   21dec:	f7ff ff93 	bl	21d16 <z_ready_thread>
		need_sched = 1;
   21df0:	2001      	movs	r0, #1
   21df2:	e7f2      	b.n	21dda <z_unpend_all+0x6>

00021df4 <z_sched_wake>:
{
   21df4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   21df6:	f04f 0320 	mov.w	r3, #32
   21dfa:	f3ef 8511 	mrs	r5, BASEPRI
   21dfe:	f383 8811 	msr	BASEPRI, r3
   21e02:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   21e06:	f7ff ff56 	bl	21cb6 <z_priq_dumb_best>
		if (thread != NULL) {
   21e0a:	4604      	mov	r4, r0
   21e0c:	b150      	cbz	r0, 21e24 <z_sched_wake+0x30>
   21e0e:	67c1      	str	r1, [r0, #124]	; 0x7c
   21e10:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   21e12:	f7ff ff03 	bl	21c1c <unpend_thread_no_timeout>
   21e16:	3018      	adds	r0, #24
   21e18:	f000 f8f4 	bl	22004 <z_abort_timeout>
			ready_thread(thread);
   21e1c:	4620      	mov	r0, r4
   21e1e:	f7f9 fff7 	bl	1be10 <ready_thread>
			ret = true;
   21e22:	2001      	movs	r0, #1
	__asm__ volatile(
   21e24:	f385 8811 	msr	BASEPRI, r5
   21e28:	f3bf 8f6f 	isb	sy
}
   21e2c:	bd38      	pop	{r3, r4, r5, pc}

00021e2e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   21e2e:	b15a      	cbz	r2, 21e48 <z_impl_k_sem_init+0x1a>
   21e30:	428a      	cmp	r2, r1
   21e32:	d309      	bcc.n	21e48 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   21e34:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   21e38:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   21e3c:	e9c0 0000 	strd	r0, r0, [r0]
   21e40:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   21e44:	2000      	movs	r0, #0
   21e46:	4770      	bx	lr
		return -EINVAL;
   21e48:	f06f 0015 	mvn.w	r0, #21
}
   21e4c:	4770      	bx	lr

00021e4e <k_is_in_isr>:
   21e4e:	f3ef 8005 	mrs	r0, IPSR
}
   21e52:	3800      	subs	r0, #0
   21e54:	bf18      	it	ne
   21e56:	2001      	movne	r0, #1
   21e58:	4770      	bx	lr

00021e5a <z_impl_k_busy_wait>:
	if (usec_to_wait == 0U) {
   21e5a:	b108      	cbz	r0, 21e60 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   21e5c:	f7e5 bbf6 	b.w	764c <arch_busy_wait>
}
   21e60:	4770      	bx	lr

00021e62 <z_impl_k_thread_name_set>:
}
   21e62:	f06f 0046 	mvn.w	r0, #70	; 0x46
   21e66:	4770      	bx	lr

00021e68 <k_thread_name_get>:
}
   21e68:	2000      	movs	r0, #0
   21e6a:	4770      	bx	lr

00021e6c <z_impl_k_thread_start>:
	z_sched_start(thread);
   21e6c:	f7fa b806 	b.w	1be7c <z_sched_start>

00021e70 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   21e70:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   21e72:	2301      	movs	r3, #1
   21e74:	408b      	lsls	r3, r1
   21e76:	ea22 0303 	bic.w	r3, r2, r3
   21e7a:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   21e7c:	fa22 f001 	lsr.w	r0, r2, r1
}
   21e80:	f000 0001 	and.w	r0, r0, #1
   21e84:	4770      	bx	lr

00021e86 <unschedule_locked>:
{
   21e86:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   21e88:	2103      	movs	r1, #3
{
   21e8a:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   21e8c:	300c      	adds	r0, #12
   21e8e:	f7ff ffef 	bl	21e70 <flag_test_and_clear>
   21e92:	4604      	mov	r4, r0
   21e94:	b118      	cbz	r0, 21e9e <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   21e96:	f105 0010 	add.w	r0, r5, #16
   21e9a:	f000 f8b3 	bl	22004 <z_abort_timeout>
}
   21e9e:	4620      	mov	r0, r4
   21ea0:	bd38      	pop	{r3, r4, r5, pc}

00021ea2 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   21ea2:	b120      	cbz	r0, 21eae <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   21ea4:	2200      	movs	r2, #0
   21ea6:	4611      	mov	r1, r2
   21ea8:	30d0      	adds	r0, #208	; 0xd0
   21eaa:	f7ff bfa3 	b.w	21df4 <z_sched_wake>
}
   21eae:	4770      	bx	lr

00021eb0 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   21eb0:	68c3      	ldr	r3, [r0, #12]
{
   21eb2:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21eb4:	f3c3 0540 	ubfx	r5, r3, #1, #1
   21eb8:	079b      	lsls	r3, r3, #30
{
   21eba:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21ebc:	d416      	bmi.n	21eec <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   21ebe:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   21ec0:	2102      	movs	r1, #2
   21ec2:	300c      	adds	r0, #12
   21ec4:	f7ff ffd4 	bl	21e70 <flag_test_and_clear>
   21ec8:	b180      	cbz	r0, 21eec <cancel_async_locked+0x3c>
	return list->head;
   21eca:	f8d6 20c8 	ldr.w	r2, [r6, #200]	; 0xc8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21ece:	b16a      	cbz	r2, 21eec <cancel_async_locked+0x3c>
   21ed0:	4294      	cmp	r4, r2
   21ed2:	d11b      	bne.n	21f0c <cancel_async_locked+0x5c>
	return node->next;
   21ed4:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   21ed6:	f8d6 10cc 	ldr.w	r1, [r6, #204]	; 0xcc
Z_GENLIST_REMOVE(slist, snode)
   21eda:	b98d      	cbnz	r5, 21f00 <cancel_async_locked+0x50>
   21edc:	428c      	cmp	r4, r1
	list->head = node;
   21ede:	f8c6 20c8 	str.w	r2, [r6, #200]	; 0xc8
Z_GENLIST_REMOVE(slist, snode)
   21ee2:	d101      	bne.n	21ee8 <cancel_async_locked+0x38>
	list->tail = node;
   21ee4:	f8c6 20cc 	str.w	r2, [r6, #204]	; 0xcc
	parent->next = child;
   21ee8:	2300      	movs	r3, #0
   21eea:	6023      	str	r3, [r4, #0]
	return *flagp;
   21eec:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   21eee:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   21ef2:	bf1e      	ittt	ne
   21ef4:	f043 0302 	orrne.w	r3, r3, #2
   21ef8:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   21efa:	f003 000f 	andne.w	r0, r3, #15
}
   21efe:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   21f00:	428c      	cmp	r4, r1
	parent->next = child;
   21f02:	602a      	str	r2, [r5, #0]
	list->tail = node;
   21f04:	bf08      	it	eq
   21f06:	f8c6 50cc 	streq.w	r5, [r6, #204]	; 0xcc
}
   21f0a:	e7ed      	b.n	21ee8 <cancel_async_locked+0x38>
	return node->next;
   21f0c:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21f0e:	6812      	ldr	r2, [r2, #0]
   21f10:	e7dd      	b.n	21ece <cancel_async_locked+0x1e>

00021f12 <work_timeout>:
{
   21f12:	b573      	push	{r0, r1, r4, r5, r6, lr}
   21f14:	4604      	mov	r4, r0
	__asm__ volatile(
   21f16:	f04f 0320 	mov.w	r3, #32
   21f1a:	f3ef 8511 	mrs	r5, BASEPRI
   21f1e:	f383 8811 	msr	BASEPRI, r3
   21f22:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   21f26:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   21f28:	f1a0 0610 	sub.w	r6, r0, #16
   21f2c:	2103      	movs	r1, #3
   21f2e:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   21f30:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   21f32:	f7ff ff9d 	bl	21e70 <flag_test_and_clear>
   21f36:	b128      	cbz	r0, 21f44 <work_timeout+0x32>
		queue = dw->queue;
   21f38:	69a3      	ldr	r3, [r4, #24]
   21f3a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   21f3c:	a901      	add	r1, sp, #4
   21f3e:	4630      	mov	r0, r6
   21f40:	f7fa fa7c 	bl	1c43c <submit_to_queue_locked>
	__asm__ volatile(
   21f44:	f385 8811 	msr	BASEPRI, r5
   21f48:	f3bf 8f6f 	isb	sy
}
   21f4c:	b002      	add	sp, #8
   21f4e:	bd70      	pop	{r4, r5, r6, pc}

00021f50 <k_work_init>:
{
   21f50:	b538      	push	{r3, r4, r5, lr}
   21f52:	4604      	mov	r4, r0
   21f54:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   21f56:	2210      	movs	r2, #16
   21f58:	2100      	movs	r1, #0
   21f5a:	f7fd fae8 	bl	1f52e <memset>
   21f5e:	6065      	str	r5, [r4, #4]
}
   21f60:	bd38      	pop	{r3, r4, r5, pc}

00021f62 <k_work_submit_to_queue>:
{
   21f62:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21f64:	9001      	str	r0, [sp, #4]
   21f66:	4608      	mov	r0, r1
	__asm__ volatile(
   21f68:	f04f 0320 	mov.w	r3, #32
   21f6c:	f3ef 8511 	mrs	r5, BASEPRI
   21f70:	f383 8811 	msr	BASEPRI, r3
   21f74:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   21f78:	a901      	add	r1, sp, #4
   21f7a:	f7fa fa5f 	bl	1c43c <submit_to_queue_locked>
   21f7e:	4604      	mov	r4, r0
	__asm__ volatile(
   21f80:	f385 8811 	msr	BASEPRI, r5
   21f84:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   21f88:	2800      	cmp	r0, #0
   21f8a:	dd04      	ble.n	21f96 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   21f8c:	f7fa f894 	bl	1c0b8 <z_impl_k_is_preempt_thread>
   21f90:	b108      	cbz	r0, 21f96 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   21f92:	f7f9 ffe5 	bl	1bf60 <z_impl_k_yield>
}
   21f96:	4620      	mov	r0, r4
   21f98:	b003      	add	sp, #12
   21f9a:	bd30      	pop	{r4, r5, pc}

00021f9c <k_work_init_delayable>:
{
   21f9c:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   21f9e:	2230      	movs	r2, #48	; 0x30
{
   21fa0:	4604      	mov	r4, r0
   21fa2:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   21fa4:	2100      	movs	r1, #0
   21fa6:	f7fd fac2 	bl	1f52e <memset>
   21faa:	f44f 7380 	mov.w	r3, #256	; 0x100
   21fae:	6065      	str	r5, [r4, #4]
   21fb0:	60e3      	str	r3, [r4, #12]
}
   21fb2:	bd38      	pop	{r3, r4, r5, pc}

00021fb4 <k_work_delayable_busy_get>:
	__asm__ volatile(
   21fb4:	f04f 0220 	mov.w	r2, #32
   21fb8:	f3ef 8311 	mrs	r3, BASEPRI
   21fbc:	f382 8811 	msr	BASEPRI, r2
   21fc0:	f3bf 8f6f 	isb	sy
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21fc4:	f3bf 8f5b 	dmb	ish
   21fc8:	68c0      	ldr	r0, [r0, #12]
   21fca:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
   21fce:	f383 8811 	msr	BASEPRI, r3
   21fd2:	f3bf 8f6f 	isb	sy
}
   21fd6:	f000 000f 	and.w	r0, r0, #15
   21fda:	4770      	bx	lr

00021fdc <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   21fdc:	b538      	push	{r3, r4, r5, lr}
   21fde:	4604      	mov	r4, r0
	__asm__ volatile(
   21fe0:	f04f 0320 	mov.w	r3, #32
   21fe4:	f3ef 8511 	mrs	r5, BASEPRI
   21fe8:	f383 8811 	msr	BASEPRI, r3
   21fec:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   21ff0:	f7ff ff49 	bl	21e86 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   21ff4:	4620      	mov	r0, r4
   21ff6:	f7ff ff5b 	bl	21eb0 <cancel_async_locked>
	__asm__ volatile(
   21ffa:	f385 8811 	msr	BASEPRI, r5
   21ffe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);

	k_spin_unlock(&lock, key);
	return ret;
}
   22002:	bd38      	pop	{r3, r4, r5, pc}

00022004 <z_abort_timeout>:
{
   22004:	b510      	push	{r4, lr}
	__asm__ volatile(
   22006:	f04f 0220 	mov.w	r2, #32
   2200a:	f3ef 8411 	mrs	r4, BASEPRI
   2200e:	f382 8811 	msr	BASEPRI, r2
   22012:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   22016:	6803      	ldr	r3, [r0, #0]
   22018:	b13b      	cbz	r3, 2202a <z_abort_timeout+0x26>
			remove_timeout(to);
   2201a:	f7fa fb1d 	bl	1c658 <remove_timeout>
			ret = 0;
   2201e:	2000      	movs	r0, #0
	__asm__ volatile(
   22020:	f384 8811 	msr	BASEPRI, r4
   22024:	f3bf 8f6f 	isb	sy
}
   22028:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2202a:	f06f 0015 	mvn.w	r0, #21
   2202e:	e7f7      	b.n	22020 <z_abort_timeout+0x1c>

00022030 <z_get_next_timeout_expiry>:
{
   22030:	b510      	push	{r4, lr}
	__asm__ volatile(
   22032:	f04f 0320 	mov.w	r3, #32
   22036:	f3ef 8411 	mrs	r4, BASEPRI
   2203a:	f383 8811 	msr	BASEPRI, r3
   2203e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   22042:	f7fa fae1 	bl	1c608 <next_timeout>
	__asm__ volatile(
   22046:	f384 8811 	msr	BASEPRI, r4
   2204a:	f3bf 8f6f 	isb	sy
}
   2204e:	bd10      	pop	{r4, pc}

00022050 <z_set_timeout_expiry>:
{
   22050:	b537      	push	{r0, r1, r2, r4, r5, lr}
   22052:	4604      	mov	r4, r0
   22054:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   22056:	f04f 0320 	mov.w	r3, #32
   2205a:	f3ef 8511 	mrs	r5, BASEPRI
   2205e:	f383 8811 	msr	BASEPRI, r3
   22062:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   22066:	f7fa facf 	bl	1c608 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2206a:	2801      	cmp	r0, #1
   2206c:	dd05      	ble.n	2207a <z_set_timeout_expiry+0x2a>
   2206e:	42a0      	cmp	r0, r4
   22070:	9901      	ldr	r1, [sp, #4]
   22072:	db02      	blt.n	2207a <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   22074:	4620      	mov	r0, r4
   22076:	f7e4 fb83 	bl	6780 <sys_clock_set_timeout>
	__asm__ volatile(
   2207a:	f385 8811 	msr	BASEPRI, r5
   2207e:	f3bf 8f6f 	isb	sy
}
   22082:	b003      	add	sp, #12
   22084:	bd30      	pop	{r4, r5, pc}

00022086 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   22086:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   22088:	f7fa fbe0 	bl	1c84c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2208c:	bd08      	pop	{r3, pc}

0002208e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2208e:	f7fa bbdd 	b.w	1c84c <sys_clock_tick_get>

00022092 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22092:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   22096:	bf08      	it	eq
   22098:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2209c:	b538      	push	{r3, r4, r5, lr}
   2209e:	4605      	mov	r5, r0
   220a0:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   220a2:	d020      	beq.n	220e6 <sys_clock_timeout_end_calc+0x54>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   220a4:	ea51 0300 	orrs.w	r3, r1, r0
   220a8:	d103      	bne.n	220b2 <sys_clock_timeout_end_calc+0x20>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return sys_clock_tick_get() + MAX(1, dt);
}
   220aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   220ae:	f7fa bbcd 	b.w	1c84c <sys_clock_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   220b2:	f06f 0301 	mvn.w	r3, #1
   220b6:	1a1b      	subs	r3, r3, r0
   220b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   220bc:	eb61 0204 	sbc.w	r2, r1, r4
   220c0:	2a00      	cmp	r2, #0
   220c2:	db02      	blt.n	220ca <sys_clock_timeout_end_calc+0x38>
		return Z_TICK_ABS(dt);
   220c4:	4618      	mov	r0, r3
   220c6:	4611      	mov	r1, r2
}
   220c8:	bd38      	pop	{r3, r4, r5, pc}
	return sys_clock_tick_get() + MAX(1, dt);
   220ca:	f7fa fbbf 	bl	1c84c <sys_clock_tick_get>
   220ce:	2d01      	cmp	r5, #1
   220d0:	4622      	mov	r2, r4
   220d2:	f174 0400 	sbcs.w	r4, r4, #0
   220d6:	462b      	mov	r3, r5
   220d8:	bfbc      	itt	lt
   220da:	2301      	movlt	r3, #1
   220dc:	2200      	movlt	r2, #0
   220de:	1818      	adds	r0, r3, r0
   220e0:	eb41 0102 	adc.w	r1, r1, r2
   220e4:	e7f0      	b.n	220c8 <sys_clock_timeout_end_calc+0x36>
		return UINT64_MAX;
   220e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   220ea:	4601      	mov	r1, r0
   220ec:	e7ec      	b.n	220c8 <sys_clock_timeout_end_calc+0x36>

000220ee <k_timer_init>:
	timer->status = 0U;
   220ee:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   220f0:	e9c0 1208 	strd	r1, r2, [r0, #32]
   220f4:	f100 0218 	add.w	r2, r0, #24
   220f8:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   220fc:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   22100:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   22102:	6343      	str	r3, [r0, #52]	; 0x34
}
   22104:	4770      	bx	lr

00022106 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   22106:	b510      	push	{r4, lr}
   22108:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2210a:	f7ff ff7b 	bl	22004 <z_abort_timeout>

	if (inactive) {
   2210e:	b9b0      	cbnz	r0, 2213e <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   22110:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22112:	b10b      	cbz	r3, 22118 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   22114:	4620      	mov	r0, r4
   22116:	4798      	blx	r3
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   22118:	f104 0018 	add.w	r0, r4, #24
   2211c:	f7ff fe2d 	bl	21d7a <z_unpend1_no_timeout>

	if (pending_thread != NULL) {
   22120:	b168      	cbz	r0, 2213e <z_impl_k_timer_stop+0x38>
		z_ready_thread(pending_thread);
   22122:	f7ff fdf8 	bl	21d16 <z_ready_thread>
	__asm__ volatile(
   22126:	f04f 0320 	mov.w	r3, #32
   2212a:	f3ef 8011 	mrs	r0, BASEPRI
   2212e:	f383 8811 	msr	BASEPRI, r3
   22132:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   22136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2213a:	f7ff bda6 	b.w	21c8a <z_reschedule_irqlock>
   2213e:	bd10      	pop	{r4, pc}

00022140 <add_event>:
{
   22140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22142:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   22144:	e9d0 2300 	ldrd	r2, r3, [r0]
   22148:	4290      	cmp	r0, r2
   2214a:	4604      	mov	r4, r0
   2214c:	460d      	mov	r5, r1
   2214e:	d105      	bne.n	2215c <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   22150:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   22152:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   22156:	601d      	str	r5, [r3, #0]
	list->tail = node;
   22158:	6065      	str	r5, [r4, #4]
}
   2215a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2215c:	2b00      	cmp	r3, #0
   2215e:	d0f7      	beq.n	22150 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   22160:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   22162:	b100      	cbz	r0, 22166 <add_event+0x26>
   22164:	3860      	subs	r0, #96	; 0x60
   22166:	b107      	cbz	r7, 2216a <add_event+0x2a>
   22168:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2216a:	4639      	mov	r1, r7
   2216c:	f7ff fd60 	bl	21c30 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   22170:	2800      	cmp	r0, #0
   22172:	dced      	bgt.n	22150 <add_event+0x10>
	return list->head == list;
   22174:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22176:	42b4      	cmp	r4, r6
   22178:	d0ea      	beq.n	22150 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2217a:	2e00      	cmp	r6, #0
   2217c:	d0e8      	beq.n	22150 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   2217e:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   22180:	b101      	cbz	r1, 22184 <add_event+0x44>
   22182:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   22184:	4638      	mov	r0, r7
   22186:	f7ff fd53 	bl	21c30 <z_sched_prio_cmp>
   2218a:	2800      	cmp	r0, #0
   2218c:	dd05      	ble.n	2219a <add_event+0x5a>
	sys_dnode_t *const prev = successor->prev;
   2218e:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   22190:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   22194:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   22196:	6075      	str	r5, [r6, #4]
			return;
   22198:	e7df      	b.n	2215a <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   2219a:	6863      	ldr	r3, [r4, #4]
   2219c:	429e      	cmp	r6, r3
   2219e:	d0d7      	beq.n	22150 <add_event+0x10>
   221a0:	6836      	ldr	r6, [r6, #0]
   221a2:	e7ea      	b.n	2217a <add_event+0x3a>

000221a4 <register_events>:
{
   221a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   221a8:	f04f 0a00 	mov.w	sl, #0
{
   221ac:	460e      	mov	r6, r1
   221ae:	4614      	mov	r4, r2
   221b0:	461f      	mov	r7, r3
   221b2:	4683      	mov	fp, r0
	int events_registered = 0;
   221b4:	4655      	mov	r5, sl
	event->poller = NULL;
   221b6:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   221b8:	45b2      	cmp	sl, r6
   221ba:	db02      	blt.n	221c2 <register_events+0x1e>
}
   221bc:	4628      	mov	r0, r5
   221be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   221c2:	f04f 0320 	mov.w	r3, #32
   221c6:	f3ef 8911 	mrs	r9, BASEPRI
   221ca:	f383 8811 	msr	BASEPRI, r3
   221ce:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   221d2:	f89b 200d 	ldrb.w	r2, [fp, #13]
   221d6:	f002 020f 	and.w	r2, r2, #15
   221da:	2a02      	cmp	r2, #2
   221dc:	d006      	beq.n	221ec <register_events+0x48>
   221de:	2a04      	cmp	r2, #4
   221e0:	d008      	beq.n	221f4 <register_events+0x50>
   221e2:	2a01      	cmp	r2, #1
   221e4:	d120      	bne.n	22228 <register_events+0x84>
		if (event->signal->signaled != 0U) {
   221e6:	f8db 3010 	ldr.w	r3, [fp, #16]
   221ea:	e001      	b.n	221f0 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   221ec:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   221f0:	689b      	ldr	r3, [r3, #8]
   221f2:	e002      	b.n	221fa <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   221f4:	f8db 3010 	ldr.w	r3, [fp, #16]
   221f8:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   221fa:	b1ab      	cbz	r3, 22228 <register_events+0x84>
	event->state |= state;
   221fc:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   22200:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   22204:	f3c3 3104 	ubfx	r1, r3, #12, #5
   22208:	430a      	orrs	r2, r1
   2220a:	f362 3310 	bfi	r3, r2, #12, #5
   2220e:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   22212:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   22216:	f389 8811 	msr	BASEPRI, r9
   2221a:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2221e:	f10a 0a01 	add.w	sl, sl, #1
   22222:	f10b 0b14 	add.w	fp, fp, #20
   22226:	e7c7      	b.n	221b8 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   22228:	2f00      	cmp	r7, #0
   2222a:	d1f4      	bne.n	22216 <register_events+0x72>
   2222c:	7823      	ldrb	r3, [r4, #0]
   2222e:	2b00      	cmp	r3, #0
   22230:	d0f1      	beq.n	22216 <register_events+0x72>
	switch (event->type) {
   22232:	f89b 300d 	ldrb.w	r3, [fp, #13]
   22236:	f003 030f 	and.w	r3, r3, #15
   2223a:	2b02      	cmp	r3, #2
   2223c:	d008      	beq.n	22250 <register_events+0xac>
   2223e:	2b04      	cmp	r3, #4
   22240:	d006      	beq.n	22250 <register_events+0xac>
   22242:	2b01      	cmp	r3, #1
   22244:	d10b      	bne.n	2225e <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   22246:	f8db 0010 	ldr.w	r0, [fp, #16]
   2224a:	4622      	mov	r2, r4
   2224c:	4659      	mov	r1, fp
   2224e:	e004      	b.n	2225a <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   22250:	f8db 0010 	ldr.w	r0, [fp, #16]
   22254:	4622      	mov	r2, r4
   22256:	4659      	mov	r1, fp
   22258:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   2225a:	f7ff ff71 	bl	22140 <add_event>
	event->poller = poller;
   2225e:	f8cb 4008 	str.w	r4, [fp, #8]
			events_registered += 1;
   22262:	3501      	adds	r5, #1
   22264:	e7d7      	b.n	22216 <register_events+0x72>

00022266 <signal_poll_event>:
{
   22266:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct z_poller *poller = event->poller;
   2226a:	6884      	ldr	r4, [r0, #8]
{
   2226c:	4605      	mov	r5, r0
   2226e:	460e      	mov	r6, r1
	if (poller != NULL) {
   22270:	b144      	cbz	r4, 22284 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   22272:	7863      	ldrb	r3, [r4, #1]
   22274:	2b01      	cmp	r3, #1
   22276:	d137      	bne.n	222e8 <signal_poll_event+0x82>
	if (!z_is_thread_pending(thread)) {
   22278:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2227c:	f013 0302 	ands.w	r3, r3, #2
   22280:	d10a      	bne.n	22298 <signal_poll_event+0x32>
		poller->is_polling = false;
   22282:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   22284:	68eb      	ldr	r3, [r5, #12]
   22286:	f3c3 3104 	ubfx	r1, r3, #12, #5
   2228a:	430e      	orrs	r6, r1
	event->poller = NULL;
   2228c:	2000      	movs	r0, #0
	event->state |= state;
   2228e:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   22292:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   22294:	60eb      	str	r3, [r5, #12]
	return retcode;
   22296:	e00b      	b.n	222b0 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   22298:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2229c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   222a0:	bf08      	it	eq
   222a2:	f112 0f02 	cmneq.w	r2, #2
   222a6:	d106      	bne.n	222b6 <signal_poll_event+0x50>
		poller->is_polling = false;
   222a8:	2300      	movs	r3, #0
   222aa:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   222ac:	f06f 000a 	mvn.w	r0, #10
}
   222b0:	b002      	add	sp, #8
   222b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   222b6:	f1a4 0060 	sub.w	r0, r4, #96	; 0x60
	z_unpend_thread(thread);
   222ba:	9001      	str	r0, [sp, #4]
   222bc:	f7ff fcd1 	bl	21c62 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   222c0:	2e08      	cmp	r6, #8
   222c2:	bf0c      	ite	eq
   222c4:	f06f 0303 	mvneq.w	r3, #3
   222c8:	2300      	movne	r3, #0
   222ca:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   222cc:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   222d0:	06db      	lsls	r3, r3, #27
   222d2:	d103      	bne.n	222dc <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   222d4:	f854 7c48 	ldr.w	r7, [r4, #-72]
   222d8:	9801      	ldr	r0, [sp, #4]
   222da:	b10f      	cbz	r7, 222e0 <signal_poll_event+0x7a>
		poller->is_polling = false;
   222dc:	2300      	movs	r3, #0
   222de:	e7d0      	b.n	22282 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   222e0:	f7ff fd19 	bl	21d16 <z_ready_thread>
		poller->is_polling = false;
   222e4:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   222e6:	e7cd      	b.n	22284 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   222e8:	2b02      	cmp	r3, #2
   222ea:	d1f7      	bne.n	222dc <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   222ec:	7823      	ldrb	r3, [r4, #0]
   222ee:	2b00      	cmp	r3, #0
   222f0:	d0c8      	beq.n	22284 <signal_poll_event+0x1e>
   222f2:	f854 7c04 	ldr.w	r7, [r4, #-4]
   222f6:	2f00      	cmp	r7, #0
   222f8:	d0f4      	beq.n	222e4 <signal_poll_event+0x7e>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   222fa:	f1a4 0114 	sub.w	r1, r4, #20
		twork->poll_result = 0;
   222fe:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   22302:	f104 0014 	add.w	r0, r4, #20
   22306:	9101      	str	r1, [sp, #4]
   22308:	f7ff fe7c 	bl	22004 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   2230c:	9901      	ldr	r1, [sp, #4]
		twork->poll_result = 0;
   2230e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   22312:	4638      	mov	r0, r7
   22314:	f7ff fe25 	bl	21f62 <k_work_submit_to_queue>
		poller->is_polling = false;
   22318:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2231c:	e7b2      	b.n	22284 <signal_poll_event+0x1e>

0002231e <clear_event_registrations>:
	while (num_events--) {
   2231e:	2314      	movs	r3, #20
{
   22320:	b570      	push	{r4, r5, r6, lr}
   22322:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   22326:	2400      	movs	r4, #0
	while (num_events--) {
   22328:	b901      	cbnz	r1, 2232c <clear_event_registrations+0xe>
}
   2232a:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   2232c:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   22330:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   22334:	f003 030f 	and.w	r3, r3, #15
   22338:	2b02      	cmp	r3, #2
   2233a:	f1a0 0614 	sub.w	r6, r0, #20
   2233e:	d80a      	bhi.n	22356 <clear_event_registrations+0x38>
   22340:	b15b      	cbz	r3, 2235a <clear_event_registrations+0x3c>
	return node->next != NULL;
   22342:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   22346:	b143      	cbz	r3, 2235a <clear_event_registrations+0x3c>
	sys_dnode_t *const prev = node->prev;
   22348:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   2234c:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2234e:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   22350:	e940 4405 	strd	r4, r4, [r0, #-20]
}
   22354:	e001      	b.n	2235a <clear_event_registrations+0x3c>
	switch (event->type) {
   22356:	2b04      	cmp	r3, #4
   22358:	d0f3      	beq.n	22342 <clear_event_registrations+0x24>
   2235a:	f382 8811 	msr	BASEPRI, r2
   2235e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   22362:	f04f 0320 	mov.w	r3, #32
   22366:	f3ef 8211 	mrs	r2, BASEPRI
   2236a:	f383 8811 	msr	BASEPRI, r3
   2236e:	f3bf 8f6f 	isb	sy
   22372:	3901      	subs	r1, #1
   22374:	4630      	mov	r0, r6
   22376:	e7d7      	b.n	22328 <clear_event_registrations+0xa>

00022378 <k_poll_event_init>:
{
   22378:	b510      	push	{r4, lr}
	event->type = type;
   2237a:	0452      	lsls	r2, r2, #17
   2237c:	0209      	lsls	r1, r1, #8
   2237e:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   22382:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   22386:	430a      	orrs	r2, r1
   22388:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2238a:	2400      	movs	r4, #0
	event->type = type;
   2238c:	430a      	orrs	r2, r1
	event->obj = obj;
   2238e:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   22392:	6084      	str	r4, [r0, #8]
}
   22394:	bd10      	pop	{r4, pc}

00022396 <z_handle_obj_poll_events>:
{
   22396:	4603      	mov	r3, r0
	return list->head == list;
   22398:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2239a:	4283      	cmp	r3, r0
   2239c:	d008      	beq.n	223b0 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2239e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   223a2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   223a4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   223a6:	2300      	movs	r3, #0
	node->prev = NULL;
   223a8:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   223ac:	f7ff bf5b 	b.w	22266 <signal_poll_event>
}
   223b0:	4770      	bx	lr

000223b2 <k_free>:
	if (ptr != NULL) {
   223b2:	b120      	cbz	r0, 223be <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   223b4:	1f01      	subs	r1, r0, #4
   223b6:	f850 0c04 	ldr.w	r0, [r0, #-4]
   223ba:	f7ff bb1a 	b.w	219f2 <k_heap_free>
}
   223be:	4770      	bx	lr

000223c0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   223c0:	4770      	bx	lr
