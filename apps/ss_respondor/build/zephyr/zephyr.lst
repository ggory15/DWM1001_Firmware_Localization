
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	a0 13 00 20 4d 2c 00 00 0d 66 00 00 7d 2c 00 00     ... M,...f..},..
  10:	7d 2c 00 00 7d 2c 00 00 7d 2c 00 00 00 00 00 00     },..},..},......
	...
  2c:	21 2a 00 00 7d 2c 00 00 00 00 00 00 d9 29 00 00     !*..},.......)..
  3c:	4f 65 00 00                                         Oe..

00000040 <_irq_vector_table>:
  40:	0d 2c 00 00 0d 2c 00 00 0d 2c 00 00 0d 2c 00 00     .,...,...,...,..
  50:	0d 2c 00 00 0d 2c 00 00 0d 2c 00 00 0d 2c 00 00     .,...,...,...,..
  60:	0d 2c 00 00 0d 2c 00 00 0d 2c 00 00 0d 2c 00 00     .,...,...,...,..
  70:	0d 2c 00 00 0d 2c 00 00 0d 2c 00 00 0d 2c 00 00     .,...,...,...,..
  80:	0d 2c 00 00 0d 2c 00 00 0d 2c 00 00 0d 2c 00 00     .,...,...,...,..
  90:	0d 2c 00 00 0d 2c 00 00 0d 2c 00 00 0d 2c 00 00     .,...,...,...,..
  a0:	0d 2c 00 00 0d 2c 00 00 0d 2c 00 00 0d 2c 00 00     .,...,...,...,..
  b0:	0d 2c 00 00 0d 2c 00 00 0d 2c 00 00 0d 2c 00 00     .,...,...,...,..
  c0:	0d 2c 00 00 0d 2c 00 00 0d 2c 00 00 0d 2c 00 00     .,...,...,...,..
  d0:	0d 2c 00 00 0d 2c 00 00 0d 2c 00 00                 .,...,...,..

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f0:	f000 b978 	b.w	3e4 <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f806 	bl	10c <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__udivmoddi4>:
     10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     110:	9d08      	ldr	r5, [sp, #32]
     112:	460e      	mov	r6, r1
     114:	4604      	mov	r4, r0
     116:	468e      	mov	lr, r1
     118:	2b00      	cmp	r3, #0
     11a:	d14c      	bne.n	1b6 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6c>
     11c:	428a      	cmp	r2, r1
     11e:	4694      	mov	ip, r2
     120:	d967      	bls.n	1f2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa8>
     122:	fab2 f282 	clz	r2, r2
     126:	b152      	cbz	r2, 13e <__udivmoddi4+0x32>
     128:	fa01 f302 	lsl.w	r3, r1, r2
     12c:	f1c2 0120 	rsb	r1, r2, #32
     130:	fa20 f101 	lsr.w	r1, r0, r1
     134:	fa0c fc02 	lsl.w	ip, ip, r2
     138:	ea41 0e03 	orr.w	lr, r1, r3
     13c:	4094      	lsls	r4, r2
     13e:	ea4f 481c 	mov.w	r8, ip, lsr #16
     142:	0c21      	lsrs	r1, r4, #16
     144:	fbbe f6f8 	udiv	r6, lr, r8
     148:	fa1f f78c 	uxth.w	r7, ip
     14c:	fb08 e316 	mls	r3, r8, r6, lr
     150:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     154:	fb06 f107 	mul.w	r1, r6, r7
     158:	4299      	cmp	r1, r3
     15a:	d90a      	bls.n	172 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x28>
     15c:	eb1c 0303 	adds.w	r3, ip, r3
     160:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
     164:	f080 811e 	bcs.w	3a4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa4>
     168:	4299      	cmp	r1, r3
     16a:	f240 811b 	bls.w	3a4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa4>
     16e:	3e02      	subs	r6, #2
     170:	4463      	add	r3, ip
     172:	1a5b      	subs	r3, r3, r1
     174:	b2a4      	uxth	r4, r4
     176:	fbb3 f0f8 	udiv	r0, r3, r8
     17a:	fb08 3310 	mls	r3, r8, r0, r3
     17e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     182:	fb00 f707 	mul.w	r7, r0, r7
     186:	42a7      	cmp	r7, r4
     188:	d90a      	bls.n	1a0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x56>
     18a:	eb1c 0404 	adds.w	r4, ip, r4
     18e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     192:	f080 8109 	bcs.w	3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     196:	42a7      	cmp	r7, r4
     198:	f240 8106 	bls.w	3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     19c:	4464      	add	r4, ip
     19e:	3802      	subs	r0, #2
     1a0:	1be4      	subs	r4, r4, r7
     1a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     1a6:	2100      	movs	r1, #0
     1a8:	b11d      	cbz	r5, 1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     1aa:	40d4      	lsrs	r4, r2
     1ac:	2300      	movs	r3, #0
     1ae:	e9c5 4300 	strd	r4, r3, [r5]
     1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b6:	428b      	cmp	r3, r1
     1b8:	d908      	bls.n	1cc <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x82>
     1ba:	2d00      	cmp	r5, #0
     1bc:	f000 80ef 	beq.w	39e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x9e>
     1c0:	2100      	movs	r1, #0
     1c2:	e9c5 0600 	strd	r0, r6, [r5]
     1c6:	4608      	mov	r0, r1
     1c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1cc:	fab3 f183 	clz	r1, r3
     1d0:	2900      	cmp	r1, #0
     1d2:	d149      	bne.n	268 <CONFIG_FLASH_SIZE+0x68>
     1d4:	42b3      	cmp	r3, r6
     1d6:	d302      	bcc.n	1de <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x94>
     1d8:	4282      	cmp	r2, r0
     1da:	f200 80ff 	bhi.w	3dc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xdc>
     1de:	1a84      	subs	r4, r0, r2
     1e0:	eb66 0303 	sbc.w	r3, r6, r3
     1e4:	2001      	movs	r0, #1
     1e6:	469e      	mov	lr, r3
     1e8:	2d00      	cmp	r5, #0
     1ea:	d0e2      	beq.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     1ec:	e9c5 4e00 	strd	r4, lr, [r5]
     1f0:	e7df      	b.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     1f2:	b902      	cbnz	r2, 1f6 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xac>
     1f4:	deff      	udf	#255	; 0xff
     1f6:	fab2 f282 	clz	r2, r2
     1fa:	2a00      	cmp	r2, #0
     1fc:	f040 808e 	bne.w	31c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1c>
     200:	eba1 060c 	sub.w	r6, r1, ip
     204:	ea4f 471c 	mov.w	r7, ip, lsr #16
     208:	fa1f f38c 	uxth.w	r3, ip
     20c:	2101      	movs	r1, #1
     20e:	fbb6 fef7 	udiv	lr, r6, r7
     212:	fb07 601e 	mls	r0, r7, lr, r6
     216:	0c26      	lsrs	r6, r4, #16
     218:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     21c:	fb03 f00e 	mul.w	r0, r3, lr
     220:	42b0      	cmp	r0, r6
     222:	d908      	bls.n	236 <CONFIG_FLASH_SIZE+0x36>
     224:	eb1c 0606 	adds.w	r6, ip, r6
     228:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
     22c:	d202      	bcs.n	234 <CONFIG_FLASH_SIZE+0x34>
     22e:	42b0      	cmp	r0, r6
     230:	f200 80d0 	bhi.w	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     234:	46c6      	mov	lr, r8
     236:	1a36      	subs	r6, r6, r0
     238:	b2a4      	uxth	r4, r4
     23a:	fbb6 f0f7 	udiv	r0, r6, r7
     23e:	fb07 6610 	mls	r6, r7, r0, r6
     242:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     246:	fb00 f303 	mul.w	r3, r0, r3
     24a:	42a3      	cmp	r3, r4
     24c:	d908      	bls.n	260 <CONFIG_FLASH_SIZE+0x60>
     24e:	eb1c 0404 	adds.w	r4, ip, r4
     252:	f100 36ff 	add.w	r6, r0, #4294967295	; 0xffffffff
     256:	d202      	bcs.n	25e <CONFIG_FLASH_SIZE+0x5e>
     258:	42a3      	cmp	r3, r4
     25a:	f200 80b8 	bhi.w	3ce <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xce>
     25e:	4630      	mov	r0, r6
     260:	1ae4      	subs	r4, r4, r3
     262:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     266:	e79f      	b.n	1a8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x5e>
     268:	f1c1 0720 	rsb	r7, r1, #32
     26c:	fa22 f407 	lsr.w	r4, r2, r7
     270:	408b      	lsls	r3, r1
     272:	4323      	orrs	r3, r4
     274:	fa06 fc01 	lsl.w	ip, r6, r1
     278:	fa26 f407 	lsr.w	r4, r6, r7
     27c:	fa20 f607 	lsr.w	r6, r0, r7
     280:	ea46 060c 	orr.w	r6, r6, ip
     284:	ea4f 4913 	mov.w	r9, r3, lsr #16
     288:	fa00 f801 	lsl.w	r8, r0, r1
     28c:	fbb4 fef9 	udiv	lr, r4, r9
     290:	0c30      	lsrs	r0, r6, #16
     292:	fa1f fc83 	uxth.w	ip, r3
     296:	fb09 441e 	mls	r4, r9, lr, r4
     29a:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     29e:	fb0e f00c 	mul.w	r0, lr, ip
     2a2:	42a0      	cmp	r0, r4
     2a4:	fa02 f201 	lsl.w	r2, r2, r1
     2a8:	d90a      	bls.n	2c0 <CONFIG_FLASH_SIZE+0xc0>
     2aa:	191c      	adds	r4, r3, r4
     2ac:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
     2b0:	f080 808b 	bcs.w	3ca <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xca>
     2b4:	42a0      	cmp	r0, r4
     2b6:	f240 8088 	bls.w	3ca <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xca>
     2ba:	f1ae 0e02 	sub.w	lr, lr, #2
     2be:	441c      	add	r4, r3
     2c0:	1a24      	subs	r4, r4, r0
     2c2:	b2b6      	uxth	r6, r6
     2c4:	fbb4 f0f9 	udiv	r0, r4, r9
     2c8:	fb09 4410 	mls	r4, r9, r0, r4
     2cc:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     2d0:	fb00 fc0c 	mul.w	ip, r0, ip
     2d4:	45a4      	cmp	ip, r4
     2d6:	d907      	bls.n	2e8 <CONFIG_FLASH_SIZE+0xe8>
     2d8:	191c      	adds	r4, r3, r4
     2da:	f100 36ff 	add.w	r6, r0, #4294967295	; 0xffffffff
     2de:	d270      	bcs.n	3c2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc2>
     2e0:	45a4      	cmp	ip, r4
     2e2:	d96e      	bls.n	3c2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc2>
     2e4:	3802      	subs	r0, #2
     2e6:	441c      	add	r4, r3
     2e8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     2ec:	fba0 e602 	umull	lr, r6, r0, r2
     2f0:	eba4 040c 	sub.w	r4, r4, ip
     2f4:	42b4      	cmp	r4, r6
     2f6:	46f4      	mov	ip, lr
     2f8:	46b1      	mov	r9, r6
     2fa:	d359      	bcc.n	3b0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb0>
     2fc:	d056      	beq.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     2fe:	2d00      	cmp	r5, #0
     300:	d06e      	beq.n	3e0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe0>
     302:	ebb8 030c 	subs.w	r3, r8, ip
     306:	eb64 0409 	sbc.w	r4, r4, r9
     30a:	40cb      	lsrs	r3, r1
     30c:	fa04 f707 	lsl.w	r7, r4, r7
     310:	431f      	orrs	r7, r3
     312:	40cc      	lsrs	r4, r1
     314:	e9c5 7400 	strd	r7, r4, [r5]
     318:	2100      	movs	r1, #0
     31a:	e74a      	b.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     31c:	f1c2 0020 	rsb	r0, r2, #32
     320:	fa24 f100 	lsr.w	r1, r4, r0
     324:	fa0c fc02 	lsl.w	ip, ip, r2
     328:	fa06 f302 	lsl.w	r3, r6, r2
     32c:	fa26 f000 	lsr.w	r0, r6, r0
     330:	ea4f 471c 	mov.w	r7, ip, lsr #16
     334:	ea41 0603 	orr.w	r6, r1, r3
     338:	fbb0 f1f7 	udiv	r1, r0, r7
     33c:	fa1f f38c 	uxth.w	r3, ip
     340:	fb07 0e11 	mls	lr, r7, r1, r0
     344:	0c30      	lsrs	r0, r6, #16
     346:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     34a:	fb01 fe03 	mul.w	lr, r1, r3
     34e:	4586      	cmp	lr, r0
     350:	fa04 f402 	lsl.w	r4, r4, r2
     354:	d908      	bls.n	368 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x68>
     356:	eb1c 0000 	adds.w	r0, ip, r0
     35a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
     35e:	d232      	bcs.n	3c6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc6>
     360:	4586      	cmp	lr, r0
     362:	d930      	bls.n	3c6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc6>
     364:	3902      	subs	r1, #2
     366:	4460      	add	r0, ip
     368:	eba0 000e 	sub.w	r0, r0, lr
     36c:	b2b6      	uxth	r6, r6
     36e:	fbb0 fef7 	udiv	lr, r0, r7
     372:	fb07 001e 	mls	r0, r7, lr, r0
     376:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     37a:	fb0e f003 	mul.w	r0, lr, r3
     37e:	42b0      	cmp	r0, r6
     380:	d909      	bls.n	396 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x96>
     382:	eb1c 0606 	adds.w	r6, ip, r6
     386:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
     38a:	d218      	bcs.n	3be <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbe>
     38c:	42b0      	cmp	r0, r6
     38e:	d916      	bls.n	3be <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbe>
     390:	f1ae 0e02 	sub.w	lr, lr, #2
     394:	4466      	add	r6, ip
     396:	1a36      	subs	r6, r6, r0
     398:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     39c:	e737      	b.n	20e <CONFIG_FLASH_SIZE+0xe>
     39e:	4629      	mov	r1, r5
     3a0:	4628      	mov	r0, r5
     3a2:	e706      	b.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     3a4:	4606      	mov	r6, r0
     3a6:	e6e4      	b.n	172 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x28>
     3a8:	4618      	mov	r0, r3
     3aa:	e6f9      	b.n	1a0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x56>
     3ac:	45f0      	cmp	r8, lr
     3ae:	d2a6      	bcs.n	2fe <CONFIG_FLASH_SIZE+0xfe>
     3b0:	ebbe 0c02 	subs.w	ip, lr, r2
     3b4:	eb66 0303 	sbc.w	r3, r6, r3
     3b8:	3801      	subs	r0, #1
     3ba:	4699      	mov	r9, r3
     3bc:	e79f      	b.n	2fe <CONFIG_FLASH_SIZE+0xfe>
     3be:	46c6      	mov	lr, r8
     3c0:	e7e9      	b.n	396 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x96>
     3c2:	4630      	mov	r0, r6
     3c4:	e790      	b.n	2e8 <CONFIG_FLASH_SIZE+0xe8>
     3c6:	4641      	mov	r1, r8
     3c8:	e7ce      	b.n	368 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x68>
     3ca:	46d6      	mov	lr, sl
     3cc:	e778      	b.n	2c0 <CONFIG_FLASH_SIZE+0xc0>
     3ce:	4464      	add	r4, ip
     3d0:	3802      	subs	r0, #2
     3d2:	e745      	b.n	260 <CONFIG_FLASH_SIZE+0x60>
     3d4:	f1ae 0e02 	sub.w	lr, lr, #2
     3d8:	4466      	add	r6, ip
     3da:	e72c      	b.n	236 <CONFIG_FLASH_SIZE+0x36>
     3dc:	4608      	mov	r0, r1
     3de:	e703      	b.n	1e8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x9e>
     3e0:	4629      	mov	r1, r5
     3e2:	e6e6      	b.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>

000003e4 <__aeabi_idiv0>:
     3e4:	4770      	bx	lr
     3e6:	bf00      	nop

000003e8 <main>:
static uint64 get_rx_timestamp_u64(void);
static void resp_msg_set_ts(uint8 *ts_field, const uint64 ts);


int main(void)
{
     3e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    /* Display application name on console. */
    printk(APP_NAME);
     3ec:	485d      	ldr	r0, [pc, #372]	; (564 <CONFIG_MAIN_STACK_SIZE+0x164>)
     3ee:	f005 fbb7 	bl	5b60 <printk>

    /* Configure DW1000 SPI */
    openspi();
     3f2:	f000 fb39 	bl	a68 <openspi>
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed.
     * After initialisation SPI rate can be increased for optimum performance.
     */
    
    /* Target specific drive of RSTn line into DW1000 low for a period. */
    reset_DW1000();
     3f6:	f005 fb23 	bl	5a40 <reset_DW1000>

    port_set_dw1000_slowrate();
     3fa:	f005 fb3d 	bl	5a78 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR) {
     3fe:	2001      	movs	r0, #1
     400:	f000 fac0 	bl	984 <dwt_initialise>
     404:	3001      	adds	r0, #1
     406:	d108      	bne.n	41a <CONFIG_MAIN_STACK_SIZE+0x1a>
        printk("INIT FAILED");
     408:	4857      	ldr	r0, [pc, #348]	; (568 <CONFIG_MAIN_STACK_SIZE+0x168>)
     40a:	f005 fba9 	bl	5b60 <printk>
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     40e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
     412:	2100      	movs	r1, #0
     414:	f004 fdaa 	bl	4f6c <z_impl_k_sleep>
        k_sleep(K_MSEC(500)); // allow logging to run.
        while (1) { };
     418:	e7fe      	b.n	418 <CONFIG_MAIN_STACK_SIZE+0x18>
    }

    port_set_dw1000_fastrate();
     41a:	f005 fb33 	bl	5a84 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 5 below. */
    dwt_configure(&config);
     41e:	4853      	ldr	r0, [pc, #332]	; (56c <CONFIG_MAIN_STACK_SIZE+0x16c>)
    dwt_setrxtimeout(0);
    //k_yield();

    /* Loop forever responding to ranging requests. */
    while (1) {
        tx_resp_msg[SOURCE_IDX] = my_id;
     420:	4d53      	ldr	r5, [pc, #332]	; (570 <CONFIG_MAIN_STACK_SIZE+0x170>)
     422:	4e54      	ldr	r6, [pc, #336]	; (574 <CONFIG_MAIN_STACK_SIZE+0x174>)
    dwt_configure(&config);
     424:	f000 f8c4 	bl	5b0 <dwt_configure>
    dwt_setleds(1);
     428:	2001      	movs	r0, #1
     42a:	f000 f9c3 	bl	7b4 <dwt_setleds>
    dwt_setrxantennadelay(RX_ANT_DLY);
     42e:	f244 0048 	movw	r0, #16456	; 0x4048
     432:	f005 f9a1 	bl	5778 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
     436:	f244 0048 	movw	r0, #16456	; 0x4048
     43a:	f005 f9a3 	bl	5784 <dwt_settxantennadelay>
    dwt_setrxtimeout(0);
     43e:	2000      	movs	r0, #0
     440:	f000 fa56 	bl	8f0 <dwt_setrxtimeout>
        tx_resp_msg[SOURCE_IDX] = my_id;
     444:	6833      	ldr	r3, [r6, #0]
     446:	722b      	strb	r3, [r5, #8]
        /* Activate reception immediately. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
     448:	2000      	movs	r0, #0
     44a:	f005 fa8a 	bl	5962 <dwt_rxenable>

        /* Poll for reception of a frame or error/timeout. See NOTE 6 below. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & 
     44e:	4c4a      	ldr	r4, [pc, #296]	; (578 <CONFIG_MAIN_STACK_SIZE+0x178>)
     450:	2100      	movs	r1, #0
     452:	200f      	movs	r0, #15
     454:	f005 f941 	bl	56da <dwt_read32bitoffsetreg>
     458:	4220      	tst	r0, r4
     45a:	d0f9      	beq.n	450 <CONFIG_MAIN_STACK_SIZE+0x50>
               (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
        { };

        if (status_reg & SYS_STATUS_RXFCG) {
     45c:	f410 4180 	ands.w	r1, r0, #16384	; 0x4000
     460:	d078      	beq.n	554 <CONFIG_MAIN_STACK_SIZE+0x154>
            uint32 frame_len;

            // printk("received frame\n");

            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
     462:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     466:	2100      	movs	r1, #0
     468:	200f      	movs	r0, #15
     46a:	f005 f990 	bl	578e <dwt_write32bitoffsetreg>

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
     46e:	2100      	movs	r1, #0
     470:	2010      	movs	r0, #16
     472:	f005 f932 	bl	56da <dwt_read32bitoffsetreg>
            if (frame_len <= RX_BUFFER_LEN) {
                dwt_readrxdata(rx_buffer, frame_len, 0);
     476:	4f41      	ldr	r7, [pc, #260]	; (57c <CONFIG_MAIN_STACK_SIZE+0x17c>)
     478:	f3c0 0109 	ubfx	r1, r0, #0, #10
     47c:	2200      	movs	r2, #0
     47e:	4638      	mov	r0, r7
     480:	f005 f91c 	bl	56bc <dwt_readrxdata>
             * it is cleared to simplify the validation of the frame.
             */
            rx_buffer[ALL_MSG_SN_IDX] = 0;
            
            // if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0) {
            if((rx_buffer[DEST_IDX-1]=='W') && ( rx_buffer[DEST_IDX] == my_id)) {
     484:	797b      	ldrb	r3, [r7, #5]
            rx_buffer[ALL_MSG_SN_IDX] = 0;
     486:	2400      	movs	r4, #0
            if((rx_buffer[DEST_IDX-1]=='W') && ( rx_buffer[DEST_IDX] == my_id)) {
     488:	2b57      	cmp	r3, #87	; 0x57
            rx_buffer[ALL_MSG_SN_IDX] = 0;
     48a:	70bc      	strb	r4, [r7, #2]
            if((rx_buffer[DEST_IDX-1]=='W') && ( rx_buffer[DEST_IDX] == my_id)) {
     48c:	d15e      	bne.n	54c <CONFIG_MAIN_STACK_SIZE+0x14c>
     48e:	79ba      	ldrb	r2, [r7, #6]
     490:	6833      	ldr	r3, [r6, #0]
     492:	429a      	cmp	r2, r3
     494:	d15a      	bne.n	54c <CONFIG_MAIN_STACK_SIZE+0x14c>
static uint64 get_rx_timestamp_u64(void)
{
    uint8 ts_tab[5];
    uint64 ts = 0;
    int i;
    dwt_readrxtimestamp(ts_tab);
     496:	4668      	mov	r0, sp
     498:	f005 f919 	bl	56ce <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
     49c:	2104      	movs	r1, #4
    uint64 ts = 0;
     49e:	4623      	mov	r3, r4
     4a0:	4622      	mov	r2, r4
    {
        ts <<= 8;
        ts |= ts_tab[i];
     4a2:	f81d 0001 	ldrb.w	r0, [sp, r1]
        ts <<= 8;
     4a6:	0212      	lsls	r2, r2, #8
    for (i = 4; i >= 0; i--)
     4a8:	3901      	subs	r1, #1
        ts <<= 8;
     4aa:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
        ts |= ts_tab[i];
     4ae:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
    for (i = 4; i >= 0; i--)
     4b2:	d2f6      	bcs.n	4a2 <CONFIG_MAIN_STACK_SIZE+0xa2>
                resp_tx_time = (poll_rx_ts + 
     4b4:	4c32      	ldr	r4, [pc, #200]	; (580 <CONFIG_MAIN_STACK_SIZE+0x180>)
                poll_rx_ts = get_rx_timestamp_u64();
     4b6:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 584 <CONFIG_MAIN_STACK_SIZE+0x184>
                resp_tx_time = (poll_rx_ts + 
     4ba:	191c      	adds	r4, r3, r4
     4bc:	f142 0800 	adc.w	r8, r2, #0
                    (POLL_RX_TO_RESP_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
     4c0:	0a20      	lsrs	r0, r4, #8
                dwt_setdelayedtrxtime(resp_tx_time);
     4c2:	ea40 6008 	orr.w	r0, r0, r8, lsl #24
                poll_rx_ts = get_rx_timestamp_u64();
     4c6:	e9c9 3200 	strd	r3, r2, [r9]
                dwt_setdelayedtrxtime(resp_tx_time);
     4ca:	f005 fa34 	bl	5936 <dwt_setdelayedtrxtime>
                resp_tx_ts = (((uint64)(resp_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY;
     4ce:	f424 73ff 	bic.w	r3, r4, #510	; 0x1fe
     4d2:	f244 0148 	movw	r1, #16456	; 0x4048
     4d6:	f023 0301 	bic.w	r3, r3, #1
     4da:	185b      	adds	r3, r3, r1
     4dc:	f008 02ff 	and.w	r2, r8, #255	; 0xff
     4e0:	4929      	ldr	r1, [pc, #164]	; (588 <CONFIG_MAIN_STACK_SIZE+0x188>)
                tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
     4e2:	4c2a      	ldr	r4, [pc, #168]	; (58c <CONFIG_MAIN_STACK_SIZE+0x18c>)
 * @return none
 */
static void resp_msg_set_ts(uint8 *ts_field, const uint64 ts)
{
    for (int i = 0; i < RESP_MSG_TS_LEN; i++) {
        ts_field[i] = (ts >> (i * 8)) & 0xFF;
     4e4:	73ab      	strb	r3, [r5, #14]
                resp_tx_ts = (((uint64)(resp_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY;
     4e6:	f142 0200 	adc.w	r2, r2, #0
     4ea:	e9c1 3200 	strd	r3, r2, [r1]
                resp_msg_set_ts(&tx_resp_msg[RESP_MSG_POLL_RX_TS_IDX], poll_rx_ts);
     4ee:	f8d9 2000 	ldr.w	r2, [r9]
        ts_field[i] = (ts >> (i * 8)) & 0xFF;
     4f2:	72aa      	strb	r2, [r5, #10]
     4f4:	0a11      	lsrs	r1, r2, #8
     4f6:	72e9      	strb	r1, [r5, #11]
     4f8:	0c11      	lsrs	r1, r2, #16
     4fa:	0e12      	lsrs	r2, r2, #24
     4fc:	736a      	strb	r2, [r5, #13]
     4fe:	0a1a      	lsrs	r2, r3, #8
     500:	73ea      	strb	r2, [r5, #15]
     502:	0c1a      	lsrs	r2, r3, #16
     504:	0e1b      	lsrs	r3, r3, #24
     506:	746b      	strb	r3, [r5, #17]
                tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
     508:	7823      	ldrb	r3, [r4, #0]
        ts_field[i] = (ts >> (i * 8)) & 0xFF;
     50a:	7329      	strb	r1, [r5, #12]
     50c:	742a      	strb	r2, [r5, #16]
                tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
     50e:	70ab      	strb	r3, [r5, #2]
                dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0);
     510:	2200      	movs	r2, #0
                tx_resp_msg[DEST_IDX] = rx_buffer[SOURCE_IDX];
     512:	7a3b      	ldrb	r3, [r7, #8]
     514:	71ab      	strb	r3, [r5, #6]
                dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0);
     516:	4629      	mov	r1, r5
     518:	2014      	movs	r0, #20
     51a:	f005 f89f 	bl	565c <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1); 
     51e:	2014      	movs	r0, #20
     520:	2201      	movs	r2, #1
     522:	2100      	movs	r1, #0
     524:	f000 f836 	bl	594 <dwt_writetxfctrl>
                ret = dwt_starttx(DWT_START_TX_DELAYED);
     528:	2001      	movs	r0, #1
     52a:	f000 f97f 	bl	82c <dwt_starttx>
                if (ret == DWT_SUCCESS) {
     52e:	b9a8      	cbnz	r0, 55c <CONFIG_MAIN_STACK_SIZE+0x15c>
                    while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
     530:	2100      	movs	r1, #0
     532:	200f      	movs	r0, #15
     534:	f005 f8d1 	bl	56da <dwt_read32bitoffsetreg>
     538:	0603      	lsls	r3, r0, #24
     53a:	d5f9      	bpl.n	530 <CONFIG_MAIN_STACK_SIZE+0x130>
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
     53c:	2280      	movs	r2, #128	; 0x80
     53e:	2100      	movs	r1, #0
     540:	200f      	movs	r0, #15
     542:	f005 f924 	bl	578e <dwt_write32bitoffsetreg>
                    frame_seq_nb++;
     546:	7823      	ldrb	r3, [r4, #0]
     548:	3301      	adds	r3, #1
     54a:	7023      	strb	r3, [r4, #0]
        Sleep(RNG_DELAY_MS);
     54c:	2002      	movs	r0, #2
     54e:	f005 fa6b 	bl	5a28 <Sleep>
        tx_resp_msg[SOURCE_IDX] = my_id;
     552:	e777      	b.n	444 <CONFIG_MAIN_STACK_SIZE+0x44>
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR);
     554:	4a0e      	ldr	r2, [pc, #56]	; (590 <CONFIG_MAIN_STACK_SIZE+0x190>)
     556:	200f      	movs	r0, #15
     558:	f005 f919 	bl	578e <dwt_write32bitoffsetreg>
            dwt_rxreset();
     55c:	f005 fa28 	bl	59b0 <dwt_rxreset>
     560:	e7f4      	b.n	54c <CONFIG_MAIN_STACK_SIZE+0x14c>
     562:	bf00      	nop
     564:	000070ce 	.word	0x000070ce
     568:	000070e0 	.word	0x000070e0
     56c:	20000084 	.word	0x20000084
     570:	20000090 	.word	0x20000090
     574:	20000000 	.word	0x20000000
     578:	2405d000 	.word	0x2405d000
     57c:	20000659 	.word	0x20000659
     580:	044c0000 	.word	0x044c0000
     584:	20000140 	.word	0x20000140
     588:	20000148 	.word	0x20000148
     58c:	20000658 	.word	0x20000658
     590:	24059000 	.word	0x24059000

00000594 <dwt_writetxfctrl>:
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | (txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | (ranging << TX_FCTRL_TR_SHFT);
     594:	4b05      	ldr	r3, [pc, #20]	; (5ac <dwt_writetxfctrl+0x18>)
     596:	681b      	ldr	r3, [r3, #0]
     598:	68db      	ldr	r3, [r3, #12]
     59a:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
     59e:	4303      	orrs	r3, r0
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
     5a0:	ea43 5281 	orr.w	r2, r3, r1, lsl #22
     5a4:	2008      	movs	r0, #8
     5a6:	2100      	movs	r1, #0
     5a8:	f005 b8f1 	b.w	578e <dwt_write32bitoffsetreg>
     5ac:	20000004 	.word	0x20000004

000005b0 <dwt_configure>:
{
     5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8 chan = config->chan ;
     5b4:	7806      	ldrb	r6, [r0, #0]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
     5b6:	7847      	ldrb	r7, [r0, #1]
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
     5b8:	7942      	ldrb	r2, [r0, #5]
     5ba:	4b72      	ldr	r3, [pc, #456]	; (784 <dwt_configure+0x1d4>)
    uint8 prfIndex = config->prf - DWT_PRF_16M;
     5bc:	3f01      	subs	r7, #1
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
     5be:	2e04      	cmp	r6, #4
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
     5c0:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
{
     5c4:	4604      	mov	r4, r0
    uint8 prfIndex = config->prf - DWT_PRF_16M;
     5c6:	b2ff      	uxtb	r7, r7
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
     5c8:	f000 80be 	beq.w	748 <dwt_configure+0x198>
     5cc:	1ff3      	subs	r3, r6, #7
     5ce:	f1d3 0900 	rsbs	r9, r3, #0
     5d2:	eb49 0903 	adc.w	r9, r9, r3
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
     5d6:	4d6c      	ldr	r5, [pc, #432]	; (788 <dwt_configure+0x1d8>)
    if(DWT_BR_110K == config->dataRate)
     5d8:	79e1      	ldrb	r1, [r4, #7]
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
     5da:	682b      	ldr	r3, [r5, #0]
     5dc:	695a      	ldr	r2, [r3, #20]
    if(DWT_BR_110K == config->dataRate)
     5de:	2900      	cmp	r1, #0
     5e0:	f040 80b5 	bne.w	74e <dwt_configure+0x19e>
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
     5e4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
     5e8:	615a      	str	r2, [r3, #20]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
     5ea:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    pdw1000local->longFrames = config->phrMode ;
     5ee:	7a21      	ldrb	r1, [r4, #8]
    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
     5f0:	695a      	ldr	r2, [r3, #20]
    pdw1000local->longFrames = config->phrMode ;
     5f2:	7219      	strb	r1, [r3, #8]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & (config->phrMode << SYS_CFG_PHR_MODE_SHFT));
     5f4:	0409      	lsls	r1, r1, #16
     5f6:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
     5fa:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & (config->phrMode << SYS_CFG_PHR_MODE_SHFT));
     5fe:	430a      	orrs	r2, r1
     600:	615a      	str	r2, [r3, #20]
    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
     602:	2100      	movs	r1, #0
     604:	2004      	movs	r0, #4
     606:	f005 f8c2 	bl	578e <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
     60a:	4642      	mov	r2, r8
     60c:	f642 0104 	movw	r1, #10244	; 0x2804
     610:	202e      	movs	r0, #46	; 0x2e
     612:	f005 f8a2 	bl	575a <dwt_write16bitoffsetreg>
    _dwt_configlde(prfIndex);
     616:	4638      	mov	r0, r7
     618:	f005 f8f1 	bl	57fe <_dwt_configlde>
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
     61c:	4b5b      	ldr	r3, [pc, #364]	; (78c <dwt_configure+0x1dc>)
     61e:	f813 8006 	ldrb.w	r8, [r3, r6]
     622:	4b5b      	ldr	r3, [pc, #364]	; (790 <dwt_configure+0x1e0>)
     624:	2107      	movs	r1, #7
     626:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
     62a:	202b      	movs	r0, #43	; 0x2b
     62c:	f005 f8af 	bl	578e <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
     630:	4b58      	ldr	r3, [pc, #352]	; (794 <dwt_configure+0x1e4>)
     632:	210b      	movs	r1, #11
     634:	f813 2008 	ldrb.w	r2, [r3, r8]
     638:	202b      	movs	r0, #43	; 0x2b
     63a:	f005 f881 	bl	5740 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
     63e:	4b56      	ldr	r3, [pc, #344]	; (798 <dwt_configure+0x1e8>)
     640:	210b      	movs	r1, #11
     642:	f813 2009 	ldrb.w	r2, [r3, r9]
     646:	2028      	movs	r0, #40	; 0x28
     648:	f005 f87a 	bl	5740 <dwt_write8bitoffsetreg>
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
     64c:	4b53      	ldr	r3, [pc, #332]	; (79c <dwt_configure+0x1ec>)
     64e:	210c      	movs	r1, #12
     650:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
     654:	2028      	movs	r0, #40	; 0x28
     656:	f005 f89a 	bl	578e <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
     65a:	79e2      	ldrb	r2, [r4, #7]
     65c:	79a3      	ldrb	r3, [r4, #6]
     65e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
     662:	4a4f      	ldr	r2, [pc, #316]	; (7a0 <dwt_configure+0x1f0>)
     664:	2102      	movs	r1, #2
     666:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
     66a:	2027      	movs	r0, #39	; 0x27
     66c:	f005 f875 	bl	575a <dwt_write16bitoffsetreg>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
     670:	4b4c      	ldr	r3, [pc, #304]	; (7a4 <dwt_configure+0x1f4>)
     672:	2104      	movs	r1, #4
     674:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
     678:	2027      	movs	r0, #39	; 0x27
     67a:	f005 f86e 	bl	575a <dwt_write16bitoffsetreg>
    if(config->dataRate == DWT_BR_110K)
     67e:	79e3      	ldrb	r3, [r4, #7]
     680:	2b00      	cmp	r3, #0
     682:	d168      	bne.n	756 <dwt_configure+0x1a6>
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
     684:	2264      	movs	r2, #100	; 0x64
     686:	2106      	movs	r1, #6
     688:	2027      	movs	r0, #39	; 0x27
     68a:	f005 f866 	bl	575a <dwt_write16bitoffsetreg>
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
     68e:	78e3      	ldrb	r3, [r4, #3]
     690:	4a45      	ldr	r2, [pc, #276]	; (7a8 <dwt_configure+0x1f8>)
     692:	eb03 0387 	add.w	r3, r3, r7, lsl #2
     696:	2108      	movs	r1, #8
     698:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     69c:	2027      	movs	r0, #39	; 0x27
     69e:	f005 f876 	bl	578e <dwt_write32bitoffsetreg>
    if(config->sfdTO == 0)
     6a2:	8963      	ldrh	r3, [r4, #10]
     6a4:	b913      	cbnz	r3, 6ac <dwt_configure+0xfc>
        config->sfdTO = DWT_SFDTOC_DEF;
     6a6:	f241 0341 	movw	r3, #4161	; 0x1041
     6aa:	8163      	strh	r3, [r4, #10]
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
     6ac:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 7ac <dwt_configure+0x1fc>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
     6b0:	8962      	ldrh	r2, [r4, #10]
     6b2:	2120      	movs	r1, #32
     6b4:	2027      	movs	r0, #39	; 0x27
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
     6b6:	eb08 0747 	add.w	r7, r8, r7, lsl #1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
     6ba:	f005 f84e 	bl	575a <dwt_write16bitoffsetreg>
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
     6be:	f8d8 2000 	ldr.w	r2, [r8]
     6c2:	210c      	movs	r1, #12
     6c4:	2023      	movs	r0, #35	; 0x23
     6c6:	f005 f862 	bl	578e <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
     6ca:	2023      	movs	r0, #35	; 0x23
     6cc:	88ba      	ldrh	r2, [r7, #4]
     6ce:	2104      	movs	r1, #4
     6d0:	f005 f843 	bl	575a <dwt_write16bitoffsetreg>
    if(config->nsSFD)
     6d4:	79a0      	ldrb	r0, [r4, #6]
     6d6:	2800      	cmp	r0, #0
     6d8:	d052      	beq.n	780 <dwt_configure+0x1d0>
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
     6da:	79e3      	ldrb	r3, [r4, #7]
     6dc:	4a34      	ldr	r2, [pc, #208]	; (7b0 <dwt_configure+0x200>)
     6de:	2021      	movs	r0, #33	; 0x21
     6e0:	5cd2      	ldrb	r2, [r2, r3]
     6e2:	2100      	movs	r1, #0
     6e4:	f005 f82c 	bl	5740 <dwt_write8bitoffsetreg>
        useDWnsSFD = 1 ;
     6e8:	2201      	movs	r2, #1
        nsSfd_result = 3 ;
     6ea:	2003      	movs	r0, #3
              (CHAN_CTRL_RX_PCOD_MASK & (config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
     6ec:	7961      	ldrb	r1, [r4, #5]
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
     6ee:	f006 030f 	and.w	r3, r6, #15
     6f2:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
              (CHAN_CTRL_RXFPRF_MASK & (config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
     6f6:	7861      	ldrb	r1, [r4, #1]
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
     6f8:	0136      	lsls	r6, r6, #4
     6fa:	b2f6      	uxtb	r6, r6
              (CHAN_CTRL_RXFPRF_MASK & (config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
     6fc:	0489      	lsls	r1, r1, #18
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
     6fe:	4333      	orrs	r3, r6
              (CHAN_CTRL_RXFPRF_MASK & (config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
     700:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
     704:	430b      	orrs	r3, r1
              (CHAN_CTRL_TX_PCOD_MASK & (config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
     706:	7921      	ldrb	r1, [r4, #4]
     708:	0589      	lsls	r1, r1, #22
     70a:	f001 61f8 	and.w	r1, r1, #130023424	; 0x7c00000
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
     70e:	430b      	orrs	r3, r1
     710:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
     714:	ea43 4242 	orr.w	r2, r3, r2, lsl #17
     718:	2100      	movs	r1, #0
     71a:	201f      	movs	r0, #31
     71c:	f005 f837 	bl	578e <dwt_write32bitoffsetreg>
    pdw1000local->txFCTRL = ((config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | (config->dataRate << TX_FCTRL_TXBR_SHFT);
     720:	78a2      	ldrb	r2, [r4, #2]
     722:	7863      	ldrb	r3, [r4, #1]
     724:	4313      	orrs	r3, r2
     726:	79e2      	ldrb	r2, [r4, #7]
     728:	0352      	lsls	r2, r2, #13
     72a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
     72e:	682b      	ldr	r3, [r5, #0]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
     730:	2100      	movs	r1, #0
    pdw1000local->txFCTRL = ((config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | (config->dataRate << TX_FCTRL_TXBR_SHFT);
     732:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
     734:	2008      	movs	r0, #8
     736:	f005 f82a 	bl	578e <dwt_write32bitoffsetreg>
} // end dwt_configure()
     73a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
     73e:	2242      	movs	r2, #66	; 0x42
     740:	2100      	movs	r1, #0
     742:	200d      	movs	r0, #13
     744:	f004 bffc 	b.w	5740 <dwt_write8bitoffsetreg>
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
     748:	f04f 0901 	mov.w	r9, #1
     74c:	e743      	b.n	5d6 <dwt_configure+0x26>
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
     74e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
     752:	615a      	str	r2, [r3, #20]
     754:	e74b      	b.n	5ee <dwt_configure+0x3e>
        if(config->txPreambLength == DWT_PLEN_64)
     756:	78a3      	ldrb	r3, [r4, #2]
     758:	2b04      	cmp	r3, #4
     75a:	d10a      	bne.n	772 <dwt_configure+0x1c2>
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
     75c:	2210      	movs	r2, #16
     75e:	2106      	movs	r1, #6
     760:	2027      	movs	r0, #39	; 0x27
     762:	f004 fffa 	bl	575a <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
     766:	2210      	movs	r2, #16
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
     768:	2126      	movs	r1, #38	; 0x26
     76a:	2027      	movs	r0, #39	; 0x27
     76c:	f004 ffe8 	bl	5740 <dwt_write8bitoffsetreg>
     770:	e78d      	b.n	68e <dwt_configure+0xde>
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
     772:	2220      	movs	r2, #32
     774:	2106      	movs	r1, #6
     776:	2027      	movs	r0, #39	; 0x27
     778:	f004 ffef 	bl	575a <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
     77c:	2228      	movs	r2, #40	; 0x28
     77e:	e7f3      	b.n	768 <dwt_configure+0x1b8>
    uint8 useDWnsSFD = 0;
     780:	4602      	mov	r2, r0
     782:	e7b3      	b.n	6ec <dwt_configure+0x13c>
     784:	00007090 	.word	0x00007090
     788:	20000004 	.word	0x20000004
     78c:	000070ec 	.word	0x000070ec
     790:	00006ef0 	.word	0x00006ef0
     794:	000070f7 	.word	0x000070f7
     798:	000070fd 	.word	0x000070fd
     79c:	00006f08 	.word	0x00006f08
     7a0:	000070c2 	.word	0x000070c2
     7a4:	0000708c 	.word	0x0000708c
     7a8:	00006ed0 	.word	0x00006ed0
     7ac:	00006ec8 	.word	0x00006ec8
     7b0:	000070f4 	.word	0x000070f4

000007b4 <dwt_setleds>:
 * output parameters none
 *
 * no return value
 */
void dwt_setleds(uint8 mode)
{
     7b4:	b538      	push	{r3, r4, r5, lr}
    uint32 reg;

    if (mode & DWT_LEDS_ENABLE)
     7b6:	f010 0501 	ands.w	r5, r0, #1
{
     7ba:	4604      	mov	r4, r0
    if (mode & DWT_LEDS_ENABLE)
     7bc:	d029      	beq.n	812 <CONFIG_ISR_STACK_SIZE+0x12>
    {
        // Set up MFIO for LED output.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
     7be:	2100      	movs	r1, #0
     7c0:	2026      	movs	r0, #38	; 0x26
     7c2:	f004 ff8a 	bl	56da <dwt_read32bitoffsetreg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
     7c6:	f420 5270 	bic.w	r2, r0, #15360	; 0x3c00
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
     7ca:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
     7ce:	2100      	movs	r1, #0
     7d0:	2026      	movs	r0, #38	; 0x26
     7d2:	f004 ffdc 	bl	578e <dwt_write32bitoffsetreg>

        // Enable LP Oscillator to run from counter and turn on de-bounce clock.
        reg = dwt_read32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET);
     7d6:	2100      	movs	r1, #0
     7d8:	2036      	movs	r0, #54	; 0x36
     7da:	f004 ff7e 	bl	56da <dwt_read32bitoffsetreg>
        reg |= (PMSC_CTRL0_GPDCE | PMSC_CTRL0_KHZCLEN);
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET, reg);
     7de:	2100      	movs	r1, #0
     7e0:	f440 0204 	orr.w	r2, r0, #8650752	; 0x840000
     7e4:	2036      	movs	r0, #54	; 0x36
     7e6:	f004 ffd2 	bl	578e <dwt_write32bitoffsetreg>
        // Enable LEDs to blink and set default blink time.
        reg = PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF;
        // Make LEDs blink once if requested.
        if (mode & DWT_LEDS_INIT_BLINK)
        {
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
     7ea:	f014 0402 	ands.w	r4, r4, #2
        }
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
     7ee:	4a0e      	ldr	r2, [pc, #56]	; (828 <CONFIG_ISR_STACK_SIZE+0x28>)
     7f0:	f04f 0128 	mov.w	r1, #40	; 0x28
     7f4:	bf08      	it	eq
     7f6:	f44f 7288 	moveq.w	r2, #272	; 0x110
     7fa:	2036      	movs	r0, #54	; 0x36
     7fc:	f004 ffc7 	bl	578e <dwt_write32bitoffsetreg>
        // Clear force blink bits if needed.
        if(mode & DWT_LEDS_INIT_BLINK)
     800:	b184      	cbz	r4, 824 <CONFIG_ISR_STACK_SIZE+0x24>
        {
            reg &= ~PMSC_LEDC_BLINK_NOW_ALL;
            dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
     802:	f44f 7288 	mov.w	r2, #272	; 0x110
     806:	2128      	movs	r1, #40	; 0x28
     808:	2036      	movs	r0, #54	; 0x36
        // Clear the GPIO bits that are used for LED control.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
    }
}
     80a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
     80e:	f004 bfbe 	b.w	578e <dwt_write32bitoffsetreg>
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
     812:	4629      	mov	r1, r5
     814:	2026      	movs	r0, #38	; 0x26
     816:	f004 ff60 	bl	56da <dwt_read32bitoffsetreg>
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
     81a:	4629      	mov	r1, r5
     81c:	f420 5270 	bic.w	r2, r0, #15360	; 0x3c00
     820:	2026      	movs	r0, #38	; 0x26
     822:	e7f2      	b.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
}
     824:	bd38      	pop	{r3, r4, r5, pc}
     826:	bf00      	nop
     828:	000f0110 	.word	0x000f0110

0000082c <dwt_starttx>:
{
    int retval = DWT_SUCCESS ;
    uint8 temp  = 0x00;
    uint16 checkTxOK = 0 ;

    if(mode & DWT_RESPONSE_EXPECTED)
     82c:	f010 0202 	ands.w	r2, r0, #2
{
     830:	b510      	push	{r4, lr}
     832:	4604      	mov	r4, r0
    if(mode & DWT_RESPONSE_EXPECTED)
     834:	d009      	beq.n	84a <dwt_starttx+0x1e>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
     836:	2280      	movs	r2, #128	; 0x80
     838:	2100      	movs	r1, #0
     83a:	200d      	movs	r0, #13
     83c:	f004 ff80 	bl	5740 <dwt_write8bitoffsetreg>
        pdw1000local->wait4resp = 1;
     840:	4b14      	ldr	r3, [pc, #80]	; (894 <dwt_starttx+0x68>)
     842:	681b      	ldr	r3, [r3, #0]
     844:	2201      	movs	r2, #1
     846:	769a      	strb	r2, [r3, #26]
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
     848:	2280      	movs	r2, #128	; 0x80
    }

    if (mode & DWT_START_TX_DELAYED)
     84a:	f014 0401 	ands.w	r4, r4, #1
     84e:	d018      	beq.n	882 <dwt_starttx+0x56>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
     850:	f042 0206 	orr.w	r2, r2, #6
     854:	2100      	movs	r1, #0
     856:	200d      	movs	r0, #13
     858:	f004 ff72 	bl	5740 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
     85c:	2103      	movs	r1, #3
     85e:	200f      	movs	r0, #15
     860:	f004 ff50 	bl	5704 <dwt_read16bitoffsetreg>
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
     864:	f410 6081 	ands.w	r0, r0, #1032	; 0x408
     868:	d00a      	beq.n	880 <dwt_starttx+0x54>
        else
        {
            // I am taking DSHP set to Indicate that the TXDLYS was set too late for the specified DX_TIME.
            // Remedial Action - (a) cancel delayed send
            temp = (uint8)SYS_CTRL_TRXOFF; // This assumes the bit is in the lowest byte
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
     86a:	2240      	movs	r2, #64	; 0x40
     86c:	200d      	movs	r0, #13
     86e:	2100      	movs	r1, #0
     870:	f004 ff66 	bl	5740 <dwt_write8bitoffsetreg>
            // Note event Delayed TX Time too Late
            // Could fall through to start a normal send (below) just sending late.....
            // ... instead return and assume return value of 1 will be used to detect and recover from the issue.
            pdw1000local->wait4resp = 0;
     874:	4b07      	ldr	r3, [pc, #28]	; (894 <dwt_starttx+0x68>)
     876:	681b      	ldr	r3, [r3, #0]
     878:	2200      	movs	r2, #0
     87a:	769a      	strb	r2, [r3, #26]
            retval = DWT_ERROR ; // Failed !
     87c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
    }

    return retval;

} // end dwt_starttx()
     880:	bd10      	pop	{r4, pc}
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
     882:	200d      	movs	r0, #13
     884:	f042 0202 	orr.w	r2, r2, #2
     888:	4621      	mov	r1, r4
     88a:	f004 ff59 	bl	5740 <dwt_write8bitoffsetreg>
    int retval = DWT_SUCCESS ;
     88e:	4620      	mov	r0, r4
     890:	e7f6      	b.n	880 <dwt_starttx+0x54>
     892:	bf00      	nop
     894:	20000004 	.word	0x20000004

00000898 <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
     898:	b538      	push	{r3, r4, r5, lr}
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
     89a:	2100      	movs	r1, #0
     89c:	200e      	movs	r0, #14
     89e:	f004 ff1c 	bl	56da <dwt_read32bitoffsetreg>
     8a2:	4605      	mov	r5, r0

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
     8a4:	f005 f91a 	bl	5adc <decamutexon>

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
     8a8:	2200      	movs	r2, #0
     8aa:	4611      	mov	r1, r2
    stat = decamutexon() ;
     8ac:	4604      	mov	r4, r0
    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
     8ae:	200e      	movs	r0, #14
     8b0:	f004 ff6d 	bl	578e <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
     8b4:	2240      	movs	r2, #64	; 0x40
     8b6:	2100      	movs	r1, #0
     8b8:	200d      	movs	r0, #13
     8ba:	f004 ff41 	bl	5740 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
     8be:	4a0a      	ldr	r2, [pc, #40]	; (8e8 <dwt_forcetrxoff+0x50>)
     8c0:	2100      	movs	r1, #0
     8c2:	200f      	movs	r0, #15
     8c4:	f004 ff63 	bl	578e <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
     8c8:	f005 f83a 	bl	5940 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
     8cc:	462a      	mov	r2, r5
     8ce:	2100      	movs	r1, #0
     8d0:	200e      	movs	r0, #14
     8d2:	f004 ff5c 	bl	578e <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
     8d6:	4620      	mov	r0, r4
     8d8:	f005 f909 	bl	5aee <decamutexoff>
    pdw1000local->wait4resp = 0;
     8dc:	4b03      	ldr	r3, [pc, #12]	; (8ec <dwt_forcetrxoff+0x54>)
     8de:	681b      	ldr	r3, [r3, #0]
     8e0:	2200      	movs	r2, #0
     8e2:	769a      	strb	r2, [r3, #26]

} // end deviceforcetrxoff()
     8e4:	bd38      	pop	{r3, r4, r5, pc}
     8e6:	bf00      	nop
     8e8:	2427fff8 	.word	0x2427fff8
     8ec:	20000004 	.word	0x20000004

000008f0 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
     8f0:	b570      	push	{r4, r5, r6, lr}
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
     8f2:	2103      	movs	r1, #3
{
     8f4:	4605      	mov	r5, r0
    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
     8f6:	2004      	movs	r0, #4
     8f8:	f004 ff15 	bl	5726 <dwt_read8bitoffsetreg>
     8fc:	4e0e      	ldr	r6, [pc, #56]	; (938 <dwt_setrxtimeout+0x48>)
     8fe:	4604      	mov	r4, r0

    if(time > 0)
     900:	b195      	cbz	r5, 928 <dwt_setrxtimeout+0x38>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
     902:	462a      	mov	r2, r5
     904:	2100      	movs	r1, #0
     906:	200c      	movs	r0, #12
     908:	f004 ff27 	bl	575a <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
     90c:	6832      	ldr	r2, [r6, #0]
     90e:	6953      	ldr	r3, [r2, #20]
     910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     914:	6153      	str	r3, [r2, #20]
        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
     916:	f044 0210 	orr.w	r2, r4, #16

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
     91a:	b2d2      	uxtb	r2, r2
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
     91c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
     920:	2103      	movs	r1, #3
     922:	2004      	movs	r0, #4
     924:	f004 bf0c 	b.w	5740 <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
     928:	6832      	ldr	r2, [r6, #0]
     92a:	6953      	ldr	r3, [r2, #20]
     92c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     930:	6153      	str	r3, [r2, #20]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
     932:	f000 02ef 	and.w	r2, r0, #239	; 0xef
     936:	e7f1      	b.n	91c <dwt_setrxtimeout+0x2c>
     938:	20000004 	.word	0x20000004

0000093c <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
     93c:	b508      	push	{r3, lr}
    _dwt_disablesequencing();
     93e:	f004 ffef 	bl	5920 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
     942:	2200      	movs	r2, #0
     944:	4611      	mov	r1, r2
     946:	202c      	movs	r0, #44	; 0x2c
     948:	f004 ff07 	bl	575a <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
     94c:	2200      	movs	r2, #0
     94e:	2106      	movs	r1, #6
     950:	202c      	movs	r0, #44	; 0x2c
     952:	f004 fef5 	bl	5740 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
     956:	f004 ff45 	bl	57e4 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
     95a:	2200      	movs	r2, #0
     95c:	2103      	movs	r1, #3
     95e:	2036      	movs	r0, #54	; 0x36
     960:	f004 feee 	bl	5740 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
     964:	2001      	movs	r0, #1
     966:	f005 f8c6 	bl	5af6 <deca_sleep>

    // Clear reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
     96a:	22f0      	movs	r2, #240	; 0xf0
     96c:	2103      	movs	r1, #3
     96e:	2036      	movs	r0, #54	; 0x36
     970:	f004 fee6 	bl	5740 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
     974:	4b02      	ldr	r3, [pc, #8]	; (980 <dwt_softreset+0x44>)
     976:	681b      	ldr	r3, [r3, #0]
     978:	2200      	movs	r2, #0
     97a:	769a      	strb	r2, [r3, #26]
}
     97c:	bd08      	pop	{r3, pc}
     97e:	bf00      	nop
     980:	20000004 	.word	0x20000004

00000984 <dwt_initialise>:
{
     984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pdw1000local->dblbuffon = 0; // Double buffer mode off by default
     986:	4d36      	ldr	r5, [pc, #216]	; (a60 <dwt_initialise+0xdc>)
     988:	682b      	ldr	r3, [r5, #0]
     98a:	2400      	movs	r4, #0
    pdw1000local->cbRxOk = NULL;
     98c:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
    pdw1000local->cbRxErr = NULL;
     990:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
    pdw1000local->dblbuffon = 0; // Double buffer mode off by default
     994:	745c      	strb	r4, [r3, #17]
    pdw1000local->wait4resp = 0;
     996:	769c      	strb	r4, [r3, #26]
    pdw1000local->sleep_mode = 0;
     998:	831c      	strh	r4, [r3, #24]
{
     99a:	4606      	mov	r6, r0
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
     99c:	f004 feae 	bl	56fc <dwt_readdevid>
     9a0:	4b30      	ldr	r3, [pc, #192]	; (a64 <dwt_initialise+0xe0>)
     9a2:	4298      	cmp	r0, r3
     9a4:	d159      	bne.n	a5a <dwt_initialise+0xd6>
    dwt_softreset();
     9a6:	f7ff ffc9 	bl	93c <dwt_softreset>
    _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
     9aa:	4620      	mov	r0, r4
     9ac:	f004 ff3c 	bl	5828 <_dwt_enableclocks>
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
     9b0:	4621      	mov	r1, r4
     9b2:	2204      	movs	r2, #4
     9b4:	2024      	movs	r0, #36	; 0x24
     9b6:	f004 fec3 	bl	5740 <dwt_write8bitoffsetreg>
    otp_addr = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
     9ba:	201e      	movs	r0, #30
     9bc:	f004 fefc 	bl	57b8 <_dwt_otpread>
    pdw1000local->otprev = (otp_addr >> 8) & 0xff;            // OTP revision is next byte
     9c0:	682b      	ldr	r3, [r5, #0]
     9c2:	f3c0 2207 	ubfx	r2, r0, #8, #8
    otp_addr = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
     9c6:	4604      	mov	r4, r0
    pdw1000local->otprev = (otp_addr >> 8) & 0xff;            // OTP revision is next byte
     9c8:	725a      	strb	r2, [r3, #9]
    ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
     9ca:	2004      	movs	r0, #4
     9cc:	f004 fef4 	bl	57b8 <_dwt_otpread>
    if((ldo_tune & 0xFF) != 0)
     9d0:	b2c0      	uxtb	r0, r0
     9d2:	b148      	cbz	r0, 9e8 <dwt_initialise+0x64>
        dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDE kick bit
     9d4:	2202      	movs	r2, #2
     9d6:	2112      	movs	r1, #18
     9d8:	202d      	movs	r0, #45	; 0x2d
     9da:	f004 feb1 	bl	5740 <dwt_write8bitoffsetreg>
        pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
     9de:	682a      	ldr	r2, [r5, #0]
     9e0:	8b13      	ldrh	r3, [r2, #24]
     9e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     9e6:	8313      	strh	r3, [r2, #24]
    pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
     9e8:	2006      	movs	r0, #6
     9ea:	682f      	ldr	r7, [r5, #0]
     9ec:	f004 fee4 	bl	57b8 <_dwt_otpread>
     9f0:	6038      	str	r0, [r7, #0]
    pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
     9f2:	2007      	movs	r0, #7
     9f4:	682f      	ldr	r7, [r5, #0]
     9f6:	f004 fedf 	bl	57b8 <_dwt_otpread>
    pdw1000local->init_xtrim = otp_addr & 0x1F;
     9fa:	682b      	ldr	r3, [r5, #0]
    pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
     9fc:	6078      	str	r0, [r7, #4]
    if (!pdw1000local->init_xtrim) // A value of 0 means that the crystal has not been trimmed
     9fe:	f014 041f 	ands.w	r4, r4, #31
        pdw1000local->init_xtrim = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
     a02:	bf0a      	itet	eq
     a04:	2210      	moveq	r2, #16
    pdw1000local->init_xtrim = otp_addr & 0x1F;
     a06:	741c      	strbne	r4, [r3, #16]
        pdw1000local->init_xtrim = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
     a08:	741a      	strbeq	r2, [r3, #16]
    dwt_setxtaltrim(pdw1000local->init_xtrim);
     a0a:	7c18      	ldrb	r0, [r3, #16]
     a0c:	f004 ffdd 	bl	59ca <dwt_setxtaltrim>
    if(config & DWT_LOADUCODE)
     a10:	07f3      	lsls	r3, r6, #31
     a12:	d516      	bpl.n	a42 <dwt_initialise+0xbe>
        _dwt_loaducodefromrom();
     a14:	f004 ff72 	bl	58fc <_dwt_loaducodefromrom>
        pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up
     a18:	682a      	ldr	r2, [r5, #0]
     a1a:	8b13      	ldrh	r3, [r2, #24]
     a1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     a20:	8313      	strh	r3, [r2, #24]
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
     a22:	2001      	movs	r0, #1
     a24:	f004 ff00 	bl	5828 <_dwt_enableclocks>
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
     a28:	2200      	movs	r2, #0
     a2a:	210a      	movs	r1, #10
     a2c:	202c      	movs	r0, #44	; 0x2c
     a2e:	f004 fe87 	bl	5740 <dwt_write8bitoffsetreg>
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
     a32:	2100      	movs	r1, #0
     a34:	2004      	movs	r0, #4
     a36:	682c      	ldr	r4, [r5, #0]
     a38:	f004 fe4f 	bl	56da <dwt_read32bitoffsetreg>
     a3c:	6160      	str	r0, [r4, #20]
    return DWT_SUCCESS ;
     a3e:	2000      	movs	r0, #0
} // end dwt_initialise()
     a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
     a42:	2105      	movs	r1, #5
     a44:	2036      	movs	r0, #54	; 0x36
     a46:	f004 fe5d 	bl	5704 <dwt_read16bitoffsetreg>
        rega &= 0xFDFF ; // Clear LDERUN bit
     a4a:	f420 7200 	bic.w	r2, r0, #512	; 0x200
        dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
     a4e:	b292      	uxth	r2, r2
     a50:	2105      	movs	r1, #5
     a52:	2036      	movs	r0, #54	; 0x36
     a54:	f004 fe81 	bl	575a <dwt_write16bitoffsetreg>
     a58:	e7e3      	b.n	a22 <dwt_initialise+0x9e>
        return DWT_ERROR ;
     a5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a5e:	e7ef      	b.n	a40 <dwt_initialise+0xbc>
     a60:	20000004 	.word	0x20000004
     a64:	deca0130 	.word	0xdeca0130

00000a68 <openspi>:
 *
 * Low level abstract function to open and initialise access to the SPI device.
 * returns 0 for success, or -1 for error
 */
int openspi(void)
{
     a68:	b570      	push	{r4, r5, r6, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     a6a:	4820      	ldr	r0, [pc, #128]	; (aec <openspi+0x84>)
     a6c:	f003 fd16 	bl	449c <z_impl_device_get_binding>
    /* Propagate CS config into all spi_cfgs[] elements */
    cs_ctrl.gpio_dev = device_get_binding(DT_LABEL(DT_PHANDLE_BY_IDX(DT_NODELABEL(spi1), cs_gpios, 0)));
     a70:	4b1f      	ldr	r3, [pc, #124]	; (af0 <openspi+0x88>)
     a72:	6018      	str	r0, [r3, #0]
    if (!cs_ctrl.gpio_dev) {
     a74:	b930      	cbnz	r0, a84 <openspi+0x1c>
        printk("%s: GPIO binding failed.\n", __func__);
     a76:	491f      	ldr	r1, [pc, #124]	; (af4 <openspi+0x8c>)
     a78:	481f      	ldr	r0, [pc, #124]	; (af8 <openspi+0x90>)

    spi_cfg = &spi_cfgs[0];

    spi = device_get_binding(DT_LABEL(DT_NODELABEL(spi1)));
    if (!spi) {
        printk("%s: SPI binding failed.\n", __func__);
     a7a:	f005 f871 	bl	5b60 <printk>
        return -1;
     a7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    rx.buffers = &bufs[1];
    tx.count = 1;
    rx.count = 1;

    return 0;
}
     a82:	bd70      	pop	{r4, r5, r6, pc}
    cs_ctrl.gpio_pin = DT_PHA(DT_NODELABEL(spi1), cs_gpios, pin);
     a84:	f241 1211 	movw	r2, #4369	; 0x1111
    spi_cfg = &spi_cfgs[0];
     a88:	4d1c      	ldr	r5, [pc, #112]	; (afc <openspi+0x94>)
    cs_ctrl.gpio_pin = DT_PHA(DT_NODELABEL(spi1), cs_gpios, pin);
     a8a:	811a      	strh	r2, [r3, #8]
        spi_cfgs[i].cs = &cs_ctrl;
     a8c:	4a1c      	ldr	r2, [pc, #112]	; (b00 <openspi+0x98>)
    spi_cfg = &spi_cfgs[0];
     a8e:	602a      	str	r2, [r5, #0]
    cs_ctrl.delay = 0U;
     a90:	2400      	movs	r4, #0
     a92:	605c      	str	r4, [r3, #4]
        spi_cfgs[i].cs = &cs_ctrl;
     a94:	6093      	str	r3, [r2, #8]
     a96:	6153      	str	r3, [r2, #20]
     a98:	6213      	str	r3, [r2, #32]
     a9a:	62d3      	str	r3, [r2, #44]	; 0x2c
     a9c:	4819      	ldr	r0, [pc, #100]	; (b04 <openspi+0x9c>)
     a9e:	f003 fcfd 	bl	449c <z_impl_device_get_binding>
    spi = device_get_binding(DT_LABEL(DT_NODELABEL(spi1)));
     aa2:	4b19      	ldr	r3, [pc, #100]	; (b08 <openspi+0xa0>)
     aa4:	6018      	str	r0, [r3, #0]
    if (!spi) {
     aa6:	b910      	cbnz	r0, aae <openspi+0x46>
        printk("%s: SPI binding failed.\n", __func__);
     aa8:	4912      	ldr	r1, [pc, #72]	; (af4 <openspi+0x8c>)
     aaa:	4818      	ldr	r0, [pc, #96]	; (b0c <openspi+0xa4>)
     aac:	e7e5      	b.n	a7a <openspi+0x12>
    spi_cfg->operation = SPI_WORD_SET(8);
     aae:	682b      	ldr	r3, [r5, #0]
    memset(&tx_buf[0], 0, 255);
     ab0:	4e17      	ldr	r6, [pc, #92]	; (b10 <openspi+0xa8>)
    memset(&rx_buf[0], 0, 255);
     ab2:	4d18      	ldr	r5, [pc, #96]	; (b14 <openspi+0xac>)
    spi_cfg->operation = SPI_WORD_SET(8);
     ab4:	f44f 7280 	mov.w	r2, #256	; 0x100
     ab8:	809a      	strh	r2, [r3, #4]
    spi_cfg->frequency = 2000000;
     aba:	4a17      	ldr	r2, [pc, #92]	; (b18 <openspi+0xb0>)
     abc:	601a      	str	r2, [r3, #0]
    memset(&tx_buf[0], 0, 255);
     abe:	4621      	mov	r1, r4
     ac0:	22ff      	movs	r2, #255	; 0xff
     ac2:	4630      	mov	r0, r6
     ac4:	f005 fe0c 	bl	66e0 <memset>
    memset(&rx_buf[0], 0, 255);
     ac8:	22ff      	movs	r2, #255	; 0xff
     aca:	4621      	mov	r1, r4
     acc:	4628      	mov	r0, r5
     ace:	f005 fe07 	bl	66e0 <memset>
    bufs[0].buf = &tx_buf[0];
     ad2:	4b12      	ldr	r3, [pc, #72]	; (b1c <openspi+0xb4>)
    tx.buffers = &bufs[0];
     ad4:	4912      	ldr	r1, [pc, #72]	; (b20 <openspi+0xb8>)
    rx.buffers = &bufs[1];
     ad6:	4a13      	ldr	r2, [pc, #76]	; (b24 <openspi+0xbc>)
    bufs[0].buf = &tx_buf[0];
     ad8:	601e      	str	r6, [r3, #0]
    bufs[1].buf = &rx_buf[0];
     ada:	609d      	str	r5, [r3, #8]
    tx.buffers = &bufs[0];
     adc:	600b      	str	r3, [r1, #0]
    rx.buffers = &bufs[1];
     ade:	3308      	adds	r3, #8
     ae0:	6013      	str	r3, [r2, #0]
    tx.count = 1;
     ae2:	2301      	movs	r3, #1
     ae4:	604b      	str	r3, [r1, #4]
    rx.count = 1;
     ae6:	6053      	str	r3, [r2, #4]
    return 0;
     ae8:	4620      	mov	r0, r4
     aea:	e7ca      	b.n	a82 <openspi+0x1a>
     aec:	000070ff 	.word	0x000070ff
     af0:	20000358 	.word	0x20000358
     af4:	00007148 	.word	0x00007148
     af8:	00007106 	.word	0x00007106
     afc:	20000370 	.word	0x20000370
     b00:	20000374 	.word	0x20000374
     b04:	00007120 	.word	0x00007120
     b08:	2000036c 	.word	0x2000036c
     b0c:	00007126 	.word	0x00007126
     b10:	20000770 	.word	0x20000770
     b14:	20000671 	.word	0x20000671
     b18:	001e8480 	.word	0x001e8480
     b1c:	20000348 	.word	0x20000348
     b20:	200003a4 	.word	0x200003a4
     b24:	20000364 	.word	0x20000364

00000b28 <set_spi_speed_slow>:

void set_spi_speed_slow(void)
{
     b28:	b508      	push	{r3, lr}
    spi_cfg = &spi_cfgs[0];
     b2a:	4a0a      	ldr	r2, [pc, #40]	; (b54 <set_spi_speed_slow+0x2c>)
     b2c:	4b0a      	ldr	r3, [pc, #40]	; (b58 <set_spi_speed_slow+0x30>)
     b2e:	6013      	str	r3, [r2, #0]
    spi_cfg->operation = SPI_WORD_SET(8);
     b30:	f44f 7280 	mov.w	r2, #256	; 0x100
     b34:	809a      	strh	r2, [r3, #4]
    spi_cfg->frequency = 2000000;
     b36:	4a09      	ldr	r2, [pc, #36]	; (b5c <set_spi_speed_slow+0x34>)
     b38:	601a      	str	r2, [r3, #0]

    memset(&tx_buf[0], 0, 255);
     b3a:	2100      	movs	r1, #0
     b3c:	22ff      	movs	r2, #255	; 0xff
     b3e:	4808      	ldr	r0, [pc, #32]	; (b60 <set_spi_speed_slow+0x38>)
     b40:	f005 fdce 	bl	66e0 <memset>
    memset(&rx_buf[0], 0, 255);
}
     b44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    memset(&rx_buf[0], 0, 255);
     b48:	4806      	ldr	r0, [pc, #24]	; (b64 <set_spi_speed_slow+0x3c>)
     b4a:	22ff      	movs	r2, #255	; 0xff
     b4c:	2100      	movs	r1, #0
     b4e:	f005 bdc7 	b.w	66e0 <memset>
     b52:	bf00      	nop
     b54:	20000370 	.word	0x20000370
     b58:	20000374 	.word	0x20000374
     b5c:	001e8480 	.word	0x001e8480
     b60:	20000770 	.word	0x20000770
     b64:	20000671 	.word	0x20000671

00000b68 <set_spi_speed_fast>:

void set_spi_speed_fast(void)
{
     b68:	b508      	push	{r3, lr}
    spi_cfg = &spi_cfgs[1];
     b6a:	4b0b      	ldr	r3, [pc, #44]	; (b98 <set_spi_speed_fast+0x30>)
     b6c:	4a0b      	ldr	r2, [pc, #44]	; (b9c <set_spi_speed_fast+0x34>)
    spi_cfg->operation = SPI_WORD_SET(8);
    spi_cfg->frequency = 8000000;

    memset(&tx_buf[0], 0, 255);
     b6e:	480c      	ldr	r0, [pc, #48]	; (ba0 <set_spi_speed_fast+0x38>)
    spi_cfg = &spi_cfgs[1];
     b70:	f103 010c 	add.w	r1, r3, #12
     b74:	6011      	str	r1, [r2, #0]
    spi_cfg->operation = SPI_WORD_SET(8);
     b76:	f44f 7280 	mov.w	r2, #256	; 0x100
     b7a:	821a      	strh	r2, [r3, #16]
    spi_cfg->frequency = 8000000;
     b7c:	4a09      	ldr	r2, [pc, #36]	; (ba4 <set_spi_speed_fast+0x3c>)
     b7e:	60da      	str	r2, [r3, #12]
    memset(&tx_buf[0], 0, 255);
     b80:	2100      	movs	r1, #0
     b82:	22ff      	movs	r2, #255	; 0xff
     b84:	f005 fdac 	bl	66e0 <memset>
    memset(&rx_buf[0], 0, 255);
}
     b88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    memset(&rx_buf[0], 0, 255);
     b8c:	4806      	ldr	r0, [pc, #24]	; (ba8 <set_spi_speed_fast+0x40>)
     b8e:	22ff      	movs	r2, #255	; 0xff
     b90:	2100      	movs	r1, #0
     b92:	f005 bda5 	b.w	66e0 <memset>
     b96:	bf00      	nop
     b98:	20000374 	.word	0x20000374
     b9c:	20000370 	.word	0x20000370
     ba0:	20000770 	.word	0x20000770
     ba4:	007a1200 	.word	0x007a1200
     ba8:	20000671 	.word	0x20000671

00000bac <writetospi>:
 */
int writetospi(uint16           headerLength,
               const    uint8 * headerBuffer,
               uint32           bodyLength,
               const    uint8 * bodyBuffer)
{
     bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     bb0:	461f      	mov	r7, r3
     bb2:	4615      	mov	r5, r2
     bb4:	4604      	mov	r4, r0
     bb6:	4688      	mov	r8, r1
#if 0
    LOG_HEXDUMP_INF(headerBuffer, headerLength, "writetospi: Header");
    LOG_HEXDUMP_INF(bodyBuffer, bodyLength, "writetospi: Body");
#endif

    stat = decamutexon();
     bb8:	f004 ff90 	bl	5adc <decamutexon>

    memcpy(&tx_buf[0], headerBuffer, headerLength);
     bbc:	f8df 9040 	ldr.w	r9, [pc, #64]	; c00 <writetospi+0x54>
     bc0:	4622      	mov	r2, r4
     bc2:	4641      	mov	r1, r8
    stat = decamutexon();
     bc4:	4606      	mov	r6, r0
    memcpy(&tx_buf[0], headerBuffer, headerLength);
     bc6:	4648      	mov	r0, r9
     bc8:	f005 fd5f 	bl	668a <memcpy>
    memcpy(&tx_buf[headerLength], bodyBuffer, bodyLength);
     bcc:	4639      	mov	r1, r7
     bce:	eb09 0004 	add.w	r0, r9, r4
     bd2:	462a      	mov	r2, r5
     bd4:	f005 fd59 	bl	668a <memcpy>

    bufs[0].len = headerLength + bodyLength;
     bd8:	4b0a      	ldr	r3, [pc, #40]	; (c04 <writetospi+0x58>)
     bda:	442c      	add	r4, r5
     bdc:	605c      	str	r4, [r3, #4]
    bufs[1].len = headerLength + bodyLength;
     bde:	60dc      	str	r4, [r3, #12]

    spi_transceive(spi, spi_cfg, &tx, &rx);
     be0:	4b09      	ldr	r3, [pc, #36]	; (c08 <writetospi+0x5c>)
     be2:	6818      	ldr	r0, [r3, #0]
     be4:	4b09      	ldr	r3, [pc, #36]	; (c0c <writetospi+0x60>)
     be6:	6819      	ldr	r1, [r3, #0]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
     be8:	6883      	ldr	r3, [r0, #8]
     bea:	4a09      	ldr	r2, [pc, #36]	; (c10 <writetospi+0x64>)
     bec:	681c      	ldr	r4, [r3, #0]
     bee:	4b09      	ldr	r3, [pc, #36]	; (c14 <writetospi+0x68>)
     bf0:	47a0      	blx	r4

    decamutexoff(stat);
     bf2:	4630      	mov	r0, r6
     bf4:	f004 ff7b 	bl	5aee <decamutexoff>

    return 0;
}
     bf8:	2000      	movs	r0, #0
     bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     bfe:	bf00      	nop
     c00:	20000770 	.word	0x20000770
     c04:	20000348 	.word	0x20000348
     c08:	2000036c 	.word	0x2000036c
     c0c:	20000370 	.word	0x20000370
     c10:	200003a4 	.word	0x200003a4
     c14:	20000364 	.word	0x20000364

00000c18 <readfromspi>:
 */
int readfromspi(uint16        headerLength,
                const uint8 * headerBuffer,
                uint32        readLength,
                uint8       * readBuffer)
{
     c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c1c:	461f      	mov	r7, r3
     c1e:	4604      	mov	r4, r0
     c20:	4689      	mov	r9, r1
     c22:	4615      	mov	r5, r2
    decaIrqStatus_t  stat;

    stat = decamutexon();
     c24:	f004 ff5a 	bl	5adc <decamutexon>

    memset(&tx_buf[0], 0, headerLength + readLength);
     c28:	f8df a050 	ldr.w	sl, [pc, #80]	; c7c <readfromspi+0x64>
     c2c:	eb04 0805 	add.w	r8, r4, r5
     c30:	4642      	mov	r2, r8
    stat = decamutexon();
     c32:	4606      	mov	r6, r0
    memset(&tx_buf[0], 0, headerLength + readLength);
     c34:	2100      	movs	r1, #0
     c36:	4650      	mov	r0, sl
     c38:	f005 fd52 	bl	66e0 <memset>
    memcpy(&tx_buf[0], headerBuffer, headerLength);
     c3c:	4649      	mov	r1, r9
     c3e:	4622      	mov	r2, r4
     c40:	4650      	mov	r0, sl
     c42:	f005 fd22 	bl	668a <memcpy>

    bufs[0].len = headerLength + readLength;
     c46:	4b0e      	ldr	r3, [pc, #56]	; (c80 <readfromspi+0x68>)
     c48:	f8c3 8004 	str.w	r8, [r3, #4]
    bufs[1].len = headerLength + readLength;
     c4c:	f8c3 800c 	str.w	r8, [r3, #12]

    spi_transceive(spi, spi_cfg, &tx, &rx);
     c50:	4b0c      	ldr	r3, [pc, #48]	; (c84 <readfromspi+0x6c>)
     c52:	6818      	ldr	r0, [r3, #0]
     c54:	4b0c      	ldr	r3, [pc, #48]	; (c88 <readfromspi+0x70>)
     c56:	6819      	ldr	r1, [r3, #0]
     c58:	6883      	ldr	r3, [r0, #8]
     c5a:	4a0c      	ldr	r2, [pc, #48]	; (c8c <readfromspi+0x74>)
     c5c:	f8d3 8000 	ldr.w	r8, [r3]
     c60:	4b0b      	ldr	r3, [pc, #44]	; (c90 <readfromspi+0x78>)
     c62:	47c0      	blx	r8

    memcpy(readBuffer, rx_buf + headerLength, readLength);
     c64:	490b      	ldr	r1, [pc, #44]	; (c94 <readfromspi+0x7c>)
     c66:	462a      	mov	r2, r5
     c68:	4421      	add	r1, r4
     c6a:	4638      	mov	r0, r7
     c6c:	f005 fd0d 	bl	668a <memcpy>

    decamutexoff(stat);
     c70:	4630      	mov	r0, r6
     c72:	f004 ff3c 	bl	5aee <decamutexoff>
    LOG_HEXDUMP_INF(headerBuffer, headerLength, "readfromspi: Header");
    LOG_HEXDUMP_INF(readBuffer, readLength, "readfromspi: Body");
#endif

    return 0;
}
     c76:	2000      	movs	r0, #0
     c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c7c:	20000770 	.word	0x20000770
     c80:	20000348 	.word	0x20000348
     c84:	2000036c 	.word	0x2000036c
     c88:	20000370 	.word	0x20000370
     c8c:	200003a4 	.word	0x200003a4
     c90:	20000364 	.word	0x20000364
     c94:	20000671 	.word	0x20000671

00000c98 <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
     c98:	4b01      	ldr	r3, [pc, #4]	; (ca0 <__printk_hook_install+0x8>)
     c9a:	6018      	str	r0, [r3, #0]
}
     c9c:	4770      	bx	lr
     c9e:	bf00      	nop
     ca0:	20000008 	.word	0x20000008

00000ca4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     ca4:	b530      	push	{r4, r5, lr}
     ca6:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
     ca8:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     cac:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     cae:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
     cb0:	a901      	add	r1, sp, #4
     cb2:	4805      	ldr	r0, [pc, #20]	; (cc8 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
     cb4:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
     cb6:	f000 f8e9 	bl	e8c <cbvprintf>

	if (ctx.count < ctx.max) {
     cba:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     cbe:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     cc0:	bfb8      	it	lt
     cc2:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     cc4:	b005      	add	sp, #20
     cc6:	bd30      	pop	{r4, r5, pc}
     cc8:	00005b3b 	.word	0x00005b3b

00000ccc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     ccc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     cd0:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     cd4:	f019 0808 	ands.w	r8, r9, #8
{
     cd8:	4604      	mov	r4, r0
     cda:	4693      	mov	fp, r2
	if (processing) {
     cdc:	d00d      	beq.n	cfa <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     cde:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     ce0:	bf0c      	ite	eq
     ce2:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     ce6:	f049 0920 	orrne.w	r9, r9, #32
     cea:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     cee:	f38b 8811 	msr	BASEPRI, fp
     cf2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     cf6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     cfa:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     cfe:	2902      	cmp	r1, #2
     d00:	d107      	bne.n	d12 <process_event+0x46>
			evt = process_recheck(mgr);
     d02:	4620      	mov	r0, r4
     d04:	f004 ff46 	bl	5b94 <process_recheck>
		if (evt == EVT_NOP) {
     d08:	2800      	cmp	r0, #0
     d0a:	d0f0      	beq.n	cee <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     d0c:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d0e:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     d10:	d14e      	bne.n	db0 <process_event+0xe4>
			res = mgr->last_res;
     d12:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d14:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     d16:	2f00      	cmp	r7, #0
     d18:	da15      	bge.n	d46 <process_event+0x7a>
		*clients = mgr->clients;
     d1a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d1c:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     d20:	e9c4 8800 	strd	r8, r8, [r4]
     d24:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     d28:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     d2a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     d2c:	8b21      	ldrh	r1, [r4, #24]
     d2e:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     d32:	45ca      	cmp	sl, r9
     d34:	d002      	beq.n	d3c <process_event+0x70>
		if (do_monitors
     d36:	68a3      	ldr	r3, [r4, #8]
     d38:	2b00      	cmp	r3, #0
     d3a:	d15a      	bne.n	df2 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     d3c:	b90d      	cbnz	r5, d42 <process_event+0x76>
		    || (transit != NULL)) {
     d3e:	2e00      	cmp	r6, #0
     d40:	d071      	beq.n	e26 <process_event+0x15a>
     d42:	2300      	movs	r3, #0
     d44:	e056      	b.n	df4 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d46:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     d4a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     d4c:	2a01      	cmp	r2, #1
     d4e:	d81e      	bhi.n	d8e <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d50:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     d54:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     d56:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d58:	b289      	uxth	r1, r1
     d5a:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     d5e:	d10a      	bne.n	d76 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     d60:	b13d      	cbz	r5, d72 <process_event+0xa6>
     d62:	8b63      	ldrh	r3, [r4, #26]
     d64:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     d66:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     d68:	3301      	adds	r3, #1
     d6a:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     d6c:	2a00      	cmp	r2, #0
     d6e:	d1fa      	bne.n	d66 <process_event+0x9a>
     d70:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d72:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     d76:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     d78:	4620      	mov	r0, r4
     d7a:	f004 ff0b 	bl	5b94 <process_recheck>
     d7e:	4606      	mov	r6, r0
     d80:	2800      	cmp	r0, #0
     d82:	d0d3      	beq.n	d2c <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     d84:	8b23      	ldrh	r3, [r4, #24]
     d86:	f043 0320 	orr.w	r3, r3, #32
     d8a:	8323      	strh	r3, [r4, #24]
     d8c:	e7cd      	b.n	d2a <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     d8e:	2b04      	cmp	r3, #4
     d90:	d10c      	bne.n	dac <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d92:	f021 0107 	bic.w	r1, r1, #7
     d96:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     d98:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     d9a:	4620      	mov	r0, r4
     d9c:	f004 fefa 	bl	5b94 <process_recheck>
     da0:	4605      	mov	r5, r0
     da2:	2800      	cmp	r0, #0
     da4:	d0c1      	beq.n	d2a <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     da6:	f041 0120 	orr.w	r1, r1, #32
     daa:	8321      	strh	r1, [r4, #24]
     dac:	2500      	movs	r5, #0
     dae:	e7bc      	b.n	d2a <process_event+0x5e>
		} else if (evt == EVT_START) {
     db0:	2803      	cmp	r0, #3
     db2:	d109      	bne.n	dc8 <process_event+0xfc>
			transit = mgr->transitions->start;
     db4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     db6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     dba:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     dbc:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     dc0:	8323      	strh	r3, [r4, #24]
}
     dc2:	2500      	movs	r5, #0
		res = 0;
     dc4:	462f      	mov	r7, r5
     dc6:	e7b1      	b.n	d2c <process_event+0x60>
		} else if (evt == EVT_STOP) {
     dc8:	2804      	cmp	r0, #4
     dca:	d106      	bne.n	dda <process_event+0x10e>
			transit = mgr->transitions->stop;
     dcc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     dce:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     dd2:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     dd4:	f043 0304 	orr.w	r3, r3, #4
     dd8:	e7f2      	b.n	dc0 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     dda:	2805      	cmp	r0, #5
     ddc:	d106      	bne.n	dec <process_event+0x120>
			transit = mgr->transitions->reset;
     dde:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     de0:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     de4:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     de6:	f043 0305 	orr.w	r3, r3, #5
     dea:	e7e9      	b.n	dc0 <process_event+0xf4>
     dec:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     dee:	462e      	mov	r6, r5
     df0:	e7e8      	b.n	dc4 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     df2:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     df4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     df8:	8321      	strh	r1, [r4, #24]
     dfa:	f38b 8811 	msr	BASEPRI, fp
     dfe:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     e02:	b9fb      	cbnz	r3, e44 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     e04:	bb85      	cbnz	r5, e68 <process_event+0x19c>
			if (transit != NULL) {
     e06:	b116      	cbz	r6, e0e <process_event+0x142>
				transit(mgr, transition_complete);
     e08:	491f      	ldr	r1, [pc, #124]	; (e88 <process_event+0x1bc>)
     e0a:	4620      	mov	r0, r4
     e0c:	47b0      	blx	r6
	__asm__ volatile(
     e0e:	f04f 0320 	mov.w	r3, #32
     e12:	f3ef 8b11 	mrs	fp, BASEPRI
     e16:	f383 8811 	msr	BASEPRI, r3
     e1a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     e1e:	8b23      	ldrh	r3, [r4, #24]
     e20:	f023 0308 	bic.w	r3, r3, #8
     e24:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     e26:	8b23      	ldrh	r3, [r4, #24]
     e28:	06da      	lsls	r2, r3, #27
     e2a:	d525      	bpl.n	e78 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     e2c:	f023 0310 	bic.w	r3, r3, #16
     e30:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     e32:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     e34:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     e38:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     e3c:	2900      	cmp	r1, #0
     e3e:	f47f af5e 	bne.w	cfe <process_event+0x32>
out:
     e42:	e754      	b.n	cee <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     e44:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     e46:	2900      	cmp	r1, #0
     e48:	d0dc      	beq.n	e04 <process_event+0x138>
	return node->next;
     e4a:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     e4e:	f8d1 b004 	ldr.w	fp, [r1, #4]
     e52:	463b      	mov	r3, r7
     e54:	4652      	mov	r2, sl
     e56:	4620      	mov	r0, r4
     e58:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     e5a:	f1b9 0f00 	cmp.w	r9, #0
     e5e:	d0d1      	beq.n	e04 <process_event+0x138>
     e60:	4649      	mov	r1, r9
     e62:	f8d9 9000 	ldr.w	r9, [r9]
     e66:	e7f2      	b.n	e4e <process_event+0x182>
     e68:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     e6a:	463b      	mov	r3, r7
     e6c:	4652      	mov	r2, sl
     e6e:	4620      	mov	r0, r4
     e70:	682d      	ldr	r5, [r5, #0]
     e72:	f004 feab 	bl	5bcc <notify_one>
     e76:	e7c5      	b.n	e04 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     e78:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     e7c:	bf1e      	ittt	ne
     e7e:	f023 0320 	bicne.w	r3, r3, #32
     e82:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     e84:	2102      	movne	r1, #2
     e86:	e7d5      	b.n	e34 <process_event+0x168>
     e88:	00005bf9 	.word	0x00005bf9

00000e8c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e90:	b091      	sub	sp, #68	; 0x44
     e92:	468b      	mov	fp, r1
     e94:	9002      	str	r0, [sp, #8]
     e96:	4692      	mov	sl, r2
     e98:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     e9a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     e9c:	f89a 0000 	ldrb.w	r0, [sl]
     ea0:	b908      	cbnz	r0, ea6 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     ea2:	4628      	mov	r0, r5
     ea4:	e35d      	b.n	1562 <cbvprintf+0x6d6>
		if (*fp != '%') {
     ea6:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     ea8:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     eac:	d007      	beq.n	ebe <cbvprintf+0x32>
			OUTC('%');
     eae:	9b02      	ldr	r3, [sp, #8]
     eb0:	4659      	mov	r1, fp
     eb2:	4798      	blx	r3
     eb4:	2800      	cmp	r0, #0
     eb6:	f2c0 8354 	blt.w	1562 <cbvprintf+0x6d6>
     eba:	3501      	adds	r5, #1
			break;
     ebc:	e212      	b.n	12e4 <cbvprintf+0x458>
		} state = {
     ebe:	2218      	movs	r2, #24
     ec0:	2100      	movs	r1, #0
     ec2:	a80a      	add	r0, sp, #40	; 0x28
     ec4:	f005 fc0c 	bl	66e0 <memset>
	if (*sp == '%') {
     ec8:	f89a 3001 	ldrb.w	r3, [sl, #1]
     ecc:	2b25      	cmp	r3, #37	; 0x25
     ece:	d078      	beq.n	fc2 <cbvprintf+0x136>
     ed0:	2200      	movs	r2, #0
     ed2:	4610      	mov	r0, r2
     ed4:	4696      	mov	lr, r2
     ed6:	4694      	mov	ip, r2
     ed8:	4616      	mov	r6, r2
     eda:	4639      	mov	r1, r7
		switch (*sp) {
     edc:	f817 3b01 	ldrb.w	r3, [r7], #1
     ee0:	2b2b      	cmp	r3, #43	; 0x2b
     ee2:	f000 809d 	beq.w	1020 <cbvprintf+0x194>
     ee6:	f200 8094 	bhi.w	1012 <cbvprintf+0x186>
     eea:	2b20      	cmp	r3, #32
     eec:	f000 809b 	beq.w	1026 <cbvprintf+0x19a>
     ef0:	2b23      	cmp	r3, #35	; 0x23
     ef2:	f000 809b 	beq.w	102c <cbvprintf+0x1a0>
     ef6:	b12e      	cbz	r6, f04 <cbvprintf+0x78>
     ef8:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     efc:	f046 0604 	orr.w	r6, r6, #4
     f00:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     f04:	f1bc 0f00 	cmp.w	ip, #0
     f08:	d005      	beq.n	f16 <cbvprintf+0x8a>
     f0a:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     f0e:	f046 0608 	orr.w	r6, r6, #8
     f12:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     f16:	f1be 0f00 	cmp.w	lr, #0
     f1a:	d005      	beq.n	f28 <cbvprintf+0x9c>
     f1c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     f20:	f046 0610 	orr.w	r6, r6, #16
     f24:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     f28:	b128      	cbz	r0, f36 <cbvprintf+0xaa>
     f2a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     f2e:	f040 0020 	orr.w	r0, r0, #32
     f32:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     f36:	b12a      	cbz	r2, f44 <cbvprintf+0xb8>
     f38:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     f3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     f40:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     f44:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     f48:	f002 0044 	and.w	r0, r2, #68	; 0x44
     f4c:	2844      	cmp	r0, #68	; 0x44
     f4e:	d103      	bne.n	f58 <cbvprintf+0xcc>
		conv->flag_zero = false;
     f50:	f36f 1286 	bfc	r2, #6, #1
     f54:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     f58:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     f5c:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     f5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     f62:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     f66:	d17b      	bne.n	1060 <cbvprintf+0x1d4>
		conv->width_star = true;
     f68:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     f6c:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     f70:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     f72:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     f76:	781a      	ldrb	r2, [r3, #0]
     f78:	2a2e      	cmp	r2, #46	; 0x2e
     f7a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     f7e:	bf0c      	ite	eq
     f80:	2101      	moveq	r1, #1
     f82:	2100      	movne	r1, #0
     f84:	f361 0241 	bfi	r2, r1, #1, #1
     f88:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     f8c:	d174      	bne.n	1078 <cbvprintf+0x1ec>
	if (*sp == '*') {
     f8e:	785a      	ldrb	r2, [r3, #1]
     f90:	2a2a      	cmp	r2, #42	; 0x2a
     f92:	d06a      	beq.n	106a <cbvprintf+0x1de>
	++sp;
     f94:	3301      	adds	r3, #1
	size_t val = 0;
     f96:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     f98:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     f9a:	4618      	mov	r0, r3
     f9c:	f810 2b01 	ldrb.w	r2, [r0], #1
     fa0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     fa4:	2f09      	cmp	r7, #9
     fa6:	f240 808e 	bls.w	10c6 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     faa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     fae:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     fb0:	f3c2 0040 	ubfx	r0, r2, #1, #1
     fb4:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     fb8:	f361 0241 	bfi	r2, r1, #1, #1
     fbc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     fc0:	e05a      	b.n	1078 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     fc2:	f10a 0702 	add.w	r7, sl, #2
     fc6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     fca:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     fce:	07d9      	lsls	r1, r3, #31
     fd0:	f140 8149 	bpl.w	1266 <cbvprintf+0x3da>
			width = va_arg(ap, int);
     fd4:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     fd8:	f1b9 0f00 	cmp.w	r9, #0
     fdc:	da07      	bge.n	fee <cbvprintf+0x162>
				conv->flag_dash = true;
     fde:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     fe2:	f042 0204 	orr.w	r2, r2, #4
     fe6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     fea:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     fee:	075a      	lsls	r2, r3, #29
     ff0:	f140 8142 	bpl.w	1278 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
     ff4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     ff8:	f1b8 0f00 	cmp.w	r8, #0
     ffc:	f280 8141 	bge.w	1282 <cbvprintf+0x3f6>
				conv->prec_present = false;
    1000:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1004:	f36f 0341 	bfc	r3, #1, #1
    1008:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    100c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    1010:	e137      	b.n	1282 <cbvprintf+0x3f6>
		switch (*sp) {
    1012:	2b2d      	cmp	r3, #45	; 0x2d
    1014:	d00c      	beq.n	1030 <cbvprintf+0x1a4>
    1016:	2b30      	cmp	r3, #48	; 0x30
    1018:	f47f af6d 	bne.w	ef6 <cbvprintf+0x6a>
			conv->flag_zero = true;
    101c:	2201      	movs	r2, #1
	} while (loop);
    101e:	e75c      	b.n	eda <cbvprintf+0x4e>
			conv->flag_plus = true;
    1020:	f04f 0c01 	mov.w	ip, #1
    1024:	e759      	b.n	eda <cbvprintf+0x4e>
			conv->flag_space = true;
    1026:	f04f 0e01 	mov.w	lr, #1
    102a:	e756      	b.n	eda <cbvprintf+0x4e>
			conv->flag_hash = true;
    102c:	2001      	movs	r0, #1
    102e:	e754      	b.n	eda <cbvprintf+0x4e>
		switch (*sp) {
    1030:	2601      	movs	r6, #1
    1032:	e752      	b.n	eda <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    1034:	fb0c 0202 	mla	r2, ip, r2, r0
    1038:	3a30      	subs	r2, #48	; 0x30
    103a:	4633      	mov	r3, r6
    103c:	461e      	mov	r6, r3
    103e:	f816 0b01 	ldrb.w	r0, [r6], #1
    1042:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1046:	2f09      	cmp	r7, #9
    1048:	d9f4      	bls.n	1034 <cbvprintf+0x1a8>
	if (sp != wp) {
    104a:	4299      	cmp	r1, r3
    104c:	d093      	beq.n	f76 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    104e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    1052:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    1054:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1056:	f362 0141 	bfi	r1, r2, #1, #1
    105a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    105e:	e78a      	b.n	f76 <cbvprintf+0xea>
    1060:	460b      	mov	r3, r1
	size_t val = 0;
    1062:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1064:	f04f 0c0a 	mov.w	ip, #10
    1068:	e7e8      	b.n	103c <cbvprintf+0x1b0>
		conv->prec_star = true;
    106a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    106e:	f042 0204 	orr.w	r2, r2, #4
    1072:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    1076:	3302      	adds	r3, #2
	switch (*sp) {
    1078:	461f      	mov	r7, r3
    107a:	f817 2b01 	ldrb.w	r2, [r7], #1
    107e:	2a6c      	cmp	r2, #108	; 0x6c
    1080:	d041      	beq.n	1106 <cbvprintf+0x27a>
    1082:	d825      	bhi.n	10d0 <cbvprintf+0x244>
    1084:	2a68      	cmp	r2, #104	; 0x68
    1086:	d02b      	beq.n	10e0 <cbvprintf+0x254>
    1088:	2a6a      	cmp	r2, #106	; 0x6a
    108a:	d046      	beq.n	111a <cbvprintf+0x28e>
    108c:	2a4c      	cmp	r2, #76	; 0x4c
    108e:	d04c      	beq.n	112a <cbvprintf+0x29e>
    1090:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    1092:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    1096:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
    109a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    109e:	2a78      	cmp	r2, #120	; 0x78
    10a0:	f200 80d9 	bhi.w	1256 <cbvprintf+0x3ca>
    10a4:	2a57      	cmp	r2, #87	; 0x57
    10a6:	d84d      	bhi.n	1144 <cbvprintf+0x2b8>
    10a8:	2a41      	cmp	r2, #65	; 0x41
    10aa:	d003      	beq.n	10b4 <cbvprintf+0x228>
    10ac:	3a45      	subs	r2, #69	; 0x45
    10ae:	2a02      	cmp	r2, #2
    10b0:	f200 80d1 	bhi.w	1256 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    10b4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    10b8:	2204      	movs	r2, #4
    10ba:	f362 0302 	bfi	r3, r2, #0, #3
    10be:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    10c2:	2301      	movs	r3, #1
			break;
    10c4:	e09e      	b.n	1204 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    10c6:	fb06 2101 	mla	r1, r6, r1, r2
    10ca:	3930      	subs	r1, #48	; 0x30
    10cc:	4603      	mov	r3, r0
    10ce:	e764      	b.n	f9a <cbvprintf+0x10e>
	switch (*sp) {
    10d0:	2a74      	cmp	r2, #116	; 0x74
    10d2:	d026      	beq.n	1122 <cbvprintf+0x296>
    10d4:	2a7a      	cmp	r2, #122	; 0x7a
    10d6:	d1db      	bne.n	1090 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    10d8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    10dc:	2206      	movs	r2, #6
    10de:	e00d      	b.n	10fc <cbvprintf+0x270>
		if (*++sp == 'h') {
    10e0:	785a      	ldrb	r2, [r3, #1]
    10e2:	2a68      	cmp	r2, #104	; 0x68
    10e4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    10e8:	d106      	bne.n	10f8 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    10ea:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    10ec:	f361 02c6 	bfi	r2, r1, #3, #4
    10f0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    10f4:	1c9f      	adds	r7, r3, #2
    10f6:	e7cc      	b.n	1092 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    10f8:	4613      	mov	r3, r2
    10fa:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    10fc:	f362 03c6 	bfi	r3, r2, #3, #4
    1100:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    1104:	e7c5      	b.n	1092 <cbvprintf+0x206>
		if (*++sp == 'l') {
    1106:	785a      	ldrb	r2, [r3, #1]
    1108:	2a6c      	cmp	r2, #108	; 0x6c
    110a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    110e:	d101      	bne.n	1114 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    1110:	2104      	movs	r1, #4
    1112:	e7eb      	b.n	10ec <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    1114:	4613      	mov	r3, r2
    1116:	2203      	movs	r2, #3
    1118:	e7f0      	b.n	10fc <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    111a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    111e:	2205      	movs	r2, #5
    1120:	e7ec      	b.n	10fc <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    1122:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1126:	2207      	movs	r2, #7
    1128:	e7e8      	b.n	10fc <cbvprintf+0x270>
		conv->unsupported = true;
    112a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    112e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    1132:	f023 0302 	bic.w	r3, r3, #2
    1136:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    113a:	f043 0302 	orr.w	r3, r3, #2
    113e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    1142:	e7a6      	b.n	1092 <cbvprintf+0x206>
    1144:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    1148:	2920      	cmp	r1, #32
    114a:	f200 8084 	bhi.w	1256 <cbvprintf+0x3ca>
    114e:	a001      	add	r0, pc, #4	; (adr r0, 1154 <cbvprintf+0x2c8>)
    1150:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    1154:	00001219 	.word	0x00001219
    1158:	00001257 	.word	0x00001257
    115c:	00001257 	.word	0x00001257
    1160:	00001257 	.word	0x00001257
    1164:	00001257 	.word	0x00001257
    1168:	00001257 	.word	0x00001257
    116c:	00001257 	.word	0x00001257
    1170:	00001257 	.word	0x00001257
    1174:	00001257 	.word	0x00001257
    1178:	000010b5 	.word	0x000010b5
    117c:	00001257 	.word	0x00001257
    1180:	00001219 	.word	0x00001219
    1184:	000011d9 	.word	0x000011d9
    1188:	000010b5 	.word	0x000010b5
    118c:	000010b5 	.word	0x000010b5
    1190:	000010b5 	.word	0x000010b5
    1194:	00001257 	.word	0x00001257
    1198:	000011d9 	.word	0x000011d9
    119c:	00001257 	.word	0x00001257
    11a0:	00001257 	.word	0x00001257
    11a4:	00001257 	.word	0x00001257
    11a8:	00001257 	.word	0x00001257
    11ac:	00001221 	.word	0x00001221
    11b0:	00001219 	.word	0x00001219
    11b4:	0000123d 	.word	0x0000123d
    11b8:	00001257 	.word	0x00001257
    11bc:	00001257 	.word	0x00001257
    11c0:	0000123d 	.word	0x0000123d
    11c4:	00001257 	.word	0x00001257
    11c8:	00001219 	.word	0x00001219
    11cc:	00001257 	.word	0x00001257
    11d0:	00001257 	.word	0x00001257
    11d4:	00001219 	.word	0x00001219
		conv->specifier_cat = SPECIFIER_SINT;
    11d8:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    11dc:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    11de:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    11e2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    11e6:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    11e8:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    11ec:	bf02      	ittt	eq
    11ee:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    11f2:	f041 0101 	orreq.w	r1, r1, #1
    11f6:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    11fa:	2a63      	cmp	r2, #99	; 0x63
    11fc:	d131      	bne.n	1262 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    11fe:	3b00      	subs	r3, #0
    1200:	bf18      	it	ne
    1202:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1204:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1208:	f3c2 0140 	ubfx	r1, r2, #1, #1
    120c:	430b      	orrs	r3, r1
    120e:	f363 0241 	bfi	r2, r3, #1, #1
    1212:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1216:	e6d8      	b.n	fca <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    1218:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    121c:	2002      	movs	r0, #2
    121e:	e7de      	b.n	11de <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    1220:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1224:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1228:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    122c:	2103      	movs	r1, #3
    122e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1232:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    1234:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1238:	4143      	adcs	r3, r0
    123a:	e7e3      	b.n	1204 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    123c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1240:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    1242:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1246:	f361 0202 	bfi	r2, r1, #0, #3
    124a:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    124e:	bf14      	ite	ne
    1250:	2301      	movne	r3, #1
    1252:	2300      	moveq	r3, #0
    1254:	e7d6      	b.n	1204 <cbvprintf+0x378>
		conv->invalid = true;
    1256:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    125a:	f043 0301 	orr.w	r3, r3, #1
    125e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    1262:	2300      	movs	r3, #0
    1264:	e7ce      	b.n	1204 <cbvprintf+0x378>
		} else if (conv->width_present) {
    1266:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    126a:	2a00      	cmp	r2, #0
			width = conv->width_value;
    126c:	bfb4      	ite	lt
    126e:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    1272:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    1276:	e6ba      	b.n	fee <cbvprintf+0x162>
		} else if (conv->prec_present) {
    1278:	079b      	lsls	r3, r3, #30
    127a:	f57f aec7 	bpl.w	100c <cbvprintf+0x180>
			precision = conv->prec_value;
    127e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    1282:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    1286:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1288:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    128c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    1290:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1294:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1296:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    129a:	d138      	bne.n	130e <cbvprintf+0x482>
			switch (length_mod) {
    129c:	1ecb      	subs	r3, r1, #3
    129e:	2b04      	cmp	r3, #4
    12a0:	d822      	bhi.n	12e8 <cbvprintf+0x45c>
    12a2:	e8df f003 	tbb	[pc, r3]
    12a6:	0903      	.short	0x0903
    12a8:	2109      	.short	0x2109
    12aa:	21          	.byte	0x21
    12ab:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    12ac:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    12b0:	17da      	asrs	r2, r3, #31
    12b2:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    12b6:	e006      	b.n	12c6 <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    12b8:	3407      	adds	r4, #7
    12ba:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    12be:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    12c2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    12c6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    12ca:	f013 0603 	ands.w	r6, r3, #3
    12ce:	d054      	beq.n	137a <cbvprintf+0x4ee>
			OUTS(sp, fp);
    12d0:	9802      	ldr	r0, [sp, #8]
    12d2:	463b      	mov	r3, r7
    12d4:	4652      	mov	r2, sl
    12d6:	4659      	mov	r1, fp
    12d8:	f004 fd57 	bl	5d8a <outs>
    12dc:	2800      	cmp	r0, #0
    12de:	f2c0 8140 	blt.w	1562 <cbvprintf+0x6d6>
    12e2:	4405      	add	r5, r0
			continue;
    12e4:	46ba      	mov	sl, r7
    12e6:	e5d9      	b.n	e9c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    12e8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    12ec:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    12ee:	ea4f 72e3 	mov.w	r2, r3, asr #31
    12f2:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    12f6:	d105      	bne.n	1304 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    12f8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    12fc:	930a      	str	r3, [sp, #40]	; 0x28
    12fe:	2300      	movs	r3, #0
    1300:	930b      	str	r3, [sp, #44]	; 0x2c
    1302:	e7e0      	b.n	12c6 <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    1304:	2902      	cmp	r1, #2
    1306:	d1de      	bne.n	12c6 <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    1308:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    130c:	e7d0      	b.n	12b0 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    130e:	2b02      	cmp	r3, #2
    1310:	d123      	bne.n	135a <cbvprintf+0x4ce>
			switch (length_mod) {
    1312:	1ecb      	subs	r3, r1, #3
    1314:	2b04      	cmp	r3, #4
    1316:	d813      	bhi.n	1340 <cbvprintf+0x4b4>
    1318:	e8df f003 	tbb	[pc, r3]
    131c:	120a0a03 	.word	0x120a0a03
    1320:	12          	.byte	0x12
    1321:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    1322:	6822      	ldr	r2, [r4, #0]
    1324:	920a      	str	r2, [sp, #40]	; 0x28
    1326:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    1328:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    132a:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    132c:	4604      	mov	r4, r0
    132e:	e7ca      	b.n	12c6 <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    1330:	1de0      	adds	r0, r4, #7
    1332:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    1336:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    133a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    133e:	e7f5      	b.n	132c <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    1340:	f854 3b04 	ldr.w	r3, [r4], #4
    1344:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1346:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    1348:	f04f 0300 	mov.w	r3, #0
    134c:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    134e:	d0d3      	beq.n	12f8 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    1350:	2902      	cmp	r1, #2
    1352:	d1b8      	bne.n	12c6 <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    1354:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    1358:	e7d0      	b.n	12fc <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    135a:	2b04      	cmp	r3, #4
    135c:	d107      	bne.n	136e <cbvprintf+0x4e2>
					(sint_value_type)va_arg(ap, long long);
    135e:	3407      	adds	r4, #7
    1360:	f024 0407 	bic.w	r4, r4, #7
    1364:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
    1368:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    136c:	e7ab      	b.n	12c6 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    136e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1370:	bf04      	itt	eq
    1372:	f854 3b04 	ldreq.w	r3, [r4], #4
    1376:	930a      	streq	r3, [sp, #40]	; 0x28
    1378:	e7a5      	b.n	12c6 <cbvprintf+0x43a>
		switch (conv->specifier) {
    137a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    137e:	2878      	cmp	r0, #120	; 0x78
    1380:	d8b0      	bhi.n	12e4 <cbvprintf+0x458>
    1382:	2862      	cmp	r0, #98	; 0x62
    1384:	d822      	bhi.n	13cc <cbvprintf+0x540>
    1386:	2825      	cmp	r0, #37	; 0x25
    1388:	f43f ad91 	beq.w	eae <cbvprintf+0x22>
    138c:	2858      	cmp	r0, #88	; 0x58
    138e:	d1a9      	bne.n	12e4 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1390:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1394:	9300      	str	r3, [sp, #0]
    1396:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    139a:	ab04      	add	r3, sp, #16
    139c:	aa0c      	add	r2, sp, #48	; 0x30
    139e:	f004 fcae 	bl	5cfe <encode_uint>
    13a2:	4682      	mov	sl, r0
			if (precision >= 0) {
    13a4:	f1b8 0f00 	cmp.w	r8, #0
    13a8:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    13ac:	db0c      	blt.n	13c8 <cbvprintf+0x53c>
				conv->flag_zero = false;
    13ae:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    13b2:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    13b6:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    13ba:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    13bc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    13c0:	d902      	bls.n	13c8 <cbvprintf+0x53c>
					conv->pad0_value = precision - (int)len;
    13c2:	eba8 0303 	sub.w	r3, r8, r3
    13c6:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    13c8:	4680      	mov	r8, r0
    13ca:	e03d      	b.n	1448 <cbvprintf+0x5bc>
    13cc:	3863      	subs	r0, #99	; 0x63
    13ce:	2815      	cmp	r0, #21
    13d0:	d888      	bhi.n	12e4 <cbvprintf+0x458>
    13d2:	a201      	add	r2, pc, #4	; (adr r2, 13d8 <cbvprintf+0x54c>)
    13d4:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    13d8:	00001459 	.word	0x00001459
    13dc:	000014bd 	.word	0x000014bd
    13e0:	000012e5 	.word	0x000012e5
    13e4:	000012e5 	.word	0x000012e5
    13e8:	000012e5 	.word	0x000012e5
    13ec:	000012e5 	.word	0x000012e5
    13f0:	000014bd 	.word	0x000014bd
    13f4:	000012e5 	.word	0x000012e5
    13f8:	000012e5 	.word	0x000012e5
    13fc:	000012e5 	.word	0x000012e5
    1400:	000012e5 	.word	0x000012e5
    1404:	00001517 	.word	0x00001517
    1408:	000014e5 	.word	0x000014e5
    140c:	000014e9 	.word	0x000014e9
    1410:	000012e5 	.word	0x000012e5
    1414:	000012e5 	.word	0x000012e5
    1418:	00001431 	.word	0x00001431
    141c:	000012e5 	.word	0x000012e5
    1420:	000014e5 	.word	0x000014e5
    1424:	000012e5 	.word	0x000012e5
    1428:	000012e5 	.word	0x000012e5
    142c:	000014e5 	.word	0x000014e5
			if (precision >= 0) {
    1430:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1434:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1438:	db0a      	blt.n	1450 <cbvprintf+0x5c4>
				len = strnlen(bps, precision);
    143a:	4641      	mov	r1, r8
    143c:	4650      	mov	r0, sl
    143e:	f005 f90f 	bl	6660 <strnlen>
			bpe = bps + len;
    1442:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    1446:	2600      	movs	r6, #0
		if (bps == NULL) {
    1448:	f1ba 0f00 	cmp.w	sl, #0
    144c:	d10c      	bne.n	1468 <cbvprintf+0x5dc>
    144e:	e749      	b.n	12e4 <cbvprintf+0x458>
				len = strlen(bps);
    1450:	4650      	mov	r0, sl
    1452:	f005 f8fe 	bl	6652 <strlen>
    1456:	e7f4      	b.n	1442 <cbvprintf+0x5b6>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    145a:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    145e:	2600      	movs	r6, #0
			bps = buf;
    1460:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    1464:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    1468:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    146c:	b106      	cbz	r6, 1470 <cbvprintf+0x5e4>
			nj_len += 1U;
    146e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1470:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1474:	06d0      	lsls	r0, r2, #27
    1476:	d568      	bpl.n	154a <cbvprintf+0x6be>
			nj_len += 2U;
    1478:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    147a:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    147c:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    147e:	bf48      	it	mi
    1480:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    1482:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1484:	bf48      	it	mi
    1486:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1488:	f1b9 0f00 	cmp.w	r9, #0
    148c:	dd76      	ble.n	157c <cbvprintf+0x6f0>
			if (!conv->flag_dash) {
    148e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    1492:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    1496:	f3c2 0380 	ubfx	r3, r2, #2, #1
    149a:	9303      	str	r3, [sp, #12]
    149c:	0753      	lsls	r3, r2, #29
    149e:	d46d      	bmi.n	157c <cbvprintf+0x6f0>
				if (conv->flag_zero) {
    14a0:	0650      	lsls	r0, r2, #25
    14a2:	d561      	bpl.n	1568 <cbvprintf+0x6dc>
					if (sign != 0) {
    14a4:	b146      	cbz	r6, 14b8 <cbvprintf+0x62c>
						OUTC(sign);
    14a6:	9b02      	ldr	r3, [sp, #8]
    14a8:	4659      	mov	r1, fp
    14aa:	4630      	mov	r0, r6
    14ac:	4798      	blx	r3
    14ae:	2800      	cmp	r0, #0
    14b0:	db57      	blt.n	1562 <cbvprintf+0x6d6>
						sign = 0;
    14b2:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    14b4:	3501      	adds	r5, #1
						sign = 0;
    14b6:	461e      	mov	r6, r3
					pad = '0';
    14b8:	2330      	movs	r3, #48	; 0x30
    14ba:	e056      	b.n	156a <cbvprintf+0x6de>
			if (conv->flag_plus) {
    14bc:	071e      	lsls	r6, r3, #28
    14be:	d40f      	bmi.n	14e0 <cbvprintf+0x654>
				sign = ' ';
    14c0:	f013 0610 	ands.w	r6, r3, #16
    14c4:	bf18      	it	ne
    14c6:	2620      	movne	r6, #32
			sint = value->sint;
    14c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    14cc:	2b00      	cmp	r3, #0
    14ce:	f6bf af5f 	bge.w	1390 <cbvprintf+0x504>
				value->uint = (uint_value_type)-sint;
    14d2:	4252      	negs	r2, r2
    14d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    14d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    14dc:	262d      	movs	r6, #45	; 0x2d
    14de:	e757      	b.n	1390 <cbvprintf+0x504>
				sign = '+';
    14e0:	262b      	movs	r6, #43	; 0x2b
    14e2:	e7f1      	b.n	14c8 <cbvprintf+0x63c>
		switch (conv->specifier) {
    14e4:	2600      	movs	r6, #0
    14e6:	e753      	b.n	1390 <cbvprintf+0x504>
			if (value->ptr != NULL) {
    14e8:	980a      	ldr	r0, [sp, #40]	; 0x28
    14ea:	b340      	cbz	r0, 153e <cbvprintf+0x6b2>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    14ec:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    14f0:	9300      	str	r3, [sp, #0]
    14f2:	aa0c      	add	r2, sp, #48	; 0x30
    14f4:	ab04      	add	r3, sp, #16
    14f6:	2100      	movs	r1, #0
    14f8:	f004 fc01 	bl	5cfe <encode_uint>
				conv->altform_0c = true;
    14fc:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    1500:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1504:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1508:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    150c:	4682      	mov	sl, r0
				conv->altform_0c = true;
    150e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    1512:	2600      	movs	r6, #0
				goto prec_int_pad0;
    1514:	e746      	b.n	13a4 <cbvprintf+0x518>
				store_count(conv, value->ptr, count);
    1516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1518:	2907      	cmp	r1, #7
    151a:	f63f aee3 	bhi.w	12e4 <cbvprintf+0x458>
    151e:	e8df f001 	tbb	[pc, r1]
    1522:	040c      	.short	0x040c
    1524:	08080c06 	.word	0x08080c06
    1528:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    152a:	701d      	strb	r5, [r3, #0]
		break;
    152c:	e6da      	b.n	12e4 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    152e:	801d      	strh	r5, [r3, #0]
		break;
    1530:	e6d8      	b.n	12e4 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    1532:	17ea      	asrs	r2, r5, #31
    1534:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    1538:	e6d4      	b.n	12e4 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    153a:	601d      	str	r5, [r3, #0]
		break;
    153c:	e6d2      	b.n	12e4 <cbvprintf+0x458>
			bps = "(nil)";
    153e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1608 <cbvprintf+0x77c>
    1542:	4606      	mov	r6, r0
			bpe = bps + 5;
    1544:	f10a 0805 	add.w	r8, sl, #5
    1548:	e78e      	b.n	1468 <cbvprintf+0x5dc>
		} else if (conv->altform_0) {
    154a:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    154c:	bf48      	it	mi
    154e:	3301      	addmi	r3, #1
    1550:	e793      	b.n	147a <cbvprintf+0x5ee>
					OUTC(pad);
    1552:	4618      	mov	r0, r3
    1554:	9303      	str	r3, [sp, #12]
    1556:	4659      	mov	r1, fp
    1558:	9b02      	ldr	r3, [sp, #8]
    155a:	4798      	blx	r3
    155c:	2800      	cmp	r0, #0
    155e:	9b03      	ldr	r3, [sp, #12]
    1560:	da04      	bge.n	156c <cbvprintf+0x6e0>
#undef OUTS
#undef OUTC
}
    1562:	b011      	add	sp, #68	; 0x44
    1564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1568:	2320      	movs	r3, #32
    156a:	444d      	add	r5, r9
    156c:	464a      	mov	r2, r9
				while (width-- > 0) {
    156e:	2a00      	cmp	r2, #0
    1570:	eba5 0109 	sub.w	r1, r5, r9
    1574:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    1578:	dceb      	bgt.n	1552 <cbvprintf+0x6c6>
    157a:	460d      	mov	r5, r1
		if (sign != 0) {
    157c:	b136      	cbz	r6, 158c <cbvprintf+0x700>
			OUTC(sign);
    157e:	9b02      	ldr	r3, [sp, #8]
    1580:	4659      	mov	r1, fp
    1582:	4630      	mov	r0, r6
    1584:	4798      	blx	r3
    1586:	2800      	cmp	r0, #0
    1588:	dbeb      	blt.n	1562 <cbvprintf+0x6d6>
    158a:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    158c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1590:	06d9      	lsls	r1, r3, #27
    1592:	d401      	bmi.n	1598 <cbvprintf+0x70c>
    1594:	071a      	lsls	r2, r3, #28
    1596:	d506      	bpl.n	15a6 <cbvprintf+0x71a>
				OUTC('0');
    1598:	9b02      	ldr	r3, [sp, #8]
    159a:	4659      	mov	r1, fp
    159c:	2030      	movs	r0, #48	; 0x30
    159e:	4798      	blx	r3
    15a0:	2800      	cmp	r0, #0
    15a2:	dbde      	blt.n	1562 <cbvprintf+0x6d6>
    15a4:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    15a6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    15aa:	06db      	lsls	r3, r3, #27
    15ac:	d507      	bpl.n	15be <cbvprintf+0x732>
				OUTC(conv->specifier);
    15ae:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    15b2:	9b02      	ldr	r3, [sp, #8]
    15b4:	4659      	mov	r1, fp
    15b6:	4798      	blx	r3
    15b8:	2800      	cmp	r0, #0
    15ba:	dbd2      	blt.n	1562 <cbvprintf+0x6d6>
    15bc:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    15be:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    15c0:	442e      	add	r6, r5
    15c2:	1b73      	subs	r3, r6, r5
    15c4:	2b00      	cmp	r3, #0
    15c6:	dc16      	bgt.n	15f6 <cbvprintf+0x76a>
			OUTS(bps, bpe);
    15c8:	9802      	ldr	r0, [sp, #8]
    15ca:	4643      	mov	r3, r8
    15cc:	4652      	mov	r2, sl
    15ce:	4659      	mov	r1, fp
    15d0:	f004 fbdb 	bl	5d8a <outs>
    15d4:	2800      	cmp	r0, #0
    15d6:	dbc4      	blt.n	1562 <cbvprintf+0x6d6>
    15d8:	4405      	add	r5, r0
		while (width > 0) {
    15da:	44a9      	add	r9, r5
    15dc:	eba9 0305 	sub.w	r3, r9, r5
    15e0:	2b00      	cmp	r3, #0
    15e2:	f77f ae7f 	ble.w	12e4 <cbvprintf+0x458>
			OUTC(' ');
    15e6:	9b02      	ldr	r3, [sp, #8]
    15e8:	4659      	mov	r1, fp
    15ea:	2020      	movs	r0, #32
    15ec:	4798      	blx	r3
    15ee:	2800      	cmp	r0, #0
    15f0:	dbb7      	blt.n	1562 <cbvprintf+0x6d6>
    15f2:	3501      	adds	r5, #1
			--width;
    15f4:	e7f2      	b.n	15dc <cbvprintf+0x750>
				OUTC('0');
    15f6:	9b02      	ldr	r3, [sp, #8]
    15f8:	4659      	mov	r1, fp
    15fa:	2030      	movs	r0, #48	; 0x30
    15fc:	4798      	blx	r3
    15fe:	2800      	cmp	r0, #0
    1600:	dbaf      	blt.n	1562 <cbvprintf+0x6d6>
    1602:	3501      	adds	r5, #1
    1604:	e7dd      	b.n	15c2 <cbvprintf+0x736>
    1606:	bf00      	nop
    1608:	00007150 	.word	0x00007150

0000160c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    160c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    160e:	4910      	ldr	r1, [pc, #64]	; (1650 <enable_logger+0x44>)
    1610:	4810      	ldr	r0, [pc, #64]	; (1654 <enable_logger+0x48>)
{
    1612:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    1614:	2200      	movs	r2, #0
    1616:	f005 fb0c 	bl	6c32 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    161a:	4d0f      	ldr	r5, [pc, #60]	; (1658 <enable_logger+0x4c>)
    161c:	490f      	ldr	r1, [pc, #60]	; (165c <enable_logger+0x50>)
    161e:	2200      	movs	r2, #0
    1620:	2300      	movs	r3, #0
    1622:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1626:	2400      	movs	r4, #0
    1628:	230e      	movs	r3, #14
    162a:	e9cd 3403 	strd	r3, r4, [sp, #12]
    162e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1632:	4b0b      	ldr	r3, [pc, #44]	; (1660 <enable_logger+0x54>)
    1634:	9400      	str	r4, [sp, #0]
    1636:	f44f 7240 	mov.w	r2, #768	; 0x300
    163a:	4628      	mov	r0, r5
    163c:	f003 fd80 	bl	5140 <z_impl_k_thread_create>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread, *(uintptr_t *)&str, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    1640:	4908      	ldr	r1, [pc, #32]	; (1664 <enable_logger+0x58>)
    1642:	4628      	mov	r0, r5
    1644:	f005 faac 	bl	6ba0 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    1648:	4620      	mov	r0, r4
    164a:	b009      	add	sp, #36	; 0x24
    164c:	bd30      	pop	{r4, r5, pc}
    164e:	bf00      	nop
    1650:	00001669 	.word	0x00001669
    1654:	20000150 	.word	0x20000150
    1658:	20000188 	.word	0x20000188
    165c:	20000ca0 	.word	0x20000ca0
    1660:	000019c1 	.word	0x000019c1
    1664:	00007156 	.word	0x00007156

00001668 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1668:	4801      	ldr	r0, [pc, #4]	; (1670 <log_process_thread_timer_expiry_fn+0x8>)
    166a:	f003 bcf1 	b.w	5050 <z_impl_k_sem_give>
    166e:	bf00      	nop
    1670:	20000130 	.word	0x20000130

00001674 <log_core_init>:
{
    1674:	b508      	push	{r3, lr}
		log_msg_pool_init();
    1676:	f000 fa67 	bl	1b48 <log_msg_pool_init>
		log_list_init(&list);
    167a:	4809      	ldr	r0, [pc, #36]	; (16a0 <log_core_init+0x2c>)
    167c:	f004 fb9c 	bl	5db8 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    1680:	2304      	movs	r3, #4
    1682:	2228      	movs	r2, #40	; 0x28
    1684:	4907      	ldr	r1, [pc, #28]	; (16a4 <log_core_init+0x30>)
    1686:	4808      	ldr	r0, [pc, #32]	; (16a8 <log_core_init+0x34>)
    1688:	f005 f996 	bl	69b8 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    168c:	4b07      	ldr	r3, [pc, #28]	; (16ac <log_core_init+0x38>)
    168e:	4a08      	ldr	r2, [pc, #32]	; (16b0 <log_core_init+0x3c>)
    1690:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    1692:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    1696:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    169a:	f000 bc9d 	b.w	1fd8 <log_output_timestamp_freq_set>
    169e:	bf00      	nop
    16a0:	200003b8 	.word	0x200003b8
    16a4:	20001ce0 	.word	0x20001ce0
    16a8:	200003c0 	.word	0x200003c0
    16ac:	2000000c 	.word	0x2000000c
    16b0:	00005df7 	.word	0x00005df7

000016b4 <dropped_notify>:
{
    16b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    16b6:	4b0f      	ldr	r3, [pc, #60]	; (16f4 <dropped_notify+0x40>)
    16b8:	f3bf 8f5b 	dmb	ish
    16bc:	2500      	movs	r5, #0
    16be:	e853 7f00 	ldrex	r7, [r3]
    16c2:	e843 5200 	strex	r2, r5, [r3]
    16c6:	2a00      	cmp	r2, #0
    16c8:	d1f9      	bne.n	16be <dropped_notify+0xa>
    16ca:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    16ce:	4c0a      	ldr	r4, [pc, #40]	; (16f8 <dropped_notify+0x44>)
    16d0:	4e0a      	ldr	r6, [pc, #40]	; (16fc <dropped_notify+0x48>)
    16d2:	1b36      	subs	r6, r6, r4
    16d4:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    16d6:	42b5      	cmp	r5, r6
    16d8:	db00      	blt.n	16dc <dropped_notify+0x28>
}
    16da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    16dc:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    16de:	795b      	ldrb	r3, [r3, #5]
    16e0:	b12b      	cbz	r3, 16ee <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    16e2:	6823      	ldr	r3, [r4, #0]
    16e4:	68db      	ldr	r3, [r3, #12]
    16e6:	b113      	cbz	r3, 16ee <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    16e8:	4639      	mov	r1, r7
    16ea:	4620      	mov	r0, r4
    16ec:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    16ee:	3501      	adds	r5, #1
    16f0:	3410      	adds	r4, #16
    16f2:	e7f0      	b.n	16d6 <dropped_notify+0x22>
    16f4:	200003b0 	.word	0x200003b0
    16f8:	00006e68 	.word	0x00006e68
    16fc:	00006e88 	.word	0x00006e88

00001700 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1700:	4b06      	ldr	r3, [pc, #24]	; (171c <log_dropped+0x1c>)
    1702:	f3bf 8f5b 	dmb	ish
    1706:	e853 2f00 	ldrex	r2, [r3]
    170a:	3201      	adds	r2, #1
    170c:	e843 2100 	strex	r1, r2, [r3]
    1710:	2900      	cmp	r1, #0
    1712:	d1f8      	bne.n	1706 <log_dropped+0x6>
    1714:	f3bf 8f5b 	dmb	ish
}
    1718:	4770      	bx	lr
    171a:	bf00      	nop
    171c:	200003b0 	.word	0x200003b0

00001720 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    1720:	4a04      	ldr	r2, [pc, #16]	; (1734 <log_source_name_get+0x14>)
    1722:	4b05      	ldr	r3, [pc, #20]	; (1738 <log_source_name_get+0x18>)
    1724:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    1726:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    172a:	bf34      	ite	cc
    172c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    1730:	2000      	movcs	r0, #0
}
    1732:	4770      	bx	lr
    1734:	00006e28 	.word	0x00006e28
    1738:	00006e68 	.word	0x00006e68

0000173c <log_backend_enable>:
	id += backend - log_backend_get(0);
    173c:	4a09      	ldr	r2, [pc, #36]	; (1764 <log_backend_enable+0x28>)
	backend->cb->id = id;
    173e:	6843      	ldr	r3, [r0, #4]
    1740:	1a80      	subs	r0, r0, r2
{
    1742:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    1744:	1100      	asrs	r0, r0, #4
	if (!backend_attached) {
    1746:	4c08      	ldr	r4, [pc, #32]	; (1768 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    1748:	6019      	str	r1, [r3, #0]
	id += backend - log_backend_get(0);
    174a:	3001      	adds	r0, #1
	backend->cb->active = true;
    174c:	2201      	movs	r2, #1
	log_backend_id_set(backend, id);
    174e:	7118      	strb	r0, [r3, #4]
    1750:	715a      	strb	r2, [r3, #5]
	if (!backend_attached) {
    1752:	7823      	ldrb	r3, [r4, #0]
    1754:	b913      	cbnz	r3, 175c <log_backend_enable+0x20>
    1756:	4805      	ldr	r0, [pc, #20]	; (176c <log_backend_enable+0x30>)
    1758:	f003 fc7a 	bl	5050 <z_impl_k_sem_give>
	backend_attached = true;
    175c:	2301      	movs	r3, #1
    175e:	7023      	strb	r3, [r4, #0]
}
    1760:	bd10      	pop	{r4, pc}
    1762:	bf00      	nop
    1764:	00006e68 	.word	0x00006e68
    1768:	2000086f 	.word	0x2000086f
    176c:	20000130 	.word	0x20000130

00001770 <log_init>:
{
    1770:	b570      	push	{r4, r5, r6, lr}
    1772:	4b11      	ldr	r3, [pc, #68]	; (17b8 <log_init+0x48>)
    1774:	f3bf 8f5b 	dmb	ish
    1778:	e853 5f00 	ldrex	r5, [r3]
    177c:	1c6a      	adds	r2, r5, #1
    177e:	e843 2100 	strex	r1, r2, [r3]
    1782:	2900      	cmp	r1, #0
    1784:	d1f8      	bne.n	1778 <log_init+0x8>
    1786:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    178a:	b92d      	cbnz	r5, 1798 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    178c:	4c0b      	ldr	r4, [pc, #44]	; (17bc <log_init+0x4c>)
    178e:	4e0c      	ldr	r6, [pc, #48]	; (17c0 <log_init+0x50>)
    1790:	1b36      	subs	r6, r6, r4
    1792:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    1794:	42b5      	cmp	r5, r6
    1796:	db00      	blt.n	179a <log_init+0x2a>
}
    1798:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    179a:	7b23      	ldrb	r3, [r4, #12]
    179c:	b14b      	cbz	r3, 17b2 <log_init+0x42>
			if (backend->api->init != NULL) {
    179e:	6823      	ldr	r3, [r4, #0]
    17a0:	695b      	ldr	r3, [r3, #20]
    17a2:	b10b      	cbz	r3, 17a8 <log_init+0x38>
				backend->api->init(backend);
    17a4:	4620      	mov	r0, r4
    17a6:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    17a8:	2204      	movs	r2, #4
    17aa:	2100      	movs	r1, #0
    17ac:	4620      	mov	r0, r4
    17ae:	f7ff ffc5 	bl	173c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    17b2:	3501      	adds	r5, #1
    17b4:	3410      	adds	r4, #16
    17b6:	e7ed      	b.n	1794 <log_init+0x24>
    17b8:	200003b4 	.word	0x200003b4
    17bc:	00006e68 	.word	0x00006e68
    17c0:	00006e88 	.word	0x00006e88

000017c4 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    17c4:	4b16      	ldr	r3, [pc, #88]	; (1820 <CONFIG_LOG_BUFFER_SIZE+0x20>)
    17c6:	4298      	cmp	r0, r3
{
    17c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    17ca:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    17cc:	d302      	bcc.n	17d4 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    17ce:	4b15      	ldr	r3, [pc, #84]	; (1824 <CONFIG_LOG_BUFFER_SIZE+0x24>)
    17d0:	4298      	cmp	r0, r3
    17d2:	d320      	bcc.n	1816 <CONFIG_LOG_BUFFER_SIZE+0x16>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    17d4:	4814      	ldr	r0, [pc, #80]	; (1828 <CONFIG_LOG_BUFFER_SIZE+0x28>)
    17d6:	2200      	movs	r2, #0
    17d8:	2300      	movs	r3, #0
    17da:	a901      	add	r1, sp, #4
    17dc:	f002 ffe0 	bl	47a0 <k_mem_slab_alloc>
	if (err != 0) {
    17e0:	4605      	mov	r5, r0
    17e2:	b9d8      	cbnz	r0, 181c <CONFIG_LOG_BUFFER_SIZE+0x1c>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    17e4:	2201      	movs	r2, #1
    17e6:	9b01      	ldr	r3, [sp, #4]
    17e8:	f3bf 8f5b 	dmb	ish
    17ec:	e853 1f00 	ldrex	r1, [r3]
    17f0:	e843 2000 	strex	r0, r2, [r3]
    17f4:	2800      	cmp	r0, #0
    17f6:	d1f9      	bne.n	17ec <log_strdup+0x28>
    17f8:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    17fc:	9801      	ldr	r0, [sp, #4]
    17fe:	4621      	mov	r1, r4
    1800:	221f      	movs	r2, #31
    1802:	3004      	adds	r0, #4
    1804:	f004 ff13 	bl	662e <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    1808:	9c01      	ldr	r4, [sp, #4]
    180a:	237e      	movs	r3, #126	; 0x7e
    180c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    1810:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
    1814:	3404      	adds	r4, #4
}
    1816:	4620      	mov	r0, r4
    1818:	b003      	add	sp, #12
    181a:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    181c:	4c03      	ldr	r4, [pc, #12]	; (182c <CONFIG_LOG_BUFFER_SIZE+0x2c>)
    181e:	e7fa      	b.n	1816 <CONFIG_LOG_BUFFER_SIZE+0x16>
    1820:	00006c90 	.word	0x00006c90
    1824:	00007924 	.word	0x00007924
    1828:	200003c0 	.word	0x200003c0
    182c:	0000715e 	.word	0x0000715e

00001830 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    1830:	b148      	cbz	r0, 1846 <log_is_strdup+0x16>
    1832:	4b05      	ldr	r3, [pc, #20]	; (1848 <log_is_strdup+0x18>)
    1834:	4298      	cmp	r0, r3
    1836:	d305      	bcc.n	1844 <log_is_strdup+0x14>
    1838:	33a0      	adds	r3, #160	; 0xa0
    183a:	4298      	cmp	r0, r3
    183c:	bf2c      	ite	cs
    183e:	2000      	movcs	r0, #0
    1840:	2001      	movcc	r0, #1
    1842:	4770      	bx	lr
    1844:	2000      	movs	r0, #0
}
    1846:	4770      	bx	lr
    1848:	20001ce0 	.word	0x20001ce0

0000184c <z_impl_log_process>:
{
    184c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    1850:	4b4d      	ldr	r3, [pc, #308]	; (1988 <z_impl_log_process+0x13c>)
    1852:	781b      	ldrb	r3, [r3, #0]
{
    1854:	b085      	sub	sp, #20
    1856:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    1858:	b903      	cbnz	r3, 185c <z_impl_log_process+0x10>
    185a:	b360      	cbz	r0, 18b6 <z_impl_log_process+0x6a>
    185c:	f04f 0320 	mov.w	r3, #32
    1860:	f3ef 8611 	mrs	r6, BASEPRI
    1864:	f383 8811 	msr	BASEPRI, r3
    1868:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    186c:	4847      	ldr	r0, [pc, #284]	; (198c <z_impl_log_process+0x140>)
    186e:	f004 fab3 	bl	5dd8 <log_list_head_get>
    1872:	4605      	mov	r5, r0
	__asm__ volatile(
    1874:	f386 8811 	msr	BASEPRI, r6
    1878:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    187c:	b178      	cbz	r0, 189e <z_impl_log_process+0x52>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    187e:	f3bf 8f5b 	dmb	ish
    1882:	4b43      	ldr	r3, [pc, #268]	; (1990 <z_impl_log_process+0x144>)
    1884:	e853 2f00 	ldrex	r2, [r3]
    1888:	3a01      	subs	r2, #1
    188a:	e843 2100 	strex	r1, r2, [r3]
    188e:	2900      	cmp	r1, #0
    1890:	d1f8      	bne.n	1884 <z_impl_log_process+0x38>
    1892:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    1896:	b194      	cbz	r4, 18be <z_impl_log_process+0x72>
	log_msg_put(msg);
    1898:	4628      	mov	r0, r5
    189a:	f004 fbc3 	bl	6024 <log_msg_put>
	if (!bypass && dropped_cnt) {
    189e:	b924      	cbnz	r4, 18aa <z_impl_log_process+0x5e>
    18a0:	4b3c      	ldr	r3, [pc, #240]	; (1994 <z_impl_log_process+0x148>)
    18a2:	681b      	ldr	r3, [r3, #0]
    18a4:	b10b      	cbz	r3, 18aa <z_impl_log_process+0x5e>
		dropped_notify();
    18a6:	f7ff ff05 	bl	16b4 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    18aa:	4838      	ldr	r0, [pc, #224]	; (198c <z_impl_log_process+0x140>)
    18ac:	f004 fa92 	bl	5dd4 <log_list_head_peek>
    18b0:	1e04      	subs	r4, r0, #0
    18b2:	bf18      	it	ne
    18b4:	2401      	movne	r4, #1
}
    18b6:	4620      	mov	r0, r4
    18b8:	b005      	add	sp, #20
    18ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    18be:	4b36      	ldr	r3, [pc, #216]	; (1998 <z_impl_log_process+0x14c>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    18c0:	781b      	ldrb	r3, [r3, #0]
    18c2:	b9e3      	cbnz	r3, 18fe <z_impl_log_process+0xb2>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    18c4:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    18c6:	07db      	lsls	r3, r3, #31
    18c8:	d419      	bmi.n	18fe <z_impl_log_process+0xb2>
	msg_str = log_msg_str_get(msg);
    18ca:	f004 fbbe 	bl	604a <log_msg_str_get>
    18ce:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    18d0:	4628      	mov	r0, r5
    18d2:	f004 fb85 	bl	5fe0 <log_msg_nargs_get>
    18d6:	4601      	mov	r1, r0
    18d8:	4638      	mov	r0, r7
    18da:	f004 fa90 	bl	5dfe <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    18de:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 199c <z_impl_log_process+0x150>
    18e2:	4b2f      	ldr	r3, [pc, #188]	; (19a0 <z_impl_log_process+0x154>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    18e4:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 19a4 <z_impl_log_process+0x158>
    18e8:	eba3 0308 	sub.w	r3, r3, r8
    18ec:	08db      	lsrs	r3, r3, #3
    18ee:	9303      	str	r3, [sp, #12]
    18f0:	4b2d      	ldr	r3, [pc, #180]	; (19a8 <z_impl_log_process+0x15c>)
    18f2:	eba3 0308 	sub.w	r3, r3, r8
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    18f6:	4606      	mov	r6, r0
    18f8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    18fc:	b936      	cbnz	r6, 190c <z_impl_log_process+0xc0>
    18fe:	4e2b      	ldr	r6, [pc, #172]	; (19ac <z_impl_log_process+0x160>)
    1900:	4f2b      	ldr	r7, [pc, #172]	; (19b0 <z_impl_log_process+0x164>)
    1902:	1bbf      	subs	r7, r7, r6
    1904:	113f      	asrs	r7, r7, #4
    1906:	f04f 0800 	mov.w	r8, #0
    190a:	e03a      	b.n	1982 <z_impl_log_process+0x136>
		idx = 31 - __builtin_clz(mask);
    190c:	fab6 f186 	clz	r1, r6
    1910:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    1914:	4649      	mov	r1, r9
    1916:	4628      	mov	r0, r5
    1918:	f004 fb65 	bl	5fe6 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    191c:	4b25      	ldr	r3, [pc, #148]	; (19b4 <z_impl_log_process+0x168>)
    191e:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    1920:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    1922:	d302      	bcc.n	192a <z_impl_log_process+0xde>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    1924:	4a24      	ldr	r2, [pc, #144]	; (19b8 <z_impl_log_process+0x16c>)
    1926:	4290      	cmp	r0, r2
    1928:	d31a      	bcc.n	1960 <z_impl_log_process+0x114>
    192a:	4608      	mov	r0, r1
    192c:	f7ff ff80 	bl	1830 <log_is_strdup>
    1930:	4602      	mov	r2, r0
    1932:	b9a8      	cbnz	r0, 1960 <z_impl_log_process+0x114>
    1934:	4b21      	ldr	r3, [pc, #132]	; (19bc <z_impl_log_process+0x170>)
    1936:	4299      	cmp	r1, r3
    1938:	d012      	beq.n	1960 <z_impl_log_process+0x114>
	return msg->hdr.ids.source_id;
    193a:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    193c:	9903      	ldr	r1, [sp, #12]
    193e:	f3c3 1389 	ubfx	r3, r3, #6, #10
    1942:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    1944:	bf38      	it	cc
    1946:	f858 2033 	ldrcc.w	r2, [r8, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    194a:	ea4f 138a 	mov.w	r3, sl, lsl #6
    194e:	f043 0301 	orr.w	r3, r3, #1
    1952:	f8ad 3000 	strh.w	r3, [sp]
    1956:	4649      	mov	r1, r9
    1958:	463b      	mov	r3, r7
    195a:	4658      	mov	r0, fp
    195c:	f004 faa9 	bl	5eb2 <log_3>
		mask &= ~BIT(idx);
    1960:	2301      	movs	r3, #1
    1962:	fa03 f109 	lsl.w	r1, r3, r9
    1966:	ea26 0601 	bic.w	r6, r6, r1
    196a:	e7c7      	b.n	18fc <z_impl_log_process+0xb0>
	return backend->cb->active;
    196c:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    196e:	795b      	ldrb	r3, [r3, #5]
    1970:	b123      	cbz	r3, 197c <z_impl_log_process+0x130>
	backend->api->put(backend, msg);
    1972:	6833      	ldr	r3, [r6, #0]
    1974:	4629      	mov	r1, r5
    1976:	681b      	ldr	r3, [r3, #0]
    1978:	4630      	mov	r0, r6
    197a:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    197c:	f108 0801 	add.w	r8, r8, #1
    1980:	3610      	adds	r6, #16
    1982:	45b8      	cmp	r8, r7
    1984:	dbf2      	blt.n	196c <z_impl_log_process+0x120>
    1986:	e787      	b.n	1898 <z_impl_log_process+0x4c>
    1988:	2000086f 	.word	0x2000086f
    198c:	200003b8 	.word	0x200003b8
    1990:	200003ac 	.word	0x200003ac
    1994:	200003b0 	.word	0x200003b0
    1998:	20000870 	.word	0x20000870
    199c:	00006e28 	.word	0x00006e28
    19a0:	00006e68 	.word	0x00006e68
    19a4:	00007178 	.word	0x00007178
    19a8:	00006e38 	.word	0x00006e38
    19ac:	00006e68 	.word	0x00006e68
    19b0:	00006e88 	.word	0x00006e88
    19b4:	00006c90 	.word	0x00006c90
    19b8:	00007924 	.word	0x00007924
    19bc:	0000715e 	.word	0x0000715e

000019c0 <log_process_thread_func>:
{
    19c0:	b510      	push	{r4, lr}
	log_init();
    19c2:	f7ff fed5 	bl	1770 <log_init>
	return z_impl_k_current_get();
    19c6:	f003 faeb 	bl	4fa0 <z_impl_k_current_get>
	proc_tid = process_tid;
    19ca:	4b0c      	ldr	r3, [pc, #48]	; (19fc <log_process_thread_func+0x3c>)
    19cc:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    19ce:	b130      	cbz	r0, 19de <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    19d0:	4b0b      	ldr	r3, [pc, #44]	; (1a00 <log_process_thread_func+0x40>)
	    process_tid &&
    19d2:	681b      	ldr	r3, [r3, #0]
    19d4:	2b09      	cmp	r3, #9
    19d6:	dd02      	ble.n	19de <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    19d8:	480a      	ldr	r0, [pc, #40]	; (1a04 <log_process_thread_func+0x44>)
    19da:	f003 fb39 	bl	5050 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    19de:	4c09      	ldr	r4, [pc, #36]	; (1a04 <log_process_thread_func+0x44>)
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    19e0:	2000      	movs	r0, #0
    19e2:	f7ff ff33 	bl	184c <z_impl_log_process>
		if (log_process(false) == false) {
    19e6:	2800      	cmp	r0, #0
    19e8:	d1fa      	bne.n	19e0 <log_process_thread_func+0x20>
    19ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    19ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    19f2:	4620      	mov	r0, r4
    19f4:	f003 fb4c 	bl	5090 <z_impl_k_sem_take>
    19f8:	e7f2      	b.n	19e0 <log_process_thread_func+0x20>
    19fa:	bf00      	nop
    19fc:	200003dc 	.word	0x200003dc
    1a00:	200003ac 	.word	0x200003ac
    1a04:	20000130 	.word	0x20000130

00001a08 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    1a08:	4b29      	ldr	r3, [pc, #164]	; (1ab0 <msg_finalize+0xa8>)
{
    1a0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
    1a0c:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    1a0e:	8141      	strh	r1, [r0, #10]
{
    1a10:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1a12:	4798      	blx	r3
    1a14:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    1a16:	f04f 0320 	mov.w	r3, #32
    1a1a:	f3ef 8511 	mrs	r5, BASEPRI
    1a1e:	f383 8811 	msr	BASEPRI, r3
    1a22:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    1a26:	4823      	ldr	r0, [pc, #140]	; (1ab4 <msg_finalize+0xac>)
    1a28:	4621      	mov	r1, r4
    1a2a:	f004 f9c9 	bl	5dc0 <log_list_add_tail>
	__asm__ volatile(
    1a2e:	f385 8811 	msr	BASEPRI, r5
    1a32:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1a36:	f3bf 8f5b 	dmb	ish
    1a3a:	4b1f      	ldr	r3, [pc, #124]	; (1ab8 <msg_finalize+0xb0>)
    1a3c:	e853 2f00 	ldrex	r2, [r3]
    1a40:	3201      	adds	r2, #1
    1a42:	e843 2100 	strex	r1, r2, [r3]
    1a46:	2900      	cmp	r1, #0
    1a48:	d1f8      	bne.n	1a3c <msg_finalize+0x34>
    1a4a:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    1a4e:	4a1b      	ldr	r2, [pc, #108]	; (1abc <msg_finalize+0xb4>)
    1a50:	7812      	ldrb	r2, [r2, #0]
    1a52:	b182      	cbz	r2, 1a76 <msg_finalize+0x6e>
	__asm__ volatile(
    1a54:	f04f 0320 	mov.w	r3, #32
    1a58:	f3ef 8411 	mrs	r4, BASEPRI
    1a5c:	f383 8811 	msr	BASEPRI, r3
    1a60:	f3bf 8f6f 	isb	sy
    1a64:	2000      	movs	r0, #0
    1a66:	f7ff fef1 	bl	184c <z_impl_log_process>
	__asm__ volatile(
    1a6a:	f384 8811 	msr	BASEPRI, r4
    1a6e:	f3bf 8f6f 	isb	sy
}
    1a72:	b003      	add	sp, #12
    1a74:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    1a76:	4a12      	ldr	r2, [pc, #72]	; (1ac0 <msg_finalize+0xb8>)
    1a78:	681b      	ldr	r3, [r3, #0]
    1a7a:	6812      	ldr	r2, [r2, #0]
    1a7c:	2a00      	cmp	r2, #0
    1a7e:	d0f8      	beq.n	1a72 <msg_finalize+0x6a>
    1a80:	2b01      	cmp	r3, #1
    1a82:	d10a      	bne.n	1a9a <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    1a84:	2200      	movs	r2, #0
    1a86:	2300      	movs	r3, #0
    1a88:	e9cd 2300 	strd	r2, r3, [sp]
    1a8c:	480d      	ldr	r0, [pc, #52]	; (1ac4 <msg_finalize+0xbc>)
    1a8e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1a92:	2300      	movs	r3, #0
    1a94:	f003 fd70 	bl	5578 <z_impl_k_timer_start>
    1a98:	e7eb      	b.n	1a72 <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    1a9a:	2b0a      	cmp	r3, #10
    1a9c:	d1e9      	bne.n	1a72 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    1a9e:	4809      	ldr	r0, [pc, #36]	; (1ac4 <msg_finalize+0xbc>)
    1aa0:	f005 f8d3 	bl	6c4a <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1aa4:	4808      	ldr	r0, [pc, #32]	; (1ac8 <msg_finalize+0xc0>)
}
    1aa6:	b003      	add	sp, #12
    1aa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    1aac:	f003 bad0 	b.w	5050 <z_impl_k_sem_give>
    1ab0:	2000000c 	.word	0x2000000c
    1ab4:	200003b8 	.word	0x200003b8
    1ab8:	200003ac 	.word	0x200003ac
    1abc:	20000870 	.word	0x20000870
    1ac0:	200003dc 	.word	0x200003dc
    1ac4:	20000150 	.word	0x20000150
    1ac8:	20000130 	.word	0x20000130

00001acc <z_impl_log_panic>:
{
    1acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    1ace:	4f0e      	ldr	r7, [pc, #56]	; (1b08 <z_impl_log_panic+0x3c>)
    1ad0:	783d      	ldrb	r5, [r7, #0]
    1ad2:	b975      	cbnz	r5, 1af2 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    1ad4:	4c0d      	ldr	r4, [pc, #52]	; (1b0c <z_impl_log_panic+0x40>)
    1ad6:	4e0e      	ldr	r6, [pc, #56]	; (1b10 <z_impl_log_panic+0x44>)
	log_init();
    1ad8:	f7ff fe4a 	bl	1770 <log_init>
    1adc:	1b36      	subs	r6, r6, r4
    1ade:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1ae0:	42b5      	cmp	r5, r6
    1ae2:	db07      	blt.n	1af4 <z_impl_log_panic+0x28>
    1ae4:	2000      	movs	r0, #0
    1ae6:	f7ff feb1 	bl	184c <z_impl_log_process>
		while (log_process(false) == true) {
    1aea:	2800      	cmp	r0, #0
    1aec:	d1fa      	bne.n	1ae4 <z_impl_log_panic+0x18>
	panic_mode = true;
    1aee:	2301      	movs	r3, #1
    1af0:	703b      	strb	r3, [r7, #0]
}
    1af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    1af4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1af6:	795b      	ldrb	r3, [r3, #5]
    1af8:	b11b      	cbz	r3, 1b02 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    1afa:	6823      	ldr	r3, [r4, #0]
    1afc:	4620      	mov	r0, r4
    1afe:	691b      	ldr	r3, [r3, #16]
    1b00:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    1b02:	3501      	adds	r5, #1
    1b04:	3410      	adds	r4, #16
    1b06:	e7eb      	b.n	1ae0 <z_impl_log_panic+0x14>
    1b08:	20000870 	.word	0x20000870
    1b0c:	00006e68 	.word	0x00006e68
    1b10:	00006e88 	.word	0x00006e88

00001b14 <log_free>:
{
    1b14:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    1b16:	3804      	subs	r0, #4
    1b18:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1b1a:	f3bf 8f5b 	dmb	ish
    1b1e:	e850 3f00 	ldrex	r3, [r0]
    1b22:	1e5a      	subs	r2, r3, #1
    1b24:	e840 2100 	strex	r1, r2, [r0]
    1b28:	2900      	cmp	r1, #0
    1b2a:	d1f8      	bne.n	1b1e <log_free+0xa>
    1b2c:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    1b30:	2b01      	cmp	r3, #1
    1b32:	d103      	bne.n	1b3c <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    1b34:	4803      	ldr	r0, [pc, #12]	; (1b44 <log_free+0x30>)
    1b36:	a901      	add	r1, sp, #4
    1b38:	f002 fe62 	bl	4800 <k_mem_slab_free>
}
    1b3c:	b003      	add	sp, #12
    1b3e:	f85d fb04 	ldr.w	pc, [sp], #4
    1b42:	bf00      	nop
    1b44:	200003c0 	.word	0x200003c0

00001b48 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    1b48:	4902      	ldr	r1, [pc, #8]	; (1b54 <log_msg_pool_init+0xc>)
    1b4a:	4803      	ldr	r0, [pc, #12]	; (1b58 <log_msg_pool_init+0x10>)
    1b4c:	23c0      	movs	r3, #192	; 0xc0
    1b4e:	2220      	movs	r2, #32
    1b50:	f004 bf32 	b.w	69b8 <k_mem_slab_init>
    1b54:	20001d80 	.word	0x20001d80
    1b58:	200003e0 	.word	0x200003e0

00001b5c <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    1b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    1b5e:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    1b60:	4d09      	ldr	r5, [pc, #36]	; (1b88 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    1b62:	9301      	str	r3, [sp, #4]
    1b64:	2001      	movs	r0, #1
    1b66:	f7ff fe71 	bl	184c <z_impl_log_process>
    1b6a:	4604      	mov	r4, r0
			log_dropped();
    1b6c:	f7ff fdc8 	bl	1700 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    1b70:	2200      	movs	r2, #0
    1b72:	2300      	movs	r3, #0
    1b74:	a901      	add	r1, sp, #4
    1b76:	4628      	mov	r0, r5
    1b78:	f002 fe12 	bl	47a0 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    1b7c:	b108      	cbz	r0, 1b82 <log_msg_no_space_handle+0x26>
    1b7e:	2c00      	cmp	r4, #0
    1b80:	d1f0      	bne.n	1b64 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    1b82:	9801      	ldr	r0, [sp, #4]
    1b84:	b003      	add	sp, #12
    1b86:	bd30      	pop	{r4, r5, pc}
    1b88:	200003e0 	.word	0x200003e0

00001b8c <log_msg_chunk_alloc>:
{
    1b8c:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    1b8e:	2300      	movs	r3, #0
    1b90:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    1b92:	4807      	ldr	r0, [pc, #28]	; (1bb0 <log_msg_chunk_alloc+0x24>)
    1b94:	2200      	movs	r2, #0
    1b96:	2300      	movs	r3, #0
    1b98:	a901      	add	r1, sp, #4
    1b9a:	f002 fe01 	bl	47a0 <k_mem_slab_alloc>
	if (err != 0) {
    1b9e:	b110      	cbz	r0, 1ba6 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    1ba0:	f7ff ffdc 	bl	1b5c <log_msg_no_space_handle>
    1ba4:	9001      	str	r0, [sp, #4]
}
    1ba6:	9801      	ldr	r0, [sp, #4]
    1ba8:	b003      	add	sp, #12
    1baa:	f85d fb04 	ldr.w	pc, [sp], #4
    1bae:	bf00      	nop
    1bb0:	200003e0 	.word	0x200003e0

00001bb4 <msg_free>:
{
    1bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1bb6:	7a03      	ldrb	r3, [r0, #8]
    1bb8:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
    1bba:	07dc      	lsls	r4, r3, #31
{
    1bbc:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    1bbe:	d41e      	bmi.n	1bfe <msg_free+0x4a>
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    1bc0:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
    1bc2:	092d      	lsrs	r5, r5, #4
    1bc4:	d01b      	beq.n	1bfe <msg_free+0x4a>
		uint32_t smask = 0U;
    1bc6:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
    1bc8:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    1bca:	9801      	ldr	r0, [sp, #4]
    1bcc:	4631      	mov	r1, r6
    1bce:	f004 fa0a 	bl	5fe6 <log_msg_arg_get>
    1bd2:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    1bd4:	f7ff fe2c 	bl	1830 <log_is_strdup>
    1bd8:	b170      	cbz	r0, 1bf8 <msg_free+0x44>
				if (smask == 0U) {
    1bda:	b934      	cbnz	r4, 1bea <msg_free+0x36>
					smask = z_log_get_s_mask(
    1bdc:	9b01      	ldr	r3, [sp, #4]
    1bde:	4629      	mov	r1, r5
    1be0:	6918      	ldr	r0, [r3, #16]
    1be2:	f004 f90c 	bl	5dfe <z_log_get_s_mask>
					if (smask == 0U) {
    1be6:	4604      	mov	r4, r0
    1be8:	b148      	cbz	r0, 1bfe <msg_free+0x4a>
				if (smask & BIT(i)) {
    1bea:	fa24 f306 	lsr.w	r3, r4, r6
    1bee:	07d9      	lsls	r1, r3, #31
    1bf0:	d502      	bpl.n	1bf8 <msg_free+0x44>
					log_free(buf);
    1bf2:	4638      	mov	r0, r7
    1bf4:	f7ff ff8e 	bl	1b14 <log_free>
		for (i = 0U; i < nargs; i++) {
    1bf8:	3601      	adds	r6, #1
    1bfa:	42ae      	cmp	r6, r5
    1bfc:	d3e5      	bcc.n	1bca <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    1bfe:	9b01      	ldr	r3, [sp, #4]
    1c00:	7a1a      	ldrb	r2, [r3, #8]
    1c02:	0792      	lsls	r2, r2, #30
    1c04:	d504      	bpl.n	1c10 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    1c06:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    1c08:	4c08      	ldr	r4, [pc, #32]	; (1c2c <msg_free+0x78>)
    1c0a:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    1c0c:	9b03      	ldr	r3, [sp, #12]
    1c0e:	b92b      	cbnz	r3, 1c1c <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    1c10:	4806      	ldr	r0, [pc, #24]	; (1c2c <msg_free+0x78>)
    1c12:	a901      	add	r1, sp, #4
    1c14:	f002 fdf4 	bl	4800 <k_mem_slab_free>
}
    1c18:	b005      	add	sp, #20
    1c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    1c1c:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    1c1e:	a903      	add	r1, sp, #12
    1c20:	4620      	mov	r0, r4
    1c22:	f002 fded 	bl	4800 <k_mem_slab_free>
		cont = next;
    1c26:	9503      	str	r5, [sp, #12]
    1c28:	e7f0      	b.n	1c0c <msg_free+0x58>
    1c2a:	bf00      	nop
    1c2c:	200003e0 	.word	0x200003e0

00001c30 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1c30:	b40e      	push	{r1, r2, r3}
    1c32:	b503      	push	{r0, r1, lr}
    1c34:	ab03      	add	r3, sp, #12
    1c36:	4601      	mov	r1, r0
    1c38:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1c3c:	4804      	ldr	r0, [pc, #16]	; (1c50 <print_formatted+0x20>)
	va_start(args, fmt);
    1c3e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1c40:	f7ff f924 	bl	e8c <cbvprintf>
	va_end(args);

	return length;
}
    1c44:	b002      	add	sp, #8
    1c46:	f85d eb04 	ldr.w	lr, [sp], #4
    1c4a:	b003      	add	sp, #12
    1c4c:	4770      	bx	lr
    1c4e:	bf00      	nop
    1c50:	000063f3 	.word	0x000063f3

00001c54 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    1c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1c58:	461d      	mov	r5, r3
    1c5a:	9b08      	ldr	r3, [sp, #32]
    1c5c:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1c5e:	06da      	lsls	r2, r3, #27
{
    1c60:	4604      	mov	r4, r0
    1c62:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1c64:	d405      	bmi.n	1c72 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1c66:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    1c68:	bf4c      	ite	mi
    1c6a:	492a      	ldrmi	r1, [pc, #168]	; (1d14 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    1c6c:	492a      	ldrpl	r1, [pc, #168]	; (1d18 <hexdump_line_print+0xc4>)
    1c6e:	f7ff ffdf 	bl	1c30 <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    1c72:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1d1c <hexdump_line_print+0xc8>
{
    1c76:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    1c7a:	45a8      	cmp	r8, r5
    1c7c:	db2a      	blt.n	1cd4 <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    1c7e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1d20 <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    1c82:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 1d24 <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    1c86:	f8df a094 	ldr.w	sl, [pc, #148]	; 1d1c <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1c8a:	2500      	movs	r5, #0
		if (i < length) {
    1c8c:	42bd      	cmp	r5, r7
    1c8e:	d22f      	bcs.n	1cf0 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    1c90:	5d72      	ldrb	r2, [r6, r5]
    1c92:	4649      	mov	r1, r9
    1c94:	4620      	mov	r0, r4
    1c96:	f7ff ffcb 	bl	1c30 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1c9a:	3501      	adds	r5, #1
    1c9c:	2d10      	cmp	r5, #16
    1c9e:	d120      	bne.n	1ce2 <hexdump_line_print+0x8e>
		}
	}

	print_formatted(output, "|");
    1ca0:	4921      	ldr	r1, [pc, #132]	; (1d28 <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    1ca2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1d1c <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    1ca6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1d2c <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    1caa:	4620      	mov	r0, r4
    1cac:	f7ff ffc0 	bl	1c30 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1cb0:	2500      	movs	r5, #0
		if (i < length) {
    1cb2:	42af      	cmp	r7, r5
    1cb4:	d928      	bls.n	1d08 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    1cb6:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    1cb8:	f1a2 0320 	sub.w	r3, r2, #32
    1cbc:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    1cbe:	bf28      	it	cs
    1cc0:	222e      	movcs	r2, #46	; 0x2e
    1cc2:	4649      	mov	r1, r9
    1cc4:	4620      	mov	r0, r4
    1cc6:	f7ff ffb3 	bl	1c30 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1cca:	3501      	adds	r5, #1
    1ccc:	2d10      	cmp	r5, #16
    1cce:	d114      	bne.n	1cfa <hexdump_line_print+0xa6>
		}
	}
}
    1cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    1cd4:	4649      	mov	r1, r9
    1cd6:	4620      	mov	r0, r4
    1cd8:	f7ff ffaa 	bl	1c30 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1cdc:	f108 0801 	add.w	r8, r8, #1
    1ce0:	e7cb      	b.n	1c7a <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    1ce2:	076a      	lsls	r2, r5, #29
    1ce4:	d1d2      	bne.n	1c8c <hexdump_line_print+0x38>
			print_formatted(output, " ");
    1ce6:	4651      	mov	r1, sl
    1ce8:	4620      	mov	r0, r4
    1cea:	f7ff ffa1 	bl	1c30 <print_formatted>
    1cee:	e7cd      	b.n	1c8c <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    1cf0:	4641      	mov	r1, r8
    1cf2:	4620      	mov	r0, r4
    1cf4:	f7ff ff9c 	bl	1c30 <print_formatted>
    1cf8:	e7cf      	b.n	1c9a <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    1cfa:	076b      	lsls	r3, r5, #29
    1cfc:	d1d9      	bne.n	1cb2 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    1cfe:	4641      	mov	r1, r8
    1d00:	4620      	mov	r0, r4
    1d02:	f7ff ff95 	bl	1c30 <print_formatted>
    1d06:	e7d4      	b.n	1cb2 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    1d08:	4641      	mov	r1, r8
    1d0a:	4620      	mov	r0, r4
    1d0c:	f7ff ff90 	bl	1c30 <print_formatted>
    1d10:	e7db      	b.n	1cca <hexdump_line_print+0x76>
    1d12:	bf00      	nop
    1d14:	000071bc 	.word	0x000071bc
    1d18:	000071bb 	.word	0x000071bb
    1d1c:	000071c6 	.word	0x000071c6
    1d20:	000071c4 	.word	0x000071c4
    1d24:	000071be 	.word	0x000071be
    1d28:	000071c8 	.word	0x000071c8
    1d2c:	000071ca 	.word	0x000071ca

00001d30 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    1d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d34:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    1d36:	f011 0402 	ands.w	r4, r1, #2
{
    1d3a:	4690      	mov	r8, r2
    1d3c:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    1d40:	4606      	mov	r6, r0
    1d42:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1d44:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1d48:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    1d4c:	d006      	beq.n	1d5c <prefix_print+0x2c>
	if (!format) {
    1d4e:	f011 0f44 	tst.w	r1, #68	; 0x44
    1d52:	d136      	bne.n	1dc2 <prefix_print+0x92>
		length = print_formatted(output, "[%08lu] ", timestamp);
    1d54:	4932      	ldr	r1, [pc, #200]	; (1e20 <prefix_print+0xf0>)
    1d56:	f7ff ff6b 	bl	1c30 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    1d5a:	4604      	mov	r4, r0
	if (color) {
    1d5c:	f1b9 0f00 	cmp.w	r9, #0
    1d60:	d00a      	beq.n	1d78 <prefix_print+0x48>
		const char *log_color = start && (colors[level] != NULL) ?
    1d62:	4b30      	ldr	r3, [pc, #192]	; (1e24 <prefix_print+0xf4>)
		print_formatted(output, "%s", log_color);
    1d64:	4930      	ldr	r1, [pc, #192]	; (1e28 <prefix_print+0xf8>)
		const char *log_color = start && (colors[level] != NULL) ?
    1d66:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(output, "%s", log_color);
    1d6a:	4b30      	ldr	r3, [pc, #192]	; (1e2c <prefix_print+0xfc>)
    1d6c:	4630      	mov	r0, r6
    1d6e:	2a00      	cmp	r2, #0
    1d70:	bf08      	it	eq
    1d72:	461a      	moveq	r2, r3
    1d74:	f7ff ff5c 	bl	1c30 <print_formatted>
	if (level_on) {
    1d78:	b13d      	cbz	r5, 1d8a <prefix_print+0x5a>
		total += print_formatted(output, "<%s> ", severity[level]);
    1d7a:	4b2d      	ldr	r3, [pc, #180]	; (1e30 <prefix_print+0x100>)
    1d7c:	492d      	ldr	r1, [pc, #180]	; (1e34 <prefix_print+0x104>)
    1d7e:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    1d82:	4630      	mov	r0, r6
    1d84:	f7ff ff54 	bl	1c30 <print_formatted>
    1d88:	4605      	mov	r5, r0
	total += print_formatted(output,
    1d8a:	f1b8 0f00 	cmp.w	r8, #0
    1d8e:	d044      	beq.n	1e1a <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    1d90:	2301      	movs	r3, #1
    1d92:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(output,
    1d96:	4b28      	ldr	r3, [pc, #160]	; (1e38 <prefix_print+0x108>)
    1d98:	f017 0f10 	tst.w	r7, #16
    1d9c:	4f27      	ldr	r7, [pc, #156]	; (1e3c <prefix_print+0x10c>)
    1d9e:	bf18      	it	ne
    1da0:	461f      	movne	r7, r3
    1da2:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    1da6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    1daa:	f7ff fcb9 	bl	1720 <log_source_name_get>
    1dae:	4639      	mov	r1, r7
    1db0:	4602      	mov	r2, r0
    1db2:	4630      	mov	r0, r6
    1db4:	f7ff ff3c 	bl	1c30 <print_formatted>
    1db8:	4428      	add	r0, r5

	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    1dba:	4420      	add	r0, r4
    1dbc:	b005      	add	sp, #20
    1dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    1dc2:	4b1f      	ldr	r3, [pc, #124]	; (1e40 <prefix_print+0x110>)
    1dc4:	6819      	ldr	r1, [r3, #0]
    1dc6:	b331      	cbz	r1, 1e16 <prefix_print+0xe6>
		timestamp /= timestamp_div;
    1dc8:	4b1e      	ldr	r3, [pc, #120]	; (1e44 <prefix_print+0x114>)
    1dca:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
    1dce:	681b      	ldr	r3, [r3, #0]
    1dd0:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    1dd4:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    1dd8:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    1ddc:	fbb4 f2fc 	udiv	r2, r4, ip
    1de0:	fb0c 4c12 	mls	ip, ip, r2, r4
		remainder = timestamp % freq;
    1de4:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    1de8:	fb0b f404 	mul.w	r4, fp, r4
		mins = seconds / 60U;
    1dec:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1df0:	fbb4 faf1 	udiv	sl, r4, r1
    1df4:	fb01 441a 	mls	r4, r1, sl, r4
    1df8:	fb0b f404 	mul.w	r4, fp, r4
		mins = seconds / 60U;
    1dfc:	fbbc f3fe 	udiv	r3, ip, lr
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1e00:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
    1e04:	e9cd a101 	strd	sl, r1, [sp, #4]
    1e08:	fb0e c113 	mls	r1, lr, r3, ip
    1e0c:	9100      	str	r1, [sp, #0]
    1e0e:	490e      	ldr	r1, [pc, #56]	; (1e48 <prefix_print+0x118>)
    1e10:	f7ff ff0e 	bl	1c30 <print_formatted>
    1e14:	e7a1      	b.n	1d5a <prefix_print+0x2a>
		length = 0;
    1e16:	4608      	mov	r0, r1
    1e18:	e79f      	b.n	1d5a <prefix_print+0x2a>
	total += print_formatted(output,
    1e1a:	4f08      	ldr	r7, [pc, #32]	; (1e3c <prefix_print+0x10c>)
    1e1c:	e7c1      	b.n	1da2 <prefix_print+0x72>
    1e1e:	bf00      	nop
    1e20:	000071db 	.word	0x000071db
    1e24:	00006f20 	.word	0x00006f20
    1e28:	000076dd 	.word	0x000076dd
    1e2c:	000071cd 	.word	0x000071cd
    1e30:	00006f34 	.word	0x00006f34
    1e34:	00007200 	.word	0x00007200
    1e38:	000071d7 	.word	0x000071d7
    1e3c:	000071d2 	.word	0x000071d2
    1e40:	200003fc 	.word	0x200003fc
    1e44:	20000400 	.word	0x20000400
    1e48:	000071e4 	.word	0x000071e4

00001e4c <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    1e4c:	b538      	push	{r3, r4, r5, lr}
    1e4e:	460c      	mov	r4, r1
	if (color) {
    1e50:	07e1      	lsls	r1, r4, #31
{
    1e52:	4605      	mov	r5, r0
	if (color) {
    1e54:	d503      	bpl.n	1e5e <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    1e56:	4a08      	ldr	r2, [pc, #32]	; (1e78 <postfix_print+0x2c>)
    1e58:	4908      	ldr	r1, [pc, #32]	; (1e7c <postfix_print+0x30>)
    1e5a:	f7ff fee9 	bl	1c30 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1e5e:	06e2      	lsls	r2, r4, #27
    1e60:	d408      	bmi.n	1e74 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1e62:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    1e64:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    1e66:	bf4c      	ite	mi
    1e68:	4905      	ldrmi	r1, [pc, #20]	; (1e80 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    1e6a:	4906      	ldrpl	r1, [pc, #24]	; (1e84 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    1e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    1e70:	f7ff bede 	b.w	1c30 <print_formatted>
}
    1e74:	bd38      	pop	{r3, r4, r5, pc}
    1e76:	bf00      	nop
    1e78:	000071cd 	.word	0x000071cd
    1e7c:	000076dd 	.word	0x000076dd
    1e80:	000071bc 	.word	0x000071bc
    1e84:	000071bb 	.word	0x000071bb

00001e88 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    1e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    1e8c:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
    1e8e:	f013 0807 	ands.w	r8, r3, #7
{
    1e92:	b08a      	sub	sp, #40	; 0x28
    1e94:	4605      	mov	r5, r0
    1e96:	460e      	mov	r6, r1
    1e98:	4617      	mov	r7, r2
			0 : prefix_print(output, flags, std_msg, timestamp,
    1e9a:	d022      	beq.n	1ee2 <log_output_msg_process+0x5a>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1e9c:	7a0a      	ldrb	r2, [r1, #8]
	return msg->hdr.ids.source_id;
    1e9e:	8949      	ldrh	r1, [r1, #10]
    1ea0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    1ea4:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1ea8:	43d2      	mvns	r2, r2
    1eaa:	e9cd 8300 	strd	r8, r3, [sp]
    1eae:	9102      	str	r1, [sp, #8]
    1eb0:	68f3      	ldr	r3, [r6, #12]
    1eb2:	f002 0201 	and.w	r2, r2, #1
    1eb6:	4639      	mov	r1, r7
    1eb8:	f7ff ff3a 	bl	1d30 <prefix_print>
    1ebc:	4681      	mov	r9, r0
    1ebe:	7a34      	ldrb	r4, [r6, #8]
    1ec0:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    1ec2:	f014 0401 	ands.w	r4, r4, #1
    1ec6:	d00e      	beq.n	1ee6 <log_output_msg_process+0x5e>
		std_print(msg, output);
    1ec8:	4629      	mov	r1, r5
    1eca:	4630      	mov	r0, r6
    1ecc:	f004 f927 	bl	611e <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
    1ed0:	f1b8 0f00 	cmp.w	r8, #0
    1ed4:	d02b      	beq.n	1f2e <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
    1ed6:	4642      	mov	r2, r8
    1ed8:	4639      	mov	r1, r7
    1eda:	4628      	mov	r0, r5
    1edc:	f7ff ffb6 	bl	1e4c <postfix_print>
    1ee0:	e025      	b.n	1f2e <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
    1ee2:	46c1      	mov	r9, r8
    1ee4:	e7eb      	b.n	1ebe <log_output_msg_process+0x36>
	} else if (raw_string) {
    1ee6:	f1b8 0f00 	cmp.w	r8, #0
    1eea:	d126      	bne.n	1f3a <log_output_msg_process+0xb2>
	size_t offset = 0;
    1eec:	4627      	mov	r7, r4
		length = output->size;
    1eee:	68eb      	ldr	r3, [r5, #12]
    1ef0:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    1ef2:	aa06      	add	r2, sp, #24
    1ef4:	463b      	mov	r3, r7
    1ef6:	68a9      	ldr	r1, [r5, #8]
    1ef8:	4630      	mov	r0, r6
    1efa:	f004 f8fc 	bl	60f6 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    1efe:	9a06      	ldr	r2, [sp, #24]
    1f00:	686b      	ldr	r3, [r5, #4]
    1f02:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    1f04:	b13a      	cbz	r2, 1f16 <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
    1f06:	68ab      	ldr	r3, [r5, #8]
    1f08:	4413      	add	r3, r2
    1f0a:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    1f0e:	f1a4 030a 	sub.w	r3, r4, #10
    1f12:	425c      	negs	r4, r3
    1f14:	415c      	adcs	r4, r3
		log_output_flush(output);
    1f16:	4628      	mov	r0, r5
    1f18:	f004 fa5e 	bl	63d8 <log_output_flush>
		offset += length;
    1f1c:	9b06      	ldr	r3, [sp, #24]
    1f1e:	441f      	add	r7, r3
	} while (length > 0);
    1f20:	2b00      	cmp	r3, #0
    1f22:	d1e4      	bne.n	1eee <log_output_msg_process+0x66>
	if (eol) {
    1f24:	b11c      	cbz	r4, 1f2e <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
    1f26:	4914      	ldr	r1, [pc, #80]	; (1f78 <log_output_msg_process+0xf0>)
    1f28:	4628      	mov	r0, r5
    1f2a:	f7ff fe81 	bl	1c30 <print_formatted>
	}

	log_output_flush(output);
    1f2e:	4628      	mov	r0, r5
}
    1f30:	b00a      	add	sp, #40	; 0x28
    1f32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    1f36:	f004 ba4f 	b.w	63d8 <log_output_flush>
	print_formatted(output, "%s", log_msg_str_get(msg));
    1f3a:	4630      	mov	r0, r6
    1f3c:	f004 f885 	bl	604a <log_msg_str_get>
    1f40:	490e      	ldr	r1, [pc, #56]	; (1f7c <log_output_msg_process+0xf4>)
    1f42:	4602      	mov	r2, r0
    1f44:	4628      	mov	r0, r5
    1f46:	f7ff fe73 	bl	1c30 <print_formatted>
		length = sizeof(buf);
    1f4a:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    1f4e:	aa05      	add	r2, sp, #20
    1f50:	4623      	mov	r3, r4
    1f52:	a906      	add	r1, sp, #24
    1f54:	4630      	mov	r0, r6
		length = sizeof(buf);
    1f56:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    1f5a:	f004 f8cc 	bl	60f6 <log_msg_hexdump_data_get>
		if (length) {
    1f5e:	9a05      	ldr	r2, [sp, #20]
    1f60:	2a00      	cmp	r2, #0
    1f62:	d0b8      	beq.n	1ed6 <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
    1f64:	464b      	mov	r3, r9
    1f66:	9700      	str	r7, [sp, #0]
    1f68:	a906      	add	r1, sp, #24
    1f6a:	4628      	mov	r0, r5
    1f6c:	f7ff fe72 	bl	1c54 <hexdump_line_print>
			offset += length;
    1f70:	9b05      	ldr	r3, [sp, #20]
    1f72:	441c      	add	r4, r3
		length = sizeof(buf);
    1f74:	e7eb      	b.n	1f4e <log_output_msg_process+0xc6>
    1f76:	bf00      	nop
    1f78:	00007206 	.word	0x00007206
    1f7c:	000076dd 	.word	0x000076dd

00001f80 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    1f80:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1f82:	f242 730f 	movw	r3, #9999	; 0x270f
    1f86:	428b      	cmp	r3, r1
    1f88:	bf28      	it	cs
    1f8a:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    1f8c:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1f8e:	4a0f      	ldr	r2, [pc, #60]	; (1fcc <log_output_dropped_process+0x4c>)
{
    1f90:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1f92:	2105      	movs	r1, #5
    1f94:	4668      	mov	r0, sp
    1f96:	f003 fdf0 	bl	5b7a <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1f9a:	6863      	ldr	r3, [r4, #4]
    1f9c:	490c      	ldr	r1, [pc, #48]	; (1fd0 <log_output_dropped_process+0x50>)
    1f9e:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1fa0:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1fa2:	2204      	movs	r2, #4
    1fa4:	4628      	mov	r0, r5
    1fa6:	f004 f8ad 	bl	6104 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    1faa:	6863      	ldr	r3, [r4, #4]
    1fac:	4632      	mov	r2, r6
    1fae:	4669      	mov	r1, sp
    1fb0:	4628      	mov	r0, r5
    1fb2:	685b      	ldr	r3, [r3, #4]
    1fb4:	f004 f8a6 	bl	6104 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    1fb8:	6863      	ldr	r3, [r4, #4]
    1fba:	4906      	ldr	r1, [pc, #24]	; (1fd4 <log_output_dropped_process+0x54>)
    1fbc:	685b      	ldr	r3, [r3, #4]
    1fbe:	2217      	movs	r2, #23
    1fc0:	4628      	mov	r0, r5
    1fc2:	f004 f89f 	bl	6104 <buffer_write>
		     output->control_block->ctx);
}
    1fc6:	b002      	add	sp, #8
    1fc8:	bd70      	pop	{r4, r5, r6, pc}
    1fca:	bf00      	nop
    1fcc:	0000784b 	.word	0x0000784b
    1fd0:	00007240 	.word	0x00007240
    1fd4:	00007228 	.word	0x00007228

00001fd8 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    1fd8:	4a08      	ldr	r2, [pc, #32]	; (1ffc <log_output_timestamp_freq_set+0x24>)
{
    1fda:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    1fdc:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1fde:	4c08      	ldr	r4, [pc, #32]	; (2000 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    1fe0:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    1fe2:	2100      	movs	r1, #0
    1fe4:	42a0      	cmp	r0, r4
    1fe6:	d804      	bhi.n	1ff2 <log_output_timestamp_freq_set+0x1a>
    1fe8:	b101      	cbz	r1, 1fec <log_output_timestamp_freq_set+0x14>
    1fea:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    1fec:	4b05      	ldr	r3, [pc, #20]	; (2004 <log_output_timestamp_freq_set+0x2c>)
    1fee:	6018      	str	r0, [r3, #0]
}
    1ff0:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    1ff2:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1ff4:	005b      	lsls	r3, r3, #1
    1ff6:	2101      	movs	r1, #1
    1ff8:	e7f4      	b.n	1fe4 <log_output_timestamp_freq_set+0xc>
    1ffa:	bf00      	nop
    1ffc:	20000400 	.word	0x20000400
    2000:	000f4240 	.word	0x000f4240
    2004:	200003fc 	.word	0x200003fc

00002008 <char_out>:
#include <sys/__assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    2008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
    200a:	4f07      	ldr	r7, [pc, #28]	; (2028 <char_out+0x20>)
{
    200c:	460d      	mov	r5, r1
    200e:	4604      	mov	r4, r0
    2010:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    2012:	42b4      	cmp	r4, r6
    2014:	d101      	bne.n	201a <char_out+0x12>
	}

	return length;
}
    2016:	4628      	mov	r0, r5
    2018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    201a:	6838      	ldr	r0, [r7, #0]
    201c:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2020:	6883      	ldr	r3, [r0, #8]
    2022:	685b      	ldr	r3, [r3, #4]
    2024:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    2026:	e7f4      	b.n	2012 <char_out+0xa>
    2028:	20000418 	.word	0x20000418

0000202c <panic>:
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    202c:	4801      	ldr	r0, [pc, #4]	; (2034 <panic+0x8>)
    202e:	f004 b9d3 	b.w	63d8 <log_output_flush>
    2032:	bf00      	nop
    2034:	00006f60 	.word	0x00006f60

00002038 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    2038:	4801      	ldr	r0, [pc, #4]	; (2040 <dropped+0x8>)
    203a:	f7ff bfa1 	b.w	1f80 <log_output_dropped_process>
    203e:	bf00      	nop
    2040:	00006f60 	.word	0x00006f60

00002044 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
    2044:	b508      	push	{r3, lr}
    2046:	4803      	ldr	r0, [pc, #12]	; (2054 <log_backend_uart_init+0x10>)
    2048:	f002 fa28 	bl	449c <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    204c:	4b02      	ldr	r3, [pc, #8]	; (2058 <log_backend_uart_init+0x14>)
    204e:	6018      	str	r0, [r3, #0]
	__ASSERT_NO_MSG((void *)uart_dev);
}
    2050:	bd08      	pop	{r3, pc}
    2052:	bf00      	nop
    2054:	00007245 	.word	0x00007245
    2058:	20000418 	.word	0x20000418

0000205c <put>:
{
    205c:	b510      	push	{r4, lr}
	log_msg_get(msg);
    205e:	4608      	mov	r0, r1
    2060:	460c      	mov	r4, r1
    2062:	f003 ffb0 	bl	5fc6 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    2066:	4805      	ldr	r0, [pc, #20]	; (207c <put+0x20>)
    2068:	4621      	mov	r1, r4
    206a:	220e      	movs	r2, #14
    206c:	f7ff ff0c 	bl	1e88 <log_output_msg_process>
	log_msg_put(msg);
    2070:	4620      	mov	r0, r4
}
    2072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2076:	f003 bfd5 	b.w	6024 <log_msg_put>
    207a:	bf00      	nop
    207c:	00006f60 	.word	0x00006f60

00002080 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    2080:	4b01      	ldr	r3, [pc, #4]	; (2088 <log_backend_rtt_init+0x8>)
    2082:	2201      	movs	r2, #1
    2084:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    2086:	4770      	bx	lr
    2088:	20000882 	.word	0x20000882

0000208c <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    208c:	4b02      	ldr	r3, [pc, #8]	; (2098 <panic+0xc>)
	log_output_flush(output);
    208e:	4803      	ldr	r0, [pc, #12]	; (209c <panic+0x10>)
    2090:	2201      	movs	r2, #1
    2092:	701a      	strb	r2, [r3, #0]
    2094:	f004 b9a0 	b.w	63d8 <log_output_flush>
    2098:	20000883 	.word	0x20000883
    209c:	00006f88 	.word	0x00006f88

000020a0 <dropped>:
	log_output_dropped_process(output, cnt);
    20a0:	4801      	ldr	r0, [pc, #4]	; (20a8 <dropped+0x8>)
    20a2:	f7ff bf6d 	b.w	1f80 <log_output_dropped_process>
    20a6:	bf00      	nop
    20a8:	00006f88 	.word	0x00006f88

000020ac <put>:
{
    20ac:	b510      	push	{r4, lr}
	log_msg_get(msg);
    20ae:	4608      	mov	r0, r1
    20b0:	460c      	mov	r4, r1
    20b2:	f003 ff88 	bl	5fc6 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    20b6:	4805      	ldr	r0, [pc, #20]	; (20cc <put+0x20>)
    20b8:	4621      	mov	r1, r4
    20ba:	220e      	movs	r2, #14
    20bc:	f7ff fee4 	bl	1e88 <log_output_msg_process>
	log_msg_put(msg);
    20c0:	4620      	mov	r0, r4
}
    20c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    20c6:	f003 bfad 	b.w	6024 <log_msg_put>
    20ca:	bf00      	nop
    20cc:	00006f88 	.word	0x00006f88

000020d0 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    20d0:	4b05      	ldr	r3, [pc, #20]	; (20e8 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    20d2:	781b      	ldrb	r3, [r3, #0]
    20d4:	b11b      	cbz	r3, 20de <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    20d6:	f241 3088 	movw	r0, #5000	; 0x1388
    20da:	f004 bd5d 	b.w	6b98 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    20de:	20a4      	movs	r0, #164	; 0xa4
    20e0:	2100      	movs	r1, #0
    20e2:	f002 bf43 	b.w	4f6c <z_impl_k_sleep>
    20e6:	bf00      	nop
    20e8:	20000883 	.word	0x20000883

000020ec <data_out_block_mode>:
{
    20ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    20f0:	f8df 8088 	ldr.w	r8, [pc, #136]	; 217c <data_out_block_mode+0x90>
	return z_impl_k_mutex_lock(mutex, timeout);
    20f4:	f8df a088 	ldr.w	sl, [pc, #136]	; 2180 <data_out_block_mode+0x94>
{
    20f8:	4607      	mov	r7, r0
    20fa:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    20fc:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    20fe:	f898 3000 	ldrb.w	r3, [r8]
    2102:	b933      	cbnz	r3, 2112 <data_out_block_mode+0x26>
    2104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2108:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    210c:	4650      	mov	r0, sl
    210e:	f002 fba1 	bl	4854 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2112:	4632      	mov	r2, r6
    2114:	4639      	mov	r1, r7
    2116:	2000      	movs	r0, #0
    2118:	f000 fbbe 	bl	2898 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
    211c:	f898 3000 	ldrb.w	r3, [r8]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2120:	4681      	mov	r9, r0
		if (!is_sync_mode()) {
    2122:	b913      	cbnz	r3, 212a <data_out_block_mode+0x3e>
	return z_impl_k_mutex_unlock(mutex);
    2124:	4650      	mov	r0, sl
    2126:	f002 fc07 	bl	4938 <z_impl_k_mutex_unlock>
		if (ret) {
    212a:	4d16      	ldr	r5, [pc, #88]	; (2184 <data_out_block_mode+0x98>)
    212c:	f1b9 0f00 	cmp.w	r9, #0
    2130:	d018      	beq.n	2164 <data_out_block_mode+0x78>
	host_present = true;
    2132:	2301      	movs	r3, #1
    2134:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    2136:	f898 3000 	ldrb.w	r3, [r8]
    213a:	b933      	cbnz	r3, 214a <data_out_block_mode+0x5e>
}
    213c:	4630      	mov	r0, r6
    213e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (retry_cnt == 0) {
    2142:	b95c      	cbnz	r4, 215c <data_out_block_mode+0x70>
		host_present = false;
    2144:	702c      	strb	r4, [r5, #0]
    2146:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    214a:	2000      	movs	r0, #0
    214c:	f000 fc20 	bl	2990 <SEGGER_RTT_HasDataUp>
    2150:	2800      	cmp	r0, #0
    2152:	d0f3      	beq.n	213c <data_out_block_mode+0x50>
    2154:	782b      	ldrb	r3, [r5, #0]
    2156:	2b00      	cmp	r3, #0
    2158:	d1f3      	bne.n	2142 <data_out_block_mode+0x56>
    215a:	e7ef      	b.n	213c <data_out_block_mode+0x50>
			on_failed_write(retry_cnt--);
    215c:	3c01      	subs	r4, #1
    215e:	f7ff ffb7 	bl	20d0 <on_failed_write.part.0>
    2162:	e7f2      	b.n	214a <data_out_block_mode+0x5e>
		} else if (host_present) {
    2164:	782b      	ldrb	r3, [r5, #0]
    2166:	b113      	cbz	r3, 216e <data_out_block_mode+0x82>
	if (retry_cnt == 0) {
    2168:	3c01      	subs	r4, #1
    216a:	d104      	bne.n	2176 <data_out_block_mode+0x8a>
		host_present = false;
    216c:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    216e:	782b      	ldrb	r3, [r5, #0]
    2170:	2b00      	cmp	r3, #0
    2172:	d1c4      	bne.n	20fe <data_out_block_mode+0x12>
    2174:	e7e2      	b.n	213c <data_out_block_mode+0x50>
    2176:	f7ff ffab 	bl	20d0 <on_failed_write.part.0>
    217a:	e7f8      	b.n	216e <data_out_block_mode+0x82>
    217c:	20000883 	.word	0x20000883
    2180:	2000011c 	.word	0x2000011c
    2184:	20000882 	.word	0x20000882

00002188 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    2188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    218a:	4605      	mov	r5, r0
	__asm__ volatile(
    218c:	f04f 0320 	mov.w	r3, #32
    2190:	f3ef 8611 	mrs	r6, BASEPRI
    2194:	f383 8811 	msr	BASEPRI, r3
    2198:	f3bf 8f6f 	isb	sy
	return list->head;
    219c:	4b09      	ldr	r3, [pc, #36]	; (21c4 <pm_state_notify+0x3c>)
    219e:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    21a0:	b15c      	cbz	r4, 21ba <pm_state_notify+0x32>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    21a2:	4f09      	ldr	r7, [pc, #36]	; (21c8 <pm_state_notify+0x40>)
			callback = notifier->state_exit;
    21a4:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    21a8:	2d00      	cmp	r5, #0
    21aa:	bf08      	it	eq
    21ac:	4613      	moveq	r3, r2
		if (callback) {
    21ae:	b10b      	cbz	r3, 21b4 <pm_state_notify+0x2c>
			callback(z_power_state.state);
    21b0:	7838      	ldrb	r0, [r7, #0]
    21b2:	4798      	blx	r3
	return node->next;
    21b4:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    21b6:	2c00      	cmp	r4, #0
    21b8:	d1f4      	bne.n	21a4 <pm_state_notify+0x1c>
	__asm__ volatile(
    21ba:	f386 8811 	msr	BASEPRI, r6
    21be:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    21c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21c4:	20000430 	.word	0x20000430
    21c8:	20000438 	.word	0x20000438

000021cc <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    21cc:	4b08      	ldr	r3, [pc, #32]	; (21f0 <pm_system_resume+0x24>)
{
    21ce:	b510      	push	{r4, lr}
	if (!post_ops_done) {
    21d0:	681c      	ldr	r4, [r3, #0]
    21d2:	b95c      	cbnz	r4, 21ec <pm_system_resume+0x20>
		post_ops_done = 1;
    21d4:	2201      	movs	r2, #1
    21d6:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
    21d8:	4b06      	ldr	r3, [pc, #24]	; (21f4 <pm_system_resume+0x28>)
    21da:	e893 0003 	ldmia.w	r3, {r0, r1}
    21de:	f004 faba 	bl	6756 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    21e2:	4620      	mov	r0, r4
	}
}
    21e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pm_state_notify(false);
    21e8:	f7ff bfce 	b.w	2188 <pm_state_notify>
}
    21ec:	bd10      	pop	{r4, pc}
    21ee:	bf00      	nop
    21f0:	20000010 	.word	0x20000010
    21f4:	20000438 	.word	0x20000438

000021f8 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    21f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	z_power_state = pm_policy_next_state(ticks);
    21fa:	466d      	mov	r5, sp
{
    21fc:	4601      	mov	r1, r0
	z_power_state = pm_policy_next_state(ticks);
    21fe:	4628      	mov	r0, r5
    2200:	f004 f912 	bl	6428 <pm_policy_next_state>
    2204:	e895 0003 	ldmia.w	r5, {r0, r1}
    2208:	4c0b      	ldr	r4, [pc, #44]	; (2238 <pm_system_suspend+0x40>)
    220a:	e884 0003 	stmia.w	r4, {r0, r1}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    220e:	7820      	ldrb	r0, [r4, #0]
    2210:	b180      	cbz	r0, 2234 <pm_system_suspend+0x3c>
		LOG_DBG("No PM operations done.");
		return z_power_state.state;
	}
	post_ops_done = 0;
    2212:	4b0a      	ldr	r3, [pc, #40]	; (223c <pm_system_suspend+0x44>)
    2214:	2200      	movs	r2, #0
    2216:	601a      	str	r2, [r3, #0]
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2218:	f002 fc28 	bl	4a6c <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    221c:	2001      	movs	r0, #1
    221e:	f7ff ffb3 	bl	2188 <pm_state_notify>
	pm_power_state_set(z_power_state);
    2222:	e894 0003 	ldmia.w	r4, {r0, r1}
    2226:	f004 fa83 	bl	6730 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    222a:	f7ff ffcf 	bl	21cc <pm_system_resume>
	k_sched_unlock();
    222e:	f002 fcd3 	bl	4bd8 <k_sched_unlock>

	return z_power_state.state;
    2232:	7820      	ldrb	r0, [r4, #0]
}
    2234:	b003      	add	sp, #12
    2236:	bd30      	pop	{r4, r5, pc}
    2238:	20000438 	.word	0x20000438
    223c:	20000010 	.word	0x20000010

00002240 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2240:	b510      	push	{r4, lr}
    2242:	4807      	ldr	r0, [pc, #28]	; (2260 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    2244:	4c07      	ldr	r4, [pc, #28]	; (2264 <uart_console_init+0x24>)
    2246:	f002 f929 	bl	449c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    224a:	4b07      	ldr	r3, [pc, #28]	; (2268 <uart_console_init+0x28>)
    224c:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    224e:	4620      	mov	r0, r4
    2250:	f001 f80a 	bl	3268 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2254:	4620      	mov	r0, r4
    2256:	f7fe fd1f 	bl	c98 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    225a:	2000      	movs	r0, #0
    225c:	bd10      	pop	{r4, pc}
    225e:	bf00      	nop
    2260:	00007245 	.word	0x00007245
    2264:	0000226d 	.word	0x0000226d
    2268:	20000440 	.word	0x20000440

0000226c <console_out>:
	if ('\n' == c) {
    226c:	280a      	cmp	r0, #10
{
    226e:	b538      	push	{r3, r4, r5, lr}
    2270:	4d07      	ldr	r5, [pc, #28]	; (2290 <console_out+0x24>)
    2272:	4604      	mov	r4, r0
	if ('\n' == c) {
    2274:	d104      	bne.n	2280 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    2276:	6828      	ldr	r0, [r5, #0]
    2278:	6883      	ldr	r3, [r0, #8]
    227a:	210d      	movs	r1, #13
    227c:	685b      	ldr	r3, [r3, #4]
    227e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2280:	6828      	ldr	r0, [r5, #0]
    2282:	6883      	ldr	r3, [r0, #8]
    2284:	b2e1      	uxtb	r1, r4
    2286:	685b      	ldr	r3, [r3, #4]
    2288:	4798      	blx	r3
}
    228a:	4620      	mov	r0, r4
    228c:	bd38      	pop	{r3, r4, r5, pc}
    228e:	bf00      	nop
    2290:	20000440 	.word	0x20000440

00002294 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    2294:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    2296:	4c04      	ldr	r4, [pc, #16]	; (22a8 <rtt_console_init+0x14>)
    2298:	4620      	mov	r0, r4
    229a:	f7fe fcfd 	bl	c98 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    229e:	4620      	mov	r0, r4
    22a0:	f000 ffe2 	bl	3268 <__stdout_hook_install>

	return 0;
}
    22a4:	2000      	movs	r0, #0
    22a6:	bd10      	pop	{r4, pc}
    22a8:	000022ad 	.word	0x000022ad

000022ac <rtt_console_out>:
{
    22ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    22b0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 2310 <rtt_console_out+0x64>
    22b4:	4e17      	ldr	r6, [pc, #92]	; (2314 <rtt_console_out+0x68>)
	char c = (char)character;
    22b6:	f88d 0007 	strb.w	r0, [sp, #7]
{
    22ba:	4604      	mov	r4, r0
	char c = (char)character;
    22bc:	2503      	movs	r5, #3
    22be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    22c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    22c6:	4640      	mov	r0, r8
    22c8:	f002 fac4 	bl	4854 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    22cc:	2201      	movs	r2, #1
    22ce:	f10d 0107 	add.w	r1, sp, #7
    22d2:	2000      	movs	r0, #0
    22d4:	f000 fb2c 	bl	2930 <SEGGER_RTT_WriteNoLock>
    22d8:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    22da:	4640      	mov	r0, r8
    22dc:	f002 fb2c 	bl	4938 <z_impl_k_mutex_unlock>
		if (cnt) {
    22e0:	b12f      	cbz	r7, 22ee <rtt_console_out+0x42>
			host_present = true;
    22e2:	2301      	movs	r3, #1
    22e4:	7033      	strb	r3, [r6, #0]
}
    22e6:	4620      	mov	r0, r4
    22e8:	b002      	add	sp, #8
    22ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    22ee:	7833      	ldrb	r3, [r6, #0]
    22f0:	2b00      	cmp	r3, #0
    22f2:	d0f8      	beq.n	22e6 <rtt_console_out+0x3a>
			if (max_cnt) {
    22f4:	3d01      	subs	r5, #1
    22f6:	d008      	beq.n	230a <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
    22f8:	f004 fc48 	bl	6b8c <k_is_in_isr>
    22fc:	2800      	cmp	r0, #0
    22fe:	d1de      	bne.n	22be <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    2300:	2100      	movs	r1, #0
    2302:	2042      	movs	r0, #66	; 0x42
    2304:	f002 fe32 	bl	4f6c <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    2308:	e7d9      	b.n	22be <rtt_console_out+0x12>
				host_present = false;
    230a:	7035      	strb	r5, [r6, #0]
    230c:	e7eb      	b.n	22e6 <rtt_console_out+0x3a>
    230e:	bf00      	nop
    2310:	2000011c 	.word	0x2000011c
    2314:	20000884 	.word	0x20000884

00002318 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2318:	4b08      	ldr	r3, [pc, #32]	; (233c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    231a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    231c:	1ac3      	subs	r3, r0, r3
{
    231e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2320:	4907      	ldr	r1, [pc, #28]	; (2340 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    2322:	109b      	asrs	r3, r3, #2
{
    2324:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2326:	4359      	muls	r1, r3
    2328:	4806      	ldr	r0, [pc, #24]	; (2344 <onoff_stop+0x2c>)
    232a:	2240      	movs	r2, #64	; 0x40
    232c:	f004 f89c 	bl	6468 <stop>
	notify(mgr, res);
    2330:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2332:	4601      	mov	r1, r0
	notify(mgr, res);
    2334:	4620      	mov	r0, r4
}
    2336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    233a:	4718      	bx	r3
    233c:	20000458 	.word	0x20000458
    2340:	b6db6db7 	.word	0xb6db6db7
    2344:	200000a4 	.word	0x200000a4

00002348 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2348:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    234a:	4c0c      	ldr	r4, [pc, #48]	; (237c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    234c:	4a0c      	ldr	r2, [pc, #48]	; (2380 <onoff_start+0x38>)
    234e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    2350:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2352:	9300      	str	r3, [sp, #0]
{
    2354:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2356:	460b      	mov	r3, r1
    2358:	490a      	ldr	r1, [pc, #40]	; (2384 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    235a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    235c:	4361      	muls	r1, r4
{
    235e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2360:	4809      	ldr	r0, [pc, #36]	; (2388 <onoff_start+0x40>)
    2362:	f004 f8ae 	bl	64c2 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    2366:	1e01      	subs	r1, r0, #0
    2368:	da05      	bge.n	2376 <onoff_start+0x2e>
		notify(mgr, err);
    236a:	4630      	mov	r0, r6
    236c:	462b      	mov	r3, r5
	}
}
    236e:	b002      	add	sp, #8
    2370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    2374:	4718      	bx	r3
}
    2376:	b002      	add	sp, #8
    2378:	bd70      	pop	{r4, r5, r6, pc}
    237a:	bf00      	nop
    237c:	20000458 	.word	0x20000458
    2380:	00006531 	.word	0x00006531
    2384:	b6db6db7 	.word	0xb6db6db7
    2388:	200000a4 	.word	0x200000a4

0000238c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    238c:	2200      	movs	r2, #0
{
    238e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2390:	2101      	movs	r1, #1
{
    2392:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2394:	4610      	mov	r0, r2
    2396:	f000 fb71 	bl	2a7c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    239a:	2000      	movs	r0, #0
    239c:	f000 fb50 	bl	2a40 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    23a0:	480f      	ldr	r0, [pc, #60]	; (23e0 <clk_init+0x54>)
    23a2:	f001 fde3 	bl	3f6c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    23a6:	4b0f      	ldr	r3, [pc, #60]	; (23e4 <clk_init+0x58>)
    23a8:	4298      	cmp	r0, r3
    23aa:	d115      	bne.n	23d8 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    23ac:	f004 faad 	bl	690a <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    23b0:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    23b2:	490d      	ldr	r1, [pc, #52]	; (23e8 <clk_init+0x5c>)
    23b4:	4630      	mov	r0, r6
    23b6:	f003 fc3c 	bl	5c32 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    23ba:	2800      	cmp	r0, #0
    23bc:	db0b      	blt.n	23d6 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    23be:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    23c0:	4909      	ldr	r1, [pc, #36]	; (23e8 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    23c2:	2501      	movs	r5, #1
    23c4:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    23c6:	f104 001c 	add.w	r0, r4, #28
    23ca:	f003 fc32 	bl	5c32 <onoff_manager_init>
		if (err < 0) {
    23ce:	2800      	cmp	r0, #0
    23d0:	db01      	blt.n	23d6 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    23d2:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    23d4:	2000      	movs	r0, #0
}
    23d6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    23d8:	f06f 0004 	mvn.w	r0, #4
    23dc:	e7fb      	b.n	23d6 <clk_init+0x4a>
    23de:	bf00      	nop
    23e0:	00002421 	.word	0x00002421
    23e4:	0bad0000 	.word	0x0bad0000
    23e8:	00006fc4 	.word	0x00006fc4

000023ec <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    23ec:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    23ee:	230c      	movs	r3, #12
    23f0:	4809      	ldr	r0, [pc, #36]	; (2418 <clkstarted_handle.constprop.0+0x2c>)
    23f2:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    23f4:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    23f6:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    23f8:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    23fc:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    23fe:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    2400:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    2402:	4418      	add	r0, r3
    2404:	f004 f81d 	bl	6442 <set_on_state>
	if (callback) {
    2408:	b12d      	cbz	r5, 2416 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    240a:	4632      	mov	r2, r6
    240c:	462b      	mov	r3, r5
    240e:	4803      	ldr	r0, [pc, #12]	; (241c <clkstarted_handle.constprop.0+0x30>)
}
    2410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2414:	4718      	bx	r3
}
    2416:	bd70      	pop	{r4, r5, r6, pc}
    2418:	20000458 	.word	0x20000458
    241c:	200000a4 	.word	0x200000a4

00002420 <clock_event_handler>:
	switch (event) {
    2420:	b110      	cbz	r0, 2428 <clock_event_handler+0x8>
    2422:	2801      	cmp	r0, #1
    2424:	d004      	beq.n	2430 <clock_event_handler+0x10>
    2426:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2428:	4b03      	ldr	r3, [pc, #12]	; (2438 <clock_event_handler+0x18>)
    242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    242c:	075b      	lsls	r3, r3, #29
    242e:	d101      	bne.n	2434 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2430:	f7ff bfdc 	b.w	23ec <clkstarted_handle.constprop.0>
}
    2434:	4770      	bx	lr
    2436:	bf00      	nop
    2438:	20000458 	.word	0x20000458

0000243c <generic_hfclk_start>:
{
    243c:	b508      	push	{r3, lr}
	__asm__ volatile(
    243e:	f04f 0320 	mov.w	r3, #32
    2442:	f3ef 8111 	mrs	r1, BASEPRI
    2446:	f383 8811 	msr	BASEPRI, r3
    244a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    244e:	4a12      	ldr	r2, [pc, #72]	; (2498 <generic_hfclk_start+0x5c>)
    2450:	6813      	ldr	r3, [r2, #0]
    2452:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    2456:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    245a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    245c:	d00c      	beq.n	2478 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    245e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2462:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2466:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    246a:	f013 0301 	ands.w	r3, r3, #1
    246e:	d003      	beq.n	2478 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2470:	480a      	ldr	r0, [pc, #40]	; (249c <generic_hfclk_start+0x60>)
    2472:	f003 ffe6 	bl	6442 <set_on_state>
			already_started = true;
    2476:	2301      	movs	r3, #1
	__asm__ volatile(
    2478:	f381 8811 	msr	BASEPRI, r1
    247c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2480:	b123      	cbz	r3, 248c <generic_hfclk_start+0x50>
}
    2482:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2486:	2000      	movs	r0, #0
    2488:	f7ff bfb0 	b.w	23ec <clkstarted_handle.constprop.0>
}
    248c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2490:	2001      	movs	r0, #1
    2492:	f001 bd7b 	b.w	3f8c <nrfx_clock_start>
    2496:	bf00      	nop
    2498:	200004a8 	.word	0x200004a8
    249c:	20000498 	.word	0x20000498

000024a0 <api_blocking_start>:
{
    24a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    24a2:	2200      	movs	r2, #0
    24a4:	2301      	movs	r3, #1
    24a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    24aa:	4a09      	ldr	r2, [pc, #36]	; (24d0 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    24ac:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    24b0:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    24b2:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    24b6:	f004 f834 	bl	6522 <api_start>
	if (err < 0) {
    24ba:	2800      	cmp	r0, #0
    24bc:	db05      	blt.n	24ca <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    24be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    24c2:	2300      	movs	r3, #0
    24c4:	4668      	mov	r0, sp
    24c6:	f002 fde3 	bl	5090 <z_impl_k_sem_take>
}
    24ca:	b005      	add	sp, #20
    24cc:	f85d fb04 	ldr.w	pc, [sp], #4
    24d0:	00006549 	.word	0x00006549

000024d4 <lfclk_start>:
{
    24d4:	b510      	push	{r4, lr}
	if (!once) {
    24d6:	4c07      	ldr	r4, [pc, #28]	; (24f4 <lfclk_start+0x20>)
    24d8:	7823      	ldrb	r3, [r4, #0]
    24da:	b92b      	cbnz	r3, 24e8 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    24dc:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    24e0:	f004 fb5a 	bl	6b98 <z_impl_k_busy_wait>
		once = true;
    24e4:	2301      	movs	r3, #1
    24e6:	7023      	strb	r3, [r4, #0]
}
    24e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    24ec:	2000      	movs	r0, #0
    24ee:	f001 bd4d 	b.w	3f8c <nrfx_clock_start>
    24f2:	bf00      	nop
    24f4:	20000885 	.word	0x20000885

000024f8 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    24f8:	4b09      	ldr	r3, [pc, #36]	; (2520 <generic_hfclk_stop+0x28>)
    24fa:	f3bf 8f5b 	dmb	ish
    24fe:	e853 2f00 	ldrex	r2, [r3]
    2502:	f022 0102 	bic.w	r1, r2, #2
    2506:	e843 1000 	strex	r0, r1, [r3]
    250a:	2800      	cmp	r0, #0
    250c:	d1f7      	bne.n	24fe <generic_hfclk_stop+0x6>
    250e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    2512:	07d3      	lsls	r3, r2, #31
    2514:	d402      	bmi.n	251c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    2516:	2001      	movs	r0, #1
    2518:	f001 bd80 	b.w	401c <nrfx_clock_stop>
}
    251c:	4770      	bx	lr
    251e:	bf00      	nop
    2520:	200004a8 	.word	0x200004a8

00002524 <z_nrf_clock_control_lf_on>:
{
    2524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2528:	4939      	ldr	r1, [pc, #228]	; (2610 <z_nrf_clock_control_lf_on+0xec>)
    252a:	f3bf 8f5b 	dmb	ish
    252e:	4607      	mov	r7, r0
    2530:	2201      	movs	r2, #1
    2532:	e851 3f00 	ldrex	r3, [r1]
    2536:	e841 2000 	strex	r0, r2, [r1]
    253a:	2800      	cmp	r0, #0
    253c:	d1f9      	bne.n	2532 <z_nrf_clock_control_lf_on+0xe>
    253e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2542:	b933      	cbnz	r3, 2552 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2544:	4933      	ldr	r1, [pc, #204]	; (2614 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    2546:	4834      	ldr	r0, [pc, #208]	; (2618 <z_nrf_clock_control_lf_on+0xf4>)
    2548:	604b      	str	r3, [r1, #4]
    254a:	60cb      	str	r3, [r1, #12]
    254c:	608a      	str	r2, [r1, #8]
    254e:	f003 fb83 	bl	5c58 <onoff_request>
	switch (start_mode) {
    2552:	1e7b      	subs	r3, r7, #1
    2554:	2b01      	cmp	r3, #1
    2556:	d82f      	bhi.n	25b8 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2558:	2f01      	cmp	r7, #1
    255a:	d107      	bne.n	256c <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    255c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2560:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2564:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2568:	2b01      	cmp	r3, #1
    256a:	d025      	beq.n	25b8 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    256c:	f004 fb0e 	bl	6b8c <k_is_in_isr>
    2570:	4604      	mov	r4, r0
    2572:	b918      	cbnz	r0, 257c <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    2574:	4b29      	ldr	r3, [pc, #164]	; (261c <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    2576:	781b      	ldrb	r3, [r3, #0]
    2578:	2b00      	cmp	r3, #0
    257a:	d141      	bne.n	2600 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    257c:	f04f 0320 	mov.w	r3, #32
    2580:	f3ef 8611 	mrs	r6, BASEPRI
    2584:	f383 8811 	msr	BASEPRI, r3
    2588:	f3bf 8f6f 	isb	sy
    258c:	2401      	movs	r4, #1
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    258e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2620 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2592:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    2596:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    259a:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    259e:	03d2      	lsls	r2, r2, #15
    25a0:	d50c      	bpl.n	25bc <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    25a2:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    25a6:	2b01      	cmp	r3, #1
    25a8:	d001      	beq.n	25ae <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    25aa:	2f01      	cmp	r7, #1
    25ac:	d106      	bne.n	25bc <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    25ae:	b30c      	cbz	r4, 25f4 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    25b0:	f386 8811 	msr	BASEPRI, r6
    25b4:	f3bf 8f6f 	isb	sy
}
    25b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode) {
    25bc:	b1ac      	cbz	r4, 25ea <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    25be:	4630      	mov	r0, r6
    25c0:	f000 fabc 	bl	2b3c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    25c4:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    25c8:	2b00      	cmp	r3, #0
    25ca:	d1e4      	bne.n	2596 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    25cc:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    25d0:	2a00      	cmp	r2, #0
    25d2:	d0e0      	beq.n	2596 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    25d4:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    25d8:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    25dc:	2301      	movs	r3, #1
    25de:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    25e2:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    25e6:	60ab      	str	r3, [r5, #8]
}
    25e8:	e7d5      	b.n	2596 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    25ea:	2100      	movs	r1, #0
    25ec:	2021      	movs	r0, #33	; 0x21
    25ee:	f002 fcbd 	bl	4f6c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    25f2:	e7e7      	b.n	25c4 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    25f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    25f8:	2202      	movs	r2, #2
    25fa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    25fe:	e7db      	b.n	25b8 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    2600:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2604:	2202      	movs	r2, #2
    2606:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    260a:	4606      	mov	r6, r0
}
    260c:	e7bf      	b.n	258e <z_nrf_clock_control_lf_on+0x6a>
    260e:	bf00      	nop
    2610:	200004ac 	.word	0x200004ac
    2614:	20000448 	.word	0x20000448
    2618:	20000474 	.word	0x20000474
    261c:	20000c98 	.word	0x20000c98
    2620:	e000e100 	.word	0xe000e100

00002624 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    2624:	4a04      	ldr	r2, [pc, #16]	; (2638 <sys_clock_timeout_handler+0x14>)
    2626:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    2628:	1ac8      	subs	r0, r1, r3
    262a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    262e:	4403      	add	r3, r0
    2630:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2632:	f002 bf03 	b.w	543c <sys_clock_announce>
    2636:	bf00      	nop
    2638:	200004c0 	.word	0x200004c0

0000263c <set_absolute_alarm>:
{
    263c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2640:	0086      	lsls	r6, r0, #2
    2642:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    2646:	f100 0450 	add.w	r4, r0, #80	; 0x50
    264a:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    264e:	00a4      	lsls	r4, r4, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2650:	b2a4      	uxth	r4, r4
    2652:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2656:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return p_reg->CC[ch];
    265a:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    265e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 26cc <set_absolute_alarm+0x90>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    2662:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2666:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    266a:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    266c:	f8d8 9504 	ldr.w	r9, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2670:	eba3 0309 	sub.w	r3, r3, r9
    2674:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2678:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    267c:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    267e:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    2682:	d102      	bne.n	268a <set_absolute_alarm+0x4e>
	z_impl_k_busy_wait(usec_to_wait);
    2684:	2013      	movs	r0, #19
    2686:	f004 fa87 	bl	6b98 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    268a:	f109 0202 	add.w	r2, r9, #2
	return (a - b) & COUNTER_MAX;
    268e:	1aab      	subs	r3, r5, r2
    2690:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    2694:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    2698:	bf88      	it	hi
    269a:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    269c:	2300      	movs	r3, #0
    269e:	6023      	str	r3, [r4, #0]
    26a0:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    26a2:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    26a6:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    26aa:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    26ae:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    26b2:	4599      	cmp	r9, r3
    26b4:	d006      	beq.n	26c4 <set_absolute_alarm+0x88>
	return (a - b) & COUNTER_MAX;
    26b6:	1aeb      	subs	r3, r5, r3
    26b8:	3b02      	subs	r3, #2
    26ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    26be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    26c2:	d801      	bhi.n	26c8 <set_absolute_alarm+0x8c>
}
    26c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prev_cc = cc_val;
    26c8:	462b      	mov	r3, r5
    26ca:	e7cf      	b.n	266c <set_absolute_alarm+0x30>
    26cc:	40011000 	.word	0x40011000

000026d0 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    26d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    26d2:	2500      	movs	r5, #0
    return p_reg->INTENSET & mask;
    26d4:	4c10      	ldr	r4, [pc, #64]	; (2718 <rtc_nrf_isr+0x48>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    26d6:	462f      	mov	r7, r5
    26d8:	4b10      	ldr	r3, [pc, #64]	; (271c <rtc_nrf_isr+0x4c>)
    26da:	681e      	ldr	r6, [r3, #0]
    26dc:	b105      	cbz	r5, 26e0 <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    26de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    26e0:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    26e4:	03d2      	lsls	r2, r2, #15
    26e6:	d5fa      	bpl.n	26de <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    26e8:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    26ec:	2a00      	cmp	r2, #0
    26ee:	d0f6      	beq.n	26de <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    26f0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    26f4:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    26f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    26fc:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
    2700:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2704:	2501      	movs	r5, #1
			if (handler) {
    2706:	b126      	cbz	r6, 2712 <rtc_nrf_isr+0x42>
				handler(chan, cc_val,
    2708:	685a      	ldr	r2, [r3, #4]
    270a:	601f      	str	r7, [r3, #0]
    270c:	2000      	movs	r0, #0
    270e:	47b0      	blx	r6
    2710:	e7e2      	b.n	26d8 <rtc_nrf_isr+0x8>
    2712:	601e      	str	r6, [r3, #0]
}
    2714:	e7e3      	b.n	26de <rtc_nrf_isr+0xe>
    2716:	bf00      	nop
    2718:	40011000 	.word	0x40011000
    271c:	200004b4 	.word	0x200004b4

00002720 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    2720:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    2722:	4c0f      	ldr	r4, [pc, #60]	; (2760 <sys_clock_driver_init+0x40>)
    2724:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    2726:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    272a:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    272e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    2732:	4b0c      	ldr	r3, [pc, #48]	; (2764 <sys_clock_driver_init+0x44>)
    2734:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2738:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    273c:	2101      	movs	r1, #1
    273e:	462a      	mov	r2, r5
    2740:	2011      	movs	r0, #17
    2742:	f000 f99b 	bl	2a7c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2746:	2011      	movs	r0, #17
    2748:	f000 f97a 	bl	2a40 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    274c:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    274e:	4a06      	ldr	r2, [pc, #24]	; (2768 <sys_clock_driver_init+0x48>)
    2750:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    2752:	2002      	movs	r0, #2
    2754:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    2756:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    2758:	f7ff fee4 	bl	2524 <z_nrf_clock_control_lf_on>

	return 0;
}
    275c:	4628      	mov	r0, r5
    275e:	bd38      	pop	{r3, r4, r5, pc}
    2760:	40011000 	.word	0x40011000
    2764:	e000e100 	.word	0xe000e100
    2768:	200004bc 	.word	0x200004bc

0000276c <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    276c:	4a13      	ldr	r2, [pc, #76]	; (27bc <sys_clock_set_timeout+0x50>)
    276e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2772:	bf14      	ite	ne
    2774:	4603      	movne	r3, r0
    2776:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2778:	3b01      	subs	r3, #1
    277a:	2b00      	cmp	r3, #0
    277c:	dd1c      	ble.n	27b8 <sys_clock_set_timeout+0x4c>
    277e:	4293      	cmp	r3, r2
    2780:	bfa8      	it	ge
    2782:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    2784:	4a0e      	ldr	r2, [pc, #56]	; (27c0 <sys_clock_set_timeout+0x54>)
    2786:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    278a:	4a0e      	ldr	r2, [pc, #56]	; (27c4 <sys_clock_set_timeout+0x58>)
    278c:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    278e:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    2790:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    2794:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
		ticks = 0;
    2798:	bf18      	it	ne
    279a:	2300      	movne	r3, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    279c:	3201      	adds	r2, #1
    279e:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    27a0:	4a09      	ldr	r2, [pc, #36]	; (27c8 <sys_clock_set_timeout+0x5c>)
    27a2:	480a      	ldr	r0, [pc, #40]	; (27cc <sys_clock_set_timeout+0x60>)
    27a4:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    27a6:	2000      	movs	r0, #0
    27a8:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    27aa:	4a04      	ldr	r2, [pc, #16]	; (27bc <sys_clock_set_timeout+0x50>)
    27ac:	4293      	cmp	r3, r2
    27ae:	bf94      	ite	ls
    27b0:	18c9      	addls	r1, r1, r3
    27b2:	1889      	addhi	r1, r1, r2
    27b4:	f7ff bf42 	b.w	263c <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    27b8:	2300      	movs	r3, #0
    27ba:	e7e3      	b.n	2784 <sys_clock_set_timeout+0x18>
    27bc:	007fffff 	.word	0x007fffff
    27c0:	40011000 	.word	0x40011000
    27c4:	200004c0 	.word	0x200004c0
    27c8:	200004b4 	.word	0x200004b4
    27cc:	00002625 	.word	0x00002625

000027d0 <sys_clock_elapsed>:
	__asm__ volatile(
    27d0:	f04f 0220 	mov.w	r2, #32
    27d4:	f3ef 8311 	mrs	r3, BASEPRI
    27d8:	f382 8811 	msr	BASEPRI, r2
    27dc:	f3bf 8f6f 	isb	sy
    27e0:	4a06      	ldr	r2, [pc, #24]	; (27fc <sys_clock_elapsed+0x2c>)
    27e2:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    27e6:	4a06      	ldr	r2, [pc, #24]	; (2800 <sys_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    27e8:	6812      	ldr	r2, [r2, #0]
    27ea:	1a80      	subs	r0, r0, r2
    27ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    27f0:	f383 8811 	msr	BASEPRI, r3
    27f4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    27f8:	4770      	bx	lr
    27fa:	bf00      	nop
    27fc:	40011000 	.word	0x40011000
    2800:	200004c0 	.word	0x200004c0

00002804 <sys_clock_cycle_get_32>:
	__asm__ volatile(
    2804:	f04f 0320 	mov.w	r3, #32
    2808:	f3ef 8211 	mrs	r2, BASEPRI
    280c:	f383 8811 	msr	BASEPRI, r3
    2810:	f3bf 8f6f 	isb	sy

uint32_t sys_clock_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    2814:	4906      	ldr	r1, [pc, #24]	; (2830 <sys_clock_cycle_get_32+0x2c>)
    2816:	4b07      	ldr	r3, [pc, #28]	; (2834 <sys_clock_cycle_get_32+0x30>)
    2818:	6808      	ldr	r0, [r1, #0]
    281a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    281e:	f382 8811 	msr	BASEPRI, r2
    2822:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    2826:	1a1b      	subs	r3, r3, r0
    2828:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    282c:	4418      	add	r0, r3
    282e:	4770      	bx	lr
    2830:	200004c0 	.word	0x200004c0
    2834:	40011000 	.word	0x40011000

00002838 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    2838:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    283a:	4c11      	ldr	r4, [pc, #68]	; (2880 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    283c:	4a11      	ldr	r2, [pc, #68]	; (2884 <_DoInit+0x4c>)
    283e:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    2840:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    2842:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    2846:	4b10      	ldr	r3, [pc, #64]	; (2888 <_DoInit+0x50>)
    2848:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    284a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    284c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    2850:	4a0e      	ldr	r2, [pc, #56]	; (288c <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    2852:	490f      	ldr	r1, [pc, #60]	; (2890 <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    2854:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    2856:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    2858:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    285a:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    285c:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    285e:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    2860:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    2862:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    2864:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    2866:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    2868:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    286a:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    286c:	f003 fed5 	bl	661a <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    2870:	4908      	ldr	r1, [pc, #32]	; (2894 <_DoInit+0x5c>)
    2872:	4620      	mov	r0, r4
    2874:	f003 fed1 	bl	661a <strcpy>
  p->acID[6] = ' ';
    2878:	2320      	movs	r3, #32
    287a:	71a3      	strb	r3, [r4, #6]
}
    287c:	bd10      	pop	{r4, pc}
    287e:	bf00      	nop
    2880:	200004c4 	.word	0x200004c4
    2884:	0000729d 	.word	0x0000729d
    2888:	20000896 	.word	0x20000896
    288c:	20000886 	.word	0x20000886
    2890:	000072a6 	.word	0x000072a6
    2894:	000072aa 	.word	0x000072aa

00002898 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    2898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    289c:	4f23      	ldr	r7, [pc, #140]	; (292c <SEGGER_RTT_WriteSkipNoLock+0x94>)
    289e:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    28a2:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    28a4:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    28a8:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    28aa:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    28ac:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    28ae:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    28b0:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    28b2:	d834      	bhi.n	291e <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    28b4:	f8d2 a020 	ldr.w	sl, [r2, #32]
    28b8:	ebaa 0905 	sub.w	r9, sl, r5
    28bc:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    28c0:	4294      	cmp	r4, r2
    28c2:	d811      	bhi.n	28e8 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    28c4:	f04f 0918 	mov.w	r9, #24
    28c8:	fb06 9309 	mla	r3, r6, r9, r9
    28cc:	443b      	add	r3, r7
    28ce:	4622      	mov	r2, r4
    28d0:	6858      	ldr	r0, [r3, #4]
    28d2:	4641      	mov	r1, r8
    28d4:	4428      	add	r0, r5
    28d6:	f003 fed8 	bl	668a <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    28da:	fb09 7606 	mla	r6, r9, r6, r7
    28de:	442c      	add	r4, r5
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
    28e0:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    28e2:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    28e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    28e8:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    28ea:	429c      	cmp	r4, r3
    28ec:	d81b      	bhi.n	2926 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    28ee:	fb00 bb0b 	mla	fp, r0, fp, fp
    28f2:	44bb      	add	fp, r7
    28f4:	464a      	mov	r2, r9
    28f6:	f8db 0004 	ldr.w	r0, [fp, #4]
    28fa:	442c      	add	r4, r5
    28fc:	4428      	add	r0, r5
    28fe:	f003 fec4 	bl	668a <memcpy>
      if (NumBytes) {
    2902:	ebb4 040a 	subs.w	r4, r4, sl
    2906:	d006      	beq.n	2916 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
    2908:	f8db 0004 	ldr.w	r0, [fp, #4]
    290c:	4622      	mov	r2, r4
    290e:	eb08 0109 	add.w	r1, r8, r9
    2912:	f003 feba 	bl	668a <memcpy>
      pRing->WrOff = NumBytes;
    2916:	2018      	movs	r0, #24
    2918:	fb00 7606 	mla	r6, r0, r6, r7
    291c:	e7e0      	b.n	28e0 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    291e:	3b01      	subs	r3, #1
    2920:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    2922:	42a3      	cmp	r3, r4
    2924:	d2ce      	bcs.n	28c4 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    2926:	2000      	movs	r0, #0
    2928:	e7dc      	b.n	28e4 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    292a:	bf00      	nop
    292c:	200004c4 	.word	0x200004c4

00002930 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    2930:	b570      	push	{r4, r5, r6, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    2932:	4b16      	ldr	r3, [pc, #88]	; (298c <SEGGER_RTT_WriteNoLock+0x5c>)
    2934:	2418      	movs	r4, #24
    2936:	fb00 4504 	mla	r5, r0, r4, r4
    293a:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    293c:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    2940:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    2942:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    2944:	2c01      	cmp	r4, #1
    2946:	d00e      	beq.n	2966 <SEGGER_RTT_WriteNoLock+0x36>
    2948:	2c02      	cmp	r4, #2
    294a:	d018      	beq.n	297e <SEGGER_RTT_WriteNoLock+0x4e>
    294c:	b9e4      	cbnz	r4, 2988 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    294e:	4628      	mov	r0, r5
    2950:	f003 fdff 	bl	6552 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    2954:	4286      	cmp	r6, r0
    2956:	d804      	bhi.n	2962 <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    2958:	4632      	mov	r2, r6
    295a:	4628      	mov	r0, r5
    295c:	f003 fe02 	bl	6564 <_WriteNoCheck>
    2960:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    2962:	4620      	mov	r0, r4
    2964:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    2966:	4628      	mov	r0, r5
    2968:	f003 fdf3 	bl	6552 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    296c:	4286      	cmp	r6, r0
    296e:	4634      	mov	r4, r6
    2970:	bf28      	it	cs
    2972:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    2974:	4622      	mov	r2, r4
    2976:	4628      	mov	r0, r5
    2978:	f003 fdf4 	bl	6564 <_WriteNoCheck>
    break;
    297c:	e7f1      	b.n	2962 <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    297e:	4628      	mov	r0, r5
}
    2980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    2984:	f003 be0a 	b.w	659c <_WriteBlocking>
  switch (pRing->Flags) {
    2988:	2400      	movs	r4, #0
  return Status;
    298a:	e7ea      	b.n	2962 <SEGGER_RTT_WriteNoLock+0x32>
    298c:	200004c4 	.word	0x200004c4

00002990 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    2990:	4b03      	ldr	r3, [pc, #12]	; (29a0 <SEGGER_RTT_HasDataUp+0x10>)
    2992:	2218      	movs	r2, #24
    2994:	fb02 3300 	mla	r3, r2, r0, r3
    2998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    299a:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    299c:	1a80      	subs	r0, r0, r2
    299e:	4770      	bx	lr
    29a0:	200004c4 	.word	0x200004c4

000029a4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    29a4:	4a09      	ldr	r2, [pc, #36]	; (29cc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    29a6:	490a      	ldr	r1, [pc, #40]	; (29d0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    29a8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    29aa:	6809      	ldr	r1, [r1, #0]
    29ac:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    29ae:	4909      	ldr	r1, [pc, #36]	; (29d4 <arch_swap+0x30>)
	_current->arch.basepri = key;
    29b0:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    29b2:	684b      	ldr	r3, [r1, #4]
    29b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    29b8:	604b      	str	r3, [r1, #4]
    29ba:	2300      	movs	r3, #0
    29bc:	f383 8811 	msr	BASEPRI, r3
    29c0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    29c4:	6893      	ldr	r3, [r2, #8]
}
    29c6:	6f98      	ldr	r0, [r3, #120]	; 0x78
    29c8:	4770      	bx	lr
    29ca:	bf00      	nop
    29cc:	20000618 	.word	0x20000618
    29d0:	00007074 	.word	0x00007074
    29d4:	e000ed00 	.word	0xe000ed00

000029d8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    29d8:	490f      	ldr	r1, [pc, #60]	; (2a18 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    29da:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    29dc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    29e0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    29e2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    29e6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    29ea:	2020      	movs	r0, #32
    msr BASEPRI, r0
    29ec:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    29f0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    29f4:	4f09      	ldr	r7, [pc, #36]	; (2a1c <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    29f6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    29fa:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    29fc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    29fe:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2a00:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    2a02:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2a04:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2a06:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2a0a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2a0e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2a12:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2a16:	4770      	bx	lr
    ldr r1, =_kernel
    2a18:	20000618 	.word	0x20000618
    ldr v4, =_SCS_ICSR
    2a1c:	e000ed04 	.word	0xe000ed04

00002a20 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    2a20:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2a24:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2a26:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2a2a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2a2e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2a30:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2a34:	2902      	cmp	r1, #2
    beq _oops
    2a36:	d0ff      	beq.n	2a38 <_oops>

00002a38 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2a38:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2a3a:	f003 fde3 	bl	6604 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2a3e:	bd01      	pop	{r0, pc}

00002a40 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2a40:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2a42:	2b00      	cmp	r3, #0
    2a44:	db08      	blt.n	2a58 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a46:	2201      	movs	r2, #1
    2a48:	f000 001f 	and.w	r0, r0, #31
    2a4c:	fa02 f000 	lsl.w	r0, r2, r0
    2a50:	095b      	lsrs	r3, r3, #5
    2a52:	4a02      	ldr	r2, [pc, #8]	; (2a5c <arch_irq_enable+0x1c>)
    2a54:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2a58:	4770      	bx	lr
    2a5a:	bf00      	nop
    2a5c:	e000e100 	.word	0xe000e100

00002a60 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2a60:	4b05      	ldr	r3, [pc, #20]	; (2a78 <arch_irq_is_enabled+0x18>)
    2a62:	0942      	lsrs	r2, r0, #5
    2a64:	f000 001f 	and.w	r0, r0, #31
    2a68:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2a6c:	2301      	movs	r3, #1
    2a6e:	fa03 f000 	lsl.w	r0, r3, r0
}
    2a72:	4010      	ands	r0, r2
    2a74:	4770      	bx	lr
    2a76:	bf00      	nop
    2a78:	e000e100 	.word	0xe000e100

00002a7c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2a7c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2a7e:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a80:	bfa8      	it	ge
    2a82:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    2a86:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a8a:	bfb8      	it	lt
    2a8c:	4b06      	ldrlt	r3, [pc, #24]	; (2aa8 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a8e:	ea4f 1141 	mov.w	r1, r1, lsl #5
    2a92:	bfac      	ite	ge
    2a94:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a98:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a9c:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a9e:	bfb4      	ite	lt
    2aa0:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2aa2:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    2aa6:	4770      	bx	lr
    2aa8:	e000ed14 	.word	0xe000ed14

00002aac <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2aac:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2ab0:	9b00      	ldr	r3, [sp, #0]
    2ab2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    2ab6:	490a      	ldr	r1, [pc, #40]	; (2ae0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2ab8:	9b01      	ldr	r3, [sp, #4]
    2aba:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2abe:	9b02      	ldr	r3, [sp, #8]
    2ac0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    2ac4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2ac8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2acc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    2ad0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2ad4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2ad6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2ad8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2ada:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2adc:	4770      	bx	lr
    2ade:	bf00      	nop
    2ae0:	00005ceb 	.word	0x00005ceb

00002ae4 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2ae4:	b508      	push	{r3, lr}
    2ae6:	4606      	mov	r6, r0
    2ae8:	460d      	mov	r5, r1
    2aea:	4614      	mov	r4, r2
	z_arm_configure_static_mpu_regions();
    2aec:	f000 fb00 	bl	30f0 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2af0:	4b07      	ldr	r3, [pc, #28]	; (2b10 <arch_switch_to_main_thread+0x2c>)
    2af2:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2af4:	4620      	mov	r0, r4
    2af6:	f385 8809 	msr	PSP, r5
    2afa:	2100      	movs	r1, #0
    2afc:	b663      	cpsie	if
    2afe:	f381 8811 	msr	BASEPRI, r1
    2b02:	f3bf 8f6f 	isb	sy
    2b06:	2200      	movs	r2, #0
    2b08:	2300      	movs	r3, #0
    2b0a:	f003 f8ee 	bl	5cea <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2b0e:	bf00      	nop
    2b10:	20000618 	.word	0x20000618

00002b14 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2b14:	4901      	ldr	r1, [pc, #4]	; (2b1c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2b16:	2210      	movs	r2, #16
	str	r2, [r1]
    2b18:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2b1a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2b1c:	e000ed10 	.word	0xe000ed10

00002b20 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2b20:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2b22:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2b24:	f380 8811 	msr	BASEPRI, r0
	isb
    2b28:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2b2c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2b30:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2b32:	b662      	cpsie	i
	isb
    2b34:	f3bf 8f6f 	isb	sy

	bx	lr
    2b38:	4770      	bx	lr
    2b3a:	bf00      	nop

00002b3c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2b3c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2b3e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2b40:	f381 8811 	msr	BASEPRI, r1

	wfe
    2b44:	bf20      	wfe

	msr	BASEPRI, r0
    2b46:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2b4a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2b4c:	4770      	bx	lr
    2b4e:	bf00      	nop

00002b50 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2b50:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2b52:	4606      	mov	r6, r0

	if (esf != NULL) {
    2b54:	460c      	mov	r4, r1
    2b56:	b301      	cbz	r1, 2b9a <z_arm_fatal_error+0x4a>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    2b58:	4b13      	ldr	r3, [pc, #76]	; (2ba8 <z_arm_fatal_error+0x58>)
    2b5a:	4d14      	ldr	r5, [pc, #80]	; (2bac <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2b5c:	4814      	ldr	r0, [pc, #80]	; (2bb0 <z_arm_fatal_error+0x60>)
    2b5e:	1aed      	subs	r5, r5, r3
    2b60:	08ed      	lsrs	r5, r5, #3
    2b62:	01ad      	lsls	r5, r5, #6
    2b64:	f045 0501 	orr.w	r5, r5, #1
    2b68:	f8ad 5000 	strh.w	r5, [sp]
    2b6c:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    2b70:	6809      	ldr	r1, [r1, #0]
    2b72:	f003 f99e 	bl	5eb2 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2b76:	f8ad 5000 	strh.w	r5, [sp]
    2b7a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    2b7e:	68e1      	ldr	r1, [r4, #12]
    2b80:	480c      	ldr	r0, [pc, #48]	; (2bb4 <z_arm_fatal_error+0x64>)
    2b82:	f003 f996 	bl	5eb2 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2b86:	69e1      	ldr	r1, [r4, #28]
    2b88:	480b      	ldr	r0, [pc, #44]	; (2bb8 <z_arm_fatal_error+0x68>)
    2b8a:	462a      	mov	r2, r5
    2b8c:	f003 f964 	bl	5e58 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2b90:	69a1      	ldr	r1, [r4, #24]
    2b92:	480a      	ldr	r0, [pc, #40]	; (2bbc <z_arm_fatal_error+0x6c>)
    2b94:	462a      	mov	r2, r5
    2b96:	f003 f95f 	bl	5e58 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2b9a:	4621      	mov	r1, r4
    2b9c:	4630      	mov	r0, r6
}
    2b9e:	b002      	add	sp, #8
    2ba0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    2ba4:	f001 bcbc 	b.w	4520 <z_fatal_error>
    2ba8:	00006e28 	.word	0x00006e28
    2bac:	00006e48 	.word	0x00006e48
    2bb0:	000072b1 	.word	0x000072b1
    2bb4:	000072e0 	.word	0x000072e0
    2bb8:	0000730f 	.word	0x0000730f
    2bbc:	0000731e 	.word	0x0000731e

00002bc0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2bc0:	bf30      	wfi
    b z_SysNmiOnReset
    2bc2:	f7ff bffd 	b.w	2bc0 <z_SysNmiOnReset>
    2bc6:	bf00      	nop

00002bc8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2bc8:	4a0e      	ldr	r2, [pc, #56]	; (2c04 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    2bca:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2bcc:	4b0e      	ldr	r3, [pc, #56]	; (2c08 <z_arm_prep_c+0x40>)
    2bce:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2bd2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2bd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2bd8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2bdc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2be0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2be4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    2be8:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    2bec:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    2bf0:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2bf4:	f001 fd08 	bl	4608 <z_bss_zero>
	z_data_copy();
    2bf8:	f002 fb36 	bl	5268 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2bfc:	f000 fa5a 	bl	30b4 <z_arm_interrupt_init>
	z_cstart();
    2c00:	f001 fd26 	bl	4650 <z_cstart>
    2c04:	00000000 	.word	0x00000000
    2c08:	e000ed00 	.word	0xe000ed00

00002c0c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2c0c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2c0e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2c10:	4a0b      	ldr	r2, [pc, #44]	; (2c40 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2c12:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    2c14:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2c16:	bf1e      	ittt	ne
	movne	r1, #0
    2c18:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2c1a:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    2c1c:	f003 fec5 	blne	69aa <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2c20:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2c22:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2c26:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2c2a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2c2e:	4905      	ldr	r1, [pc, #20]	; (2c44 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2c30:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2c32:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2c34:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2c36:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2c3a:	4903      	ldr	r1, [pc, #12]	; (2c48 <_isr_wrapper+0x3c>)
	bx r1
    2c3c:	4708      	bx	r1
    2c3e:	0000      	.short	0x0000
	ldr r2, =_kernel
    2c40:	20000618 	.word	0x20000618
	ldr r1, =_sw_isr_table
    2c44:	00006cf0 	.word	0x00006cf0
	ldr r1, =z_arm_int_exit
    2c48:	00003099 	.word	0x00003099

00002c4c <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    2c4c:	f003 fd6e 	bl	672c <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2c50:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2c52:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2c56:	4808      	ldr	r0, [pc, #32]	; (2c78 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2c58:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    2c5c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2c5e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2c62:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2c66:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2c68:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2c6a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2c6e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2c72:	f7ff ffa9 	bl	2bc8 <z_arm_prep_c>
    2c76:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    2c78:	200014e0 	.word	0x200014e0

00002c7c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2c7c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2c80:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2c84:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2c86:	4672      	mov	r2, lr
	bl z_arm_fault
    2c88:	f000 f934 	bl	2ef4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2c8c:	bd01      	pop	{r0, pc}
    2c8e:	bf00      	nop

00002c90 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    2c90:	b570      	push	{r4, r5, r6, lr}
    2c92:	4b23      	ldr	r3, [pc, #140]	; (2d20 <usage_fault.constprop.0+0x90>)
    2c94:	4c23      	ldr	r4, [pc, #140]	; (2d24 <usage_fault.constprop.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2c96:	4d24      	ldr	r5, [pc, #144]	; (2d28 <usage_fault.constprop.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    2c98:	4824      	ldr	r0, [pc, #144]	; (2d2c <usage_fault.constprop.0+0x9c>)
    2c9a:	1ae4      	subs	r4, r4, r3
    2c9c:	08e4      	lsrs	r4, r4, #3
    2c9e:	01a4      	lsls	r4, r4, #6
    2ca0:	f044 0601 	orr.w	r6, r4, #1
    2ca4:	4631      	mov	r1, r6
    2ca6:	f003 f8ca 	bl	5e3e <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2caa:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2cac:	019b      	lsls	r3, r3, #6
    2cae:	d503      	bpl.n	2cb8 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    2cb0:	481f      	ldr	r0, [pc, #124]	; (2d30 <usage_fault.constprop.0+0xa0>)
    2cb2:	4631      	mov	r1, r6
    2cb4:	f003 f8c3 	bl	5e3e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2cb8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2cba:	01dd      	lsls	r5, r3, #7
    2cbc:	d504      	bpl.n	2cc8 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    2cbe:	481d      	ldr	r0, [pc, #116]	; (2d34 <usage_fault.constprop.0+0xa4>)
    2cc0:	f044 0101 	orr.w	r1, r4, #1
    2cc4:	f003 f8bb 	bl	5e3e <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2cc8:	4d17      	ldr	r5, [pc, #92]	; (2d28 <usage_fault.constprop.0+0x98>)
    2cca:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2ccc:	0318      	lsls	r0, r3, #12
    2cce:	d504      	bpl.n	2cda <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    2cd0:	4819      	ldr	r0, [pc, #100]	; (2d38 <usage_fault.constprop.0+0xa8>)
    2cd2:	f044 0101 	orr.w	r1, r4, #1
    2cd6:	f003 f8b2 	bl	5e3e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2cda:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2cdc:	0359      	lsls	r1, r3, #13
    2cde:	d504      	bpl.n	2cea <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2ce0:	4816      	ldr	r0, [pc, #88]	; (2d3c <usage_fault.constprop.0+0xac>)
    2ce2:	f044 0101 	orr.w	r1, r4, #1
    2ce6:	f003 f8aa 	bl	5e3e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2cea:	4d0f      	ldr	r5, [pc, #60]	; (2d28 <usage_fault.constprop.0+0x98>)
    2cec:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2cee:	039a      	lsls	r2, r3, #14
    2cf0:	d504      	bpl.n	2cfc <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2cf2:	4813      	ldr	r0, [pc, #76]	; (2d40 <usage_fault.constprop.0+0xb0>)
    2cf4:	f044 0101 	orr.w	r1, r4, #1
    2cf8:	f003 f8a1 	bl	5e3e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2cfc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2cfe:	03db      	lsls	r3, r3, #15
    2d00:	d504      	bpl.n	2d0c <usage_fault.constprop.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2d02:	4810      	ldr	r0, [pc, #64]	; (2d44 <usage_fault.constprop.0+0xb4>)
    2d04:	f044 0101 	orr.w	r1, r4, #1
    2d08:	f003 f899 	bl	5e3e <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2d0c:	4a06      	ldr	r2, [pc, #24]	; (2d28 <usage_fault.constprop.0+0x98>)
    2d0e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2d10:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2d14:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2d18:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    2d1a:	2000      	movs	r0, #0
    2d1c:	bd70      	pop	{r4, r5, r6, pc}
    2d1e:	bf00      	nop
    2d20:	00006e28 	.word	0x00006e28
    2d24:	00006e48 	.word	0x00006e48
    2d28:	e000ed00 	.word	0xe000ed00
    2d2c:	0000734c 	.word	0x0000734c
    2d30:	00007364 	.word	0x00007364
    2d34:	00007377 	.word	0x00007377
    2d38:	00007391 	.word	0x00007391
    2d3c:	000073af 	.word	0x000073af
    2d40:	000073d4 	.word	0x000073d4
    2d44:	000073ee 	.word	0x000073ee

00002d48 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d4c:	4b2a      	ldr	r3, [pc, #168]	; (2df8 <bus_fault.constprop.0+0xb0>)
    2d4e:	4c2b      	ldr	r4, [pc, #172]	; (2dfc <bus_fault.constprop.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2d50:	4d2b      	ldr	r5, [pc, #172]	; (2e00 <bus_fault.constprop.0+0xb8>)
    2d52:	1ae4      	subs	r4, r4, r3
    2d54:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    2d56:	01a4      	lsls	r4, r4, #6
    2d58:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2d5c:	4607      	mov	r7, r0
    2d5e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    2d60:	4828      	ldr	r0, [pc, #160]	; (2e04 <bus_fault.constprop.0+0xbc>)
    2d62:	4641      	mov	r1, r8
    2d64:	f003 f86b 	bl	5e3e <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2d68:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2d6a:	04d9      	lsls	r1, r3, #19
    2d6c:	d503      	bpl.n	2d76 <bus_fault.constprop.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    2d6e:	4826      	ldr	r0, [pc, #152]	; (2e08 <bus_fault.constprop.0+0xc0>)
    2d70:	4641      	mov	r1, r8
    2d72:	f003 f864 	bl	5e3e <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2d76:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2d78:	051a      	lsls	r2, r3, #20
    2d7a:	d504      	bpl.n	2d86 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    2d7c:	4823      	ldr	r0, [pc, #140]	; (2e0c <bus_fault.constprop.0+0xc4>)
    2d7e:	f044 0101 	orr.w	r1, r4, #1
    2d82:	f003 f85c 	bl	5e3e <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2d86:	4d1e      	ldr	r5, [pc, #120]	; (2e00 <bus_fault.constprop.0+0xb8>)
    2d88:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2d8a:	059b      	lsls	r3, r3, #22
    2d8c:	d512      	bpl.n	2db4 <bus_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    2d8e:	f044 0801 	orr.w	r8, r4, #1
    2d92:	481f      	ldr	r0, [pc, #124]	; (2e10 <bus_fault.constprop.0+0xc8>)
    2d94:	4641      	mov	r1, r8
    2d96:	f003 f852 	bl	5e3e <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    2d9a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2d9c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2d9e:	0418      	lsls	r0, r3, #16
    2da0:	d508      	bpl.n	2db4 <bus_fault.constprop.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2da2:	481c      	ldr	r0, [pc, #112]	; (2e14 <bus_fault.constprop.0+0xcc>)
    2da4:	4642      	mov	r2, r8
    2da6:	f003 f857 	bl	5e58 <log_1>
			if (from_hard_fault != 0) {
    2daa:	b11f      	cbz	r7, 2db4 <bus_fault.constprop.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2dac:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2dae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2db2:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2db4:	4d12      	ldr	r5, [pc, #72]	; (2e00 <bus_fault.constprop.0+0xb8>)
    2db6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2db8:	0559      	lsls	r1, r3, #21
    2dba:	d504      	bpl.n	2dc6 <bus_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    2dbc:	4816      	ldr	r0, [pc, #88]	; (2e18 <bus_fault.constprop.0+0xd0>)
    2dbe:	f044 0101 	orr.w	r1, r4, #1
    2dc2:	f003 f83c 	bl	5e3e <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2dc6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2dc8:	05da      	lsls	r2, r3, #23
    2dca:	d50d      	bpl.n	2de8 <bus_fault.constprop.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    2dcc:	4813      	ldr	r0, [pc, #76]	; (2e1c <bus_fault.constprop.0+0xd4>)
    2dce:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2dd2:	f003 f834 	bl	5e3e <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2dd6:	4a0a      	ldr	r2, [pc, #40]	; (2e00 <bus_fault.constprop.0+0xb8>)
    2dd8:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2dda:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2ddc:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2de0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2de2:	7030      	strb	r0, [r6, #0]
}
    2de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2de8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2dea:	049b      	lsls	r3, r3, #18
    2dec:	d5f3      	bpl.n	2dd6 <bus_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2dee:	480c      	ldr	r0, [pc, #48]	; (2e20 <bus_fault.constprop.0+0xd8>)
    2df0:	f044 0101 	orr.w	r1, r4, #1
    2df4:	e7ed      	b.n	2dd2 <bus_fault.constprop.0+0x8a>
    2df6:	bf00      	nop
    2df8:	00006e28 	.word	0x00006e28
    2dfc:	00006e48 	.word	0x00006e48
    2e00:	e000ed00 	.word	0xe000ed00
    2e04:	00007419 	.word	0x00007419
    2e08:	0000742f 	.word	0x0000742f
    2e0c:	00007440 	.word	0x00007440
    2e10:	00007453 	.word	0x00007453
    2e14:	0000746c 	.word	0x0000746c
    2e18:	00007481 	.word	0x00007481
    2e1c:	0000749c 	.word	0x0000749c
    2e20:	000074b4 	.word	0x000074b4

00002e24 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2e28:	4b28      	ldr	r3, [pc, #160]	; (2ecc <mem_manage_fault.constprop.0+0xa8>)
    2e2a:	4c29      	ldr	r4, [pc, #164]	; (2ed0 <mem_manage_fault.constprop.0+0xac>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2e2c:	4d29      	ldr	r5, [pc, #164]	; (2ed4 <mem_manage_fault.constprop.0+0xb0>)
    2e2e:	1ae4      	subs	r4, r4, r3
    2e30:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    2e32:	01a4      	lsls	r4, r4, #6
    2e34:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2e38:	4607      	mov	r7, r0
    2e3a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    2e3c:	4826      	ldr	r0, [pc, #152]	; (2ed8 <mem_manage_fault.constprop.0+0xb4>)
    2e3e:	4641      	mov	r1, r8
    2e40:	f002 fffd 	bl	5e3e <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2e44:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2e46:	06d8      	lsls	r0, r3, #27
    2e48:	d503      	bpl.n	2e52 <mem_manage_fault.constprop.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2e4a:	4824      	ldr	r0, [pc, #144]	; (2edc <mem_manage_fault.constprop.0+0xb8>)
    2e4c:	4641      	mov	r1, r8
    2e4e:	f002 fff6 	bl	5e3e <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2e52:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2e54:	0719      	lsls	r1, r3, #28
    2e56:	d504      	bpl.n	2e62 <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    2e58:	4821      	ldr	r0, [pc, #132]	; (2ee0 <mem_manage_fault.constprop.0+0xbc>)
    2e5a:	f044 0101 	orr.w	r1, r4, #1
    2e5e:	f002 ffee 	bl	5e3e <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2e62:	4d1c      	ldr	r5, [pc, #112]	; (2ed4 <mem_manage_fault.constprop.0+0xb0>)
    2e64:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2e66:	079a      	lsls	r2, r3, #30
    2e68:	d512      	bpl.n	2e90 <mem_manage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    2e6a:	f044 0801 	orr.w	r8, r4, #1
    2e6e:	4641      	mov	r1, r8
    2e70:	481c      	ldr	r0, [pc, #112]	; (2ee4 <mem_manage_fault.constprop.0+0xc0>)
    2e72:	f002 ffe4 	bl	5e3e <log_0>
		uint32_t temp = SCB->MMFAR;
    2e76:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2e78:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2e7a:	061b      	lsls	r3, r3, #24
    2e7c:	d508      	bpl.n	2e90 <mem_manage_fault.constprop.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2e7e:	481a      	ldr	r0, [pc, #104]	; (2ee8 <mem_manage_fault.constprop.0+0xc4>)
    2e80:	4642      	mov	r2, r8
    2e82:	f002 ffe9 	bl	5e58 <log_1>
			if (from_hard_fault != 0) {
    2e86:	b11f      	cbz	r7, 2e90 <mem_manage_fault.constprop.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2e88:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2e8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2e8e:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2e90:	4d10      	ldr	r5, [pc, #64]	; (2ed4 <mem_manage_fault.constprop.0+0xb0>)
    2e92:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2e94:	07d8      	lsls	r0, r3, #31
    2e96:	d504      	bpl.n	2ea2 <mem_manage_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    2e98:	4814      	ldr	r0, [pc, #80]	; (2eec <mem_manage_fault.constprop.0+0xc8>)
    2e9a:	f044 0101 	orr.w	r1, r4, #1
    2e9e:	f002 ffce 	bl	5e3e <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2ea2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2ea4:	0699      	lsls	r1, r3, #26
    2ea6:	d504      	bpl.n	2eb2 <mem_manage_fault.constprop.0+0x8e>
		PR_FAULT_INFO(
    2ea8:	4811      	ldr	r0, [pc, #68]	; (2ef0 <mem_manage_fault.constprop.0+0xcc>)
    2eaa:	f044 0101 	orr.w	r1, r4, #1
    2eae:	f002 ffc6 	bl	5e3e <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2eb2:	4b08      	ldr	r3, [pc, #32]	; (2ed4 <mem_manage_fault.constprop.0+0xb0>)
    2eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2eb6:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2eb8:	bf58      	it	pl
    2eba:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2ebe:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2ec0:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    2ec4:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2ec6:	7030      	strb	r0, [r6, #0]
}
    2ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ecc:	00006e28 	.word	0x00006e28
    2ed0:	00006e48 	.word	0x00006e48
    2ed4:	e000ed00 	.word	0xe000ed00
    2ed8:	000074e3 	.word	0x000074e3
    2edc:	000074f9 	.word	0x000074f9
    2ee0:	00007440 	.word	0x00007440
    2ee4:	0000752c 	.word	0x0000752c
    2ee8:	00007544 	.word	0x00007544
    2eec:	0000755a 	.word	0x0000755a
    2ef0:	000074b4 	.word	0x000074b4

00002ef4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2ef8:	4b58      	ldr	r3, [pc, #352]	; (305c <z_arm_fault+0x168>)
    2efa:	685e      	ldr	r6, [r3, #4]
{
    2efc:	b08b      	sub	sp, #44	; 0x2c
    2efe:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2f00:	f3c6 0408 	ubfx	r4, r6, #0, #9
    2f04:	2500      	movs	r5, #0
    2f06:	f385 8811 	msr	BASEPRI, r5
    2f0a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2f0e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2f12:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    2f16:	d10d      	bne.n	2f34 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2f18:	f002 030c 	and.w	r3, r2, #12
    2f1c:	2b08      	cmp	r3, #8
    2f1e:	d10b      	bne.n	2f38 <z_arm_fault+0x44>
    2f20:	494f      	ldr	r1, [pc, #316]	; (3060 <z_arm_fault+0x16c>)
    2f22:	4b50      	ldr	r3, [pc, #320]	; (3064 <z_arm_fault+0x170>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    2f24:	4850      	ldr	r0, [pc, #320]	; (3068 <z_arm_fault+0x174>)
    2f26:	1ac9      	subs	r1, r1, r3
    2f28:	08c9      	lsrs	r1, r1, #3
    2f2a:	0189      	lsls	r1, r1, #6
    2f2c:	f041 0101 	orr.w	r1, r1, #1
    2f30:	f002 ff85 	bl	5e3e <log_0>
		return NULL;
    2f34:	462f      	mov	r7, r5
    2f36:	e003      	b.n	2f40 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2f38:	0712      	lsls	r2, r2, #28
    2f3a:	d401      	bmi.n	2f40 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    2f3c:	4607      	mov	r7, r0
			*nested_exc = true;
    2f3e:	2501      	movs	r5, #1
	*recoverable = false;
    2f40:	2300      	movs	r3, #0
    2f42:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    2f46:	1ee3      	subs	r3, r4, #3
    2f48:	2b09      	cmp	r3, #9
    2f4a:	d86d      	bhi.n	3028 <z_arm_fault+0x134>
    2f4c:	e8df f003 	tbb	[pc, r3]
    2f50:	3f5f5b05 	.word	0x3f5f5b05
    2f54:	6c6c6c6c 	.word	0x6c6c6c6c
    2f58:	636c      	.short	0x636c
    2f5a:	4b42      	ldr	r3, [pc, #264]	; (3064 <z_arm_fault+0x170>)
    2f5c:	4e40      	ldr	r6, [pc, #256]	; (3060 <z_arm_fault+0x16c>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2f5e:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 305c <z_arm_fault+0x168>
	PR_FAULT_INFO("***** HARD FAULT *****");
    2f62:	4842      	ldr	r0, [pc, #264]	; (306c <z_arm_fault+0x178>)
    2f64:	1af6      	subs	r6, r6, r3
    2f66:	08f6      	lsrs	r6, r6, #3
    2f68:	01b6      	lsls	r6, r6, #6
    2f6a:	f046 0601 	orr.w	r6, r6, #1
    2f6e:	4631      	mov	r1, r6
    2f70:	f002 ff65 	bl	5e3e <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2f74:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    2f78:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2f7c:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    2f80:	f88d 9007 	strb.w	r9, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2f84:	d005      	beq.n	2f92 <z_arm_fault+0x9e>
		PR_EXC("  Bus fault on vector table read");
    2f86:	483a      	ldr	r0, [pc, #232]	; (3070 <z_arm_fault+0x17c>)
    2f88:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    2f8a:	f002 ff58 	bl	5e3e <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2f8e:	2400      	movs	r4, #0
}
    2f90:	e020      	b.n	2fd4 <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2f92:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    2f96:	005b      	lsls	r3, r3, #1
    2f98:	d51c      	bpl.n	2fd4 <z_arm_fault+0xe0>
		PR_EXC("  Fault escalation (see below)");
    2f9a:	4836      	ldr	r0, [pc, #216]	; (3074 <z_arm_fault+0x180>)
    2f9c:	4631      	mov	r1, r6
    2f9e:	f002 ff4e 	bl	5e3e <log_0>
		if (SCB_MMFSR != 0) {
    2fa2:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    2fa6:	b12b      	cbz	r3, 2fb4 <z_arm_fault+0xc0>
			reason = mem_manage_fault(esf, 1, recoverable);
    2fa8:	f10d 0107 	add.w	r1, sp, #7
    2fac:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2fae:	f7ff ff39 	bl	2e24 <mem_manage_fault.constprop.0>
    2fb2:	e00e      	b.n	2fd2 <z_arm_fault+0xde>
		} else if (SCB_BFSR != 0) {
    2fb4:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    2fb8:	b12b      	cbz	r3, 2fc6 <z_arm_fault+0xd2>
			reason = bus_fault(esf, 1, recoverable);
    2fba:	f10d 0107 	add.w	r1, sp, #7
    2fbe:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2fc0:	f7ff fec2 	bl	2d48 <bus_fault.constprop.0>
    2fc4:	e005      	b.n	2fd2 <z_arm_fault+0xde>
		} else if (SCB_UFSR != 0) {
    2fc6:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    2fca:	b29b      	uxth	r3, r3
    2fcc:	b113      	cbz	r3, 2fd4 <z_arm_fault+0xe0>
			reason = usage_fault(esf);
    2fce:	f7ff fe5f 	bl	2c90 <usage_fault.constprop.0>
    2fd2:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2fd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2fd8:	b993      	cbnz	r3, 3000 <z_arm_fault+0x10c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2fda:	2220      	movs	r2, #32
    2fdc:	4639      	mov	r1, r7
    2fde:	a802      	add	r0, sp, #8
    2fe0:	f003 fb53 	bl	668a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2fe6:	b39d      	cbz	r5, 3050 <z_arm_fault+0x15c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2fe8:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2fec:	b922      	cbnz	r2, 2ff8 <z_arm_fault+0x104>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2fee:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2ff2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2ff6:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2ff8:	a902      	add	r1, sp, #8
    2ffa:	4620      	mov	r0, r4
    2ffc:	f7ff fda8 	bl	2b50 <z_arm_fatal_error>
}
    3000:	b00b      	add	sp, #44	; 0x2c
    3002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    3006:	f10d 0107 	add.w	r1, sp, #7
    300a:	2000      	movs	r0, #0
    300c:	e7cf      	b.n	2fae <z_arm_fault+0xba>
		reason = bus_fault(esf, 0, recoverable);
    300e:	f10d 0107 	add.w	r1, sp, #7
    3012:	2000      	movs	r0, #0
    3014:	e7d4      	b.n	2fc0 <z_arm_fault+0xcc>
    3016:	4912      	ldr	r1, [pc, #72]	; (3060 <z_arm_fault+0x16c>)
    3018:	4b12      	ldr	r3, [pc, #72]	; (3064 <z_arm_fault+0x170>)
	PR_FAULT_INFO(
    301a:	4817      	ldr	r0, [pc, #92]	; (3078 <z_arm_fault+0x184>)
    301c:	1ac9      	subs	r1, r1, r3
    301e:	08c9      	lsrs	r1, r1, #3
    3020:	0189      	lsls	r1, r1, #6
    3022:	f041 0101 	orr.w	r1, r1, #1
    3026:	e7b0      	b.n	2f8a <z_arm_fault+0x96>
    3028:	4a0e      	ldr	r2, [pc, #56]	; (3064 <z_arm_fault+0x170>)
    302a:	4b0d      	ldr	r3, [pc, #52]	; (3060 <z_arm_fault+0x16c>)
	PR_FAULT_INFO("***** %s %d) *****",
    302c:	4813      	ldr	r0, [pc, #76]	; (307c <z_arm_fault+0x188>)
    302e:	4914      	ldr	r1, [pc, #80]	; (3080 <z_arm_fault+0x18c>)
    3030:	1a9b      	subs	r3, r3, r2
    3032:	08db      	lsrs	r3, r3, #3
    3034:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    3038:	ea4f 1383 	mov.w	r3, r3, lsl #6
    303c:	bf18      	it	ne
    303e:	4601      	movne	r1, r0
    3040:	f043 0301 	orr.w	r3, r3, #1
    3044:	480f      	ldr	r0, [pc, #60]	; (3084 <z_arm_fault+0x190>)
    3046:	f1a4 0210 	sub.w	r2, r4, #16
    304a:	f002 ff19 	bl	5e80 <log_2>
    304e:	e79e      	b.n	2f8e <z_arm_fault+0x9a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3050:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3054:	f023 0301 	bic.w	r3, r3, #1
    3058:	e7cd      	b.n	2ff6 <z_arm_fault+0x102>
    305a:	bf00      	nop
    305c:	e000ed00 	.word	0xe000ed00
    3060:	00006e48 	.word	0x00006e48
    3064:	00006e28 	.word	0x00006e28
    3068:	00007579 	.word	0x00007579
    306c:	000075a4 	.word	0x000075a4
    3070:	000075bb 	.word	0x000075bb
    3074:	000075dc 	.word	0x000075dc
    3078:	000075fb 	.word	0x000075fb
    307c:	00007634 	.word	0x00007634
    3080:	0000761f 	.word	0x0000761f
    3084:	0000764d 	.word	0x0000764d

00003088 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3088:	4a02      	ldr	r2, [pc, #8]	; (3094 <z_arm_fault_init+0xc>)
    308a:	6953      	ldr	r3, [r2, #20]
    308c:	f043 0310 	orr.w	r3, r3, #16
    3090:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    3092:	4770      	bx	lr
    3094:	e000ed00 	.word	0xe000ed00

00003098 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3098:	4b04      	ldr	r3, [pc, #16]	; (30ac <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    309a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    309c:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    309e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    30a0:	d003      	beq.n	30aa <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    30a2:	4903      	ldr	r1, [pc, #12]	; (30b0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    30a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    30a8:	600a      	str	r2, [r1, #0]

000030aa <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    30aa:	4770      	bx	lr
	ldr r3, =_kernel
    30ac:	20000618 	.word	0x20000618
	ldr r1, =_SCS_ICSR
    30b0:	e000ed04 	.word	0xe000ed04

000030b4 <z_arm_interrupt_init>:
    30b4:	4804      	ldr	r0, [pc, #16]	; (30c8 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    30b6:	2300      	movs	r3, #0
    30b8:	2120      	movs	r1, #32
    30ba:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    30bc:	3301      	adds	r3, #1
    30be:	2b27      	cmp	r3, #39	; 0x27
    30c0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    30c4:	d1f9      	bne.n	30ba <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    30c6:	4770      	bx	lr
    30c8:	e000e100 	.word	0xe000e100

000030cc <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    30cc:	4b06      	ldr	r3, [pc, #24]	; (30e8 <z_impl_k_thread_abort+0x1c>)
    30ce:	689b      	ldr	r3, [r3, #8]
    30d0:	4283      	cmp	r3, r0
    30d2:	d107      	bne.n	30e4 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    30d4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    30d8:	b123      	cbz	r3, 30e4 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    30da:	4a04      	ldr	r2, [pc, #16]	; (30ec <z_impl_k_thread_abort+0x20>)
    30dc:	6853      	ldr	r3, [r2, #4]
    30de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    30e2:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    30e4:	f001 bf62 	b.w	4fac <z_thread_abort>
    30e8:	20000618 	.word	0x20000618
    30ec:	e000ed00 	.word	0xe000ed00

000030f0 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    30f0:	4b02      	ldr	r3, [pc, #8]	; (30fc <z_arm_configure_static_mpu_regions+0xc>)
    30f2:	4a03      	ldr	r2, [pc, #12]	; (3100 <z_arm_configure_static_mpu_regions+0x10>)
    30f4:	4803      	ldr	r0, [pc, #12]	; (3104 <z_arm_configure_static_mpu_regions+0x14>)
    30f6:	2101      	movs	r1, #1
    30f8:	f000 b8ac 	b.w	3254 <arm_core_mpu_configure_static_mpu_regions>
    30fc:	20010000 	.word	0x20010000
    3100:	20000000 	.word	0x20000000
    3104:	00006fd0 	.word	0x00006fd0

00003108 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    310a:	4f2a      	ldr	r7, [pc, #168]	; (31b4 <mpu_configure_regions+0xac>)
    310c:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    310e:	2100      	movs	r1, #0
    3110:	42b1      	cmp	r1, r6
    3112:	da14      	bge.n	313e <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    3114:	6844      	ldr	r4, [r0, #4]
    3116:	2c00      	cmp	r4, #0
    3118:	d048      	beq.n	31ac <mpu_configure_regions+0xa4>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    311a:	b1c3      	cbz	r3, 314e <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    311c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    3120:	ea14 0f0c 	tst.w	r4, ip
    3124:	d00d      	beq.n	3142 <mpu_configure_regions+0x3a>
    3126:	4a24      	ldr	r2, [pc, #144]	; (31b8 <mpu_configure_regions+0xb0>)
    3128:	4b24      	ldr	r3, [pc, #144]	; (31bc <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    312a:	4825      	ldr	r0, [pc, #148]	; (31c0 <mpu_configure_regions+0xb8>)
    312c:	1ad2      	subs	r2, r2, r3
    312e:	08d2      	lsrs	r2, r2, #3
    3130:	0192      	lsls	r2, r2, #6
    3132:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3136:	f002 fe8f 	bl	5e58 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    313a:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    313e:	4610      	mov	r0, r2
    3140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    3142:	2c1f      	cmp	r4, #31
    3144:	d9ef      	bls.n	3126 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    3146:	6805      	ldr	r5, [r0, #0]
		&&
    3148:	ea1c 0f05 	tst.w	ip, r5
    314c:	d1eb      	bne.n	3126 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    314e:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3150:	b2d5      	uxtb	r5, r2
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3152:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
    3156:	6802      	ldr	r2, [r0, #0]
	if (size <= 32U) {
    3158:	d916      	bls.n	3188 <mpu_configure_regions+0x80>
	if (size > (1UL << 31)) {
    315a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    315e:	d815      	bhi.n	318c <mpu_configure_regions+0x84>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    3160:	3c01      	subs	r4, #1
    3162:	fab4 f484 	clz	r4, r4
    3166:	f1c4 041f 	rsb	r4, r4, #31
    316a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    316c:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    316e:	ea4c 0404 	orr.w	r4, ip, r4
    3172:	d90d      	bls.n	3190 <mpu_configure_regions+0x88>
    3174:	4a10      	ldr	r2, [pc, #64]	; (31b8 <mpu_configure_regions+0xb0>)
    3176:	4b11      	ldr	r3, [pc, #68]	; (31bc <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3178:	4812      	ldr	r0, [pc, #72]	; (31c4 <mpu_configure_regions+0xbc>)
    317a:	1ad2      	subs	r2, r2, r3
    317c:	08d2      	lsrs	r2, r2, #3
    317e:	0192      	lsls	r2, r2, #6
    3180:	f042 0201 	orr.w	r2, r2, #1
    3184:	4629      	mov	r1, r5
    3186:	e7d6      	b.n	3136 <mpu_configure_regions+0x2e>
		return REGION_32B;
    3188:	2408      	movs	r4, #8
    318a:	e7ef      	b.n	316c <mpu_configure_regions+0x64>
		return REGION_4G;
    318c:	243e      	movs	r4, #62	; 0x3e
    318e:	e7ed      	b.n	316c <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3190:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    3194:	432a      	orrs	r2, r5
    3196:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    319a:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    319e:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    31a2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    31a6:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
		reg_index++;
    31aa:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    31ac:	3101      	adds	r1, #1
    31ae:	300c      	adds	r0, #12
    31b0:	e7ae      	b.n	3110 <mpu_configure_regions+0x8>
    31b2:	bf00      	nop
    31b4:	e000ed00 	.word	0xe000ed00
    31b8:	00006e40 	.word	0x00006e40
    31bc:	00006e28 	.word	0x00006e28
    31c0:	00007664 	.word	0x00007664
    31c4:	00007687 	.word	0x00007687

000031c8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    31c8:	4b04      	ldr	r3, [pc, #16]	; (31dc <arm_core_mpu_enable+0x14>)
    31ca:	2205      	movs	r2, #5
    31cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    31d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    31d4:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    31d8:	4770      	bx	lr
    31da:	bf00      	nop
    31dc:	e000ed00 	.word	0xe000ed00

000031e0 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    31e0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    31e4:	4b02      	ldr	r3, [pc, #8]	; (31f0 <arm_core_mpu_disable+0x10>)
    31e6:	2200      	movs	r2, #0
    31e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    31ec:	4770      	bx	lr
    31ee:	bf00      	nop
    31f0:	e000ed00 	.word	0xe000ed00

000031f4 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    31f4:	4914      	ldr	r1, [pc, #80]	; (3248 <arm_mpu_init+0x54>)
    31f6:	6808      	ldr	r0, [r1, #0]
    31f8:	2808      	cmp	r0, #8
{
    31fa:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    31fc:	d821      	bhi.n	3242 <arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    31fe:	f7ff ffef 	bl	31e0 <arm_core_mpu_disable>
	MPU->RNR = index;
    3202:	4c12      	ldr	r4, [pc, #72]	; (324c <arm_mpu_init+0x58>)
    3204:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3206:	2200      	movs	r2, #0
    3208:	4290      	cmp	r0, r2
    320a:	f101 010c 	add.w	r1, r1, #12
    320e:	d105      	bne.n	321c <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3210:	4b0f      	ldr	r3, [pc, #60]	; (3250 <arm_mpu_init+0x5c>)
    3212:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    3214:	f7ff ffd8 	bl	31c8 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    3218:	2000      	movs	r0, #0
}
    321a:	bd10      	pop	{r4, pc}
    321c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3220:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    3224:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    3228:	4313      	orrs	r3, r2
    322a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    322e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3232:	f851 3c04 	ldr.w	r3, [r1, #-4]
    3236:	f043 0301 	orr.w	r3, r3, #1
    323a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    323e:	3201      	adds	r2, #1
    3240:	e7e2      	b.n	3208 <arm_mpu_init+0x14>
		return -1;
    3242:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3246:	e7e8      	b.n	321a <arm_mpu_init+0x26>
    3248:	00006fdc 	.word	0x00006fdc
    324c:	e000ed00 	.word	0xe000ed00
    3250:	20000c96 	.word	0x20000c96

00003254 <arm_core_mpu_configure_static_mpu_regions>:
{
    3254:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3256:	4c03      	ldr	r4, [pc, #12]	; (3264 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3258:	2301      	movs	r3, #1
    325a:	7822      	ldrb	r2, [r4, #0]
    325c:	f7ff ff54 	bl	3108 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3260:	7020      	strb	r0, [r4, #0]
}
    3262:	bd10      	pop	{r4, pc}
    3264:	20000c96 	.word	0x20000c96

00003268 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3268:	4b01      	ldr	r3, [pc, #4]	; (3270 <__stdout_hook_install+0x8>)
    326a:	6018      	str	r0, [r3, #0]
}
    326c:	4770      	bx	lr
    326e:	bf00      	nop
    3270:	20000014 	.word	0x20000014

00003274 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    3274:	f04f 0320 	mov.w	r3, #32
    3278:	f3ef 8211 	mrs	r2, BASEPRI
    327c:	f383 8811 	msr	BASEPRI, r3
    3280:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3284:	4906      	ldr	r1, [pc, #24]	; (32a0 <nordicsemi_nrf52_init+0x2c>)
    3286:	2301      	movs	r3, #1
    3288:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    328c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    3290:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    3294:	f382 8811 	msr	BASEPRI, r2
    3298:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    329c:	2000      	movs	r0, #0
    329e:	4770      	bx	lr
    32a0:	4001e000 	.word	0x4001e000

000032a4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    32a4:	b120      	cbz	r0, 32b0 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    32a6:	4b03      	ldr	r3, [pc, #12]	; (32b4 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    32a8:	0180      	lsls	r0, r0, #6
    32aa:	f043 0301 	orr.w	r3, r3, #1
    32ae:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    32b0:	4770      	bx	lr
    32b2:	bf00      	nop
    32b4:	00006ec0 	.word	0x00006ec0

000032b8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    32b8:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    32ba:	4b09      	ldr	r3, [pc, #36]	; (32e0 <gpio_nrfx_init+0x28>)
    32bc:	781a      	ldrb	r2, [r3, #0]
    32be:	b96a      	cbnz	r2, 32dc <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    32c0:	2101      	movs	r1, #1
    32c2:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    32c4:	2006      	movs	r0, #6
    32c6:	2105      	movs	r1, #5
    32c8:	f7ff fbd8 	bl	2a7c <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    32cc:	2006      	movs	r0, #6
    32ce:	f7ff fbb7 	bl	2a40 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    32d2:	4b04      	ldr	r3, [pc, #16]	; (32e4 <gpio_nrfx_init+0x2c>)
    32d4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    32d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    32dc:	2000      	movs	r0, #0
    32de:	bd08      	pop	{r3, pc}
    32e0:	20000c97 	.word	0x20000c97
    32e4:	40006000 	.word	0x40006000

000032e8 <gpio_nrfx_pin_interrupt_configure>:
{
    32e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    32ea:	4617      	mov	r7, r2
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    32ec:	6842      	ldr	r2, [r0, #4]
	return port->data;
    32ee:	6906      	ldr	r6, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    32f0:	7a12      	ldrb	r2, [r2, #8]
    32f2:	f001 041f 	and.w	r4, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    32f6:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
{
    32fa:	460d      	mov	r5, r1
    32fc:	ea44 1442 	orr.w	r4, r4, r2, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    3300:	d10c      	bne.n	331c <gpio_nrfx_pin_interrupt_configure+0x34>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    3302:	f004 021f 	and.w	r2, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3306:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    330a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    330e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    3312:	07d0      	lsls	r0, r2, #31
    3314:	d507      	bpl.n	3326 <gpio_nrfx_pin_interrupt_configure+0x3e>
		return -ENOTSUP;
    3316:	f06f 0022 	mvn.w	r0, #34	; 0x22
    331a:	e09a      	b.n	3452 <gpio_nrfx_pin_interrupt_configure+0x16a>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    331c:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
    3320:	68f1      	ldr	r1, [r6, #12]
    3322:	f000 8098 	beq.w	3456 <gpio_nrfx_pin_interrupt_configure+0x16e>
    3326:	68f2      	ldr	r2, [r6, #12]
    3328:	2101      	movs	r1, #1
    332a:	40a9      	lsls	r1, r5
    332c:	4311      	orrs	r1, r2
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    332e:	6972      	ldr	r2, [r6, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    3330:	60f1      	str	r1, [r6, #12]
    3332:	2101      	movs	r1, #1
    3334:	40a9      	lsls	r1, r5
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    3336:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
    333a:	bf0c      	ite	eq
    333c:	430a      	orreq	r2, r1
    333e:	438a      	bicne	r2, r1
    3340:	6172      	str	r2, [r6, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    3342:	69b2      	ldr	r2, [r6, #24]
    3344:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    3348:	bf0c      	ite	eq
    334a:	430a      	orreq	r2, r1
    334c:	438a      	bicne	r2, r1
    334e:	61b2      	str	r2, [r6, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    3350:	6932      	ldr	r2, [r6, #16]
    3352:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    3356:	bf0c      	ite	eq
    3358:	4311      	orreq	r1, r2
    335a:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    335e:	4a4a      	ldr	r2, [pc, #296]	; (3488 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
    3360:	6131      	str	r1, [r6, #16]
    3362:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3366:	2000      	movs	r0, #0
    3368:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    336a:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    336e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    3372:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    3376:	428c      	cmp	r4, r1
    3378:	d172      	bne.n	3460 <gpio_nrfx_pin_interrupt_configure+0x178>
		    && (intenset & BIT(i))) {
    337a:	fa23 f100 	lsr.w	r1, r3, r0
    337e:	07c9      	lsls	r1, r1, #31
    3380:	d56e      	bpl.n	3460 <gpio_nrfx_pin_interrupt_configure+0x178>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    3382:	0083      	lsls	r3, r0, #2
    3384:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3388:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    338c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    3390:	f021 0101 	bic.w	r1, r1, #1
    3394:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    3398:	2301      	movs	r3, #1
    339a:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    339c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    33a0:	b2c0      	uxtb	r0, r0
    33a2:	f000 feab 	bl	40fc <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    33a6:	4620      	mov	r0, r4
    33a8:	2100      	movs	r1, #0
    33aa:	f003 f9df 	bl	676c <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    33ae:	68f0      	ldr	r0, [r6, #12]
    33b0:	40e8      	lsrs	r0, r5
    33b2:	f010 0001 	ands.w	r0, r0, #1
    33b6:	d04c      	beq.n	3452 <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
    33b8:	6970      	ldr	r0, [r6, #20]
    33ba:	40e8      	lsrs	r0, r5
    33bc:	f010 0201 	ands.w	r2, r0, #1
    33c0:	d055      	beq.n	346e <gpio_nrfx_pin_interrupt_configure+0x186>
				if (data->double_edge & BIT(pin)) {
    33c2:	69b3      	ldr	r3, [r6, #24]
    33c4:	40eb      	lsrs	r3, r5
    33c6:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    33c8:	bf5f      	itttt	pl
    33ca:	6931      	ldrpl	r1, [r6, #16]
    33cc:	fa21 f505 	lsrpl.w	r5, r1, r5
    33d0:	f005 0501 	andpl.w	r5, r5, #1
    33d4:	f1c5 0502 	rsbpl	r5, r5, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    33d8:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    33dc:	bf54      	ite	pl
    33de:	b2ed      	uxtbpl	r5, r5
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    33e0:	2503      	movmi	r5, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    33e2:	f000 feab 	bl	413c <nrfx_gpiote_channel_alloc>
    33e6:	4b29      	ldr	r3, [pc, #164]	; (348c <gpio_nrfx_pin_interrupt_configure+0x1a4>)
    33e8:	4298      	cmp	r0, r3
    33ea:	d13d      	bne.n	3468 <gpio_nrfx_pin_interrupt_configure+0x180>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    33ec:	f89d 2007 	ldrb.w	r2, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    33f0:	0093      	lsls	r3, r2, #2
    33f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    33f6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    33fa:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    33fc:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    3400:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
    3404:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    3408:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    340c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    3410:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    3414:	430c      	orrs	r4, r1
    3416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    341a:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    341e:	0093      	lsls	r3, r2, #2
    3420:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3424:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3428:	2000      	movs	r0, #0
    342a:	6018      	str	r0, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
    342c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    3430:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3432:	008b      	lsls	r3, r1, #2
    3434:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3438:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    343c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3440:	f042 0201 	orr.w	r2, r2, #1
    3444:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
    3448:	4a0f      	ldr	r2, [pc, #60]	; (3488 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    344a:	2301      	movs	r3, #1
    344c:	408b      	lsls	r3, r1
    344e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3452:	b003      	add	sp, #12
    3454:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    3456:	2201      	movs	r2, #1
    3458:	40aa      	lsls	r2, r5
    345a:	ea21 0102 	bic.w	r1, r1, r2
    345e:	e766      	b.n	332e <gpio_nrfx_pin_interrupt_configure+0x46>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3460:	3001      	adds	r0, #1
    3462:	2808      	cmp	r0, #8
    3464:	d181      	bne.n	336a <gpio_nrfx_pin_interrupt_configure+0x82>
    3466:	e79e      	b.n	33a6 <gpio_nrfx_pin_interrupt_configure+0xbe>
		return -ENODEV;
    3468:	f06f 0012 	mvn.w	r0, #18
    346c:	e7f1      	b.n	3452 <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    346e:	6931      	ldr	r1, [r6, #16]
    3470:	40e9      	lsrs	r1, r5
    3472:	f001 0101 	and.w	r1, r1, #1
    3476:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    347a:	4620      	mov	r0, r4
    347c:	b2c9      	uxtb	r1, r1
    347e:	f003 f975 	bl	676c <nrf_gpio_cfg_sense_set>
	int res = 0;
    3482:	4610      	mov	r0, r2
    3484:	e7e5      	b.n	3452 <gpio_nrfx_pin_interrupt_configure+0x16a>
    3486:	bf00      	nop
    3488:	40006000 	.word	0x40006000
    348c:	0bad0000 	.word	0x0bad0000

00003490 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3490:	4b2a      	ldr	r3, [pc, #168]	; (353c <gpio_nrfx_config+0xac>)
{
    3492:	b570      	push	{r4, r5, r6, lr}
	return port->config;
    3494:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3496:	482a      	ldr	r0, [pc, #168]	; (3540 <gpio_nrfx_config+0xb0>)
    3498:	4013      	ands	r3, r2
    349a:	4283      	cmp	r3, r0
    349c:	d03e      	beq.n	351c <gpio_nrfx_config+0x8c>
    349e:	d80d      	bhi.n	34bc <gpio_nrfx_config+0x2c>
    34a0:	2b06      	cmp	r3, #6
    34a2:	d015      	beq.n	34d0 <gpio_nrfx_config+0x40>
    34a4:	d805      	bhi.n	34b2 <gpio_nrfx_config+0x22>
    34a6:	b19b      	cbz	r3, 34d0 <gpio_nrfx_config+0x40>
    34a8:	2b02      	cmp	r3, #2
    34aa:	d039      	beq.n	3520 <gpio_nrfx_config+0x90>
    34ac:	f06f 0015 	mvn.w	r0, #21
    34b0:	e033      	b.n	351a <gpio_nrfx_config+0x8a>
    34b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    34b6:	d1f9      	bne.n	34ac <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    34b8:	2301      	movs	r3, #1
    34ba:	e009      	b.n	34d0 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    34bc:	4821      	ldr	r0, [pc, #132]	; (3544 <gpio_nrfx_config+0xb4>)
    34be:	4283      	cmp	r3, r0
    34c0:	d030      	beq.n	3524 <gpio_nrfx_config+0x94>
    34c2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    34c6:	d02f      	beq.n	3528 <gpio_nrfx_config+0x98>
    34c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    34cc:	d1ee      	bne.n	34ac <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    34ce:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    34d0:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    34d2:	bf54      	ite	pl
    34d4:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    34d8:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    34da:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    34de:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
    34e2:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    34e6:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    34ea:	d007      	beq.n	34fc <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    34ec:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    34f0:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    34f2:	d01b      	beq.n	352c <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
    34f4:	2201      	movs	r2, #1
    34f6:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    34f8:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    34fc:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
    *p_pin = pin_number & 0x1F;
    3500:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    3504:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3508:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    350c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    3510:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3514:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    3518:	2000      	movs	r0, #0
}
    351a:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
    351c:	2307      	movs	r3, #7
    351e:	e7d7      	b.n	34d0 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    3520:	2304      	movs	r3, #4
    3522:	e7d5      	b.n	34d0 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    3524:	2305      	movs	r3, #5
    3526:	e7d3      	b.n	34d0 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    3528:	2303      	movs	r3, #3
    352a:	e7d1      	b.n	34d0 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    352c:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    352e:	bf42      	ittt	mi
    3530:	2201      	movmi	r2, #1
    3532:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    3534:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
    3538:	e7e0      	b.n	34fc <gpio_nrfx_config+0x6c>
    353a:	bf00      	nop
    353c:	00f00006 	.word	0x00f00006
    3540:	00100006 	.word	0x00100006
    3544:	00400002 	.word	0x00400002

00003548 <gpiote_event_handler>:
{
    3548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    354c:	4b41      	ldr	r3, [pc, #260]	; (3654 <gpiote_event_handler+0x10c>)
    354e:	f8d3 517c 	ldr.w	r5, [r3, #380]	; 0x17c
	if (port_event) {
    3552:	2d00      	cmp	r5, #0
    3554:	d059      	beq.n	360a <gpiote_event_handler+0xc2>
	uint32_t out = data->pin_int_en;
    3556:	4b40      	ldr	r3, [pc, #256]	; (3658 <gpiote_event_handler+0x110>)
    return p_reg->IN;
    3558:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
	out &= ~data->trig_edge & ~data->double_edge;
    355c:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
	uint32_t out = data->pin_int_en;
    3560:	68df      	ldr	r7, [r3, #12]
    3562:	f8d9 4510 	ldr.w	r4, [r9, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    3566:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
    3568:	430a      	orrs	r2, r1
    356a:	ea27 0702 	bic.w	r7, r7, r2
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    356e:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
    3570:	ea27 0404 	bic.w	r4, r7, r4
	uint32_t check_pins = level_pins;
    3574:	463a      	mov	r2, r7
	uint32_t bit = 1U << pin;
    3576:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    3578:	f04f 0800 	mov.w	r8, #0
	while (check_pins) {
    357c:	bb82      	cbnz	r2, 35e0 <gpiote_event_handler+0x98>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    357e:	4b35      	ldr	r3, [pc, #212]	; (3654 <gpiote_event_handler+0x10c>)
    3580:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    3584:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    3588:	4a34      	ldr	r2, [pc, #208]	; (365c <gpiote_event_handler+0x114>)
    return p_reg->INTENSET & mask;
    358a:	4832      	ldr	r0, [pc, #200]	; (3654 <gpiote_event_handler+0x10c>)
    358c:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    358e:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3590:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    3592:	f8d0 1304 	ldr.w	r1, [r0, #772]	; 0x304
    3596:	fa06 fc03 	lsl.w	ip, r6, r3
    359a:	ea1c 0f01 	tst.w	ip, r1
    359e:	d00c      	beq.n	35ba <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    35a0:	6811      	ldr	r1, [r2, #0]
    35a2:	b151      	cbz	r1, 35ba <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    35a4:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    35a8:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    35ac:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    35ae:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    35b2:	fa06 f101 	lsl.w	r1, r6, r1
    35b6:	430c      	orrs	r4, r1
    35b8:	6811      	ldr	r1, [r2, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    35ba:	3301      	adds	r3, #1
    35bc:	2b08      	cmp	r3, #8
    35be:	f102 0204 	add.w	r2, r2, #4
    35c2:	d1e6      	bne.n	3592 <gpiote_event_handler+0x4a>
	if (fired_triggers[0]) {
    35c4:	bb1c      	cbnz	r4, 360e <gpiote_event_handler+0xc6>
	if (port_event) {
    35c6:	b14d      	cbz	r5, 35dc <gpiote_event_handler+0x94>
	uint32_t out = data->pin_int_en;
    35c8:	4e23      	ldr	r6, [pc, #140]	; (3658 <gpiote_event_handler+0x110>)
	out &= ~data->trig_edge & ~data->double_edge;
    35ca:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
	uint32_t out = data->pin_int_en;
    35ce:	68f2      	ldr	r2, [r6, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    35d0:	430b      	orrs	r3, r1
    35d2:	ea22 0203 	bic.w	r2, r2, r3
	uint32_t bit = 1U << pin;
    35d6:	2401      	movs	r4, #1
	uint32_t pin = 0U;
    35d8:	2500      	movs	r5, #0
	while (level_pins) {
    35da:	bb4a      	cbnz	r2, 3630 <gpiote_event_handler+0xe8>
}
    35dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (check_pins & bit) {
    35e0:	4216      	tst	r6, r2
    35e2:	d00e      	beq.n	3602 <gpiote_event_handler+0xba>
			if (!(level_pins & bit)) {
    35e4:	423e      	tst	r6, r7
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    35e6:	f008 001f 	and.w	r0, r8, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    35ea:	bf08      	it	eq
    35ec:	f500 73e0 	addeq.w	r3, r0, #448	; 0x1c0
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    35f0:	f04f 0100 	mov.w	r1, #0
    35f4:	bf08      	it	eq
    35f6:	f859 3023 	ldreq.w	r3, [r9, r3, lsl #2]
    35fa:	f003 f8b7 	bl	676c <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
    35fe:	ea22 0206 	bic.w	r2, r2, r6
		++pin;
    3602:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
    3606:	0076      	lsls	r6, r6, #1
    3608:	e7b8      	b.n	357c <gpiote_event_handler+0x34>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    360a:	462c      	mov	r4, r5
    360c:	e7bc      	b.n	3588 <gpiote_event_handler+0x40>
	gpio_fire_callbacks(list, port, pins);
    360e:	4b12      	ldr	r3, [pc, #72]	; (3658 <gpiote_event_handler+0x110>)
    3610:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3612:	2900      	cmp	r1, #0
    3614:	d0d7      	beq.n	35c6 <gpiote_event_handler+0x7e>
    3616:	680e      	ldr	r6, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    3618:	4f11      	ldr	r7, [pc, #68]	; (3660 <gpiote_event_handler+0x118>)
		if (cb->pin_mask & pins) {
    361a:	688a      	ldr	r2, [r1, #8]
    361c:	4022      	ands	r2, r4
    361e:	d002      	beq.n	3626 <gpiote_event_handler+0xde>
			cb->handler(port, cb, cb->pin_mask & pins);
    3620:	684b      	ldr	r3, [r1, #4]
    3622:	4638      	mov	r0, r7
    3624:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3626:	2e00      	cmp	r6, #0
    3628:	d0cd      	beq.n	35c6 <gpiote_event_handler+0x7e>
    362a:	4631      	mov	r1, r6
    362c:	6836      	ldr	r6, [r6, #0]
    362e:	e7f4      	b.n	361a <gpiote_event_handler+0xd2>
		if (level_pins & bit) {
    3630:	4214      	tst	r4, r2
    3632:	d00c      	beq.n	364e <gpiote_event_handler+0x106>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    3634:	6931      	ldr	r1, [r6, #16]
    3636:	40e9      	lsrs	r1, r5
    3638:	f001 0101 	and.w	r1, r1, #1
    363c:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    3640:	b2c9      	uxtb	r1, r1
    3642:	f005 001f 	and.w	r0, r5, #31
    3646:	f003 f891 	bl	676c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    364a:	ea22 0204 	bic.w	r2, r2, r4
		++pin;
    364e:	3501      	adds	r5, #1
		bit <<= 1;
    3650:	0064      	lsls	r4, r4, #1
    3652:	e7c2      	b.n	35da <gpiote_event_handler+0x92>
    3654:	40006000 	.word	0x40006000
    3658:	20000570 	.word	0x20000570
    365c:	40006100 	.word	0x40006100
    3660:	200000ec 	.word	0x200000ec

00003664 <spi_1_init>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEVICE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
    3664:	b538      	push	{r3, r4, r5, lr}
    3666:	4604      	mov	r4, r0
    3668:	2200      	movs	r2, #0
    366a:	2101      	movs	r1, #1
    366c:	2004      	movs	r0, #4
    366e:	f7ff fa05 	bl	2a7c <z_arm_irq_priority_set>
	return dev->data;
    3672:	6923      	ldr	r3, [r4, #16]
	return dev->config;
    3674:	6860      	ldr	r0, [r4, #4]
	dev_data->dev = dev;
    3676:	64dc      	str	r4, [r3, #76]	; 0x4c
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
    3678:	4a0d      	ldr	r2, [pc, #52]	; (36b0 <spi_1_init+0x4c>)
    367a:	f100 0108 	add.w	r1, r0, #8
    367e:	f000 fd95 	bl	41ac <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
    3682:	4b0c      	ldr	r3, [pc, #48]	; (36b4 <spi_1_init+0x50>)
    3684:	4298      	cmp	r0, r3
    3686:	d011      	beq.n	36ac <spi_1_init+0x48>
    3688:	4b0b      	ldr	r3, [pc, #44]	; (36b8 <spi_1_init+0x54>)
    368a:	4a0c      	ldr	r2, [pc, #48]	; (36bc <spi_1_init+0x58>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
    368c:	6821      	ldr	r1, [r4, #0]
    368e:	480c      	ldr	r0, [pc, #48]	; (36c0 <spi_1_init+0x5c>)
    3690:	1ad2      	subs	r2, r2, r3
    3692:	08d2      	lsrs	r2, r2, #3
    3694:	0192      	lsls	r2, r2, #6
    3696:	f042 0201 	orr.w	r2, r2, #1
    369a:	f002 fbdd 	bl	5e58 <log_1>
		return -EBUSY;
    369e:	f06f 050f 	mvn.w	r5, #15
SPI_NRFX_SPI_DEVICE(1);
    36a2:	6920      	ldr	r0, [r4, #16]
    36a4:	f003 f8f6 	bl	6894 <spi_context_unlock_unconditionally>
    36a8:	4628      	mov	r0, r5
    36aa:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
    36ac:	2500      	movs	r5, #0
    36ae:	e7f8      	b.n	36a2 <spi_1_init+0x3e>
    36b0:	00003741 	.word	0x00003741
    36b4:	0bad0000 	.word	0x0bad0000
    36b8:	00006e28 	.word	0x00006e28
    36bc:	00006e60 	.word	0x00006e60
    36c0:	000076c0 	.word	0x000076c0

000036c4 <transfer_next_chunk>:
{
    36c4:	b530      	push	{r4, r5, lr}
	return dev->data;
    36c6:	6905      	ldr	r5, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    36c8:	6c2a      	ldr	r2, [r5, #64]	; 0x40
		return ctx->rx_len;
    36ca:	6cab      	ldr	r3, [r5, #72]	; 0x48
{
    36cc:	b085      	sub	sp, #20
	if (!ctx->tx_len) {
    36ce:	b982      	cbnz	r2, 36f2 <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
    36d0:	bb73      	cbnz	r3, 3730 <transfer_next_chunk+0x6c>
	int error = 0;
    36d2:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
    36d4:	2200      	movs	r2, #0
    36d6:	4611      	mov	r1, r2
    36d8:	4628      	mov	r0, r5
    36da:	f003 f8b6 	bl	684a <_spi_context_cs_control>
	ctx->sync_status = status;
    36de:	62ac      	str	r4, [r5, #40]	; 0x28
	z_impl_k_sem_give(sem);
    36e0:	f105 0018 	add.w	r0, r5, #24
    36e4:	f001 fcb4 	bl	5050 <z_impl_k_sem_give>
	dev_data->busy = false;
    36e8:	2300      	movs	r3, #0
    36ea:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
}
    36ee:	b005      	add	sp, #20
    36f0:	bd30      	pop	{r4, r5, pc}
	} else if (!ctx->rx_len) {
    36f2:	4611      	mov	r1, r2
    36f4:	b113      	cbz	r3, 36fc <transfer_next_chunk+0x38>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    36f6:	429a      	cmp	r2, r3
    36f8:	bf28      	it	cs
    36fa:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
    36fc:	6bec      	ldr	r4, [r5, #60]	; 0x3c
		dev_data->chunk_len = chunk_len;
    36fe:	6529      	str	r1, [r5, #80]	; 0x50
		xfer.p_tx_buffer = ctx->tx_buf;
    3700:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
    3702:	b1bc      	cbz	r4, 3734 <transfer_next_chunk+0x70>
    3704:	2a00      	cmp	r2, #0
    3706:	bf18      	it	ne
    3708:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    370a:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    370c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    370e:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    3710:	b192      	cbz	r2, 3738 <transfer_next_chunk+0x74>
    3712:	2b00      	cmp	r3, #0
    3714:	bf18      	it	ne
    3716:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
    3718:	6840      	ldr	r0, [r0, #4]
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    371a:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
    371c:	2200      	movs	r2, #0
    371e:	4669      	mov	r1, sp
    3720:	f000 fde8 	bl	42f4 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
    3724:	4b05      	ldr	r3, [pc, #20]	; (373c <transfer_next_chunk+0x78>)
    3726:	4298      	cmp	r0, r3
    3728:	d0e1      	beq.n	36ee <transfer_next_chunk+0x2a>
		error = -EIO;
    372a:	f06f 0404 	mvn.w	r4, #4
    372e:	e7d1      	b.n	36d4 <transfer_next_chunk+0x10>
    3730:	4619      	mov	r1, r3
    3732:	e7e3      	b.n	36fc <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    3734:	4622      	mov	r2, r4
    3736:	e7e8      	b.n	370a <transfer_next_chunk+0x46>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    3738:	4613      	mov	r3, r2
    373a:	e7ed      	b.n	3718 <transfer_next_chunk+0x54>
    373c:	0bad0000 	.word	0x0bad0000

00003740 <event_handler>:
{
    3740:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    3742:	7803      	ldrb	r3, [r0, #0]
{
    3744:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    3746:	2b00      	cmp	r3, #0
    3748:	d14e      	bne.n	37e8 <event_handler+0xa8>
	if (!ctx->tx_len) {
    374a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    374c:	b163      	cbz	r3, 3768 <event_handler+0x28>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    374e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
	if (len > ctx->tx_len) {
    3750:	429a      	cmp	r2, r3
    3752:	d91d      	bls.n	3790 <event_handler+0x50>
    3754:	4925      	ldr	r1, [pc, #148]	; (37ec <event_handler+0xac>)
    3756:	4b26      	ldr	r3, [pc, #152]	; (37f0 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
    3758:	4826      	ldr	r0, [pc, #152]	; (37f4 <event_handler+0xb4>)
    375a:	1ac9      	subs	r1, r1, r3
    375c:	08c9      	lsrs	r1, r1, #3
    375e:	0189      	lsls	r1, r1, #6
    3760:	f041 0101 	orr.w	r1, r1, #1
    3764:	f002 fb6b 	bl	5e3e <log_0>
	if (!ctx->rx_len) {
    3768:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    376a:	b163      	cbz	r3, 3786 <event_handler+0x46>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    376c:	6d22      	ldr	r2, [r4, #80]	; 0x50
	if (len > ctx->rx_len) {
    376e:	429a      	cmp	r2, r3
    3770:	d924      	bls.n	37bc <event_handler+0x7c>
    3772:	491e      	ldr	r1, [pc, #120]	; (37ec <event_handler+0xac>)
    3774:	4b1e      	ldr	r3, [pc, #120]	; (37f0 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
    3776:	481f      	ldr	r0, [pc, #124]	; (37f4 <event_handler+0xb4>)
    3778:	1ac9      	subs	r1, r1, r3
    377a:	08c9      	lsrs	r1, r1, #3
    377c:	0189      	lsls	r1, r1, #6
    377e:	f041 0101 	orr.w	r1, r1, #1
    3782:	f002 fb5c 	bl	5e3e <log_0>
		transfer_next_chunk(dev_data->dev);
    3786:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
}
    3788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    378c:	f7ff bf9a 	b.w	36c4 <transfer_next_chunk>
	ctx->tx_len -= len;
    3790:	1a9b      	subs	r3, r3, r2
    3792:	640b      	str	r3, [r1, #64]	; 0x40
	if (!ctx->tx_len) {
    3794:	b963      	cbnz	r3, 37b0 <event_handler+0x70>
		ctx->tx_count--;
    3796:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    3798:	3b01      	subs	r3, #1
    379a:	630b      	str	r3, [r1, #48]	; 0x30
		if (ctx->tx_count) {
    379c:	b163      	cbz	r3, 37b8 <event_handler+0x78>
			ctx->current_tx++;
    379e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    37a0:	f103 0208 	add.w	r2, r3, #8
    37a4:	62ca      	str	r2, [r1, #44]	; 0x2c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    37a6:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
    37a8:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    37aa:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_len = ctx->current_tx->len / dfs;
    37ac:	640b      	str	r3, [r1, #64]	; 0x40
    37ae:	e7db      	b.n	3768 <event_handler+0x28>
	} else if (ctx->tx_buf) {
    37b0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    37b2:	2b00      	cmp	r3, #0
    37b4:	d0d8      	beq.n	3768 <event_handler+0x28>
		ctx->tx_buf += dfs * len;
    37b6:	4413      	add	r3, r2
    37b8:	63e3      	str	r3, [r4, #60]	; 0x3c
    37ba:	e7d5      	b.n	3768 <event_handler+0x28>
	ctx->rx_len -= len;
    37bc:	1a9b      	subs	r3, r3, r2
    37be:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->rx_len) {
    37c0:	b963      	cbnz	r3, 37dc <event_handler+0x9c>
		ctx->rx_count--;
    37c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    37c4:	3b01      	subs	r3, #1
    37c6:	63a3      	str	r3, [r4, #56]	; 0x38
		if (ctx->rx_count) {
    37c8:	b163      	cbz	r3, 37e4 <event_handler+0xa4>
			ctx->current_rx++;
    37ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
    37cc:	f103 0208 	add.w	r2, r3, #8
    37d0:	6362      	str	r2, [r4, #52]	; 0x34
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    37d2:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
    37d4:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    37d6:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_len = ctx->current_rx->len / dfs;
    37d8:	64a3      	str	r3, [r4, #72]	; 0x48
    37da:	e7d4      	b.n	3786 <event_handler+0x46>
	} else if (ctx->rx_buf) {
    37dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
    37de:	2b00      	cmp	r3, #0
    37e0:	d0d1      	beq.n	3786 <event_handler+0x46>
		ctx->rx_buf += dfs * len;
    37e2:	4413      	add	r3, r2
    37e4:	6463      	str	r3, [r4, #68]	; 0x44
    37e6:	e7ce      	b.n	3786 <event_handler+0x46>
}
    37e8:	bd10      	pop	{r4, pc}
    37ea:	bf00      	nop
    37ec:	00006e60 	.word	0x00006e60
    37f0:	00006e28 	.word	0x00006e28
    37f4:	000076e0 	.word	0x000076e0

000037f8 <spi_nrfx_transceive>:
{
    37f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37fc:	461e      	mov	r6, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    37fe:	888b      	ldrh	r3, [r1, #4]
	return dev->data;
    3800:	6904      	ldr	r4, [r0, #16]
    3802:	045b      	lsls	r3, r3, #17
{
    3804:	4680      	mov	r8, r0
    3806:	460d      	mov	r5, r1
    3808:	4617      	mov	r7, r2
    380a:	d42d      	bmi.n	3868 <spi_nrfx_transceive+0x70>
	return z_impl_k_sem_take(sem, timeout);
    380c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3814:	f104 0008 	add.w	r0, r4, #8
    3818:	f001 fc3a 	bl	5090 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    381c:	6065      	str	r5, [r4, #4]
	return dev->data;
    381e:	f8d8 2010 	ldr.w	r2, [r8, #16]
	if (spi_context_configured(ctx, spi_cfg)) {
    3822:	6813      	ldr	r3, [r2, #0]
    3824:	429d      	cmp	r5, r3
    3826:	f000 80b2 	beq.w	398e <spi_nrfx_transceive+0x196>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    382a:	88ab      	ldrh	r3, [r5, #4]
    382c:	07d8      	lsls	r0, r3, #31
    382e:	d522      	bpl.n	3876 <spi_nrfx_transceive+0x7e>
    3830:	4a83      	ldr	r2, [pc, #524]	; (3a40 <spi_nrfx_transceive+0x248>)
    3832:	4b84      	ldr	r3, [pc, #528]	; (3a44 <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Slave mode is not supported on %s",
    3834:	f8d8 1000 	ldr.w	r1, [r8]
    3838:	4883      	ldr	r0, [pc, #524]	; (3a48 <spi_nrfx_transceive+0x250>)
    383a:	1ad2      	subs	r2, r2, r3
    383c:	08d2      	lsrs	r2, r2, #3
    383e:	0192      	lsls	r2, r2, #6
    3840:	f042 0201 	orr.w	r2, r2, #1
    3844:	f002 fb08 	bl	5e58 <log_1>
		return -EINVAL;
    3848:	f06f 0515 	mvn.w	r5, #21
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    384c:	6823      	ldr	r3, [r4, #0]
    384e:	889b      	ldrh	r3, [r3, #4]
    3850:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
    3854:	d104      	bne.n	3860 <spi_nrfx_transceive+0x68>
		ctx->owner = NULL;
    3856:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    3858:	f104 0008 	add.w	r0, r4, #8
    385c:	f001 fbf8 	bl	5050 <z_impl_k_sem_give>
}
    3860:	4628      	mov	r0, r5
    3862:	b003      	add	sp, #12
    3864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    3868:	6923      	ldr	r3, [r4, #16]
    386a:	2b00      	cmp	r3, #0
    386c:	d1ce      	bne.n	380c <spi_nrfx_transceive+0x14>
		(k_sem_count_get(&ctx->lock) == 0) &&
    386e:	6863      	ldr	r3, [r4, #4]
    3870:	4299      	cmp	r1, r3
    3872:	d1cb      	bne.n	380c <spi_nrfx_transceive+0x14>
    3874:	e7d3      	b.n	381e <spi_nrfx_transceive+0x26>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    3876:	0719      	lsls	r1, r3, #28
    3878:	d50a      	bpl.n	3890 <spi_nrfx_transceive+0x98>
    387a:	4971      	ldr	r1, [pc, #452]	; (3a40 <spi_nrfx_transceive+0x248>)
    387c:	4b71      	ldr	r3, [pc, #452]	; (3a44 <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Loopback mode is not supported");
    387e:	4873      	ldr	r0, [pc, #460]	; (3a4c <spi_nrfx_transceive+0x254>)
    3880:	1ac9      	subs	r1, r1, r3
    3882:	08c9      	lsrs	r1, r1, #3
    3884:	0189      	lsls	r1, r1, #6
    3886:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Word sizes other than 8 bits"
    388a:	f002 fad8 	bl	5e3e <log_0>
    388e:	e7db      	b.n	3848 <spi_nrfx_transceive+0x50>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
    3890:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
    3894:	d008      	beq.n	38a8 <spi_nrfx_transceive+0xb0>
    3896:	496a      	ldr	r1, [pc, #424]	; (3a40 <spi_nrfx_transceive+0x248>)
    3898:	4b6a      	ldr	r3, [pc, #424]	; (3a44 <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Only single line mode is supported");
    389a:	486d      	ldr	r0, [pc, #436]	; (3a50 <spi_nrfx_transceive+0x258>)
    389c:	1ac9      	subs	r1, r1, r3
    389e:	08c9      	lsrs	r1, r1, #3
    38a0:	0189      	lsls	r1, r1, #6
    38a2:	f041 0101 	orr.w	r1, r1, #1
    38a6:	e7f0      	b.n	388a <spi_nrfx_transceive+0x92>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    38a8:	f3c3 1345 	ubfx	r3, r3, #5, #6
    38ac:	2b08      	cmp	r3, #8
    38ae:	d008      	beq.n	38c2 <spi_nrfx_transceive+0xca>
    38b0:	4963      	ldr	r1, [pc, #396]	; (3a40 <spi_nrfx_transceive+0x248>)
    38b2:	4b64      	ldr	r3, [pc, #400]	; (3a44 <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Word sizes other than 8 bits"
    38b4:	4867      	ldr	r0, [pc, #412]	; (3a54 <spi_nrfx_transceive+0x25c>)
    38b6:	1ac9      	subs	r1, r1, r3
    38b8:	08c9      	lsrs	r1, r1, #3
    38ba:	0189      	lsls	r1, r1, #6
    38bc:	f041 0101 	orr.w	r1, r1, #1
    38c0:	e7e3      	b.n	388a <spi_nrfx_transceive+0x92>
	if (spi_cfg->frequency < 125000) {
    38c2:	6829      	ldr	r1, [r5, #0]
    38c4:	4b64      	ldr	r3, [pc, #400]	; (3a58 <spi_nrfx_transceive+0x260>)
    38c6:	4299      	cmp	r1, r3
    38c8:	d808      	bhi.n	38dc <spi_nrfx_transceive+0xe4>
    38ca:	495d      	ldr	r1, [pc, #372]	; (3a40 <spi_nrfx_transceive+0x248>)
    38cc:	4b5d      	ldr	r3, [pc, #372]	; (3a44 <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    38ce:	4863      	ldr	r0, [pc, #396]	; (3a5c <spi_nrfx_transceive+0x264>)
    38d0:	1ac9      	subs	r1, r1, r3
    38d2:	08c9      	lsrs	r1, r1, #3
    38d4:	0189      	lsls	r1, r1, #6
    38d6:	f041 0101 	orr.w	r1, r1, #1
    38da:	e7d6      	b.n	388a <spi_nrfx_transceive+0x92>
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
    38dc:	68ab      	ldr	r3, [r5, #8]
	return dev->config;
    38de:	f8d8 9004 	ldr.w	r9, [r8, #4]
	ctx->config = spi_cfg;
    38e2:	6015      	str	r5, [r2, #0]
    38e4:	2b00      	cmp	r3, #0
    38e6:	d07c      	beq.n	39e2 <spi_nrfx_transceive+0x1ea>
    38e8:	6818      	ldr	r0, [r3, #0]
    38ea:	2800      	cmp	r0, #0
    38ec:	d079      	beq.n	39e2 <spi_nrfx_transceive+0x1ea>
				   ctx->config->cs->gpio_dt_flags |
    38ee:	f893 a009 	ldrb.w	sl, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
    38f2:	7a19      	ldrb	r1, [r3, #8]
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    38f4:	f8d0 b010 	ldr.w	fp, [r0, #16]
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    38f8:	f01a 0f01 	tst.w	sl, #1
    38fc:	bf0c      	ite	eq
    38fe:	f44a 5ab0 	orreq.w	sl, sl, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    3902:	f48a 5ad0 	eorne.w	sl, sl, #6656	; 0x1a00
	return api->pin_configure(port, pin, flags);
    3906:	6883      	ldr	r3, [r0, #8]
    3908:	9101      	str	r1, [sp, #4]
    390a:	681b      	ldr	r3, [r3, #0]
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    390c:	f42a 5280 	bic.w	r2, sl, #4096	; 0x1000
	return api->pin_configure(port, pin, flags);
    3910:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
    3912:	b960      	cbnz	r0, 392e <spi_nrfx_transceive+0x136>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3914:	9901      	ldr	r1, [sp, #4]
    3916:	f8db 3000 	ldr.w	r3, [fp]
    391a:	2201      	movs	r2, #1
    391c:	fa02 f101 	lsl.w	r1, r2, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    3920:	f01a 0f01 	tst.w	sl, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3924:	bf14      	ite	ne
    3926:	430b      	orrne	r3, r1
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    3928:	438b      	biceq	r3, r1
    392a:	f8cb 3000 	str.w	r3, [fp]
	nrf_spi_configure(spi->p_reg,
    392e:	88a9      	ldrh	r1, [r5, #4]
    3930:	f8d9 2000 	ldr.w	r2, [r9]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    3934:	0788      	lsls	r0, r1, #30
    3936:	f001 0304 	and.w	r3, r1, #4
    393a:	d55d      	bpl.n	39f8 <spi_nrfx_transceive+0x200>
			return NRF_SPI_MODE_2;
    393c:	2b00      	cmp	r3, #0
    393e:	bf14      	ite	ne
    3940:	2303      	movne	r3, #3
    3942:	2302      	moveq	r3, #2
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
    3944:	2b02      	cmp	r3, #2
	if (operation & SPI_TRANSFER_LSB) {
    3946:	f3c1 1100 	ubfx	r1, r1, #4, #1
    394a:	d059      	beq.n	3a00 <spi_nrfx_transceive+0x208>
    394c:	2b03      	cmp	r3, #3
    394e:	d05a      	beq.n	3a06 <spi_nrfx_transceive+0x20e>
    3950:	2b01      	cmp	r3, #1
    3952:	d101      	bne.n	3958 <spi_nrfx_transceive+0x160>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    3954:	f041 0102 	orr.w	r1, r1, #2
	if (frequency < 250000) {
    3958:	4b41      	ldr	r3, [pc, #260]	; (3a60 <spi_nrfx_transceive+0x268>)
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    395a:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
	nrf_spi_frequency_set(spi->p_reg,
    395e:	6829      	ldr	r1, [r5, #0]
	if (frequency < 250000) {
    3960:	4299      	cmp	r1, r3
    3962:	d953      	bls.n	3a0c <spi_nrfx_transceive+0x214>
	} else if (frequency < 500000) {
    3964:	4b3f      	ldr	r3, [pc, #252]	; (3a64 <spi_nrfx_transceive+0x26c>)
    3966:	4299      	cmp	r1, r3
    3968:	d953      	bls.n	3a12 <spi_nrfx_transceive+0x21a>
	} else if (frequency < 1000000) {
    396a:	4b3f      	ldr	r3, [pc, #252]	; (3a68 <spi_nrfx_transceive+0x270>)
    396c:	4299      	cmp	r1, r3
    396e:	d953      	bls.n	3a18 <spi_nrfx_transceive+0x220>
	} else if (frequency < 2000000) {
    3970:	4b3e      	ldr	r3, [pc, #248]	; (3a6c <spi_nrfx_transceive+0x274>)
    3972:	4299      	cmp	r1, r3
    3974:	d953      	bls.n	3a1e <spi_nrfx_transceive+0x226>
	} else if (frequency < 4000000) {
    3976:	4b3e      	ldr	r3, [pc, #248]	; (3a70 <spi_nrfx_transceive+0x278>)
    3978:	4299      	cmp	r1, r3
    397a:	d953      	bls.n	3a24 <spi_nrfx_transceive+0x22c>
		return NRF_SPI_FREQ_8M;
    397c:	4b3d      	ldr	r3, [pc, #244]	; (3a74 <spi_nrfx_transceive+0x27c>)
    397e:	4299      	cmp	r1, r3
    3980:	bf34      	ite	cc
    3982:	f04f 4180 	movcc.w	r1, #1073741824	; 0x40000000
    3986:	f04f 4100 	movcs.w	r1, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
    398a:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
		dev_data->busy = true;
    398e:	2301      	movs	r3, #1
    3990:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
	if (tx_bufs) {
    3994:	2f00      	cmp	r7, #0
    3996:	d048      	beq.n	3a2a <spi_nrfx_transceive+0x232>
		ctx->current_tx = tx_bufs->buffers;
    3998:	683b      	ldr	r3, [r7, #0]
		ctx->tx_count = tx_bufs->count;
    399a:	687a      	ldr	r2, [r7, #4]
		ctx->current_tx = tx_bufs->buffers;
    399c:	62e3      	str	r3, [r4, #44]	; 0x2c
		ctx->tx_count = tx_bufs->count;
    399e:	6322      	str	r2, [r4, #48]	; 0x30
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    39a0:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
    39a2:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    39a4:	63e2      	str	r2, [r4, #60]	; 0x3c
		ctx->tx_len = ctx->current_tx->len / dfs;
    39a6:	6423      	str	r3, [r4, #64]	; 0x40
	if (rx_bufs) {
    39a8:	2e00      	cmp	r6, #0
    39aa:	d043      	beq.n	3a34 <spi_nrfx_transceive+0x23c>
		ctx->current_rx = rx_bufs->buffers;
    39ac:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
    39ae:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
    39b0:	6363      	str	r3, [r4, #52]	; 0x34
		ctx->rx_count = rx_bufs->count;
    39b2:	63a2      	str	r2, [r4, #56]	; 0x38
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    39b4:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
    39b6:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    39b8:	6462      	str	r2, [r4, #68]	; 0x44
		ctx->rx_len = ctx->current_rx->len / dfs;
    39ba:	64a3      	str	r3, [r4, #72]	; 0x48
	ctx->sync_status = 0;
    39bc:	2200      	movs	r2, #0
    39be:	62a2      	str	r2, [r4, #40]	; 0x28
	_spi_context_cs_control(ctx, on, false);
    39c0:	2101      	movs	r1, #1
    39c2:	4620      	mov	r0, r4
    39c4:	f002 ff41 	bl	684a <_spi_context_cs_control>
		transfer_next_chunk(dev);
    39c8:	4640      	mov	r0, r8
    39ca:	f7ff fe7b 	bl	36c4 <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
    39ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    39d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    39d6:	f104 0018 	add.w	r0, r4, #24
    39da:	f001 fb59 	bl	5090 <z_impl_k_sem_take>
	status = ctx->sync_status;
    39de:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return status;
    39e0:	e734      	b.n	384c <spi_nrfx_transceive+0x54>
    39e2:	4b18      	ldr	r3, [pc, #96]	; (3a44 <spi_nrfx_transceive+0x24c>)
    39e4:	4916      	ldr	r1, [pc, #88]	; (3a40 <spi_nrfx_transceive+0x248>)
		LOG_INF("CS control inhibited (no GPIO device)");
    39e6:	4824      	ldr	r0, [pc, #144]	; (3a78 <spi_nrfx_transceive+0x280>)
    39e8:	1ac9      	subs	r1, r1, r3
    39ea:	08c9      	lsrs	r1, r1, #3
    39ec:	0189      	lsls	r1, r1, #6
    39ee:	f041 0103 	orr.w	r1, r1, #3
    39f2:	f002 fa24 	bl	5e3e <log_0>
    39f6:	e79a      	b.n	392e <spi_nrfx_transceive+0x136>
			return NRF_SPI_MODE_0;
    39f8:	3b00      	subs	r3, #0
    39fa:	bf18      	it	ne
    39fc:	2301      	movne	r3, #1
    39fe:	e7a1      	b.n	3944 <spi_nrfx_transceive+0x14c>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    3a00:	f041 0104 	orr.w	r1, r1, #4
        break;
    3a04:	e7a8      	b.n	3958 <spi_nrfx_transceive+0x160>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    3a06:	f041 0106 	orr.w	r1, r1, #6
        break;
    3a0a:	e7a5      	b.n	3958 <spi_nrfx_transceive+0x160>
		return NRF_SPI_FREQ_125K;
    3a0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    3a10:	e7bb      	b.n	398a <spi_nrfx_transceive+0x192>
		return NRF_SPI_FREQ_250K;
    3a12:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    3a16:	e7b8      	b.n	398a <spi_nrfx_transceive+0x192>
		return NRF_SPI_FREQ_500K;
    3a18:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    3a1c:	e7b5      	b.n	398a <spi_nrfx_transceive+0x192>
		return NRF_SPI_FREQ_1M;
    3a1e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3a22:	e7b2      	b.n	398a <spi_nrfx_transceive+0x192>
		return NRF_SPI_FREQ_2M;
    3a24:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    3a28:	e7af      	b.n	398a <spi_nrfx_transceive+0x192>
		ctx->tx_count = 0;
    3a2a:	e9c4 770b 	strd	r7, r7, [r4, #44]	; 0x2c
		ctx->tx_len = 0;
    3a2e:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
    3a32:	e7b9      	b.n	39a8 <spi_nrfx_transceive+0x1b0>
		ctx->rx_count = 0;
    3a34:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
		ctx->rx_len = 0;
    3a38:	e9c4 6611 	strd	r6, r6, [r4, #68]	; 0x44
    3a3c:	e7be      	b.n	39bc <spi_nrfx_transceive+0x1c4>
    3a3e:	bf00      	nop
    3a40:	00006e60 	.word	0x00006e60
    3a44:	00006e28 	.word	0x00006e28
    3a48:	000076fe 	.word	0x000076fe
    3a4c:	00007720 	.word	0x00007720
    3a50:	0000773f 	.word	0x0000773f
    3a54:	00007762 	.word	0x00007762
    3a58:	0001e847 	.word	0x0001e847
    3a5c:	00007791 	.word	0x00007791
    3a60:	0003d08f 	.word	0x0003d08f
    3a64:	0007a11f 	.word	0x0007a11f
    3a68:	000f423f 	.word	0x000f423f
    3a6c:	001e847f 	.word	0x001e847f
    3a70:	003d08ff 	.word	0x003d08ff
    3a74:	007a1200 	.word	0x007a1200
    3a78:	000077c2 	.word	0x000077c2

00003a7c <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3a7c:	4b07      	ldr	r3, [pc, #28]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
    3a7e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    3a82:	b142      	cbz	r2, 3a96 <uart_nrfx_poll_in+0x1a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a84:	2000      	movs	r0, #0
    3a86:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    3a8a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
    3a8e:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    3a92:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
    3a94:	4770      	bx	lr
		return -1;
    3a96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    3a9a:	4770      	bx	lr
    3a9c:	40002000 	.word	0x40002000

00003aa0 <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    3aa0:	4b02      	ldr	r3, [pc, #8]	; (3aac <uart_nrfx_err_check+0xc>)
    3aa2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    3aa6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
    3aaa:	4770      	bx	lr
    3aac:	40002000 	.word	0x40002000

00003ab0 <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
    3ab0:	b510      	push	{r4, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    3ab2:	794b      	ldrb	r3, [r1, #5]
    3ab4:	2b01      	cmp	r3, #1
    3ab6:	d11c      	bne.n	3af2 <uart_nrfx_configure+0x42>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3ab8:	798b      	ldrb	r3, [r1, #6]
    3aba:	2b03      	cmp	r3, #3
    3abc:	d119      	bne.n	3af2 <uart_nrfx_configure+0x42>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3abe:	79cb      	ldrb	r3, [r1, #7]
    3ac0:	b9bb      	cbnz	r3, 3af2 <uart_nrfx_configure+0x42>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3ac2:	790a      	ldrb	r2, [r1, #4]
    3ac4:	b112      	cbz	r2, 3acc <uart_nrfx_configure+0x1c>
    3ac6:	2a02      	cmp	r2, #2
    3ac8:	d113      	bne.n	3af2 <uart_nrfx_configure+0x42>
    3aca:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3acc:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    3ace:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    3ad2:	d05e      	beq.n	3b92 <uart_nrfx_configure+0xe2>
    3ad4:	d82b      	bhi.n	3b2e <uart_nrfx_configure+0x7e>
    3ad6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3ada:	d05c      	beq.n	3b96 <uart_nrfx_configure+0xe6>
    3adc:	d814      	bhi.n	3b08 <uart_nrfx_configure+0x58>
    3ade:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3ae2:	d05a      	beq.n	3b9a <uart_nrfx_configure+0xea>
    3ae4:	d808      	bhi.n	3af8 <uart_nrfx_configure+0x48>
    3ae6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3aea:	d059      	beq.n	3ba0 <uart_nrfx_configure+0xf0>
    3aec:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3af0:	d059      	beq.n	3ba6 <uart_nrfx_configure+0xf6>
    3af2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    3af6:	e04b      	b.n	3b90 <uart_nrfx_configure+0xe0>
    3af8:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3afc:	d056      	beq.n	3bac <uart_nrfx_configure+0xfc>
    3afe:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3b02:	d1f6      	bne.n	3af2 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    3b04:	4b33      	ldr	r3, [pc, #204]	; (3bd4 <uart_nrfx_configure+0x124>)
    3b06:	e039      	b.n	3b7c <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    3b08:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3b0c:	d051      	beq.n	3bb2 <uart_nrfx_configure+0x102>
    3b0e:	d807      	bhi.n	3b20 <uart_nrfx_configure+0x70>
    3b10:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3b14:	d04f      	beq.n	3bb6 <uart_nrfx_configure+0x106>
    3b16:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3b1a:	d1ea      	bne.n	3af2 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    3b1c:	4b2e      	ldr	r3, [pc, #184]	; (3bd8 <uart_nrfx_configure+0x128>)
    3b1e:	e02d      	b.n	3b7c <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    3b20:	f647 2412 	movw	r4, #31250	; 0x7a12
    3b24:	42a3      	cmp	r3, r4
    3b26:	d1e4      	bne.n	3af2 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    3b28:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3b2c:	e026      	b.n	3b7c <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    3b2e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3b32:	d043      	beq.n	3bbc <uart_nrfx_configure+0x10c>
    3b34:	d811      	bhi.n	3b5a <uart_nrfx_configure+0xaa>
    3b36:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3b3a:	d041      	beq.n	3bc0 <uart_nrfx_configure+0x110>
    3b3c:	d808      	bhi.n	3b50 <uart_nrfx_configure+0xa0>
    3b3e:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    3b42:	42a3      	cmp	r3, r4
    3b44:	d03e      	beq.n	3bc4 <uart_nrfx_configure+0x114>
    3b46:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3b4a:	d1d2      	bne.n	3af2 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    3b4c:	4b23      	ldr	r3, [pc, #140]	; (3bdc <uart_nrfx_configure+0x12c>)
    3b4e:	e015      	b.n	3b7c <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    3b50:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3b54:	d1cd      	bne.n	3af2 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    3b56:	4b22      	ldr	r3, [pc, #136]	; (3be0 <uart_nrfx_configure+0x130>)
    3b58:	e010      	b.n	3b7c <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    3b5a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3b5e:	d034      	beq.n	3bca <uart_nrfx_configure+0x11a>
    3b60:	d807      	bhi.n	3b72 <uart_nrfx_configure+0xc2>
    3b62:	4c20      	ldr	r4, [pc, #128]	; (3be4 <uart_nrfx_configure+0x134>)
    3b64:	42a3      	cmp	r3, r4
    3b66:	d032      	beq.n	3bce <uart_nrfx_configure+0x11e>
    3b68:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3b6c:	d1c1      	bne.n	3af2 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    3b6e:	4b1e      	ldr	r3, [pc, #120]	; (3be8 <uart_nrfx_configure+0x138>)
    3b70:	e004      	b.n	3b7c <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    3b72:	4c1e      	ldr	r4, [pc, #120]	; (3bec <uart_nrfx_configure+0x13c>)
    3b74:	42a3      	cmp	r3, r4
    3b76:	d1bc      	bne.n	3af2 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    3b78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3b7c:	4c1c      	ldr	r4, [pc, #112]	; (3bf0 <uart_nrfx_configure+0x140>)
    3b7e:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3b82:	f8c4 256c 	str.w	r2, [r4, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    3b86:	6903      	ldr	r3, [r0, #16]
    3b88:	c903      	ldmia	r1, {r0, r1}
    3b8a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    3b8e:	2000      	movs	r0, #0
}
    3b90:	bd10      	pop	{r4, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    3b92:	4b18      	ldr	r3, [pc, #96]	; (3bf4 <uart_nrfx_configure+0x144>)
    3b94:	e7f2      	b.n	3b7c <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    3b96:	4b18      	ldr	r3, [pc, #96]	; (3bf8 <uart_nrfx_configure+0x148>)
    3b98:	e7f0      	b.n	3b7c <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    3b9a:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3b9e:	e7ed      	b.n	3b7c <uart_nrfx_configure+0xcc>
		nrf_baudrate = 0x00014000;
    3ba0:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3ba4:	e7ea      	b.n	3b7c <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    3ba6:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3baa:	e7e7      	b.n	3b7c <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    3bac:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3bb0:	e7e4      	b.n	3b7c <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    3bb2:	4b12      	ldr	r3, [pc, #72]	; (3bfc <uart_nrfx_configure+0x14c>)
    3bb4:	e7e2      	b.n	3b7c <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    3bb6:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    3bba:	e7df      	b.n	3b7c <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    3bbc:	4b10      	ldr	r3, [pc, #64]	; (3c00 <uart_nrfx_configure+0x150>)
    3bbe:	e7dd      	b.n	3b7c <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    3bc0:	4b10      	ldr	r3, [pc, #64]	; (3c04 <uart_nrfx_configure+0x154>)
    3bc2:	e7db      	b.n	3b7c <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    3bc4:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3bc8:	e7d8      	b.n	3b7c <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    3bca:	4b0f      	ldr	r3, [pc, #60]	; (3c08 <uart_nrfx_configure+0x158>)
    3bcc:	e7d6      	b.n	3b7c <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    3bce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3bd2:	e7d3      	b.n	3b7c <uart_nrfx_configure+0xcc>
    3bd4:	0013b000 	.word	0x0013b000
    3bd8:	004ea000 	.word	0x004ea000
    3bdc:	00ebf000 	.word	0x00ebf000
    3be0:	01d7e000 	.word	0x01d7e000
    3be4:	0003d090 	.word	0x0003d090
    3be8:	075f7000 	.word	0x075f7000
    3bec:	000f4240 	.word	0x000f4240
    3bf0:	40002000 	.word	0x40002000
    3bf4:	009d5000 	.word	0x009d5000
    3bf8:	00275000 	.word	0x00275000
    3bfc:	0075f000 	.word	0x0075f000
    3c00:	03afb000 	.word	0x03afb000
    3c04:	013a9000 	.word	0x013a9000
    3c08:	0ebed000 	.word	0x0ebed000

00003c0c <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
    3c0c:	b510      	push	{r4, lr}
    p_reg->OUTSET = set_mask;
    3c0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
    3c12:	4c13      	ldr	r4, [pc, #76]	; (3c60 <uart_nrfx_init+0x54>)
    3c14:	2200      	movs	r2, #0
    3c16:	2120      	movs	r1, #32
    3c18:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    3c1c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3c20:	2103      	movs	r1, #3
    3c22:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
    3c26:	f8c3 272c 	str.w	r2, [r3, #1836]	; 0x72c
    p_reg->PSELRXD = pselrxd;
    3c2a:	230b      	movs	r3, #11
    3c2c:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
    3c30:	2305      	movs	r3, #5
    3c32:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSELRTS = pselrts;
    3c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3c3a:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	}

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    3c3e:	6901      	ldr	r1, [r0, #16]
    p_reg->PSELCTS = pselcts;
    3c40:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    3c44:	f7ff ff34 	bl	3ab0 <uart_nrfx_configure>
	if (err) {
    3c48:	b940      	cbnz	r0, 3c5c <uart_nrfx_init+0x50>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    3c4a:	2304      	movs	r3, #4
    3c4c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3c50:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    3c54:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3c58:	2301      	movs	r3, #1
    3c5a:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
    3c5c:	bd10      	pop	{r4, pc}
    3c5e:	bf00      	nop
    3c60:	40002000 	.word	0x40002000

00003c64 <uart_nrfx_poll_out>:
{
    3c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c66:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
    3c68:	f002 ff90 	bl	6b8c <k_is_in_isr>
    3c6c:	4d1a      	ldr	r5, [pc, #104]	; (3cd8 <uart_nrfx_poll_out+0x74>)
    3c6e:	bb78      	cbnz	r0, 3cd0 <uart_nrfx_poll_out+0x6c>
    3c70:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3c72:	2701      	movs	r7, #1
    3c74:	f3bf 8f5b 	dmb	ish
    3c78:	e855 3f00 	ldrex	r3, [r5]
    3c7c:	2b00      	cmp	r3, #0
    3c7e:	d103      	bne.n	3c88 <uart_nrfx_poll_out+0x24>
    3c80:	e845 7200 	strex	r2, r7, [r5]
    3c84:	2a00      	cmp	r2, #0
    3c86:	d1f7      	bne.n	3c78 <uart_nrfx_poll_out+0x14>
    3c88:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
    3c8c:	d007      	beq.n	3c9e <uart_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
    3c8e:	2021      	movs	r0, #33	; 0x21
    3c90:	2100      	movs	r1, #0
			if (--safety_cnt == 0) {
    3c92:	3c01      	subs	r4, #1
    3c94:	f001 f96a 	bl	4f6c <z_impl_k_sleep>
    3c98:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    3c9c:	d1ea      	bne.n	3c74 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3c9e:	4c0f      	ldr	r4, [pc, #60]	; (3cdc <uart_nrfx_poll_out+0x78>)
    3ca0:	2300      	movs	r3, #0
    3ca2:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    3ca6:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3caa:	2301      	movs	r3, #1
    3cac:	60a3      	str	r3, [r4, #8]
    p_reg->TXD = txd;
    3cae:	f8c4 651c 	str.w	r6, [r4, #1308]	; 0x51c
    3cb2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3cb6:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
    3cba:	b923      	cbnz	r3, 3cc6 <uart_nrfx_poll_out+0x62>
    3cbc:	2001      	movs	r0, #1
    3cbe:	f002 fe22 	bl	6906 <nrfx_busy_wait>
    3cc2:	3e01      	subs	r6, #1
    3cc4:	d1f7      	bne.n	3cb6 <uart_nrfx_poll_out+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3cc6:	2301      	movs	r3, #1
    3cc8:	60e3      	str	r3, [r4, #12]
	*lock = 0;
    3cca:	2300      	movs	r3, #0
    3ccc:	602b      	str	r3, [r5, #0]
}
    3cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
    3cd0:	2301      	movs	r3, #1
    3cd2:	602b      	str	r3, [r5, #0]
    3cd4:	e7e3      	b.n	3c9e <uart_nrfx_poll_out+0x3a>
    3cd6:	bf00      	nop
    3cd8:	20000594 	.word	0x20000594
    3cdc:	40002000 	.word	0x40002000

00003ce0 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3ce0:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    3ce4:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3ce8:	2a06      	cmp	r2, #6
    3cea:	d109      	bne.n	3d00 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    3cec:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    3cf0:	f3c3 1303 	ubfx	r3, r3, #4, #4
    3cf4:	3b03      	subs	r3, #3
    3cf6:	2b03      	cmp	r3, #3
    3cf8:	d802      	bhi.n	3d00 <nrf52_errata_16+0x20>
    3cfa:	4a02      	ldr	r2, [pc, #8]	; (3d04 <nrf52_errata_16+0x24>)
    3cfc:	5cd0      	ldrb	r0, [r2, r3]
    3cfe:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    3d00:	2000      	movs	r0, #0
    #endif
}
    3d02:	4770      	bx	lr
    3d04:	000077fd 	.word	0x000077fd

00003d08 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3d08:	4a02      	ldr	r2, [pc, #8]	; (3d14 <nvmc_wait+0xc>)
    3d0a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    3d0e:	2b00      	cmp	r3, #0
    3d10:	d0fb      	beq.n	3d0a <nvmc_wait+0x2>
}
    3d12:	4770      	bx	lr
    3d14:	4001e000 	.word	0x4001e000

00003d18 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    3d18:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    3d1a:	f002 fde5 	bl	68e8 <nrf52_errata_108>
    3d1e:	b140      	cbz	r0, 3d32 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    3d20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3d24:	4a84      	ldr	r2, [pc, #528]	; (3f38 <SystemInit+0x220>)
    3d26:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
    3d2a:	f3c3 2304 	ubfx	r3, r3, #8, #5
    3d2e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    3d32:	f7ff ffd5 	bl	3ce0 <nrf52_errata_16>
    3d36:	b110      	cbz	r0, 3d3e <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    3d38:	4b80      	ldr	r3, [pc, #512]	; (3f3c <SystemInit+0x224>)
    3d3a:	4a81      	ldr	r2, [pc, #516]	; (3f40 <SystemInit+0x228>)
    3d3c:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    3d3e:	f002 fdd3 	bl	68e8 <nrf52_errata_108>
    3d42:	b148      	cbz	r0, 3d58 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    3d44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3d48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3d4c:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    3d50:	f3c3 3342 	ubfx	r3, r3, #13, #3
    3d54:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    3d58:	f7ff ffc2 	bl	3ce0 <nrf52_errata_16>
    3d5c:	b130      	cbz	r0, 3d6c <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    3d5e:	4a79      	ldr	r2, [pc, #484]	; (3f44 <SystemInit+0x22c>)
    3d60:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    3d64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    3d68:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    3d6c:	f002 fdbc 	bl	68e8 <nrf52_errata_108>
    3d70:	b140      	cbz	r0, 3d84 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
    3d72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d76:	2200      	movs	r2, #0
    3d78:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    3d7c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    3d80:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    3d84:	f7ff ffac 	bl	3ce0 <nrf52_errata_16>
    3d88:	b120      	cbz	r0, 3d94 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    3d8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d8e:	2203      	movs	r2, #3
    3d90:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    3d94:	f7ff ffa4 	bl	3ce0 <nrf52_errata_16>
    3d98:	b160      	cbz	r0, 3db4 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    3d9a:	4b6b      	ldr	r3, [pc, #428]	; (3f48 <SystemInit+0x230>)
    3d9c:	2205      	movs	r2, #5
    3d9e:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    3da2:	2201      	movs	r2, #1
    3da4:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    3da8:	2200      	movs	r2, #0
    3daa:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    3dae:	223f      	movs	r2, #63	; 0x3f
    3db0:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    3db4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3db8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    3dbc:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3dbe:	bf09      	itett	eq
    3dc0:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    3dc4:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3dc8:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    3dcc:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
    3dd0:	bf08      	it	eq
    3dd2:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3dd6:	2a06      	cmp	r2, #6
    3dd8:	d14d      	bne.n	3e76 <SystemInit+0x15e>
            {
                switch(var2)
    3dda:	3b03      	subs	r3, #3
    3ddc:	2b03      	cmp	r3, #3
    3dde:	d803      	bhi.n	3de8 <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    3de0:	4a5a      	ldr	r2, [pc, #360]	; (3f4c <SystemInit+0x234>)
    3de2:	5cd3      	ldrb	r3, [r2, r3]
    3de4:	2b00      	cmp	r3, #0
    3de6:	d046      	beq.n	3e76 <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    3de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3dec:	4b58      	ldr	r3, [pc, #352]	; (3f50 <SystemInit+0x238>)
    3dee:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    3df2:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    3df6:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    3dfa:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    3dfe:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    3e02:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    3e06:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    3e0a:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    3e0e:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    3e12:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    3e16:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    3e1a:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    3e1e:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    3e22:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    3e26:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    3e2a:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    3e2e:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    3e32:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    3e36:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    3e3a:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    3e3e:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    3e42:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    3e46:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    3e4a:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    3e4e:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    3e52:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    3e56:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    3e5a:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    3e5e:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    3e62:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    3e66:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    3e6a:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    3e6e:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    3e72:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    3e76:	f002 fd37 	bl	68e8 <nrf52_errata_108>
    3e7a:	b148      	cbz	r0, 3e90 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    3e7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3e80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3e84:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    3e88:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    3e8c:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    3e90:	f002 fd2a 	bl	68e8 <nrf52_errata_108>
    3e94:	b148      	cbz	r0, 3eaa <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    3e96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3e9a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3e9e:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    3ea0:	bf44      	itt	mi
    3ea2:	f06f 0201 	mvnmi.w	r2, #1
    3ea6:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3eaa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3eae:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    3eb2:	2a06      	cmp	r2, #6
    3eb4:	d10e      	bne.n	3ed4 <SystemInit+0x1bc>
            {
                switch(var2)
    3eb6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    3eba:	3b03      	subs	r3, #3
    3ebc:	2b03      	cmp	r3, #3
    3ebe:	d802      	bhi.n	3ec6 <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    3ec0:	4a24      	ldr	r2, [pc, #144]	; (3f54 <SystemInit+0x23c>)
    3ec2:	5cd3      	ldrb	r3, [r2, r3]
    3ec4:	b133      	cbz	r3, 3ed4 <SystemInit+0x1bc>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    3ec6:	4a24      	ldr	r2, [pc, #144]	; (3f58 <SystemInit+0x240>)
    3ec8:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    3ecc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    3ed0:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3ed4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3ed8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3edc:	2a00      	cmp	r2, #0
    3ede:	db03      	blt.n	3ee8 <SystemInit+0x1d0>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    3ee0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3ee4:	2b00      	cmp	r3, #0
    3ee6:	da22      	bge.n	3f2e <SystemInit+0x216>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3ee8:	491c      	ldr	r1, [pc, #112]	; (3f5c <SystemInit+0x244>)
    3eea:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3eec:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3ef0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3ef4:	2415      	movs	r4, #21
    nvmc_wait();
    3ef6:	f7ff ff07 	bl	3d08 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3efa:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    3efe:	f7ff ff03 	bl	3d08 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    3f02:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    3f06:	f7ff feff 	bl	3d08 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3f0a:	2300      	movs	r3, #0
    3f0c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    3f10:	f7ff fefa 	bl	3d08 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    3f14:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3f18:	490a      	ldr	r1, [pc, #40]	; (3f44 <SystemInit+0x22c>)
    3f1a:	4b11      	ldr	r3, [pc, #68]	; (3f60 <SystemInit+0x248>)
    3f1c:	68ca      	ldr	r2, [r1, #12]
    3f1e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3f22:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3f24:	60cb      	str	r3, [r1, #12]
    3f26:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3f2a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3f2c:	e7fd      	b.n	3f2a <SystemInit+0x212>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    3f2e:	4b0d      	ldr	r3, [pc, #52]	; (3f64 <SystemInit+0x24c>)
    3f30:	4a0d      	ldr	r2, [pc, #52]	; (3f68 <SystemInit+0x250>)
    3f32:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    3f34:	bd10      	pop	{r4, pc}
    3f36:	bf00      	nop
    3f38:	40013000 	.word	0x40013000
    3f3c:	4007c000 	.word	0x4007c000
    3f40:	baadf00d 	.word	0xbaadf00d
    3f44:	e000ed00 	.word	0xe000ed00
    3f48:	40005000 	.word	0x40005000
    3f4c:	000077f5 	.word	0x000077f5
    3f50:	4000c000 	.word	0x4000c000
    3f54:	000077f9 	.word	0x000077f9
    3f58:	40001000 	.word	0x40001000
    3f5c:	4001e000 	.word	0x4001e000
    3f60:	05fa0004 	.word	0x05fa0004
    3f64:	20000078 	.word	0x20000078
    3f68:	03d09000 	.word	0x03d09000

00003f6c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3f6c:	4b04      	ldr	r3, [pc, #16]	; (3f80 <nrfx_clock_init+0x14>)
    3f6e:	791a      	ldrb	r2, [r3, #4]
    3f70:	b922      	cbnz	r2, 3f7c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    3f72:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    3f74:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    3f76:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    3f78:	4802      	ldr	r0, [pc, #8]	; (3f84 <nrfx_clock_init+0x18>)
    3f7a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3f7c:	4802      	ldr	r0, [pc, #8]	; (3f88 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3f7e:	4770      	bx	lr
    3f80:	20000598 	.word	0x20000598
    3f84:	0bad0000 	.word	0x0bad0000
    3f88:	0bad000c 	.word	0x0bad000c

00003f8c <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    3f8c:	b530      	push	{r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    3f8e:	b110      	cbz	r0, 3f96 <nrfx_clock_start+0xa>
    3f90:	2801      	cmp	r0, #1
    3f92:	d034      	beq.n	3ffe <nrfx_clock_start+0x72>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    3f94:	bd30      	pop	{r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3f96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f9a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3f9e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    3fa2:	03c9      	lsls	r1, r1, #15
    3fa4:	d529      	bpl.n	3ffa <nrfx_clock_start+0x6e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3fa6:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    3faa:	2a01      	cmp	r2, #1
    3fac:	d125      	bne.n	3ffa <nrfx_clock_start+0x6e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3fae:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3fb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3fb6:	2200      	movs	r2, #0
    3fb8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3fbc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    3fc0:	2202      	movs	r2, #2
    3fc2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
    3fc6:	4a13      	ldr	r2, [pc, #76]	; (4014 <nrfx_clock_start+0x88>)
    3fc8:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    3fcc:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
    3fd0:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
    3fd4:	4b10      	ldr	r3, [pc, #64]	; (4018 <nrfx_clock_start+0x8c>)
    3fd6:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    3fd8:	f044 0101 	orr.w	r1, r4, #1
    3fdc:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
    3fde:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    3fe0:	6859      	ldr	r1, [r3, #4]
    3fe2:	1b49      	subs	r1, r1, r5
    3fe4:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
    3fe8:	d3fa      	bcc.n	3fe0 <nrfx_clock_start+0x54>
    DWT->CTRL = dwt_ctrl;
    3fea:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3fec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
    3ff0:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    3ff4:	2201      	movs	r2, #1
    3ff6:	609a      	str	r2, [r3, #8]
}
    3ff8:	e7cc      	b.n	3f94 <nrfx_clock_start+0x8>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3ffa:	2200      	movs	r2, #0
    3ffc:	e7d7      	b.n	3fae <nrfx_clock_start+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3ffe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4002:	2200      	movs	r2, #0
    4004:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4008:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    400c:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4010:	6018      	str	r0, [r3, #0]
}
    4012:	e7bf      	b.n	3f94 <nrfx_clock_start+0x8>
    4014:	e000ed00 	.word	0xe000ed00
    4018:	e0001000 	.word	0xe0001000

0000401c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    401c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    401e:	b110      	cbz	r0, 4026 <nrfx_clock_stop+0xa>
    4020:	2801      	cmp	r0, #1
    4022:	d017      	beq.n	4054 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    4024:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    4026:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    402a:	2302      	movs	r3, #2
    402c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4030:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    4034:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4038:	2301      	movs	r3, #1
    403a:	60e3      	str	r3, [r4, #12]
    403c:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4040:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    4044:	03db      	lsls	r3, r3, #15
    4046:	d5ed      	bpl.n	4024 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    4048:	2001      	movs	r0, #1
    404a:	f002 fc5c 	bl	6906 <nrfx_busy_wait>
    404e:	3d01      	subs	r5, #1
    4050:	d1f6      	bne.n	4040 <nrfx_clock_stop+0x24>
    4052:	e7e7      	b.n	4024 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    4054:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4058:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    405a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    405e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    4062:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4066:	6060      	str	r0, [r4, #4]
    4068:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    406c:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4070:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    4074:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4076:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    407a:	d505      	bpl.n	4088 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    407c:	b123      	cbz	r3, 4088 <nrfx_clock_stop+0x6c>
    407e:	2001      	movs	r0, #1
    4080:	f002 fc41 	bl	6906 <nrfx_busy_wait>
    4084:	3d01      	subs	r5, #1
    4086:	d1f1      	bne.n	406c <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
    4088:	4b01      	ldr	r3, [pc, #4]	; (4090 <nrfx_clock_stop+0x74>)
    408a:	2200      	movs	r2, #0
    408c:	715a      	strb	r2, [r3, #5]
    408e:	e7c9      	b.n	4024 <nrfx_clock_stop+0x8>
    4090:	20000598 	.word	0x20000598

00004094 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4094:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4098:	b510      	push	{r4, lr}
    409a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    409e:	b16a      	cbz	r2, 40bc <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    40a0:	2200      	movs	r2, #0
    40a2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    40a6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    40aa:	2201      	movs	r2, #1
    40ac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    40b0:	4b11      	ldr	r3, [pc, #68]	; (40f8 <nrfx_power_clock_irq_handler+0x64>)
    40b2:	7958      	ldrb	r0, [r3, #5]
    40b4:	b910      	cbnz	r0, 40bc <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    40b6:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    40b8:	681b      	ldr	r3, [r3, #0]
    40ba:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    40bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    40c0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    40c4:	b172      	cbz	r2, 40e4 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    40c6:	2200      	movs	r2, #0
    40c8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    40cc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    40d0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    40d4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    40d8:	0792      	lsls	r2, r2, #30
    40da:	d104      	bne.n	40e6 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    40dc:	2201      	movs	r2, #1
    40de:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    40e2:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    40e4:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    40e6:	2202      	movs	r2, #2
    40e8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    40ec:	4b02      	ldr	r3, [pc, #8]	; (40f8 <nrfx_power_clock_irq_handler+0x64>)
}
    40ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    40f2:	681b      	ldr	r3, [r3, #0]
    40f4:	2001      	movs	r0, #1
    40f6:	4718      	bx	r3
    40f8:	20000598 	.word	0x20000598

000040fc <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    40fc:	2301      	movs	r3, #1
    40fe:	fa03 f000 	lsl.w	r0, r3, r0
    4102:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    4104:	b193      	cbz	r3, 412c <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
    4106:	f04f 0320 	mov.w	r3, #32
    410a:	f3ef 8111 	mrs	r1, BASEPRI
    410e:	f383 8811 	msr	BASEPRI, r3
    4112:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    4116:	4a06      	ldr	r2, [pc, #24]	; (4130 <nrfx_gpiote_channel_free+0x34>)
    4118:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    411a:	ea23 0000 	bic.w	r0, r3, r0
    411e:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
    4120:	f381 8811 	msr	BASEPRI, r1
    4124:	f3bf 8f6f 	isb	sy
    4128:	4802      	ldr	r0, [pc, #8]	; (4134 <nrfx_gpiote_channel_free+0x38>)
    412a:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    412c:	4802      	ldr	r0, [pc, #8]	; (4138 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    412e:	4770      	bx	lr
    4130:	200005a0 	.word	0x200005a0
    4134:	0bad0000 	.word	0x0bad0000
    4138:	0bad0004 	.word	0x0bad0004

0000413c <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    413c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4140:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    4142:	f8df e05c 	ldr.w	lr, [pc, #92]	; 41a0 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    4146:	4817      	ldr	r0, [pc, #92]	; (41a4 <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    4148:	f8df 805c 	ldr.w	r8, [pc, #92]	; 41a8 <nrfx_gpiote_channel_alloc+0x6c>
{
    414c:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    414e:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
    4150:	2601      	movs	r6, #1
    4152:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    4154:	f04f 0120 	mov.w	r1, #32
    4158:	f3ef 8c11 	mrs	ip, BASEPRI
    415c:	f381 8811 	msr	BASEPRI, r1
    4160:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    4164:	fa22 f103 	lsr.w	r1, r2, r3
    4168:	07c9      	lsls	r1, r1, #31
    416a:	d50a      	bpl.n	4182 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    416c:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
    4170:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    4174:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
    4176:	bf01      	itttt	eq
    4178:	4339      	orreq	r1, r7
    417a:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            err_code = NRFX_SUCCESS;
    417e:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
    4180:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    4182:	f38c 8811 	msr	BASEPRI, ip
    4186:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    418a:	4540      	cmp	r0, r8
    418c:	d005      	beq.n	419a <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    418e:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    4192:	439a      	bics	r2, r3
    4194:	f104 0401 	add.w	r4, r4, #1
    4198:	d1db      	bne.n	4152 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    419a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    419e:	bf00      	nop
    41a0:	200005a0 	.word	0x200005a0
    41a4:	0bad0002 	.word	0x0bad0002
    41a8:	0bad0000 	.word	0x0bad0000

000041ac <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
    41ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    41b0:	7906      	ldrb	r6, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    41b2:	4c4d      	ldr	r4, [pc, #308]	; (42e8 <nrfx_spi_init+0x13c>)
    41b4:	2528      	movs	r5, #40	; 0x28
    41b6:	4375      	muls	r5, r6
    41b8:	1967      	adds	r7, r4, r5
    41ba:	f897 c01c 	ldrb.w	ip, [r7, #28]
    41be:	f1bc 0f00 	cmp.w	ip, #0
    41c2:	f040 808f 	bne.w	42e4 <nrfx_spi_init+0x138>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    41c6:	5162      	str	r2, [r4, r5]
    p_cb->p_context = p_context;
    41c8:	607b      	str	r3, [r7, #4]
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPI_MODE_1)
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
    41ca:	f891 e000 	ldrb.w	lr, [r1]
    if (p_config->mode <= NRF_SPI_MODE_1)
    41ce:	7b0f      	ldrb	r7, [r1, #12]
    *p_pin = pin_number & 0x1F;
    41d0:	f00e 051f 	and.w	r5, lr, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    41d4:	f04f 0c01 	mov.w	ip, #1
    41d8:	fa0c fc05 	lsl.w	ip, ip, r5
    41dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    41e0:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    41e4:	f04f 0801 	mov.w	r8, #1
    41e8:	2f01      	cmp	r7, #1
    p_reg->OUTCLR = clr_mask;
    41ea:	bf94      	ite	ls
    41ec:	f8c3 c50c 	strls.w	ip, [r3, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    41f0:	f8c3 c508 	strhi.w	ip, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    41f4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    41f8:	784d      	ldrb	r5, [r1, #1]
    41fa:	2dff      	cmp	r5, #255	; 0xff
    *p_pin = pin_number & 0x1F;
    41fc:	bf1f      	itttt	ne
    41fe:	f005 0c1f 	andne.w	ip, r5, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4202:	fa08 f80c 	lslne.w	r8, r8, ip
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    4206:	f50c 7ce0 	addne.w	ip, ip, #448	; 0x1c0
    p_reg->OUTCLR = clr_mask;
    420a:	f8c3 850c 	strne.w	r8, [r3, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    420e:	bf1c      	itt	ne
    4210:	f04f 0803 	movne.w	r8, #3
    4214:	f843 802c 	strne.w	r8, [r3, ip, lsl #2]
    else
    {
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    4218:	788b      	ldrb	r3, [r1, #2]
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    421a:	bf08      	it	eq
    421c:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    4220:	2bff      	cmp	r3, #255	; 0xff
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
    4222:	bf1f      	itttt	ne
    4224:	f891 800e 	ldrbne.w	r8, [r1, #14]
    *p_pin = pin_number & 0x1F;
    4228:	f003 0c1f 	andne.w	ip, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    422c:	f50c 7ce0 	addne.w	ip, ip, #448	; 0x1c0
    4230:	f04f 49a0 	movne.w	r9, #1342177280	; 0x50000000
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
    4234:	bf1c      	itt	ne
    4236:	ea4f 0888 	movne.w	r8, r8, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    423a:	f849 802c 	strne.w	r8, [r9, ip, lsl #2]
    else
    {
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
    423e:	f891 8003 	ldrb.w	r8, [r1, #3]
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    4242:	bf08      	it	eq
    4244:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
    4248:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    424c:	d00f      	beq.n	426e <nrfx_spi_init+0xc2>
    *p_pin = pin_number & 0x1F;
    424e:	f008 0c1f 	and.w	ip, r8, #31
    p_reg->OUTSET = set_mask;
    4252:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4256:	f04f 0901 	mov.w	r9, #1
    425a:	fa09 f90c 	lsl.w	r9, r9, ip
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    425e:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
    4262:	f8ca 9508 	str.w	r9, [sl, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    4266:	f04f 0903 	mov.w	r9, #3
    426a:	f84a 902c 	str.w	r9, [sl, ip, lsl #2]
    {
        nrf_gpio_pin_set(p_config->ss_pin);
        nrf_gpio_cfg_output(p_config->ss_pin);
    }
    m_cb[p_instance->drv_inst_idx].ss_pin = p_config->ss_pin;
    426e:	f04f 0c28 	mov.w	ip, #40	; 0x28
    4272:	fb0c 4c06 	mla	ip, ip, r6, r4
    4276:	f88c 801e 	strb.w	r8, [ip, #30]

    NRF_SPI_Type * p_spi = p_instance->p_reg;
    427a:	6800      	ldr	r0, [r0, #0]
    p_reg->PSELSCK  = sck_pin;
    427c:	f8c0 e508 	str.w	lr, [r0, #1288]	; 0x508
    p_reg->PSELMOSI = mosi_pin;
    4280:	f8c0 550c 	str.w	r5, [r0, #1292]	; 0x50c
    p_reg->PSELMISO = miso_pin;
    4284:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
    4288:	688b      	ldr	r3, [r1, #8]
    428a:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    428e:	7b4b      	ldrb	r3, [r1, #13]
    4290:	3b00      	subs	r3, #0
    4292:	bf18      	it	ne
    4294:	2301      	movne	r3, #1
    switch (spi_mode)
    4296:	2f02      	cmp	r7, #2
    4298:	d01e      	beq.n	42d8 <nrfx_spi_init+0x12c>
    429a:	2f03      	cmp	r7, #3
    429c:	d01f      	beq.n	42de <nrfx_spi_init+0x132>
    429e:	2f01      	cmp	r7, #1
    42a0:	d101      	bne.n	42a6 <nrfx_spi_init+0xfa>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    42a2:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
    42a6:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554
    nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);

    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
    42aa:	2328      	movs	r3, #40	; 0x28
    42ac:	fb03 4306 	mla	r3, r3, r6, r4
    42b0:	7949      	ldrb	r1, [r1, #5]
    42b2:	77d9      	strb	r1, [r3, #31]
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    42b4:	2301      	movs	r3, #1
    42b6:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
    42ba:	b11a      	cbz	r2, 42c4 <nrfx_spi_init+0x118>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    42bc:	f340 3007 	sbfx	r0, r0, #12, #8
    42c0:	f7fe fbbe 	bl	2a40 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    42c4:	2328      	movs	r3, #40	; 0x28
    42c6:	fb03 4406 	mla	r4, r3, r6, r4
    42ca:	2300      	movs	r3, #0
    42cc:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    42ce:	4807      	ldr	r0, [pc, #28]	; (42ec <nrfx_spi_init+0x140>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    42d0:	2301      	movs	r3, #1
    42d2:	7723      	strb	r3, [r4, #28]
}
    42d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    42d8:	f043 0304 	orr.w	r3, r3, #4
        break;
    42dc:	e7e3      	b.n	42a6 <nrfx_spi_init+0xfa>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    42de:	f043 0306 	orr.w	r3, r3, #6
        break;
    42e2:	e7e0      	b.n	42a6 <nrfx_spi_init+0xfa>
        return err_code;
    42e4:	4802      	ldr	r0, [pc, #8]	; (42f0 <nrfx_spi_init+0x144>)
    42e6:	e7f5      	b.n	42d4 <nrfx_spi_init+0x128>
    42e8:	200005f0 	.word	0x200005f0
    42ec:	0bad0000 	.word	0x0bad0000
    42f0:	0bad0005 	.word	0x0bad0005

000042f4 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    42f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    42f8:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    42fa:	4d41      	ldr	r5, [pc, #260]	; (4400 <nrfx_spi_xfer+0x10c>)
    42fc:	2328      	movs	r3, #40	; 0x28
    42fe:	437b      	muls	r3, r7
{
    4300:	4694      	mov	ip, r2
    if (p_cb->transfer_in_progress)
    4302:	18ea      	adds	r2, r5, r3
{
    4304:	460e      	mov	r6, r1
    if (p_cb->transfer_in_progress)
    4306:	7f51      	ldrb	r1, [r2, #29]
{
    4308:	4686      	mov	lr, r0
    if (p_cb->transfer_in_progress)
    430a:	2900      	cmp	r1, #0
    430c:	d175      	bne.n	43fa <nrfx_spi_xfer+0x106>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
    430e:	f855 8003 	ldr.w	r8, [r5, r3]
    4312:	f1b8 0f00 	cmp.w	r8, #0
    4316:	d001      	beq.n	431c <nrfx_spi_xfer+0x28>
        {
            p_cb->transfer_in_progress = true;
    4318:	2301      	movs	r3, #1
    431a:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    431c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    4320:	2428      	movs	r4, #40	; 0x28
    4322:	fb04 5407 	mla	r4, r4, r7, r5
    4326:	f104 090c 	add.w	r9, r4, #12
    432a:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
    p_cb->abort = false;
    432e:	2300      	movs	r3, #0
    4330:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    4334:	7fa3      	ldrb	r3, [r4, #30]
    4336:	2bff      	cmp	r3, #255	; 0xff
    4338:	d008      	beq.n	434c <nrfx_spi_xfer+0x58>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    433a:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
    433c:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4340:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTCLR = clr_mask;
    4344:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4348:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    {
        nrf_gpio_pin_clear(p_cb->ss_pin);
    }
    if (flags)
    434c:	2328      	movs	r3, #40	; 0x28
    434e:	f1bc 0f00 	cmp.w	ip, #0
    4352:	d006      	beq.n	4362 <nrfx_spi_xfer+0x6e>
    {
        p_cb->transfer_in_progress = false;
    4354:	fb03 5507 	mla	r5, r3, r7, r5
        err_code = NRFX_ERROR_NOT_SUPPORTED;
    4358:	482a      	ldr	r0, [pc, #168]	; (4404 <nrfx_spi_xfer+0x110>)
        p_cb->transfer_in_progress = false;
    435a:	2300      	movs	r3, #0
    435c:	776b      	strb	r3, [r5, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    435e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
    4362:	f8de 4000 	ldr.w	r4, [lr]
    p_cb->bytes_transferred = 0;
    4366:	fb03 5307 	mla	r3, r3, r7, r5
    p_reg->INTENCLR = mask;
    436a:	2204      	movs	r2, #4
    436c:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    4370:	f8c3 c020 	str.w	ip, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4374:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
    4378:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
    437c:	6872      	ldr	r2, [r6, #4]
    nrf_spi_txd_set(p_spi,
    437e:	b18a      	cbz	r2, 43a4 <nrfx_spi_xfer+0xb0>
    4380:	6833      	ldr	r3, [r6, #0]
    4382:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
    4384:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
    4388:	2a01      	cmp	r2, #1
    438a:	d90d      	bls.n	43a8 <nrfx_spi_xfer+0xb4>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
    438c:	6833      	ldr	r3, [r6, #0]
    438e:	785b      	ldrb	r3, [r3, #1]
    4390:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_cb->handler)
    4394:	f1b8 0f00 	cmp.w	r8, #0
    4398:	d00e      	beq.n	43b8 <nrfx_spi_xfer+0xc4>
    p_reg->INTENSET = mask;
    439a:	2304      	movs	r3, #4
    439c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
    43a0:	4819      	ldr	r0, [pc, #100]	; (4408 <nrfx_spi_xfer+0x114>)
    43a2:	e7dc      	b.n	435e <nrfx_spi_xfer+0x6a>
    nrf_spi_txd_set(p_spi,
    43a4:	7fdb      	ldrb	r3, [r3, #31]
    43a6:	e7ed      	b.n	4384 <nrfx_spi_xfer+0x90>
    else if (p_xfer_desc->rx_length > 1)
    43a8:	68f3      	ldr	r3, [r6, #12]
    43aa:	2b01      	cmp	r3, #1
    43ac:	d9f2      	bls.n	4394 <nrfx_spi_xfer+0xa0>
        nrf_spi_txd_set(p_spi, p_cb->orc);
    43ae:	2328      	movs	r3, #40	; 0x28
    43b0:	fb03 5307 	mla	r3, r3, r7, r5
    p_reg->TXD = data;
    43b4:	7fdb      	ldrb	r3, [r3, #31]
    43b6:	e7eb      	b.n	4390 <nrfx_spi_xfer+0x9c>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    43b8:	eb07 0187 	add.w	r1, r7, r7, lsl #2
    43bc:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    43c0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
    43c4:	2b00      	cmp	r3, #0
    43c6:	d0fb      	beq.n	43c0 <nrfx_spi_xfer+0xcc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    43c8:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
    43cc:	4620      	mov	r0, r4
    43ce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    43d2:	f002 faa4 	bl	691e <transfer_byte>
    43d6:	2800      	cmp	r0, #0
    43d8:	d1f2      	bne.n	43c0 <nrfx_spi_xfer+0xcc>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    43da:	2328      	movs	r3, #40	; 0x28
    43dc:	fb03 5507 	mla	r5, r3, r7, r5
    43e0:	7fab      	ldrb	r3, [r5, #30]
    43e2:	2bff      	cmp	r3, #255	; 0xff
    43e4:	d0dc      	beq.n	43a0 <nrfx_spi_xfer+0xac>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    43e6:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
    43e8:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    43ec:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
    43f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    43f4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    43f8:	e7d2      	b.n	43a0 <nrfx_spi_xfer+0xac>
        return err_code;
    43fa:	4804      	ldr	r0, [pc, #16]	; (440c <nrfx_spi_xfer+0x118>)
    43fc:	e7af      	b.n	435e <nrfx_spi_xfer+0x6a>
    43fe:	bf00      	nop
    4400:	200005f0 	.word	0x200005f0
    4404:	0bad0003 	.word	0x0bad0003
    4408:	0bad0000 	.word	0x0bad0000
    440c:	0bad000b 	.word	0x0bad000b

00004410 <nrfx_spi_1_irq_handler>:
    4410:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    4414:	2300      	movs	r3, #0
}
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
    4416:	b510      	push	{r4, lr}
    if (!transfer_byte(p_spi, p_cb))
    4418:	490e      	ldr	r1, [pc, #56]	; (4454 <nrfx_spi_1_irq_handler+0x44>)
    441a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    441e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    4422:	f002 fa7c 	bl	691e <transfer_byte>
    4426:	b9a0      	cbnz	r0, 4452 <nrfx_spi_1_irq_handler+0x42>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    4428:	7f8b      	ldrb	r3, [r1, #30]
    442a:	2bff      	cmp	r3, #255	; 0xff
    442c:	d008      	beq.n	4440 <nrfx_spi_1_irq_handler+0x30>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    442e:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
    4430:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4434:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
    4438:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    443c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_cb->transfer_in_progress = false;
    4440:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
    4442:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
    4444:	774b      	strb	r3, [r1, #29]
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
}
    4446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    444a:	e9d1 3100 	ldrd	r3, r1, [r1]
    444e:	4802      	ldr	r0, [pc, #8]	; (4458 <nrfx_spi_1_irq_handler+0x48>)
    4450:	4718      	bx	r3
}
    4452:	bd10      	pop	{r4, pc}
    4454:	200005f0 	.word	0x200005f0
    4458:	200005f8 	.word	0x200005f8

0000445c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    445c:	4b0e      	ldr	r3, [pc, #56]	; (4498 <z_sys_init_run_level+0x3c>)
{
    445e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4460:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4464:	3001      	adds	r0, #1
    4466:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    446a:	42a6      	cmp	r6, r4
    446c:	d800      	bhi.n	4470 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    446e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4470:	e9d4 3500 	ldrd	r3, r5, [r4]
    4474:	4628      	mov	r0, r5
    4476:	4798      	blx	r3
		if (dev != NULL) {
    4478:	b165      	cbz	r5, 4494 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    447a:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    447c:	b130      	cbz	r0, 448c <z_sys_init_run_level+0x30>
				if (rc < 0) {
    447e:	2800      	cmp	r0, #0
    4480:	bfb8      	it	lt
    4482:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4484:	28ff      	cmp	r0, #255	; 0xff
    4486:	bfa8      	it	ge
    4488:	20ff      	movge	r0, #255	; 0xff
    448a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    448c:	785a      	ldrb	r2, [r3, #1]
    448e:	f042 0201 	orr.w	r2, r2, #1
    4492:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4494:	3408      	adds	r4, #8
    4496:	e7e8      	b.n	446a <z_sys_init_run_level+0xe>
    4498:	00007060 	.word	0x00007060

0000449c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    449c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    449e:	4605      	mov	r5, r0
    44a0:	b910      	cbnz	r0, 44a8 <z_impl_device_get_binding+0xc>
		return NULL;
    44a2:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    44a4:	4620      	mov	r0, r4
    44a6:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    44a8:	7803      	ldrb	r3, [r0, #0]
    44aa:	2b00      	cmp	r3, #0
    44ac:	d0f9      	beq.n	44a2 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    44ae:	4c0e      	ldr	r4, [pc, #56]	; (44e8 <z_impl_device_get_binding+0x4c>)
    44b0:	4e0e      	ldr	r6, [pc, #56]	; (44ec <z_impl_device_get_binding+0x50>)
    44b2:	42b4      	cmp	r4, r6
    44b4:	d108      	bne.n	44c8 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    44b6:	4c0c      	ldr	r4, [pc, #48]	; (44e8 <z_impl_device_get_binding+0x4c>)
    44b8:	42b4      	cmp	r4, r6
    44ba:	d0f2      	beq.n	44a2 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    44bc:	4620      	mov	r0, r4
    44be:	f002 fa62 	bl	6986 <z_device_ready>
    44c2:	b950      	cbnz	r0, 44da <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    44c4:	3418      	adds	r4, #24
    44c6:	e7f7      	b.n	44b8 <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
    44c8:	4620      	mov	r0, r4
    44ca:	f002 fa5c 	bl	6986 <z_device_ready>
    44ce:	b110      	cbz	r0, 44d6 <z_impl_device_get_binding+0x3a>
    44d0:	6823      	ldr	r3, [r4, #0]
    44d2:	42ab      	cmp	r3, r5
    44d4:	d0e6      	beq.n	44a4 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    44d6:	3418      	adds	r4, #24
    44d8:	e7eb      	b.n	44b2 <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    44da:	6821      	ldr	r1, [r4, #0]
    44dc:	4628      	mov	r0, r5
    44de:	f002 f8c8 	bl	6672 <strcmp>
    44e2:	2800      	cmp	r0, #0
    44e4:	d1ee      	bne.n	44c4 <z_impl_device_get_binding+0x28>
    44e6:	e7dd      	b.n	44a4 <z_impl_device_get_binding+0x8>
    44e8:	200000a4 	.word	0x200000a4
    44ec:	2000011c 	.word	0x2000011c

000044f0 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    44f0:	b510      	push	{r4, lr}
    44f2:	4604      	mov	r4, r0
	z_impl_log_panic();
    44f4:	f7fd faea 	bl	1acc <z_impl_log_panic>
    44f8:	4b06      	ldr	r3, [pc, #24]	; (4514 <k_sys_fatal_error_handler+0x24>)
    44fa:	4907      	ldr	r1, [pc, #28]	; (4518 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
    44fc:	4807      	ldr	r0, [pc, #28]	; (451c <k_sys_fatal_error_handler+0x2c>)
    44fe:	1ac9      	subs	r1, r1, r3
    4500:	08c9      	lsrs	r1, r1, #3
    4502:	0189      	lsls	r1, r1, #6
    4504:	f041 0101 	orr.w	r1, r1, #1
    4508:	f001 fc99 	bl	5e3e <log_0>
	arch_system_halt(reason);
    450c:	4620      	mov	r0, r4
    450e:	f002 fa43 	bl	6998 <arch_system_halt>
    4512:	bf00      	nop
    4514:	00006e28 	.word	0x00006e28
    4518:	00006e48 	.word	0x00006e48
    451c:	00007801 	.word	0x00007801

00004520 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4520:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4524:	4606      	mov	r6, r0
    4526:	460f      	mov	r7, r1
	__asm__ volatile(
    4528:	f04f 0320 	mov.w	r3, #32
    452c:	f3ef 8811 	mrs	r8, BASEPRI
    4530:	f383 8811 	msr	BASEPRI, r3
    4534:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    4538:	f000 fd32 	bl	4fa0 <z_impl_k_current_get>
    453c:	4c1f      	ldr	r4, [pc, #124]	; (45bc <z_fatal_error+0x9c>)
    453e:	4b20      	ldr	r3, [pc, #128]	; (45c0 <z_fatal_error+0xa0>)
    4540:	1ae4      	subs	r4, r4, r3
    4542:	2e04      	cmp	r6, #4
    4544:	ea4f 04d4 	mov.w	r4, r4, lsr #3
    4548:	bf96      	itet	ls
    454a:	4a1e      	ldrls	r2, [pc, #120]	; (45c4 <z_fatal_error+0xa4>)
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    454c:	4a1e      	ldrhi	r2, [pc, #120]	; (45c8 <z_fatal_error+0xa8>)
    454e:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
    4552:	01a4      	lsls	r4, r4, #6
    4554:	f044 0301 	orr.w	r3, r4, #1
    4558:	4605      	mov	r5, r0
    455a:	f8ad 3000 	strh.w	r3, [sp]
    455e:	481b      	ldr	r0, [pc, #108]	; (45cc <z_fatal_error+0xac>)
    4560:	2300      	movs	r3, #0
    4562:	4631      	mov	r1, r6
    4564:	f001 fca5 	bl	5eb2 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    4568:	b147      	cbz	r7, 457c <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    456a:	69fb      	ldr	r3, [r7, #28]
    456c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4570:	b123      	cbz	r3, 457c <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
    4572:	4817      	ldr	r0, [pc, #92]	; (45d0 <z_fatal_error+0xb0>)
    4574:	f044 0101 	orr.w	r1, r4, #1
    4578:	f001 fc61 	bl	5e3e <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    457c:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    4580:	b12d      	cbz	r5, 458e <z_fatal_error+0x6e>
    4582:	4628      	mov	r0, r5
    4584:	f002 fb0f 	bl	6ba6 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    4588:	b108      	cbz	r0, 458e <z_fatal_error+0x6e>
    458a:	7803      	ldrb	r3, [r0, #0]
    458c:	b903      	cbnz	r3, 4590 <z_fatal_error+0x70>
		thread_name = "unknown";
    458e:	4811      	ldr	r0, [pc, #68]	; (45d4 <z_fatal_error+0xb4>)
	LOG_ERR("Current thread: %p (%s)", thread,
    4590:	f7fd f918 	bl	17c4 <log_strdup>
    4594:	4623      	mov	r3, r4
    4596:	4602      	mov	r2, r0
    4598:	4629      	mov	r1, r5
    459a:	480f      	ldr	r0, [pc, #60]	; (45d8 <z_fatal_error+0xb8>)
    459c:	f001 fc70 	bl	5e80 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    45a0:	4639      	mov	r1, r7
    45a2:	4630      	mov	r0, r6
    45a4:	f7ff ffa4 	bl	44f0 <k_sys_fatal_error_handler>
	__asm__ volatile(
    45a8:	f388 8811 	msr	BASEPRI, r8
    45ac:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    45b0:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    45b2:	b002      	add	sp, #8
    45b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    45b8:	f7fe bd88 	b.w	30cc <z_impl_k_thread_abort>
    45bc:	00006e48 	.word	0x00006e48
    45c0:	00006e28 	.word	0x00006e28
    45c4:	00007078 	.word	0x00007078
    45c8:	00007810 	.word	0x00007810
    45cc:	00007826 	.word	0x00007826
    45d0:	0000784e 	.word	0x0000784e
    45d4:	0000781e 	.word	0x0000781e
    45d8:	0000786f 	.word	0x0000786f

000045dc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    45dc:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    45de:	4c09      	ldr	r4, [pc, #36]	; (4604 <idle+0x28>)
	__asm__ volatile(
    45e0:	f04f 0220 	mov.w	r2, #32
    45e4:	f3ef 8311 	mrs	r3, BASEPRI
    45e8:	f382 8811 	msr	BASEPRI, r2
    45ec:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    45f0:	f002 faf1 	bl	6bd6 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    45f4:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    45f6:	f7fd fdff 	bl	21f8 <pm_system_suspend>
    45fa:	2800      	cmp	r0, #0
    45fc:	d1f0      	bne.n	45e0 <idle+0x4>
	arch_cpu_idle();
    45fe:	f7fe fa8f 	bl	2b20 <arch_cpu_idle>
}
    4602:	e7ed      	b.n	45e0 <idle+0x4>
    4604:	20000618 	.word	0x20000618

00004608 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    4608:	4802      	ldr	r0, [pc, #8]	; (4614 <z_bss_zero+0xc>)
    460a:	4a03      	ldr	r2, [pc, #12]	; (4618 <z_bss_zero+0x10>)
    460c:	2100      	movs	r1, #0
    460e:	1a12      	subs	r2, r2, r0
    4610:	f002 b866 	b.w	66e0 <memset>
    4614:	20000140 	.word	0x20000140
    4618:	20000c9c 	.word	0x20000c9c

0000461c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    461c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    461e:	4b0a      	ldr	r3, [pc, #40]	; (4648 <bg_thread_main+0x2c>)
    4620:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4622:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    4624:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4626:	f7ff ff19 	bl	445c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    462a:	f000 fe11 	bl	5250 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    462e:	2003      	movs	r0, #3
    4630:	f7ff ff14 	bl	445c <z_sys_init_run_level>

	z_init_static_threads();
    4634:	f000 fdb0 	bl	5198 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    4638:	f7fb fed6 	bl	3e8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    463c:	4a03      	ldr	r2, [pc, #12]	; (464c <bg_thread_main+0x30>)
    463e:	7b13      	ldrb	r3, [r2, #12]
    4640:	f023 0301 	bic.w	r3, r3, #1
    4644:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4646:	bd08      	pop	{r3, pc}
    4648:	20000c98 	.word	0x20000c98
    464c:	20000288 	.word	0x20000288

00004650 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    4650:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    4654:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    4656:	f7fd f80d 	bl	1674 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    465a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 4734 <z_cstart+0xe4>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    465e:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4662:	4d35      	ldr	r5, [pc, #212]	; (4738 <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
    4664:	4e35      	ldr	r6, [pc, #212]	; (473c <z_cstart+0xec>)
    4666:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4668:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 4740 <z_cstart+0xf0>
	z_setup_new_thread(thread, stack,
    466c:	4f35      	ldr	r7, [pc, #212]	; (4744 <z_cstart+0xf4>)
    466e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4672:	2400      	movs	r4, #0
    4674:	616b      	str	r3, [r5, #20]
    4676:	23e0      	movs	r3, #224	; 0xe0
    4678:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    467c:	77ec      	strb	r4, [r5, #31]
    467e:	762c      	strb	r4, [r5, #24]
    4680:	766c      	strb	r4, [r5, #25]
    4682:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4684:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4686:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    468a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    468c:	f7fe fcfc 	bl	3088 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4690:	f7fe fa40 	bl	2b14 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4698:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    469a:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    469c:	4d2a      	ldr	r5, [pc, #168]	; (4748 <z_cstart+0xf8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    469e:	f240 1301 	movw	r3, #257	; 0x101
    46a2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    46a6:	ab06      	add	r3, sp, #24
    46a8:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
    46aa:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
#endif
#if defined(CONFIG_MMU) && defined(CONFIG_USERSPACE)
	z_kernel_map_fixup();
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    46ae:	f002 f969 	bl	6984 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    46b2:	4620      	mov	r0, r4
    46b4:	f7ff fed2 	bl	445c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    46b8:	2001      	movs	r0, #1
    46ba:	f7ff fecf 	bl	445c <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    46be:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
    46c2:	f000 fbbb 	bl	4e3c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    46c6:	4b21      	ldr	r3, [pc, #132]	; (474c <z_cstart+0xfc>)
	_kernel.ready_q.cache = &z_main_thread;
    46c8:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    46ca:	4921      	ldr	r1, [pc, #132]	; (4750 <z_cstart+0x100>)
    46cc:	9305      	str	r3, [sp, #20]
    46ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
    46d2:	4653      	mov	r3, sl
    46d4:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    46d8:	e9cd 4401 	strd	r4, r4, [sp, #4]
    46dc:	9400      	str	r4, [sp, #0]
    46de:	4630      	mov	r0, r6
    46e0:	f000 fcfe 	bl	50e0 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    46e4:	7b73      	ldrb	r3, [r6, #13]
    46e6:	4680      	mov	r8, r0
    46e8:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    46ec:	4630      	mov	r0, r6
    46ee:	7373      	strb	r3, [r6, #13]
    46f0:	f002 f9ed 	bl	6ace <z_ready_thread>
	z_setup_new_thread(thread, stack,
    46f4:	230f      	movs	r3, #15
    46f6:	e9cd 4302 	strd	r4, r3, [sp, #8]
    46fa:	4916      	ldr	r1, [pc, #88]	; (4754 <z_cstart+0x104>)
    46fc:	4b16      	ldr	r3, [pc, #88]	; (4758 <z_cstart+0x108>)
    46fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4702:	e9cd b404 	strd	fp, r4, [sp, #16]
    4706:	e9cd 5400 	strd	r5, r4, [sp]
    470a:	4638      	mov	r0, r7
    470c:	f000 fce8 	bl	50e0 <z_setup_new_thread>
    4710:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    4712:	60ef      	str	r7, [r5, #12]
    4714:	f023 0304 	bic.w	r3, r3, #4
    4718:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    471a:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    471e:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
    4722:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    4724:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4728:	4652      	mov	r2, sl
    472a:	4641      	mov	r1, r8
    472c:	4630      	mov	r0, r6
    472e:	f7fe f9d9 	bl	2ae4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4732:	bf00      	nop
    4734:	20001ce0 	.word	0x20001ce0
    4738:	e000ed00 	.word	0xe000ed00
    473c:	20000288 	.word	0x20000288
    4740:	0000461d 	.word	0x0000461d
    4744:	20000208 	.word	0x20000208
    4748:	20000618 	.word	0x20000618
    474c:	000078d1 	.word	0x000078d1
    4750:	20000fa0 	.word	0x20000fa0
    4754:	200013a0 	.word	0x200013a0
    4758:	000045dd 	.word	0x000045dd

0000475c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    475c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    475e:	4b0e      	ldr	r3, [pc, #56]	; (4798 <init_mem_slab_module+0x3c>)
    4760:	4c0e      	ldr	r4, [pc, #56]	; (479c <init_mem_slab_module+0x40>)
    4762:	42a3      	cmp	r3, r4
    4764:	d301      	bcc.n	476a <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    4766:	2000      	movs	r0, #0
	return rc;
}
    4768:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    476a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    476e:	ea41 0200 	orr.w	r2, r1, r0
    4772:	f012 0203 	ands.w	r2, r2, #3
    4776:	d10b      	bne.n	4790 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    4778:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    477a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    477c:	42aa      	cmp	r2, r5
    477e:	d101      	bne.n	4784 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4780:	331c      	adds	r3, #28
    4782:	e7ee      	b.n	4762 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    4784:	695e      	ldr	r6, [r3, #20]
    4786:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    4788:	3201      	adds	r2, #1
		slab->free_list = p;
    478a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    478c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    478e:	e7f5      	b.n	477c <init_mem_slab_module+0x20>
	return rc;
    4790:	f06f 0015 	mvn.w	r0, #21
    4794:	e7e8      	b.n	4768 <init_mem_slab_module+0xc>
    4796:	bf00      	nop
    4798:	2000011c 	.word	0x2000011c
    479c:	2000011c 	.word	0x2000011c

000047a0 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    47a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    47a2:	460c      	mov	r4, r1
    47a4:	f04f 0520 	mov.w	r5, #32
    47a8:	f3ef 8111 	mrs	r1, BASEPRI
    47ac:	f385 8811 	msr	BASEPRI, r5
    47b0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    47b4:	6945      	ldr	r5, [r0, #20]
    47b6:	b15d      	cbz	r5, 47d0 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    47b8:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    47ba:	682b      	ldr	r3, [r5, #0]
    47bc:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    47be:	6983      	ldr	r3, [r0, #24]
    47c0:	3301      	adds	r3, #1
    47c2:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    47c4:	2000      	movs	r0, #0
	__asm__ volatile(
    47c6:	f381 8811 	msr	BASEPRI, r1
    47ca:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    47ce:	e011      	b.n	47f4 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    47d0:	ea52 0c03 	orrs.w	ip, r2, r3
    47d4:	d103      	bne.n	47de <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    47d6:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    47d8:	f06f 000b 	mvn.w	r0, #11
    47dc:	e7f3      	b.n	47c6 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    47de:	e9cd 2300 	strd	r2, r3, [sp]
    47e2:	4602      	mov	r2, r0
    47e4:	4804      	ldr	r0, [pc, #16]	; (47f8 <k_mem_slab_alloc+0x58>)
    47e6:	f000 f9b1 	bl	4b4c <z_pend_curr>
		if (result == 0) {
    47ea:	b918      	cbnz	r0, 47f4 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    47ec:	4b03      	ldr	r3, [pc, #12]	; (47fc <k_mem_slab_alloc+0x5c>)
    47ee:	689b      	ldr	r3, [r3, #8]
    47f0:	695b      	ldr	r3, [r3, #20]
    47f2:	6023      	str	r3, [r4, #0]
}
    47f4:	b003      	add	sp, #12
    47f6:	bd30      	pop	{r4, r5, pc}
    47f8:	20000c99 	.word	0x20000c99
    47fc:	20000618 	.word	0x20000618

00004800 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    4800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4802:	4604      	mov	r4, r0
    4804:	460d      	mov	r5, r1
	__asm__ volatile(
    4806:	f04f 0320 	mov.w	r3, #32
    480a:	f3ef 8611 	mrs	r6, BASEPRI
    480e:	f383 8811 	msr	BASEPRI, r3
    4812:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
    4816:	6947      	ldr	r7, [r0, #20]
    4818:	b96f      	cbnz	r7, 4836 <k_mem_slab_free+0x36>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    481a:	f002 f99f 	bl	6b5c <z_unpend_first_thread>

		if (pending_thread != NULL) {
    481e:	b150      	cbz	r0, 4836 <k_mem_slab_free+0x36>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    4820:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    4822:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4824:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    4826:	f002 f952 	bl	6ace <z_ready_thread>
			z_reschedule(&lock, key);
    482a:	4631      	mov	r1, r6
    482c:	4808      	ldr	r0, [pc, #32]	; (4850 <k_mem_slab_free+0x50>)
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
    482e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
    4832:	f000 b909 	b.w	4a48 <z_reschedule>
	**(char ***) mem = slab->free_list;
    4836:	682b      	ldr	r3, [r5, #0]
    4838:	6962      	ldr	r2, [r4, #20]
    483a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    483c:	682b      	ldr	r3, [r5, #0]
    483e:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    4840:	69a3      	ldr	r3, [r4, #24]
    4842:	3b01      	subs	r3, #1
    4844:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    4846:	f386 8811 	msr	BASEPRI, r6
    484a:	f3bf 8f6f 	isb	sy
}
    484e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4850:	20000c99 	.word	0x20000c99

00004854 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4854:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4858:	4604      	mov	r4, r0
    485a:	4617      	mov	r7, r2
    485c:	461e      	mov	r6, r3
	__asm__ volatile(
    485e:	f04f 0320 	mov.w	r3, #32
    4862:	f3ef 8811 	mrs	r8, BASEPRI
    4866:	f383 8811 	msr	BASEPRI, r3
    486a:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    486e:	68c3      	ldr	r3, [r0, #12]
    4870:	4a2f      	ldr	r2, [pc, #188]	; (4930 <z_impl_k_mutex_lock+0xdc>)
    4872:	b16b      	cbz	r3, 4890 <z_impl_k_mutex_lock+0x3c>
    4874:	6880      	ldr	r0, [r0, #8]
    4876:	6891      	ldr	r1, [r2, #8]
    4878:	4288      	cmp	r0, r1
    487a:	d019      	beq.n	48b0 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    487c:	ea57 0306 	orrs.w	r3, r7, r6
    4880:	d118      	bne.n	48b4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    4882:	f388 8811 	msr	BASEPRI, r8
    4886:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    488a:	f06f 000f 	mvn.w	r0, #15
    488e:	e00c      	b.n	48aa <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    4890:	6891      	ldr	r1, [r2, #8]
    4892:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4896:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    4898:	3301      	adds	r3, #1
    489a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    489c:	6893      	ldr	r3, [r2, #8]
    489e:	60a3      	str	r3, [r4, #8]
    48a0:	f388 8811 	msr	BASEPRI, r8
    48a4:	f3bf 8f6f 	isb	sy
		return 0;
    48a8:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    48aa:	b002      	add	sp, #8
    48ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    48b0:	6921      	ldr	r1, [r4, #16]
    48b2:	e7f0      	b.n	4896 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    48b4:	f990 300e 	ldrsb.w	r3, [r0, #14]
    48b8:	f991 100e 	ldrsb.w	r1, [r1, #14]
    48bc:	4299      	cmp	r1, r3
    48be:	bfa8      	it	ge
    48c0:	4619      	movge	r1, r3
    48c2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    48c6:	428b      	cmp	r3, r1
    48c8:	dd2b      	ble.n	4922 <z_impl_k_mutex_lock+0xce>
		resched = adjust_owner_prio(mutex, new_prio);
    48ca:	f002 f890 	bl	69ee <adjust_owner_prio.isra.0>
    48ce:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    48d0:	e9cd 7600 	strd	r7, r6, [sp]
    48d4:	4817      	ldr	r0, [pc, #92]	; (4934 <z_impl_k_mutex_lock+0xe0>)
    48d6:	4622      	mov	r2, r4
    48d8:	4641      	mov	r1, r8
    48da:	f000 f937 	bl	4b4c <z_pend_curr>
	if (got_mutex == 0) {
    48de:	2800      	cmp	r0, #0
    48e0:	d0e3      	beq.n	48aa <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    48e2:	f04f 0320 	mov.w	r3, #32
    48e6:	f3ef 8611 	mrs	r6, BASEPRI
    48ea:	f383 8811 	msr	BASEPRI, r3
    48ee:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    48f2:	6823      	ldr	r3, [r4, #0]
    48f4:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    48f6:	42a3      	cmp	r3, r4
    48f8:	d007      	beq.n	490a <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    48fa:	b133      	cbz	r3, 490a <z_impl_k_mutex_lock+0xb6>
    48fc:	f993 300e 	ldrsb.w	r3, [r3, #14]
    4900:	4299      	cmp	r1, r3
    4902:	bfa8      	it	ge
    4904:	4619      	movge	r1, r3
    4906:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    490a:	68a0      	ldr	r0, [r4, #8]
    490c:	f002 f86f 	bl	69ee <adjust_owner_prio.isra.0>
    4910:	b900      	cbnz	r0, 4914 <z_impl_k_mutex_lock+0xc0>
	if (resched) {
    4912:	b145      	cbz	r5, 4926 <z_impl_k_mutex_lock+0xd2>
		z_reschedule(&lock, key);
    4914:	4807      	ldr	r0, [pc, #28]	; (4934 <z_impl_k_mutex_lock+0xe0>)
    4916:	4631      	mov	r1, r6
    4918:	f000 f896 	bl	4a48 <z_reschedule>
	return -EAGAIN;
    491c:	f06f 000a 	mvn.w	r0, #10
    4920:	e7c3      	b.n	48aa <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    4922:	2500      	movs	r5, #0
    4924:	e7d4      	b.n	48d0 <z_impl_k_mutex_lock+0x7c>
	__asm__ volatile(
    4926:	f386 8811 	msr	BASEPRI, r6
    492a:	f3bf 8f6f 	isb	sy
    492e:	e7f5      	b.n	491c <z_impl_k_mutex_lock+0xc8>
    4930:	20000618 	.word	0x20000618
    4934:	20000c99 	.word	0x20000c99

00004938 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    4938:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
    493a:	6883      	ldr	r3, [r0, #8]
{
    493c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    493e:	2b00      	cmp	r3, #0
    4940:	d032      	beq.n	49a8 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    4942:	4a1c      	ldr	r2, [pc, #112]	; (49b4 <z_impl_k_mutex_unlock+0x7c>)
    4944:	6892      	ldr	r2, [r2, #8]
    4946:	4293      	cmp	r3, r2
    4948:	d131      	bne.n	49ae <z_impl_k_mutex_unlock+0x76>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    494a:	7bda      	ldrb	r2, [r3, #15]
    494c:	3a01      	subs	r2, #1
    494e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    4950:	68c3      	ldr	r3, [r0, #12]
    4952:	2b01      	cmp	r3, #1
    4954:	d005      	beq.n	4962 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    4956:	3b01      	subs	r3, #1
    4958:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    495a:	f000 f93d 	bl	4bd8 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    495e:	2000      	movs	r0, #0
}
    4960:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4962:	f04f 0320 	mov.w	r3, #32
    4966:	f3ef 8511 	mrs	r5, BASEPRI
    496a:	f383 8811 	msr	BASEPRI, r3
    496e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4972:	6901      	ldr	r1, [r0, #16]
    4974:	6880      	ldr	r0, [r0, #8]
    4976:	f002 f83a 	bl	69ee <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    497a:	4620      	mov	r0, r4
    497c:	f002 f8ee 	bl	6b5c <z_unpend_first_thread>
	mutex->owner = new_owner;
    4980:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4982:	b158      	cbz	r0, 499c <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    4984:	f990 200e 	ldrsb.w	r2, [r0, #14]
    4988:	6122      	str	r2, [r4, #16]
    498a:	2200      	movs	r2, #0
    498c:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    498e:	f002 f89e 	bl	6ace <z_ready_thread>
		z_reschedule(&lock, key);
    4992:	4809      	ldr	r0, [pc, #36]	; (49b8 <z_impl_k_mutex_unlock+0x80>)
    4994:	4629      	mov	r1, r5
    4996:	f000 f857 	bl	4a48 <z_reschedule>
    499a:	e7de      	b.n	495a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    499c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    499e:	f385 8811 	msr	BASEPRI, r5
    49a2:	f3bf 8f6f 	isb	sy
    49a6:	e7d8      	b.n	495a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    49a8:	f06f 0015 	mvn.w	r0, #21
    49ac:	e7d8      	b.n	4960 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    49ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    49b2:	e7d5      	b.n	4960 <z_impl_k_mutex_unlock+0x28>
    49b4:	20000618 	.word	0x20000618
    49b8:	20000c99 	.word	0x20000c99

000049bc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    49bc:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    49be:	4c08      	ldr	r4, [pc, #32]	; (49e0 <z_reset_time_slice+0x24>)
    49c0:	6823      	ldr	r3, [r4, #0]
    49c2:	b15b      	cbz	r3, 49dc <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    49c4:	f7fd ff04 	bl	27d0 <sys_clock_elapsed>
    49c8:	4603      	mov	r3, r0
    49ca:	6820      	ldr	r0, [r4, #0]
    49cc:	4a05      	ldr	r2, [pc, #20]	; (49e4 <z_reset_time_slice+0x28>)
    49ce:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    49d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    49d4:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    49d6:	2100      	movs	r1, #0
    49d8:	f002 b90d 	b.w	6bf6 <z_set_timeout_expiry>
}
    49dc:	bd10      	pop	{r4, pc}
    49de:	bf00      	nop
    49e0:	20000650 	.word	0x20000650
    49e4:	20000618 	.word	0x20000618

000049e8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    49e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49ea:	4604      	mov	r4, r0
    49ec:	460d      	mov	r5, r1
	__asm__ volatile(
    49ee:	f04f 0320 	mov.w	r3, #32
    49f2:	f3ef 8611 	mrs	r6, BASEPRI
    49f6:	f383 8811 	msr	BASEPRI, r3
    49fa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    49fe:	4b0f      	ldr	r3, [pc, #60]	; (4a3c <k_sched_time_slice_set+0x54>)
    4a00:	2100      	movs	r1, #0
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    4a02:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    4a06:	f240 30e7 	movw	r0, #999	; 0x3e7
    4a0a:	6119      	str	r1, [r3, #16]
    4a0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4a10:	2300      	movs	r3, #0
    4a12:	fbe4 0107 	umlal	r0, r1, r4, r7
    4a16:	f7fb fb61 	bl	dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    4a1a:	2c00      	cmp	r4, #0
    4a1c:	4b08      	ldr	r3, [pc, #32]	; (4a40 <k_sched_time_slice_set+0x58>)
    4a1e:	dc09      	bgt.n	4a34 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    4a20:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    4a22:	4b08      	ldr	r3, [pc, #32]	; (4a44 <k_sched_time_slice_set+0x5c>)
    4a24:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    4a26:	f7ff ffc9 	bl	49bc <z_reset_time_slice>
	__asm__ volatile(
    4a2a:	f386 8811 	msr	BASEPRI, r6
    4a2e:	f3bf 8f6f 	isb	sy
	}
}
    4a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    4a34:	2802      	cmp	r0, #2
    4a36:	bfb8      	it	lt
    4a38:	2002      	movlt	r0, #2
    4a3a:	e7f1      	b.n	4a20 <k_sched_time_slice_set+0x38>
    4a3c:	20000618 	.word	0x20000618
    4a40:	20000650 	.word	0x20000650
    4a44:	2000064c 	.word	0x2000064c

00004a48 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4a48:	b949      	cbnz	r1, 4a5e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4a4a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    4a4e:	b930      	cbnz	r0, 4a5e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    4a50:	4b05      	ldr	r3, [pc, #20]	; (4a68 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    4a52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4a54:	689b      	ldr	r3, [r3, #8]
    4a56:	429a      	cmp	r2, r3
    4a58:	d001      	beq.n	4a5e <z_reschedule+0x16>
	ret = arch_swap(key);
    4a5a:	f7fd bfa3 	b.w	29a4 <arch_swap>
    4a5e:	f381 8811 	msr	BASEPRI, r1
    4a62:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    4a66:	4770      	bx	lr
    4a68:	20000618 	.word	0x20000618

00004a6c <k_sched_lock>:
	__asm__ volatile(
    4a6c:	f04f 0320 	mov.w	r3, #32
    4a70:	f3ef 8111 	mrs	r1, BASEPRI
    4a74:	f383 8811 	msr	BASEPRI, r3
    4a78:	f3bf 8f6f 	isb	sy
    4a7c:	4b04      	ldr	r3, [pc, #16]	; (4a90 <k_sched_lock+0x24>)
    4a7e:	689a      	ldr	r2, [r3, #8]
    4a80:	7bd3      	ldrb	r3, [r2, #15]
    4a82:	3b01      	subs	r3, #1
    4a84:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    4a86:	f381 8811 	msr	BASEPRI, r1
    4a8a:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    4a8e:	4770      	bx	lr
    4a90:	20000618 	.word	0x20000618

00004a94 <update_cache>:
{
    4a94:	b538      	push	{r3, r4, r5, lr}
	thread = _priq_run_best(&_kernel.ready_q.runq);
    4a96:	4d0d      	ldr	r5, [pc, #52]	; (4acc <update_cache+0x38>)
{
    4a98:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    4a9a:	f105 0028 	add.w	r0, r5, #40	; 0x28
    4a9e:	f001 ffe6 	bl	6a6e <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4aa2:	4604      	mov	r4, r0
    4aa4:	b900      	cbnz	r0, 4aa8 <update_cache+0x14>
    4aa6:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    4aa8:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    4aaa:	b94a      	cbnz	r2, 4ac0 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    4aac:	7b5a      	ldrb	r2, [r3, #13]
    4aae:	06d2      	lsls	r2, r2, #27
    4ab0:	d106      	bne.n	4ac0 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4ab2:	69a2      	ldr	r2, [r4, #24]
    4ab4:	b922      	cbnz	r2, 4ac0 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
    4ab6:	89da      	ldrh	r2, [r3, #14]
    4ab8:	2a7f      	cmp	r2, #127	; 0x7f
    4aba:	d901      	bls.n	4ac0 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    4abc:	626b      	str	r3, [r5, #36]	; 0x24
}
    4abe:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    4ac0:	429c      	cmp	r4, r3
    4ac2:	d001      	beq.n	4ac8 <update_cache+0x34>
			z_reset_time_slice();
    4ac4:	f7ff ff7a 	bl	49bc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    4ac8:	626c      	str	r4, [r5, #36]	; 0x24
}
    4aca:	e7f8      	b.n	4abe <update_cache+0x2a>
    4acc:	20000618 	.word	0x20000618

00004ad0 <unready_thread>:
{
    4ad0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    4ad2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    4ad6:	7b43      	ldrb	r3, [r0, #13]
    4ad8:	2a00      	cmp	r2, #0
{
    4ada:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4adc:	da04      	bge.n	4ae8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4ae2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    4ae4:	f001 ff8b 	bl	69fe <sys_dlist_remove>
	update_cache(thread == _current);
    4ae8:	4b04      	ldr	r3, [pc, #16]	; (4afc <unready_thread+0x2c>)
    4aea:	6898      	ldr	r0, [r3, #8]
    4aec:	1a43      	subs	r3, r0, r1
    4aee:	4258      	negs	r0, r3
    4af0:	4158      	adcs	r0, r3
}
    4af2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    4af6:	f7ff bfcd 	b.w	4a94 <update_cache>
    4afa:	bf00      	nop
    4afc:	20000618 	.word	0x20000618

00004b00 <pend>:
{
    4b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b04:	4606      	mov	r6, r0
    4b06:	4615      	mov	r5, r2
    4b08:	461c      	mov	r4, r3
	__asm__ volatile(
    4b0a:	f04f 0320 	mov.w	r3, #32
    4b0e:	f3ef 8711 	mrs	r7, BASEPRI
    4b12:	f383 8811 	msr	BASEPRI, r3
    4b16:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    4b1a:	f001 ffae 	bl	6a7a <add_to_waitq_locked>
	__asm__ volatile(
    4b1e:	f387 8811 	msr	BASEPRI, r7
    4b22:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4b26:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    4b2a:	bf08      	it	eq
    4b2c:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    4b30:	d008      	beq.n	4b44 <pend+0x44>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4b32:	462a      	mov	r2, r5
    4b34:	4623      	mov	r3, r4
    4b36:	f106 0018 	add.w	r0, r6, #24
    4b3a:	4903      	ldr	r1, [pc, #12]	; (4b48 <pend+0x48>)
}
    4b3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4b40:	f000 bbf8 	b.w	5334 <z_add_timeout>
    4b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b48:	00006aef 	.word	0x00006aef

00004b4c <z_pend_curr>:
{
    4b4c:	b510      	push	{r4, lr}
	pending_current = _current;
    4b4e:	4b07      	ldr	r3, [pc, #28]	; (4b6c <z_pend_curr+0x20>)
    4b50:	6898      	ldr	r0, [r3, #8]
    4b52:	4b07      	ldr	r3, [pc, #28]	; (4b70 <z_pend_curr+0x24>)
{
    4b54:	460c      	mov	r4, r1
	pending_current = _current;
    4b56:	6018      	str	r0, [r3, #0]
{
    4b58:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    4b5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4b5e:	f7ff ffcf 	bl	4b00 <pend>
    4b62:	4620      	mov	r0, r4
}
    4b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4b68:	f7fd bf1c 	b.w	29a4 <arch_swap>
    4b6c:	20000618 	.word	0x20000618
    4b70:	20000648 	.word	0x20000648

00004b74 <z_impl_k_thread_suspend>:
{
    4b74:	b570      	push	{r4, r5, r6, lr}
    4b76:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4b78:	3018      	adds	r0, #24
    4b7a:	f002 f816 	bl	6baa <z_abort_timeout>
	__asm__ volatile(
    4b7e:	f04f 0320 	mov.w	r3, #32
    4b82:	f3ef 8611 	mrs	r6, BASEPRI
    4b86:	f383 8811 	msr	BASEPRI, r3
    4b8a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    4b8e:	f994 200d 	ldrsb.w	r2, [r4, #13]
    4b92:	7b63      	ldrb	r3, [r4, #13]
    4b94:	2a00      	cmp	r2, #0
    4b96:	da05      	bge.n	4ba4 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4b9c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4b9e:	4620      	mov	r0, r4
    4ba0:	f001 ff2d 	bl	69fe <sys_dlist_remove>
		update_cache(thread == _current);
    4ba4:	4d0b      	ldr	r5, [pc, #44]	; (4bd4 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4ba6:	7b63      	ldrb	r3, [r4, #13]
    4ba8:	68a8      	ldr	r0, [r5, #8]
    4baa:	f043 0310 	orr.w	r3, r3, #16
    4bae:	7363      	strb	r3, [r4, #13]
    4bb0:	1b03      	subs	r3, r0, r4
    4bb2:	4258      	negs	r0, r3
    4bb4:	4158      	adcs	r0, r3
    4bb6:	f7ff ff6d 	bl	4a94 <update_cache>
	__asm__ volatile(
    4bba:	f386 8811 	msr	BASEPRI, r6
    4bbe:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    4bc2:	68ab      	ldr	r3, [r5, #8]
    4bc4:	42a3      	cmp	r3, r4
    4bc6:	d103      	bne.n	4bd0 <z_impl_k_thread_suspend+0x5c>
}
    4bc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    4bcc:	f001 bf45 	b.w	6a5a <z_reschedule_unlocked>
}
    4bd0:	bd70      	pop	{r4, r5, r6, pc}
    4bd2:	bf00      	nop
    4bd4:	20000618 	.word	0x20000618

00004bd8 <k_sched_unlock>:
{
    4bd8:	b510      	push	{r4, lr}
	__asm__ volatile(
    4bda:	f04f 0320 	mov.w	r3, #32
    4bde:	f3ef 8411 	mrs	r4, BASEPRI
    4be2:	f383 8811 	msr	BASEPRI, r3
    4be6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    4bea:	4b08      	ldr	r3, [pc, #32]	; (4c0c <k_sched_unlock+0x34>)
    4bec:	689a      	ldr	r2, [r3, #8]
    4bee:	7bd3      	ldrb	r3, [r2, #15]
    4bf0:	3301      	adds	r3, #1
    4bf2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    4bf4:	2000      	movs	r0, #0
    4bf6:	f7ff ff4d 	bl	4a94 <update_cache>
	__asm__ volatile(
    4bfa:	f384 8811 	msr	BASEPRI, r4
    4bfe:	f3bf 8f6f 	isb	sy
}
    4c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    4c06:	f001 bf28 	b.w	6a5a <z_reschedule_unlocked>
    4c0a:	bf00      	nop
    4c0c:	20000618 	.word	0x20000618

00004c10 <move_thread_to_end_of_prio_q>:
{
    4c10:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    4c12:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    4c16:	7b43      	ldrb	r3, [r0, #13]
    4c18:	2a00      	cmp	r2, #0
{
    4c1a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4c1c:	da04      	bge.n	4c28 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4c22:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4c24:	f001 feeb 	bl	69fe <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4c28:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    4c2a:	4a15      	ldr	r2, [pc, #84]	; (4c80 <move_thread_to_end_of_prio_q+0x70>)
    4c2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4c30:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    4c32:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4c36:	f102 0528 	add.w	r5, r2, #40	; 0x28
    4c3a:	42ab      	cmp	r3, r5
    4c3c:	d01b      	beq.n	4c76 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4c3e:	b1d3      	cbz	r3, 4c76 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    4c40:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    4c44:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    4c48:	4286      	cmp	r6, r0
    4c4a:	d00f      	beq.n	4c6c <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    4c4c:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4c4e:	2800      	cmp	r0, #0
    4c50:	dd0c      	ble.n	4c6c <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    4c52:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    4c54:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    4c58:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    4c5a:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    4c5c:	6890      	ldr	r0, [r2, #8]
    4c5e:	1a43      	subs	r3, r0, r1
    4c60:	4258      	negs	r0, r3
}
    4c62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    4c66:	4158      	adcs	r0, r3
    4c68:	f7ff bf14 	b.w	4a94 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4c6c:	42a3      	cmp	r3, r4
    4c6e:	d002      	beq.n	4c76 <move_thread_to_end_of_prio_q+0x66>
    4c70:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4c72:	2b00      	cmp	r3, #0
    4c74:	d1e6      	bne.n	4c44 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    4c76:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    4c7a:	6021      	str	r1, [r4, #0]
	list->tail = node;
    4c7c:	62d1      	str	r1, [r2, #44]	; 0x2c
}
    4c7e:	e7ed      	b.n	4c5c <move_thread_to_end_of_prio_q+0x4c>
    4c80:	20000618 	.word	0x20000618

00004c84 <z_time_slice>:
{
    4c84:	b538      	push	{r3, r4, r5, lr}
    4c86:	4601      	mov	r1, r0
	__asm__ volatile(
    4c88:	f04f 0320 	mov.w	r3, #32
    4c8c:	f3ef 8411 	mrs	r4, BASEPRI
    4c90:	f383 8811 	msr	BASEPRI, r3
    4c94:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    4c98:	4b15      	ldr	r3, [pc, #84]	; (4cf0 <z_time_slice+0x6c>)
    4c9a:	4a16      	ldr	r2, [pc, #88]	; (4cf4 <z_time_slice+0x70>)
    4c9c:	6898      	ldr	r0, [r3, #8]
    4c9e:	6815      	ldr	r5, [r2, #0]
    4ca0:	42a8      	cmp	r0, r5
    4ca2:	d106      	bne.n	4cb2 <z_time_slice+0x2e>
			z_reset_time_slice();
    4ca4:	f7ff fe8a 	bl	49bc <z_reset_time_slice>
	__asm__ volatile(
    4ca8:	f384 8811 	msr	BASEPRI, r4
    4cac:	f3bf 8f6f 	isb	sy
}
    4cb0:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    4cb2:	2500      	movs	r5, #0
    4cb4:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    4cb6:	4a10      	ldr	r2, [pc, #64]	; (4cf8 <z_time_slice+0x74>)
    4cb8:	6812      	ldr	r2, [r2, #0]
    4cba:	b1ba      	cbz	r2, 4cec <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    4cbc:	89c2      	ldrh	r2, [r0, #14]
    4cbe:	2a7f      	cmp	r2, #127	; 0x7f
    4cc0:	d814      	bhi.n	4cec <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
    4cc2:	7b42      	ldrb	r2, [r0, #13]
    4cc4:	06d2      	lsls	r2, r2, #27
    4cc6:	d111      	bne.n	4cec <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4cc8:	4a0c      	ldr	r2, [pc, #48]	; (4cfc <z_time_slice+0x78>)
    4cca:	f990 500e 	ldrsb.w	r5, [r0, #14]
    4cce:	6812      	ldr	r2, [r2, #0]
    4cd0:	4295      	cmp	r5, r2
    4cd2:	db0b      	blt.n	4cec <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    4cd4:	4a0a      	ldr	r2, [pc, #40]	; (4d00 <z_time_slice+0x7c>)
    4cd6:	4290      	cmp	r0, r2
    4cd8:	d008      	beq.n	4cec <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
    4cda:	691a      	ldr	r2, [r3, #16]
    4cdc:	428a      	cmp	r2, r1
    4cde:	dc02      	bgt.n	4ce6 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
    4ce0:	f7ff ff96 	bl	4c10 <move_thread_to_end_of_prio_q>
    4ce4:	e7de      	b.n	4ca4 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
    4ce6:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
    4ce8:	611a      	str	r2, [r3, #16]
    4cea:	e7dd      	b.n	4ca8 <z_time_slice+0x24>
    4cec:	2200      	movs	r2, #0
    4cee:	e7fb      	b.n	4ce8 <z_time_slice+0x64>
    4cf0:	20000618 	.word	0x20000618
    4cf4:	20000648 	.word	0x20000648
    4cf8:	20000650 	.word	0x20000650
    4cfc:	2000064c 	.word	0x2000064c
    4d00:	20000208 	.word	0x20000208

00004d04 <ready_thread>:
{
    4d04:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4d06:	f990 200d 	ldrsb.w	r2, [r0, #13]
    4d0a:	7b43      	ldrb	r3, [r0, #13]
    4d0c:	2a00      	cmp	r2, #0
    4d0e:	db2a      	blt.n	4d66 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4d10:	06da      	lsls	r2, r3, #27
    4d12:	d128      	bne.n	4d66 <ready_thread+0x62>
    4d14:	6982      	ldr	r2, [r0, #24]
    4d16:	bb32      	cbnz	r2, 4d66 <ready_thread+0x62>
	return list->head == list;
    4d18:	4a14      	ldr	r2, [pc, #80]	; (4d6c <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    4d1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4d1e:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    4d20:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d24:	f102 0528 	add.w	r5, r2, #40	; 0x28
    4d28:	42ab      	cmp	r3, r5
    4d2a:	d017      	beq.n	4d5c <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4d2c:	b1b3      	cbz	r3, 4d5c <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    4d2e:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    4d32:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    4d36:	428e      	cmp	r6, r1
    4d38:	d00b      	beq.n	4d52 <ready_thread+0x4e>
		return b2 - b1;
    4d3a:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4d3c:	2900      	cmp	r1, #0
    4d3e:	dd08      	ble.n	4d52 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    4d40:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4d42:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    4d46:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    4d48:	6058      	str	r0, [r3, #4]
}
    4d4a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    4d4c:	2000      	movs	r0, #0
    4d4e:	f7ff bea1 	b.w	4a94 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4d52:	42a3      	cmp	r3, r4
    4d54:	d002      	beq.n	4d5c <ready_thread+0x58>
    4d56:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4d58:	2b00      	cmp	r3, #0
    4d5a:	d1ea      	bne.n	4d32 <ready_thread+0x2e>
	node->prev = tail;
    4d5c:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    4d60:	6020      	str	r0, [r4, #0]
	list->tail = node;
    4d62:	62d0      	str	r0, [r2, #44]	; 0x2c
}
    4d64:	e7f1      	b.n	4d4a <ready_thread+0x46>
}
    4d66:	bc70      	pop	{r4, r5, r6}
    4d68:	4770      	bx	lr
    4d6a:	bf00      	nop
    4d6c:	20000618 	.word	0x20000618

00004d70 <z_sched_start>:
{
    4d70:	b510      	push	{r4, lr}
	__asm__ volatile(
    4d72:	f04f 0220 	mov.w	r2, #32
    4d76:	f3ef 8411 	mrs	r4, BASEPRI
    4d7a:	f382 8811 	msr	BASEPRI, r2
    4d7e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    4d82:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    4d84:	0751      	lsls	r1, r2, #29
    4d86:	d404      	bmi.n	4d92 <z_sched_start+0x22>
	__asm__ volatile(
    4d88:	f384 8811 	msr	BASEPRI, r4
    4d8c:	f3bf 8f6f 	isb	sy
}
    4d90:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4d92:	f022 0204 	bic.w	r2, r2, #4
    4d96:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    4d98:	f7ff ffb4 	bl	4d04 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4d9c:	4621      	mov	r1, r4
    4d9e:	4802      	ldr	r0, [pc, #8]	; (4da8 <z_sched_start+0x38>)
}
    4da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    4da4:	f7ff be50 	b.w	4a48 <z_reschedule>
    4da8:	20000c99 	.word	0x20000c99

00004dac <z_set_prio>:
{
    4dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4dae:	4604      	mov	r4, r0
	__asm__ volatile(
    4db0:	f04f 0320 	mov.w	r3, #32
    4db4:	f3ef 8611 	mrs	r6, BASEPRI
    4db8:	f383 8811 	msr	BASEPRI, r3
    4dbc:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    4dc0:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4dc2:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    4dc4:	b249      	sxtb	r1, r1
    4dc6:	d133      	bne.n	4e30 <z_set_prio+0x84>
		if (need_sched) {
    4dc8:	6982      	ldr	r2, [r0, #24]
    4dca:	bb8a      	cbnz	r2, 4e30 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4dd0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4dd2:	f001 fe14 	bl	69fe <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4dd6:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    4dd8:	4a17      	ldr	r2, [pc, #92]	; (4e38 <z_set_prio+0x8c>)
				thread->base.prio = prio;
    4dda:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    4ddc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4de0:	7343      	strb	r3, [r0, #13]
    4de2:	4610      	mov	r0, r2
    4de4:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4de8:	4283      	cmp	r3, r0
    4dea:	d01b      	beq.n	4e24 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4dec:	b1d3      	cbz	r3, 4e24 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    4dee:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
	int32_t b2 = thread_2->base.prio;
    4df0:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    4df4:	42a9      	cmp	r1, r5
    4df6:	d010      	beq.n	4e1a <z_set_prio+0x6e>
		return b2 - b1;
    4df8:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    4dfa:	2d00      	cmp	r5, #0
    4dfc:	dd0d      	ble.n	4e1a <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    4dfe:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4e00:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4e04:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4e06:	605c      	str	r4, [r3, #4]
			update_cache(1);
    4e08:	2001      	movs	r0, #1
    4e0a:	f7ff fe43 	bl	4a94 <update_cache>
    4e0e:	2001      	movs	r0, #1
	__asm__ volatile(
    4e10:	f386 8811 	msr	BASEPRI, r6
    4e14:	f3bf 8f6f 	isb	sy
}
    4e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    4e1a:	42bb      	cmp	r3, r7
    4e1c:	d002      	beq.n	4e24 <z_set_prio+0x78>
    4e1e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4e20:	2b00      	cmp	r3, #0
    4e22:	d1e5      	bne.n	4df0 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    4e24:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->prev = tail;
    4e26:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    4e2a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4e2c:	62d4      	str	r4, [r2, #44]	; 0x2c
}
    4e2e:	e7eb      	b.n	4e08 <z_set_prio+0x5c>
			thread->base.prio = prio;
    4e30:	73a1      	strb	r1, [r4, #14]
    4e32:	2000      	movs	r0, #0
    4e34:	e7ec      	b.n	4e10 <z_set_prio+0x64>
    4e36:	bf00      	nop
    4e38:	20000618 	.word	0x20000618

00004e3c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    4e3c:	4b04      	ldr	r3, [pc, #16]	; (4e50 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    4e3e:	2100      	movs	r1, #0
    4e40:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    4e44:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    4e48:	4608      	mov	r0, r1
    4e4a:	f7ff bdcd 	b.w	49e8 <k_sched_time_slice_set>
    4e4e:	bf00      	nop
    4e50:	20000618 	.word	0x20000618

00004e54 <z_impl_k_yield>:

void z_impl_k_yield(void)
{
	__ASSERT(!arch_is_in_isr(), "");

	if (!z_is_idle_thread_object(_current)) {
    4e54:	4925      	ldr	r1, [pc, #148]	; (4eec <z_impl_k_yield+0x98>)
{
    4e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    4e58:	688a      	ldr	r2, [r1, #8]
    4e5a:	4b25      	ldr	r3, [pc, #148]	; (4ef0 <z_impl_k_yield+0x9c>)
    4e5c:	429a      	cmp	r2, r3
    4e5e:	d03b      	beq.n	4ed8 <z_impl_k_yield+0x84>
	__asm__ volatile(
    4e60:	f04f 0320 	mov.w	r3, #32
    4e64:	f3ef 8511 	mrs	r5, BASEPRI
    4e68:	f383 8811 	msr	BASEPRI, r3
    4e6c:	f3bf 8f6f 	isb	sy
		k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

		if (!IS_ENABLED(CONFIG_SMP) ||
			z_is_thread_queued(_current)) {
			dequeue_thread(&_kernel.ready_q.runq,
    4e70:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4e72:	7b43      	ldrb	r3, [r0, #13]
    4e74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4e78:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4e7a:	f001 fdc0 	bl	69fe <sys_dlist_remove>
					_current);
		}
		queue_thread(&_kernel.ready_q.runq, _current);
    4e7e:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4e80:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    4e82:	4608      	mov	r0, r1
    4e84:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4e88:	735a      	strb	r2, [r3, #13]
    4e8a:	f850 2f28 	ldr.w	r2, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4e8e:	4282      	cmp	r2, r0
    4e90:	d01c      	beq.n	4ecc <z_impl_k_yield+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4e92:	b1da      	cbz	r2, 4ecc <z_impl_k_yield+0x78>
	return (node == list->tail) ? NULL : node->next;
    4e94:	6acf      	ldr	r7, [r1, #44]	; 0x2c
	int32_t b1 = thread_1->base.prio;
    4e96:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    4e9a:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    4e9e:	42a6      	cmp	r6, r4
    4ea0:	d00f      	beq.n	4ec2 <z_impl_k_yield+0x6e>
		return b2 - b1;
    4ea2:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4ea4:	2c00      	cmp	r4, #0
    4ea6:	dd0c      	ble.n	4ec2 <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
    4ea8:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    4eaa:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    4eae:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    4eb0:	6053      	str	r3, [r2, #4]
		update_cache(1);
    4eb2:	2001      	movs	r0, #1
    4eb4:	f7ff fdee 	bl	4a94 <update_cache>
    4eb8:	4628      	mov	r0, r5
		z_swap(&sched_spinlock, key);
	} else {
		z_swap_unlocked();
	}
}
    4eba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4ebe:	f7fd bd71 	b.w	29a4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    4ec2:	42ba      	cmp	r2, r7
    4ec4:	d002      	beq.n	4ecc <z_impl_k_yield+0x78>
    4ec6:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4ec8:	2a00      	cmp	r2, #0
    4eca:	d1e6      	bne.n	4e9a <z_impl_k_yield+0x46>
	sys_dnode_t *const tail = list->tail;
    4ecc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	node->prev = tail;
    4ece:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    4ed2:	6013      	str	r3, [r2, #0]
	list->tail = node;
    4ed4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
    4ed6:	e7ec      	b.n	4eb2 <z_impl_k_yield+0x5e>
    4ed8:	f04f 0320 	mov.w	r3, #32
    4edc:	f3ef 8011 	mrs	r0, BASEPRI
    4ee0:	f383 8811 	msr	BASEPRI, r3
    4ee4:	f3bf 8f6f 	isb	sy
    4ee8:	e7e7      	b.n	4eba <z_impl_k_yield+0x66>
    4eea:	bf00      	nop
    4eec:	20000618 	.word	0x20000618
    4ef0:	20000208 	.word	0x20000208

00004ef4 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    4ef4:	ea50 0301 	orrs.w	r3, r0, r1
{
    4ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4efc:	4605      	mov	r5, r0
    4efe:	460e      	mov	r6, r1
	if (ticks == 0) {
    4f00:	d104      	bne.n	4f0c <z_tick_sleep+0x18>
	z_impl_k_yield();
    4f02:	f7ff ffa7 	bl	4e54 <z_impl_k_yield>
		k_yield();
		return 0;
    4f06:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    4f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    4f0c:	f001 fe8d 	bl	6c2a <sys_clock_tick_get_32>
    4f10:	4604      	mov	r4, r0
    4f12:	f04f 0320 	mov.w	r3, #32
    4f16:	f3ef 8811 	mrs	r8, BASEPRI
    4f1a:	f383 8811 	msr	BASEPRI, r3
    4f1e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    4f22:	4f0f      	ldr	r7, [pc, #60]	; (4f60 <z_tick_sleep+0x6c>)
    4f24:	4b0f      	ldr	r3, [pc, #60]	; (4f64 <z_tick_sleep+0x70>)
    4f26:	68b8      	ldr	r0, [r7, #8]
    4f28:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    4f2a:	f7ff fdd1 	bl	4ad0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    4f2e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4f30:	490d      	ldr	r1, [pc, #52]	; (4f68 <z_tick_sleep+0x74>)
    4f32:	462a      	mov	r2, r5
    4f34:	4633      	mov	r3, r6
    4f36:	3018      	adds	r0, #24
    4f38:	f000 f9fc 	bl	5334 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4f3c:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4f3e:	7b53      	ldrb	r3, [r2, #13]
    4f40:	f043 0310 	orr.w	r3, r3, #16
    4f44:	7353      	strb	r3, [r2, #13]
    4f46:	4640      	mov	r0, r8
    4f48:	f7fd fd2c 	bl	29a4 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    4f4c:	f001 fe6d 	bl	6c2a <sys_clock_tick_get_32>
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    4f50:	1962      	adds	r2, r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    4f52:	1a10      	subs	r0, r2, r0
    4f54:	eb63 0303 	sbc.w	r3, r3, r3
    4f58:	2b00      	cmp	r3, #0
    4f5a:	bfb8      	it	lt
    4f5c:	2000      	movlt	r0, #0
    4f5e:	e7d3      	b.n	4f08 <z_tick_sleep+0x14>
    4f60:	20000618 	.word	0x20000618
    4f64:	20000648 	.word	0x20000648
    4f68:	00006aef 	.word	0x00006aef

00004f6c <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4f6c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    4f70:	bf08      	it	eq
    4f72:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    4f76:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4f78:	d106      	bne.n	4f88 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    4f7a:	4b08      	ldr	r3, [pc, #32]	; (4f9c <z_impl_k_sleep+0x30>)
    4f7c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4f7e:	f7ff fdf9 	bl	4b74 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    4f82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
    4f86:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    4f88:	f7ff ffb4 	bl	4ef4 <z_tick_sleep>
		} else {
			return (t * to_hz + off) / from_hz;
    4f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4f90:	fb80 0303 	smull	r0, r3, r0, r3
    4f94:	0bc0      	lsrs	r0, r0, #15
    4f96:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    4f9a:	e7f4      	b.n	4f86 <z_impl_k_sleep+0x1a>
    4f9c:	20000618 	.word	0x20000618

00004fa0 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    4fa0:	4b01      	ldr	r3, [pc, #4]	; (4fa8 <z_impl_k_current_get+0x8>)
    4fa2:	6898      	ldr	r0, [r3, #8]
    4fa4:	4770      	bx	lr
    4fa6:	bf00      	nop
    4fa8:	20000618 	.word	0x20000618

00004fac <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    4fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4fb0:	4604      	mov	r4, r0
    4fb2:	f04f 0320 	mov.w	r3, #32
    4fb6:	f3ef 8611 	mrs	r6, BASEPRI
    4fba:	f383 8811 	msr	BASEPRI, r3
    4fbe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    4fc2:	7b43      	ldrb	r3, [r0, #13]
    4fc4:	071a      	lsls	r2, r3, #28
    4fc6:	d505      	bpl.n	4fd4 <z_thread_abort+0x28>
	__asm__ volatile(
    4fc8:	f386 8811 	msr	BASEPRI, r6
    4fcc:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    4fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4fd4:	f023 0220 	bic.w	r2, r3, #32
    4fd8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    4fdc:	09d2      	lsrs	r2, r2, #7
    4fde:	d120      	bne.n	5022 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4fe0:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    4fe2:	68a3      	ldr	r3, [r4, #8]
    4fe4:	b113      	cbz	r3, 4fec <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    4fe6:	4620      	mov	r0, r4
    4fe8:	f001 fd11 	bl	6a0e <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    4fec:	f104 0018 	add.w	r0, r4, #24
    4ff0:	f001 fddb 	bl	6baa <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    4ff4:	f104 0758 	add.w	r7, r4, #88	; 0x58
    4ff8:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    4ffc:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ffe:	42bd      	cmp	r5, r7
    5000:	d000      	beq.n	5004 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    5002:	b9b5      	cbnz	r5, 5032 <z_thread_abort+0x86>
		update_cache(1);
    5004:	2001      	movs	r0, #1
    5006:	f7ff fd45 	bl	4a94 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    500a:	4b10      	ldr	r3, [pc, #64]	; (504c <z_thread_abort+0xa0>)
    500c:	689b      	ldr	r3, [r3, #8]
    500e:	42a3      	cmp	r3, r4
    5010:	d1da      	bne.n	4fc8 <z_thread_abort+0x1c>
    5012:	f3ef 8305 	mrs	r3, IPSR
    5016:	2b00      	cmp	r3, #0
    5018:	d1d6      	bne.n	4fc8 <z_thread_abort+0x1c>
    501a:	4630      	mov	r0, r6
    501c:	f7fd fcc2 	bl	29a4 <arch_swap>
	return ret;
    5020:	e7d2      	b.n	4fc8 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5022:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    5026:	f043 0308 	orr.w	r3, r3, #8
    502a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    502c:	f001 fce7 	bl	69fe <sys_dlist_remove>
}
    5030:	e7d7      	b.n	4fe2 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    5032:	4628      	mov	r0, r5
    5034:	f001 fceb 	bl	6a0e <unpend_thread_no_timeout>
    5038:	f105 0018 	add.w	r0, r5, #24
    503c:	f001 fdb5 	bl	6baa <z_abort_timeout>
    5040:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    5044:	4628      	mov	r0, r5
    5046:	f7ff fe5d 	bl	4d04 <ready_thread>
    504a:	e7d7      	b.n	4ffc <z_thread_abort+0x50>
    504c:	20000618 	.word	0x20000618

00005050 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5050:	b538      	push	{r3, r4, r5, lr}
    5052:	4604      	mov	r4, r0
	__asm__ volatile(
    5054:	f04f 0320 	mov.w	r3, #32
    5058:	f3ef 8511 	mrs	r5, BASEPRI
    505c:	f383 8811 	msr	BASEPRI, r3
    5060:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
    5064:	f001 fd7a 	bl	6b5c <z_unpend_first_thread>

	if (thread != NULL) {
    5068:	b148      	cbz	r0, 507e <z_impl_k_sem_give+0x2e>
    506a:	2200      	movs	r2, #0
    506c:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    506e:	f001 fd2e 	bl	6ace <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    5072:	4629      	mov	r1, r5
    5074:	4805      	ldr	r0, [pc, #20]	; (508c <z_impl_k_sem_give+0x3c>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
    5076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    507a:	f7ff bce5 	b.w	4a48 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    507e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    5082:	429a      	cmp	r2, r3
    5084:	bf18      	it	ne
    5086:	3301      	addne	r3, #1
    5088:	60a3      	str	r3, [r4, #8]
}
    508a:	e7f2      	b.n	5072 <z_impl_k_sem_give+0x22>
    508c:	20000c99 	.word	0x20000c99

00005090 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    5090:	b513      	push	{r0, r1, r4, lr}
    5092:	f04f 0420 	mov.w	r4, #32
    5096:	f3ef 8111 	mrs	r1, BASEPRI
    509a:	f384 8811 	msr	BASEPRI, r4
    509e:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
    50a2:	6884      	ldr	r4, [r0, #8]
    50a4:	b144      	cbz	r4, 50b8 <z_impl_k_sem_take+0x28>
		sem->count--;
    50a6:	3c01      	subs	r4, #1
    50a8:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    50aa:	f381 8811 	msr	BASEPRI, r1
    50ae:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    50b2:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    50b4:	b002      	add	sp, #8
    50b6:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    50b8:	ea52 0403 	orrs.w	r4, r2, r3
    50bc:	d106      	bne.n	50cc <z_impl_k_sem_take+0x3c>
    50be:	f381 8811 	msr	BASEPRI, r1
    50c2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    50c6:	f06f 000f 	mvn.w	r0, #15
    50ca:	e7f3      	b.n	50b4 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    50cc:	e9cd 2300 	strd	r2, r3, [sp]
    50d0:	4602      	mov	r2, r0
    50d2:	4802      	ldr	r0, [pc, #8]	; (50dc <z_impl_k_sem_take+0x4c>)
    50d4:	f7ff fd3a 	bl	4b4c <z_pend_curr>
	return ret;
    50d8:	e7ec      	b.n	50b4 <z_impl_k_sem_take+0x24>
    50da:	bf00      	nop
    50dc:	20000c99 	.word	0x20000c99

000050e0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    50e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    50e4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    50e6:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    50e8:	2604      	movs	r6, #4
    50ea:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    50ec:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    50ee:	7386      	strb	r6, [r0, #14]
	sys_dlist_init(&w->waitq);
    50f0:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    50f4:	1dd6      	adds	r6, r2, #7
	list->tail = (sys_dnode_t *)list;
    50f6:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    50fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    50fc:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    50fe:	f026 0607 	bic.w	r6, r6, #7
	node->prev = NULL;
    5102:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    5106:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    510a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    510c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    510e:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5110:	9202      	str	r2, [sp, #8]
    5112:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5114:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    5116:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    511a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    511c:	9200      	str	r2, [sp, #0]
    511e:	4642      	mov	r2, r8
{
    5120:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5122:	f7fd fcc3 	bl	2aac <arch_new_thread>
	if (!_current) {
    5126:	4b05      	ldr	r3, [pc, #20]	; (513c <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    5128:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    512a:	689b      	ldr	r3, [r3, #8]
    512c:	b103      	cbz	r3, 5130 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    512e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    5130:	6723      	str	r3, [r4, #112]	; 0x70
}
    5132:	4640      	mov	r0, r8
    5134:	b004      	add	sp, #16
    5136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    513a:	bf00      	nop
    513c:	20000618 	.word	0x20000618

00005140 <z_impl_k_thread_create>:
{
    5140:	b5f0      	push	{r4, r5, r6, r7, lr}
    5142:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5144:	2700      	movs	r7, #0
    5146:	9705      	str	r7, [sp, #20]
    5148:	9f10      	ldr	r7, [sp, #64]	; 0x40
    514a:	9704      	str	r7, [sp, #16]
    514c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    514e:	9703      	str	r7, [sp, #12]
    5150:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    5152:	9702      	str	r7, [sp, #8]
{
    5154:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5158:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    515a:	9701      	str	r7, [sp, #4]
    515c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    515e:	9700      	str	r7, [sp, #0]
{
    5160:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5162:	f7ff ffbd 	bl	50e0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    5166:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    516a:	bf08      	it	eq
    516c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    5170:	d005      	beq.n	517e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5172:	ea55 0306 	orrs.w	r3, r5, r6
    5176:	d105      	bne.n	5184 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    5178:	4620      	mov	r0, r4
    517a:	f7ff fdf9 	bl	4d70 <z_sched_start>
}
    517e:	4620      	mov	r0, r4
    5180:	b007      	add	sp, #28
    5182:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5184:	4903      	ldr	r1, [pc, #12]	; (5194 <z_impl_k_thread_create+0x54>)
    5186:	4632      	mov	r2, r6
    5188:	462b      	mov	r3, r5
    518a:	f104 0018 	add.w	r0, r4, #24
    518e:	f000 f8d1 	bl	5334 <z_add_timeout>
    5192:	e7f4      	b.n	517e <z_impl_k_thread_create+0x3e>
    5194:	00006aef 	.word	0x00006aef

00005198 <z_init_static_threads>:
{
    5198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    519c:	4c29      	ldr	r4, [pc, #164]	; (5244 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    519e:	4d2a      	ldr	r5, [pc, #168]	; (5248 <z_init_static_threads+0xb0>)
{
    51a0:	b087      	sub	sp, #28
    51a2:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    51a4:	42ae      	cmp	r6, r5
    51a6:	f104 0430 	add.w	r4, r4, #48	; 0x30
    51aa:	d30f      	bcc.n	51cc <z_init_static_threads+0x34>
	k_sched_lock();
    51ac:	f7ff fc5e 	bl	4a6c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    51b0:	4c24      	ldr	r4, [pc, #144]	; (5244 <z_init_static_threads+0xac>)
    51b2:	f8df 9098 	ldr.w	r9, [pc, #152]	; 524c <z_init_static_threads+0xb4>
    51b6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    51ba:	f240 37e7 	movw	r7, #999	; 0x3e7
    51be:	42ac      	cmp	r4, r5
    51c0:	d320      	bcc.n	5204 <z_init_static_threads+0x6c>
}
    51c2:	b007      	add	sp, #28
    51c4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    51c8:	f7ff bd06 	b.w	4bd8 <k_sched_unlock>
		z_setup_new_thread(
    51cc:	f854 3c04 	ldr.w	r3, [r4, #-4]
    51d0:	9305      	str	r3, [sp, #20]
    51d2:	f854 3c10 	ldr.w	r3, [r4, #-16]
    51d6:	9304      	str	r3, [sp, #16]
    51d8:	f854 3c14 	ldr.w	r3, [r4, #-20]
    51dc:	9303      	str	r3, [sp, #12]
    51de:	f854 3c18 	ldr.w	r3, [r4, #-24]
    51e2:	9302      	str	r3, [sp, #8]
    51e4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    51e8:	9301      	str	r3, [sp, #4]
    51ea:	f854 3c20 	ldr.w	r3, [r4, #-32]
    51ee:	9300      	str	r3, [sp, #0]
    51f0:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    51f4:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    51f8:	f7ff ff72 	bl	50e0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    51fc:	f854 3c30 	ldr.w	r3, [r4, #-48]
    5200:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    5202:	e7ce      	b.n	51a2 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    5204:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5206:	1c5a      	adds	r2, r3, #1
    5208:	d00d      	beq.n	5226 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    520a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    520e:	2100      	movs	r1, #0
    5210:	4638      	mov	r0, r7
    5212:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5216:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    521a:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    521e:	d104      	bne.n	522a <z_init_static_threads+0x92>
	z_sched_start(thread);
    5220:	4640      	mov	r0, r8
    5222:	f7ff fda5 	bl	4d70 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    5226:	3430      	adds	r4, #48	; 0x30
    5228:	e7c9      	b.n	51be <z_init_static_threads+0x26>
    522a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    522e:	2300      	movs	r3, #0
    5230:	f7fa ff54 	bl	dc <__aeabi_uldivmod>
    5234:	4602      	mov	r2, r0
    5236:	460b      	mov	r3, r1
    5238:	f108 0018 	add.w	r0, r8, #24
    523c:	4649      	mov	r1, r9
    523e:	f000 f879 	bl	5334 <z_add_timeout>
    5242:	e7f0      	b.n	5226 <z_init_static_threads+0x8e>
    5244:	2000011c 	.word	0x2000011c
    5248:	2000011c 	.word	0x2000011c
    524c:	00006aef 	.word	0x00006aef

00005250 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    5250:	4a02      	ldr	r2, [pc, #8]	; (525c <boot_banner+0xc>)
    5252:	4903      	ldr	r1, [pc, #12]	; (5260 <boot_banner+0x10>)
    5254:	4803      	ldr	r0, [pc, #12]	; (5264 <boot_banner+0x14>)
    5256:	f000 bc83 	b.w	5b60 <printk>
    525a:	bf00      	nop
    525c:	000071bd 	.word	0x000071bd
    5260:	000078d9 	.word	0x000078d9
    5264:	000078fa 	.word	0x000078fa

00005268 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    5268:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    526a:	4806      	ldr	r0, [pc, #24]	; (5284 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    526c:	4a06      	ldr	r2, [pc, #24]	; (5288 <z_data_copy+0x20>)
    526e:	4907      	ldr	r1, [pc, #28]	; (528c <z_data_copy+0x24>)
    5270:	1a12      	subs	r2, r2, r0
    5272:	f001 fa0a 	bl	668a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    5276:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    527a:	4a05      	ldr	r2, [pc, #20]	; (5290 <z_data_copy+0x28>)
    527c:	4905      	ldr	r1, [pc, #20]	; (5294 <z_data_copy+0x2c>)
    527e:	4806      	ldr	r0, [pc, #24]	; (5298 <z_data_copy+0x30>)
    5280:	f001 ba03 	b.w	668a <memcpy>
    5284:	20000000 	.word	0x20000000
    5288:	20000140 	.word	0x20000140
    528c:	00007924 	.word	0x00007924
    5290:	00000000 	.word	0x00000000
    5294:	00007924 	.word	0x00007924
    5298:	20000000 	.word	0x20000000

0000529c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    529c:	4b03      	ldr	r3, [pc, #12]	; (52ac <elapsed+0x10>)
    529e:	681b      	ldr	r3, [r3, #0]
    52a0:	b90b      	cbnz	r3, 52a6 <elapsed+0xa>
    52a2:	f7fd ba95 	b.w	27d0 <sys_clock_elapsed>
}
    52a6:	2000      	movs	r0, #0
    52a8:	4770      	bx	lr
    52aa:	bf00      	nop
    52ac:	20000654 	.word	0x20000654

000052b0 <next_timeout>:
	return list->head == list;
    52b0:	4b11      	ldr	r3, [pc, #68]	; (52f8 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
    52b2:	b510      	push	{r4, lr}
    52b4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    52b6:	429c      	cmp	r4, r3
    52b8:	bf08      	it	eq
    52ba:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    52bc:	f7ff ffee 	bl	529c <elapsed>
    52c0:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
    52c2:	b16c      	cbz	r4, 52e0 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    52c4:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
    52c8:	1ac0      	subs	r0, r0, r3
    52ca:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    52ce:	2801      	cmp	r0, #1
    52d0:	f173 0200 	sbcs.w	r2, r3, #0
    52d4:	db0d      	blt.n	52f2 <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    52d6:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    52da:	f173 0300 	sbcs.w	r3, r3, #0
    52de:	db01      	blt.n	52e4 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
    52e0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    52e4:	4b05      	ldr	r3, [pc, #20]	; (52fc <next_timeout+0x4c>)
    52e6:	691b      	ldr	r3, [r3, #16]
    52e8:	b113      	cbz	r3, 52f0 <next_timeout+0x40>
    52ea:	4298      	cmp	r0, r3
    52ec:	bfa8      	it	ge
    52ee:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    52f0:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    52f2:	2000      	movs	r0, #0
    52f4:	e7f6      	b.n	52e4 <next_timeout+0x34>
    52f6:	bf00      	nop
    52f8:	2000007c 	.word	0x2000007c
    52fc:	20000618 	.word	0x20000618

00005300 <remove_timeout>:
{
    5300:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    5302:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5304:	b168      	cbz	r0, 5322 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    5306:	4a0a      	ldr	r2, [pc, #40]	; (5330 <remove_timeout+0x30>)
    5308:	6852      	ldr	r2, [r2, #4]
    530a:	4290      	cmp	r0, r2
    530c:	d009      	beq.n	5322 <remove_timeout+0x22>
	if (next(t) != NULL) {
    530e:	b143      	cbz	r3, 5322 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    5310:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    5314:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5318:	1912      	adds	r2, r2, r4
    531a:	eb41 0105 	adc.w	r1, r1, r5
    531e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    5322:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    5324:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5326:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5328:	2300      	movs	r3, #0
	node->prev = NULL;
    532a:	e9c0 3300 	strd	r3, r3, [r0]
}
    532e:	bd30      	pop	{r4, r5, pc}
    5330:	2000007c 	.word	0x2000007c

00005334 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5338:	bf08      	it	eq
    533a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    533e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5342:	4605      	mov	r5, r0
    5344:	460e      	mov	r6, r1
    5346:	4691      	mov	r9, r2
    5348:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    534a:	d066      	beq.n	541a <z_add_timeout+0xe6>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;
    534c:	1c57      	adds	r7, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    534e:	f06f 0a01 	mvn.w	sl, #1
	k_ticks_t ticks = timeout.ticks + 1;
    5352:	f143 0400 	adc.w	r4, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    5356:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    535a:	ebba 0307 	subs.w	r3, sl, r7
    535e:	eb6b 0304 	sbc.w	r3, fp, r4
    5362:	2b00      	cmp	r3, #0
    5364:	db0f      	blt.n	5386 <z_add_timeout+0x52>
		ticks = Z_TICK_ABS(timeout.ticks) - (curr_tick + elapsed());
    5366:	f7ff ff99 	bl	529c <elapsed>
    536a:	4b31      	ldr	r3, [pc, #196]	; (5430 <z_add_timeout+0xfc>)
    536c:	e9d3 2400 	ldrd	r2, r4, [r3]
    5370:	ebba 0202 	subs.w	r2, sl, r2
    5374:	eb6b 0404 	sbc.w	r4, fp, r4
    5378:	ebb2 0209 	subs.w	r2, r2, r9
    537c:	eb64 0408 	sbc.w	r4, r4, r8
    5380:	1a17      	subs	r7, r2, r0
    5382:	eb64 74e0 	sbc.w	r4, r4, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    5386:	60ae      	str	r6, [r5, #8]
	__asm__ volatile(
    5388:	f04f 0320 	mov.w	r3, #32
    538c:	f3ef 8611 	mrs	r6, BASEPRI
    5390:	f383 8811 	msr	BASEPRI, r3
    5394:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    5398:	f7ff ff80 	bl	529c <elapsed>
	ticks = MAX(1, ticks);
    539c:	463a      	mov	r2, r7
    539e:	2f01      	cmp	r7, #1
	return list->head == list;
    53a0:	4f24      	ldr	r7, [pc, #144]	; (5434 <z_add_timeout+0x100>)
    53a2:	f174 0300 	sbcs.w	r3, r4, #0
    53a6:	bfb8      	it	lt
    53a8:	2201      	movlt	r2, #1
    53aa:	683b      	ldr	r3, [r7, #0]
    53ac:	bfb8      	it	lt
    53ae:	2400      	movlt	r4, #0
		to->dticks = ticks + elapsed();
    53b0:	1812      	adds	r2, r2, r0
    53b2:	eb44 74e0 	adc.w	r4, r4, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    53b6:	42bb      	cmp	r3, r7
    53b8:	e9c5 2404 	strd	r2, r4, [r5, #16]
    53bc:	d002      	beq.n	53c4 <z_add_timeout+0x90>
	return (node == list->tail) ? NULL : node->next;
    53be:	f8d7 c004 	ldr.w	ip, [r7, #4]
		for (t = first(); t != NULL; t = next(t)) {
    53c2:	b92b      	cbnz	r3, 53d0 <z_add_timeout+0x9c>
	sys_dnode_t *const tail = list->tail;
    53c4:	687b      	ldr	r3, [r7, #4]
	node->prev = tail;
    53c6:	e9c5 7300 	strd	r7, r3, [r5]
	tail->next = node;
    53ca:	601d      	str	r5, [r3, #0]
	list->tail = node;
    53cc:	607d      	str	r5, [r7, #4]
}
    53ce:	e011      	b.n	53f4 <z_add_timeout+0xc0>
			if (t->dticks > to->dticks) {
    53d0:	e9d3 1404 	ldrd	r1, r4, [r3, #16]
    53d4:	e9d5 2004 	ldrd	r2, r0, [r5, #16]
    53d8:	428a      	cmp	r2, r1
    53da:	eb70 0e04 	sbcs.w	lr, r0, r4
    53de:	da1e      	bge.n	541e <z_add_timeout+0xea>
				t->dticks -= to->dticks;
    53e0:	1a8a      	subs	r2, r1, r2
    53e2:	eb64 0000 	sbc.w	r0, r4, r0
    53e6:	e9c3 2004 	strd	r2, r0, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    53ea:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    53ec:	e9c5 3200 	strd	r3, r2, [r5]
	prev->next = node;
    53f0:	6015      	str	r5, [r2, #0]
	successor->prev = node;
    53f2:	605d      	str	r5, [r3, #4]
	return list->head == list;
    53f4:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    53f6:	42bb      	cmp	r3, r7
    53f8:	d00b      	beq.n	5412 <z_add_timeout+0xde>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    53fa:	429d      	cmp	r5, r3
    53fc:	d109      	bne.n	5412 <z_add_timeout+0xde>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    53fe:	f7ff ff57 	bl	52b0 <next_timeout>

			if (next_time == 0 ||
    5402:	b118      	cbz	r0, 540c <z_add_timeout+0xd8>
			    _current_cpu->slice_ticks != next_time) {
    5404:	4b0c      	ldr	r3, [pc, #48]	; (5438 <z_add_timeout+0x104>)
			if (next_time == 0 ||
    5406:	691b      	ldr	r3, [r3, #16]
    5408:	4283      	cmp	r3, r0
    540a:	d002      	beq.n	5412 <z_add_timeout+0xde>
				sys_clock_set_timeout(next_time, false);
    540c:	2100      	movs	r1, #0
    540e:	f7fd f9ad 	bl	276c <sys_clock_set_timeout>
	__asm__ volatile(
    5412:	f386 8811 	msr	BASEPRI, r6
    5416:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    541a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    541e:	1a52      	subs	r2, r2, r1
    5420:	eb60 0004 	sbc.w	r0, r0, r4
	return (node == list->tail) ? NULL : node->next;
    5424:	4563      	cmp	r3, ip
    5426:	e9c5 2004 	strd	r2, r0, [r5, #16]
    542a:	d0cb      	beq.n	53c4 <z_add_timeout+0x90>
    542c:	681b      	ldr	r3, [r3, #0]
    542e:	e7c8      	b.n	53c2 <z_add_timeout+0x8e>
    5430:	20000308 	.word	0x20000308
    5434:	2000007c 	.word	0x2000007c
    5438:	20000618 	.word	0x20000618

0000543c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    543c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5440:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    5442:	f7ff fc1f 	bl	4c84 <z_time_slice>
	__asm__ volatile(
    5446:	f04f 0320 	mov.w	r3, #32
    544a:	f3ef 8411 	mrs	r4, BASEPRI
    544e:	f383 8811 	msr	BASEPRI, r3
    5452:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    5456:	4e24      	ldr	r6, [pc, #144]	; (54e8 <sys_clock_announce+0xac>)
	return list->head == list;
    5458:	f8df 8090 	ldr.w	r8, [pc, #144]	; 54ec <sys_clock_announce+0xb0>
    545c:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    545e:	4d24      	ldr	r5, [pc, #144]	; (54f0 <sys_clock_announce+0xb4>)
    5460:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5464:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5466:	4540      	cmp	r0, r8
		curr_tick += dt;
    5468:	e9d5 1e00 	ldrd	r1, lr, [r5]
    546c:	ea4f 77e2 	mov.w	r7, r2, asr #31
    5470:	d00b      	beq.n	548a <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5472:	b150      	cbz	r0, 548a <sys_clock_announce+0x4e>
    5474:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    5478:	429a      	cmp	r2, r3
    547a:	eb77 090c 	sbcs.w	r9, r7, ip
    547e:	da16      	bge.n	54ae <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    5480:	1a9b      	subs	r3, r3, r2
    5482:	eb6c 0c07 	sbc.w	ip, ip, r7
    5486:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    548a:	1852      	adds	r2, r2, r1
    548c:	eb4e 0707 	adc.w	r7, lr, r7
    5490:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    5494:	2500      	movs	r5, #0
    5496:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    5498:	f7ff ff0a 	bl	52b0 <next_timeout>
    549c:	4629      	mov	r1, r5
    549e:	f7fd f965 	bl	276c <sys_clock_set_timeout>
	__asm__ volatile(
    54a2:	f384 8811 	msr	BASEPRI, r4
    54a6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    54aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    54ae:	1859      	adds	r1, r3, r1
    54b0:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    54b4:	1ad3      	subs	r3, r2, r3
    54b6:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    54b8:	2200      	movs	r2, #0
    54ba:	2300      	movs	r3, #0
    54bc:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    54c0:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    54c4:	f7ff ff1c 	bl	5300 <remove_timeout>
    54c8:	f384 8811 	msr	BASEPRI, r4
    54cc:	f3bf 8f6f 	isb	sy
		t->fn(t);
    54d0:	6883      	ldr	r3, [r0, #8]
    54d2:	4798      	blx	r3
	__asm__ volatile(
    54d4:	f04f 0320 	mov.w	r3, #32
    54d8:	f3ef 8411 	mrs	r4, BASEPRI
    54dc:	f383 8811 	msr	BASEPRI, r3
    54e0:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    54e4:	e7bc      	b.n	5460 <sys_clock_announce+0x24>
    54e6:	bf00      	nop
    54e8:	20000654 	.word	0x20000654
    54ec:	2000007c 	.word	0x2000007c
    54f0:	20000308 	.word	0x20000308

000054f4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    54f4:	b510      	push	{r4, lr}
    54f6:	f04f 0320 	mov.w	r3, #32
    54fa:	f3ef 8411 	mrs	r4, BASEPRI
    54fe:	f383 8811 	msr	BASEPRI, r3
    5502:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    5506:	f7fd f963 	bl	27d0 <sys_clock_elapsed>
    550a:	4a05      	ldr	r2, [pc, #20]	; (5520 <sys_clock_tick_get+0x2c>)
    550c:	e9d2 3100 	ldrd	r3, r1, [r2]
    5510:	18c0      	adds	r0, r0, r3
    5512:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    5516:	f384 8811 	msr	BASEPRI, r4
    551a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    551e:	bd10      	pop	{r4, pc}
    5520:	20000308 	.word	0x20000308

00005524 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    5524:	b538      	push	{r3, r4, r5, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    5526:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    552a:	3301      	adds	r3, #1
    552c:	f142 0200 	adc.w	r2, r2, #0
    5530:	2b02      	cmp	r3, #2
    5532:	f172 0300 	sbcs.w	r3, r2, #0
{
    5536:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    5538:	d304      	bcc.n	5544 <z_timer_expiration_handler+0x20>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    553a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    553e:	490d      	ldr	r1, [pc, #52]	; (5574 <z_timer_expiration_handler+0x50>)
    5540:	f7ff fef8 	bl	5334 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    5544:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5546:	3301      	adds	r3, #1
    5548:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    554a:	6a23      	ldr	r3, [r4, #32]
    554c:	b10b      	cbz	r3, 5552 <z_timer_expiration_handler+0x2e>
		timer->expiry_fn(timer);
    554e:	4620      	mov	r0, r4
    5550:	4798      	blx	r3
	return list->head == list;
    5552:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5556:	42a5      	cmp	r5, r4
    5558:	d00a      	beq.n	5570 <z_timer_expiration_handler+0x4c>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    555a:	b14d      	cbz	r5, 5570 <z_timer_expiration_handler+0x4c>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
    555c:	4628      	mov	r0, r5
    555e:	f001 fa60 	bl	6a22 <z_unpend_thread_no_timeout>
    5562:	2300      	movs	r3, #0
    5564:	67ab      	str	r3, [r5, #120]	; 0x78

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
    5566:	4628      	mov	r0, r5
}
    5568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
    556c:	f001 baaf 	b.w	6ace <z_ready_thread>
}
    5570:	bd38      	pop	{r3, r4, r5, pc}
    5572:	bf00      	nop
    5574:	00005525 	.word	0x00005525

00005578 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    5578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    557c:	4611      	mov	r1, r2
    557e:	4605      	mov	r5, r0
    5580:	4618      	mov	r0, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    5582:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    5586:	bf08      	it	eq
    5588:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
    558c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    5590:	4688      	mov	r8, r1
    5592:	4607      	mov	r7, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    5594:	d03c      	beq.n	5610 <z_impl_k_timer_start+0x98>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    5596:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    559a:	bf08      	it	eq
    559c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    55a0:	4614      	mov	r4, r2
    55a2:	461e      	mov	r6, r3
    55a4:	d013      	beq.n	55ce <z_impl_k_timer_start+0x56>
    55a6:	431a      	orrs	r2, r3
    55a8:	d011      	beq.n	55ce <z_impl_k_timer_start+0x56>
	    Z_TICK_ABS(period.ticks) < 0) {
    55aa:	f06f 0201 	mvn.w	r2, #1
    55ae:	1b12      	subs	r2, r2, r4
    55b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    55b4:	eb62 0203 	sbc.w	r2, r2, r3
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    55b8:	2a00      	cmp	r2, #0
    55ba:	da08      	bge.n	55ce <z_impl_k_timer_start+0x56>
		period.ticks = MAX(period.ticks - 1, 1);
    55bc:	3c01      	subs	r4, #1
    55be:	f163 0600 	sbc.w	r6, r3, #0
    55c2:	2c01      	cmp	r4, #1
    55c4:	f176 0300 	sbcs.w	r3, r6, #0
    55c8:	bfbc      	itt	lt
    55ca:	2401      	movlt	r4, #1
    55cc:	2600      	movlt	r6, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    55ce:	f06f 0301 	mvn.w	r3, #1
    55d2:	1a5b      	subs	r3, r3, r1
    55d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    55d8:	eb63 0300 	sbc.w	r3, r3, r0
    55dc:	2b00      	cmp	r3, #0
    55de:	da08      	bge.n	55f2 <z_impl_k_timer_start+0x7a>
		duration.ticks = MAX(duration.ticks - 1, 0);
    55e0:	1e4a      	subs	r2, r1, #1
    55e2:	f160 0700 	sbc.w	r7, r0, #0
    55e6:	2f00      	cmp	r7, #0
    55e8:	4690      	mov	r8, r2
    55ea:	bfbc      	itt	lt
    55ec:	f04f 0800 	movlt.w	r8, #0
    55f0:	4647      	movlt	r7, r8
	}

	(void)z_abort_timeout(&timer->timeout);
    55f2:	4628      	mov	r0, r5
    55f4:	f001 fad9 	bl	6baa <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    55f8:	2300      	movs	r3, #0
    55fa:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
    55fc:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5600:	4642      	mov	r2, r8
    5602:	463b      	mov	r3, r7
    5604:	4628      	mov	r0, r5
    5606:	4903      	ldr	r1, [pc, #12]	; (5614 <z_impl_k_timer_start+0x9c>)
		     duration);
}
    5608:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    560c:	f7ff be92 	b.w	5334 <z_add_timeout>
}
    5610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5614:	00005525 	.word	0x00005525

00005618 <dwt_writetodevice>:
{
    5618:	b507      	push	{r0, r1, r2, lr}
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
    561a:	b2c0      	uxtb	r0, r0
    if (index == 0) // For index of 0, no sub-index is required
    561c:	b951      	cbnz	r1, 5634 <dwt_writetodevice+0x1c>
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
    561e:	f060 007f 	orn	r0, r0, #127	; 0x7f
    5622:	f88d 0004 	strb.w	r0, [sp, #4]
    5626:	2001      	movs	r0, #1
    writetospi(cnt,header,length,buffer);
    5628:	a901      	add	r1, sp, #4
    562a:	f7fb fabf 	bl	bac <writetospi>
} // end dwt_writetodevice()
    562e:	b003      	add	sp, #12
    5630:	f85d fb04 	ldr.w	pc, [sp], #4
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
    5634:	f060 003f 	orn	r0, r0, #63	; 0x3f
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
    5638:	297f      	cmp	r1, #127	; 0x7f
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
    563a:	f88d 0004 	strb.w	r0, [sp, #4]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
    563e:	b2c8      	uxtb	r0, r1
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
    5640:	bf85      	ittet	hi
    5642:	f060 007f 	ornhi	r0, r0, #127	; 0x7f
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
    5646:	09c9      	lsrhi	r1, r1, #7
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
    5648:	f88d 0005 	strbls.w	r0, [sp, #5]
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
    564c:	f88d 0005 	strbhi.w	r0, [sp, #5]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
    5650:	bf92      	itee	ls
    5652:	2002      	movls	r0, #2
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
    5654:	f88d 1006 	strbhi.w	r1, [sp, #6]
    5658:	2003      	movhi	r0, #3
    565a:	e7e5      	b.n	5628 <dwt_writetodevice+0x10>

0000565c <dwt_writetxdata>:
{
    565c:	b508      	push	{r3, lr}
    565e:	460b      	mov	r3, r1
    5660:	4611      	mov	r1, r2
    if ((txBufferOffset + txFrameLength) <= 1024)
    5662:	4402      	add	r2, r0
    5664:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    5668:	dc05      	bgt.n	5676 <dwt_writetxdata+0x1a>
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
    566a:	1e82      	subs	r2, r0, #2
    566c:	2009      	movs	r0, #9
    566e:	f7ff ffd3 	bl	5618 <dwt_writetodevice>
        return DWT_SUCCESS;
    5672:	2000      	movs	r0, #0
} // end dwt_writetxdata()
    5674:	bd08      	pop	{r3, pc}
        return DWT_ERROR;
    5676:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    567a:	e7fb      	b.n	5674 <dwt_writetxdata+0x18>

0000567c <dwt_readfromdevice>:
{
    567c:	b507      	push	{r0, r1, r2, lr}
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
    567e:	b2c0      	uxtb	r0, r0
    if (index == 0) // For index of 0, no sub-index is required
    5680:	b941      	cbnz	r1, 5694 <dwt_readfromdevice+0x18>
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
    5682:	f88d 0004 	strb.w	r0, [sp, #4]
    5686:	2001      	movs	r0, #1
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
    5688:	a901      	add	r1, sp, #4
    568a:	f7fb fac5 	bl	c18 <readfromspi>
} // end dwt_readfromdevice()
    568e:	b003      	add	sp, #12
    5690:	f85d fb04 	ldr.w	pc, [sp], #4
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
    5694:	f040 0040 	orr.w	r0, r0, #64	; 0x40
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
    5698:	297f      	cmp	r1, #127	; 0x7f
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
    569a:	f88d 0004 	strb.w	r0, [sp, #4]
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
    569e:	b2c8      	uxtb	r0, r1
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
    56a0:	bf85      	ittet	hi
    56a2:	f060 007f 	ornhi	r0, r0, #127	; 0x7f
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
    56a6:	09c9      	lsrhi	r1, r1, #7
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
    56a8:	f88d 0005 	strbls.w	r0, [sp, #5]
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
    56ac:	f88d 0005 	strbhi.w	r0, [sp, #5]
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
    56b0:	bf92      	itee	ls
    56b2:	2002      	movls	r0, #2
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
    56b4:	f88d 1006 	strbhi.w	r1, [sp, #6]
    56b8:	2003      	movhi	r0, #3
    56ba:	e7e5      	b.n	5688 <dwt_readfromdevice+0xc>

000056bc <dwt_readrxdata>:
{
    56bc:	b410      	push	{r4}
    56be:	460c      	mov	r4, r1
    56c0:	4603      	mov	r3, r0
    56c2:	4611      	mov	r1, r2
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
    56c4:	2011      	movs	r0, #17
    56c6:	4622      	mov	r2, r4
}
    56c8:	bc10      	pop	{r4}
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
    56ca:	f7ff bfd7 	b.w	567c <dwt_readfromdevice>

000056ce <dwt_readrxtimestamp>:
{
    56ce:	4603      	mov	r3, r0
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
    56d0:	2205      	movs	r2, #5
    56d2:	2100      	movs	r1, #0
    56d4:	2015      	movs	r0, #21
    56d6:	f7ff bfd1 	b.w	567c <dwt_readfromdevice>

000056da <dwt_read32bitoffsetreg>:
{
    56da:	b513      	push	{r0, r1, r4, lr}
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
    56dc:	ac01      	add	r4, sp, #4
    56de:	2204      	movs	r2, #4
    56e0:	b280      	uxth	r0, r0
    56e2:	4623      	mov	r3, r4
    56e4:	b289      	uxth	r1, r1
    56e6:	f7ff ffc9 	bl	567c <dwt_readfromdevice>
    for (j = 3 ; j >= 0 ; j --)
    56ea:	2203      	movs	r2, #3
    uint32  regval = 0 ;
    56ec:	2000      	movs	r0, #0
        regval = (regval << 8) + buffer[j] ;
    56ee:	5ca3      	ldrb	r3, [r4, r2]
    for (j = 3 ; j >= 0 ; j --)
    56f0:	3a01      	subs	r2, #1
        regval = (regval << 8) + buffer[j] ;
    56f2:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    for (j = 3 ; j >= 0 ; j --)
    56f6:	d2fa      	bcs.n	56ee <dwt_read32bitoffsetreg+0x14>
} // end dwt_read32bitoffsetreg()
    56f8:	b002      	add	sp, #8
    56fa:	bd10      	pop	{r4, pc}

000056fc <dwt_readdevid>:
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
    56fc:	2100      	movs	r1, #0
    56fe:	4608      	mov	r0, r1
    5700:	f7ff bfeb 	b.w	56da <dwt_read32bitoffsetreg>

00005704 <dwt_read16bitoffsetreg>:
{
    5704:	b507      	push	{r0, r1, r2, lr}
    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
    5706:	2202      	movs	r2, #2
    5708:	ab01      	add	r3, sp, #4
    570a:	b289      	uxth	r1, r1
    570c:	b280      	uxth	r0, r0
    570e:	f7ff ffb5 	bl	567c <dwt_readfromdevice>
    regval = (buffer[1] << 8) + buffer[0] ;
    5712:	f89d 3005 	ldrb.w	r3, [sp, #5]
    5716:	f89d 0004 	ldrb.w	r0, [sp, #4]
    571a:	eb00 2003 	add.w	r0, r0, r3, lsl #8
} // end dwt_read16bitoffsetreg()
    571e:	b280      	uxth	r0, r0
    5720:	b003      	add	sp, #12
    5722:	f85d fb04 	ldr.w	pc, [sp], #4

00005726 <dwt_read8bitoffsetreg>:
{
    5726:	b507      	push	{r0, r1, r2, lr}
    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
    5728:	2201      	movs	r2, #1
    572a:	f10d 0307 	add.w	r3, sp, #7
    572e:	b289      	uxth	r1, r1
    5730:	b280      	uxth	r0, r0
    5732:	f7ff ffa3 	bl	567c <dwt_readfromdevice>
}
    5736:	f89d 0007 	ldrb.w	r0, [sp, #7]
    573a:	b003      	add	sp, #12
    573c:	f85d fb04 	ldr.w	pc, [sp], #4

00005740 <dwt_write8bitoffsetreg>:
{
    5740:	b507      	push	{r0, r1, r2, lr}
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
    5742:	b289      	uxth	r1, r1
{
    5744:	f88d 2007 	strb.w	r2, [sp, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
    5748:	f10d 0307 	add.w	r3, sp, #7
    574c:	2201      	movs	r2, #1
    574e:	b280      	uxth	r0, r0
    5750:	f7ff ff62 	bl	5618 <dwt_writetodevice>
}
    5754:	b003      	add	sp, #12
    5756:	f85d fb04 	ldr.w	pc, [sp], #4

0000575a <dwt_write16bitoffsetreg>:
{
    575a:	b507      	push	{r0, r1, r2, lr}
    buffer[0] = regval & 0xFF;
    575c:	f88d 2004 	strb.w	r2, [sp, #4]
    buffer[1] = regval >> 8 ;
    5760:	0a12      	lsrs	r2, r2, #8
    5762:	f88d 2005 	strb.w	r2, [sp, #5]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
    5766:	ab01      	add	r3, sp, #4
    5768:	2202      	movs	r2, #2
    576a:	b289      	uxth	r1, r1
    576c:	b280      	uxth	r0, r0
    576e:	f7ff ff53 	bl	5618 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
    5772:	b003      	add	sp, #12
    5774:	f85d fb04 	ldr.w	pc, [sp], #4

00005778 <dwt_setrxantennadelay>:
{
    5778:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
    577a:	f641 0104 	movw	r1, #6148	; 0x1804
    577e:	202e      	movs	r0, #46	; 0x2e
    5780:	f7ff bfeb 	b.w	575a <dwt_write16bitoffsetreg>

00005784 <dwt_settxantennadelay>:
{
    5784:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
    5786:	2100      	movs	r1, #0
    5788:	2018      	movs	r0, #24
    578a:	f7ff bfe6 	b.w	575a <dwt_write16bitoffsetreg>

0000578e <dwt_write32bitoffsetreg>:
{
    578e:	b507      	push	{r0, r1, r2, lr}
        regval >>= 8 ;
    5790:	0a13      	lsrs	r3, r2, #8
        buffer[j] = regval & 0xff ;
    5792:	f88d 2004 	strb.w	r2, [sp, #4]
    5796:	f88d 3005 	strb.w	r3, [sp, #5]
        regval >>= 8 ;
    579a:	0c13      	lsrs	r3, r2, #16
    579c:	0e12      	lsrs	r2, r2, #24
        buffer[j] = regval & 0xff ;
    579e:	f88d 3006 	strb.w	r3, [sp, #6]
    57a2:	f88d 2007 	strb.w	r2, [sp, #7]
    dwt_writetodevice(regFileID,regOffset,4,buffer);
    57a6:	ab01      	add	r3, sp, #4
    57a8:	2204      	movs	r2, #4
    57aa:	b289      	uxth	r1, r1
    57ac:	b280      	uxth	r0, r0
    57ae:	f7ff ff33 	bl	5618 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
    57b2:	b003      	add	sp, #12
    57b4:	f85d fb04 	ldr.w	pc, [sp], #4

000057b8 <_dwt_otpread>:
{
    57b8:	b508      	push	{r3, lr}
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
    57ba:	b282      	uxth	r2, r0
    57bc:	2104      	movs	r1, #4
    57be:	202d      	movs	r0, #45	; 0x2d
    57c0:	f7ff ffcb 	bl	575a <dwt_write16bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
    57c4:	2203      	movs	r2, #3
    57c6:	2106      	movs	r1, #6
    57c8:	202d      	movs	r0, #45	; 0x2d
    57ca:	f7ff ffb9 	bl	5740 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
    57ce:	2106      	movs	r1, #6
    57d0:	202d      	movs	r0, #45	; 0x2d
    57d2:	2200      	movs	r2, #0
    57d4:	f7ff ffb4 	bl	5740 <dwt_write8bitoffsetreg>
}
    57d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
    57dc:	210a      	movs	r1, #10
    57de:	202d      	movs	r0, #45	; 0x2d
    57e0:	f7ff bf7b 	b.w	56da <dwt_read32bitoffsetreg>

000057e4 <_dwt_aonarrayupload>:
{
    57e4:	b508      	push	{r3, lr}
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
    57e6:	2200      	movs	r2, #0
    57e8:	2102      	movs	r1, #2
    57ea:	202c      	movs	r0, #44	; 0x2c
    57ec:	f7ff ffa8 	bl	5740 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
    57f0:	2202      	movs	r2, #2
}
    57f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
    57f6:	4611      	mov	r1, r2
    57f8:	202c      	movs	r0, #44	; 0x2c
    57fa:	f7ff bfa1 	b.w	5740 <dwt_write8bitoffsetreg>

000057fe <_dwt_configlde>:
{
    57fe:	b510      	push	{r4, lr}
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
    5800:	226d      	movs	r2, #109	; 0x6d
{
    5802:	4604      	mov	r4, r0
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
    5804:	f640 0106 	movw	r1, #2054	; 0x806
    5808:	202e      	movs	r0, #46	; 0x2e
    580a:	f7ff ff99 	bl	5740 <dwt_write8bitoffsetreg>
    if(prfIndex)
    580e:	b144      	cbz	r4, 5822 <_dwt_configlde+0x24>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
    5810:	f240 6207 	movw	r2, #1543	; 0x607
}
    5814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    5818:	f641 0106 	movw	r1, #6150	; 0x1806
    581c:	202e      	movs	r0, #46	; 0x2e
    581e:	f7ff bf9c 	b.w	575a <dwt_write16bitoffsetreg>
    5822:	f241 6207 	movw	r2, #5639	; 0x1607
    5826:	e7f5      	b.n	5814 <_dwt_configlde+0x16>

00005828 <_dwt_enableclocks>:
{
    5828:	b513      	push	{r0, r1, r4, lr}
    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
    582a:	2202      	movs	r2, #2
{
    582c:	4604      	mov	r4, r0
    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
    582e:	ab01      	add	r3, sp, #4
    5830:	2100      	movs	r1, #0
    5832:	2036      	movs	r0, #54	; 0x36
    5834:	f7ff ff22 	bl	567c <dwt_readfromdevice>
    switch(clocks)
    5838:	2c0e      	cmp	r4, #14
    583a:	d81b      	bhi.n	5874 <_dwt_enableclocks+0x4c>
    583c:	e8df f004 	tbb	[pc, r4]
    5840:	1a290812 	.word	0x1a290812
    5844:	301a1a1a 	.word	0x301a1a1a
    5848:	481a1a3d 	.word	0x481a1a3d
    584c:	524d      	.short	0x524d
    584e:	59          	.byte	0x59
    584f:	00          	.byte	0x00
            reg[0] = 0x00 ;
    5850:	2300      	movs	r3, #0
    5852:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = reg[1] & 0xfe;
    5856:	f89d 3005 	ldrb.w	r3, [sp, #5]
    585a:	f023 0301 	bic.w	r3, r3, #1
            reg[1] = 0x03;
    585e:	f88d 3005 	strb.w	r3, [sp, #5]
        break;
    5862:	e007      	b.n	5874 <_dwt_enableclocks+0x4c>
            reg[0] = 0x01 | (reg[0] & 0xfc);
    5864:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5868:	f023 0303 	bic.w	r3, r3, #3
    586c:	f043 0301 	orr.w	r3, r3, #1
            reg[0] = 0x20 | (reg[0] & 0xcf);
    5870:	f88d 3004 	strb.w	r3, [sp, #4]
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
    5874:	ab01      	add	r3, sp, #4
    5876:	2201      	movs	r2, #1
    5878:	2100      	movs	r1, #0
    587a:	2036      	movs	r0, #54	; 0x36
    587c:	f7ff fecc 	bl	5618 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
    5880:	2201      	movs	r2, #1
    5882:	f10d 0305 	add.w	r3, sp, #5
    5886:	4611      	mov	r1, r2
    5888:	2036      	movs	r0, #54	; 0x36
    588a:	f7ff fec5 	bl	5618 <dwt_writetodevice>
} // end _dwt_enableclocks()
    588e:	b002      	add	sp, #8
    5890:	bd10      	pop	{r4, pc}
            reg[0] = 0x02 | (reg[0] & 0xfc);
    5892:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5896:	f023 0303 	bic.w	r3, r3, #3
    589a:	f043 0302 	orr.w	r3, r3, #2
    589e:	e7e7      	b.n	5870 <_dwt_enableclocks+0x48>
            reg[0] = 0x48 | (reg[0] & 0xb3);
    58a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    58a4:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
    58a8:	f043 0348 	orr.w	r3, r3, #72	; 0x48
    58ac:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = 0x80 | reg[1];
    58b0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    58b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    58b8:	e7d1      	b.n	585e <_dwt_enableclocks+0x36>
            reg[0] = reg[0] & 0xb3;
    58ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
    58be:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
    58c2:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = 0x7f & reg[1];
    58c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    58ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    58ce:	e7c6      	b.n	585e <_dwt_enableclocks+0x36>
            reg[1] = 0x02 | reg[1];
    58d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    58d4:	f043 0302 	orr.w	r3, r3, #2
    58d8:	e7c1      	b.n	585e <_dwt_enableclocks+0x36>
            reg[1] = reg[1] & 0xfd;
    58da:	f89d 3005 	ldrb.w	r3, [sp, #5]
    58de:	f023 0302 	bic.w	r3, r3, #2
    58e2:	e7bc      	b.n	585e <_dwt_enableclocks+0x36>
            reg[0] = 0x20 | (reg[0] & 0xcf);
    58e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
    58e8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    58ec:	f043 0320 	orr.w	r3, r3, #32
    58f0:	e7be      	b.n	5870 <_dwt_enableclocks+0x48>
            reg[0] = 0x01;
    58f2:	2301      	movs	r3, #1
    58f4:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = 0x03;
    58f8:	2303      	movs	r3, #3
    58fa:	e7b0      	b.n	585e <_dwt_enableclocks+0x36>

000058fc <_dwt_loaducodefromrom>:
{
    58fc:	b508      	push	{r3, lr}
    _dwt_enableclocks(FORCE_LDE);
    58fe:	200e      	movs	r0, #14
    5900:	f7ff ff92 	bl	5828 <_dwt_enableclocks>
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
    5904:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    5908:	2106      	movs	r1, #6
    590a:	202d      	movs	r0, #45	; 0x2d
    590c:	f7ff ff25 	bl	575a <dwt_write16bitoffsetreg>
    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
    5910:	2001      	movs	r0, #1
    5912:	f000 f8f0 	bl	5af6 <deca_sleep>
}
    5916:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
    591a:	2001      	movs	r0, #1
    591c:	f7ff bf84 	b.w	5828 <_dwt_enableclocks>

00005920 <_dwt_disablesequencing>:
{
    5920:	b508      	push	{r3, lr}
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
    5922:	2000      	movs	r0, #0
    5924:	f7ff ff80 	bl	5828 <_dwt_enableclocks>
}
    5928:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
    592c:	2200      	movs	r2, #0
    592e:	2104      	movs	r1, #4
    5930:	2036      	movs	r0, #54	; 0x36
    5932:	f7ff bf12 	b.w	575a <dwt_write16bitoffsetreg>

00005936 <dwt_setdelayedtrxtime>:
{
    5936:	4602      	mov	r2, r0
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
    5938:	2101      	movs	r1, #1
    593a:	200a      	movs	r0, #10
    593c:	f7ff bf27 	b.w	578e <dwt_write32bitoffsetreg>

00005940 <dwt_syncrxbufptrs>:
{
    5940:	b508      	push	{r3, lr}
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
    5942:	2103      	movs	r1, #3
    5944:	200f      	movs	r0, #15
    5946:	f7ff feee 	bl	5726 <dwt_read8bitoffsetreg>
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
    594a:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
    594e:	0603      	lsls	r3, r0, #24
    5950:	d506      	bpl.n	5960 <dwt_syncrxbufptrs+0x20>
}
    5952:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
    5956:	2201      	movs	r2, #1
    5958:	2103      	movs	r1, #3
    595a:	200d      	movs	r0, #13
    595c:	f7ff bef0 	b.w	5740 <dwt_write8bitoffsetreg>
}
    5960:	bd08      	pop	{r3, pc}

00005962 <dwt_rxenable>:
    if ((mode & DWT_NO_SYNC_PTRS) == 0)
    5962:	0741      	lsls	r1, r0, #29
{
    5964:	b538      	push	{r3, r4, r5, lr}
    5966:	4604      	mov	r4, r0
    if ((mode & DWT_NO_SYNC_PTRS) == 0)
    5968:	d401      	bmi.n	596e <dwt_rxenable+0xc>
        dwt_syncrxbufptrs();
    596a:	f7ff ffe9 	bl	5940 <dwt_syncrxbufptrs>
        temp |= (uint16)SYS_CTRL_RXDLYE ;
    596e:	f014 0501 	ands.w	r5, r4, #1
    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
    5972:	bf0c      	ite	eq
    5974:	f44f 7280 	moveq.w	r2, #256	; 0x100
    5978:	f44f 7240 	movne.w	r2, #768	; 0x300
    597c:	2100      	movs	r1, #0
    597e:	200d      	movs	r0, #13
    5980:	f7ff feeb 	bl	575a <dwt_write16bitoffsetreg>
    if (mode & DWT_START_RX_DELAYED) // check for errors
    5984:	b90d      	cbnz	r5, 598a <dwt_rxenable+0x28>
    return DWT_SUCCESS;
    5986:	2000      	movs	r0, #0
} // end dwt_rxenable()
    5988:	bd38      	pop	{r3, r4, r5, pc}
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
    598a:	2103      	movs	r1, #3
    598c:	200f      	movs	r0, #15
    598e:	f7ff feca 	bl	5726 <dwt_read8bitoffsetreg>
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
    5992:	0703      	lsls	r3, r0, #28
    5994:	d5f7      	bpl.n	5986 <dwt_rxenable+0x24>
            dwt_forcetrxoff(); // turn the delayed receive off
    5996:	f7fa ff7f 	bl	898 <dwt_forcetrxoff>
            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
    599a:	f014 0102 	ands.w	r1, r4, #2
    599e:	d104      	bne.n	59aa <dwt_rxenable+0x48>
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
    59a0:	f44f 7280 	mov.w	r2, #256	; 0x100
    59a4:	200d      	movs	r0, #13
    59a6:	f7ff fed8 	bl	575a <dwt_write16bitoffsetreg>
            return DWT_ERROR; // return warning indication
    59aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    59ae:	e7eb      	b.n	5988 <dwt_rxenable+0x26>

000059b0 <dwt_rxreset>:
{
    59b0:	b508      	push	{r3, lr}
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
    59b2:	22e0      	movs	r2, #224	; 0xe0
    59b4:	2103      	movs	r1, #3
    59b6:	2036      	movs	r0, #54	; 0x36
    59b8:	f7ff fec2 	bl	5740 <dwt_write8bitoffsetreg>
}
    59bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
    59c0:	22f0      	movs	r2, #240	; 0xf0
    59c2:	2103      	movs	r1, #3
    59c4:	2036      	movs	r0, #54	; 0x36
    59c6:	f7ff bebb 	b.w	5740 <dwt_write8bitoffsetreg>

000059ca <dwt_setxtaltrim>:
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
    59ca:	f000 021f 	and.w	r2, r0, #31
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
    59ce:	f042 0260 	orr.w	r2, r2, #96	; 0x60
    59d2:	210e      	movs	r1, #14
    59d4:	202b      	movs	r0, #43	; 0x2b
    59d6:	f7ff beb3 	b.w	5740 <dwt_write8bitoffsetreg>

000059da <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(unsigned long usec)
{
    59da:	b480      	push	{r7}
    59dc:	b085      	sub	sp, #20
    59de:	af00      	add	r7, sp, #0
    59e0:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
    59e2:	2300      	movs	r3, #0
    59e4:	60fb      	str	r3, [r7, #12]
    59e6:	e010      	b.n	5a0a <usleep+0x30>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
    59e8:	2300      	movs	r3, #0
    59ea:	60bb      	str	r3, [r7, #8]
    59ec:	e002      	b.n	59f4 <usleep+0x1a>
    59ee:	68bb      	ldr	r3, [r7, #8]
    59f0:	3301      	adds	r3, #1
    59f2:	60bb      	str	r3, [r7, #8]
    59f4:	68bb      	ldr	r3, [r7, #8]
    59f6:	2b01      	cmp	r3, #1
    59f8:	bfd4      	ite	le
    59fa:	2301      	movle	r3, #1
    59fc:	2300      	movgt	r3, #0
    59fe:	b2db      	uxtb	r3, r3
    5a00:	2b00      	cmp	r3, #0
    5a02:	d1f4      	bne.n	59ee <usleep+0x14>
    for(i=0;i<usec;i++)
    5a04:	68fb      	ldr	r3, [r7, #12]
    5a06:	3301      	adds	r3, #1
    5a08:	60fb      	str	r3, [r7, #12]
    5a0a:	68fb      	ldr	r3, [r7, #12]
    5a0c:	687a      	ldr	r2, [r7, #4]
    5a0e:	429a      	cmp	r2, r3
    5a10:	bf8c      	ite	hi
    5a12:	2301      	movhi	r3, #1
    5a14:	2300      	movls	r3, #0
    5a16:	b2db      	uxtb	r3, r3
    5a18:	2b00      	cmp	r3, #0
    5a1a:	d1e5      	bne.n	59e8 <usleep+0xe>
        {
            // __NOP();
            // __NOP();
        }
    }
    return 0;
    5a1c:	2300      	movs	r3, #0
}
    5a1e:	4618      	mov	r0, r3
    5a20:	3714      	adds	r7, #20
    5a22:	46bd      	mov	sp, r7
    5a24:	bc80      	pop	{r7}
    5a26:	4770      	bx	lr

00005a28 <Sleep>:

/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
void Sleep(uint32_t x)
{
    5a28:	b580      	push	{r7, lr}
    5a2a:	b082      	sub	sp, #8
    5a2c:	af00      	add	r7, sp, #0
    5a2e:	6078      	str	r0, [r7, #4]
    k_msleep(x);
    5a30:	687b      	ldr	r3, [r7, #4]
    5a32:	4618      	mov	r0, r3
    5a34:	f000 f83f 	bl	5ab6 <k_msleep>
}
    5a38:	bf00      	nop
    5a3a:	3708      	adds	r7, #8
    5a3c:	46bd      	mov	sp, r7
    5a3e:	bd80      	pop	{r7, pc}

00005a40 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
    5a40:	b580      	push	{r7, lr}
    5a42:	af00      	add	r7, sp, #0
    //TODO:drive the RSTn pin low
 
    usleep(1);
    5a44:	2001      	movs	r0, #1
    5a46:	f7ff ffc8 	bl	59da <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
    5a4a:	2000      	movs	r0, #0
    5a4c:	f000 f805 	bl	5a5a <setup_DW1000RSTnIRQ>

    Sleep(2);
    5a50:	2002      	movs	r0, #2
    5a52:	f7ff ffe9 	bl	5a28 <Sleep>
}
    5a56:	bf00      	nop
    5a58:	bd80      	pop	{r7, pc}

00005a5a <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
    5a5a:	b480      	push	{r7}
    5a5c:	b083      	sub	sp, #12
    5a5e:	af00      	add	r7, sp, #0
    5a60:	6078      	str	r0, [r7, #4]
    //TODO
}
    5a62:	bf00      	nop
    5a64:	370c      	adds	r7, #12
    5a66:	46bd      	mov	sp, r7
    5a68:	bc80      	pop	{r7}
    5a6a:	4770      	bx	lr

00005a6c <port_wakeup_dw1000>:

/* @fn      port_wakeup_dw1000
 * @brief   "slow" waking up of DW1000 using DW_CS only
 * */
void port_wakeup_dw1000(void)
{
    5a6c:	b480      	push	{r7}
    5a6e:	af00      	add	r7, sp, #0
    //TODO
}
    5a70:	bf00      	nop
    5a72:	46bd      	mov	sp, r7
    5a74:	bc80      	pop	{r7}
    5a76:	4770      	bx	lr

00005a78 <port_set_dw1000_slowrate>:

/* @fn      port_set_dw1000_slowrate
 * @brief   set 2MHz
 * */
void port_set_dw1000_slowrate(void)
{
    5a78:	b580      	push	{r7, lr}
    5a7a:	af00      	add	r7, sp, #0
    set_spi_speed_slow();
    5a7c:	f7fb f854 	bl	b28 <set_spi_speed_slow>
}
    5a80:	bf00      	nop
    5a82:	bd80      	pop	{r7, pc}

00005a84 <port_set_dw1000_fastrate>:

/* @fn      port_set_dw1000_fastrate
 * @brief   set 8MHz
 * */
void port_set_dw1000_fastrate(void)
{
    5a84:	b580      	push	{r7, lr}
    5a86:	af00      	add	r7, sp, #0
    //TODO
    set_spi_speed_fast();
    5a88:	f7fb f86e 	bl	b68 <set_spi_speed_fast>
}
    5a8c:	bf00      	nop
    5a8e:	bd80      	pop	{r7, pc}

00005a90 <port_DisableEXT_IRQ>:
    5a90:	b480      	push	{r7}
    5a92:	af00      	add	r7, sp, #0
    5a94:	46bd      	mov	sp, r7
    5a96:	bc80      	pop	{r7}
    5a98:	f7ff bfe8 	b.w	5a6c <port_wakeup_dw1000>

00005a9c <port_EnableEXT_IRQ>:
    5a9c:	b480      	push	{r7}
    5a9e:	af00      	add	r7, sp, #0
    5aa0:	46bd      	mov	sp, r7
    5aa2:	bc80      	pop	{r7}
    5aa4:	f7ff bfe2 	b.w	5a6c <port_wakeup_dw1000>

00005aa8 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
uint32_t port_GetEXT_IRQStatus(void)
{
    5aa8:	b480      	push	{r7}
    5aaa:	af00      	add	r7, sp, #0
    //TODO
    return 0;
    5aac:	2300      	movs	r3, #0
}
    5aae:	4618      	mov	r0, r3
    5ab0:	46bd      	mov	sp, r7
    5ab2:	bc80      	pop	{r7}
    5ab4:	4770      	bx	lr

00005ab6 <k_msleep>:
{
    5ab6:	b538      	push	{r3, r4, r5, lr}
    5ab8:	2100      	movs	r1, #0
	return k_sleep(Z_TIMEOUT_MS(ms));
    5aba:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
    5abe:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    5ac2:	f240 30e7 	movw	r0, #999	; 0x3e7
    5ac6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5aca:	2300      	movs	r3, #0
    5acc:	fbc4 0105 	smlal	r0, r1, r4, r5
    5ad0:	f7fa fb04 	bl	dc <__aeabi_uldivmod>
}
    5ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
    5ad8:	f7ff ba48 	b.w	4f6c <z_impl_k_sleep>

00005adc <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
    5adc:	b510      	push	{r4, lr}
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
    5ade:	f7ff ffe3 	bl	5aa8 <port_GetEXT_IRQStatus>

	if(s) {
    5ae2:	4604      	mov	r4, r0
    5ae4:	b108      	cbz	r0, 5aea <decamutexon+0xe>
		port_DisableEXT_IRQ(); //disable the external interrupt line
    5ae6:	f7ff ffd3 	bl	5a90 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
}
    5aea:	4620      	mov	r0, r4
    5aec:	bd10      	pop	{r4, pc}

00005aee <decamutexoff>:
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
    5aee:	b108      	cbz	r0, 5af4 <decamutexoff+0x6>
		port_EnableEXT_IRQ();
    5af0:	f7ff bfd4 	b.w	5a9c <port_EnableEXT_IRQ>
	}
}
    5af4:	4770      	bx	lr

00005af6 <deca_sleep>:
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_sleep(unsigned int time_ms)
{
	Sleep(time_ms);
    5af6:	f7ff bf97 	b.w	5a28 <Sleep>

00005afa <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    5afa:	4603      	mov	r3, r0
    5afc:	b158      	cbz	r0, 5b16 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5afe:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    5b00:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    5b04:	2a01      	cmp	r2, #1
    5b06:	d003      	beq.n	5b10 <sys_notify_validate+0x16>
    5b08:	2a03      	cmp	r2, #3
    5b0a:	d104      	bne.n	5b16 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    5b0c:	6802      	ldr	r2, [r0, #0]
    5b0e:	b112      	cbz	r2, 5b16 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    5b10:	2000      	movs	r0, #0
    5b12:	6098      	str	r0, [r3, #8]
    5b14:	4770      	bx	lr
		return -EINVAL;
    5b16:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    5b1a:	4770      	bx	lr

00005b1c <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5b1c:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    5b1e:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    5b20:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    5b24:	2a03      	cmp	r2, #3
    5b26:	f04f 0200 	mov.w	r2, #0
{
    5b2a:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    5b2c:	bf0c      	ite	eq
    5b2e:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
    5b30:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    5b32:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    5b34:	4770      	bx	lr

00005b36 <arch_printk_char_out>:
}
    5b36:	2000      	movs	r0, #0
    5b38:	4770      	bx	lr

00005b3a <str_out>:
{
    5b3a:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    5b3c:	688a      	ldr	r2, [r1, #8]
    5b3e:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    5b40:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    5b42:	b114      	cbz	r4, 5b4a <str_out+0x10>
    5b44:	684b      	ldr	r3, [r1, #4]
    5b46:	4293      	cmp	r3, r2
    5b48:	dc01      	bgt.n	5b4e <str_out+0x14>
		ctx->count++;
    5b4a:	608d      	str	r5, [r1, #8]
}
    5b4c:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    5b4e:	3b01      	subs	r3, #1
    5b50:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    5b52:	bf08      	it	eq
    5b54:	2200      	moveq	r2, #0
    5b56:	608d      	str	r5, [r1, #8]
    5b58:	bf0c      	ite	eq
    5b5a:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    5b5c:	54a0      	strbne	r0, [r4, r2]
    5b5e:	e7f5      	b.n	5b4c <str_out+0x12>

00005b60 <printk>:
{
    5b60:	b40f      	push	{r0, r1, r2, r3}
    5b62:	b507      	push	{r0, r1, r2, lr}
    5b64:	a904      	add	r1, sp, #16
    5b66:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    5b6a:	9101      	str	r1, [sp, #4]
		log_printk(fmt, ap);
    5b6c:	f000 f9bd 	bl	5eea <log_printk>
}
    5b70:	b003      	add	sp, #12
    5b72:	f85d eb04 	ldr.w	lr, [sp], #4
    5b76:	b004      	add	sp, #16
    5b78:	4770      	bx	lr

00005b7a <snprintk>:
{
    5b7a:	b40c      	push	{r2, r3}
    5b7c:	b507      	push	{r0, r1, r2, lr}
    5b7e:	ab04      	add	r3, sp, #16
    5b80:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    5b84:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    5b86:	f7fb f88d 	bl	ca4 <vsnprintk>
}
    5b8a:	b003      	add	sp, #12
    5b8c:	f85d eb04 	ldr.w	lr, [sp], #4
    5b90:	b002      	add	sp, #8
    5b92:	4770      	bx	lr

00005b94 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5b94:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    5b96:	f013 0307 	ands.w	r3, r3, #7
    5b9a:	d105      	bne.n	5ba8 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    5b9c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    5b9e:	2b00      	cmp	r3, #0
    5ba0:	bf0c      	ite	eq
    5ba2:	2000      	moveq	r0, #0
    5ba4:	2003      	movne	r0, #3
    5ba6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    5ba8:	2b02      	cmp	r3, #2
    5baa:	d105      	bne.n	5bb8 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    5bac:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    5bae:	2b00      	cmp	r3, #0
    5bb0:	bf14      	ite	ne
    5bb2:	2000      	movne	r0, #0
    5bb4:	2004      	moveq	r0, #4
    5bb6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    5bb8:	2b01      	cmp	r3, #1
    5bba:	d105      	bne.n	5bc8 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    5bbc:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    5bbe:	2b00      	cmp	r3, #0
    5bc0:	bf0c      	ite	eq
    5bc2:	2000      	moveq	r0, #0
    5bc4:	2005      	movne	r0, #5
    5bc6:	4770      	bx	lr
	int evt = EVT_NOP;
    5bc8:	2000      	movs	r0, #0
}
    5bca:	4770      	bx	lr

00005bcc <notify_one>:
{
    5bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5bd0:	460d      	mov	r5, r1
    5bd2:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5bd4:	4619      	mov	r1, r3
    5bd6:	1d28      	adds	r0, r5, #4
{
    5bd8:	4690      	mov	r8, r2
    5bda:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5bdc:	f7ff ff9e 	bl	5b1c <sys_notify_finalize>
	if (cb) {
    5be0:	4604      	mov	r4, r0
    5be2:	b138      	cbz	r0, 5bf4 <notify_one+0x28>
		cb(mgr, cli, state, res);
    5be4:	4633      	mov	r3, r6
    5be6:	4642      	mov	r2, r8
    5be8:	4629      	mov	r1, r5
    5bea:	4638      	mov	r0, r7
    5bec:	46a4      	mov	ip, r4
}
    5bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    5bf2:	4760      	bx	ip
}
    5bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005bf8 <transition_complete>:
{
    5bf8:	b410      	push	{r4}
	__asm__ volatile(
    5bfa:	f04f 0420 	mov.w	r4, #32
    5bfe:	f3ef 8211 	mrs	r2, BASEPRI
    5c02:	f384 8811 	msr	BASEPRI, r4
    5c06:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    5c0a:	6141      	str	r1, [r0, #20]
}
    5c0c:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    5c0e:	2101      	movs	r1, #1
    5c10:	f7fb b85c 	b.w	ccc <process_event>

00005c14 <validate_args>:
{
    5c14:	b510      	push	{r4, lr}
    5c16:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    5c18:	b140      	cbz	r0, 5c2c <validate_args+0x18>
    5c1a:	b139      	cbz	r1, 5c2c <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    5c1c:	1d08      	adds	r0, r1, #4
    5c1e:	f7ff ff6c 	bl	5afa <sys_notify_validate>
	if ((rv == 0)
    5c22:	b928      	cbnz	r0, 5c30 <validate_args+0x1c>
	    && ((cli->notify.flags
    5c24:	68a3      	ldr	r3, [r4, #8]
    5c26:	f033 0303 	bics.w	r3, r3, #3
    5c2a:	d001      	beq.n	5c30 <validate_args+0x1c>
		rv = -EINVAL;
    5c2c:	f06f 0015 	mvn.w	r0, #21
}
    5c30:	bd10      	pop	{r4, pc}

00005c32 <onoff_manager_init>:
{
    5c32:	b538      	push	{r3, r4, r5, lr}
    5c34:	460c      	mov	r4, r1
	if ((mgr == NULL)
    5c36:	4605      	mov	r5, r0
    5c38:	b158      	cbz	r0, 5c52 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    5c3a:	b151      	cbz	r1, 5c52 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    5c3c:	680b      	ldr	r3, [r1, #0]
    5c3e:	b143      	cbz	r3, 5c52 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    5c40:	684b      	ldr	r3, [r1, #4]
    5c42:	b133      	cbz	r3, 5c52 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5c44:	221c      	movs	r2, #28
    5c46:	2100      	movs	r1, #0
    5c48:	f000 fd4a 	bl	66e0 <memset>
    5c4c:	612c      	str	r4, [r5, #16]
	return 0;
    5c4e:	2000      	movs	r0, #0
}
    5c50:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    5c52:	f06f 0015 	mvn.w	r0, #21
    5c56:	e7fb      	b.n	5c50 <onoff_manager_init+0x1e>

00005c58 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    5c58:	b570      	push	{r4, r5, r6, lr}
    5c5a:	4604      	mov	r4, r0
    5c5c:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    5c5e:	f7ff ffd9 	bl	5c14 <validate_args>

	if (rv < 0) {
    5c62:	1e05      	subs	r5, r0, #0
    5c64:	db31      	blt.n	5cca <onoff_request+0x72>
    5c66:	f04f 0320 	mov.w	r3, #32
    5c6a:	f3ef 8111 	mrs	r1, BASEPRI
    5c6e:	f383 8811 	msr	BASEPRI, r3
    5c72:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    5c76:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5c78:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    5c7a:	f64f 75ff 	movw	r5, #65535	; 0xffff
    5c7e:	42ab      	cmp	r3, r5
    5c80:	f000 0207 	and.w	r2, r0, #7
    5c84:	d02e      	beq.n	5ce4 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    5c86:	2a02      	cmp	r2, #2
    5c88:	d10e      	bne.n	5ca8 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    5c8a:	3301      	adds	r3, #1
    5c8c:	8363      	strh	r3, [r4, #26]
	rv = state;
    5c8e:	4615      	mov	r5, r2
		notify = true;
    5c90:	2301      	movs	r3, #1
	__asm__ volatile(
    5c92:	f381 8811 	msr	BASEPRI, r1
    5c96:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    5c9a:	b1b3      	cbz	r3, 5cca <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    5c9c:	2300      	movs	r3, #0
    5c9e:	4631      	mov	r1, r6
    5ca0:	4620      	mov	r0, r4
    5ca2:	f7ff ff93 	bl	5bcc <notify_one>
    5ca6:	e010      	b.n	5cca <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    5ca8:	0783      	lsls	r3, r0, #30
    5caa:	d001      	beq.n	5cb0 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    5cac:	2a06      	cmp	r2, #6
    5cae:	d10e      	bne.n	5cce <onoff_request+0x76>
	parent->next = child;
    5cb0:	2300      	movs	r3, #0
    5cb2:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    5cb4:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    5cb6:	b993      	cbnz	r3, 5cde <onoff_request+0x86>
	list->head = node;
    5cb8:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    5cbc:	4615      	mov	r5, r2
    5cbe:	b962      	cbnz	r2, 5cda <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    5cc0:	460a      	mov	r2, r1
    5cc2:	4620      	mov	r0, r4
    5cc4:	2102      	movs	r1, #2
    5cc6:	f7fb f801 	bl	ccc <process_event>
		}
	}

	return rv;
}
    5cca:	4628      	mov	r0, r5
    5ccc:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    5cce:	2a05      	cmp	r2, #5
    5cd0:	bf0c      	ite	eq
    5cd2:	f06f 0522 	mvneq.w	r5, #34	; 0x22
    5cd6:	f06f 0504 	mvnne.w	r5, #4
    5cda:	2300      	movs	r3, #0
    5cdc:	e7d9      	b.n	5c92 <onoff_request+0x3a>
	parent->next = child;
    5cde:	601e      	str	r6, [r3, #0]
	list->tail = node;
    5ce0:	6066      	str	r6, [r4, #4]
}
    5ce2:	e7eb      	b.n	5cbc <onoff_request+0x64>
		rv = -EAGAIN;
    5ce4:	f06f 050a 	mvn.w	r5, #10
    5ce8:	e7f7      	b.n	5cda <onoff_request+0x82>

00005cea <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    5cea:	4604      	mov	r4, r0
    5cec:	b508      	push	{r3, lr}
    5cee:	4608      	mov	r0, r1
    5cf0:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    5cf2:	461a      	mov	r2, r3
    5cf4:	47a0      	blx	r4
	return z_impl_k_current_get();
    5cf6:	f7ff f953 	bl	4fa0 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    5cfa:	f7fd f9e7 	bl	30cc <z_impl_k_thread_abort>

00005cfe <encode_uint>:
{
    5cfe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d02:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    5d04:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    5d06:	2b6f      	cmp	r3, #111	; 0x6f
{
    5d08:	4680      	mov	r8, r0
    5d0a:	460f      	mov	r7, r1
    5d0c:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    5d0e:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    5d12:	d029      	beq.n	5d68 <encode_uint+0x6a>
    5d14:	d824      	bhi.n	5d60 <encode_uint+0x62>
		return 16;
    5d16:	2b58      	cmp	r3, #88	; 0x58
    5d18:	bf14      	ite	ne
    5d1a:	260a      	movne	r6, #10
    5d1c:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    5d1e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    5d22:	4632      	mov	r2, r6
    5d24:	2300      	movs	r3, #0
    5d26:	4640      	mov	r0, r8
    5d28:	4639      	mov	r1, r7
    5d2a:	f7fa f9d7 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5d2e:	2a09      	cmp	r2, #9
    5d30:	b2d4      	uxtb	r4, r2
    5d32:	d81e      	bhi.n	5d72 <encode_uint+0x74>
    5d34:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    5d36:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5d38:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    5d3a:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5d3e:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    5d42:	d301      	bcc.n	5d48 <encode_uint+0x4a>
    5d44:	45d1      	cmp	r9, sl
    5d46:	d811      	bhi.n	5d6c <encode_uint+0x6e>
	if (conv->flag_hash) {
    5d48:	782b      	ldrb	r3, [r5, #0]
    5d4a:	069b      	lsls	r3, r3, #26
    5d4c:	d505      	bpl.n	5d5a <encode_uint+0x5c>
		if (radix == 8) {
    5d4e:	2e08      	cmp	r6, #8
    5d50:	d115      	bne.n	5d7e <encode_uint+0x80>
			conv->altform_0 = true;
    5d52:	78ab      	ldrb	r3, [r5, #2]
    5d54:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    5d58:	70ab      	strb	r3, [r5, #2]
}
    5d5a:	4648      	mov	r0, r9
    5d5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    5d60:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    5d64:	2b70      	cmp	r3, #112	; 0x70
    5d66:	e7d7      	b.n	5d18 <encode_uint+0x1a>
	switch (specifier) {
    5d68:	2608      	movs	r6, #8
    5d6a:	e7d8      	b.n	5d1e <encode_uint+0x20>
		value /= radix;
    5d6c:	4680      	mov	r8, r0
    5d6e:	460f      	mov	r7, r1
    5d70:	e7d7      	b.n	5d22 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5d72:	f1bb 0f19 	cmp.w	fp, #25
    5d76:	bf94      	ite	ls
    5d78:	3437      	addls	r4, #55	; 0x37
    5d7a:	3457      	addhi	r4, #87	; 0x57
    5d7c:	e7db      	b.n	5d36 <encode_uint+0x38>
		} else if (radix == 16) {
    5d7e:	2e10      	cmp	r6, #16
    5d80:	d1eb      	bne.n	5d5a <encode_uint+0x5c>
			conv->altform_0c = true;
    5d82:	78ab      	ldrb	r3, [r5, #2]
    5d84:	f043 0310 	orr.w	r3, r3, #16
    5d88:	e7e6      	b.n	5d58 <encode_uint+0x5a>

00005d8a <outs>:
{
    5d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d8e:	4607      	mov	r7, r0
    5d90:	4688      	mov	r8, r1
    5d92:	4615      	mov	r5, r2
    5d94:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5d96:	4614      	mov	r4, r2
    5d98:	42b4      	cmp	r4, r6
    5d9a:	eba4 0005 	sub.w	r0, r4, r5
    5d9e:	d302      	bcc.n	5da6 <outs+0x1c>
    5da0:	b93e      	cbnz	r6, 5db2 <outs+0x28>
    5da2:	7823      	ldrb	r3, [r4, #0]
    5da4:	b12b      	cbz	r3, 5db2 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    5da6:	f814 0b01 	ldrb.w	r0, [r4], #1
    5daa:	4641      	mov	r1, r8
    5dac:	47b8      	blx	r7
		if (rc < 0) {
    5dae:	2800      	cmp	r0, #0
    5db0:	daf2      	bge.n	5d98 <outs+0xe>
}
    5db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005db6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    5db6:	4770      	bx	lr

00005db8 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
    5db8:	2300      	movs	r3, #0
	list->head = NULL;
    5dba:	e9c0 3300 	strd	r3, r3, [r0]
}
    5dbe:	4770      	bx	lr

00005dc0 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
    5dc0:	6803      	ldr	r3, [r0, #0]
    5dc2:	b923      	cbnz	r3, 5dce <log_list_add_tail+0xe>
		list->head = msg;
    5dc4:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
    5dc6:	2300      	movs	r3, #0
	list->tail = msg;
    5dc8:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    5dca:	600b      	str	r3, [r1, #0]
}
    5dcc:	4770      	bx	lr
		list->tail->next = msg;
    5dce:	6843      	ldr	r3, [r0, #4]
    5dd0:	6019      	str	r1, [r3, #0]
    5dd2:	e7f8      	b.n	5dc6 <log_list_add_tail+0x6>

00005dd4 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
    5dd4:	6800      	ldr	r0, [r0, #0]
    5dd6:	4770      	bx	lr

00005dd8 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
    5dd8:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
    5dda:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
    5ddc:	b108      	cbz	r0, 5de2 <log_list_head_get+0xa>
		list->head = list->head->next;
    5dde:	6802      	ldr	r2, [r0, #0]
    5de0:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
    5de2:	4770      	bx	lr

00005de4 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
    5de4:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    5de6:	f7fb fed1 	bl	1b8c <log_msg_chunk_alloc>

	if (msg != NULL) {
    5dea:	b118      	cbz	r0, 5df4 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    5dec:	2301      	movs	r3, #1
    5dee:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    5df0:	2300      	movs	r3, #0
    5df2:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
    5df4:	bd08      	pop	{r3, pc}

00005df6 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    5df6:	f7fc bd05 	b.w	2804 <sys_clock_cycle_get_32>

00005dfa <dummy_timestamp>:
    5dfa:	2000      	movs	r0, #0
    5dfc:	4770      	bx	lr

00005dfe <z_log_get_s_mask>:
{
    5dfe:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e00:	4605      	mov	r5, r0
	uint32_t mask = 0U;
    5e02:	2000      	movs	r0, #0
	uint32_t arg = 0U;
    5e04:	4603      	mov	r3, r0
	bool arm = false;
    5e06:	4602      	mov	r2, r0
				mask |= BIT(arg);
    5e08:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
    5e0a:	f815 4b01 	ldrb.w	r4, [r5], #1
    5e0e:	b10c      	cbz	r4, 5e14 <z_log_get_s_mask+0x16>
    5e10:	428b      	cmp	r3, r1
    5e12:	d300      	bcc.n	5e16 <z_log_get_s_mask+0x18>
}
    5e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
    5e16:	2c25      	cmp	r4, #37	; 0x25
    5e18:	d102      	bne.n	5e20 <z_log_get_s_mask+0x22>
			arm = !arm;
    5e1a:	f082 0201 	eor.w	r2, r2, #1
    5e1e:	e7f4      	b.n	5e0a <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
    5e20:	2a00      	cmp	r2, #0
    5e22:	d0f2      	beq.n	5e0a <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    5e24:	f044 0620 	orr.w	r6, r4, #32
    5e28:	3e61      	subs	r6, #97	; 0x61
    5e2a:	2e19      	cmp	r6, #25
    5e2c:	d8ed      	bhi.n	5e0a <z_log_get_s_mask+0xc>
			if (curr == 's') {
    5e2e:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
    5e30:	bf04      	itt	eq
    5e32:	fa07 f203 	lsleq.w	r2, r7, r3
    5e36:	4310      	orreq	r0, r2
			arg++;
    5e38:	3301      	adds	r3, #1
			arm = false;
    5e3a:	2200      	movs	r2, #0
    5e3c:	e7e5      	b.n	5e0a <z_log_get_s_mask+0xc>

00005e3e <log_0>:
{
    5e3e:	b538      	push	{r3, r4, r5, lr}
    5e40:	4605      	mov	r5, r0
    5e42:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
    5e44:	f7ff ffce 	bl	5de4 <z_log_msg_std_alloc>

	if (msg != NULL) {
    5e48:	b128      	cbz	r0, 5e56 <log_0+0x18>
		msg->str = str;
    5e4a:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
    5e4c:	4621      	mov	r1, r4
}
    5e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
    5e52:	f7fb bdd9 	b.w	1a08 <msg_finalize>
}
    5e56:	bd38      	pop	{r3, r4, r5, pc}

00005e58 <log_1>:
{
    5e58:	b570      	push	{r4, r5, r6, lr}
    5e5a:	4606      	mov	r6, r0
    5e5c:	460d      	mov	r5, r1
    5e5e:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    5e60:	f7ff ffc0 	bl	5de4 <z_log_msg_std_alloc>

	if (msg != NULL) {
    5e64:	b158      	cbz	r0, 5e7e <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
    5e66:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
    5e68:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
    5e6a:	2101      	movs	r1, #1
    5e6c:	f361 1207 	bfi	r2, r1, #4, #4
    5e70:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
    5e72:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
    5e74:	4621      	mov	r1, r4
}
    5e76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
    5e7a:	f7fb bdc5 	b.w	1a08 <msg_finalize>
}
    5e7e:	bd70      	pop	{r4, r5, r6, pc}

00005e80 <log_2>:
{
    5e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e84:	4680      	mov	r8, r0
    5e86:	460f      	mov	r7, r1
    5e88:	4616      	mov	r6, r2
    5e8a:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    5e8c:	f7ff ffaa 	bl	5de4 <z_log_msg_std_alloc>

	if (msg != NULL) {
    5e90:	b168      	cbz	r0, 5eae <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
    5e92:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
    5e94:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
    5e98:	2202      	movs	r2, #2
    5e9a:	f362 1307 	bfi	r3, r2, #4, #4
    5e9e:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    5ea0:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
    5ea4:	4629      	mov	r1, r5
}
    5ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
    5eaa:	f7fb bdad 	b.w	1a08 <msg_finalize>
}
    5eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005eb2 <log_3>:
{
    5eb2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5eb6:	4680      	mov	r8, r0
    5eb8:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    5ebc:	460f      	mov	r7, r1
    5ebe:	4616      	mov	r6, r2
    5ec0:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    5ec2:	f7ff ff8f 	bl	5de4 <z_log_msg_std_alloc>

	if (msg != NULL) {
    5ec6:	b170      	cbz	r0, 5ee6 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
    5ec8:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
    5eca:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
    5ece:	2203      	movs	r2, #3
    5ed0:	f362 1307 	bfi	r3, r2, #4, #4
    5ed4:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    5ed6:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
    5eda:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
    5edc:	4649      	mov	r1, r9
}
    5ede:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
    5ee2:	f7fb bd91 	b.w	1a08 <msg_finalize>
}
    5ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00005eea <log_printk>:
{
    5eea:	b500      	push	{lr}
    5eec:	b0a3      	sub	sp, #140	; 0x8c
    5eee:	4602      	mov	r2, r0
    5ef0:	460b      	mov	r3, r1
			length = vsnprintk(str, sizeof(str), fmt, ap);
    5ef2:	a801      	add	r0, sp, #4
    5ef4:	2181      	movs	r1, #129	; 0x81
    5ef6:	f7fa fed5 	bl	ca4 <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
    5efa:	2881      	cmp	r0, #129	; 0x81
    5efc:	4602      	mov	r2, r0
    5efe:	a901      	add	r1, sp, #4
    5f00:	bf28      	it	cs
    5f02:	2281      	movcs	r2, #129	; 0x81
    5f04:	2000      	movs	r0, #0
    5f06:	f000 f8a2 	bl	604e <log_msg_hexdump_create>
			if (msg == NULL) {
    5f0a:	b118      	cbz	r0, 5f14 <log_printk+0x2a>
			msg_finalize(msg, src_level_union.structure);
    5f0c:	f04f 0100 	mov.w	r1, #0
    5f10:	f7fb fd7a 	bl	1a08 <msg_finalize>
}
    5f14:	b023      	add	sp, #140	; 0x8c
    5f16:	f85d fb04 	ldr.w	pc, [sp], #4

00005f1a <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    5f1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5f1e:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
    5f20:	8903      	ldrh	r3, [r0, #8]
{
    5f22:	f89d 7020 	ldrb.w	r7, [sp, #32]
    5f26:	460e      	mov	r6, r1
    5f28:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
    5f2a:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
    5f2e:	42a2      	cmp	r2, r4
    5f30:	d803      	bhi.n	5f3a <log_msg_hexdump_data_op+0x20>
		*length = 0;
    5f32:	2300      	movs	r3, #0
    5f34:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    5f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
    5f3a:	680b      	ldr	r3, [r1, #0]
    5f3c:	4423      	add	r3, r4
    5f3e:	4293      	cmp	r3, r2
		*length = available_len - offset;
    5f40:	bf84      	itt	hi
    5f42:	1b13      	subhi	r3, r2, r4
    5f44:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    5f46:	2a0c      	cmp	r2, #12
	req_len = *length;
    5f48:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    5f4c:	d92a      	bls.n	5fa4 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
    5f4e:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
    5f50:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
    5f54:	d82d      	bhi.n	5fb2 <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
    5f56:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    5f58:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    5f5a:	454a      	cmp	r2, r9
    5f5c:	bf28      	it	cs
    5f5e:	464a      	movcs	r2, r9
    5f60:	4615      	mov	r5, r2
			(void)memcpy(&head_data[offset], data, cpy_len);
    5f62:	4420      	add	r0, r4
		if (put_op) {
    5f64:	b317      	cbz	r7, 5fac <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
    5f66:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
    5f68:	f000 fb8f 	bl	668a <memcpy>
		req_len -= cpy_len;
    5f6c:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
    5f70:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
    5f72:	f1b9 0f00 	cmp.w	r9, #0
    5f76:	d0de      	beq.n	5f36 <log_msg_hexdump_data_op+0x1c>
    5f78:	f1b8 0f00 	cmp.w	r8, #0
    5f7c:	d0db      	beq.n	5f36 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    5f7e:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    5f82:	454d      	cmp	r5, r9
    5f84:	bf28      	it	cs
    5f86:	464d      	movcs	r5, r9
			(void)memcpy(&cont->payload.bytes[offset],
    5f88:	1d20      	adds	r0, r4, #4
    5f8a:	4440      	add	r0, r8
    5f8c:	462a      	mov	r2, r5
		if (put_op) {
    5f8e:	b1bf      	cbz	r7, 5fc0 <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
    5f90:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
    5f92:	f000 fb7a 	bl	668a <memcpy>
		req_len -= cpy_len;
    5f96:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
    5f9a:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
    5f9e:	442e      	add	r6, r5
		offset = 0;
    5fa0:	2400      	movs	r4, #0
    5fa2:	e7e6      	b.n	5f72 <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
    5fa4:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
    5fa6:	f04f 0800 	mov.w	r8, #0
    5faa:	e7d6      	b.n	5f5a <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
    5fac:	4601      	mov	r1, r0
    5fae:	4630      	mov	r0, r6
    5fb0:	e7da      	b.n	5f68 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
    5fb2:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
    5fb4:	2c1b      	cmp	r4, #27
    5fb6:	d9dc      	bls.n	5f72 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
    5fb8:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
    5fbc:	3c1c      	subs	r4, #28
    5fbe:	e7f9      	b.n	5fb4 <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
    5fc0:	4601      	mov	r1, r0
    5fc2:	4630      	mov	r0, r6
    5fc4:	e7e5      	b.n	5f92 <log_msg_hexdump_data_op+0x78>

00005fc6 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    5fc6:	3004      	adds	r0, #4
    5fc8:	f3bf 8f5b 	dmb	ish
    5fcc:	e850 3f00 	ldrex	r3, [r0]
    5fd0:	3301      	adds	r3, #1
    5fd2:	e840 3200 	strex	r2, r3, [r0]
    5fd6:	2a00      	cmp	r2, #0
    5fd8:	d1f8      	bne.n	5fcc <log_msg_get+0x6>
    5fda:	f3bf 8f5b 	dmb	ish
}
    5fde:	4770      	bx	lr

00005fe0 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    5fe0:	7a40      	ldrb	r0, [r0, #9]
}
    5fe2:	0900      	lsrs	r0, r0, #4
    5fe4:	4770      	bx	lr

00005fe6 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
    5fe6:	7a43      	ldrb	r3, [r0, #9]
    5fe8:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
    5fec:	ea4f 1213 	mov.w	r2, r3, lsr #4
    5ff0:	d216      	bcs.n	6020 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    5ff2:	2a03      	cmp	r2, #3
    5ff4:	d803      	bhi.n	5ffe <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
    5ff6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    5ffa:	6940      	ldr	r0, [r0, #20]
    5ffc:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    5ffe:	2901      	cmp	r1, #1
    6000:	d803      	bhi.n	600a <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
    6002:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6006:	6980      	ldr	r0, [r0, #24]
    6008:	4770      	bx	lr
	cont = msg->payload.ext.next;
    600a:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    600c:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
    600e:	2906      	cmp	r1, #6
    6010:	d803      	bhi.n	601a <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
    6012:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6016:	6848      	ldr	r0, [r1, #4]
    6018:	4770      	bx	lr
		cont = cont->next;
    601a:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
    601c:	3907      	subs	r1, #7
		cont = cont->next;
    601e:	e7f6      	b.n	600e <log_msg_arg_get+0x28>
		return 0;
    6020:	2000      	movs	r0, #0
}
    6022:	4770      	bx	lr

00006024 <log_msg_put>:
{
    6024:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    6026:	1d02      	adds	r2, r0, #4
    6028:	f3bf 8f5b 	dmb	ish
    602c:	e852 1f00 	ldrex	r1, [r2]
    6030:	3901      	subs	r1, #1
    6032:	e842 1c00 	strex	ip, r1, [r2]
    6036:	f1bc 0f00 	cmp.w	ip, #0
    603a:	d1f7      	bne.n	602c <log_msg_put+0x8>
    603c:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
    6040:	685b      	ldr	r3, [r3, #4]
    6042:	b90b      	cbnz	r3, 6048 <log_msg_put+0x24>
		msg_free(msg);
    6044:	f7fb bdb6 	b.w	1bb4 <msg_free>
}
    6048:	4770      	bx	lr

0000604a <log_msg_str_get>:
}
    604a:	6900      	ldr	r0, [r0, #16]
    604c:	4770      	bx	lr

0000604e <log_msg_hexdump_create>:
{
    604e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
    6052:	f643 75ff 	movw	r5, #16383	; 0x3fff
    6056:	4295      	cmp	r5, r2
{
    6058:	4680      	mov	r8, r0
    605a:	460e      	mov	r6, r1
    605c:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
    605e:	bf28      	it	cs
    6060:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
    6062:	f7fb fd93 	bl	1b8c <log_msg_chunk_alloc>
	if (msg == NULL) {
    6066:	4604      	mov	r4, r0
    6068:	b388      	cbz	r0, 60ce <log_msg_hexdump_create+0x80>
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
    606a:	8902      	ldrh	r2, [r0, #8]
	msg->str = str;
    606c:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
    6070:	2301      	movs	r3, #1
    6072:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
    6074:	00ab      	lsls	r3, r5, #2
    6076:	f043 0301 	orr.w	r3, r3, #1
    607a:	f002 0202 	and.w	r2, r2, #2
    607e:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    6080:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
    6082:	8103      	strh	r3, [r0, #8]
		(void)memcpy(msg->payload.single.bytes, data, length);
    6084:	f100 0814 	add.w	r8, r0, #20
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    6088:	d918      	bls.n	60bc <log_msg_hexdump_create+0x6e>
		(void)memcpy(msg->payload.ext.data.bytes,
    608a:	4631      	mov	r1, r6
    608c:	2208      	movs	r2, #8
    608e:	3018      	adds	r0, #24
    6090:	f000 fafb 	bl	668a <memcpy>
		msg->hdr.params.generic.ext = 1;
    6094:	7a23      	ldrb	r3, [r4, #8]
		msg->payload.ext.next = NULL;
    6096:	f04f 0900 	mov.w	r9, #0
		msg->hdr.params.generic.ext = 1;
    609a:	f043 0302 	orr.w	r3, r3, #2
		msg->payload.ext.next = NULL;
    609e:	f8c4 9014 	str.w	r9, [r4, #20]
		msg->hdr.params.generic.ext = 1;
    60a2:	7223      	strb	r3, [r4, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    60a4:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    60a6:	3d08      	subs	r5, #8
	while (length > 0) {
    60a8:	b18d      	cbz	r5, 60ce <log_msg_hexdump_create+0x80>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
    60aa:	f7fb fd6f 	bl	1b8c <log_msg_chunk_alloc>
		if (cont == NULL) {
    60ae:	4607      	mov	r7, r0
    60b0:	b980      	cbnz	r0, 60d4 <log_msg_hexdump_create+0x86>
			msg_free(msg);
    60b2:	4620      	mov	r0, r4
    60b4:	f7fb fd7e 	bl	1bb4 <msg_free>
			return NULL;
    60b8:	463c      	mov	r4, r7
    60ba:	e008      	b.n	60ce <log_msg_hexdump_create+0x80>
		(void)memcpy(msg->payload.single.bytes, data, length);
    60bc:	462a      	mov	r2, r5
    60be:	4631      	mov	r1, r6
    60c0:	4640      	mov	r0, r8
    60c2:	f000 fae2 	bl	668a <memcpy>
		msg->hdr.params.generic.ext = 0;
    60c6:	7a23      	ldrb	r3, [r4, #8]
    60c8:	f36f 0341 	bfc	r3, #1, #1
    60cc:	7223      	strb	r3, [r4, #8]
}
    60ce:	4620      	mov	r0, r4
    60d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
    60d4:	2d1c      	cmp	r5, #28
    60d6:	462f      	mov	r7, r5
    60d8:	bf28      	it	cs
    60da:	271c      	movcs	r7, #28
		*prev_cont = cont;
    60dc:	f8c8 0000 	str.w	r0, [r8]
		(void)memcpy(cont->payload.bytes, data, chunk_length);
    60e0:	4631      	mov	r1, r6
		cont->next = NULL;
    60e2:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
    60e6:	4680      	mov	r8, r0
		(void)memcpy(cont->payload.bytes, data, chunk_length);
    60e8:	463a      	mov	r2, r7
    60ea:	3004      	adds	r0, #4
    60ec:	f000 facd 	bl	668a <memcpy>
		data += chunk_length;
    60f0:	443e      	add	r6, r7
		length -= chunk_length;
    60f2:	1bed      	subs	r5, r5, r7
    60f4:	e7d8      	b.n	60a8 <log_msg_hexdump_create+0x5a>

000060f6 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
    60f6:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    60f8:	2400      	movs	r4, #0
    60fa:	9400      	str	r4, [sp, #0]
    60fc:	f7ff ff0d 	bl	5f1a <log_msg_hexdump_data_op>
}
    6100:	b002      	add	sp, #8
    6102:	bd10      	pop	{r4, pc}

00006104 <buffer_write>:
{
    6104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6106:	4606      	mov	r6, r0
    6108:	460d      	mov	r5, r1
    610a:	4614      	mov	r4, r2
    610c:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    610e:	4621      	mov	r1, r4
    6110:	4628      	mov	r0, r5
    6112:	463a      	mov	r2, r7
    6114:	47b0      	blx	r6
	} while (len != 0);
    6116:	1a24      	subs	r4, r4, r0
		buf += processed;
    6118:	4405      	add	r5, r0
	} while (len != 0);
    611a:	d1f8      	bne.n	610e <buffer_write+0xa>
}
    611c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000611e <std_print>:
{
    611e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6122:	b08e      	sub	sp, #56	; 0x38
    6124:	af0e      	add	r7, sp, #56	; 0x38
    6126:	4680      	mov	r8, r0
    6128:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
    612a:	f7ff ff8e 	bl	604a <log_msg_str_get>
    612e:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
    6130:	4640      	mov	r0, r8
    6132:	f7ff ff55 	bl	5fe0 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
    6136:	0083      	lsls	r3, r0, #2
    6138:	3307      	adds	r3, #7
    613a:	f023 0307 	bic.w	r3, r3, #7
    613e:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
    6142:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
    6144:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
    6146:	f04f 0900 	mov.w	r9, #0
    614a:	45d1      	cmp	r9, sl
    614c:	d116      	bne.n	617c <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
    614e:	4640      	mov	r0, r8
    6150:	f7ff ff46 	bl	5fe0 <log_msg_nargs_get>
    6154:	280f      	cmp	r0, #15
    6156:	d81e      	bhi.n	6196 <std_print+0x78>
    6158:	e8df f010 	tbh	[pc, r0, lsl #1]
    615c:	00200019 	.word	0x00200019
    6160:	002d0026 	.word	0x002d0026
    6164:	00410036 	.word	0x00410036
    6168:	005d004e 	.word	0x005d004e
    616c:	0081006e 	.word	0x0081006e
    6170:	00ad0096 	.word	0x00ad0096
    6174:	00e100c6 	.word	0x00e100c6
    6178:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
    617c:	4649      	mov	r1, r9
    617e:	4640      	mov	r0, r8
    6180:	f7ff ff31 	bl	5fe6 <log_msg_arg_get>
    6184:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
    6188:	f109 0901 	add.w	r9, r9, #1
    618c:	e7dd      	b.n	614a <std_print+0x2c>
		print_formatted(output, str);
    618e:	4631      	mov	r1, r6
    6190:	4628      	mov	r0, r5
    6192:	f7fb fd4d 	bl	1c30 <print_formatted>
}
    6196:	46bd      	mov	sp, r7
    6198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
    619c:	6822      	ldr	r2, [r4, #0]
    619e:	4631      	mov	r1, r6
    61a0:	4628      	mov	r0, r5
    61a2:	f7fb fd45 	bl	1c30 <print_formatted>
		break;
    61a6:	e7f6      	b.n	6196 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
    61a8:	e9d4 2300 	ldrd	r2, r3, [r4]
    61ac:	4631      	mov	r1, r6
    61ae:	4628      	mov	r0, r5
    61b0:	f7fb fd3e 	bl	1c30 <print_formatted>
		break;
    61b4:	e7ef      	b.n	6196 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
    61b6:	68a3      	ldr	r3, [r4, #8]
    61b8:	9300      	str	r3, [sp, #0]
    61ba:	e9d4 2300 	ldrd	r2, r3, [r4]
    61be:	4631      	mov	r1, r6
    61c0:	4628      	mov	r0, r5
    61c2:	f7fb fd35 	bl	1c30 <print_formatted>
		break;
    61c6:	e7e6      	b.n	6196 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    61c8:	68e3      	ldr	r3, [r4, #12]
    61ca:	9301      	str	r3, [sp, #4]
    61cc:	68a3      	ldr	r3, [r4, #8]
    61ce:	9300      	str	r3, [sp, #0]
    61d0:	e9d4 2300 	ldrd	r2, r3, [r4]
    61d4:	4631      	mov	r1, r6
    61d6:	4628      	mov	r0, r5
    61d8:	f7fb fd2a 	bl	1c30 <print_formatted>
		break;
    61dc:	e7db      	b.n	6196 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    61de:	6923      	ldr	r3, [r4, #16]
    61e0:	9302      	str	r3, [sp, #8]
    61e2:	68e3      	ldr	r3, [r4, #12]
    61e4:	9301      	str	r3, [sp, #4]
    61e6:	68a3      	ldr	r3, [r4, #8]
    61e8:	9300      	str	r3, [sp, #0]
    61ea:	e9d4 2300 	ldrd	r2, r3, [r4]
    61ee:	4631      	mov	r1, r6
    61f0:	4628      	mov	r0, r5
    61f2:	f7fb fd1d 	bl	1c30 <print_formatted>
		break;
    61f6:	e7ce      	b.n	6196 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    61f8:	6963      	ldr	r3, [r4, #20]
    61fa:	9303      	str	r3, [sp, #12]
    61fc:	6923      	ldr	r3, [r4, #16]
    61fe:	9302      	str	r3, [sp, #8]
    6200:	68e3      	ldr	r3, [r4, #12]
    6202:	9301      	str	r3, [sp, #4]
    6204:	68a3      	ldr	r3, [r4, #8]
    6206:	9300      	str	r3, [sp, #0]
    6208:	e9d4 2300 	ldrd	r2, r3, [r4]
    620c:	4631      	mov	r1, r6
    620e:	4628      	mov	r0, r5
    6210:	f7fb fd0e 	bl	1c30 <print_formatted>
		break;
    6214:	e7bf      	b.n	6196 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    6216:	69a3      	ldr	r3, [r4, #24]
    6218:	9304      	str	r3, [sp, #16]
    621a:	6963      	ldr	r3, [r4, #20]
    621c:	9303      	str	r3, [sp, #12]
    621e:	6923      	ldr	r3, [r4, #16]
    6220:	9302      	str	r3, [sp, #8]
    6222:	68e3      	ldr	r3, [r4, #12]
    6224:	9301      	str	r3, [sp, #4]
    6226:	68a3      	ldr	r3, [r4, #8]
    6228:	9300      	str	r3, [sp, #0]
    622a:	e9d4 2300 	ldrd	r2, r3, [r4]
    622e:	4631      	mov	r1, r6
    6230:	4628      	mov	r0, r5
    6232:	f7fb fcfd 	bl	1c30 <print_formatted>
		break;
    6236:	e7ae      	b.n	6196 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    6238:	69e3      	ldr	r3, [r4, #28]
    623a:	9305      	str	r3, [sp, #20]
    623c:	69a3      	ldr	r3, [r4, #24]
    623e:	9304      	str	r3, [sp, #16]
    6240:	6963      	ldr	r3, [r4, #20]
    6242:	9303      	str	r3, [sp, #12]
    6244:	6923      	ldr	r3, [r4, #16]
    6246:	9302      	str	r3, [sp, #8]
    6248:	68e3      	ldr	r3, [r4, #12]
    624a:	9301      	str	r3, [sp, #4]
    624c:	68a3      	ldr	r3, [r4, #8]
    624e:	9300      	str	r3, [sp, #0]
    6250:	e9d4 2300 	ldrd	r2, r3, [r4]
    6254:	4631      	mov	r1, r6
    6256:	4628      	mov	r0, r5
    6258:	f7fb fcea 	bl	1c30 <print_formatted>
		break;
    625c:	e79b      	b.n	6196 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    625e:	6a23      	ldr	r3, [r4, #32]
    6260:	9306      	str	r3, [sp, #24]
    6262:	69e3      	ldr	r3, [r4, #28]
    6264:	9305      	str	r3, [sp, #20]
    6266:	69a3      	ldr	r3, [r4, #24]
    6268:	9304      	str	r3, [sp, #16]
    626a:	6963      	ldr	r3, [r4, #20]
    626c:	9303      	str	r3, [sp, #12]
    626e:	6923      	ldr	r3, [r4, #16]
    6270:	9302      	str	r3, [sp, #8]
    6272:	68e3      	ldr	r3, [r4, #12]
    6274:	9301      	str	r3, [sp, #4]
    6276:	68a3      	ldr	r3, [r4, #8]
    6278:	9300      	str	r3, [sp, #0]
    627a:	e9d4 2300 	ldrd	r2, r3, [r4]
    627e:	4631      	mov	r1, r6
    6280:	4628      	mov	r0, r5
    6282:	f7fb fcd5 	bl	1c30 <print_formatted>
		break;
    6286:	e786      	b.n	6196 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    6288:	6a63      	ldr	r3, [r4, #36]	; 0x24
    628a:	9307      	str	r3, [sp, #28]
    628c:	6a23      	ldr	r3, [r4, #32]
    628e:	9306      	str	r3, [sp, #24]
    6290:	69e3      	ldr	r3, [r4, #28]
    6292:	9305      	str	r3, [sp, #20]
    6294:	69a3      	ldr	r3, [r4, #24]
    6296:	9304      	str	r3, [sp, #16]
    6298:	6963      	ldr	r3, [r4, #20]
    629a:	9303      	str	r3, [sp, #12]
    629c:	6923      	ldr	r3, [r4, #16]
    629e:	9302      	str	r3, [sp, #8]
    62a0:	68e3      	ldr	r3, [r4, #12]
    62a2:	9301      	str	r3, [sp, #4]
    62a4:	68a3      	ldr	r3, [r4, #8]
    62a6:	9300      	str	r3, [sp, #0]
    62a8:	e9d4 2300 	ldrd	r2, r3, [r4]
    62ac:	4631      	mov	r1, r6
    62ae:	4628      	mov	r0, r5
    62b0:	f7fb fcbe 	bl	1c30 <print_formatted>
		break;
    62b4:	e76f      	b.n	6196 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    62b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    62b8:	9308      	str	r3, [sp, #32]
    62ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    62bc:	9307      	str	r3, [sp, #28]
    62be:	6a23      	ldr	r3, [r4, #32]
    62c0:	9306      	str	r3, [sp, #24]
    62c2:	69e3      	ldr	r3, [r4, #28]
    62c4:	9305      	str	r3, [sp, #20]
    62c6:	69a3      	ldr	r3, [r4, #24]
    62c8:	9304      	str	r3, [sp, #16]
    62ca:	6963      	ldr	r3, [r4, #20]
    62cc:	9303      	str	r3, [sp, #12]
    62ce:	6923      	ldr	r3, [r4, #16]
    62d0:	9302      	str	r3, [sp, #8]
    62d2:	68e3      	ldr	r3, [r4, #12]
    62d4:	9301      	str	r3, [sp, #4]
    62d6:	68a3      	ldr	r3, [r4, #8]
    62d8:	9300      	str	r3, [sp, #0]
    62da:	e9d4 2300 	ldrd	r2, r3, [r4]
    62de:	4631      	mov	r1, r6
    62e0:	4628      	mov	r0, r5
    62e2:	f7fb fca5 	bl	1c30 <print_formatted>
		break;
    62e6:	e756      	b.n	6196 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    62e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    62ea:	9309      	str	r3, [sp, #36]	; 0x24
    62ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    62ee:	9308      	str	r3, [sp, #32]
    62f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    62f2:	9307      	str	r3, [sp, #28]
    62f4:	6a23      	ldr	r3, [r4, #32]
    62f6:	9306      	str	r3, [sp, #24]
    62f8:	69e3      	ldr	r3, [r4, #28]
    62fa:	9305      	str	r3, [sp, #20]
    62fc:	69a3      	ldr	r3, [r4, #24]
    62fe:	9304      	str	r3, [sp, #16]
    6300:	6963      	ldr	r3, [r4, #20]
    6302:	9303      	str	r3, [sp, #12]
    6304:	6923      	ldr	r3, [r4, #16]
    6306:	9302      	str	r3, [sp, #8]
    6308:	68e3      	ldr	r3, [r4, #12]
    630a:	9301      	str	r3, [sp, #4]
    630c:	68a3      	ldr	r3, [r4, #8]
    630e:	9300      	str	r3, [sp, #0]
    6310:	e9d4 2300 	ldrd	r2, r3, [r4]
    6314:	4631      	mov	r1, r6
    6316:	4628      	mov	r0, r5
    6318:	f7fb fc8a 	bl	1c30 <print_formatted>
		break;
    631c:	e73b      	b.n	6196 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    631e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6320:	930a      	str	r3, [sp, #40]	; 0x28
    6322:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6324:	9309      	str	r3, [sp, #36]	; 0x24
    6326:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6328:	9308      	str	r3, [sp, #32]
    632a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    632c:	9307      	str	r3, [sp, #28]
    632e:	6a23      	ldr	r3, [r4, #32]
    6330:	9306      	str	r3, [sp, #24]
    6332:	69e3      	ldr	r3, [r4, #28]
    6334:	9305      	str	r3, [sp, #20]
    6336:	69a3      	ldr	r3, [r4, #24]
    6338:	9304      	str	r3, [sp, #16]
    633a:	6963      	ldr	r3, [r4, #20]
    633c:	9303      	str	r3, [sp, #12]
    633e:	6923      	ldr	r3, [r4, #16]
    6340:	9302      	str	r3, [sp, #8]
    6342:	68e3      	ldr	r3, [r4, #12]
    6344:	9301      	str	r3, [sp, #4]
    6346:	68a3      	ldr	r3, [r4, #8]
    6348:	9300      	str	r3, [sp, #0]
    634a:	e9d4 2300 	ldrd	r2, r3, [r4]
    634e:	4631      	mov	r1, r6
    6350:	4628      	mov	r0, r5
    6352:	f7fb fc6d 	bl	1c30 <print_formatted>
		break;
    6356:	e71e      	b.n	6196 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    6358:	6b63      	ldr	r3, [r4, #52]	; 0x34
    635a:	930b      	str	r3, [sp, #44]	; 0x2c
    635c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    635e:	930a      	str	r3, [sp, #40]	; 0x28
    6360:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6362:	9309      	str	r3, [sp, #36]	; 0x24
    6364:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6366:	9308      	str	r3, [sp, #32]
    6368:	6a63      	ldr	r3, [r4, #36]	; 0x24
    636a:	9307      	str	r3, [sp, #28]
    636c:	6a23      	ldr	r3, [r4, #32]
    636e:	9306      	str	r3, [sp, #24]
    6370:	69e3      	ldr	r3, [r4, #28]
    6372:	9305      	str	r3, [sp, #20]
    6374:	69a3      	ldr	r3, [r4, #24]
    6376:	9304      	str	r3, [sp, #16]
    6378:	6963      	ldr	r3, [r4, #20]
    637a:	9303      	str	r3, [sp, #12]
    637c:	6923      	ldr	r3, [r4, #16]
    637e:	9302      	str	r3, [sp, #8]
    6380:	68e3      	ldr	r3, [r4, #12]
    6382:	9301      	str	r3, [sp, #4]
    6384:	68a3      	ldr	r3, [r4, #8]
    6386:	9300      	str	r3, [sp, #0]
    6388:	e9d4 2300 	ldrd	r2, r3, [r4]
    638c:	4631      	mov	r1, r6
    638e:	4628      	mov	r0, r5
    6390:	f7fb fc4e 	bl	1c30 <print_formatted>
		break;
    6394:	e6ff      	b.n	6196 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    6396:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6398:	930c      	str	r3, [sp, #48]	; 0x30
    639a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    639c:	930b      	str	r3, [sp, #44]	; 0x2c
    639e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    63a0:	930a      	str	r3, [sp, #40]	; 0x28
    63a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    63a4:	9309      	str	r3, [sp, #36]	; 0x24
    63a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    63a8:	9308      	str	r3, [sp, #32]
    63aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    63ac:	9307      	str	r3, [sp, #28]
    63ae:	6a23      	ldr	r3, [r4, #32]
    63b0:	9306      	str	r3, [sp, #24]
    63b2:	69e3      	ldr	r3, [r4, #28]
    63b4:	9305      	str	r3, [sp, #20]
    63b6:	69a3      	ldr	r3, [r4, #24]
    63b8:	9304      	str	r3, [sp, #16]
    63ba:	6963      	ldr	r3, [r4, #20]
    63bc:	9303      	str	r3, [sp, #12]
    63be:	6923      	ldr	r3, [r4, #16]
    63c0:	9302      	str	r3, [sp, #8]
    63c2:	68e3      	ldr	r3, [r4, #12]
    63c4:	9301      	str	r3, [sp, #4]
    63c6:	68a3      	ldr	r3, [r4, #8]
    63c8:	9300      	str	r3, [sp, #0]
    63ca:	e9d4 2300 	ldrd	r2, r3, [r4]
    63ce:	4631      	mov	r1, r6
    63d0:	4628      	mov	r0, r5
    63d2:	f7fb fc2d 	bl	1c30 <print_formatted>
}
    63d6:	e6de      	b.n	6196 <std_print+0x78>

000063d8 <log_output_flush>:
		     output->control_block->offset,
    63d8:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    63da:	6881      	ldr	r1, [r0, #8]
{
    63dc:	b510      	push	{r4, lr}
    63de:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    63e0:	e9d2 2300 	ldrd	r2, r3, [r2]
    63e4:	6800      	ldr	r0, [r0, #0]
    63e6:	f7ff fe8d 	bl	6104 <buffer_write>
	output->control_block->offset = 0;
    63ea:	6863      	ldr	r3, [r4, #4]
    63ec:	2200      	movs	r2, #0
    63ee:	601a      	str	r2, [r3, #0]
}
    63f0:	bd10      	pop	{r4, pc}

000063f2 <out_func>:
{
    63f2:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    63f4:	684b      	ldr	r3, [r1, #4]
    63f6:	681a      	ldr	r2, [r3, #0]
    63f8:	68cb      	ldr	r3, [r1, #12]
    63fa:	429a      	cmp	r2, r3
{
    63fc:	4605      	mov	r5, r0
    63fe:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    6400:	d102      	bne.n	6408 <out_func+0x16>
		log_output_flush(out_ctx);
    6402:	4608      	mov	r0, r1
    6404:	f7ff ffe8 	bl	63d8 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    6408:	6863      	ldr	r3, [r4, #4]
    640a:	f3bf 8f5b 	dmb	ish
    640e:	e853 2f00 	ldrex	r2, [r3]
    6412:	1c51      	adds	r1, r2, #1
    6414:	e843 1000 	strex	r0, r1, [r3]
    6418:	2800      	cmp	r0, #0
    641a:	d1f8      	bne.n	640e <out_func+0x1c>
    641c:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    6420:	68a3      	ldr	r3, [r4, #8]
    6422:	549d      	strb	r5, [r3, r2]
}
    6424:	2000      	movs	r0, #0
    6426:	bd38      	pop	{r3, r4, r5, pc}

00006428 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    6428:	2200      	movs	r2, #0
    642a:	8002      	strh	r2, [r0, #0]
    642c:	6042      	str	r2, [r0, #4]
}
    642e:	4770      	bx	lr

00006430 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    6430:	6903      	ldr	r3, [r0, #16]
    6432:	b2c9      	uxtb	r1, r1
    6434:	220c      	movs	r2, #12
    6436:	fb01 3302 	mla	r3, r1, r2, r3
    643a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    643c:	f000 0007 	and.w	r0, r0, #7
    6440:	4770      	bx	lr

00006442 <set_on_state>:
	__asm__ volatile(
    6442:	f04f 0320 	mov.w	r3, #32
    6446:	f3ef 8211 	mrs	r2, BASEPRI
    644a:	f383 8811 	msr	BASEPRI, r3
    644e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    6452:	6803      	ldr	r3, [r0, #0]
    6454:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6458:	f043 0302 	orr.w	r3, r3, #2
    645c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    645e:	f382 8811 	msr	BASEPRI, r2
    6462:	f3bf 8f6f 	isb	sy
}
    6466:	4770      	bx	lr

00006468 <stop>:
{
    6468:	4603      	mov	r3, r0
    646a:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    646c:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    646e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    6470:	f04f 0420 	mov.w	r4, #32
    6474:	f3ef 8611 	mrs	r6, BASEPRI
    6478:	f384 8811 	msr	BASEPRI, r4
    647c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6480:	250c      	movs	r5, #12
    6482:	fb05 0401 	mla	r4, r5, r1, r0
    6486:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    6488:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    648c:	d001      	beq.n	6492 <stop+0x2a>
    648e:	42a2      	cmp	r2, r4
    6490:	d111      	bne.n	64b6 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    6492:	fb05 0001 	mla	r0, r5, r1, r0
    6496:	2201      	movs	r2, #1
    6498:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    649a:	2000      	movs	r0, #0
	__asm__ volatile(
    649c:	f386 8811 	msr	BASEPRI, r6
    64a0:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    64a4:	b930      	cbnz	r0, 64b4 <stop+0x4c>
	get_sub_config(dev, type)->stop();
    64a6:	685b      	ldr	r3, [r3, #4]
    64a8:	220c      	movs	r2, #12
    64aa:	fb02 3101 	mla	r1, r2, r1, r3
    64ae:	684b      	ldr	r3, [r1, #4]
    64b0:	4798      	blx	r3
	return 0;
    64b2:	2000      	movs	r0, #0
}
    64b4:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    64b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    64ba:	e7ef      	b.n	649c <stop+0x34>

000064bc <api_stop>:
	return stop(dev, subsys, CTX_API);
    64bc:	2280      	movs	r2, #128	; 0x80
    64be:	f7ff bfd3 	b.w	6468 <stop>

000064c2 <async_start>:
{
    64c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64c4:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    64c6:	6904      	ldr	r4, [r0, #16]
{
    64c8:	4605      	mov	r5, r0
    64ca:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    64cc:	f04f 0020 	mov.w	r0, #32
    64d0:	f3ef 8c11 	mrs	ip, BASEPRI
    64d4:	f380 8811 	msr	BASEPRI, r0
    64d8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    64dc:	260c      	movs	r6, #12
    64de:	fb06 4601 	mla	r6, r6, r1, r4
    64e2:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    64e4:	f000 0e07 	and.w	lr, r0, #7
    64e8:	f1be 0f01 	cmp.w	lr, #1
    64ec:	d110      	bne.n	6510 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    64ee:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    64f0:	2600      	movs	r6, #0
	__asm__ volatile(
    64f2:	f38c 8811 	msr	BASEPRI, ip
    64f6:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    64fa:	b93e      	cbnz	r6, 650c <async_start+0x4a>
	subdata->cb = cb;
    64fc:	200c      	movs	r0, #12
    64fe:	4341      	muls	r1, r0
    6500:	440c      	add	r4, r1
	subdata->user_data = user_data;
    6502:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    6506:	686b      	ldr	r3, [r5, #4]
    6508:	585b      	ldr	r3, [r3, r1]
    650a:	4798      	blx	r3
}
    650c:	4630      	mov	r0, r6
    650e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    6510:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    6514:	4287      	cmp	r7, r0
    6516:	bf14      	ite	ne
    6518:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    651c:	f06f 0644 	mvneq.w	r6, #68	; 0x44
    6520:	e7e7      	b.n	64f2 <async_start+0x30>

00006522 <api_start>:
{
    6522:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    6524:	2480      	movs	r4, #128	; 0x80
    6526:	9400      	str	r4, [sp, #0]
    6528:	f7ff ffcb 	bl	64c2 <async_start>
}
    652c:	b002      	add	sp, #8
    652e:	bd10      	pop	{r4, pc}

00006530 <onoff_started_callback>:
	return &data->mgr[type];
    6530:	6900      	ldr	r0, [r0, #16]
{
    6532:	b410      	push	{r4}
	return &data->mgr[type];
    6534:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    6536:	241c      	movs	r4, #28
    6538:	fb03 0004 	mla	r0, r3, r4, r0
    653c:	2100      	movs	r1, #0
}
    653e:	bc10      	pop	{r4}
	notify(mgr, 0);
    6540:	4710      	bx	r2

00006542 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6542:	2000      	movs	r0, #0
    6544:	f7fd bd6a 	b.w	401c <nrfx_clock_stop>

00006548 <blocking_start_callback>:
{
    6548:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    654a:	f7fe bd81 	b.w	5050 <z_impl_k_sem_give>

0000654e <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    654e:	4770      	bx	lr

00006550 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    6550:	4770      	bx	lr

00006552 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    6552:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    6554:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    6556:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    6558:	bf9c      	itt	ls
    655a:	6880      	ldrls	r0, [r0, #8]
    655c:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
    655e:	3b01      	subs	r3, #1
    6560:	1a98      	subs	r0, r3, r2
}
    6562:	4770      	bx	lr

00006564 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    6564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    6568:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    656c:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    656e:	eba9 0804 	sub.w	r8, r9, r4
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    6572:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    6574:	4590      	cmp	r8, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    6576:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    6578:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
    657a:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    657c:	d904      	bls.n	6588 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    657e:	f000 f884 	bl	668a <memcpy>
    pRing->WrOff = NumBytesAtOnce;
    6582:	60ec      	str	r4, [r5, #12]
}
    6584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    6588:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
    658a:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    658e:	f000 f87c 	bl	668a <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    6592:	6868      	ldr	r0, [r5, #4]
    6594:	4622      	mov	r2, r4
    6596:	eb07 0108 	add.w	r1, r7, r8
    659a:	e7f0      	b.n	657e <_WriteNoCheck+0x1a>

0000659c <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    659c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    65a0:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    65a2:	4606      	mov	r6, r0
    65a4:	4689      	mov	r9, r1
    65a6:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    65a8:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    65ac:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    65ae:	68b3      	ldr	r3, [r6, #8]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    65b0:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    65b2:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    65b4:	bf28      	it	cs
    65b6:	18e4      	addcs	r4, r4, r3
    65b8:	3c01      	subs	r4, #1
    65ba:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    65bc:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    65be:	42bc      	cmp	r4, r7
    65c0:	bf28      	it	cs
    65c2:	463c      	movcs	r4, r7
    65c4:	4294      	cmp	r4, r2
    65c6:	bf28      	it	cs
    65c8:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    65ca:	4649      	mov	r1, r9
    65cc:	4428      	add	r0, r5
    65ce:	4622      	mov	r2, r4
    65d0:	f000 f85b 	bl	668a <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    65d4:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    65d6:	4425      	add	r5, r4
      WrOff = 0u;
    65d8:	42ab      	cmp	r3, r5
    65da:	bf08      	it	eq
    65dc:	2500      	moveq	r5, #0
  } while (NumBytes);
    65de:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    65e0:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    65e2:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    65e4:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    65e6:	d1e1      	bne.n	65ac <_WriteBlocking+0x10>
}
    65e8:	4640      	mov	r0, r8
    65ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000065ee <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    65ee:	f7fc b923 	b.w	2838 <_DoInit>

000065f2 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    65f2:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    65f4:	f7ff fffb 	bl	65ee <SEGGER_RTT_Init>

	return 0;
}
    65f8:	2000      	movs	r0, #0
    65fa:	bd08      	pop	{r3, pc}

000065fc <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    65fc:	2100      	movs	r1, #0
    65fe:	2001      	movs	r0, #1
    6600:	f7fc baa6 	b.w	2b50 <z_arm_fatal_error>

00006604 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    6604:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    6606:	6800      	ldr	r0, [r0, #0]
    6608:	f7fc baa2 	b.w	2b50 <z_arm_fatal_error>

0000660c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    660c:	b508      	push	{r3, lr}
	handler();
    660e:	f7fc fad7 	bl	2bc0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    6612:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    6616:	f7fc bd3f 	b.w	3098 <z_arm_exc_exit>

0000661a <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    661a:	3901      	subs	r1, #1
    661c:	4603      	mov	r3, r0
    661e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    6622:	b90a      	cbnz	r2, 6628 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    6624:	701a      	strb	r2, [r3, #0]

	return dest;
}
    6626:	4770      	bx	lr
		*d = *s;
    6628:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    662c:	e7f7      	b.n	661e <strcpy+0x4>

0000662e <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
    662e:	b570      	push	{r4, r5, r6, lr}
    6630:	4605      	mov	r5, r0
    6632:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    6634:	b142      	cbz	r2, 6648 <strncpy+0x1a>
    6636:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
    663a:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
    663c:	b92c      	cbnz	r4, 664a <strncpy+0x1c>
    663e:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
    6640:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
    6644:	429a      	cmp	r2, r3
    6646:	d1fb      	bne.n	6640 <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
    6648:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
    664a:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
    664e:	4632      	mov	r2, r6
    6650:	e7ef      	b.n	6632 <strncpy+0x4>

00006652 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6652:	4603      	mov	r3, r0
	size_t n = 0;
    6654:	2000      	movs	r0, #0

	while (*s != '\0') {
    6656:	5c1a      	ldrb	r2, [r3, r0]
    6658:	b902      	cbnz	r2, 665c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    665a:	4770      	bx	lr
		n++;
    665c:	3001      	adds	r0, #1
    665e:	e7fa      	b.n	6656 <strlen+0x4>

00006660 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    6660:	4603      	mov	r3, r0
	size_t n = 0;
    6662:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    6664:	5c1a      	ldrb	r2, [r3, r0]
    6666:	b10a      	cbz	r2, 666c <strnlen+0xc>
    6668:	4288      	cmp	r0, r1
    666a:	d100      	bne.n	666e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    666c:	4770      	bx	lr
		n++;
    666e:	3001      	adds	r0, #1
    6670:	e7f8      	b.n	6664 <strnlen+0x4>

00006672 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    6672:	1e43      	subs	r3, r0, #1
    6674:	3901      	subs	r1, #1
    6676:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    667a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    667e:	4282      	cmp	r2, r0
    6680:	d101      	bne.n	6686 <strcmp+0x14>
    6682:	2a00      	cmp	r2, #0
    6684:	d1f7      	bne.n	6676 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    6686:	1a10      	subs	r0, r2, r0
    6688:	4770      	bx	lr

0000668a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    668a:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    668c:	ea81 0400 	eor.w	r4, r1, r0
    6690:	07a5      	lsls	r5, r4, #30
    6692:	4603      	mov	r3, r0
    6694:	d00b      	beq.n	66ae <memcpy+0x24>
    6696:	3b01      	subs	r3, #1
    6698:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    669a:	4291      	cmp	r1, r2
    669c:	d11b      	bne.n	66d6 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    669e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    66a0:	2a00      	cmp	r2, #0
    66a2:	d0fc      	beq.n	669e <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    66a4:	f811 4b01 	ldrb.w	r4, [r1], #1
    66a8:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    66ac:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    66ae:	079c      	lsls	r4, r3, #30
    66b0:	d1f6      	bne.n	66a0 <memcpy+0x16>
    66b2:	f022 0403 	bic.w	r4, r2, #3
    66b6:	1f1d      	subs	r5, r3, #4
    66b8:	0896      	lsrs	r6, r2, #2
    66ba:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    66bc:	42b9      	cmp	r1, r7
    66be:	d105      	bne.n	66cc <memcpy+0x42>
    66c0:	f06f 0503 	mvn.w	r5, #3
    66c4:	fb05 2206 	mla	r2, r5, r6, r2
		d_byte = (unsigned char *)d_word;
    66c8:	4423      	add	r3, r4
    66ca:	e7e4      	b.n	6696 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    66cc:	f851 cb04 	ldr.w	ip, [r1], #4
    66d0:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    66d4:	e7f2      	b.n	66bc <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    66d6:	f811 4b01 	ldrb.w	r4, [r1], #1
    66da:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    66de:	e7dc      	b.n	669a <memcpy+0x10>

000066e0 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    66e0:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    66e2:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    66e4:	4604      	mov	r4, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    66e6:	07a3      	lsls	r3, r4, #30
    66e8:	d111      	bne.n	670e <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    66ea:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
	c_word |= c_word << 16;
    66ee:	ea43 4503 	orr.w	r5, r3, r3, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    66f2:	f022 0303 	bic.w	r3, r2, #3
    66f6:	0896      	lsrs	r6, r2, #2
    66f8:	4423      	add	r3, r4
    66fa:	429c      	cmp	r4, r3
    66fc:	d10d      	bne.n	671a <memset+0x3a>
    66fe:	f06f 0403 	mvn.w	r4, #3
    6702:	fb04 2206 	mla	r2, r4, r6, r2
    6706:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    6708:	4293      	cmp	r3, r2
    670a:	d109      	bne.n	6720 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    670c:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    670e:	2a00      	cmp	r2, #0
    6710:	d0fc      	beq.n	670c <memset+0x2c>
		*(d_byte++) = c_byte;
    6712:	f804 1b01 	strb.w	r1, [r4], #1
		n--;
    6716:	3a01      	subs	r2, #1
    6718:	e7e5      	b.n	66e6 <memset+0x6>
		*(d_word++) = c_word;
    671a:	f844 5b04 	str.w	r5, [r4], #4
		n -= sizeof(mem_word_t);
    671e:	e7ec      	b.n	66fa <memset+0x1a>
		*(d_byte++) = c_byte;
    6720:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6724:	e7f0      	b.n	6708 <memset+0x28>

00006726 <_stdout_hook_default>:
}
    6726:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    672a:	4770      	bx	lr

0000672c <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    672c:	f7fd baf4 	b.w	3d18 <SystemInit>

00006730 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
    6730:	b082      	sub	sp, #8
    6732:	ab02      	add	r3, sp, #8
    6734:	e903 0003 	stmdb	r3, {r0, r1}
	switch (info.state) {
    6738:	f89d 3000 	ldrb.w	r3, [sp]
    673c:	2b06      	cmp	r3, #6
    673e:	d108      	bne.n	6752 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    6740:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6744:	2201      	movs	r2, #1
    6746:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    674a:	f3bf 8f4f 	dsb	sy
        __WFE();
    674e:	bf20      	wfe
    while (true)
    6750:	e7fd      	b.n	674e <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    6752:	b002      	add	sp, #8
    6754:	4770      	bx	lr

00006756 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    6756:	b082      	sub	sp, #8
    6758:	ab02      	add	r3, sp, #8
    675a:	e903 0003 	stmdb	r3, {r0, r1}
    675e:	2300      	movs	r3, #0
    6760:	f383 8811 	msr	BASEPRI, r3
    6764:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    6768:	b002      	add	sp, #8
    676a:	4770      	bx	lr

0000676c <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    676c:	f000 001f 	and.w	r0, r0, #31
    6770:	0080      	lsls	r0, r0, #2
    6772:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    6776:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    677a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    677e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    6782:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    6786:	4770      	bx	lr

00006788 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6788:	6843      	ldr	r3, [r0, #4]
    678a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    678c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    6790:	600b      	str	r3, [r1, #0]
}
    6792:	2000      	movs	r0, #0
    6794:	4770      	bx	lr

00006796 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6796:	6843      	ldr	r3, [r0, #4]
    6798:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    679a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    679e:	4042      	eors	r2, r0
    67a0:	400a      	ands	r2, r1
    67a2:	4042      	eors	r2, r0
    p_reg->OUT = value;
    67a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    67a8:	2000      	movs	r0, #0
    67aa:	4770      	bx	lr

000067ac <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    67ac:	6843      	ldr	r3, [r0, #4]
    67ae:	685b      	ldr	r3, [r3, #4]
}
    67b0:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    67b2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    67b6:	4770      	bx	lr

000067b8 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    67b8:	6843      	ldr	r3, [r0, #4]
    67ba:	685b      	ldr	r3, [r3, #4]
}
    67bc:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    67be:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    67c2:	4770      	bx	lr

000067c4 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    67c4:	6843      	ldr	r3, [r0, #4]
    67c6:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    67c8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    67cc:	404b      	eors	r3, r1
    p_reg->OUT = value;
    67ce:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    67d2:	2000      	movs	r0, #0
    67d4:	4770      	bx	lr

000067d6 <gpio_nrfx_manage_callback>:
	return port->data;
    67d6:	6903      	ldr	r3, [r0, #16]
	return list->head;
    67d8:	6858      	ldr	r0, [r3, #4]
{
    67da:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    67dc:	b158      	cbz	r0, 67f6 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    67de:	2400      	movs	r4, #0
    67e0:	4281      	cmp	r1, r0
    67e2:	d112      	bne.n	680a <gpio_nrfx_manage_callback+0x34>
	return node->next;
    67e4:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    67e6:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    67e8:	b954      	cbnz	r4, 6800 <gpio_nrfx_manage_callback+0x2a>
    67ea:	428d      	cmp	r5, r1
	list->head = node;
    67ec:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    67ee:	d100      	bne.n	67f2 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    67f0:	6098      	str	r0, [r3, #8]
	parent->next = child;
    67f2:	2000      	movs	r0, #0
    67f4:	6008      	str	r0, [r1, #0]
	if (set) {
    67f6:	b96a      	cbnz	r2, 6814 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    67f8:	2000      	movs	r0, #0
}
    67fa:	bd30      	pop	{r4, r5, pc}
    67fc:	4628      	mov	r0, r5
    67fe:	e7ef      	b.n	67e0 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    6800:	428d      	cmp	r5, r1
	parent->next = child;
    6802:	6020      	str	r0, [r4, #0]
	list->tail = node;
    6804:	bf08      	it	eq
    6806:	609c      	streq	r4, [r3, #8]
}
    6808:	e7f3      	b.n	67f2 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    680a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    680c:	4604      	mov	r4, r0
    680e:	2d00      	cmp	r5, #0
    6810:	d1f4      	bne.n	67fc <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    6812:	b13a      	cbz	r2, 6824 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    6814:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    6816:	685a      	ldr	r2, [r3, #4]
    6818:	600a      	str	r2, [r1, #0]
	list->head = node;
    681a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    681c:	2800      	cmp	r0, #0
    681e:	d1eb      	bne.n	67f8 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    6820:	6099      	str	r1, [r3, #8]
}
    6822:	e7ea      	b.n	67fa <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    6824:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6828:	e7e7      	b.n	67fa <gpio_nrfx_manage_callback+0x24>

0000682a <gpio_pin_set.isra.0>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    682a:	2301      	movs	r3, #1
    682c:	fa03 f101 	lsl.w	r1, r3, r1
    6830:	6903      	ldr	r3, [r0, #16]
    6832:	681b      	ldr	r3, [r3, #0]
    6834:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    6836:	bf18      	it	ne
    6838:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    683c:	b112      	cbz	r2, 6844 <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
    683e:	6883      	ldr	r3, [r0, #8]
    6840:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    6842:	4718      	bx	r3
    6844:	6883      	ldr	r3, [r0, #8]
    6846:	691b      	ldr	r3, [r3, #16]
    6848:	e7fb      	b.n	6842 <gpio_pin_set.isra.0+0x18>

0000684a <_spi_context_cs_control>:
{
    684a:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
    684c:	6805      	ldr	r5, [r0, #0]
{
    684e:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
    6850:	b1fd      	cbz	r5, 6892 <_spi_context_cs_control+0x48>
    6852:	68ab      	ldr	r3, [r5, #8]
    6854:	b1eb      	cbz	r3, 6892 <_spi_context_cs_control+0x48>
    6856:	6818      	ldr	r0, [r3, #0]
    6858:	b1d8      	cbz	r0, 6892 <_spi_context_cs_control+0x48>
		if (on) {
    685a:	b151      	cbz	r1, 6872 <_spi_context_cs_control+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
    685c:	7a19      	ldrb	r1, [r3, #8]
    685e:	2201      	movs	r2, #1
    6860:	f7ff ffe3 	bl	682a <gpio_pin_set.isra.0>
			k_busy_wait(ctx->config->cs->delay);
    6864:	6823      	ldr	r3, [r4, #0]
    6866:	689b      	ldr	r3, [r3, #8]
    6868:	6858      	ldr	r0, [r3, #4]
}
    686a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    686e:	f000 b993 	b.w	6b98 <z_impl_k_busy_wait>
			if (!force_off &&
    6872:	b912      	cbnz	r2, 687a <_spi_context_cs_control+0x30>
    6874:	88aa      	ldrh	r2, [r5, #4]
    6876:	0492      	lsls	r2, r2, #18
    6878:	d40b      	bmi.n	6892 <_spi_context_cs_control+0x48>
			k_busy_wait(ctx->config->cs->delay);
    687a:	6858      	ldr	r0, [r3, #4]
    687c:	f000 f98c 	bl	6b98 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
    6880:	6823      	ldr	r3, [r4, #0]
    6882:	689b      	ldr	r3, [r3, #8]
    6884:	2200      	movs	r2, #0
    6886:	7a19      	ldrb	r1, [r3, #8]
    6888:	6818      	ldr	r0, [r3, #0]
}
    688a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
    688e:	f7ff bfcc 	b.w	682a <gpio_pin_set.isra.0>
}
    6892:	bd38      	pop	{r3, r4, r5, pc}

00006894 <spi_context_unlock_unconditionally>:
{
    6894:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    6896:	2201      	movs	r2, #1
    6898:	2100      	movs	r1, #0
{
    689a:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    689c:	f7ff ffd5 	bl	684a <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
    68a0:	6923      	ldr	r3, [r4, #16]
    68a2:	b933      	cbnz	r3, 68b2 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
    68a4:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    68a6:	f104 0008 	add.w	r0, r4, #8
}
    68aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    68ae:	f7fe bbcf 	b.w	5050 <z_impl_k_sem_give>
    68b2:	bd10      	pop	{r4, pc}

000068b4 <spi_nrfx_release>:
	return dev->data;
    68b4:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    68b6:	6803      	ldr	r3, [r0, #0]
    68b8:	428b      	cmp	r3, r1
{
    68ba:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    68bc:	d106      	bne.n	68cc <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    68be:	f890 4054 	ldrb.w	r4, [r0, #84]	; 0x54
    68c2:	b934      	cbnz	r4, 68d2 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    68c4:	f7ff ffe6 	bl	6894 <spi_context_unlock_unconditionally>
	return 0;
    68c8:	4620      	mov	r0, r4
}
    68ca:	bd10      	pop	{r4, pc}
		return -EINVAL;
    68cc:	f06f 0015 	mvn.w	r0, #21
    68d0:	e7fb      	b.n	68ca <spi_nrfx_release+0x16>
		return -EBUSY;
    68d2:	f06f 000f 	mvn.w	r0, #15
    68d6:	e7f8      	b.n	68ca <spi_nrfx_release+0x16>

000068d8 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    68d8:	6902      	ldr	r2, [r0, #16]
{
    68da:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    68dc:	e892 0003 	ldmia.w	r2, {r0, r1}
    68e0:	e883 0003 	stmia.w	r3, {r0, r1}
}
    68e4:	2000      	movs	r0, #0
    68e6:	4770      	bx	lr

000068e8 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    68e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    68ec:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
    68f0:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    68f2:	bf04      	itt	eq
    68f4:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
    68f8:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
    68fc:	1f83      	subs	r3, r0, #6
    68fe:	4258      	negs	r0, r3
    6900:	4158      	adcs	r0, r3
    6902:	4770      	bx	lr

00006904 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    6904:	4700      	bx	r0

00006906 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    6906:	f000 b947 	b.w	6b98 <z_impl_k_busy_wait>

0000690a <nrfx_clock_enable>:
{
    690a:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    690c:	2000      	movs	r0, #0
    690e:	f7fc f8a7 	bl	2a60 <arch_irq_is_enabled>
    6912:	b918      	cbnz	r0, 691c <nrfx_clock_enable+0x12>
}
    6914:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6918:	f7fc b892 	b.w	2a40 <arch_irq_enable>
    691c:	bd08      	pop	{r3, pc}

0000691e <transfer_byte>:
{
    691e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
    6920:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    6924:	698a      	ldr	r2, [r1, #24]
    6926:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
    6928:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    692c:	6a0b      	ldr	r3, [r1, #32]
    692e:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
    6930:	bf3e      	ittt	cc
    6932:	694a      	ldrcc	r2, [r1, #20]
    6934:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
    6938:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
    693a:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
    693c:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
    6940:	1c53      	adds	r3, r2, #1
    6942:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
    6944:	3202      	adds	r2, #2
    if (p_cb->abort)
    6946:	b13c      	cbz	r4, 6958 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    6948:	690c      	ldr	r4, [r1, #16]
    694a:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    694c:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
    694e:	bf38      	it	cc
    6950:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    6952:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
    6954:	bf88      	it	hi
    6956:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    6958:	690d      	ldr	r5, [r1, #16]
    695a:	4295      	cmp	r5, r2
    695c:	d905      	bls.n	696a <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
    695e:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
    6960:	5c9b      	ldrb	r3, [r3, r2]
    6962:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    6966:	2001      	movs	r0, #1
    6968:	e00a      	b.n	6980 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    696a:	698c      	ldr	r4, [r1, #24]
    696c:	4294      	cmp	r4, r2
    696e:	d901      	bls.n	6974 <transfer_byte+0x56>
    6970:	7fcb      	ldrb	r3, [r1, #31]
    6972:	e7f6      	b.n	6962 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    6974:	42ab      	cmp	r3, r5
    6976:	d3f6      	bcc.n	6966 <transfer_byte+0x48>
    6978:	42a3      	cmp	r3, r4
    697a:	bf2c      	ite	cs
    697c:	2000      	movcs	r0, #0
    697e:	2001      	movcc	r0, #1
}
    6980:	b003      	add	sp, #12
    6982:	bd30      	pop	{r4, r5, pc}

00006984 <z_device_state_init>:
}
    6984:	4770      	bx	lr

00006986 <z_device_ready>:
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0U);
    6986:	68c3      	ldr	r3, [r0, #12]
    6988:	8818      	ldrh	r0, [r3, #0]
    698a:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
    698e:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    6992:	4258      	negs	r0, r3
    6994:	4158      	adcs	r0, r3
    6996:	4770      	bx	lr

00006998 <arch_system_halt>:
	__asm__ volatile(
    6998:	f04f 0220 	mov.w	r2, #32
    699c:	f3ef 8311 	mrs	r3, BASEPRI
    69a0:	f382 8811 	msr	BASEPRI, r2
    69a4:	f3bf 8f6f 	isb	sy
	for (;;) {
    69a8:	e7fe      	b.n	69a8 <arch_system_halt+0x10>

000069aa <z_pm_save_idle_exit>:
{
    69aa:	b508      	push	{r3, lr}
	pm_system_resume();
    69ac:	f7fb fc0e 	bl	21cc <pm_system_resume>
}
    69b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    69b4:	f7ff bdcc 	b.w	6550 <sys_clock_idle_exit>

000069b8 <k_mem_slab_init>:
{
    69b8:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    69ba:	2400      	movs	r4, #0
    69bc:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    69be:	ea41 0402 	orr.w	r4, r1, r2
    69c2:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    69c6:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    69ca:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    69cc:	d10c      	bne.n	69e8 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    69ce:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    69d0:	42a3      	cmp	r3, r4
    69d2:	d103      	bne.n	69dc <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    69d4:	e9c0 0000 	strd	r0, r0, [r0]
}
    69d8:	2000      	movs	r0, #0
}
    69da:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    69dc:	6945      	ldr	r5, [r0, #20]
    69de:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    69e0:	3401      	adds	r4, #1
		slab->free_list = p;
    69e2:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    69e4:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    69e6:	e7f3      	b.n	69d0 <k_mem_slab_init+0x18>
		return -EINVAL;
    69e8:	f06f 0015 	mvn.w	r0, #21
	return rc;
    69ec:	e7f5      	b.n	69da <k_mem_slab_init+0x22>

000069ee <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    69ee:	f990 300e 	ldrsb.w	r3, [r0, #14]
    69f2:	428b      	cmp	r3, r1
    69f4:	d001      	beq.n	69fa <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    69f6:	f7fe b9d9 	b.w	4dac <z_set_prio>
}
    69fa:	2000      	movs	r0, #0
    69fc:	4770      	bx	lr

000069fe <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    69fe:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    6a02:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6a04:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6a06:	2300      	movs	r3, #0
	node->prev = NULL;
    6a08:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    6a0c:	4770      	bx	lr

00006a0e <unpend_thread_no_timeout>:
{
    6a0e:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    6a10:	f7ff fff5 	bl	69fe <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6a14:	7b43      	ldrb	r3, [r0, #13]
    6a16:	f023 0302 	bic.w	r3, r3, #2
    6a1a:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    6a1c:	2300      	movs	r3, #0
    6a1e:	6083      	str	r3, [r0, #8]
}
    6a20:	bd08      	pop	{r3, pc}

00006a22 <z_unpend_thread_no_timeout>:
{
    6a22:	b508      	push	{r3, lr}
    6a24:	f04f 0320 	mov.w	r3, #32
    6a28:	f3ef 8111 	mrs	r1, BASEPRI
    6a2c:	f383 8811 	msr	BASEPRI, r3
    6a30:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    6a34:	f7ff ffeb 	bl	6a0e <unpend_thread_no_timeout>
	__asm__ volatile(
    6a38:	f381 8811 	msr	BASEPRI, r1
    6a3c:	f3bf 8f6f 	isb	sy
}
    6a40:	bd08      	pop	{r3, pc}

00006a42 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6a42:	4603      	mov	r3, r0
    6a44:	b920      	cbnz	r0, 6a50 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6a46:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    6a4a:	b90a      	cbnz	r2, 6a50 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    6a4c:	f7fb bfaa 	b.w	29a4 <arch_swap>
    6a50:	f383 8811 	msr	BASEPRI, r3
    6a54:	f3bf 8f6f 	isb	sy
}
    6a58:	4770      	bx	lr

00006a5a <z_reschedule_unlocked>:
	__asm__ volatile(
    6a5a:	f04f 0320 	mov.w	r3, #32
    6a5e:	f3ef 8011 	mrs	r0, BASEPRI
    6a62:	f383 8811 	msr	BASEPRI, r3
    6a66:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    6a6a:	f7ff bfea 	b.w	6a42 <z_reschedule_irqlock>

00006a6e <z_priq_dumb_best>:
{
    6a6e:	4603      	mov	r3, r0
	return list->head == list;
    6a70:	6800      	ldr	r0, [r0, #0]
}
    6a72:	4283      	cmp	r3, r0
    6a74:	bf08      	it	eq
    6a76:	2000      	moveq	r0, #0
    6a78:	4770      	bx	lr

00006a7a <add_to_waitq_locked>:
{
    6a7a:	b538      	push	{r3, r4, r5, lr}
    6a7c:	4604      	mov	r4, r0
    6a7e:	460d      	mov	r5, r1
	unready_thread(thread);
    6a80:	f7fe f826 	bl	4ad0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    6a84:	7b63      	ldrb	r3, [r4, #13]
    6a86:	f043 0302 	orr.w	r3, r3, #2
    6a8a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    6a8c:	b195      	cbz	r5, 6ab4 <add_to_waitq_locked+0x3a>
    6a8e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    6a90:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6a92:	429d      	cmp	r5, r3
    6a94:	d015      	beq.n	6ac2 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6a96:	b1a3      	cbz	r3, 6ac2 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    6a98:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6a9c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    6aa0:	4291      	cmp	r1, r2
    6aa2:	d008      	beq.n	6ab6 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    6aa4:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    6aa6:	2a00      	cmp	r2, #0
    6aa8:	dd05      	ble.n	6ab6 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    6aaa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6aac:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6ab0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6ab2:	605c      	str	r4, [r3, #4]
}
    6ab4:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    6ab6:	686a      	ldr	r2, [r5, #4]
    6ab8:	4293      	cmp	r3, r2
    6aba:	d002      	beq.n	6ac2 <add_to_waitq_locked+0x48>
    6abc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6abe:	2b00      	cmp	r3, #0
    6ac0:	d1ec      	bne.n	6a9c <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    6ac2:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    6ac4:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    6ac8:	601c      	str	r4, [r3, #0]
	list->tail = node;
    6aca:	606c      	str	r4, [r5, #4]
}
    6acc:	e7f2      	b.n	6ab4 <add_to_waitq_locked+0x3a>

00006ace <z_ready_thread>:
{
    6ace:	b510      	push	{r4, lr}
    6ad0:	f04f 0320 	mov.w	r3, #32
    6ad4:	f3ef 8411 	mrs	r4, BASEPRI
    6ad8:	f383 8811 	msr	BASEPRI, r3
    6adc:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    6ae0:	f7fe f910 	bl	4d04 <ready_thread>
	__asm__ volatile(
    6ae4:	f384 8811 	msr	BASEPRI, r4
    6ae8:	f3bf 8f6f 	isb	sy
}
    6aec:	bd10      	pop	{r4, pc}

00006aee <z_thread_timeout>:
{
    6aee:	b510      	push	{r4, lr}
    6af0:	4601      	mov	r1, r0
	__asm__ volatile(
    6af2:	f04f 0320 	mov.w	r3, #32
    6af6:	f3ef 8411 	mrs	r4, BASEPRI
    6afa:	f383 8811 	msr	BASEPRI, r3
    6afe:	f3bf 8f6f 	isb	sy
		if (!killed) {
    6b02:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    6b06:	f013 0f28 	tst.w	r3, #40	; 0x28
    6b0a:	d10d      	bne.n	6b28 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    6b0c:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    6b10:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    6b12:	b10b      	cbz	r3, 6b18 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    6b14:	f7ff ff7b 	bl	6a0e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6b18:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    6b1c:	f023 0314 	bic.w	r3, r3, #20
    6b20:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    6b24:	f7fe f8ee 	bl	4d04 <ready_thread>
	__asm__ volatile(
    6b28:	f384 8811 	msr	BASEPRI, r4
    6b2c:	f3bf 8f6f 	isb	sy
}
    6b30:	bd10      	pop	{r4, pc}

00006b32 <z_unpend1_no_timeout>:
{
    6b32:	b510      	push	{r4, lr}
	__asm__ volatile(
    6b34:	f04f 0320 	mov.w	r3, #32
    6b38:	f3ef 8411 	mrs	r4, BASEPRI
    6b3c:	f383 8811 	msr	BASEPRI, r3
    6b40:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    6b44:	f7ff ff93 	bl	6a6e <z_priq_dumb_best>
		if (thread != NULL) {
    6b48:	4601      	mov	r1, r0
    6b4a:	b108      	cbz	r0, 6b50 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
    6b4c:	f7ff ff5f 	bl	6a0e <unpend_thread_no_timeout>
	__asm__ volatile(
    6b50:	f384 8811 	msr	BASEPRI, r4
    6b54:	f3bf 8f6f 	isb	sy
}
    6b58:	4608      	mov	r0, r1
    6b5a:	bd10      	pop	{r4, pc}

00006b5c <z_unpend_first_thread>:
{
    6b5c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6b5e:	f04f 0320 	mov.w	r3, #32
    6b62:	f3ef 8511 	mrs	r5, BASEPRI
    6b66:	f383 8811 	msr	BASEPRI, r3
    6b6a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    6b6e:	f7ff ff7e 	bl	6a6e <z_priq_dumb_best>
		if (thread != NULL) {
    6b72:	4604      	mov	r4, r0
    6b74:	b120      	cbz	r0, 6b80 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    6b76:	f7ff ff4a 	bl	6a0e <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    6b7a:	3018      	adds	r0, #24
    6b7c:	f000 f815 	bl	6baa <z_abort_timeout>
	__asm__ volatile(
    6b80:	f385 8811 	msr	BASEPRI, r5
    6b84:	f3bf 8f6f 	isb	sy
}
    6b88:	4620      	mov	r0, r4
    6b8a:	bd38      	pop	{r3, r4, r5, pc}

00006b8c <k_is_in_isr>:
    6b8c:	f3ef 8005 	mrs	r0, IPSR
}
    6b90:	3800      	subs	r0, #0
    6b92:	bf18      	it	ne
    6b94:	2001      	movne	r0, #1
    6b96:	4770      	bx	lr

00006b98 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0U) {
    6b98:	b108      	cbz	r0, 6b9e <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
    6b9a:	f7fc bb83 	b.w	32a4 <arch_busy_wait>
}
    6b9e:	4770      	bx	lr

00006ba0 <z_impl_k_thread_name_set>:
}
    6ba0:	f06f 0046 	mvn.w	r0, #70	; 0x46
    6ba4:	4770      	bx	lr

00006ba6 <k_thread_name_get>:
}
    6ba6:	2000      	movs	r0, #0
    6ba8:	4770      	bx	lr

00006baa <z_abort_timeout>:
{
    6baa:	b510      	push	{r4, lr}
	__asm__ volatile(
    6bac:	f04f 0220 	mov.w	r2, #32
    6bb0:	f3ef 8411 	mrs	r4, BASEPRI
    6bb4:	f382 8811 	msr	BASEPRI, r2
    6bb8:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    6bbc:	6803      	ldr	r3, [r0, #0]
    6bbe:	b13b      	cbz	r3, 6bd0 <z_abort_timeout+0x26>
			remove_timeout(to);
    6bc0:	f7fe fb9e 	bl	5300 <remove_timeout>
			ret = 0;
    6bc4:	2000      	movs	r0, #0
	__asm__ volatile(
    6bc6:	f384 8811 	msr	BASEPRI, r4
    6bca:	f3bf 8f6f 	isb	sy
}
    6bce:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    6bd0:	f06f 0015 	mvn.w	r0, #21
    6bd4:	e7f7      	b.n	6bc6 <z_abort_timeout+0x1c>

00006bd6 <z_get_next_timeout_expiry>:
{
    6bd6:	b510      	push	{r4, lr}
	__asm__ volatile(
    6bd8:	f04f 0320 	mov.w	r3, #32
    6bdc:	f3ef 8411 	mrs	r4, BASEPRI
    6be0:	f383 8811 	msr	BASEPRI, r3
    6be4:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    6be8:	f7fe fb62 	bl	52b0 <next_timeout>
	__asm__ volatile(
    6bec:	f384 8811 	msr	BASEPRI, r4
    6bf0:	f3bf 8f6f 	isb	sy
}
    6bf4:	bd10      	pop	{r4, pc}

00006bf6 <z_set_timeout_expiry>:
{
    6bf6:	b570      	push	{r4, r5, r6, lr}
    6bf8:	4604      	mov	r4, r0
    6bfa:	460d      	mov	r5, r1
	__asm__ volatile(
    6bfc:	f04f 0320 	mov.w	r3, #32
    6c00:	f3ef 8611 	mrs	r6, BASEPRI
    6c04:	f383 8811 	msr	BASEPRI, r3
    6c08:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    6c0c:	f7fe fb50 	bl	52b0 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    6c10:	2801      	cmp	r0, #1
    6c12:	dd05      	ble.n	6c20 <z_set_timeout_expiry+0x2a>
    6c14:	42a0      	cmp	r0, r4
    6c16:	db03      	blt.n	6c20 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    6c18:	4629      	mov	r1, r5
    6c1a:	4620      	mov	r0, r4
    6c1c:	f7fb fda6 	bl	276c <sys_clock_set_timeout>
	__asm__ volatile(
    6c20:	f386 8811 	msr	BASEPRI, r6
    6c24:	f3bf 8f6f 	isb	sy
}
    6c28:	bd70      	pop	{r4, r5, r6, pc}

00006c2a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    6c2a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    6c2c:	f7fe fc62 	bl	54f4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    6c30:	bd08      	pop	{r3, pc}

00006c32 <k_timer_init>:
	timer->status = 0U;
    6c32:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    6c34:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    6c38:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    6c3c:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    6c40:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    6c44:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    6c46:	6343      	str	r3, [r0, #52]	; 0x34
}
    6c48:	4770      	bx	lr

00006c4a <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    6c4a:	b510      	push	{r4, lr}
    6c4c:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
    6c4e:	f7ff ffac 	bl	6baa <z_abort_timeout>

	if (inactive) {
    6c52:	b9b0      	cbnz	r0, 6c82 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    6c54:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6c56:	b10b      	cbz	r3, 6c5c <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    6c58:	4620      	mov	r0, r4
    6c5a:	4798      	blx	r3
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    6c5c:	f104 0018 	add.w	r0, r4, #24
    6c60:	f7ff ff67 	bl	6b32 <z_unpend1_no_timeout>

	if (pending_thread != NULL) {
    6c64:	b168      	cbz	r0, 6c82 <z_impl_k_timer_stop+0x38>
		z_ready_thread(pending_thread);
    6c66:	f7ff ff32 	bl	6ace <z_ready_thread>
	__asm__ volatile(
    6c6a:	f04f 0320 	mov.w	r3, #32
    6c6e:	f3ef 8011 	mrs	r0, BASEPRI
    6c72:	f383 8811 	msr	BASEPRI, r3
    6c76:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
    6c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    6c7e:	f7ff bee0 	b.w	6a42 <z_reschedule_irqlock>
    6c82:	bd10      	pop	{r4, pc}

00006c84 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    6c84:	4770      	bx	lr
